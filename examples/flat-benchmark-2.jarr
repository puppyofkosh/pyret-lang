if(typeof window === 'undefined') {
var requirejs = require("requirejs");
var define = requirejs.define;
}
define('pyret-base/js/type-util',[], function() {

  var any = { "tag": "any" };
  var string = { "tag": "name", "module": "builtin", "name": "String" }
  var number = { "tag": "name", "module": "builtin", "name": "Number" }
  var boolean = { "tag": "name", "module": "builtin", "name": "Boolean" }
  var nothing = { "tag": "name", "module": "builtin", "name": "Nothing" }

  function forall(args, onto) {
    if(!Array.isArray(args)) { throw "Expected list for args, but got " + String(args); }
    args.forEach(function(a) {
      if(typeof a !== "string") { throw "Type args must be strings, but got: " + String(a); }
    });
    return {
      tag: "forall",
      args: args,
      onto: onto
    }
  }

  function arrow(args, ret) {
    if(!Array.isArray(args)) { throw "Expected list for arrow args, but got " + String(args); }
    return {
      tag: "arrow",
      args: args,
      ret: ret
    };
  }

  function tyapp(onto, args) {
    if(!Array.isArray(args)) { throw "Expected list for tyapp args, but got " + String(args); }
    return {
      tag: "tyapp",
      onto: onto,
      args: args
    };
  }

  function tyvar(name) {
    return {
      tag: "tyvar",
      name: name
    };
  }

  function builtinName(name) {
    return {
      tag: "name",
      module: "builtin",
      name: name
    };
  }

  function libName(lib, name) {
    return {
      tag: "name",
      module: "pyret-builtin://" + lib,
      name: name
    };
  }

  function localType(name) {
    return {
      tag: "name",
      module: "LOCAL",
      name: name
    };
  }

  function record(fields) {
    return {
      tag: "record",
      fields: fields
    };
  }

  function dataType(name, params, variants, methods) {
    return {
      tag: "data",
      name: name,
      params: params,
      variants: variants,
      methods: methods
    };
  }

  function variant(name, vmembers) {
    return {
      tag: "variant",
      name: name,
      vmembers: vmembers
    };
  }

  function singletonVariant(name) {
    return {
      tag: "singleton-variant",
      name: name
    }
  }

  function variantMember(name, kind, typ) {
    return {
      tag: "variant-member",
      kind: kind,
      typ: typ
    };
  }

  function toPyret(runtime, typ) {
    var O = runtime.makeObject;
    var L = runtime.ffi.makeList;
    var tp = function(thing) { return toPyret(runtime, thing); };
    if(typ === "tany") { return O({ tag: "any" }); }
    switch(typ.tag) {
      case "any":
        return O({ tag: "any"});
      case "data":
        var methods = Object.keys(typ.methods).map(function(k) {
          return O({ name: k, value: tp(typ.methods[k]) });
        });
        return O({
          tag: "data",
          name: typ.name,
          params: L(typ.params),
          variants: L(typ.variants.map(tp)),
          methods: L(methods)
        });
      case "variant":
        return O({
          tag: "variant",
          name: typ.name,
          vmembers: L(typ.vmembers.map(tp)),
        });
      case "singleton-variant":
        return O({
          tag: "singleton-variant",
          name: typ.name
        });
      case "variant-member":
        return O({
          tag: "variant-member",
          name: typ.name,
          kind: typ.kind,
          typ: tp(typ.typ),
        });
      case "record":
        return O({
          tag: "record",
          fields: L(Object.keys(typ.fields).map(function(f) { return O({ tag: "member", name: f, value: tp(typ.fields[f]) }); })),
        });
      case "name":
        return O({
          tag: "name",
          origin: O(typ.origin),
          name: typ.name
        });
      case "forall":
        return O({
          tag: "forall",
          args: L(typ.args),
          onto: tp(typ.onto)
        });
      case "tyvar":
        return O({
          tag: "tyvar",
          name: typ.name
        });
      case "arrow":
        return O({
          tag: "arrow",
          args: L(typ.args.map(tp)),
          ret: tp(typ.ret)
        });
      case "tuple":
        return O({
          tag: "tuple",
          elts: L(typ.elts.map(tp)),
        });
      case "tyapp":
        return O({
          tag: "tyapp",
          args: L(typ.args.map(tp)),
          onto: tp(typ.onto)
        });
      default:
        console.error(typ);
        throw new Error("No such tag: " + typ.tag);
    }
  }

  function providesToPyret(runtime, provides) {
    if(Array.isArray(provides.values)) {
      var values = provides.values;
    }
    else {
      var values = Object.keys(provides.values).map(function(k) {
        return runtime.makeObject({
          name: k,
          typ: toPyret(runtime, provides.values[k])
        });
      });
    }
    if(Array.isArray(provides.types)) {
      var aliases = provides.types;
    }
    else if(typeof provides.aliases === "object") {
      var aliases = Object.keys(provides.aliases).map(function(k) {
        return runtime.makeObject({
          name: k,
          typ: toPyret(runtime, provides.aliases[k])
        });
      });
    }
    if(provides.datatypes) {
      if(Array.isArray(provides.datatypes)) {
        var datatypes = provides.datatypes;
      }
      else if(typeof provides === "object") {
        var datatypes = Object.keys(provides.datatypes).map(function(k) {
          return runtime.makeObject({
            name: k,
            typ: toPyret(runtime, provides.datatypes[k])
          });
        });
      }
    }
    else {
      var datatypes = [];
    }
    return runtime.makeObject({
      values: runtime.ffi.makeList(values),
      aliases: runtime.ffi.makeList(aliases),
      datatypes: runtime.ffi.makeList(datatypes)
    });
  }

  function expandType(typ, shorthands) {
    var fromGlobal = { "import-type": "uri", uri: "builtin://global" };
    var prims = ["Number", "String", "Boolean", "Nothing", "Any"];
    function mkName(origin, name) {
      return { tag: "name", origin: origin, name: name };
    }
    function p(name) { return mkName(fromGlobal, name); }
    function mkApp1(tycon, arg) {
      return {
        tag: "tyapp",
        onto: expandType(tycon, shorthands),
        args: [ expandType(arg, shorthands) ]
      };
    }
    var constrs = {
      "Array": function(name, arg) { 
        return mkApp1(mkName({ "import-type": "uri", uri: "builtin://arrays" }, name), arg);
      },
      "RawArray": function(name, arg) { return mkApp1(mkName(fromGlobal, name), arg); },
      "List": function(name, arg) { 
        return mkApp1(mkName({ "import-type": "uri", uri: "builtin://lists" }, name), arg); 
      },
      "Option": function(name, arg) { 
        return mkApp1(mkName({ "import-type": "uri", uri: "builtin://option" }, name), arg); 
      },
      "Maker": function(_, arg, ret) {
        var maker = {
          "make":  ["arrow", [["RawArray", arg]], ret],
          "make0": ["arrow", [], ret],
          "make1": ["arrow", [arg], ret],
          "make2": ["arrow", [arg, arg], ret],
          "make3": ["arrow", [arg, arg, arg], ret],
          "make4": ["arrow", [arg, arg, arg, arg], ret],
          "make5": ["arrow", [arg, arg, arg, arg, arg], ret]
        };
        return expandType(["record", maker], shorthands);
      }
    };
    var iA = Array.isArray;
    var iO = function(o) { return typeof o === "object" && o !== null && !(iA(o)); };


    function expandMember(m, shorthands) {
      if(!iA(m)) {
        throw new Error("Serialized members should be arrays, got: " + String(m));
      }
      if(m.length === 2) {
        return {
          tag: "variant-member",
          kind: "normal",
          name: m[0],
          typ: expandType(m[1], shorthands)
        };
      }
      else if(m.length === 3) {
        return {
          tag: "variant-member",
          kind: "ref",
          name: m[1],
          typ: expandType(m[2], shorthands)
        };
      }
      else {
        throw new Error("Bad serialized member: " + String(m));
      }
    }

    function expandVariant(v, shorthands) {
      if(!iA(v)) {
        throw new Error("Serialized variant types should be arrays, got: " + String(v));
      }
      else {
        if(v.length === 1) {
          return singletonVariant(v[0]);
        }
        else if(v.length === 2) {
          return variant(v[0], v[1].map(function(m) { return expandMember(m, shorthands); }));
        }
        else {
          throw new Error("Bad serialized variant: " + String(v));
        }
      }
    }

    if(typeof typ === "string") {
      if(typ === "tany") {
        return "tany";
      }
      else if(prims.indexOf(typ) !== -1) {
        return p(typ);
      }
      else if(typ in shorthands) {
        return shorthands[typ];
      }
      else {
        throw new Error("Unknown prim type or shorthand: " + typ);
      }
    }
    else if(Array.isArray(typ)) {
      var head = typ[0];
      if (head in constrs) {
        var constr = constrs[head];
        if(typ.length !== constr.length) {
          throw new Error("Bad tail for type constructor " + head + ": " + String(typ));
        }
        return constr.apply(null, typ);
      }
      else {
        if(head === "arrow" && typ.length === 3 && Array.isArray(typ[1])) {
          return {
            tag: "arrow",
            args: typ[1].map(function(t) { return expandType(t, shorthands); }),
            ret: expandType(typ[2], shorthands)
          };
        }
        else if(head === "tuple" && typ.length === 2 && iA(typ[1])) {
          return {
            tag: "tuple",
            elts: typ[1].map(function(t) { return expandType(t, shorthands); })
          };
        }
        else if(head === "data" && typ.length === 5 && iA(typ[2]) && iA(typ[3]) && iO(typ[4])) {
          return {
            tag: "data",
            name: typ[1],
            params: typ[2],
            variants: typ[3].map(function(v) { return expandVariant(v, shorthands); }),
            methods: expandRecord(typ[4], shorthands)
          };
        }
        else if(head === "tid" && typ.length === 2) {
          return {
            tag: "tyvar",
            name: typ[1]
          };
        }
        else if(head === "forall" && typ.length === 3) {
          return {
            tag: "forall",
            args: typ[1],
            onto: expandType(typ[2], shorthands)
          };
        }
        else if(head === "local") {
          return {
            tag: "name",
            origin: {"import-type": "$ELF"},
            name: typ[1]
          };
        }
        else if(head === "record") {
          return {
            tag: "record",
            fields: expandRecord(typ[1], shorthands)
          };
        }
        else if(head === "tyapp") {
          return {
            tag: "tyapp",
            onto: expandType(typ[1], shorthands),
            args: typ[2].map(function(t) { return expandType(t, shorthands); })
          };
        }
        else {
          throw new Error("Unknown shape or head tag for serialized type: " + String(typ));
        }
      }
    }
    else if(iO(typ)) {
      return typ;
    }
    else {
      throw new Error("Unknown description for serialized type: " + String(typ));
    }
  }

  function expandRecord(r, shorthands) {
    var o = {};
    Object.keys(r).forEach(function(k) {
      o[k] = expandType(r[k], shorthands);
    });
    return o;
  }


  return {
    any: any,
    string: string,
    number: number,
    boolean: boolean,
    nothing: nothing,
    forall: forall,
    arrow: arrow,
    tyapp: tyapp,
    tyvar: tyvar,
    builtinName: builtinName,
    libName: libName,
    localType: localType,
    record: record,
    dataType: dataType,
    toPyret: toPyret,
    providesToPyret: providesToPyret,
    expandType: expandType,
    expandRecord: expandRecord
  };

});



define('pyret-base/js/namespace',[],function() {
    /**@type {!Object}*/
    var noProto = {};

    /**
        A Namespace contains the bindings currenlty defined in the runtime
        @constructor
        @template T 
        ^the type of values stored in the namespace

        @param {!Object.<string, T>} initialBindings
    */
    function Namespace(initialBindings) {
      if (typeof initialBindings !== "object") {
          throw new Error("Non-object " + initialBindings + " given to Namespace constructor");
      }
      /**@type {!Object.<string, T>}*/
      this.bindings = initialBindings;

      /**@type {T}*/
      this.proto = noProto;
    }

    function typify(key) { return "$type$" + key; }

      /**
        Merges this namesspace with another
        @param {!Namespace.<T>} other

        @return {!Namespace.<T>} A namespace that is the result of merging this namespace with the other namespace
      */
      Namespace.prototype.merge = function(other) {
          var combined = Object.create(this.bindings);
          for (var k in other.bindings) {
            combined[k] = other.bindings[k];
          }
          var newNamespace = new Namespace(combined);
          if (other.proto !== noProto) {
            newNamespace.proto = other.proto;
          }
          else {
            newNamespace.proto = this.proto;
          }
          return newNamespace;
      };

      /**
        Gets the value of the specified binding with key 'key'
        Throws an error if binding not bound

        @param {string} key the key to look up
        @return {T} 
      */
      Namespace.prototype.get = function(key) {
          if (key === "__proto__") {
            if (this.proto === noProto) {
                throw new Error("Looked up __proto__, not bound in namespace");
            }
            return this.proto;
          }
          else {
            if (!(key in this.bindings)) {
                throw new Error("Looked up " + key + ", not bound in namespace");
            }
            return this.bindings[key];
          }
      };

      Namespace.prototype.getType = function(key) {
          return this.get(typify(key));
      };



      /**
        Sets the value of the specified binding with key 'key'

        @param {string} key the key to bind
        @param {T} value the value to set
        @return {!Namespace.<T>} the updated namespace
      */
      Namespace.prototype.set = function(key, value) {
          if (key === "__proto__") {
            var newNamespace = new Namespace(this.bindings);
            newNamespace.proto = value;
            return newNamespace;
          } 
          else {
            var o = Object.create(null);
            o[key] = value;
            return this.merge(new Namespace(o));
          }
      };

      Namespace.prototype.setType = function(key, value) {
          return this.set(typify(key), value);
      };

      /**
        Checks whether the namespace has 'key' bound 

        @param {string} key the key to check
        @return {boolean} whether or not key is bound
      */
      Namespace.prototype.hasBinding = function(key) {
          if (key === "__proto__") {
            return this.proto !== noProto;
          }
          else {
            return key in this.bindings;
          }
      };

      /**
        Gives an array of all names bound

        @return {Array.<string>}
      */
      Namespace.prototype.getNames = function() {
        var keys = [];
        if (this.proto !== noProto) { keys.push("__proto__"); }
        for (var key in this.bindings) {
          keys.push(key);
        }
        return keys;
      };

    var makeNamespace = function(bindingsObj) {
      var bindings = Object.create(null);
      Object.keys(bindingsObj).forEach(function(k) {
          bindings[k] = bindingsObj[k];
      });
      return new Namespace(bindings);
    }
    
    return {
        namespace: makeNamespace,
        Namespace: Namespace
      };
});

// Modifications to Danny Yoo's js-numbers library, whose LICENSE is:

/*

Licensing
---------

This software is covered under the following copyright:

 *
 * Copyright (c) 2010  Danny Yoo
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 *

======================================================================

js-numbers uses code from the jsbn library.  The LICENSE to it is:

Licensing
---------

This software is covered under the following copyright:

 *
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 *

Address all questions regarding this license to:

  Tom Wu
  tjw@cs.Stanford.EDU

*/

/*

No notion of levels (complex, exact, inexact, flonum).

No complex numbers.

Added roughnums.

pyretnum := fixnum | boxnum

A fixnum is simply a JS double, and we prefer to use them
whenever possible, viz., for integers that are small enough.

boxnum := BigInteger | Rational | Roughnum.

An integer is either a fixnum or a BigInteger.

*/

define('pyret-base/js/js-numbers',[],function() {
  'use strict';
  // Abbreviation
  var Numbers = {};

  // makeNumericBinop: (fixnum fixnum -> any) (pyretnum pyretnum -> any) -> (pyretnum pyretnum) X
  // Creates a binary function that works either on fixnums or boxnums.
  // Applies the appropriate binary function, ensuring that both pyretnums are
  // coerced to be the same kind.
  var makeNumericBinop = function(onFixnums, onBoxednums, options) {
    options = options || {};
    return function(x, y, errbacks) {
      if (options.isXSpecialCase && options.isXSpecialCase(x, errbacks))
        return options.onXSpecialCase(x, y, errbacks);
      if (options.isYSpecialCase && options.isYSpecialCase(y, errbacks))
        return options.onYSpecialCase(x, y, errbacks);

      if (typeof(x) === 'number' &&
          typeof(y) === 'number') {
        return onFixnums(x, y, errbacks);
      }
      if (typeof(x) === 'number') {
        x = liftFixnumInteger(x, y);
      }
      if (typeof(y) === 'number') {
        y = liftFixnumInteger(y, x);
      }

      if (x instanceof Roughnum) {
        // y is rough, rat or bigint
        if (!(y instanceof Roughnum)) {
          // y is rat or bigint
          y = y.toRoughnum(errbacks);
        }
      } else if (y instanceof Roughnum) {
        // x is rat or bigint
        x = x.toRoughnum(errbacks);
      } else if (x instanceof Rational) {
        // y is rat or bigint
        if (!(y instanceof Rational)) {
          // y is bigint
          y = new Rational(y, 1);
        }
      } else if (y instanceof Rational) {
        // x is bigint
        x = new Rational(x, 1);
      }

      return onBoxednums(x, y, errbacks);
    };
  };

  // fromFixnum: fixnum -> pyretnum
  var fromFixnum = function(x, errbacks) {
    if (!isFinite(x)) {
      return Roughnum.makeInstance(x, errbacks);
    }
    var nf = Math.floor(x);
    if (nf === x) {
      if (isOverflow(nf)) {
        return makeBignum(expandExponent(x+''));
      } else {
        return nf;
      }
    } else {
      //  used to return float, now rational
      var stringRep = x.toString();
      var match = stringRep.match(/^(.*)\.(.*)$/);
      if (match) {
        var afterDecimal = parseInt(match[2]);
        var factorToInt = Math.pow(10, match[2].length);
        var extraFactor = _integerGcd(factorToInt, afterDecimal);
        var multFactor = factorToInt / extraFactor;
        return Rational.makeInstance(Math.round(x*multFactor), Math.round(factorToInt/extraFactor), errbacks);
      } else {
        return Rational.makeInstance(x, 1, errbacks);
      }

    }
  };

  var expandExponent = function(s) {
    var match = s.match(scientificPattern), mantissaChunks, exponent;
    if (match) {
      mantissaChunks = match[1].match(/^([^.]*)(.*)$/);
      exponent = Number(match[2]);

      if (mantissaChunks[2].length === 0) {
        return mantissaChunks[1] + zfill(exponent);
      }

      if (exponent >= mantissaChunks[2].length - 1) {
        return (mantissaChunks[1] +
                mantissaChunks[2].substring(1) +
                zfill(exponent - (mantissaChunks[2].length - 1)));
      } else {
        return (mantissaChunks[1] +
                mantissaChunks[2].substring(1, 1+exponent));
      }
    } else {
      return s;
    }
  };

  // zfill: integer -> string
  // builds a string of "0"'s of length n.
  var zfill = function(n) {
    var buffer = [];
    buffer.length = n;
    for (var i = 0; i < n; i++) {
      buffer[i] = '0';
    }
    return buffer.join('');
  };

  // liftFixnumInteger: fixnum-integer boxed-pyretnum -> boxed-pyretnum
  // Lifts up fixnum integers to a boxed type.

  var liftFixnumInteger = function(x, other, errbacks) {
    if (other instanceof Roughnum)
      return new Roughnum(x, errbacks);
    else if (other instanceof BigInteger)
      return makeBignum(x);
    else
      return new Rational(x, 1, errbacks);
  };


  // isPyretNumber: any -> boolean
  // Returns true if the thing is a pyretnum
  var isPyretNumber = function(thing) {
    return (typeof(thing) === 'number'
            || (thing instanceof Rational ||
                thing instanceof Roughnum ||
                thing instanceof BigInteger));
  };

  // isRational: pyretnum -> boolean
  var isRational = function(n) {
    return (typeof(n) === 'number' ||
            (isPyretNumber(n) && n.isRational()));
  };

  var isExact = isRational;

  // isReal: pyretnum -> boolean
  var isReal = function(n) {
    return (typeof(n) === 'number' ||
            (isPyretNumber(n) && n.isReal()));
  };

  // isInteger: pyretnum -> boolean
  var isInteger = function(n) {
    return (typeof(n) === 'number' ||
            (isPyretNumber(n) && n.isInteger()));
  };

  var isRoughnum = function(n) {
    if (typeof(n) === 'number') {
      return false;
    } else {
      return (isPyretNumber(n) && n.isRoughnum());
    }
  };

  var isPositive = function(n) {
    if (typeof(n) === 'number') {
      return n > 0;
    } else {
      return (isPyretNumber(n) && n.isPositive());
    }
  };

  var isNonPositive = function(n) {
    if (typeof(n) === 'number') {
      return n <= 0;
    } else {
      return (isPyretNumber(n) && n.isNonPositive());
    }
  };

  var isNegative = function(n) {
    if (typeof(n) === 'number') {
      return n < 0;
    } else {
      return (isPyretNumber(n) && n.isNegative());
    }
  };

  var isNonNegative = function(n) {
    if (typeof(n) === 'number') {
      return n >= 0;
    } else {
      return (isPyretNumber(n) && n.isNonNegative());
    }
  };

  // toFixnum: pyretnum -> javascript-number
  var toFixnum = function(n) {
    if (typeof(n) === 'number')
      return n;
    return n.toFixnum();
  };

  // toRational: pyretnum -> pyretnum
  var toRational = function(n, errbacks) {
    if (typeof(n) === 'number')
      return n;
    return n.toRational(errbacks);
  };

  var toExact = toRational;

  // toRoughnum: pyretnum -> pyretnum

  var toRoughnum = function(n, errbacks) {
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(n, errbacks);
    } else {
      return n.toRoughnum(errbacks);
    }
  };

  //////////////////////////////////////////////////////////////////////

  // add: pyretnum pyretnum -> pyretnum
  var add = function(x, y, errbacks) {
    var sum;
    if (typeof(x) === 'number' && typeof(y) === 'number') {
      sum = x + y;
      if (isOverflow(sum)) {
        return (makeBignum(x)).add(makeBignum(y));
      }
    }
    return addSlow(x, y, errbacks);
  };

  var addSlow = makeNumericBinop(
    function(x, y, errbacks) {
      var sum = x + y;
      if (isOverflow(sum)) {
        return (makeBignum(x)).add(makeBignum(y));
      } else {
        return sum;
      }
    },
    function(x, y, errbacks) {
      return x.add(y);
    },
    {isXSpecialCase: function(x, errbacks) {
      return isInteger(x) && _integerIsZero(x) },
     onXSpecialCase: function(x, y, errbacks) { return y; },
     isYSpecialCase: function(y, errbacks) {
       return isInteger(y) && _integerIsZero(y) },
     onYSpecialCase: function(x, y, errbacks) { return x; }
    });

  // subtract: pyretnum pyretnum -> pyretnum
  var subtract = makeNumericBinop(
    function(x, y, errbacks) {
      var diff = x - y;
      if (isOverflow(diff)) {
        return (makeBignum(x)).subtract(makeBignum(y));
      } else {
        return diff;
      }
    },
    function(x, y, errbacks) {
      return x.subtract(y);
    },
    {isXSpecialCase: function(x, errbacks) {
      return isInteger(x) && _integerIsZero(x) },
     onXSpecialCase: function(x, y, errbacks) { return negate(y, errbacks); },
     isYSpecialCase: function(y, errbacks) {
       return isInteger(y) && _integerIsZero(y) },
     onYSpecialCase: function(x, y, errbacks) { return x; }
    });

  // mulitply: pyretnum pyretnum -> pyretnum
  var multiply = function(x, y, errbacks) {
    var prod;
    if (typeof(x) === 'number' && typeof(y) === 'number') {
      prod = x * y;
      if (isOverflow(prod)) {
        return (makeBignum(x)).multiply(makeBignum(y));
      } else {
        return prod;
      }
    }
    return multiplySlow(x, y, errbacks);
  };
  var multiplySlow = makeNumericBinop(
    function(x, y, errbacks) {
      var prod = x * y;
      if (isOverflow(prod)) {
        return (makeBignum(x)).multiply(makeBignum(y), errbacks);
      } else {
        return prod;
      }
    },
    function(x, y, errbacks) {
      return x.multiply(y, errbacks);
    },
    {isXSpecialCase: function(x, errbacks) {
      return (isInteger(x) &&
              (_integerIsZero(x) || _integerIsOne(x) || _integerIsNegativeOne(x))) },
     onXSpecialCase: function(x, y, errbacks) {
       if (_integerIsZero(x))
         return 0;
       if (_integerIsOne(x))
         return y;
       if (_integerIsNegativeOne(x))
         return negate(y, errbacks);
     },
     isYSpecialCase: function(y, errbacks) {
       return (isInteger(y) &&
               (_integerIsZero(y) || _integerIsOne(y) || _integerIsNegativeOne(y)))},
     onYSpecialCase: function(x, y, errbacks) {
       if (_integerIsZero(y))
         return 0;
       if (_integerIsOne(y))
         return x;
       if (_integerIsNegativeOne(y))
         return negate(x, errbacks);
     }
    });

  // divide: pyretnum pyretnum -> pyretnum
  var divide = makeNumericBinop(
    function(x, y, errbacks) {
      if (_integerIsZero(y))
        errbacks.throwDivByZero("/: division by zero, " + x + ' ' + y);
      var div = x / y;
      if (isOverflow(div)) {
        return (makeBignum(x)).divide(makeBignum(y), errbacks);
      } else if (Math.floor(div) !== div) {
        return Rational.makeInstance(x, y, errbacks);
      } else {
        return div;
      }
    },
    function(x, y, errbacks) {
      if (equalsAnyZero(y, errbacks)) {
        errbacks.throwDivByZero('/: division by zero, ' + x + ' ' + y);
      }
      return x.divide(y, errbacks);
    },
    {
      isXSpecialCase: function(x, errbacks) {
        return equalsAnyZero(x, errbacks);
      },
      onXSpecialCase: function(x, y, errbacks) {
        if (equalsAnyZero(y, errbacks)) {
          errbacks.throwDivByZero("/: division by zero, " + x + ' ' + y);
        }
        return 0;
      },
      isYSpecialCase: function(y, errbacks) {
        return equalsAnyZero(y, errbacks);
      },
      onYSpecialCase: function(x, y, errbacks) {
        errbacks.throwDivByZero("/: division by zero, " + x + ' ' + y);
      }
    });

  // equals: pyretnum pyretnum -> boolean
  var equals = makeNumericBinop(
    function(x, y, errbacks) {
      return x === y;
    },
    function(x, y, errbacks) {
      return x.equals(y, errbacks);
    });

  var equalsAnyZero = function(x, errbacks) {
    if (typeof(x) === 'number') return x === 0;
    if (isRoughnum(x)) return x.n === 0;
    return x.equals(0, errbacks);
  };

  // eqv: pyretnum pyretnum -> boolean
  var eqv = function(x, y, errbacks) {
    if (x === y)
      return true;
    if (typeof(x) === 'number' && typeof(y) === 'number')
      return x === y;
    var ex = isRational(x), ey = isRational(y);
    return (((ex && ey) || (!ex && !ey)) && equals(x, y, errbacks));
  };

  // approxEqual: pyretnum pyretnum pyretnum -> boolean
  var approxEquals = function(x, y, delta, errbacks) {
    return lessThanOrEqual(abs(subtract(x, y, errbacks), errbacks),
                           delta, errbacks);
  };

  // used for within
  var roughlyEquals = function(x, y, delta, errbacks) {
    if (isNegative(delta)) {
      errbacks.throwToleranceError("negative tolerance " + delta);
    }

    if (x === y) return true;

    if (isRoughnum(delta) && delta.n === Number.MIN_VALUE) {
      if ((isRoughnum(x) || isRoughnum(y)) &&
            (Math.abs(subtract(x,y).n) === Number.MIN_VALUE)) {
        errbacks.throwToleranceError("roughnum tolerance too small for meaningful comparison, " + x + ' ' + y + ' ' + delta);
      }
    }

    var ratx = isRoughnum(x) ? x.toRational(errbacks) : x;
    var raty = isRoughnum(y) ? y.toRational(errbacks) : y;

    var ratdelta = isRoughnum(delta) ? delta.toRational(errbacks) : delta;
    return approxEquals(ratx, raty, ratdelta, errbacks);
  };

  var roughlyEqualsRel = function(computedValue, trueValue, delta, errbacks) {
    if (isNegative(delta)) {
      errbacks.throwRelToleranceError('negative relative tolerance ' + delta)
    }

    if (computedValue === trueValue) {
      return true
    }

    var deltaIsRough = isRoughnum(delta)
    var argNumsAreRough = isRoughnum(computedValue) || isRoughnum(trueValue)

    var ratCv = isRoughnum(computedValue) ? computedValue.toRational(errbacks) : computedValue
    var ratTv = isRoughnum(trueValue) ? trueValue.toRational(errbacks) : trueValue

    var ratDelta = isRoughnum(delta) ? delta.toRational(errbacks): delta

    var err = abs(subtract(ratCv, ratTv, errbacks), errbacks)

    if (lessThanOrEqual(ratDelta, 1, errbacks)) {
      var absDelta = multiply(ratDelta, abs(ratTv, errbacks), errbacks)
      if (deltaIsRough && toRoughnum(absDelta).n === Number.MIN_VALUE) {
        if (argNumsAreRough && Math.abs(toRoughnum(err).n) === Number.MIN_VALUE) {
          errbacks.throwRelToleranceError('roughnum tolerance too small for meaningful comparison, ' +
                            computedValue + ' ' + trueValue + ' ' + delta)
        }
      }

      return lessThanOrEqual(err, absDelta, errbacks)
    } else {
      var errRatio = divide(err, abs(ratTv, errbacks), errbacks)

      if (deltaIsRough && delta.n === Number.MIN_VALUE) {
        if (argNumsAreRough && Math.abs(toRoughnum(errRatio).n) === Number.MIN_VALUE) {
          errbacks.throwRelToleranceError('roughnum tolerance too small for meaningful comparison, ' +
                            computedValue + ' ' + trueValue + ' ' + delta)
        }
      }

      return lessThanOrEqual(errRatio, ratDelta, errbacks)
    }
  }

  // greaterThanOrEqual: pyretnum pyretnum -> boolean
  var greaterThanOrEqual = makeNumericBinop(
    function(x, y, errbacks) {
      return x >= y;
    },
    function(x, y, errbacks) {
      return x.greaterThanOrEqual(y);
    });

  // lessThanOrEqual: pyretnum pyretnum -> boolean
  var lessThanOrEqual = makeNumericBinop(
    function(x, y, errbacks){
      return x <= y;
    },
    function(x, y, errbacks) {
      return x.lessThanOrEqual(y);
    });

  // greaterThan: pyretnum pyretnum -> boolean
  var greaterThan = makeNumericBinop(
    function(x, y, errbacks){
      return x > y;
    },
    function(x, y, errbacks) {
      return x.greaterThan(y);
    });

  // lessThan: pyretnum pyretnum -> boolean
  var lessThan = makeNumericBinop(
    function(x, y, errbacks){
      return x < y;
    },
    function(x, y, errbacks) {
      return x.lessThan(y);
    });

  // expt: pyretnum pyretnum -> pyretnum
  var expt = makeNumericBinop(
    function(x, y, errbacks) {
      var pow = Math.pow(x, y);
      if (isOverflow(pow)) {
        return (makeBignum(x)).expt(makeBignum(y));
      } else {
        return pow;
      }
    },
    function(x, y, errbacks) {
      return x.expt(y, errbacks);
    },
    {
      isXSpecialCase: function(x, errbacks) {
        return eqv(x, 0, errbacks) || eqv(x, 1, errbacks);
      },
      onXSpecialCase: function(x, y, errbacks) {
        if (eqv(x, 0, errbacks)) {
          if (eqv(y, 0, errbacks)) {
            return 1;
          } else if (lessThan(y, 0, errbacks)) {
            errbacks.throwDivByZero("expt: division by zero");
          } else {
            return 0;
          }
        } else { // i.e., x is 1
          return 1;
        }
      },

      isYSpecialCase: function(y, errbacks) {
        return eqv(y, 0, errbacks) || lessThan(y, 0, errbacks);
      },
      onYSpecialCase: function(x, y, errbacks) {
        if (eqv(y, 0, errbacks)) {
          return 1;
        } else { // i.e., y is negative
          return expt(divide(1, x, errbacks), negate(y, errbacks), errbacks);
        }
      }
    });

  // exp: pyretnum -> pyretnum
  var exp = function(n, errbacks) {
    if ( eqv(n, 0, errbacks) ) {
      return 1;
    }
    if (typeof(n) === 'number') {
      var res = Math.exp(n);
      if (!isFinite(res))
        errbacks.throwGeneralError('exp: argument too large: ' + n);
      return Roughnum.makeInstance(res, errbacks);
    }
    return n.exp(errbacks);
  };

  // modulo: pyretnum pyretnum -> pyretnum
  var modulo = function(m, n, errbacks) {
    if (! isInteger(m)) {
      errbacks.throwDomainError('modulo: the first argument '
                                + m + " is not an integer.", m, n);
    }
    if (! isInteger(n)) {
      errbacks.throwDomainError('modulo: the second argument '
                                + n + " is not an integer.", m, n);
    }
    if (_integerIsZero(n)) {
      errbacks.throwDomainError('modulo: the second argument is zero');
    }
    var result;
    if (typeof(m) === 'number') {
      result = m % n;
      if (n < 0) {
        if (result <= 0)
          return result;
        else
          return result + n;
      } else {
        if (result < 0)
          return result + n;
        else
          return result;
      }
    }
    result = _integerModulo(floor(m), floor(n));
    // The sign of the result should match the sign of n.
    if (lessThan(n, 0, errbacks)) {
      if (lessThanOrEqual(result, 0, errbacks)) {
        return result;
      }
      return add(result, n, errbacks);

    } else {
      if (lessThan(result, 0, errbacks)) {
        return add(result, n, errbacks);
      }
      return result;
    }
  };

  // numerator: pyretnum -> pyretnum
  var numerator = function(n, errbacks) {
    if (typeof(n) === 'number')
      return n;
    return n.numerator();
  };

  // denominator: pyretnum -> pyretnum
  var denominator = function(n, errbacks) {
    if (typeof(n) === 'number')
      return 1;
    return n.denominator();
  };

  // sqrt: pyretnum -> pyretnum
  var sqrt = function(n, errbacks) {
    if (lessThan(n, 0, errbacks)) {
      errbacks.throwSqrtNegative('sqrt: negative argument ' + n);
    }
    if (typeof(n) === 'number') {
      var result = Math.sqrt(n);
      if (Math.floor(result) === result) {
        return result;
      } else {
        return Roughnum.makeInstance(result, errbacks);
      }
    }
    return n.sqrt(errbacks);
  };

  // abs: pyretnum -> pyretnum
  var abs = function(n, errbacks) {
    if (typeof(n) === 'number') {
      return Math.abs(n);
    }
    return n.abs(errbacks);
  };

  // floor: pyretnum -> pyretnum
  var floor = function(n, errbacks) {
    if (typeof(n) === 'number')
      return Math.floor(n);
    return n.floor(errbacks);
  };

  // ceiling: pyretnum -> pyretnum
  var ceiling = function(n, errbacks) {
    if (typeof(n) === 'number')
      return Math.ceil(n);
    return n.ceiling(errbacks);
  };

  // round: pyretnum -> pyretnum
  var round = function(n, errbacks) {
    if (typeof(n) === 'number') {
      return n;
    }
    return n.round(errbacks);
  };

  var roundEven = function(n, errbacks) {
    if (typeof(n) === 'number') return n;
    return n.roundEven(errbacks);
  };

  // NB: all of these trig-gy generic functions should now return roughnum rather than float
  // (except for an arg of 0, etc)

  // log: pyretnum -> pyretnum
  var log = function(n, errbacks) {
    if ( eqv(n, 1, errbacks) ) {
      return 0;
    }
    if (lessThanOrEqual(n, 0, errbacks)) {
      errbacks.throwLogNonPositive('log: non-positive argument ' + n);
    }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.log(n), errbacks);
    }
    return n.log(errbacks);
  };

  // tan: pyretnum -> pyretnum
  var tan = function(n, errbacks) {
    if (eqv(n, 0, errbacks)) { return 0; }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.tan(n), errbacks);
    }
    return n.tan(errbacks);
  };

  // atan: pyretnum -> pyretnum
  var atan = function(n, errbacks) {
    if (eqv(n, 0, errbacks)) { return 0; }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.atan(n), errbacks);
    }
    return n.atan(errbacks);
  };

  var atan2 = function(y, x, errbacks) {
    if (eqv(x, 0, errbacks)) { // x = 0
      if (eqv(y, 0, errbacks)) { // x = 0, y = 0
        //return Roughnum.makeInstance(Infinity, errbacks);
        errbacks.throwDomainError('atan2: out of domain argument (0, 0)');
      } else if (greaterThan(y, 0, errbacks)) { // x = 0, y > 0
        return Roughnum.makeInstance(Math.PI/2, errbacks);
      } else { // x = 0, y < 0
        return Roughnum.makeInstance(3*Math.PI/2, errbacks);
      }
    } else if (greaterThan(x, 0, errbacks)) { // x > 0
      if (greaterThanOrEqual(y, 0, errbacks)) { // x > 0, y >= 0, 1st qdt
        // atan(y/x) is already in the right qdt
        return atan(divide(y, x, errbacks), errbacks);
      } else { // x > 0, y < 0, 4th qdt
        // atan(y/x) is the 4th qdt and negative, so make it positive by adding 2pi
        return add(atan(divide(y, x, errbacks), errbacks), 2*Math.PI, errbacks);
      }
    } else { // x < 0
      // either x < 0, y >= 0 (2nd qdt), in which case
      //        atan(y/x) must be reflected from 4th to 2nd qdt, by adding pi
      //     or x < 0, y < 0  (3rd qdt), in which case
      //        atan(y/x) must be reflected from 1st to 3rd qdt, again by adding pi
      return add(atan(divide(y, x, errbacks), errbacks), Math.PI, errbacks);
    }
  };

  // cos: pyretnum -> pyretnum
  var cos = function(n, errbacks) {
    if (eqv(n, 0, errbacks)) { return 1; }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.cos(n), errbacks);
    }
    return n.cos(errbacks);
  };

  // sin: pyretnum -> pyretnum
  var sin = function(n, errbacks) {
    if (eqv(n, 0, errbacks)) { return 0; }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.sin(n), errbacks);
    }
    return n.sin(errbacks);
  };

  // acos: pyretnum -> pyretnum
  var acos = function(n, errbacks) {
    if (eqv(n, 1, errbacks)) { return 0; }
    if (lessThan(n, -1, errbacks) || greaterThan(n, 1, errbacks)) {
      errbacks.throwDomainError('acos: out of domain argument ' + n);
    }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.acos(n), errbacks);
    }
    return n.acos(errbacks);
  };

  // asin: pyretnum -> pyretnum
  var asin = function(n, errbacks) {
    if (eqv(n, 0, errbacks)) { return 0; }
    if (lessThan(n, -1, errbacks) || greaterThan(n, 1, errbacks)) {
      errbacks.throwDomainError('asin: out of domain argument ' + n);
    }
    if (typeof(n) === 'number') {
      return Roughnum.makeInstance(Math.asin(n), errbacks);
    }
    return n.asin(errbacks);
  };

  // sqr: pyretnum -> pyretnum
  var sqr = function(x, errbacks) {
    return multiply(x, x, errbacks);
  };

  // integerSqrt: pyretnum -> pyretnum
  var integerSqrt = function(x, errbacks) {
    if (! isInteger(x)) {
      errbacks.throwDomainError('integer-sqrt: the argument ' + x.toString() +
                        " is not an integer.", x);
    }
    if (typeof (x) === 'number') {
      if(x < 0) {
        errbacks.throwSqrtNegative('integerSqrt of negative number', x);
      } else {
        return Math.floor(Math.sqrt(x));
      }
    }
    return x.integerSqrt(errbacks);
  };

  // gcd: pyretnum [pyretnum ...] -> pyretnum
  var gcd = function(first, rest, errbacks) {
    if (! isInteger(first)) {
      errbacks.throwDomainError('gcd: the argument ' + first.toString() +
                                " is not an integer.", first);
    }
    var a = abs(first, errbacks), t, b;
    for(var i = 0; i < rest.length; i++) {
      b = abs(rest[i], errbacks);
      if (! isInteger(b)) {
        errbacks.throwDomainError('gcd: the argument ' + b.toString() +
                                  " is not an integer.", b);
      }
      while (! _integerIsZero(b)) {
        t = a;
        a = b;
        b = _integerModulo(t, b);
      }
    }
    return a;
  };

  // lcm: pyretnum [pyretnum ...] -> pyretnum
  var lcm = function(first, rest, errbacks) {
    if (! isInteger(first)) {
      errbacks.throwDomainError('lcm: the argument ' + first.toString() +
                                " is not an integer.", first);
    }
    var result = abs(first, errbacks);
    if (_integerIsZero(result)) { return 0; }
    for (var i = 0; i < rest.length; i++) {
      if (! isInteger(rest[i])) {
        errbacks.throwDomainError('lcm: the argument ' + rest[i].toString() +
                                  " is not an integer.", rest[i]);
      }
      var divisor = _integerGcd(result, rest[i]);
      if (_integerIsZero(divisor)) {
        return 0;
      }
      result = divide(multiply(result, rest[i], errbacks), divisor, errbacks);
    }
    return result;
  };

  var quotient = function(x, y, errbacks) {
    if (! isInteger(x)) {
      errbacks.throwDomainError('quotient: the first argument ' + x.toString() +
                                " is not an integer.", x);
    }
    if (! isInteger(y)) {
      errbacks.throwDomainError('quotient: the second argument ' + y.toString() +
                                " is not an integer.", y);
    }
    return _integerQuotient(x, y);
  };

  var remainder = function(x, y, errbacks) {
    if (! isInteger(x)) {
      errbacks.throwDomainError('remainder: the first argument ' + x.toString() +
                                " is not an integer.", x);
    }
    if (! isInteger(y)) {
      errbacks.throwDomainError('remainder: the second argument ' + y.toString() +
                                " is not an integer.", y);
    }
    return _integerRemainder(x, y);
  };

  //////////////////////////////////////////////////////////////////////

  // Helpers

  // isOverflow: javascript-number -> boolean
  // Returns true if we consider the number an overflow.
  var MIN_FIXNUM = -(9e15);
  var MAX_FIXNUM = (9e15);
  var isOverflow = function(n) {
    return (n < MIN_FIXNUM ||  MAX_FIXNUM < n);
  };

  // negate: pyretnum -> pyretnum
  // multiplies a number times -1.
  var negate = function(n, errbacks) {
    if (typeof(n) === 'number') {
      return -n;
    }
    return n.negate(errbacks);
  };

  // halve: pyretnum -> pyretnum
  // Divide a number by 2.
  var halve = function(n, errbacks) {
    return divide(n, 2, errbacks);
  };

  // fastExpt: computes n^k by squaring.
  // n^k = (n^2)^(k/2)
  // Assumes k is non-negative integer.
  var fastExpt = function(n, k, errbacks) {
    var acc = 1;
    while (true) {
      if (_integerIsZero(k)) {
        return acc;
      }
      if (equals(modulo(k, 2, errbacks), 0, errbacks)) {
        n = multiply(n, n, errbacks);
        k = divide(k, 2, errbacks);
      } else {
        acc = multiply(acc, n, errbacks);
        k = subtract(k, 1, errbacks);
      }
    }
  };

  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////

  // Integer operations
  // Integers are either represented as fixnums or as BigIntegers.

  // makeIntegerBinop: (fixnum fixnum -> X) (BigInteger BigInteger -> X) -> X
  // Helper to collect the common logic for coercing integer fixnums or bignums to a
  // common type before doing an operation.
  var makeIntegerBinop = function(onFixnums, onBignums, options) {
    options = options || {};
    return (function(m, n) {
      if (m instanceof Rational) {
        m = numerator(m);
      }

      if (n instanceof Rational) {
        n = numerator(n);
      }

      if (typeof(m) === 'number' && typeof(n) === 'number') {
        var result = onFixnums(m, n);
        if (! isOverflow(result) ||
            (options.ignoreOverflow)) {
          return result;
        }
      }
      if (m instanceof Roughnum || n instanceof Roughnum) {
        return Roughnum.makeInstance(
          onFixnums(toFixnum(m), toFixnum(n)), errbacks);
      }
      if (typeof(m) === 'number') {
        m = makeBignum(m);
      }
      if (typeof(n) === 'number') {
        n = makeBignum(n);
      }
      return onBignums(m, n);
    });
  };

  var makeIntegerUnOp = function(onFixnums, onBignums, options, errbacks) {
    options = options || {};
    return (function(m) {
      if (m instanceof Rational) {
        m = numerator(m);
      }

      if (typeof(m) === 'number') {
        var result = onFixnums(m);
        if (! isOverflow(result) ||
            (options.ignoreOverflow)) {
          return result;
        }
      }
      if (m instanceof Roughnum) {
        return Roughnum.makeInstance(onFixnums(toFixnum(m)), errbacks);
      }
      if (typeof(m) === 'number') {
        m = makeBignum(m);
      }
      return onBignums(m);
    });
  };

  // _integerModulo: integer-pyretnum integer-pyretnum -> integer-pyretnum
  var _integerModulo = makeIntegerBinop(
    function(m, n) {
      return m % n;
    },
    function(m, n) {
      return bnMod.call(m, n);
    });

  // _integerGcd: integer-pyretnum integer-pyretnum -> integer-pyretnum
  var _integerGcd = makeIntegerBinop(
    function(a, b) {
      var t;
      while (b !== 0) {
        t = a;
        a = b;
        b = t % b;
      }
      return a;
    },
    function(m, n) {
      return bnGCD.call(m, n);
    });

  // _integerIsZero: integer-pyretnum -> boolean
  // Returns true if the number is zero.
  var _integerIsZero = makeIntegerUnOp(
    function(n){
      return n === 0;
    },
    function(n) {
      return bnEquals.call(n, BigInteger.ZERO);
    }
  );

  // _integerIsOne: integer-pyretnum -> boolean
  var _integerIsOne = makeIntegerUnOp(
    function(n) {
      return n === 1;
    },
    function(n) {
      return bnEquals.call(n, BigInteger.ONE);
    });

  // _integerIsNegativeOne: integer-pyretnum -> boolean
  var _integerIsNegativeOne = makeIntegerUnOp(
    function(n) {
      return n === -1;
    },
    function(n) {
      return bnEquals.call(n, BigInteger.NEGATIVE_ONE);
    });

  // _integerAdd: integer-pyretnum integer-pyretnum -> integer-pyretnum
  var _integerAdd = makeIntegerBinop(
    function(m, n) {
      return m + n;
    },
    function(m, n) {
      return bnAdd.call(m, n);
    });

  // _integerSubtract: integer-pyretnum integer-pyretnum -> integer-pyretnum
  var _integerSubtract = makeIntegerBinop(
    function(m, n) {
      return m - n;
    },
    function(m, n) {
      return bnSubtract.call(m, n);
    });

  // _integerMultiply: integer-pyretnum integer-pyretnum -> integer-pyretnum
  var _integerMultiply = makeIntegerBinop(
    function(m, n) {
      return m * n;
    },
    function(m, n) {
      return bnMultiply.call(m, n);
    });

  //_integerQuotient: integer-pyretnum integer-pyretnum -> integer-pyretnum
  var _integerQuotient = makeIntegerBinop(
    function(m, n) {
      return ((m - (m % n))/ n);
    },
    function(m, n) {
      return bnDivide.call(m, n);
    });

  var _integerRemainder = makeIntegerBinop(
    function(m, n) {
      return m % n;
    },
    function(m, n) {
      return bnRemainder.call(m, n);
    });

  // _integerDivideToFixnum: integer-pyretnum integer-pyretnum -> fixnum
  var _integerDivideToFixnum = makeIntegerBinop(
    function(m, n) {
      return m / n;
    },
    function(m, n) {
      return toFixnum(m) / toFixnum(n);
    },
    {ignoreOverflow: true,
     doNotCoerceToFloating: true});

  // _integerEquals: integer-pyretnum integer-pyretnum -> boolean
  var _integerEquals = makeIntegerBinop(
    function(m, n) {
      return m === n;
    },
    function(m, n) {
      return bnEquals.call(m, n);
    },
    {doNotCoerceToFloating: true});

  // _integerGreaterThan: integer-pyretnum integer-pyretnum -> boolean
  var _integerGreaterThan = makeIntegerBinop(
    function(m, n) {
      return m > n;
    },
    function(m, n) {
      return bnCompareTo.call(m, n) > 0;
    },
    {doNotCoerceToFloating: true});

  // _integerLessThan: integer-pyretnum integer-pyretnum -> boolean
  var _integerLessThan = makeIntegerBinop(
    function(m, n) {
      return m < n;
    },
    function(m, n) {
      return bnCompareTo.call(m, n) < 0;
    },
    {doNotCoerceToFloating: true});

  // _integerGreaterThanOrEqual: integer-pyretnum integer-pyretnum -> boolean
  var _integerGreaterThanOrEqual = makeIntegerBinop(
    function(m, n) {
      return m >= n;
    },
    function(m, n) {
      return bnCompareTo.call(m, n) >= 0;
    },
    {doNotCoerceToFloating: true});

  // _integerLessThanOrEqual: integer-pyretnum integer-pyretnum -> boolean
  var _integerLessThanOrEqual = makeIntegerBinop(
    function(m, n) {
      return m <= n;
    },
    function(m, n) {
      return bnCompareTo.call(m, n) <= 0;
    },
    {doNotCoerceToFloating: true});

  //////////////////////////////////////////////////////////////////////
  // The boxed number types are expected to implement the following
  // interface.
  //
  // toString: -> string

  // isFinite: -> boolean

  // isInteger: -> boolean
  // Produce true if this number can be coerced into an integer.

  // isRational: -> boolean
  // Produce true if the number is rational.

  // isExact === isRational

  // isReal: -> boolean
  // Produce true if the number is real.

  // toRational: -> pyretnum
  // Produce an exact number.

  // toExact === toRational

  // toRoughnum: -> pyretnum
  // Produce a roughnum.

  // toFixnum: -> fixnum
  // Produce a javascript number.

  // greaterThan: pyretnum -> boolean
  // Compare against instance of the same type.

  // greaterThanOrEqual: pyretnum -> boolean
  // Compare against instance of the same type.

  // lessThan: pyretnum -> boolean
  // Compare against instance of the same type.

  // lessThanOrEqual: pyretnum -> boolean
  // Compare against instance of the same type.

  // add: pyretnum -> pyretnum
  // Add with an instance of the same type.

  // subtract: pyretnum -> pyretnum
  // Subtract with an instance of the same type.

  // multiply: pyretnum -> pyretnum
  // Multiply with an instance of the same type.

  // divide: pyretnum -> pyretnum
  // Divide with an instance of the same type.

  // numerator: -> pyretnum
  // Return the numerator.

  // denominator: -> pyretnum
  // Return the denominator.

  // integerSqrt: -> pyretnum
  // Produce the integer square root.

  // sqrt: -> pyretnum
  // Produce the square root.

  // abs: -> pyretnum
  // Produce the absolute value.

  // floor: -> pyretnum
  // Produce the floor.

  // ceiling: -> pyretnum
  // Produce the ceiling.

  // log: -> pyretnum
  // Produce the log.

  // atan: -> pyretnum
  // Produce the arc tangent.

  // cos: -> pyretnum
  // Produce the cosine.

  // sin: -> pyretnum
  // Produce the sine.

  // expt: pyretnum -> pyretnum
  // Produce the power to the input.

  // exp: -> pyretnum
  // Produce e raised to the given power.

  // acos: -> pyretnum
  // Produce the arc cosine.

  // asin: -> pyretnum
  // Produce the arc sine.

  // round: -> pyretnum
  // Round to the nearest integer.

  // equals: pyretnum -> boolean
  // Produce true if the given number of the same type is equal.

  //////////////////////////////////////////////////////////////////////

  // Rationals

  var Rational = function(n, d) {
    this.n = n;
    this.d = d;
  };

  Rational.makeInstance = function(n, d, errbacks) {
    if (n === undefined)
      errbacks.throwUndefinedValue("n undefined", n, d);

    if (d === undefined) { d = 1; }

    if (_integerLessThan(d, 0)) {
      n = negate(n, errbacks);
      d = negate(d, errbacks);
    }

    var divisor = _integerGcd(abs(n, errbacks), abs(d, errbacks));
    n = _integerQuotient(n, divisor);
    d = _integerQuotient(d, divisor);

    // Optimization: if we can get around construction the rational
    // in favor of just returning n, do it:
    if (_integerIsOne(d) || _integerIsZero(n)) {
      return n;
    }

    return new Rational(n, d);
  };

  Rational.prototype.toString = function() {
    if (_integerIsOne(this.d)) {
      return this.n.toString() + "";
    } else {
      return this.n.toString() + "/" + this.d.toString();
    }
  };

  Rational.prototype.isFinite = function() {
    return true;
  };

  Rational.prototype.equals = function(other, errbacks) {
    return (other instanceof Rational &&
            _integerEquals(this.n, other.n) &&
            _integerEquals(this.d, other.d));
  };

  Rational.prototype.isInteger = function() {
    return _integerIsOne(this.d);
  };

  Rational.prototype.isRational = function() {
    return true;
  };

  Rational.prototype.isExact = Rational.prototype.isRational;

  Rational.prototype.isReal = function() {
    return true;
  };

  Rational.prototype.isRoughnum = function() {
    return false;
  };

  Rational.prototype.isPositive = function() {
    // don't care about this.d
    return this.n > 0;
  };

  Rational.prototype.isNonNegative = function() {
    return this.n >= 0;
  };

  Rational.prototype.isNegative = function() {
    return this.n < 0;
  };

  Rational.prototype.isNonPositive = function() {
    return this.n <= 0;
  };

  Rational.prototype.add = function(other, errbacks) {
    return Rational.makeInstance(_integerAdd(_integerMultiply(this.n, other.d),
                                             _integerMultiply(this.d, other.n)),
                                 _integerMultiply(this.d, other.d), errbacks);
  };

  Rational.prototype.subtract = function(other, errbacks) {
    return Rational.makeInstance(_integerSubtract(_integerMultiply(this.n, other.d),
                                                  _integerMultiply(this.d, other.n)),
                                 _integerMultiply(this.d, other.d), errbacks);
  };

  Rational.prototype.negate = function(errbacks) {
    return Rational.makeInstance(negate(this.n, errbacks), this.d, errbacks)
  };

  Rational.prototype.multiply = function(other, errbacks) {
    return Rational.makeInstance(_integerMultiply(this.n, other.n),
                                 _integerMultiply(this.d, other.d), errbacks);
  };

  Rational.prototype.divide = function(other, errbacks) {
    if (_integerIsZero(this.d) || _integerIsZero(other.n)) {  // dead code!
      errbacks.throwDivByZero("/: division by zero", this, other);
    }
    return Rational.makeInstance(_integerMultiply(this.n, other.d),
                                 _integerMultiply(this.d, other.n), errbacks);
  };

  Rational.prototype.toRational = function() {
    return this;
  };

  Rational.prototype.toExact = Rational.prototype.toRational;

  Rational.prototype.toFixnum = function() {
    return _integerDivideToFixnum(this.n, this.d);
  };

  Rational.prototype.toRoughnum = function(errbacks) {
    return Roughnum.makeInstance(this.toFixnum(), errbacks);
  };

  Rational.prototype.numerator = function() {
    return this.n;
  };

  Rational.prototype.denominator = function() {
    return this.d;
  };

  Rational.prototype.greaterThan = function(other, errbacks) {
    return _integerGreaterThan(_integerMultiply(this.n, other.d),
                               _integerMultiply(this.d, other.n));
  };

  Rational.prototype.greaterThanOrEqual = function(other, errbacks) {
    return _integerGreaterThanOrEqual(_integerMultiply(this.n, other.d),
                                      _integerMultiply(this.d, other.n));
  };

  Rational.prototype.lessThan = function(other, errbacks) {
    return _integerLessThan(_integerMultiply(this.n, other.d),
                            _integerMultiply(this.d, other.n));
  };

  Rational.prototype.lessThanOrEqual = function(other, errbacks) {
    return _integerLessThanOrEqual(_integerMultiply(this.n, other.d),
                                   _integerMultiply(this.d, other.n));
  };

  Rational.prototype.integerSqrt = function(errbacks) {
    var result = sqrt(this);
    return toRational(floor(result, errbacks), errbacks);
  };

  Rational.prototype.sqrt = function(errbacks) {
    var newN = sqrt(this.n);
    var newD = sqrt(this.d);
    if (isRational(newN) && isRational(newD) &&
        equals(floor(newN), newN) &&
        equals(floor(newD), newD)) {
      return Rational.makeInstance(newN, newD, errbacks);
    } else {
      return divide(newN, newD, errbacks);
    }
  };

  Rational.prototype.abs = function(errbacks) {
    return Rational.makeInstance(abs(this.n, errbacks),
                                 this.d, errbacks);
  };

  Rational.prototype.floor = function(errbacks) {
    var quotient = _integerQuotient(this.n, this.d);
    if (_integerLessThan(this.n, 0)) {
      return subtract(quotient, 1, errbacks);
    } else {
      return quotient;
    }
  };

  Rational.prototype.ceiling = function(errbacks) {
    var quotient = _integerQuotient(this.n, this.d);
    if (_integerLessThan(this.n, 0)) {
      return quotient;
    } else {
      return add(quotient, 1, errbacks);
    }
  };

  Rational.prototype.round = function(errbacks) {
    var halfintp = equals(this.d, 2);
    var negativep = _integerLessThan(this.n, 0);
    var n = this.n;
    if (negativep) {
      n = negate(n, errbacks);
    }
    var quo = _integerQuotient(n, this.d);
    if (halfintp) {
      // rounding half to away from 0
      // uncomment following if rounding half to even
      // if (_integerIsOne(_integerModulo(quo, 2)))
      quo = add(quo, 1, errbacks);
    } else {
      var rem = _integerRemainder(n, this.d);
      if (greaterThan(multiply(rem, 2, errbacks), this.d, errbacks)) {
        quo = add(quo, 1, errbacks);
      }
    }
    if (negativep) {
      quo = negate(quo, errbacks);
    }
    return quo;
  };

  Rational.prototype.roundEven = function(errbacks) {
    // rounds half-integers to even
    var halfintp = equals(this.d, 2, errbacks);
    var negativep = _integerLessThan(this.n, 0);
    var n = this.n;
    if (negativep) n = negate(n, errbacks);
    var quo = _integerQuotient(n, this.d);
    if (halfintp) {
      if (_integerIsOne(_integerModulo(quo, 2)))
        quo = add(quo, 1, errbacks);
    } else {
      var rem = _integerRemainder(n, this.d);
      if (greaterThan(multiply(rem, 2, errbacks), this.d, errbacks))
        quo = add(quo, 1, errbacks);
    }
    if (negativep) quo = negate(quo, errbacks);
    return quo;
  };

  Rational.prototype.log = function(errbacks){
    return Roughnum.makeInstance(Math.log(this.toFixnum()), errbacks);
  };

  Rational.prototype.tan = function(errbacks){
    return Roughnum.makeInstance(Math.tan(this.toFixnum()), errbacks);
  };

  Rational.prototype.atan = function(errbacks){
    return Roughnum.makeInstance(Math.atan(this.toFixnum()), errbacks);
  };

  Rational.prototype.cos = function(errbacks){
    return Roughnum.makeInstance(Math.cos(this.toFixnum()), errbacks);
  };

  Rational.prototype.sin = function(errbacks){
    return Roughnum.makeInstance(Math.sin(this.toFixnum()), errbacks);
  };

  var integerNthRoot = function(n, m, errbacks) {
    var guessPrev, guessToTheN;
    var guess = m;

    // find closest integral zero of x^n - m = 0 using Newton-Raphson.
    // if k'th guess is x_k, then
    // x_{k+1} = floor( x_k - [(x_k)^n - m]/[n (x_k)^(n-1)] ).
    // Stop iteration if (x_k)^n is close enough to m, or
    // if x_k stops evolving

    while(true) {
      guessToTheN = expt(guess, n, errbacks);
      if (lessThanOrEqual(guessToTheN, m, errbacks) &&
          lessThan(m, expt(add(guess, 1, errbacks), n, errbacks), errbacks)) break;
      guessPrev = guess;
      guess = floor(subtract(guess, divide(subtract(guessToTheN, m, errbacks),
            multiply(n, divide(guessToTheN, guess, errbacks), errbacks), errbacks), errbacks), errbacks);
      if (equals(guess, guessPrev, errbacks)) break;
    }

    return guess;
  };

  var nthRoot = function(n, m, errbacks) {
    var mNeg = (sign(m) < 0);
    var mAbs = (mNeg ? abs(m, errbacks) : m);
    var approx;

    if (mNeg && _integerModulo(n, 2) === 0)
      errbacks.throwDomainError('expt: taking even (' + n + ') root of negative integer ' + m);

    approx = integerNthRoot(n, mAbs, errbacks);
    if (mNeg) approx = negate(approx, errbacks);
    if (eqv(expt(approx, n, errbacks), m, errbacks)) return approx;

    approx = Roughnum.makeInstance(Math.pow(toFixnum(mAbs),
                                            toFixnum(divide(1,n, errbacks))), errbacks);
    return (mNeg ? negate(approx, errbacks) : approx);
  };

  Rational.prototype.expt = function(a, errbacks) {
    if (isInteger(a) && greaterThanOrEqual(a, 0, errbacks)) {
      return fastExpt(this, a, errbacks);
    } else if (_integerLessThanOrEqual(a.d, 8)) {
      var nRaisedToAn = expt(this.n, a.n, errbacks);
      var dRaisedToAn = expt(this.d, a.n, errbacks);
      var newN = nthRoot(a.d, nRaisedToAn, errbacks);
      var newD = nthRoot(a.d, dRaisedToAn, errbacks);
      if (isRational(newN) && isRational(newD) &&
          equals(floor(newN), newN, errbacks) &&
          equals(floor(newD), newD, errbacks)) {
        return Rational.makeInstance(newN, newD, errbacks);
      } else {
        return divide(newN, newD, errbacks);
     }
    } else {
      if (this.isNegative() && !a.isInteger())
        errbacks.throwDomainError('expt: raising negative number ' + this + ' to nonintegral power ' + a);
      return Roughnum.makeInstance(Math.pow(this.toFixnum(), a.toFixnum()), errbacks);
    }
  };

  Rational.prototype.exp = function(errbacks){
    var res = Math.exp(this.toFixnum());
    if (!isFinite(res))
      errbacks.throwDomainError('exp: argument too large: ' + this);
    return Roughnum.makeInstance(res, errbacks);
  };

  Rational.prototype.acos = function(errbacks){
    return acos(this.toFixnum(), errbacks);
  };

  Rational.prototype.asin = function(errbacks){
    return asin(this.toFixnum(), errbacks);
  };

  // sign: Number -> {-1, 0, 1}
  var sign = function(n, errbacks) {
    if (lessThan(n, 0, errbacks)) {
      return -1;
    } else if (greaterThan(n, 0, errbacks)) {
      return 1;
    } else {
      return 0;
    }
  };

  // Roughnums

  var Roughnum = function(n, errbacks) {
    if (!(typeof(n) === 'number'))
      errbacks.throwGeneralError('roughnum constructor got unsuitable arg ' + n);
    this.n = n;
  };

  Roughnum.makeInstance = function(n, errbacks) {
    if (typeof(n) === 'number' && !isFinite(n)) {
      errbacks.throwDomainError('roughnum overflow error');
    }
    return new Roughnum(n, errbacks);
  };

  Roughnum.prototype.isFinite = function() {
    //actually always true, as we don't store overflows
    return (isFinite(this.n));
  };

  Roughnum.prototype.toRational = function(errbacks) {
    if (!isFinite(this.n)) {
      // this _should_ be dead, as we don't store overflows
      errbacks.throwInternalError("toRational: no exact representation for " + this);
    }

    return fromString(this.n.toString(), errbacks);
  };

  Roughnum.prototype.toExact = Roughnum.prototype.toRational;

  Roughnum.prototype.toString = function() {
    return '~' + this.n.toString();
  };

  Roughnum.prototype.equals = function(other, errbacks) {
    errbacks.throwIncomparableValues("roughnums cannot be compared for equality");
  };

  Roughnum.prototype.isRational = function() {
    return false;
  };

  Roughnum.prototype.isExact = Roughnum.prototype.isRational;

  Roughnum.prototype.isInteger = function() {
    return false;
  };

  Roughnum.prototype.isReal = function() {
    return true;
  };

  Roughnum.prototype.isRoughnum = function() {
    return true;
  };

  Roughnum.prototype.isPositive = function() {
    return this.n > 0;
  };

  Roughnum.prototype.isNonNegative = function() {
    return this.n >= 0;
  };

  Roughnum.prototype.isNegative = function() {
    return this.n < 0;
  };

  Roughnum.prototype.isNonPositive = function() {
    return this.n <= 0;
  };

  Roughnum.prototype.add = function(other, errbacks) {
    return Roughnum.makeInstance(this.n + other.n, errbacks);
  };

  Roughnum.prototype.subtract = function(other, errbacks) {
    return Roughnum.makeInstance(this.n - other.n, errbacks);
  };

  Roughnum.prototype.negate = function(errbacks) {
    return Roughnum.makeInstance(-this.n, errbacks);
  };

  Roughnum.prototype.multiply = function(other, errbacks) {
    return Roughnum.makeInstance(this.n * other.n, errbacks);
  };

  Roughnum.prototype.divide = function(other, errbacks) {
    return Roughnum.makeInstance(this.n / other.n, errbacks);
  };

  Roughnum.prototype.toFixnum = function() {
    return this.n;
  };

  Roughnum.prototype.toRoughnum = function(errbacks) {
    return this;
  };

  Roughnum.prototype.numerator = function() {
    var stringRep = this.n.toString();
    var match = stringRep.match(/^(.*)\.(.*)$/);
    if (match) {
      var afterDecimal = parseInt(match[2]);
      var factorToInt = Math.pow(10, match[2].length);
      var extraFactor = _integerGcd(factorToInt, afterDecimal);
      var multFactor = factorToInt / extraFactor;
      return Roughnum.makeInstance( Math.round(this.n * multFactor) );
    } else {
      return this;
    }
  };

  Roughnum.prototype.denominator = function() {
    var stringRep = this.n.toString();
    var match = stringRep.match(/^(.*)\.(.*)$/);
    if (match) {
      var afterDecimal = parseInt(match[2]);
      var factorToInt = Math.pow(10, match[2].length);
      var extraFactor = _integerGcd(factorToInt, afterDecimal);
      return Roughnum.makeInstance( Math.round(factorToInt/extraFactor) );
    } else {
      return Roughnum.makeInstance(1);
    }
  };

  Roughnum.prototype.floor = function(errbacks) {
    return Math.floor(this.n);
  };

  Roughnum.prototype.ceiling = function(errbacks) {
    return Math.ceil(this.n);
  };

  Roughnum.prototype.round = function(errbacks){
    var negativep = (this.n < 0);
    var n = this.n;
    if (negativep) n = -n;
    var res = Math.round(n);
    if (negativep) res = -res;
    return res;
  };

  Roughnum.prototype.roundEven = function(errbacks) {
    var negativep = (this.n < 0);
    var n = this.n;
    if (negativep) n = -n;
    var res = Math.round(n);
    if ((Math.abs(n - res) === 0.5) && (res % 2 === 1))
      res -= 1;
    return res;
  };

  Roughnum.prototype.greaterThan = function(other, errbacks) {
    return this.n > other.n;
  };

  Roughnum.prototype.greaterThanOrEqual = function(other, errbacks) {
    return this.n >= other.n;
  };

  Roughnum.prototype.lessThan = function(other, errbacks) {
    return this.n < other.n;
  };

  Roughnum.prototype.lessThanOrEqual = function(other, errbacks) {
    return this.n <= other.n;
  };

  Roughnum.prototype.integerSqrt = function(errbacks) {
    if (isInteger(this)) {
      if(this.n >= 0) {
        return Roughnum.makeInstance(Math.floor(Math.sqrt(this.n)), errbacks);
      } else {
        errbacks.throwDomainError('integerSqrt of negative roughnum', this.n);
      }
    } else {
      errbacks.throwDomainError("integerSqrt: can only be applied to an integer", this);
    }
  };

  Roughnum.prototype.sqrt = function(errbacks) {
    return Roughnum.makeInstance(Math.sqrt(this.n), errbacks);
  };

  Roughnum.prototype.abs = function(errbacks) {
    return Roughnum.makeInstance(Math.abs(this.n), errbacks);
  };

  Roughnum.prototype.log = function(errbacks){
    if (this.n < 0)
      errbacks.throwDomainError('log of negative roughnum', this.n);
    else
      return Roughnum.makeInstance(Math.log(this.n), errbacks);
  };

  Roughnum.prototype.tan = function(errbacks){
    return Roughnum.makeInstance(Math.tan(this.n), errbacks);
  };

  Roughnum.prototype.atan = function(errbacks){
    return Roughnum.makeInstance(Math.atan(this.n), errbacks);
  };

  Roughnum.prototype.cos = function(errbacks){
    return Roughnum.makeInstance(Math.cos(this.n), errbacks);
  };

  Roughnum.prototype.sin = function(errbacks){
    return Roughnum.makeInstance(Math.sin(this.n), errbacks);
  };

  Roughnum.prototype.expt = function(a, errbacks){
    if (this.n === 1) {
      return this;
    } else {
      return Roughnum.makeInstance(Math.pow(this.n, a.n), errbacks);
    }
  };

  Roughnum.prototype.exp = function(errbacks){
    var res = Math.exp(this.n);
    if (!isFinite(res))
      errbacks.throwDomainError('exp: argument too large: ' + this);
    return Roughnum.makeInstance(res);
  };

  Roughnum.prototype.acos = function(errbacks){
    return acos(this.n, errbacks);
  };

  Roughnum.prototype.asin = function(errbacks){
    return asin(this.n, errbacks);
  };

  var rationalRegexp = new RegExp("^([+-]?\\d+)/(\\d+)$");
  var digitRegexp = new RegExp("^[+-]?\\d+$");
  var flonumRegexp = new RegExp("^([-+]?)(\\d+\)((?:\\.\\d*)?)((?:[Ee][-+]?\\d+)?)$");


  var roughnumDecRegexp = new RegExp("^~([-+]?\\d*(?:\\.\\d*)?(?:[Ee][-+]?\\d+)?)$");

  var roughnumRatRegexp = new RegExp("^~([+-]?\\d+)/(\\d+)$");


  var scientificPattern = new RegExp("^([+-]?\\d*\\.?\\d*)[Ee]([+]?\\d+)$");

  // fromString: string -> (pyretnum | false)
  var fromString = function(x, errbacks) {
    if (x.match(digitRegexp)) {
      var n = Number(x);
      if (isOverflow(n)) {
        return makeBignum(x);
      } else {
        return n;
      }
    }

    var aMatch = x.match(rationalRegexp);
    if (aMatch) {
      return Rational.makeInstance(fromString(aMatch[1]),
                                   fromString(aMatch[2]), errbacks);
    }

    aMatch = x.match(flonumRegexp);
    if (aMatch) {
      var negativeP = (aMatch[1] === "-");
      //
      var beforeDecimalString = aMatch[2];
      var beforeDecimal = 0;
      if (beforeDecimalString !== '') {
        beforeDecimal = makeBignum(beforeDecimalString);
      }
      //
      var afterDecimalString = aMatch[3];
      var denominatorTen = 1;
      var afterDecimal = 0;
      if (afterDecimalString !== '') {
        afterDecimalString = afterDecimalString.substring(1);
        denominatorTen = makeBignum('1' + new Array(afterDecimalString.length + 1).join('0'));
        if (afterDecimalString !== '') {
          afterDecimal = makeBignum(afterDecimalString);
        }
      }
      //
      var exponentString = aMatch[4];
      var exponentNegativeP = false;
      var exponent = 1;
      if (exponentString !== '') {
        exponentString = exponentString.substring(1);
        var exponentSign = exponentString.charAt(0);
        exponentNegativeP = (exponentSign === '-');
        if (exponentSign === '-' || exponentSign === '+') {
          exponentString = exponentString.substring(1);
        }
        exponent = makeBignum('1' + new Array(Number(exponentString) + 1).join('0'));
      }

      var finalDen = denominatorTen;
      var finalNum = _integerAdd(_integerMultiply(beforeDecimal, denominatorTen), afterDecimal);
      if (negativeP) {
        finalNum = negate(finalNum, errbacks);
      }
      //
      if (!equals(exponent, 1)) {
        if (exponentNegativeP) {
          finalDen = _integerMultiply(finalDen, exponent);
        } else {
          finalNum = _integerMultiply(finalNum, exponent);
        }
      }
      return Rational.makeInstance(finalNum, finalDen, errbacks);
    }

    aMatch = x.match(roughnumRatRegexp);
    if (aMatch) {
      return Rational.makeInstance(fromString(aMatch[1]), fromString(aMatch[2])).toRoughnum();
    }

    aMatch = x.match(roughnumDecRegexp);
    if (aMatch) {
      return Roughnum.makeInstance(Number(aMatch[1]), errbacks);
    }

    return false; // if all else fails

  };

  ///////////////////////////////////////////////////////////

  // recognizing numbers in (We)Scheme syntax:

    var hashModifiersRegexp = new RegExp("^(#[ei]#[bodx]|#[bodx]#[ei]|#[bodxei])(.*)$")

    function schemeRationalRegexp(digits) { return new RegExp("^([+-]?["+digits+"]+)/(["+digits+"]+)$"); }

    function matchComplexRegexp(radix, x, errbacks) {
	var sign = "[+-]";
	var maybeSign = "[+-]?";
	var digits = digitsForRadix(radix, errbacks)
	var expmark = "["+expMarkForRadix(radix, errbacks)+"]"
	var digitSequence = "["+digits+"]+"

	var unsignedRational = digitSequence+"/"+digitSequence
	var rational = maybeSign + unsignedRational

	var noDecimal = digitSequence
	var decimalNumOnRight = "["+digits+"]*\\.["+digits+"]+"
	var decimalNumOnLeft = "["+digits+"]+\\.["+digits+"]*"

	var unsignedDecimal = "(?:" + noDecimal + "|" + decimalNumOnRight + "|" + decimalNumOnLeft + ")"

	var special = "(?:inf\.0|nan\.0|inf\.f|nan\.f)"

	var unsignedRealNoExp = "(?:" + unsignedDecimal + "|" + unsignedRational + ")"
	var unsignedReal = unsignedRealNoExp + "(?:" + expmark + maybeSign + digitSequence + ")?"
	var unsignedRealOrSpecial = "(?:" + unsignedReal + "|" + special + ")"
	var real = "(?:" + maybeSign + unsignedReal + "|" + sign + special + ")"

	var alt1 = new RegExp("^(" + rational + ")"
                             + "(" + sign + unsignedRational + "?)"
                             + "i$");
	var alt2 = new RegExp("^(" + real + ")?"
                             + "(" + sign + unsignedRealOrSpecial + "?)"
                             + "i$");
	var alt3 = new RegExp("^(" + real + ")@(" + real + ")$");

	var match1 = x.match(alt1)
	var match2 = x.match(alt2)
	var match3 = x.match(alt3)

	return match1 ? match1 :
	       match2 ? match2 :
	       match3 ? match3 :
	     /* else */ false
    }

    function schemeDigitRegexp(digits) { return new RegExp("^[+-]?["+digits+"]+$"); }
    /**
    /* NB: !!!! flonum regexp only matches "X.", ".X", or "X.X", NOT "X", this
    /* must be separately checked with schemeDigitRegexp.
    /* I know this seems dumb, but the alternative would be that this regexp
    /* returns six matches, which also seems dumb.
    /***/
    function schemeFlonumRegexp(digits) {
	var decimalNumOnRight = "(["+digits+"]*)\\.(["+digits+"]+)"
	var decimalNumOnLeft = "(["+digits+"]+)\\.(["+digits+"]*)"
	return new RegExp("^(?:([+-]?)(" +
                          decimalNumOnRight+"|"+decimalNumOnLeft +
                          "))$");
    }
    function schemeScientificPattern(digits, exp_mark) {
	var noDecimal = "["+digits+"]+"
	var decimalNumOnRight = "["+digits+"]*\\.["+digits+"]+"
	var decimalNumOnLeft = "["+digits+"]+\\.["+digits+"]*"
	return new RegExp("^(?:([+-]?" +
			  "(?:"+noDecimal+"|"+decimalNumOnRight+"|"+decimalNumOnLeft+")" +
			  ")["+exp_mark+"]([+-]?["+digits+"]+))$");
    }

    function digitsForRadix(radix, errbacks) {
	return radix === 2  ? "01" :
	       radix === 8  ? "0-7" :
	       radix === 10 ? "0-9" :
	       radix === 16 ? "0-9a-fA-F" :
	       errbacks.throwInternalError("digitsForRadix: invalid radix", this, radix)
    }
    function expMarkForRadix(radix, errbacks) {
	return (radix === 2 || radix === 8 || radix === 10) ? "defsl" :
	       (radix === 16)                               ? "sl" :
	       errbacks.throwInternalError("expMarkForRadix: invalid radix", this, radix)
    }

    function Exactness(i) {
      this.defaultp = function () { return i == 0; }
      this.exactp = function () { return i == 1; }
      this.inexactp = function () { return i == 2; }
    }

    Exactness.def = new Exactness(0);
    Exactness.on = new Exactness(1);
    Exactness.off = new Exactness(2);

    Exactness.prototype.intAsExactp = function () { return this.defaultp() || this.exactp(); };
    Exactness.prototype.floatAsInexactp = function () { return this.defaultp() || this.inexactp(); };

    // fromSchemeString: string boolean -> (scheme-number | false)
    var fromSchemeString = function(x, exactness, errbacks) {

	var radix = 10
	var exactness = typeof exactness === 'undefined' ? Exactness.def :
			exactness === true               ? Exactness.on :
			exactness === false              ? Exactness.off :
	   /* else */  errbacks.throwInternalError( "exactness must be true or false"
                                                   , this
                                                   , r) ;

	var hMatch = x.toLowerCase().match(hashModifiersRegexp)
	if (hMatch) {
	    var modifierString = hMatch[1].toLowerCase();

	    var exactFlag = modifierString.match(new RegExp("(#[ei])"))
	    var radixFlag = modifierString.match(new RegExp("(#[bodx])"))

	    if (exactFlag) {
		var f = exactFlag[1].charAt(1)
		exactness = f === 'e' ? Exactness.on :
			    f === 'i' ? Exactness.off :
			 // this case is unreachable
			 errbacks.throwInternalError("invalid exactness flag", this, r)
	    }
	    if (radixFlag) {
		var f = radixFlag[1].charAt(1)
		radix = f === 'b' ? 2 :
            f === 'o' ? 8 :
            f === 'd' ? 10 :
            f === 'x' ? 16 :
			 // this case is unreachable
			errbacks.throwInternalError("invalid radix flag", this, r)
	    }
	}

	var numberString = hMatch ? hMatch[2] : x
	// if the string begins with a hash modifier, then it must parse as a
	// number, an invalid parse is an error, not false. False is returned
	// when the item could potentially have been read as a symbol.
	var mustBeANumberp = hMatch ? true : false

	return fromSchemeStringRaw(numberString, radix, exactness, mustBeANumberp, errbacks)
    };

    function fromSchemeStringRaw(x, radix, exactness, mustBeANumberp, errbacks) {
	var cMatch = matchComplexRegexp(radix, x, errbacks);
	if (cMatch) {
          throw "Complex Numbers are not supported in Pyret";
	}

        return fromSchemeStringRawNoComplex(x, radix, exactness, mustBeANumberp, errbacks)
    }

    function fromSchemeStringRawNoComplex(x, radix, exactness, mustBeANumberp, errbacks) {
	var aMatch = x.match(schemeRationalRegexp(digitsForRadix(radix, errbacks)));
	if (aMatch) {
	  return Rational.makeInstance( fromSchemeStringRawNoComplex( aMatch[1]
                                                                      , radix
                                                                      , exactness
                                                                      , errbacks
                                                                    )
                                        , fromSchemeStringRawNoComplex( aMatch[2]
                                                                        , radix
                                                                        , exactness
                                                                        , errbacks
                                                                      )
                                        , errbacks);
	}

        if (x === '+nan.0' ||
            x === '-nan.0' ||
            x === '+inf.0' ||
            x === '-inf.0' ||
            x === '-0.0') {
          return Roughnum.makeInstance(Infinity);
        }

	var fMatch = x.match(schemeFlonumRegexp(digitsForRadix(radix, errbacks)))
	if (fMatch) {
	    var integralPart = fMatch[3] !== undefined ? fMatch[3] : fMatch[5];
	    var fractionalPart = fMatch[4] !== undefined ? fMatch[4] : fMatch[6];
	    return parseFloat( fMatch[1]
                               , integralPart
                               , fractionalPart
                               , radix
                               , exactness
                               , errbacks
                             )
	}

	var sMatch = x.match(schemeScientificPattern( digitsForRadix(radix, errbacks)
					      , expMarkForRadix(radix, errbacks)
					      ))
	if (sMatch) {
	    var coefficient = fromSchemeStringRawNoComplex(sMatch[1], radix, exactness, errbacks)
	    var exponent = fromSchemeStringRawNoComplex(sMatch[2], radix, exactness, errbacks)
	    return multiply(coefficient, expt(radix, exponent, errbacks), errbacks);
	}

	// Finally, integer tests.
	if (x.match(schemeDigitRegexp(digitsForRadix(radix, errbacks)))) {
	    var n = parseInt(x, radix);
	    if (isOverflow(n)) {
		return makeBignum(x);
	    } else if (exactness.intAsExactp()) {
		return n;
	    } else {
		return Roughnum.makeInstance(n)
	    }
	} else if (mustBeANumberp) {
	    if(x.length===0) errbacks.throwGeneralError("no digits");
	    errbacks.throwGeneralError("bad number: " + x, this);
	} else {
	    return false;
	}
    };

    function parseFloat(sign, integralPart, fractionalPart, radix, exactness, errbacks) {
	var sign = (sign == "-" ? -1 : 1);
	var integralPartValue = integralPart === ""  ? 0  :
				exactness.intAsExactp() ? parseExactInt(integralPart, radix, errbacks) :
							  parseInt(integralPart, radix)

	var fractionalNumerator = fractionalPart === "" ? 0 :
				  exactness.intAsExactp() ? parseExactInt(fractionalPart, radix, errbacks) :
							    parseInt(fractionalPart, radix)
	/* unfortunately, for these next two calculations, `expt` and `divide` */
	/* will promote to Bignum and Rational, respectively, but we only want */
	/* these if we're parsing in exact mode */
	var fractionalDenominator = exactness.intAsExactp() ? expt(radix, fractionalPart.length, errbacks) :
							      Math.pow(radix, fractionalPart.length)
	var fractionalPartValue = fractionalPart === "" ? 0 :
				  exactness.intAsExactp() ? divide(fractionalNumerator, fractionalDenominator, errbacks) :
							    fractionalNumerator / fractionalDenominator

	var forceInexact = function(o) {
	    return typeof o === "number" ? Roughnum.makeInstance(o, errbacks) :
					   o.toRoughnum(errbacks);
	}

	return exactness.floatAsInexactp() ? forceInexact(multiply(sign, add( integralPartValue, fractionalPartValue))) :
					     multiply(sign, add(integralPartValue, fractionalPartValue));
    }

    function parseExactInt(str, radix, errbacks) {
	return fromSchemeStringRawNoComplex(str, radix, Exactness.on, true, errbacks);
    }

  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////

  // The code below comes from Tom Wu's BigInteger implementation:

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // See "LICENSE" for details.

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
    else if(b == null && "string" != typeof a) this.fromString(a,256);
    else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (typeof(navigator) !== 'undefined' && navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (typeof(navigator) !== 'undefined' && navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = [];
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = [], i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r.push(int2char(d)); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r.push(int2char(d));
      }
    }
    return m?r.join(""):"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    if ( this.s < 0 ) {
      r = a.t - i;
    }
    else {
      r = i - a.t;
    }
    if(r != 0) return r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);    // normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);   // "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {    // Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);  // Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;        // y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;  // y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;    // y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;        // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)  // pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.bnpExp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.bnpExp = bnpExp; // renamed from exp, because we need the latter for Pyret

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // Copyright (c) 2005-2009  Tom Wu
  // All Rights Reserved.
  // See "LICENSE" for details.

  // Extended JavaScript BN functions, required for RSA private ops.

  // Version 1.1: new BigInteger("0", 10) returns "proper" zero

  // (public)
  function bnClone() { var r = nbi(); this.copyTo(r); return r; }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (public) return value as byte
  function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

  // (public) return value as short (assumes DB>=16)
  function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) alternate constructor
  function bnpFromNumber(a,b,c) {
    if("number" == typeof b) {
      // new BigInteger(int,int,RNG)
      if(a < 2) this.fromInt(1);
      else {
        this.fromNumber(a,c);
        if(!this.testBit(a-1))  // force MSB set
          this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
        if(this.isEven()) this.dAddOffset(1,0); // force odd
        while(!this.isProbablePrime(b)) {
          this.dAddOffset(2,0);
          if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
        }
      }
    }
    else {
      // new BigInteger(int,RNG)
      var x = [], t = a&7;
      x.length = (a>>3)+1;
      b.nextBytes(x);
      if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
      this.fromString(x,256);
    }
  }

  // (public) convert to bigendian byte array
  function bnToByteArray() {
    var i = this.t, r = [];
    r[0] = this.s;
    var p = this.DB-(i*this.DB)%8, d, k = 0;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
        r[k++] = d|(this.s<<(this.DB-p));
      while(i >= 0) {
        if(p < 8) {
          d = (this[i]&((1<<p)-1))<<(8-p);
          d |= this[--i]>>(p+=this.DB-8);
        }
        else {
          d = (this[i]>>(p-=8))&0xff;
          if(p <= 0) { p += this.DB; --i; }
        }
        if((d&0x80) != 0) d |= -256;
        if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
        if(k > 0 || d != this.s) r[k++] = d;
      }
    }
    return r;
  }

  function bnEquals(a) { return(this.compareTo(a)==0); }
  function bnMin(a) { return(this.compareTo(a)<0)?this:a; }
  function bnMax(a) { return(this.compareTo(a)>0)?this:a; }

  // (protected) r = this op a (bitwise)
  function bnpBitwiseTo(a,op,r) {
    var i, f, m = Math.min(a.t,this.t);
    for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
    if(a.t < this.t) {
      f = a.s&this.DM;
      for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
      r.t = this.t;
    }
    else {
      f = this.s&this.DM;
      for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
      r.t = a.t;
    }
    r.s = op(this.s,a.s);
    r.clamp();
  }

  // (public) this & a
  function op_and(x,y) { return x&y; }
  function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

  // (public) this | a
  function op_or(x,y) { return x|y; }
  function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

  // (public) this ^ a
  function op_xor(x,y) { return x^y; }
  function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

  // (public) this & ~a
  function op_andnot(x,y) { return x&~y; }
  function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

  // (public) ~this
  function bnNot() {
    var r = nbi();
    for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
    r.t = this.t;
    r.s = ~this.s;
    return r;
  }

  // (public) this << n
  function bnShiftLeft(n) {
    var r = nbi();
    if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
    return r;
  }

  // (public) this >> n
  function bnShiftRight(n) {
    var r = nbi();
    if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
    return r;
  }

  // return index of lowest 1-bit in x, x < 2^31
  function lbit(x) {
    if(x == 0) return -1;
    var r = 0;
    if((x&0xffff) == 0) { x >>= 16; r += 16; }
    if((x&0xff) == 0) { x >>= 8; r += 8; }
    if((x&0xf) == 0) { x >>= 4; r += 4; }
    if((x&3) == 0) { x >>= 2; r += 2; }
    if((x&1) == 0) ++r;
    return r;
  }

  // (public) returns index of lowest 1-bit (or -1 if none)
  function bnGetLowestSetBit() {
    for(var i = 0; i < this.t; ++i)
      if(this[i] != 0) return i*this.DB+lbit(this[i]);
    if(this.s < 0) return this.t*this.DB;
    return -1;
  }

  // return number of 1 bits in x
  function cbit(x) {
    var r = 0;
    while(x != 0) { x &= x-1; ++r; }
    return r;
  }

  // (public) return number of set bits
  function bnBitCount() {
    var r = 0, x = this.s&this.DM;
    for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
    return r;
  }

  // (public) true iff nth bit is set
  function bnTestBit(n) {
    var j = Math.floor(n/this.DB);
    if(j >= this.t) return(this.s!=0);
    return((this[j]&(1<<(n%this.DB)))!=0);
  }

  // (protected) this op (1<<n)
  function bnpChangeBit(n,op) {
    var r = BigInteger.ONE.shiftLeft(n);
    this.bitwiseTo(r,op,r);
    return r;
  }

  // (public) this | (1<<n)
  function bnSetBit(n) { return this.changeBit(n,op_or); }

  // (public) this & ~(1<<n)
  function bnClearBit(n) { return this.changeBit(n,op_andnot); }

  // (public) this ^ (1<<n)
  function bnFlipBit(n) { return this.changeBit(n,op_xor); }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  // (public) this + a
  function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

  // (public) this - a
  function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

  // (public) this * a
  function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

  // (public) this / a
  function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

  // (public) this % a
  function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

  // (public) [this/a,this%a]
  function bnDivideAndRemainder(a) {
    var q = nbi(), r = nbi();
    this.divRemTo(a,q,r);
    return [q,r];
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // A "null" reducer
  function NullExp() {}
  function nNop(x) { return x; }
  function nMulTo(x,y,r) { x.multiplyTo(y,r); }
  function nSqrTo(x,r) { x.squareTo(r); }

  NullExp.prototype.convert = nNop;
  NullExp.prototype.revert = nNop;
  NullExp.prototype.mulTo = nMulTo;
  NullExp.prototype.sqrTo = nSqrTo;

  // (public) this^e
  function bnPow(e) { return this.bnpExp(e,new NullExp()); }

  // (protected) r = lower n words of "this * a", a.t <= n
  // "this" should be the larger one if appropriate.
  function bnpMultiplyLowerTo(a,n,r) {
    var i = Math.min(this.t+a.t,n);
    r.s = 0; // assumes a,this >= 0
    r.t = i;
    while(i > 0) r[--i] = 0;
    var j;
    for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
    for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
    r.clamp();
  }

  // (protected) r = "this * a" without lower n words, n > 0
  // "this" should be the larger one if appropriate.
  function bnpMultiplyUpperTo(a,n,r) {
    --n;
    var i = r.t = this.t+a.t-n;
    r.s = 0; // assumes a,this >= 0
    while(--i >= 0) r[i] = 0;
    for(i = Math.max(n-this.t,0); i < a.t; ++i)
      r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
    r.clamp();
    r.drShiftTo(1,r);
  }

  // Barrett modular reduction
  function Barrett(m) {
    // setup Barrett
    this.r2 = nbi();
    this.q3 = nbi();
    BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
    this.mu = this.r2.divide(m);
    this.m = m;
  }

  function barrettConvert(x) {
    if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
    else if(x.compareTo(this.m) < 0) return x;
    else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
  }

  function barrettRevert(x) { return x; }

  // x = x mod m (HAC 14.42)
  function barrettReduce(x) {
    x.drShiftTo(this.m.t-1,this.r2);
    if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
    this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
    this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
    while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
    x.subTo(this.r2,x);
    while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = x^2 mod m; x != r
  function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = x*y mod m; x,y != r
  function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Barrett.prototype.convert = barrettConvert;
  Barrett.prototype.revert = barrettRevert;
  Barrett.prototype.reduce = barrettReduce;
  Barrett.prototype.mulTo = barrettMulTo;
  Barrett.prototype.sqrTo = barrettSqrTo;

  // (public) this^e % m (HAC 14.85)
  function bnModPow(e,m) {
    var i = e.bitLength(), k, r = nbv(1), z;
    if(i <= 0) return r;
    else if(i < 18) k = 1;
    else if(i < 48) k = 3;
    else if(i < 144) k = 4;
    else if(i < 768) k = 5;
    else k = 6;
    if(i < 8)
      z = new Classic(m);
    else if(m.isEven())
      z = new Barrett(m);
    else
      z = new Montgomery(m);

    // precomputation
    var g = [], n = 3, k1 = k-1, km = (1<<k)-1;
    g[1] = z.convert(this);
    if(k > 1) {
      var g2 = nbi();
      z.sqrTo(g[1],g2);
      while(n <= km) {
        g[n] = nbi();
        z.mulTo(g2,g[n-2],g[n]);
        n += 2;
      }
    }

    var j = e.t-1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j])-1;
    while(j >= 0) {
      if(i >= k1) w = (e[j]>>(i-k1))&km;
      else {
        w = (e[j]&((1<<(i+1))-1))<<(k1-i);
        if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
      }

      n = k;
      while((w&1) == 0) { w >>= 1; --n; }
      if((i -= n) < 0) { i += this.DB; --j; }
      if(is1) { // ret == 1, don't bother squaring or multiplying it
        g[w].copyTo(r);
        is1 = false;
      }
      else {
        while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
        if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
        z.mulTo(r2,g[w],r);
      }

      while(j >= 0 && (e[j]&(1<<i)) == 0) {
        z.sqrTo(r,r2); t = r; r = r2; r2 = t;
        if(--i < 0) { i = this.DB-1; --j; }
      }
    }
    return z.revert(r);
  }

  // (public) gcd(this,a) (HAC 14.54)
  function bnGCD(a) {
    var x = (this.s<0)?this.negate():this.clone();
    var y = (a.s<0)?a.negate():a.clone();
    if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
    var i = x.getLowestSetBit(), g = y.getLowestSetBit();
    if(g < 0) return x;
    if(i < g) g = i;
    if(g > 0) {
      x.rShiftTo(g,x);
      y.rShiftTo(g,y);
    }
    while(x.signum() > 0) {
      if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
      if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
      if(x.compareTo(y) >= 0) {
        x.subTo(y,x);
        x.rShiftTo(1,x);
      }
      else {
        y.subTo(x,y);
        y.rShiftTo(1,y);
      }
    }
    if(g > 0) y.lShiftTo(g,y);
    return y;
  }

  // (protected) this % n, n < 2^26
  function bnpModInt(n) {
    if(n <= 0) return 0;
    var d = this.DV%n, r = (this.s<0)?n-1:0;
    if(this.t > 0)
      if(d == 0) r = this[0]%n;
    else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
    return r;
  }

  // (public) 1/this % m (HAC 14.61)
  function bnModInverse(m) {
    var ac = m.isEven();
    if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
    var u = m.clone(), v = this.clone();
    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
    while(u.signum() != 0) {
      while(u.isEven()) {
        u.rShiftTo(1,u);
        if(ac) {
          if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
          a.rShiftTo(1,a);
        }
        else if(!b.isEven()) b.subTo(m,b);
        b.rShiftTo(1,b);
      }
      while(v.isEven()) {
        v.rShiftTo(1,v);
        if(ac) {
          if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
          c.rShiftTo(1,c);
        }
        else if(!d.isEven()) d.subTo(m,d);
        d.rShiftTo(1,d);
      }
      if(u.compareTo(v) >= 0) {
        u.subTo(v,u);
        if(ac) a.subTo(c,a);
        b.subTo(d,b);
      }
      else {
        v.subTo(u,v);
        if(ac) c.subTo(a,c);
        d.subTo(b,d);
      }
    }
    if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
    if(d.compareTo(m) >= 0) return d.subtract(m);
    if(d.signum() < 0) d.addTo(m,d); else return d;
    if(d.signum() < 0) return d.add(m); else return d;
  }

  var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
  var lplim = (1<<26)/lowprimes[lowprimes.length-1];

  // (public) test primality with certainty >= 1-.5^t
  function bnIsProbablePrime(t) {
    var i, x = this.abs();
    if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
      for(i = 0; i < lowprimes.length; ++i)
        if(x[0] == lowprimes[i]) return true;
      return false;
    }
    if(x.isEven()) return false;
    i = 1;
    while(i < lowprimes.length) {
      var m = lowprimes[i], j = i+1;
      while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
      m = x.modInt(m);
      while(i < j) if(m%lowprimes[i++] == 0) return false;
    }
    return x.millerRabin(t);
  }

  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
  function bnpMillerRabin(t) {
    var n1 = this.subtract(BigInteger.ONE);
    var k = n1.getLowestSetBit();
    if(k <= 0) return false;
    var r = n1.shiftRight(k);
    t = (t+1)>>1;
    if(t > lowprimes.length) t = lowprimes.length;
    var a = nbi();
    for(var i = 0; i < t; ++i) {
      a.fromInt(lowprimes[i]);
      var y = a.modPow(r,this);
      if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
        var j = 1;
        while(j++ < k && y.compareTo(n1) != 0) {
          y = y.modPowInt(2,this);
          if(y.compareTo(BigInteger.ONE) == 0) return false;
        }
        if(y.compareTo(n1) != 0) return false;
      }
    }
    return true;
  }

  // protected
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.fromNumber = bnpFromNumber;
  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
  BigInteger.prototype.changeBit = bnpChangeBit;
  BigInteger.prototype.addTo = bnpAddTo;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
  BigInteger.prototype.modInt = bnpModInt;
  BigInteger.prototype.millerRabin = bnpMillerRabin;

  // public
  BigInteger.prototype.clone = bnClone;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.byteValue = bnByteValue;
  BigInteger.prototype.shortValue = bnShortValue;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.toByteArray = bnToByteArray;
  BigInteger.prototype.equals = bnEquals;
  BigInteger.prototype.min = bnMin;
  BigInteger.prototype.max = bnMax;
  BigInteger.prototype.and = bnAnd;
  BigInteger.prototype.or = bnOr;
  BigInteger.prototype.xor = bnXor;
  BigInteger.prototype.andNot = bnAndNot;
  BigInteger.prototype.not = bnNot;
  BigInteger.prototype.shiftLeft = bnShiftLeft;
  BigInteger.prototype.shiftRight = bnShiftRight;
  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
  BigInteger.prototype.bitCount = bnBitCount;
  BigInteger.prototype.testBit = bnTestBit;
  BigInteger.prototype.setBit = bnSetBit;
  BigInteger.prototype.clearBit = bnClearBit;
  BigInteger.prototype.flipBit = bnFlipBit;
  BigInteger.prototype.add = bnAdd;
  BigInteger.prototype.subtract = bnSubtract;
  BigInteger.prototype.multiply = bnMultiply;
  BigInteger.prototype.divide = bnDivide;
  BigInteger.prototype.remainder = bnRemainder;
  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
  BigInteger.prototype.modPow = bnModPow;
  BigInteger.prototype.modInverse = bnModInverse;
  BigInteger.prototype.pow = bnPow;
  BigInteger.prototype.gcd = bnGCD;
  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

  // BigInteger interfaces not implemented in jsbn:

  // BigInteger(int signum, byte[] magnitude)
  // double doubleValue()
  // float floatValue()
  // int hashCode()
  // long longValue()
  // static BigInteger valueOf(long val)

  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////
  // END OF copy-and-paste of jsbn.

  BigInteger.NEGATIVE_ONE = BigInteger.ONE.negate();

  // Other methods we need to add for compatibilty with js-numbers numeric tower.

  // add is implemented above.
  // subtract is implemented above.
  // multiply is implemented above.
  // equals is implemented above.
  // abs is implemented above.
  // negate is defined above.

  // makeBignum: string -> BigInteger
  var makeBignum = function(s) {
    if (typeof(s) === 'number') { s = s + ''; }
    s = expandExponent(s);
    return new BigInteger(s, 10);
  };

  var zerostring = function(n) {
    var buf = [];
    for (var i = 0; i < n; i++) {
      buf.push('0');
    }
    return buf.join('');
  };

  BigInteger.prototype.isFinite = function() {
    return true;
  };

  BigInteger.prototype.isInteger = function() {
    return true;
  };

  BigInteger.prototype.isRational = function() {
    return true;
  };

  BigInteger.prototype.isExact = BigInteger.prototype.isRational;

  BigInteger.prototype.isReal = function() {
    return true;
  };

  BigInteger.prototype.isRoughnum = function() {
    return false;
  };

  BigInteger.prototype.isPositive = function() {
    return this.compareTo(BigInteger.ZERO) > 0;
  };

  BigInteger.prototype.isNonNegative = function() {
    return this.compareTo(BigInteger.ZERO) >= 0;
  };

  BigInteger.prototype.isNegative = function() {
    return this.compareTo(BigInteger.ZERO) < 0;
  };

  BigInteger.prototype.isNonPositive = function() {
    return this.compareTo(BigInteger.ZERO) <= 0;
  };

  BigInteger.prototype.toRational = function() {
    return this;
  };

  BigInteger.prototype.toExact = BigInteger.prototype.toRational;

  BigInteger.prototype.toFixnum = function() {
    var str = this.toString();
    var expt = 0;
    var negativeP = false;
    var c0 = str[0];

    var i, slen, result;

    if (c0 === '-' || c0 === '+') {
      str = str.substring(1);
      if (c0 === '-') {
        negativeP = true;
      }
    }

    slen = str.length;

    for(i = slen - 1;  i >= 0; i--) {
      if (str[i] === '0') {
        expt++;
      } else {
        slen = i + 1;
        str = str.substring(0, slen);
        break;
      }
    }

    str = str + 'e' + expt;

    result = Number(str);

    if (negativeP) {
      result = - result;
    }

    return result;
  } ;

  BigInteger.prototype.toRoughnum = function(errbacks) {
    return Roughnum.makeInstance(this.toFixnum(), errbacks);
  };

  BigInteger.prototype.greaterThan = function(other, errbacks) {
    return this.compareTo(other, errbacks) > 0;
  };

  BigInteger.prototype.greaterThanOrEqual = function(other, errbacks) {
    return this.compareTo(other, errbacks) >= 0;
  };

  BigInteger.prototype.lessThan = function(other, errbacks) {
    return this.compareTo(other, errbacks) < 0;
  };

  BigInteger.prototype.lessThanOrEqual = function(other, errbacks) {
    return this.compareTo(other, errbacks) <= 0;
  };

  // divide: pyretnum -> pyretnum
  // WARNING NOTE: we override the old version of divide.
  BigInteger.prototype.divide = function(other, errbacks) {
    var quotientAndRemainder = bnDivideAndRemainder.call(this, other);
    if (quotientAndRemainder[1].compareTo(BigInteger.ZERO) === 0) {
      return quotientAndRemainder[0];
    } else {
      var result = add(quotientAndRemainder[0],
                       Rational.makeInstance(quotientAndRemainder[1], other, errbacks), errbacks);
      return result;
    }
  };

  BigInteger.prototype.numerator = function() {
    return this;
  };

  BigInteger.prototype.denominator = function() {
    return 1;
  };

  (function() {
    // Classic implementation of Newton-Raphson square-root search,
    // adapted for integer-sqrt.
    // http://en.wikipedia.org/wiki/Newton's_method#Square_root_of_a_number
    var searchIter = function(n, guess, errbacks) {
      while(!(lessThanOrEqual(sqr(guess),n, errbacks) &&
              lessThan(n,sqr(add(guess, 1, errbacks), errbacks), errbacks))) {
        guess = floor(divide(add(guess,
                                 floor(divide(n, guess, errbacks), errbacks), errbacks),
                             2, errbacks), errbacks);
      }
      return guess;
    };

    // integerSqrt: -> pyretnum
    BigInteger.prototype.integerSqrt = function(errbacks) {
      var n;
      if(sign(this) >= 0) {
        return searchIter(this, this, errbacks);
      } else {
        errbacks.throwDomainError('integerSqrt of negative bignum ' + this);
      }
    };
  })();

  (function() {
    // Get an approximation using integerSqrt, and then start another
    // Newton-Raphson search if necessary.
    BigInteger.prototype.sqrt = function(errbacks) {
      var approx = this.integerSqrt(errbacks), fix;
      if (eqv(sqr(approx, errbacks), this, errbacks)) {
        return approx;
      }
      fix = toFixnum(this);
      if (isFinite(fix)) {
        return Roughnum.makeInstance(Math.sqrt(fix), errbacks);
      } else {
        return approx;
      }
    };
  })();

  // sqrt: -> pyretnum
  // http://en.wikipedia.org/wiki/Newton's_method#Square_root_of_a_number
  // Produce the square root.

  // floor: -> pyretnum
  // Produce the floor.
  BigInteger.prototype.floor = function(errbacks) {
    return this;
  }

  // ceiling: -> pyretnum
  // Produce the ceiling.
  BigInteger.prototype.ceiling = function(errbacks) {
    return this;
  }

  // round: -> pyretnum
  // Round to the nearest integer.
  BigInteger.prototype.round = function(n, errbacks) {
    return this;
  };

  BigInteger.prototype.roundEven = function(n, errbacks) {
    return this;
  };

  // log: -> pyretnum
  // Produce the log.
  BigInteger.prototype.log = function(n, errbacks) {
    return log(this.toFixnum(), errbacks);
  };

  // tan: -> pyretnum
  // Produce the tan.
  BigInteger.prototype.tan = function(n, errbacks) {
    return tan(this.toFixnum(), errbacks);
  };

  // atan: -> pyretnum
  // Produce the arc tangent.
  BigInteger.prototype.atan = function(n, errbacks) {
    return atan(this.toFixnum(), errbacks);
  };

  // cos: -> pyretnum
  // Produce the cosine.
  BigInteger.prototype.cos = function(n, errbacks) {
    return cos(this.toFixnum(), errbacks);
  };

  // sin: -> pyretnum
  // Produce the sine.
  BigInteger.prototype.sin = function(n, errbacks) {
    return sin(this.toFixnum(), errbacks);
  };

  // expt: pyretnum -> pyretnum
  // Produce the power to the input.
  BigInteger.prototype.expt = function(n, errbacks) {
    return bnPow.call(this, n);
  };

  // exp: -> pyretnum
  // Produce e raised to the given power.
  BigInteger.prototype.exp = function(errbacks) {
    var res = Math.exp(this.toFixnum());
    if (!isFinite(res))
      errbacks.throwDomainError('exp: argument too large: ' + this);
    return Roughnum.makeInstance(res, errbacks);
  };

  // acos: -> pyretnum
  // Produce the arc cosine.
  BigInteger.prototype.acos = function(n, errbacks) {
    return acos(this.toFixnum(), errbacks);
  };

  // asin: -> pyretnum
  // Produce the arc sine.
  BigInteger.prototype.asin = function(n, errbacks) {
    return asin(this.toFixnum(), errbacks);
  };

  //////////////////////////////////////////////////////////////////////
  // toRepeatingDecimal: jsnum jsnum {limit: number}? -> [string, string, string]
  //
  // Given the numerator and denominator parts of a rational,
  // produces the repeating-decimal representation, where the first
  // part are the digits before the decimal, the second are the
  // non-repeating digits after the decimal, and the third are the
  // remaining repeating decimals.
  //
  // An optional limit on the decimal expansion can be provided, in which
  // case the search cuts off if we go past the limit.
  // If this happens, the third argument returned becomes '...' to indicate
  // that the search was prematurely cut off.
  var toRepeatingDecimal = (function() {
    var getResidue = function(r, d, limit, errbacks) {
      var digits = [];
      var seenRemainders = {};
      seenRemainders[r] = true;
      while(true) {
        if (limit-- <= 0) {
          return [digits.join(''), '...']
        }

        var nextDigit = quotient(
          multiply(r, 10, errbacks), d, errbacks);
        var nextRemainder = remainder(
          multiply(r, 10, errbacks),
          d, errbacks);
        digits.push(nextDigit.toString());
        if (seenRemainders[nextRemainder]) {
          r = nextRemainder;
          break;
        } else {
          seenRemainders[nextRemainder] = true;
          r = nextRemainder;
        }
      }

      var firstRepeatingRemainder = r;
      var repeatingDigits = [];
      while (true) {
        var nextDigit = quotient(multiply(r, 10, errbacks), d, errbacks);
        var nextRemainder = remainder(
          multiply(r, 10, errbacks),
          d, errbacks);
        repeatingDigits.push(nextDigit.toString());
        if (equals(nextRemainder, firstRepeatingRemainder)) {
          break;
        } else {
          r = nextRemainder;
        }
      };

      var digitString = digits.join('');
      var repeatingDigitString = repeatingDigits.join('');

      while (digitString.length >= repeatingDigitString.length &&
             (digitString.substring(
               digitString.length - repeatingDigitString.length)
              === repeatingDigitString)) {
        digitString = digitString.substring(
          0, digitString.length - repeatingDigitString.length);
      }

      return [digitString, repeatingDigitString];

    };

    return function(n, d, options, errbacks) {
      // default limit on decimal expansion; can be overridden
      var limit = 512;
      if (options && typeof(options.limit) !== 'undefined') {
        limit = options.limit;
      }
      if (! isInteger(n)) {
        errbacks.throwDomainError('toRepeatingDecimal: n ' + n.toString() +
                                  " is not an integer.");
      }
      if (! isInteger(d)) {
        errbacks.throwDomainError('toRepeatingDecimal: d ' + d.toString() +
                                  " is not an integer.");
      }
      if (equals(d, 0, errbacks)) {
        errbacks.throwDomainError('toRepeatingDecimal: d equals 0');
      }
      if (lessThan(d, 0, errbacks)) {
        errbacks.throwDomainError('toRepeatingDecimal: d < 0');
      }
      var sign = (lessThan(n, 0) ? "-" : "");
      n = abs(n, errbacks);
      var beforeDecimalPoint = sign + quotient(n, d, errbacks);
      var afterDecimals = getResidue(remainder(n, d, errbacks), d, limit, errbacks);
      return [beforeDecimalPoint].concat(afterDecimals);
    };
  })();
  //////////////////////////////////////////////////////////////////////
  // toStringDigits: jsnum jsnum -> string
  // Converts the number to a string, providing digits precision in the
  // output.  If digits is positive, provides that many digits to the right
  // of the decimal point (including adding zeroes beyond the actual precision of
  // the number).  If digits is negative, rounds that many positions to the
  // left of the decimal, replacing them with zeroes.
  //
  // Note that num-to-string-digits is only for formatting, and its
  // output's apparent precision may be unrelated to the actual precision of the
  // input number, which may have been an approximation, or unrepresentable in
  // decimal.
  function toStringDigits(n, digits, errbacks) {
    if (!isInteger(digits)) {
      errbacks.throwDomainError('num-to-string-digits: digits should be an integer');
    }
    var tenDigits = expt(10, digits, errbacks);
    var d = toFixnum(digits);
    n = divide(round(multiply(n, tenDigits, errbacks), errbacks), tenDigits, errbacks);
    if (isInteger(n)) {
      var ans = n.toString();
      if (d >= 1) {
        ans += '.';
        for (var i = 0; i < d; i++) {
          ans += '0';
        }
      }
      return ans;
    }
    // n is not an integer implies that d >= 1
    var decimal = toRepeatingDecimal(n.numerator(), n.denominator(), undefined, errbacks);
    var ans = decimal[1].toString();
    while (ans.length < d) {
      ans += decimal[2];
    }
    return decimal[0] + '.' + ans.substring(0, d);
  }
  //////////////////////////////////////////////////////////////////////

  // External interface of js-numbers:

  Numbers['fromFixnum'] = fromFixnum;
  Numbers['fromString'] = fromString;
  Numbers['fromSchemeString'] = fromSchemeString;
  Numbers['makeBignum'] = makeBignum;
  Numbers['makeRational'] = Rational.makeInstance;
  Numbers['makeRoughnum'] = Roughnum.makeInstance;

  Numbers['isPyretNumber'] = isPyretNumber;
  Numbers['isRational'] = isRational;
  Numbers['isReal'] = isReal;
  Numbers['isExact'] = isExact;
  Numbers['isInteger'] = isInteger;
  Numbers['isRoughnum'] = isRoughnum;
  Numbers['isPositive'] = isPositive;
  Numbers['isNegative'] = isNegative;
  Numbers['isNonPositive'] = isNonPositive;
  Numbers['isNonNegative'] = isNonNegative;

  Numbers['toFixnum'] = toFixnum;
  Numbers['toExact'] = toExact;
  Numbers['toRational'] = toRational;
  Numbers['toRoughnum'] = toRoughnum;

  Numbers['add'] = add;
  Numbers['subtract'] = subtract;
  Numbers['multiply'] = multiply;
  Numbers['divide'] = divide;
  Numbers['equals'] = equals;
  Numbers['equalsAnyZero'] = equalsAnyZero;
  Numbers['eqv'] = eqv; // why is this being exported?
  Numbers['roughlyEquals'] = roughlyEquals;
  Numbers['roughlyEqualsRel'] = roughlyEqualsRel;
  Numbers['greaterThanOrEqual'] = greaterThanOrEqual;
  Numbers['lessThanOrEqual'] = lessThanOrEqual;
  Numbers['greaterThan'] = greaterThan;
  Numbers['lessThan'] = lessThan;
  Numbers['expt'] = expt;
  Numbers['exp'] = exp;
  Numbers['modulo'] = modulo;
  Numbers['numerator'] = numerator;
  Numbers['denominator'] = denominator;
  Numbers['integerSqrt'] = integerSqrt;
  Numbers['sqrt'] = sqrt;
  Numbers['abs'] = abs;
  Numbers['quotient'] = quotient;
  Numbers['remainder'] = remainder;
  Numbers['floor'] = floor;
  Numbers['ceiling'] = ceiling;
  Numbers['round'] = round;
  Numbers['roundEven'] = roundEven;
  Numbers['log'] = log;
  Numbers['tan'] = tan;
  Numbers['atan'] = atan;
  Numbers['atan2'] = atan2;
  Numbers['cos'] = cos;
  Numbers['sin'] = sin;
  Numbers['tan'] = tan;
  Numbers['acos'] = acos;
  Numbers['asin'] = asin;
  Numbers['sqr'] = sqr;
  Numbers['gcd'] = gcd;
  Numbers['lcm'] = lcm;

  Numbers['toRepeatingDecimal'] = toRepeatingDecimal;
  Numbers['toStringDigits'] = toStringDigits;

  // The following exposes the class representations for easier
  // integration with other projects.
  Numbers['BigInteger'] = BigInteger;
  Numbers['Rational'] = Rational;
  Numbers['Roughnum'] = Roughnum;
  Numbers['FloatPoint'] = Roughnum; //FIXME
  Numbers['Complex'] = Roughnum; //FIXME

  Numbers['MIN_FIXNUM'] = MIN_FIXNUM;
  Numbers['MAX_FIXNUM'] = MAX_FIXNUM;

  return Numbers;
});


define('pyret-base/js/codePoint',[], function() {

  /* NOTE(joe): Polyfills for Unicode, from
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt
   *
   * *Not* adding them as methods on String because that breaks sandbox guarantees
   * in things like Caja, so just make them functions available in this scope
   */
  /*! http://mths.be/codepointat v0.1.0 by @mathias */
  var codePointAt = function(string, position) {
    var size = string.length;
    // `ToInteger`
    var index = position ? Number(position) : 0;
    if (index != index) { // better `isNaN`
      index = 0;
    }
    // Account for out-of-bounds indices:
    if (index < 0 || index >= size) {
      return undefined;
    }
    // Get the first code unit
    var first = string.charCodeAt(index);
    var second;
    if ( // check if it is the start of a surrogate pair
      first >= 0xD800 && first <= 0xDBFF && // high surrogate
      size > index + 1 // there is a next code unit
    ) {
      second = string.charCodeAt(index + 1);
      if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
      }
    }
    return first;
  };

  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
  var stringFromCharCode = String.fromCharCode;
  var floor = Math.floor;
  var fromCodePoint = function(codePoints) {
    var MAX_SIZE = 0x4000;
    var codeUnits = [];
    var highSurrogate;
    var lowSurrogate;
    var index = -1;
    var length = arguments.length;
    if (!length) {
      return '';
    }
    var result = '';
    while (++index < length) {
      var codePoint = Number(arguments[index]);
      if (
        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
        codePoint < 0 || // not a valid Unicode code point
        codePoint > 0x10FFFF || // not a valid Unicode code point
        floor(codePoint) != codePoint // not an integer
      ) {
        throw RangeError('Invalid code point: ' + codePoint);
      }
      if (codePoint <= 0xFFFF) { // BMP code point
        codeUnits.push(codePoint);
      } else { // Astral code point; split in surrogate halves
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        codePoint -= 0x10000;
        highSurrogate = (codePoint >> 10) + 0xD800;
        lowSurrogate = (codePoint % 0x400) + 0xDC00;
        codeUnits.push(highSurrogate, lowSurrogate);
      }
      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
        result += stringFromCharCode.apply(null, codeUnits);
        codeUnits.length = 0;
      }
    }
    return result;
  };

  return {
    codePointAt: codePointAt,
    fromCodePoint: fromCodePoint
  };
});

define('pyret-base/js/runtime-util',[], function() {
  var gs = Math.floor(Math.random() * 10000);
  function gensym(name) {
    return name + String(gs++);
  }
  function isBrowser() {
    return requirejs.isBrowser || typeof importScripts !== "undefined";
  }

  var suspend;
  if (typeof setImmediate !== 'undefined') {
    suspend = function(f) { return setImmediate(f); };
  }
  else if (isBrowser() && (typeof window !== "undefined") && window.postMessage) {
    var origin = String(window.location.origin);
    var postMessageCBToken = String(Math.random());
    var postMessageCBs = {};
    var postMessageIndex = 0;
    window.addEventListener('message', function(e) {
      if(e.data.token === postMessageCBToken && postMessageCBs[e.data.cb]) {
        var f = postMessageCBs[e.data.cb];
        delete postMessageCBs[e.data.cb];
        f();
      }
    });
    var suspend = function(f) {
      postMessageIndex += 1;
      postMessageCBs[postMessageIndex] = f;
      window.postMessage({
        token: postMessageCBToken,
        cb: postMessageIndex
      }, origin);
    };
  }
  else {
    suspend = function(f) { setTimeout(f, 0); };
  }

  function memoModule(modname, moduleFun) {
    return function(RUNTIME, NAMESPACE) {

      if(RUNTIME.modules[modname]) {
        return RUNTIME.modules[modname];
      }
      else {
        return RUNTIME.safeCall(function() {
            return moduleFun(RUNTIME, NAMESPACE);
          }, function(moduleFunVal) {
            RUNTIME.modules[modname] = moduleFunVal;
            return moduleFunVal;
          });
      }
    };
  }

  function modBuiltin(name) {
    return { "import-type": "builtin", name: name };
  }

  // NOTE(joe): This should become a flagged structure that explicitly
  // allows Pyret-tainted JS modules to be imported, which cannot be done from
  // pure Pyret imports (they cannot generate this kind of dependency
  // description).
  var modBuiltinJS = modBuiltin;


  function definePyretModule(name, oldDeps, deps, provides, func) {
    return defineModule(function(_, result) { return result; }, name, oldDeps, deps, provides, func);
  }

  function defineJSModule(name, oldDeps, deps, provides, func) {
    function createJSReturn(runtime, jsObj) {
      return runtime.makeObject({
        "provide-plus-types": runtime.makeObject({
          values: runtime.makeObject({}),
          types: {},
          internal: jsObj
        }),
        answer: runtime.nothing
      });
    }
    return defineModule(createJSReturn, name, oldDeps, deps, provides, func);
  }


  function defineModule(wrap, name, oldDeps, deps, provides, func) {
    var modname = gensym(name);
    return {
      name: name,
      dependencies: deps,
      provides: provides,
      theModule: function(/* varargs */) {
        var pyretDependencies = Array.prototype.slice.call(arguments);
        return memoModule(modname, function(runtime, namespace) {
          return runtime.loadModulesNew(namespace, pyretDependencies, function(/* instantiated modules */) {
            var deps = Array.prototype.slice.call(arguments);
            return runtime.safeCall(function() {
              return func.apply(null, [runtime, namespace].concat(deps));
            }, function(result) {
              return wrap(runtime, result);
            });
          });
        });
      }
    };
  }

  function makeModuleReturn(runtime, types, values) {
    return runtime.makeObject({
      "provide-plus-types": runtime.makeObject({
        types: types,
        values: runtime.makeObject(values)
      })
    });
  }

  return {
      modBuiltin: modBuiltin,
      modBuiltinJS: modBuiltinJS,

      memoModule: memoModule,
      makeModuleReturn: makeModuleReturn,
      isBrowser: isBrowser,
      suspend: suspend,
      definePyretModule: definePyretModule,
      defineJSModule: defineJSModule,
      isBrowser: isBrowser
    };
});

define('pyret-base/js/runtime',["./namespace", "./js-numbers", "./codePoint", "seedrandom", "./runtime-util"],
function (Namespace, jsnums, codePoint, seedrandom, util) {

  if(util.isBrowser()) {
    var require = requirejs;
  }
  else {
    var require = requirejs.nodeRequire("requirejs");
  }

  var AsciiTable;

  function copyArgs(args) {
    return Array.prototype.slice.call(args);
  }

  var codePointAt = codePoint.codePointAt;
  var fromCodePoint = codePoint.fromCodePoint;

  /**
     Creates a Pyret runtime
     @param {{stdout : function(string), initialGas : number}}
     @return {Object} that contains all the necessary components of a runtime
  */
  function makeRuntime(theOutsideWorld) {
    var CONSOLE = theOutsideWorld.console || console;
    /**
       Extends an object with the new fields in fields
       If all the fields are new, the brands are kept,
       otherwise, the extended object has no brands

       The original object is not mutated, instead it is cloned and the clone
       is mutated

       @param {!Object.<string, !PBase>} fields: a PObj whose fields will be added to the Pyret base
       If any of the fields exist, they will be overwritten with the new value

       @return {!PBase} the extended object
    */
    function extendWith(fields) {
      /**@type {!Object}*/
      var newDict = Object.create(this.dict);
      /**@type {!boolean}*/
      var allNewFields = true;

      for(var field in fields) {
        if(hasProperty(this.dict, field)) {
          allNewFields = false;
          if(isRef(this.dict[field])) {
            thisRuntime.ffi.throwMessageException("Cannot update ref field " + field);
          }
        }

        newDict[field] = fields[field];
      }

      var newObj = this.updateDict(newDict, allNewFields);

      return newObj;
    }

    function brandClone(newObj, obj, b) {
      newObj.dict = obj.dict;
      if (b in obj.brands) {
        newObj.brands = obj.brands;
      }
      else {
        newObj.brands = Object.create(obj.brands);
        newObj.brands[b] = true;
        newObj.brands.brandCount++;
      }
      return newObj;
    }

    var noBrands = { brandCount: 0 };

    /**
       The base of all pyret values
       @constructor
    */
    function PBase() {
      /**@type {!Object.<string, Boolean>}*/
      this.brands = noBrands;
      /**@type {!Object.<string, !PBase>}*/
      this.dict   = emptyDict;
    }

    /**@type {!Object.<string, !PBase>}*/
    PBase.prototype.dict = emptyDict;
    /**@type {!function(!Object.<string, !PBase>) : !PBase}*/
    PBase.prototype.extendWith = extendWith;

    /**
       Sets up Inheritance with a function call
       This needs to be done socompiler recognizes it

       @param {Function} sub the class that will become a subclass
       @param {Function} from the class that sub will subclass
    */
    function inherits(sub, from) {
      sub.prototype = Object.create(from.prototype);
    }

    //Set up heirarchy
    //We need to set it up before all the other classes
    inherits(PNothing, PBase);
    inherits(PObject, PBase);
    inherits(PFunction, PBase);
    inherits(PMethod, PBase);
    inherits(POpaque, PBase);
    inherits(PTuple, PBase);

    /**
       Tests whether a JS Object has a property

       @param {!Object} obj the object to test
       @param {!string} p the property to look for
       @return {boolean} true if obj has property p, false otherwise
    */
    function hasProperty(obj, p) {
      return p in obj;
    }

    /**
       Tests whether a JS Object has a property, but not on
       any of its prototypes.
       Useful for objects that lack the .hasOwnProperty method

       @param {!Object} obj the object to test
       @param {!string} p the property to look for
       @return {boolean} true if obj has property p, false otherwise
    */
    function hasOwnProperty(obj, p) {
      return Object.prototype.hasOwnProperty.call(obj, p);
    }

    var parameters = Object.create(null);

    function getParam(param) {
      if(hasOwnProperty(parameters, param)) {
        return parameters[param];
      }
      else {
        throw new Error("Parameter " + param + " not defined");
      }
    }
    function setParam(param, val) {
      parameters[param] = val;
    }
    function hasParam(param) {
      return param in parameters;
    }
    function getParamOrSetDefault(param, defVal) {
      if (hasParam(param))
        return getParam(param);
      setParam(param, defVal);
      return defVal;
    }
    function clearParam(param) {
      delete parameters[param];
    }


    /**
       Get the brands on an object

       @param {!PBase} obj the object to get the brands of
       @return {Object.<string,!Boolean>}
    */
    function getBrands(obj) {
      return obj.brands;
    }

    var getProto = Object.getPrototypeOf;

    /**
       Get the fields in an object.

       @param {!PBase} obj the object to get the fields of
       @return {Array.<string>}

    */
    function getFields(obj) {
      var fieldsObj = Object.create(null);
      var fields = [];
      var currentProto = obj.dict;
      while(currentProto !== null) {
        var keys = Object.keys(currentProto);
        for (var i = 0; i < keys.length; i++)
          fieldsObj[keys[i]] = true;
        currentProto = getProto(currentProto);
      }
      fields = Object.keys(fieldsObj)
      return fields;
    }

    var emptyDict = Object.create(null);

    /**Tests whether an object is a PBase
       @param {Object} obj the item to test
       @return {boolean} true if object is a PBase
    */
    function isBase(obj) { return obj instanceof PBase; }

    function renderValueSkeleton(val, values) {
      if (thisRuntime.ffi.isVSValue(val)) { return values.pop(); } // double-check order!
      else if (thisRuntime.ffi.isVSStr(val)) { return thisRuntime.unwrap(thisRuntime.getField(val, "s")); }
      else if (thisRuntime.ffi.isVSCollection(val)) {
        var name = thisRuntime.unwrap(thisRuntime.getField(val, "name"));
        var items = thisRuntime.ffi.toArray(thisRuntime.getField(val, "items"));
        var s = "[" + name + ": ";
        for (var i = 0; i < items.length; i++) {
          if (i > 0) { s += ", "; }
          s += renderValueSkeleton(items[i], values);
        }
        return s + "]";
      } else if (thisRuntime.ffi.isVSConstr(val)) {
        var name = thisRuntime.unwrap(thisRuntime.getField(val, "name"));
        var items = thisRuntime.ffi.toArray(thisRuntime.getField(val, "args"));
        var s = name + "(";
        for (var i = 0; i < items.length; i++) {
          if (i > 0) { s += ", "; }
          s += renderValueSkeleton(items[i], values);
        }
        return s + ")";
      } else if (thisRuntime.ffi.isVSSeq(val)) {
        var items = thisRuntime.ffi.toArray(thisRuntime.getField(val, "items"));
        var s = "";
        for (var i = 0; i < items.length; i++) {
          s += renderValueSkeleton(items[i], values);
        }
        return s;
      } else if (thisRuntime.ffi.isVSTable(val)) {
        // Do this for now until we decide on a string
        // representation
        if (util.isBrowser()) {
          return "<table>";
        }
        if (!AsciiTable){
          AsciiTable = require("ascii-table");
        }
        var headers = thisRuntime.getField(val, "headers");
        var rowSkel = thisRuntime.getField(val, "rows");
        headers = headers.map(function(h){ return renderValueSkeleton(h, []); });
        var rows = [];
        for (var i = 0; i < rowSkel.length; i++) {
          var curRow = [];
          for (var j = 0; j < headers.length; j++) {
            var v = renderValueSkeleton(rowSkel[i][j], values);
            if (v.length > 40) {
              curRow.push(v.substr(0, 35) + "[...]");
            } else {
              curRow.push(v);
            }
          }
          rows.push(curRow);
        }
        return new AsciiTable().fromJSON({
          heading: headers,
          rows: rows
        }).toString();
      }
    }

    var DefaultReprMethods = {
      "string": String,
      "number": String,
      "boolean": String,
      "nothing": function(val) { return "nothing"; },
      "function": function(val) { return "<function>"; },
      "method": function(val) { return "<method>"; },
      "cyclic": function(val) { return val; },
      "opaque": function(val) {
//      if (thisRuntime.imageLib.isImage(val.val)) {
//        return "<image (" + String(val.val.getWidth()) + "x" + String(val.val.getHeight()) + ")>";
//      } else {
        return "<internal value>";
//      }
      },
      "tuple": function(t, pushTodo) {
        pushTodo(undefined, undefined, undefined, Array.prototype.slice.call(t.vals), "render-tuple");
      },
      "render-tuple": function(top) {
        var s = "{ ";
        for(var i = top.done.length - 1; i >= 0; i--) {
          if(i < top.done.length - 1) { s += "; "; }
          s += top.done[i];
        }
        s += " }";
        return s;
        
      },
      "object": function(val, pushTodo) {
        var keys = [];
        var vals = [];
        for (var field in val.dict) {
          keys.push(field); // NOTE: this is reversed order from the values,
          vals.unshift(val.dict[field]); // because processing will reverse them back
        }
        pushTodo(undefined, val, undefined, vals, "render-object", { keys: keys });
      },
      "render-object": function(top) {
        var s = "{";
        for (var i = 0; i < top.extra.keys.length; i++) {
          if (i > 0) { s += ", "; }
          s += top.extra.keys[i] + ": " + top.done[i];
        }
        s += "}";
        return s;
      },
      "ref": function(val, implicit, pushTodo) {
        pushTodo(undefined, undefined, val, [getRef(val)], "render-ref", { implicit: implicit });
      },
      "render-ref": function(top) {
        var s = "";
        if (top.extra.implicit) {
          s += top.done[0];
        } else {
          s += "ref(" + top.done[0] + ")";
        }
        return s;
      },
      "data": function(val, pushTodo) {
        var vals = val.$app_fields_raw(function(/* varargs */) {
          var ans = new Array(arguments.length);
          for (var i = 0; i < arguments.length; i++) ans[i] = arguments[i];
          return ans;
        });
        pushTodo(undefined, val, undefined, vals, "render-data",
                 { arity: val.$arity, implicitRefs: val.$mut_fields_mask,
                   fields: val.$constructor.$fieldNames, constructorName: val.$name });
      },
      "render-data": function(top) {
        var s = top.extra.constructorName;
        // Sentinel value for singleton constructors
        if(top.extra.arity !== -1) {
          s += "(";
          for(var i = top.done.length - 1; i >= 0; i--) {
            if(i < top.done.length - 1) { s += ", "; }
            s += top.done[i];
          }
          s += ")";
        }
        return s;
      },
      "array": function(val, pushTodo) {
        pushTodo(val, undefined, undefined, Array.prototype.slice.call(val), "render-array");
      },
      "render-array": function(top) {
        var s = "[raw-array: ";
        for(var i = top.done.length - 1; i >= 0; i--) {
          if(i < top.done.length - 1) { s += ", "; }
          s += top.done[i];
        }
        s += "]";
        return s;
      },
      "valueskeleton": function(val, output, pushTodo) {
        // NOTE: this is the eager version;
        // a lazy version would skip getting the skeleton values altogether
        // console.trace();
        // throw new Error("How did we get here?");
        var values = thisRuntime.ffi.skeletonValues(output);
        pushTodo(undefined, val, undefined, values, "render-valueskeleton",
                 { skeleton: output });
      },
      "render-valueskeleton": function(top) {
        var skel = top.extra.skeleton;
        top.extra.skeleton = undefined;
        return renderValueSkeleton(skel, top.done);
      }
    };

    var ReprMethods = {};
    ReprMethods["_torepr"] = Object.create(DefaultReprMethods);
    ReprMethods["_torepr"]["string"] = function(str) {
      return '"' + replaceUnprintableStringChars(String(str)) + '"';
    };

    ReprMethods["_tostring"] = Object.create(DefaultReprMethods);

    ReprMethods["$cli"] = Object.create(DefaultReprMethods);
    ReprMethods["$cli"]["function"] = function(val) { return "<function:" + val.name + ">"; }
    ReprMethods["$cli"]["method"] = function(val) { return "<method:" + val.name + ">"; }

    ReprMethods.createNewRenderer = function createNewRenderer(name, base) {
      if (ReprMethods[name]) { return false; }
      ReprMethods[name] = Object.create(base);
      return true;
    }

    /********************
        Getting Fields
    ********************/
    /**
       Gets the field from an object of the given name
       -If field is a method, it binds self correctly and returns a function
       -If field is a placeholder, it calls get on the placeholder
       -If field is a mutable -> error
       -If field undefined -> error
       -Otherwise, returns field value

       @param {PBase} val
       @param {string} field

       @return {!PBase}
    **/
    function getFieldLocInternal(val, field, loc, isBang) {
      if(val === undefined) {
        if (thisRuntime.ffi === undefined || thisRuntime.ffi.throwInternalError === undefined) {
          // console.trace();
          throw Error("FFI or thisRuntime.ffi.throwInternalError is not yet defined, and lookup of field " + field + " on undefined failed at location " + JSON.stringify(loc));
        } else {
          thisRuntime.ffi.throwInternalError("Field lookup on undefined ", thisRuntime.ffi.makeList([field]));
        }
      }
      if(!isObject(val)) {
        if (val.$constrFor !== undefined) {
          thisRuntime.ffi.throwLookupConstructorNotObject(makeSrcloc(loc), val.$constrFor, field);
        }
        thisRuntime.ffi.throwLookupNonObject(makeSrcloc(loc), val, field); 
      }
      var fieldVal = val.dict[field];
      if(fieldVal === undefined) {
        if (thisRuntime.ffi === undefined || thisRuntime.ffi.throwFieldNotFound === undefined) {
          throw Error("FFI or thisRuntime.ffi.throwFieldNotFound is not yet defined, and lookup of field " + field + " on " + toReprJS(val, ReprMethods._torepr) + " failed at location " + JSON.stringify(loc));
        } else {
          throw thisRuntime.ffi.throwFieldNotFound(makeSrcloc(loc), val, field);
        }
      }
      else if(isRef(fieldVal)){
        if(!isBang) {
          return fieldVal;
          // NOTE(joe Aug 8 2014): This is a design decision whether we
          // want this to be an error or not
          // thisRuntime.ffi.throwMessageException("Got ref in dot lookup");
        }
        return getRef(fieldVal);
      }
      else if(isMethod(fieldVal)){
        var curried = fieldVal['meth'](val);
        return makeFunctionArity(curried, fieldVal.arity - 1, field);
      }
      else {
        return fieldVal;
      }
    }

    function getFieldLoc(obj, field, loc) {
      return getFieldLocInternal(obj, field, loc, false);
    }

    function getFieldRef(obj, field, loc) {
      return getFieldLocInternal(obj, field, loc, true);
    }

    function getField(obj, field) {
      return thisRuntime.getFieldLoc(obj, field, ["runtime"]);
    }

    function extendObj(loc, val, extension) {
      if (!isObject(val)) { thisRuntime.ffi.throwExtendNonObject(makeSrcloc(loc), val); }
      return val.extendWith(extension);
    }

    /**
       Gets the field from an object of the given name
       -Returns the raw field value

       @param {!PBase} val
       @param {string} field

       @return {!PBase}
    **/
    function getColonField(val, field) {
      return getColonFieldLoc(val, field, ["runtime"]);
    }
    function getColonFieldLoc(val, field, loc) {
      if(val === undefined) { thisRuntime.ffi.throwInternalError("Field lookup on undefined ", [field]); }
      if(!isObject(val)) { thisRuntime.ffi.throwLookupNonObject(makeSrcloc(loc), val, field); }
      var fieldVal = val.dict[field];
      if(fieldVal === undefined) {
        thisRuntime.ffi.throwFieldNotFound(makeSrcloc(loc), val, field);
      }
      else {
        return fieldVal;
      }
    }

    /**

       @constructor
    */
    function POpaque(val, equals) {
      this.val = val;
      this.equals = equals;
      /**@type {!Object.<string, Boolean>}*/
      this.brands = noBrands;
    }
    POpaque.prototype = Object.create(PBase.prototype);

    function makeOpaque(val, equals) { return new POpaque(val, equals); }
    function isOpaque(val) { return val instanceof POpaque; }

    /*********************
        Nothing
    **********************/
    /**
       Pyret Nothing
       Represents the 'nothing' value in pyret
       @constructor
       @extends {PBase}
    **/
    function PNothing() {
      /**@type {!Object.<string, !PBase>}*/
      this.dict   = emptyDict;
      /**@type {!Object.<string, Boolean>}*/
      this.brands = noBrands;
    }

    /**Clones the nothing
       @param {!String} b The brand
       @return {!PNothing} With same dict
    */
    PNothing.prototype.brand = function(b) {
      var newNoth = makeNothing();
      return brandClone(newNoth, this, b);
    };
    /**Tests whether an object is a PNothing
       @param {Object} obj the item to test
       @return {boolean} true if object is a PNothing
    */
    function isNothing(obj) { return obj instanceof PNothing; }

    /**Makes a nothing
       @return {!PNothing}
    */
    function makeNothing() {return new PNothing();}
    var nothing = makeNothing();

    /*********************
        Number
    **********************/
    /**Tests whether an object is a PNumber
       @param {Object} obj the item to test
       @return {boolean} true if object is a PNumber
    */

    var isNumber = jsnums.isPyretNumber;

    function isJSNumber(obj) {
      return typeof obj === "number";
    }

    /**Makes a PNumber using the given bignum

       @param {Bignum} n the number the PNumber will contain
       @return {!PNumber} with value n
    */
    function makeNumberBig(n) {
      return n;
    }

    /**Makes a PNumber using the given JSNum

       @param {number} n the number the PNumber will contain
       @return {!PNumber} with value n
    */
    function makeNumber(n) {
      return jsnums.fromFixnum(n, NumberErrbacks);
    }

    /**Makes a PNumber using the given string

       @param {string} s
       @return {!PNumber} with value n
    */
    function makeNumberFromString(s) {
      var result = jsnums.fromString(s, NumberErrbacks);
      if(result === false) {
        thisRuntime.ffi.throwMessageException("Could not create number from: " + s);
      }
      return result;
    }

    /*********************
        String
    **********************/
    /**Tests whether an object is a PString
       @param {Object} obj the item to test
       @return {boolean} true if object is a PString
    */
    function isString(obj) {
      return typeof obj === 'string';
    }

    /**Makes a PString using the given s

       @param {string} s the string the PString will contain
       @return {!PString} with value s
    */
    function makeString(s) {
      if(typeof s !== "string") { throw Error("Non-string given to makeString " + JSON.stringify(s)); }
      return s;
    }

    /*********************
       Boolean
    **********************/
    //Boolean Singletons
    var pyretTrue =  true;
    var pyretFalse = false;

    /**Makes a PBoolean using the given s

       @param {boolean} b the Boolean the PBoolean will contain
       @return {!PBoolean} with value b
    */
    function makeBoolean(b) {
      return b;
    }

    function isBoolean(b) {
      return b === !!b;
    }

    /**Tests whether the boolean is equal to the singleton true value

       @param {PBoolean} b
       @return {boolean}
    */
    function isPyretTrue(b) {
      return b === pyretTrue;
    }
    function isPyretFalse(b) {
      return b === pyretFalse;
    }

    /*********************
            Function
    **********************/

    /**The representation of a function
       @constructor
       @extends {PBase}

       @param {Function} fun the function body
    */
    function PFunction(fun, arity, name) {
      /**@type {Function}*/
      this.app   = fun;

      /**@type {number}*/
      this.arity = arity || fun.length;

      /**@type {string}*/
      this.name = name || "<anonymous function>";

      /**@type {!Object.<string, !PBase>}*/
      this.dict = emptyDict;

      /**@type {!Object.<string, Boolean>}*/
      this.brands = noBrands;
    }

    /**Clones the function
       @param {!string} b The brand to add
       @return {!PFunction} With same app and dict
    */
    PFunction.prototype.brand = function(b) {
      var newFun = makeFunction(this.app, this.name);
      return brandClone(newFun, this, b);
    };

    /**Tests whether an object is a PFunction
       @param {Object} obj the item to test
       @return {boolean} true if object is a PFunction
    */
    function isFunction(obj) {return obj instanceof PFunction; }

    /**Makes a PFunction using the given n

       @param {Function} fun The JS function that represents the body of the function, must contain at least one arg, which represents self
       @return {!PFunction} with app of fun
    */
    function makeFunction(fun, name) {
      return new PFunction(fun, fun.length, name);
    }
    function makeFunctionArity(fun, arity, name) {
      return new PFunction(fun, arity, name);
    }

    /*********************
        Method
    **********************/

    /**The representation of a method
       @constructor
       @param {Function} meth
       @param {Function} full_meth
       @extends {PBase}
    */
    function PMethod(meth, full_meth, name) {
      /**@type {Function}*/
      this['meth']   = meth;

      /**@type {Function}*/
      this['full_meth']   = full_meth;

      /**@type {number}*/
      this.arity = full_meth.length;

      /**@type {string}*/
      this.name = name || "<anonymous method>";

      /**@type {!Object.<string, !PBase>}*/
      this.dict = emptyDict;

      /**@type {!Object.<string, Boolean>}*/
      this.brands = noBrands;

    }

    /**Clones the method
       @param {!string} b The brand to add
       @return {!PMethod} With same meth and dict
    */
    PMethod.prototype.brand = function(b) {
      var newMeth = makeMethod(this['meth'], this['full_meth'], this['name']);
      return brandClone(newMeth, this, b);
    };

    /**Tests whether an object is a PMethod
       @param {Object} obj the item to test
       @return {boolean} true if object is a PMethod
    */
    function isMethod(obj) { return obj instanceof PMethod; }

    /**Makes a PMethod using the given function
       The function first argument should be self

       @param {Function} meth The Curried JS function that represents the body of the method
       @param {Function} full_meth The Full JS function that represents the body of the method
       @return {!PMethod} with app of fun
    */
    function makeMethod(meth, full_meth, name) {
      return new PMethod(meth, full_meth, name);
    }
    var app0 = function(obj) {
      var that = this;
      return function() { return that.full_meth(obj); }
    };
    var app1 = function(obj) {
      var that = this;
      return function(v) { return that.full_meth(obj, v); };
    };
    var app2 = function(obj) {
      var that = this;
      return function(v1, v2) { return that.full_meth(obj, v1, v2); };
    };
    var app3 = function(obj) {
      var that = this;
      return function(v1, v2, v3) { return that.full_meth(obj, v1, v2, v3); };
    };
    var app4 = function(obj) {
      var that = this;
      return function(v1, v2, v3, v4) { return that.full_meth(obj, v1, v2, v3, v4); };
    };
    var app5 = function(obj) {
      var that = this;
      return function(v1, v2, v3, v4, v5) { return that.full_meth(obj, v1, v2, v3, v4, v5); };
    };
    var app6 = function(obj) {
      var that = this;
      return function(v1, v2, v3, v4, v5, v6) { return that.full_meth(obj, v1, v2, v3, v4, v5, v6); };
    };
    var app7 = function(obj) {
      var that = this;
      return function(v1, v2, v3, v4, v5, v6, v7) { return that.full_meth(obj, v1, v2, v3, v4, v5, v6, v7); };
    };
    var app8 = function(obj) {
      var that = this;
      return function(v1, v2, v3, v4, v5, v6, v7, v8) { return that.full_meth(obj, v1, v2, v3, v4, v5, v6, v7, v8); };
    };
    var appN = function(obj) {
      var that = this;
      return function() {
        var argList = new Array(arguments.length);
        for (var i = 0; i < arguments.length; i++) argList[i] = arguments[i];
        return that.full_meth.apply(null, [obj].concat(argList));
      };
    }
    function makeMethod0(meth, name) {
      return new PMethod(app0, meth, name);
    }
    function makeMethod1(meth, name) {
      return new PMethod(app1, meth, name);
    }
    function makeMethod2(meth, name) {
      return new PMethod(app2, meth, name);
    }
    function makeMethod3(meth, name) {
      return new PMethod(app3, meth, name);
    }
    function makeMethod3(meth, name) {
      return new PMethod(app3, meth, name);
    }
    function makeMethod4(meth, name) {
      return new PMethod(app4, meth, name);
    }
    function makeMethod5(meth, name) {
      return new PMethod(app5, meth, name);
    }
    function makeMethod6(meth, name) {
      return new PMethod(app6, meth, name);
    }
    function makeMethod7(meth, name) {
      return new PMethod(app7, meth, name);
    }
    function makeMethod8(meth, name) {
      return new PMethod(app8, meth, name);
    }

    function makeMethodFromFun(meth, name) {
      return new PMethod(appN, meth, name);
    }
    var makeMethodN = makeMethodFromFun;

    function callIfPossible0(L, fun, obj) {
      if (isMethod(fun)) {
        return fun.full_meth(obj);
      } else if (isFunction(fun)) {
        return fun.app();
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible1(L, fun, obj, v1) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1);
      } else if (isFunction(fun)) {
        return fun.app(v1);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible2(L, fun, obj, v1, v2) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible3(L, fun, obj, v1, v2, v3) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2, v3);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2, v3);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible4(L, fun, obj, v1, v2, v3, v4) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2, v3, v4);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2, v3, v4);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible5(L, fun, obj, v1, v2, v3, v4, v5) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2, v3, v4, v5);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2, v3, v4, v5);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible6(L, fun, obj, v1, v2, v3, v4, v5, v6) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2, v3, v4, v5, v6);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2, v3, v4, v5, v6);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible7(L, fun, obj, v1, v2, v3, v4, v5, v6, v7) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2, v3, v4, v5, v6, v7);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2, v3, v4, v5, v6, v7);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }
    function callIfPossible8(L, fun, obj, v1, v2, v3, v4, v5, v6, v7, v8) {
      if (isMethod(fun)) {
        return fun.full_meth(obj, v1, v2, v3, v4, v5, v6, v7, v8);
      } else if (isFunction(fun)) {
        return fun.app(v1, v2, v3, v4, v5, v6, v7, v8);
      } else {
        thisRuntime.ffi.throwNonFunApp(L, fun);
      }
    }

    var GRAPHABLE = 0;
    var UNGRAPHABLE = 1;
    var SET = 2;
    var FROZEN = 3;
    function PRef() {
      this.state = GRAPHABLE;
      this.anns = makePAnnList([]);
      this.value = undefined;
    }

    function makeGraphableRef() {
      return new PRef();
    }
    function makeRef(ann, loc) {
      var loc = typeof loc === "undefined" ? ["references"] : loc;
      var r = new PRef();
      addRefAnn(r, ann, loc);
      r.state = UNGRAPHABLE;
      return r;
    }
    function makeUnsafeSetRef(ann, value, loc) {
      var r = new PRef();
      r.state = SET;
      r.anns = makePAnnList([{ann: ann, loc: loc}]);
      r.value = value;
      return r;
    }
    function isRef(val) {
      return typeof val === "object" && val instanceof PRef;
    }
    function isGraphableRef(ref) {
      return isRef(ref) && isRefGraphable(ref);
    }
    function isRefGraphable(ref) {
      return ref.state === GRAPHABLE;
    }
    function isRefSet(ref) {
      return ref.state >= SET;
    }
    function isRefFrozen(ref) {
      return ref.state >= FROZEN;
    }
    function getRefAnns(ref) {
      return ref.anns;
    }
    function refEndGraph(ref) {
      if(ref.state >= UNGRAPHABLE) {
        thisRuntime.ffi.throwMessageException("Attempted to end graphing of already-done with graph ref");
      }
      ref.state = UNGRAPHABLE;
      return ref;
    }
    function addRefAnn(ref, ann, loc) {
      if(ref.state > UNGRAPHABLE) {
        thisRuntime.ffi.throwMessageException("Attempted to annotate already-set ref");
      }
      ref.anns.addAnn(ann, loc);
      return ref;
    }
    function addRefAnns(ref, anns, locs) {
      if(ref.state > UNGRAPHABLE) {
        thisRuntime.ffi.throwMessageException("Attempted to annotate already-set ref");
      }
      for(var i = 0; i < anns.length; i++) {
        ref.anns.addAnn(anns[i], locs[i]);
      }
      return ref;
    }
    function freezeRef(ref) {
      if(ref.state >= SET) {
        ref.state = FROZEN;
        return ref;
      }
      thisRuntime.ffi.throwMessageException("Attempted to freeze an unset ref");
    }
    function unsafeSetRef(ref, value) {
      if(ref.state === UNGRAPHABLE || ref.state === SET) {
        ref.value = value;
        ref.state = SET;
        return ref;
      }
      thisRuntime.ffi.throwMessageException("Attempted to set an unsettable ref");
    }
    /* Not stack-safe */
    function setRef(ref, value) {
      if(ref.state === UNGRAPHABLE || ref.state === SET) {
        return checkAnn(["references"], ref.anns, value, function(_) {
          ref.value = value;
          ref.state = SET;
          return ref;
        });
      }
      thisRuntime.ffi.throwMessageException("Attempted to set an unsettable ref");
    }
    function getRef(ref) {
      if(ref.state >= SET) { return ref.value; }
      thisRuntime.ffi.throwMessageException("Attempt to get an unset ref");
    }

    /*********************
           Tuples
    *********************/
    function PTuple(vals) {
      this.vals = vals;
    }

    function makeTuple(vals) {
      return new PTuple(vals);
    }

    function isTuple(val) {
      return val instanceof PTuple;
    }

    function getTuple(tup, index, l) {
      if(!isTuple(tup)) {
        thisRuntime.ffi.throwLookupNonTuple(makeSrcloc(l), tup, index);
      }
      if (index >= tup.vals.length) {
        thisRuntime.ffi.throwLookupLargeIndex(makeSrcloc(l), tup, index);
      }
      return tup.vals[index]
    }

    function checkTupleBind(tup, length, l) {
      if (!isTuple(tup)) {
        thisRuntime.ffi.throwNonTupleBind(makeSrcloc(l), tup);
      }
      if (tup.vals.length !== length) {
        thisRuntime.ffi.throwBadTupleBind(makeSrcloc(l), tup, tup.vals.length, length);
      }
      return true;
    }


    /*********************
            Object
    **********************/
    /**The representation of an object
       @constructor
       @param {!Object.<string, !PBase>} dict
       @extends {PBase}
    */
    function PObject(dict, brands) {
      /**@type {!Object.<string, !PBase>}*/
      this.dict = dict;

      /**@type {!Object.<string, Boolean>}*/
      this.brands = brands;
    }
    //PObject.prototype = Object.create(PBase.prototype);

    PObject.prototype.updateDict = function(dict, keepBrands) {
      var newObj = new PObject(dict, keepBrands ? this.brands : noBrands);
      return newObj;
    }

    /**Clones the object
       @return {!PObject} With same dict
    */
    PObject.prototype.brand = function(b) {
      var newObj = makeObject(this.dict);
      return brandClone(newObj, this, b);
    };

    /**Tests whether an object is a PObject
       @param {Object} obj the item to test
       @return {!boolean} true if object is a PObject
    */
    function isObject(obj) { return obj instanceof PObject; }

    /**Makes a PObject using the given dict

       @param {!Object.<string, !PBase>} dict
       @return {!PObject} with given dict
    */
    function makeObject(dict) {
      return new PObject(dict, noBrands);
    }

    function makeBrandedObject(dict, brands) {
      return new PObject(dict, brands);
    }

    function makeMatch(name, arity) {
      if(arity === -1) {
        var f = function(self, handlers, els) {
          if(hasField(handlers, name)) {
            return getField(handlers, name).app();
          }
          else {
            return els.app(self);
          }
        };
        return makeMethod2(f, name);
      }
      else {
        var f = function(self, handlers, _else) {
          if(hasField(handlers, name)) {
            return self.$app_fields(getField(handlers, name).app, self.$mut_fields_mask);
          }
          else {
            return _else.app(self);
          }
        };
        return makeMethod2(f, name);
      }
    }

    function makeDataValue(dict, brands, $name, $app_fields, $app_fields_raw, $arity, $mut_fields_mask, constructor) {
      var ret = new PObject(dict, brands);
      ret.$name = $name;
      ret.$app_fields = $app_fields;
      ret.$app_fields_raw = $app_fields_raw;
      ret.$mut_fields_mask = $mut_fields_mask;
      ret.$arity = $arity;
      ret.$constructor = constructor
      return ret;
    }

    function isDataValue(v) {
      return hasProperty(v, "$name") && hasProperty(v, "$app_fields") && hasProperty(v, "$arity");
    }

    function derefField(value, fieldIsRef, lookupIsRef) {
      if(isRef(value)) {
        if(lookupIsRef) {
          // ref keyword in cases and either kind of field
          // Update fields in place with deref
          return getRef(value);
          fields[i] = getRef(fields[i]);
        } else if(fieldIsRef) {
          thisRuntime.ffi.throwMessageException("Cases on ref field needs to use ref");
        }
        else {
          return value;
        }
      }
      else {
        if(lookupIsRef) {
          thisRuntime.ffi.throwMessageException("Cannot use ref in cases to access non-ref field");
        }
        else {
          return value;
        }
      }
    }

    /**The representation of an array
       A PArray is simply a JavaScript array
    */
    function isArray(val) {
      return Array.isArray(val);
    }
    function makeArray(arr) {
      return arr;
    }

    /************************
          Type Checking
    ************************/
    function checkType(val, test, typeName) {
      if(!test(val)) {
        thisRuntime.ffi.throwTypeMismatch(val, typeName);
      }
      return true;
    }

    function isPyretVal(val) {
      if (typeof val === "string" || typeof val === "boolean" || val instanceof Array) {
        return true;
      }
      else if (jsnums.isPyretNumber(val)) {
        return true;
      }
      else if (isObject(val) ||
               isTuple(val) ||
               isFunction(val) ||
               isMethod(val) ||
               isRef(val) ||
               isOpaque(val) ||
               isNothing(val)) {
        return true;
      }
      return false;
    }

    var checkArity = function(expected, args, source) {
      if (expected !== args.length) {
        throw thisRuntime.ffi.throwArityErrorC([source], expected, args);
      }
    }
    var checkArityC = function(cloc, expected, args) {
      if (expected !== args.length) {
        throw thisRuntime.ffi.throwArityErrorC(cloc, expected, args);
      }
    }

    var checkConstructorArityC = function(cloc, name, expected, args) {
      if (expected !== args.length) {
        throw thisRuntime.ffi.throwConstructorArityErrorC(cloc, name, expected, args);
      }
    }

    var makeCheckType = function(test, typeName) {
      if (arguments.length !== 2) {
        // can't use checkArity yet because thisRuntime.ffi isn't initialized
        throw("MakeCheckType was called with the wrong number of arguments: expected 2, got " + arguments.length);
      }
      return function(val) {
        if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["runtime"], 1, $a); }
        return checkType(val, test, typeName);
      };
    }
    var checkString = makeCheckType(isString, "String");
    var checkNumber = makeCheckType(isNumber, "Number");
    var checkExactnum = makeCheckType(jsnums.isRational, "Exactnum");
    var checkRoughnum = makeCheckType(jsnums.isRoughnum, "Roughnum");
    var checkNumInteger = makeCheckType(jsnums.isInteger, "NumInteger");
    var checkNumRational = makeCheckType(jsnums.isRational, "NumRational");
    var checkNumPositive = makeCheckType(jsnums.isPositive, "NumPositive");
    var checkNumNegative = makeCheckType(jsnums.isNegative, "NumNegative");
    var checkNumNonPositive = makeCheckType(jsnums.isNonPositive, "NumNonPositive");
    var checkNumNonNegative = makeCheckType(jsnums.isNonNegative, "NumNonNegative");
    // var checkArray = makeCheckType(isArray, "Array");
    var checkTuple = makeCheckType(isTuple, "Tuple");
    var checkArray = makeCheckType(isArray, "RawArray");
    var checkBoolean = makeCheckType(isBoolean, "Boolean");
    var checkObject = makeCheckType(isObject, "Object");
    var checkFunction = makeCheckType(isFunction, "Function");
    var checkMethod = makeCheckType(isMethod, "Method");
    var checkOpaque = makeCheckType(isOpaque, "Opaque");
    var checkPyretVal = makeCheckType(isPyretVal, "Pyret Value");

    var checkWrapBoolean = function(val) {
      checkBoolean(val);
      return val;
    };

    function confirm(val, test) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["runtime"], 2, $a); }
      if(!test(val)) {
        thisRuntime.ffi.throwMessageException("Pyret Type Error: " + test + ": " + JSON.stringify(val))
      }
      return thisRuntime.unwrap(val);
    }

    /************************
       Builtin Functions
    ************************/

    function hasBrand(obj, brand) {
      return Boolean(obj.brands && obj.brands[brand] === true);
    }

    var brandCounter = 0;
    function mkBrandName(name) {
      if(typeof name === "undefined") { name = ""; }
      var thisBrandStr = "$brand" + name + String(++brandCounter);
      return thisBrandStr;
    }
    var namedBrander = function(name, srcloc) {
      var thisBrandStr = mkBrandName(name);
      var testSrcloc = srcloc || ["brander-test: " + thisBrandStr];
      var brandSrcloc = srcloc || ["brander-brand: " + thisBrandStr]
      var brander = makeObject({
        'test': makeFunction(function(obj) {
          if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(testSrcloc, 1, $a); }
          return makeBoolean(hasBrand(obj, thisBrandStr));
        }, "is-" + name),
        'brand': makeFunction(function(obj) {
          if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(brandSrcloc, 1, $a); }
          return obj.brand(thisBrandStr);
        }, "brand-" + name)
      });
      brander._brand = thisBrandStr;
      return brander;
    }
    /**@type {PFunction} */
    var brander = makeFunction(
      /**
         @return {!PBase}
      */
      function() {
        if (arguments.length !== 0) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["brander"], 0, $a); }
        return namedBrander("brander", undefined);
      },
      "brander"
    );

    // Stolen from https://github.com/dyoo/whalesong/blob/master\
    // /whalesong/js-assembler/runtime-src/baselib-strings.js
    var replaceUnprintableStringChars = function (s) {
      var ret = [], i;
      for (i = 0; i < s.length; i++) {
        var val = s.charCodeAt(i);
        switch(val) {
        case 7: ret.push('\\a'); break;
        case 8: ret.push('\\b'); break;
        case 9: ret.push('\\t'); break;
        case 10: ret.push('\\n'); break;
        case 11: ret.push('\\v'); break;
        case 12: ret.push('\\f'); break;
        case 13: ret.push('\\r'); break;
        case 34: ret.push('\\"'); break;
        case 92: ret.push('\\\\'); break;
        default:
          if (val >= 32 && val <= 126) {
            ret.push( s.charAt(i) );
          }
          else {
            var numStr = val.toString(16).toUpperCase();
            while (numStr.length < 4) {
              numStr = '0' + numStr;
            }
            ret.push('\\u' + numStr);
          }
          break;
        }
      }
      return ret.join('');
    };

    var escapeString = function (s) {
      return '"' + replaceUnprintableStringChars(s) + '"';
    };

    function toReprLoop(val, reprMethods) {
      var stack = [];
      var stackOfStacks = [];
      function makeCache(type) {
        var cyclicCounter = 1;
        // Note (Ben): using concat was leading to quadratic copying times and memory usage...
        return {
          add: function(elts, elt) {
            return {elt: elt, name: null, next: elts};
          },
          check: function(elts, elt) {
            var cur = elts;
            while (cur !== undefined) {
              if (cur.elt === elt) {
                if (cur.name === null) {
                  cur.name = "<cyclic-" + type + "-" + cyclicCounter++ + ">";
                }
                return cur.name;
              } else {
                cur = cur.next;
              }
            }
            return null;
          }
        };
      }
      var arrayCache = makeCache("array");
      var addNewArray = arrayCache.add;
      var findSeenArray = arrayCache.check;
      var refCache = makeCache("ref");
      var addNewRef = refCache.add;
      var findSeenRef = refCache.check;
      var objCache = makeCache("object");
      var addNewObject = objCache.add;
      var findSeenObject = objCache.check;

      function pushTodo(newArray, newObject, newRef, todo, type, extra) {
        var top = stack[stack.length - 1];
        stack.push({
          arrays: (newArray !== undefined) ? addNewArray(top.arrays, newArray) : top.arrays,
          objects: (newObject !== undefined) ? addNewObject(top.objects, newObject) : top.objects,
          refs: (newRef !== undefined) ? addNewRef(top.refs, newRef) : top.refs,
          todo: todo,
          done: [],
          type: type,
          extra: extra
        });
      }
      function toReprHelp() {
        var top;
        function finishVal(str) {
          top.todo.pop();
          top.done.push(str);
        }
        function implicitRefs(stackFrame) {
          return stackFrame.extra && stackFrame.extra.implicitRefs;
        }
        while (stack.length > 0 && stack[0].todo.length > 0) {
          top = stack[stack.length - 1];
          if (top.todo.length > 0) {
            var next = top.todo[top.todo.length - 1];
            if(isNumber(next)) { finishVal(reprMethods["number"](next)); }
            else if (isBoolean(next)) { finishVal(reprMethods["boolean"](next)); }
            else if (isNothing(next)) { finishVal(reprMethods["nothing"](next)); }
            else if (isFunction(next)) { finishVal(reprMethods["function"](next)); }
            else if (isMethod(next)) { finishVal(reprMethods["method"](next)); }
            else if (isString(next)) { finishVal(reprMethods["string"](next)); }
            else if (isOpaque(next)) { finishVal(reprMethods["opaque"](next)); }
            else if (isArray(next)) {
              // NOTE(joe): need to copy the array below because we will pop from it
              // Baffling bugs will result if next is passed directly
              var arrayHasBeenSeen = findSeenArray(top.arrays, next);
              if(typeof arrayHasBeenSeen === "string") {
                finishVal(reprMethods["cyclic"](arrayHasBeenSeen));
              }
              else {
                reprMethods["array"](next, pushTodo);
              }
            }
            else if(isTuple(next)) {
              reprMethods["tuple"](next, pushTodo);
            }
            else if(isRef(next)) {
              var refHasBeenSeen = findSeenRef(top.refs, next);
              var implicit = implicitRefs(top) && top.extra.implicitRefs[top.todo.length - 1];
              if(typeof refHasBeenSeen === "string") {
                finishVal(reprMethods["cyclic"](refHasBeenSeen));
              }
              else if(!isRefSet(next)) {
                finishVal(reprMethods["cyclic"]("<uninitialized-ref>"));
              }
              else {
                reprMethods["ref"](next, implicit, pushTodo);
              }
            }
            else if(isObject(next)) {
              var objHasBeenSeen = findSeenObject(top.objects, next);
              if(typeof objHasBeenSeen === "string") {
                finishVal(reprMethods["cyclic"](objHasBeenSeen));
              }
              else if (next.dict["_output"] && isMethod(next.dict["_output"])) {
                var m = getColonField(next, "_output");
                var s = m.full_meth(next);
                reprMethods["valueskeleton"](next, thisRuntime.unwrap(s), pushTodo);
              }
              else if(isDataValue(next)) {
                reprMethods["data"](next, pushTodo);
              }
              else {
                reprMethods["object"](next, pushTodo);
              }
            }
            else {
              CONSOLE.log("UNKNOWN VALUE: ", next);
              console.trace();
              finishVal(reprMethods["string"]("<Unknown value: details logged to console>"));
            }
          }
          else {
            // Done with object, array, or ref, so pop the todo list, and pop
            // the object/array/ref itself
            stack.pop();
            var prev = stack[stack.length - 1];
            prev.todo.pop();
            prev.done.push(reprMethods[top.type](top));
          }
        }
        var finalAns = stack[0].done[0];
        return finalAns;
      }
      function toReprFun($ar) {
        var $step = 0;
        var $ans = undefined;
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            $step = $ar.step;
            $ans = $ar.ans;
          }
          while(true) {
            switch($step) {
            case 0:
              $step = 1;
              return toReprHelp();
            case 1:
              if (stack.length === 0) {
                thisRuntime.ffi.throwInternalError("Somehow we've drained the toRepr worklist, but have results coming back");
              }
              var top = stack[stack.length - 1];
              var a = thisRuntime.unwrap($ans);
              if (thisRuntime.ffi.isValueSkeleton(a)) {
                reprMethods["valueskeleton"](top.todo[top.todo.length - 1], a, pushTodo);
              } else {
                // this is essentially finishVal
                top.todo.pop();
                top.done.push(a);
              }
              $step = 0;
              break;
            }
          }
        } catch($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["runtime torepr"],
              toReprFun,
              $step,
              [],
              []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["runtime torepr"]);
          }
          throw $e;
        }
      }
      function reenterToReprFun(val) {
        // arity check
        var $step = 0;
        var $ans = undefined;
        var oldStack = stack;
        function getOld(name) {
          if(oldStack.length > 0) {
            return oldStack[oldStack.length - 1][name];
          }
          else {
            return undefined;
          }
        }
        try {
          if (thisRuntime.isActivationRecord(val)) {
            $step = val.step;
            $ans = val.ans;
          }
          while(true) {
            switch($step) {
            case 0:
              stackOfStacks.push(stack);
              stack = [{
                arrays: getOld("arrays"),
                objects: getOld("objects"),
                refs: getOld("refs"),
                todo: [val],
                done: [],
                extra: { implicitRefs: [false] },
                root: val
              }];
              $step = 1;
              $ans = toReprFun();
              break;
            case 1:
              stack = stackOfStacks.pop();
              return $ans;
            }
          }
        } catch($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["runtime torepr (reentrant)"],
              reenterToReprFun,
              $step,
              [],
              []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["runtime torepr"]);
          }
          throw $e;
        }
      }
      var toReprFunPy = makeFunction(reenterToReprFun, "toReprFun");
      return reenterToReprFun(val);
    }

    /**
       Creates the js string representation for the value
       @param {!PBase} val

       @return {!string} the value given in
    */
    function toReprJS(val, reprMethods) {
      if (isNumber(val)) { return reprMethods["number"](val); }
      else if (isBoolean(val)) { return reprMethods["boolean"](val); }
      else if (isString(val)) { return reprMethods["string"](val); }
      else { return toReprLoop(val, reprMethods); }
    }

    /**@type {PFunction} */
    var torepr = makeFunction(function(val) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["torepr"], 1, $a); }
      return makeString(toReprJS(val, ReprMethods._torepr));
    }, "torepr");
    var tostring = makeFunction(function(val) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["tostring"], 1, $a); }
      if(isString(val)) {
        return makeString(val);
      }
      else {
        return makeString(toReprJS(val, ReprMethods._tostring));
      }
    }, "tostring");

    var print = makeFunction(
      /**
         Prints the value to the world by passing the repr to stdout
         @param {!PBase} val

         @return {!PBase} the value given in
      */
      function(val){
        if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["print"], 1, $a); }

        return thisRuntime.safeCall(function() {
          display.app(val);
        }, function(_) {
          return val;
        }, "print");
      }, "print");

    var display = makeFunction(
      /**
         Prints the value to the world by passing the repr to stdout
         @param {!PBase} val

         @return {!PBase} the value given in
      */
      function(val){
        if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["display"], 1, $a); }
        if (isString(val)) {
          theOutsideWorld.stdout(val);
          return val;
        }
        else {
          return thisRuntime.safeCall(function() {
            return toReprJS(val, ReprMethods._tostring);
          }, function(repr) {
            theOutsideWorld.stdout(repr);
            return val;
          }, "display");
        }
      }, "display");

    var print_error = makeFunction(
      /**
         Prints the value to the world by passing the repr to stderr
         @param {!PBase} val

         @return {!PBase} the value given in
      */
      function(val){
        if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["print-error"], 1, $a); }

        return thisRuntime.safeCall(function() {
          display_error.app(val);
        }, function(_) {
          return val;
        }, "print-error");
      }, "print-error");

    var display_error = makeFunction(
      /**
         Prints the value to the world by passing the repr to stderr
         @param {!PBase} val

         @return {!PBase} the value given in
      */
      function(val){
        if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["display-error"], 1, $a); }
        if (isString(val)) {
          theOutsideWorld.stderr(val);
          return val;
        }
        else {
          return thisRuntime.safeCall(function() {
            return toReprJS(val, ReprMethods._tostring);
          }, function(repr) {
            theOutsideWorld.stderr(repr);
            return val;
          }, "display-error");
        }
      }, "display-error");

    /********************
         Exceptions
    *******************/

    /**
       An Exception that represents a pyret exception

       @param {!PBase} e the value to raise
       @constructor
    */
    function PyretFailException(e) {
      this.exn = e;
      this.pyretStack = [];
      this.stack = (new Error).stack;
    }

    /**
       Tests if result is a PyretException
       @param {Object} val the value to test
       @return {boolean} true if it is a FailueResult
    */
    function isPyretException(val) { return val instanceof PyretFailException; }
    PyretFailException.prototype.toString = function() {
      var stackStr = this.pyretStack && this.pyretStack.length > 0 ?
        this.getStack().map(function(s) {
          var g = getField;
          if(s && hasField(s, "source")) {
            return g(s, "source") +
                   " at " +
                   g(s, "start-line") +
                   ":" +
                   g(s, "start-column")
          } else if(s && hasField(s, "module-name")) {
            return "<builtin " + g(s, "module-name") + ">";
          } else {
            return "<builtin " + s + ">";
          }
        }).join("\n") :
      "<no stack trace>";
      return toReprJS(this.exn, ReprMethods._tostring) + "\n" + stackStr;
    };
    PyretFailException.prototype.getStack = function() {
      return this.pyretStack.map(makeSrcloc);
    };

    function makeSrcloc(arr) {
      if (typeof arr === "object" && arr.length === 1) {
        checkString(arr[0]);
        if (thisRuntime.srcloc === undefined) {
          return makeString(JSON.stringify(arr));
        } else {
          return getField(thisRuntime.srcloc, "builtin").app(arr[0])
        }
      }
      else if (typeof arr === "object" && arr.length === 7) {
        return getField(thisRuntime.srcloc, "srcloc").app(
          arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]
        );
      }
      else {
        return getField(thisRuntime.srcloc, "builtin").app(String(arr));
      }
    }

    function makePyretFailException(exn) {
      return new PyretFailException(exn);
    }

    var raiseJSJS =
      /**
         Raises any Pyret value as an exception
         @param {!PBase} val the value to raise
      */
    function(val) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raise"], 1, $a); }
      if(thisRuntime.isObject(val) &&
         (thisRuntime.hasField(val, "render-reason")
          || thisRuntime.hasField(val, "render-fancy-reason"))){
        throw new PyretFailException(val);
      } else {
        throw new PyretFailException(thisRuntime.ffi.makeUserException(val));
      }
    };
    /** type {!PFunction} */
    // function raiseUserException(err) {
    //   thisRuntime.ffi.throwUserException(err);
    // }

    /** type {!PFunction} */
    var hasField =
      /**
         Checks if an object has a given field
         @param {!PBase} obj The object to test
         @param {!PBase} str The field to test for, signals error if non-string
         @return {!PBase}
      */
    function(obj, str) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["has-field"], 2, $a); }
      checkString(str);
      return makeBoolean(hasProperty(obj.dict, str));
    };

    function sameBrands(brands1, brands2) {
      if (brands1.brandCount !== brands2.brandCount) { return false; }
      for(var i in brands1) {
        if(brands1[i] !== brands2[i]) { return false; }
      }
      return true;
    }

    function combineEquality(e1, e2) {
      thisRuntime.checkEQ(e1);
      thisRuntime.checkEQ(e2);
      if (thisRuntime.ffi.isEqual(e1)) { return e2; }
      else if (thisRuntime.ffi.isNotEqual(e1)) { return e1; }
      else if (thisRuntime.ffi.isNotEqual(e2)) { return e2; }
      else if (thisRuntime.ffi.isUnknown(e1)) { return e1; }
    }

    // equal3 :: PyretVal * PyretVal * Bool * (PyretNum U Undefined) * (Boolean U Undefined) -> EqualityResult

    // JS function from Pyret values to Pyret equality answers

    // Used for equal-always(3), equal-now(3), and within-(abs|rel)(3)

    // left and right are two Pyret values to compare

    // alwaysFlag is true for -always semantics (ref equality on mutables),
    // false for -now semantics (cycle/deep equality on mutables)

    // tol is the tolerance, expressed as a Pyret number (possibly an exact
    // rational, possibly a roughnum).  For non-within calls, it isn't
    // provided and is undefined.

    // rel is a flag that indicates whether the tolerance should be
    // interpreted as _absolute_ (two numbers are equal +/- tol) or _relative_
    // (two numbers are equal +/- n * tol, where tol is between 0 and 1)
    function equal3(left, right, alwaysFlag, tol, rel) {
      if(tol === undefined) { // means that we aren't doing any kind of within
        var isIdentical = identical3(left, right);
        if (!thisRuntime.ffi.isNotEqual(isIdentical)) { return isIdentical; } // if Equal or Unknown...
      }

      var stackOfToCompare = [];
      var toCompare = { stack: [], curAns: thisRuntime.ffi.equal };
      var cache = {left: [], right: [], equal: []};
      function findPair(obj1, obj2) {
        for (var i = 0; i < cache.left.length; i++) {
          if (cache.left[i] === obj1 && cache.right[i] === obj2)
            return cache.equal[i];
        }
        return false;
      }
      function setCachePair(obj1, obj2, val) {
        for (var i = 0; i < cache.left.length; i++) {
          if (cache.left[i] === obj1 && cache.right[i] === obj2) {
            cache.equal[i] = val;
            return;
          }
        }
// throw new Error("Internal error: tried to 
      }
      function cachePair(obj1, obj2) {
        cache.left.push(obj1);
        cache.right.push(obj2);
        cache.equal.push(thisRuntime.ffi.equal);
      }
      function equalHelp() {
        var current, curLeft, curRight;
        while (toCompare.stack.length > 0 && !thisRuntime.ffi.isNotEqual(toCompare.curAns)) {
          current = toCompare.stack.pop();
          if(current.setCache) {
            setCachePair(current.left, current.right, toCompare.curAns);
            continue;
          }
          curLeft = current.left;
          curRight = current.right;

          if (thisRuntime.ffi.isEqual(identical3(curLeft, curRight))) {
            continue;
          } else if (isNumber(curLeft) && isNumber(curRight)) {
            if (tol) {
              if (rel) {
                if (jsnums.roughlyEqualsRel(curLeft, curRight, tol, NumberErrbacks)) {
                  continue;
                } else {
                  toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
                }
              } else if (jsnums.roughlyEquals(curLeft, curRight, tol, NumberErrbacks)) {
                continue;
              } else {
                toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
              }
            } else if (jsnums.isRoughnum(curLeft) || jsnums.isRoughnum(curRight)) {
              toCompare.curAns = thisRuntime.ffi.unknown.app("Roughnums", curLeft, curRight);
            } else if (jsnums.equals(curLeft, curRight, NumberErrbacks)) {
              continue;
            } else {
              toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
            }
          } else if (isNothing(curLeft) && isNothing(curRight)) {
            continue;
          } else if (isFunction(curLeft) && isFunction(curRight)) {
            toCompare.curAns = thisRuntime.ffi.unknown.app("Functions" , curLeft ,  curRight);
          } else if (isMethod(curLeft) && isMethod(curRight)) {
            toCompare.curAns = thisRuntime.ffi.unknown.app("Methods" , curLeft , curRight);
          } else if (isOpaque(curLeft) && isOpaque(curRight)) {
            if (curLeft.equals(curLeft.val, curRight.val)) {
              continue;
            } else {
              toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
            }
          } else {
            var curPair = findPair(curLeft, curRight);
            if (curPair !== false) {
              // Already checked this pair of objects
              toCompare.curAns = curPair
              continue;
            } else {
              cachePair(curLeft, curRight);
              toCompare.stack.push({ setCache: true, left: curLeft, right: curRight });
              if (isRef(curLeft) && isRef(curRight)) {
                if (alwaysFlag && !(isRefFrozen(curLeft) && isRefFrozen(curRight))) { // In equal-always, non-identical refs are not equal
                  toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight); // We would've caught identical refs already
                } else if(!isRefSet(curLeft) || !isRefSet(curRight)) {
                  toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
                } else { // In equal-now, we walk through the refs
                  var newPath = current.path;
                  var lastDot = newPath.lastIndexOf(".");
                  var lastParen = newPath.lastIndexOf(")");
                  if (lastDot > -1 && lastDot > lastParen) {
                    newPath = newPath.substr(0, lastDot) + "!" + newPath.substr(lastDot + 1);
                  } else {
                    newPath = "deref(" + newPath + ")";
                  }
                  toCompare.stack.push({
                    left: getRef(curLeft),
                    right: getRef(curRight),
                    path: newPath
                  });
                }
              } else if(isTuple(curLeft) && isTuple(curRight)) {
                if (curLeft.vals.length !== curRight.vals.length) {
                  toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
                } else {
                  for (var i = 0; i < curLeft.vals.length; i++) {
                    toCompare.stack.push({
                      left: curLeft.vals[i],
                      right: curRight.vals[i],
                      path: "is-tuple{ " + current.path + "; " + i + " }"
                    });
                  }
                }
              } else if (isArray(curLeft) && isArray(curRight)) {
                if (alwaysFlag || (curLeft.length !== curRight.length)) {
                  toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
                } else {
                  for (var i = 0; i < curLeft.length; i++) {
                    toCompare.stack.push({
                      left: curLeft[i],
                      right: curRight[i],
                      path: "raw-array-get(" + current.path + ", " + i + ")"
                    });
                  }
                }
              } else if (isObject(curLeft) && isObject(curRight)) {
                if (!sameBrands(getBrands(curLeft), getBrands(curRight))) {
                  /* Two objects with brands that differ */
                  toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
                }
                else if (isObject(curLeft) && curLeft.dict["_equals"]) {
                  /* Two objects with the same brands and the left has an _equals method */
                  // If this call stack-throws,
                  var newAns = getColonField(curLeft, "_equals").full_meth(curLeft, curRight, equalFunPy);
                  // the continuation stacklet will get the result, and combine them manually
                  toCompare.curAns = combineEquality(toCompare.curAns, newAns);
                }
                else if (isDataValue(curLeft) && isDataValue(curRight)) {
                  /* Two data values with the same brands and no equals method on the left */
                  var fieldsLeft = curLeft.$app_fields_raw(function(/* varargs */) {
                    var ans = new Array(arguments.length);
                    for (var i = 0; i < arguments.length; i++) ans[i] = arguments[i];
                    return ans;
                  });
                  if (fieldsLeft.length > 0) {
                    var fieldsRight = curRight.$app_fields_raw(function(/* varargs */) {
                      var ans = new Array(arguments.length);
                      for (var i = 0; i < arguments.length; i++) ans[i] = arguments[i];
                      return ans;
                    });
                    var fieldNames = curLeft.$constructor.$fieldNames;
                    for (var k = 0; k < fieldsLeft.length; k++) {
                      toCompare.stack.push({
                        left: fieldsLeft[k],
                        right: fieldsRight[k],
                        path: current.path + "." + fieldNames[k]
                      });
                    }
                  }
                } else {
                  /* Two non-data objects with the same brands and no equals method on the left */
                  var dictLeft = curLeft.dict;
                  var dictRight = curRight.dict;
                  var fieldsLeft;
                  var fieldsRight;
                  fieldsLeft = getFields(curLeft);
                  fieldsRight = getFields(curRight);
                  if(fieldsLeft.length !== fieldsRight.length) {
                    toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
                  }
                  for(var k = 0; k < fieldsLeft.length; k++) {
                    toCompare.stack.push({
                      left: curLeft.dict[fieldsLeft[k]],
                      right: curRight.dict[fieldsLeft[k]],
                      path: current.path + "." + fieldsLeft[k]
                    });
                  }
                }
              } else {
                toCompare.curAns = thisRuntime.ffi.notEqual.app(current.path, curLeft, curRight);
              }
            }
          }
        }
        return toCompare.curAns;
      }
      var stackFrameDesc = [alwaysFlag ? "runtime equal-always" : "runtime equal-now"];
      function equalFun($ar) {
        var $step = 0;
        var $ans = undefined;
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            $step = $ar.step;
            $ans = $ar.ans;
          }
          while(true) {
            switch($step) {
            case 0:
              $step = 1;
              return equalHelp();
            case 1:
              toCompare.curAns = combineEquality(toCompare.curAns, $ans);
              $step = 0;
              break;
            }
          }
        } catch($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              stackFrameDesc,
              equalFun,
              $step,
              [],
              []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(stackFrameDesc);
          }
          throw $e;
        }
      }
      function reenterEqualFun(left, right) {
        // arity check
        var $step = 0;
        var $ans = undefined;
        try {
          if (thisRuntime.isActivationRecord(left)) {
            $step = left.step;
            $ans = left.ans;
          }
          while(true) {
            switch($step) {
            case 0:
              stackOfToCompare.push(toCompare);
              toCompare = {stack: [{left: left, right: right, path: "the-value"}], curAns: thisRuntime.ffi.equal};
              $step = 1;
              $ans = equalFun();
              break;
            case 1:
              for(var i = 0; i < toCompare.stack.length; i++) {
                var current = toCompare.stack[i];
                if(current.setCache) {
                  setCachePair(current.left, current.right, $ans);
                }
              }
              setCachePair(left, right, $ans);
              toCompare = stackOfToCompare.pop();
              return $ans;
            }
          }
        } catch($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              stackFrameDesc,
              reenterEqualFun,
              $step,
              [],
              []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(stackFrameDesc);
          }
          throw $e;
        }
      }
      var equalFunPy = makeFunction(reenterEqualFun, "equalFun");
      return reenterEqualFun(left, right);
    }

    function equalWithinAbsNow3(tol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs-now3"], 1, $a); }
      thisRuntime.checkNumber(tol);
      if (jsnums.lessThan(tol, 0, NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException('negative tolerance ' + tol);
      }
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs-now3(...)"], 2, $a); }
        return equal3(l, r, false, tol);
      }, "within-abs-now3(...)");
    };

    function equalWithinRelNow3(relTol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel-now3"], 1, $a); }
      thisRuntime.checkNumber(relTol);
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel-now3(...)"], 2, $a); }
        return equal3(l, r, false, relTol, true);
      }, "within-rel-now3(...)");
    };

    function equalWithinAbs3(tol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs3"], 1, $a); }
      thisRuntime.checkNumber(tol);
      if (jsnums.lessThan(tol, 0, NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException('negative tolerance ' + tol);
      }
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs3(...)"], 2, $a); }
        return equal3(l, r, true, tol);
      }, "within-abs3(...)");
    };

    function equalWithinRel3(relTol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel3"], 1, $a); }
      thisRuntime.checkNumber(relTol);
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel3(...)"], 2, $a); }
        return equal3(l, r, true, relTol);
      }, "within-rel3(...)");
    };

    function equalityToBool(ans) {
      if (thisRuntime.ffi.isEqual(ans)) { return makeBoolean(true); }
      else if (thisRuntime.ffi.isNotEqual(ans)) { return makeBoolean(false); }
      else if (thisRuntime.ffi.isUnknown(ans)) {
        thisRuntime.ffi.throwEqualityException(getField(ans, "reason"), getField(ans, "value1"), getField(ans, "value2"));
      }
    };

    function equalWithinAbsNow(tol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs-now"], 1, $a); }
      thisRuntime.checkNumber(tol);
      if (jsnums.lessThan(tol, 0, NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException('negative tolerance ' + tol);
      }
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs-now(...)"], 2, $a); }
        return safeCall(function() {
          return equal3(l, r, false, tol);
        }, equalityToBool, "within-abs-now(...)");
      }, "within-abs-now(...)");
    };

    function equalWithinAbs(tol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs"], 1, $a); }
      thisRuntime.checkNumber(tol);
      if (jsnums.lessThan(tol, 0, NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException('negative tolerance ' + tol);
      }
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-abs(...)"], 2, $a); }
        return safeCall(function () {
          return equal3(l, r, true, tol);
        }, equalityToBool, "within-abs(...)");
      }, "within-abs(...)");
    };

    function equalWithinRelNow(relTol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel-now"], 1, $a); }
      thisRuntime.checkNumber(relTol);
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel-now(...)"], 2, $a); }
        return safeCall(function () {
          return equal3(l, r, false, relTol, true);
        }, equalityToBool, "within-rel-now(...)");
      }, "within-rel-now(...)");
    };

    function equalWithinRel(relTol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel"], 1, $a); }
      thisRuntime.checkNumber(relTol);
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel(...)"], 2, $a); }
        return safeCall(function () {
          return equal3(l, r, true, relTol, true);
        }, equalityToBool, "within-rel(...)");
      }, "within-rel(...)");
    };

    // JS function from Pyret values to Pyret equality answers
    function equalAlways3(left, right) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["equal-always3"], 2, $a); }
      return equal3(left, right, true);
    };
    // JS function from Pyret values to Pyret booleans (or throws)
    function equalAlways(v1, v2) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["equal-always"], 2, $a); }
      if(typeof v1 === "number" || typeof v1 === "string" || typeof v1 === "boolean") {
        return v1 === v2;
      }
      return safeCall(function() {
        return equal3(v1, v2, true);
      }, equalityToBool, "equal-always");
    };
    // JS function from Pyret values to Pyret equality answers
    function equalNow3(left, right) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["equal-now3"], 2, $a); }
      return equal3(left, right, false);
    };
    // JS function from Pyret values to Pyret booleans (or throws)
    function equalNow(v1, v2) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["equal-now"], 2, $a); }
      return safeCall(function() {
        return equal3(v1, v2, false);
      }, equalityToBool, "equal-now");
    };

    // JS function from Pyret values to JS booleans
    // Needs to be a worklist algorithm to avoid blowing the stack
    function same(left, right) {
      if (left === right) { return true; }

      var toCompare = [{left: left, right: right}];
      var current, curLeft, curRight;
      // Hunts for differences in the worklist, returning false when it finds them.
      // "continue" is equivalent to a recursive call returning "true", false
      // is returned directly when it is encountered
      while(toCompare.length > 0) {
        current = toCompare.pop();
        left = current.left;
        right = current.right;
        if (left === right) { continue; }
        if (isNumber(left) && isNumber(right) && jsnums.equals(left, right, NumberErrbacks)) {
          continue;
        }
        // redundant becase it's just === now
        // else if (isString(left) && isString(right) && left.s === right.s) {
        //   continue;
        // }
        // else if (isBoolean(left) && isBoolean(right) && left.b === right.b) {
        //   continue;
        // }
        else if (isFunction(left) && isFunction(right) && left === right) {
          continue;
        }
        else if (isMethod(left) && isMethod(right) && left === right) {
          continue;
        }
        else if (isOpaque(left) && isOpaque(right) && left.equals(left.val, right.val)) {
          continue;
        }
        else if (isTuple(left) && isTuple(right)) {
          if (left.vars.length !== right.vars.length) { return false; }
          for (var i = 0; i < left.vars.length; i++) {
            toCompare.push({
              left: left.vars[i],
              right: right.vars[i]
            });
          }
        }
        else if (isArray(left) && isArray(right)) {
          if (left.length !== right.length) { return false; }
          for (var i = 0; i < left.length; i++) {
            toCompare.push({
              left: left[i],
              right: right[i]
            });
          }
        }
        else if (isObject(left) && isObject(right)) {
          var dictLeft = left.dict;
          var dictRight = right.dict;
          var fieldsLeft;
          var fieldsRight;
          // Fast case, for objects that get extended with similar patterns
          // (e.g. variants of data have same proto), just check own props
          if(getProto(dictLeft) === getProto(dictRight)) {
            fieldsLeft = Object.keys(dictLeft);
            fieldsRight = Object.keys(dictRight);
            if(fieldsLeft.length !== fieldsRight.length) { return false; }
            for(var k = 0; k < fieldsLeft.length; k++) {
              toCompare.push({
                left: left.dict[fieldsLeft[k]],
                right: right.dict[fieldsLeft[k]]
              });
            }
          }
          // Slower case, just iterate all fields, all the way down to the bottom
          else {
            fieldsLeft = getFields(left);
            fieldsRight = getFields(right);
            if(fieldsLeft.length !== fieldsRight.length) { return false; }
            for(var k = 0; k < fieldsLeft.length; k++) {
              toCompare.push({
                left: left.dict[fieldsLeft[k]],
                right: right.dict[fieldsLeft[k]]
              });
            }
          }
          if(!sameBrands(getBrands(left), getBrands(right))) {
            return false;
          }
          // continue would be inappropriate (but not incorrect)
          // here, because we have enqueued things
        }
        else {
          // In all other cases, things are not equal
          return false;
        }
      }

      return true;

    };
    // Pyret function from Pyret values to Pyret booleans
    var samePyPy = makeFunction(function(v1, v2) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["same"], 2, $a); }
      return makeBoolean(same(v1, v2));
    }, "same");
    // JS function from Pyret values to Pyret booleans
    var sameJSPy = function(v1, v2) { return makeBoolean(same(v1, v2)); };

    // JS function from Pyret values to Pyret equality answers
    function identical3(v1, v2) {
      if (isFunction(v1) && isFunction(v2)) {
        return thisRuntime.ffi.unknown.app("Functions", v1,  v2);
      } else if (isMethod(v1) && isMethod(v2)) {
        return thisRuntime.ffi.unknown.app('Methods', v1,  v2);
      } else if (jsnums.isRoughnum(v1) && jsnums.isRoughnum(v2)) {
        return thisRuntime.ffi.unknown.app('Roughnums', v1,  v2);
      } else if (v1 === v2) {
        return thisRuntime.ffi.equal;
      } else {
        return thisRuntime.ffi.notEqual.app("", v1, v2);
      }
    };
    // Pyret function from Pyret values to Pyret equality answers
    var identical3Py = makeFunction(function(v1, v2) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["identical3"], 2, $a); }
      return identical3(v1, v2);
    }, "identical3");
    // JS function from Pyret values to JS true/false or throws
    function identical(v1, v2) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["identical"], 2, $a); }
      var ans = identical3(v1, v2);
      if (thisRuntime.ffi.isEqual(ans)) { return true; }
      else if (thisRuntime.ffi.isNotEqual(ans)) { return false; }
      else if (thisRuntime.ffi.isUnknown(ans)) {
        thisRuntime.ffi.throwEqualityException(getField(ans, "reason"), getField(ans, "value1"), getField(ans, "value2"));
      }
    };
    // Pyret function from Pyret values to Pyret booleans (or throws)
    var identicalPy = makeFunction(function(v1, v2) {
      return makeBoolean(identical(v1, v2));
    }, "identical");

    var gensymCounter = Math.floor(Math.random() * 1000);
    var gensym = makeFunction(function(base) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["gensym"], 1, $a); }
      checkString(base);
      return makeString(unwrap(base) + String(gensymCounter++))
    }, "gensym");

    // These are all intentional no-ops.  Some checker needs to be
    // defined by default in order to bootstrap libraries (since
    // all Pyret modules might use these functions to try and run
    // tests).  This one simply discards all the tests, and is
    // an appropriate choice for, say, loading a checker library.
    // See src/arr/trove/checker.arr for the default check
    // implementation in Pyret that is used by the standard evaluator
    var nullChecker = makeObject({
      "run-checks": makeFunction(function(moduleName, checks) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["run-checks"], 2, $a); }
        return nothing;
      }, "run-checks"),
      "check-is": makeFunction(function(left, right, loc) {
        if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["check-is"], 3, $a); }
        return nothing;
      }, "check-is"),
      "check-is-roughly": makeFunction(function(left, right, loc) {
        if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["check-is-roughly"], 3, $a); }
        return nothing;
      }, "check-is"),
      "check-satisfies": makeFunction(function(left, pred, loc) {
        if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["check-satisfies"], 3, $a); }
        return nothing;
      }, "check-satisfies"),
      "results": makeFunction(function() {
        if (arguments.length !== 0) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["results"], 0, $a); }
        return nothing;
      }, "results")
    });

    setParam("current-checker", nullChecker);

    function unwrap(v) {
      if(isNumber(v)) { return v; }
      else if(isString(v)) { return v; }
      else if(isBoolean(v)) { return v; }
      else if(isObject(v)) { return v; }
      else if(isOpaque(v)) { return v; }
      else { thisRuntime.ffi.throwInternalError("Cannot unwrap", [v]); }
    }

    function wrap(v) {
      if(jsnums.isPyretNumber(v)) { return makeNumberBig(v); }
      else if(typeof v === "number") { return makeNumber(v); }
      else if(typeof v === "string") { return makeString(v); }
      else if(typeof v === "boolean") { return makeBoolean(v); }
      else if(isOpaque(v)) { return v; }
      else if(isObject(v)) { return v; }
      else { thisRuntime.ffi.throwInternalError("Cannot wrap", [v]); }
    }

    function mkPred(jsPred, name) {
      return makeFunction(function(v) {
        return makeBoolean(jsPred(v));
      }, name);
    }

    function returnOrRaise(result, val, after) {
      if(thisRuntime.ffi.isOk(result)) { return after(val); }
      if(thisRuntime.ffi.isFail(result)) { raiseJSJS(result); }
      throw "Internal error: got invalid result from annotation check";
    }

    function isCheapAnnotation(ann) {
      return !(ann.refinement || ann instanceof PRecordAnn || ann instanceof PTupleAnn);
    }

    function checkAnn(compilerLoc, ann, val, after) {
      if(isCheapAnnotation(ann)) {
        return returnOrRaise(ann.check(compilerLoc, val), val, after);
      }
      else {
        return safeCall(function() {
          return ann.check(compilerLoc, val);
        }, function(result) {
          return returnOrRaise(result, val, after);
        },
        "checkAnn");
      }
    }

    function checkAnnArg(compilerLoc, ann, args, index, funName) {
      function wrapReason(fail) {
        return thisRuntime.ffi.contractFail(
            thisRuntime.getField(fail, "loc"),
            thisRuntime.ffi.makeFailureAtArg(
              makeSrcloc(compilerLoc),
              index,
              funName,
              thisRuntime.ffi.makeList(args),
              thisRuntime.getField(fail, "reason"))
          );
      }
      if (isCheapAnnotation(ann)) {
        var result = ann.check(compilerLoc, args[index]);
        if(thisRuntime.ffi.isOk(result)) { return args[index]; }
        if(thisRuntime.ffi.isFail(result)) {
          raiseJSJS(wrapReason(result));
        }
        throw "Internal error: got invalid result from annotation check";
      } else {
        return safeCall(function() {
          return ann.check(compilerLoc, args[index]);
        }, function(result) {
          if(thisRuntime.ffi.isOk(result)) { return args[index]; }
          if(thisRuntime.ffi.isFail(result)) { raiseJSJS(wrapReason(result)); }
          throw "Internal error: got invalid result from annotation check";
        },
        "checkAnnArg");
      }
    }

    function checkArgsInternal(moduleName, funName, args, anns) {
      anns.forEach(function(ann, i) {
        if (!isCheapAnnotation(ann)) {
          thisRuntime.ffi.throwMessageException("Internal error: non-stacksafe annotation given to checkArgsInternal");
        }
        checkAnnArg([moduleName], ann, args, i, funName);
      });
    }


    function _checkAnn(compilerLoc, ann, val) {
      if (isCheapAnnotation(ann)) {
        var result = ann.check(compilerLoc, val);
        if(thisRuntime.ffi.isOk(result)) { return val; }
        if(thisRuntime.ffi.isFail(result)) { raiseJSJS(result); }
        throw "Internal error: got invalid result from annotation check";
      } else {
        return safeCall(function() {
          return ann.check(compilerLoc, val);
        }, function(result) {
          if(thisRuntime.ffi.isOk(result)) { return val; }
          if(thisRuntime.ffi.isFail(result)) { raiseJSJS(result); }
          throw "Internal error: got invalid result from annotation check";
        },
        "_checkAnn");
      }
    }

    function safeCheckAnnArg(compilerLoc, ann, val, after) {
      if(isCheapAnnotation(ann)) {
        return returnOrRaise(ann.check(compilerLoc, val), val, after);
      }
      else {
        return safeCall(function() {
          return ann.check(compilerLoc, val);
        }, function(result) {
          return returnOrRaise(result, val, after);
        },
        "safeCheckAnnArg");
      }
    }

    function checkAnnArgs(anns, args, locs, after) {
      function checkI(i) {
        if(i >= args.length) { return after(); }
        else {
          return safeCheckAnnArg(locs[i], anns[i], args[i], function(ignoredArg) {
            return checkI(i + 1);
          });
        }
      }
      return checkI(0);
    }
    function _checkAnnArgs(anns, args, locs) {
      function checkI(i) {
        if(i >= args.length) { return nothing; }
        else {
          return safeCheckAnnArg(locs[i], anns[i], args[i], function(ignoredArg) {
            return checkI(i + 1);
          });
        }
      }
      return checkI(0);
    }
    function checkConstructorArgs(anns, args, locs, after) {
      function checkI(i) {
        if(i >= args.length) { return after(); }
        else {
          if(isGraphableRef(args[i])) { return checkI(i + 1); }
          else {
            return safeCheckAnnArg(locs[i], anns[i], args[i], function(ignoredArg) {
              return checkI(i + 1);
            });
          }
        }
      }
      return checkI(0);
    }

    function checkConstructorArgs2(anns, args, locs, mutMask, after) {
      function checkI(i) {
        if(i >= args.length) { return after(); }
        else {
          if(isGraphableRef(args[i]) && mutMask[i]) { return checkI(i + 1); }
          else {
            return safeCheckAnnArg(locs[i], anns[i], args[i], function(ignoredArg) {
              return checkI(i + 1);
            });
          }
        }
      }
      return checkI(0);
    }
    function checkRefAnns(obj, fields, vals, locs, exprloc, objloc) {
      if (!isObject(obj)) { thisRuntime.ffi.throwUpdateNonObj(makeSrcloc(exprloc), obj, makeSrcloc(objloc));}
      var anns = new Array(fields.length);
      var refs = new Array(fields.length);
      var field = null;
      var ref = null;
      for(var i = 0; i < vals.length; i++) {
        field = fields[i];
        if(hasField(obj, field)) {
          ref = obj.dict[field];
          if(isRef(ref)) {
            if(isRefFrozen(ref)) {
              thisRuntime.ffi.throwUpdateFrozenRef(makeSrcloc(exprloc), obj, makeSrcloc(objloc), field, makeSrcloc(locs[i]));
            }
            anns[i] = getRefAnns(ref);
            refs[i] = ref;
          }
          else {
            thisRuntime.ffi.throwUpdateNonRef(makeSrcloc(exprloc), obj, makeSrcloc(objloc), field, makeSrcloc(locs[i]));
          }
        }
        else {
          thisRuntime.ffi.throwUpdateNonExistentField(makeSrcloc(exprloc), obj, makeSrcloc(objloc), field, makeSrcloc(locs[i]));
        }
      }
      function afterCheck() {
        for(var i = 0; i < refs.length; i++) {
          unsafeSetRef(refs[i], vals[i]);
        }
        return obj;
      }
      return checkAnnArgs(anns, vals, locs, afterCheck);
    }

    function getDotAnn(loc, name, ann, field) {
      checkString(name);
      checkString(field);
      if(ann.hasOwnProperty(field)) {
        return ann[field];
      }
      raiseJSJS(thisRuntime.ffi.contractFail(makeSrcloc(loc),
                                             thisRuntime.ffi.makeDotAnnNotPresent(name, field)))
    }

    function PPrimAnn(name, pred) {
      this.name = name;
      this.pred = pred;
      this.refinement = false;
    }
    PPrimAnn.prototype.checkOrFail = function(passed, val, loc) {
      var that = this;
      if(passed) { return thisRuntime.ffi.contractOk; }
      else {
        return thisRuntime.ffi.contractFail(
          makeSrcloc(loc),
          thisRuntime.ffi.makeTypeMismatch(val, that.name));
      }
    }
    PPrimAnn.prototype.check = function(compilerLoc, val) {
      var that = this;
      if(isCheapAnnotation(this)) {
        return this.checkOrFail(this.pred(val), val, compilerLoc);
      }
      else {
        return safeCall(function() {
          return that.pred(val);
        }, function(passed) {
          return that.checkOrFail(passed, val, compilerLoc);
        },
        "PPrimAnn.check");
      }
    }

    function makePrimitiveAnn(name, jsPred) {
      return new PPrimAnn(name, jsPred);
    }

    function makePrimAnn(name, jsPred) {
      var nameC = new PPrimAnn(name, jsPred);
      // NOTE(joe): the $type$ sadness is because we only have one dynamic
      // namespace
      runtimeTypeBindings[name] = nameC;
      runtimeNamespaceBindings['$type$' + name] = nameC;
      runtimeNamespaceBindings[name] = nameC;
      thisRuntime[name] = nameC;
    }

    function PAnnList(anns) {
      this.anns = anns;
      var refinement = true;
//      for(var i = 0; i < anns.length; i++) {
//        if(anns[i].refinement) { refinement = true; }
//      }
      this.refinement = refinement;
    }

    function makePAnnList(anns) {
      return new PAnnList(anns);
    }
    PAnnList.prototype.addAnn = function(ann, loc) {
//      this.refinement = ann.refinement || this.refinement;
      this.anns.push({ ann: ann, loc: loc });
    }

    PAnnList.prototype.check = function(compilerLoc, val) {
      var that = this;
      function checkI(i) {
        if(i >= that.anns.length) { return thisRuntime.ffi.contractOk; }
        else {
          return safeCall(function() {
            return that.anns[i].ann.check(compilerLoc, val);
          }, function(passed) {
            if(thisRuntime.ffi.isOk(passed)) { return checkI(i + 1); }
            else {
              return thisRuntime.ffi.contractFail(
                getField(passed, "loc"),
                thisRuntime.ffi.makeRefInitFail(makeSrcloc(that.anns[i].loc), getField(passed, "reason"))
              );
            }
          }, "PAnnList.check");
        }
      }
      return checkI(0);
    }

    function PPredAnn(ann, pred, predname) {
      this.ann = ann;
      this.pred = pred;
      this.predname = predname;
      this.refinement = true;
    }
    function makePredAnn(ann, pred, predname) {
      checkFunction(pred);
      checkString(predname);
      return new PPredAnn(ann, pred, predname);
    }
    PPredAnn.prototype.check = function(compilerLoc, val) {
      var that = this;
      return safeCall(function() {
        return that.ann.check(compilerLoc, val);
      }, function(result) {
        if(thisRuntime.ffi.isOk(result)) {
          return safeCall(function() {
            return that.pred.app(val);
          }, function(result) {
            if(isPyretTrue(result)) {
              return thisRuntime.ffi.contractOk;
            }
            else {
              return thisRuntime.ffi.contractFail(
                makeSrcloc(compilerLoc),
                thisRuntime.ffi.makePredicateFailure(val, that.predname));
            }
          },
                          "PPredAnn.check (after the check)")
        }
        else {
          return result;
        }
      },
                      "PPredAnn.check");
    }

    function makeBranderAnn(brander, name) {
      return makePrimitiveAnn(name, function(val) {
        return isObject(val) && hasBrand(val, brander._brand);
      });
    }



    function PTupleAnn(locs, anns) {
      this.locs = locs;
      this.anns = anns;
      var hasRefinement = false;
      for (var i = 0; i < anns.length; i++) {
        hasRefinement = hasRefinement || anns[i].refinement;
      }
      this.refinement = hasRefinement;
    }
    
    function makeTupleAnn(locs, anns) {
      return new PTupleAnn(locs, anns);
    }
    PTupleAnn.prototype.check = function(compilerLoc, val) {
      var that = this;
      if(!isTuple(val)) {
        return thisRuntime.ffi.contractFail(
            makeSrcloc(compilerLoc),
            thisRuntime.ffi.makeTypeMismatch(val, "Tuple")
          );
      }
      if(that.anns.length != val.vals.length) {
        //return ffi.throwMessageException("lengths not equal");
        return that.createTupleLengthMismatch(makeSrcloc(compilerLoc), val, that.anns.length, val.vals.length);
      }

      function deepCheckFields(remainingAnns) {
        var thisAnn;
        return safeCall(function() {
          var thisChecker = remainingAnns.pop();
          thisAnn = thisChecker;
          return thisChecker.check(that.locs[that.locs.length - remainingAnns.length], val.vals[remainingAnns.length]);
        }, function(result) {
          if(thisRuntime.ffi.isOk(result)) {
            if(remainingAnns.length === 0) { return thisRuntime.ffi.contractOk; }
            else { return deepCheckFields(remainingAnns); }
          }
          else if(thisRuntime.ffi.isFail(result)) {
            return that.createTupleFailureError(compilerLoc, val, thisAnn, result);
            //return ffi.throwMessageException("types are wrong");
          }
        },
        "PTupleAnn:deepCheckFields");
      }
      if(that.anns.length === 0) { return thisRuntime.ffi.contractOk; }
      else { return deepCheckFields(that.anns.slice()); }
    }
    PTupleAnn.prototype.createTupleLengthMismatch = function(compilerLoc, val, annLength, tupLength) {
      return thisRuntime.ffi.contractFail(compilerLoc, thisRuntime.ffi.makeTupleLengthMismatch(compilerLoc, val, annLength, tupLength));
    };
    PTupleAnn.prototype.createTupleFailureError = function(compilerLoc, val, ann, result) {
      var that = this;
      var loc;
      for(var i = 0; i < that.anns.length; i++) {
        if(that.anns[i] === ann) { loc = that.locs[i]; }
      }
      return thisRuntime.ffi.contractFail(
        makeSrcloc(compilerLoc),
        thisRuntime.ffi.makeTupleAnnsFail(val, thisRuntime.ffi.makeList([
            thisRuntime.ffi.makeAnnFailure(
              makeSrcloc(loc),
              ann,
              getField(result, "reason")
            )
          ]))
      );
    };

    /* PTupleAnn.prototype.createTupleLengthMismatch = function(loc, val, annLength, tupLength) {
       ffi.contractFail(loc, ffi.makeTupleLengthMismatch(loc, val, annLength, tupleLength);
       }; */




    function PRecordAnn(fields, locs, anns) {
      this.fields = fields;
      this.locs = locs;
      this.anns = anns;
      var hasRefinement = false;
      for (var i = 0; i < fields.length; i++) {
        hasRefinement = hasRefinement || anns[fields[i]].refinement;
      }
      this.refinement = hasRefinement;
    }
    function makeRecordAnn(fields, locs, anns) {
      return new PRecordAnn(fields, locs, anns);
    }
    PRecordAnn.prototype.createMissingFieldsError = function(compilerLoc, val) {
      var that = this;
      var missingFields = [];
      for(var i = 0; i < that.fields.length; i++) {
        if(!hasField(val, that.fields[i])) {
          var reason = thisRuntime.ffi.makeMissingField(
            makeSrcloc(that.locs[i]),
            that.fields[i]
          );
          missingFields.push(reason);
        }
      }
      return thisRuntime.ffi.contractFail(
        makeSrcloc(compilerLoc),
        thisRuntime.ffi.makeRecordFieldsFail(val, thisRuntime.ffi.makeList(missingFields))
      );
    };
    PRecordAnn.prototype.createRecordFailureError = function(compilerLoc, val, field, result) {
      var that = this;
      var loc;
      for(var i = 0; i < that.fields.length; i++) {
        if(that.fields[i] === field) { loc = that.locs[i]; }
      }
      return thisRuntime.ffi.contractFail(
        makeSrcloc(compilerLoc),
        thisRuntime.ffi.makeRecordFieldsFail(val, thisRuntime.ffi.makeList([
          thisRuntime.ffi.makeFieldFailure(
            makeSrcloc(loc),
            field,
            getField(result, "reason")
          )
        ]))
      );
    };
    PRecordAnn.prototype.check = function(compilerLoc, val) {
      var that = this;
      if(!isObject(val)) {
        return thisRuntime.ffi.contractFail(
          makeSrcloc(compilerLoc),
          thisRuntime.ffi.makeTypeMismatch(val, "Object")
        );
      }
      for(var i = 0; i < that.fields.length; i++) {
        if(!hasField(val, that.fields[i])) {
          return that.createMissingFieldsError(compilerLoc, val);
        }
      }

      function deepCheckFields(remainingFields) {
        var thisField;
        return safeCall(function() {
          thisField = remainingFields.pop();
          var thisChecker = that.anns[thisField];
          return thisChecker.check(that.locs[that.locs.length - remainingFields.length], getColonField(val, thisField));
        }, function(result) {
          if(thisRuntime.ffi.isOk(result)) {
            if(remainingFields.length === 0) { return thisRuntime.ffi.contractOk; }
            else { return deepCheckFields(remainingFields); }
          }
          else if(thisRuntime.ffi.isFail(result)) {
            return that.createRecordFailureError(compilerLoc, val, thisField, result);
          }
        },
        "PRecordAnn:deepCheckFields");
      }
      if(that.fields.length === 0) { return thisRuntime.ffi.contractOk; }
      else { return deepCheckFields(that.fields.slice()); }
    }

    /********************

     *******************/

    /********************
           Results
    *******************/
    /**
       Result containing the value of a successful evaluation

       @constructor
       @param {!PBase} r result value
    */
    function SuccessResult(r, stats) {
      this.result = r;
      this.stats = stats;
    }

    /**
       Tests if result is a successResult
       @param {Object} val the value to test
       @return {boolean} true if it is a SuccessResult
    */
    function isSuccessResult(val) { return val instanceof SuccessResult; }
    function makeSuccessResult(r) { return new SuccessResult(r); }

    /**
       Result containing the exception of a failed evaluation

       @constructor
       @param {!Error} e exception's value
    */
    function FailureResult(e, stats) {
      this.exn = e;
      this.stats = stats;
    }
    FailureResult.prototype.toString = function() {
      return "FailureResult(" + this.exn + ")";
    };
    /**
       Tests if result is a FailueResult
       @param {Object} val the value to test
       @return {boolean} true if it is a FailueResult
    */
    function isFailureResult(val) { return val instanceof FailureResult; }
    function makeFailureResult(e) {
      return new FailureResult(e);
    }

    /**
       Represents a continuation
       @constructor
    */

    function Cont(stack) {
      this.stack = stack;
    }
    function makeCont() { return new Cont([]); }
    function isCont(v) { return v instanceof Cont; }
    Cont.prototype._toString = function() {
      var stack = this.stack;
      var stackStr = stack && stack.length > 0 ?
        stack.map(function(s) {
          if(!s && s.from) { return "<blank frame>"; }
          else {
            if(typeof s.from === "string") { return s; }
            else {
              return s.from.join(",");
            }
          }
        }).join("\n") : "<no stack trace>";
      return stackStr;
    }

    function Pause(stack, pause, resumer) {
      this.stack = stack;
      this.pause = pause;
      this.resumer = resumer;
    }
    function makePause(pause, resumer) { return new Pause([], pause, resumer); }
    function isPause(v) { return v instanceof Pause; }
    Pause.prototype = Object.create(Cont.prototype);

    function safeTail(fun) {
      return fun();
    }

    function safeThen(fun, stackFrame) {
      return {
        then: function(after) {
          return safeThen(function() {
            return safeCall(fun, after, stackFrame);
          });
        },
        start: function() {
          return fun();
        }
      };
    }

    function safeCall(fun, after, stackFrame) {
      var $ans = undefined;
      var $step = 0;
      if (thisRuntime.isActivationRecord(fun)) {
        var $ar = fun;
        $step = $ar.step;
        $ans = $ar.ans;
        fun = $ar.args[0];
        after = $ar.args[1];
        stackFrame = $ar.args[2];
        $fun_ans = $ar.vars[0];
      }
      try {
        if (--thisRuntime.GAS <= 0) {
          thisRuntime.EXN_STACKHEIGHT = 0;
          throw thisRuntime.makeCont();
        }
        while(true) {
          switch($step) {
          case 0:
            $step = 1;
            $ans = fun();
            break;
          case 1:
            var $fun_ans = $ans;
            $step = 2;
            $ans = after($fun_ans);
            break;
          case 2: return $ans;
          }
        }
      } catch($e) {
        if (thisRuntime.isCont($e)) {
          $e.stack[thisRuntime.EXN_STACKHEIGHT++] =
            thisRuntime.makeActivationRecord(
              "safeCall for " + stackFrame,
              safeCall,
              $step,
              [ fun, after, stackFrame ],
              [ $fun_ans ]
            );
        }
        if (thisRuntime.isPyretException($e)) {
          $e.pyretStack.push(stackFrame);
        }
        throw $e;
      }
    }

    function eachLoop(fun, start, stop) {
      var i = start;
      var started = false;
      var currentRunCount = 0;
      if(thisRuntime.isActivationRecord(fun)) {
        var ar = fun
        i = ar.vars[0];
        fun = ar.vars[1];
        stop = ar.vars[2];
        started = ar.vars[3];
        if (started) {
          i = i + 1;
        }
      }
      try {
        if (--thisRuntime.GAS <= 0) {
          thisRuntime.EXN_STACKHEIGHT = 0;
          throw thisRuntime.makeCont();
        }
        while(true) {
          started = true;
          if(i >= stop) { return thisRuntime.nothing; }
          fun.app(i);

          if (++currentRunCount >= 1000) {
            thisRuntime.EXN_STACKHEIGHT = 0;
            throw thisRuntime.makeCont();
          }  
          else { i = i + 1; }
        }
      }
      catch($e) {
        if (thisRuntime.isCont($e)) {
          $e.stack[thisRuntime.EXN_STACKHEIGHT++] =
            thisRuntime.makeActivationRecord("eachLoop", eachLoop, true, [], [i, fun, stop, started]);
        }
        throw $e;
      }
    }

    var RUN_ACTIVE = false;
    var currentThreadId = 0;
    var activeThreads = {};

    var queuedRuns = [];

    function run(program, namespace, options, onDone) {
      // CONSOLE.log("In run2");
      if(RUN_ACTIVE) {
        onDone(makeFailureResult(thisRuntime.ffi.makeMessageException("Internal: run called while already running")));
        return;
      }
      RUN_ACTIVE = true;
      var start;
      function startTimer() {
        if (typeof window !== "undefined" && window.performance) {
          start = window.performance.now();
        } else if (typeof process !== "undefined" && process.hrtime) {
          start = process.hrtime();
        }
      }
      function endTimer() {
        if (typeof window !== "undefined" && window.performance) {
          return window.performance.now() - start;
        } else if (typeof process !== "undefined" && process.hrtime) {
          return process.hrtime(start);
        }
      }
      function getStats() {
        return { bounces: BOUNCES, tos: TOS, time: endTimer() };
      }
      function finishFailure(exn) {
        RUN_ACTIVE = false;
        delete activeThreads[thisThread.id];
        onDone(makeFailureResult(exn, getStats()));
      }
      function finishSuccess(answer) {
        RUN_ACTIVE = false;
        delete activeThreads[thisThread.id];
        onDone(new SuccessResult(answer, getStats()));
      }

      startTimer();
      var that = this;
      var theOneTrueStackTop = ["top-of-stack"]
      var kickoff = makeActivationRecord(
        "<top of stack>",
        function(ignored) {
          return program(thisRuntime, namespace);
        },
        0,
        [],
        []
      );
      var theOneTrueStack = [kickoff];
      var theOneTrueStart = {};
      var val = theOneTrueStart;
      var theOneTrueStackHeight = 1;
      var BOUNCES = 0;
      var TOS = 0;

      var sync = options.sync || false;
      var initialGas = thisRuntime.INITIAL_GAS;

      var threadIsCurrentlyPaused = false;
      var threadIsDead = false;
      currentThreadId += 1;
      // Special case of the first thread to run in between breaks.
      // This is the only thread notified of the break, others just die
      // silently.
      if(Object.keys(activeThreads).length === 0) {
        var breakFun = function() {
          threadIsCurrentlyPaused = true;
          threadIsDead = true;
          finishFailure(new PyretFailException(thisRuntime.ffi.userBreak));
        };
      }
      else {
        var breakFun = function() {
          threadIsCurrentlyPaused = true;
          threadIsDead = true;
        };
      }

      var thisThread = {
        handlers: {
          resume: function(restartVal) {
            if(!threadIsCurrentlyPaused) { throw new Error("Stack already running"); }
            if(threadIsDead) { throw new Error("Failed to resume; thread has been killed"); }
            threadIsCurrentlyPaused = false;
            val = restartVal;
            TOS++;
            RUN_ACTIVE = true;
            util.suspend(iter);
          },
          break: breakFun,
          error: function(errVal) {
            threadIsCurrentlyPaused = true;
            threadIsDead = true;
            var exn;
            if(isPyretException(errVal)) {
              exn = errVal;
            } else {
              exn = new PyretFailException(errVal);
            }
            finishFailure(exn);
          }
        },
        pause: function() {
          threadIsCurrentlyPaused = true;
        },
        id: currentThreadId
      };
      activeThreads[currentThreadId] = thisThread;

      // iter :: () -> Undefined
      // This function should not return anything meaningful, as state
      // and fallthrough are carefully managed.
      function iter() {
        // CONSOLE.log("In run2::iter, GAS is ", thisRuntime.GAS);
        // If the thread is dead, return has already been processed
        if (threadIsDead) {
          return;
        }
        // If the thread is paused, something is wrong; only resume() should
        // be used to re-enter
        if (threadIsCurrentlyPaused) { throw new Error("iter entered during stopped execution"); }
        var loop = true;
        while (loop) {
          loop = false;
          try {
            if (manualPause !== null) {
              var thePause = manualPause;
              manualPause = null;
              pauseStack(function(restarter) {
                thePause.setHandlers({
                  resume: function() { restarter.resume(val); },
                  break: restarter.break,
                  error: restarter.error
                });
              });
            }
            var frameCount = 0;
            while(theOneTrueStackHeight > 0) {
              if(!sync && frameCount++ > 100) {
                TOS++;
                // CONSOLE.log("Setting timeout to resume iter");
                util.suspend(iter);
                return;
              }
              var next = theOneTrueStack[--theOneTrueStackHeight];
              // CONSOLE.log("ActivationRecord[" + theOneTrueStackHeight + "] = " + JSON.stringify(next, null, "  "));
              theOneTrueStack[theOneTrueStackHeight] = undefined;
              // CONSOLE.log("theOneTrueStack = ", theOneTrueStack);
              // CONSOLE.log("Setting ans to " + JSON.stringify(val, null, "  "));
              next.ans = val;
              // CONSOLE.log("GAS = ", thisRuntime.GAS);

              if (next.fun instanceof Function) {
                val = next.fun(next);
              }
              else if (!(next instanceof ActivationRecord)) {
                CONSOLE.log("Our next stack frame doesn't look right!");
                CONSOLE.log(JSON.stringify(next));
                CONSOLE.log(theOneTrueStack);
                throw false;
              }
              // CONSOLE.log("Frame returned, val = " + JSON.stringify(val, null, "  "));
            }
          } catch(e) {
            if(thisRuntime.isCont(e)) {
              // CONSOLE.log("BOUNCING");
              BOUNCES++;
              thisRuntime.GAS = initialGas;
              for(var i = e.stack.length - 1; i >= 0; i--) {
              // CONSOLE.error(e.stack[i].vars.length + " width;" + e.stack[i].vars + "; from " + e.stack[i].from + "; frame " + theOneTrueStackHeight);
                theOneTrueStack[theOneTrueStackHeight++] = e.stack[i];
              }
              // CONSOLE.log("The new stack height is ", theOneTrueStackHeight);
              // CONSOLE.log("theOneTrueStack = ", theOneTrueStack.slice(0, theOneTrueStackHeight).map(function(f) {
              //   if (f && f.from) { return f.from.toString(); }
              //   else { return f; }
              // }));

              if(isPause(e)) {
                thisThread.pause();
                e.pause.setHandlers(thisThread.handlers);
                if(e.resumer) { e.resumer(e.pause); }
                return;
              }
              else if(thisRuntime.isCont(e)) {
                if(sync) {
                  loop = true;
                  // DON'T return; we synchronously loop back to the outer while loop
                  continue;
                }
                else {
                  TOS++;
                  util.suspend(iter);
                  return;
                }
              }
            }

            else if(isPyretException(e)) {
              while(theOneTrueStackHeight > 0) {
                var next = theOneTrueStack[--theOneTrueStackHeight];
                theOneTrueStack[theOneTrueStackHeight] = "sentinel";
                e.pyretStack.push(next.from);
              }
              finishFailure(e);
              return;
            } else {
              finishFailure(e);
              return;
            }
          }
        }
        finishSuccess(val);
        return;
      }
      thisRuntime.GAS = initialGas;
      iter();
    }

    var TRACE_DEPTH = 0;
    var SHOW_TRACE = true;
    var TOTAL_VARS = 0;
    function traceEnter(name, vars) {
      if (!SHOW_TRACE) return;
      TRACE_DEPTH++;
      TOTAL_VARS += vars;
      CONSOLE.log("%s %s, Num vars: %d, Total vars: %d",
                  Array(TRACE_DEPTH).join(" ") + "--> ",
                  name, vars, TOTAL_VARS);
    }
    function traceExit(name, vars) {
      if (!SHOW_TRACE) return;
      TOTAL_VARS -= vars;
      CONSOLE.log("%s %s, Num vars: %d, Total vars: %d",
                  Array(TRACE_DEPTH).join(" ") + "<-- ",
                  name, vars, TOTAL_VARS);
      TRACE_DEPTH = TRACE_DEPTH > 0 ? TRACE_DEPTH - 1 : 0;
    }
    function traceErrExit(name, vars) {
      if (!SHOW_TRACE) return;
      TOTAL_VARS -= vars;
      CONSOLE.log("%s %s, Num vars: %d, Total vars: %d",
                  Array(TRACE_DEPTH).join(" ") + "<XX ",
                  name, vars, TOTAL_VARS);
      TRACE_DEPTH = TRACE_DEPTH > 0 ? TRACE_DEPTH - 1 : 0;
    }

    var UNINITIALIZED_ANSWER = {'uninitialized answer': true};
    function ActivationRecord(from, fun, step, ans, args, vars) {
      this.from = from;
      this.fun = fun;
      this.step = step;
      this.ans = ans;
      this.args = args;
      this.vars = vars;
    }
    ActivationRecord.prototype.toString = function() {
      return "{from: " + this.from + ", fun: " + this.fun + ", step: " + this.step
        + ", ans: " + JSON.stringify(this.ans) + ", args: " + JSON.stringify(this.args)
        + ", vars: " + JSON.stringify(this.vars) + "}";
    }
    function makeActivationRecord(from, fun, step, args, vars) {
      return new ActivationRecord(from, fun, step, UNINITIALIZED_ANSWER, args, vars);
    }
    function isActivationRecord(obj) {
      return obj instanceof ActivationRecord;
    }

    // we can set verbose to true to include the <builtin> srcloc positions
    // and the "safecall for ..." internal frames
    // but by default, it's now terser
    function printPyretStack(stack, verbose) {
      if (stack === undefined) return "  undefined";
      if (!verbose) {
        stack = stack.filter(function(val) { return val instanceof Array && val.length == 7; });
      }
      var stackStr = stack.map(function(val) {
        if (val instanceof Array && val.length == 7) {
          return (val[0] + ": line " + val[1] + ", column " + val[2]);
        } else if (val) {
          return JSON.stringify(val);
        }
      });
      return "  " + stackStr.join("\n  ");
    }

    function breakAll() {
      RUN_ACTIVE = false;
      var threadsToBreak = activeThreads;
      var keys = Object.keys(threadsToBreak);
      activeThreads = {};
      for(var i = 0; i < keys.length; i++) {
        threadsToBreak[keys[i]].handlers.break();
      }
    }

    function pauseStack(resumer) {
      // CONSOLE.log("Pausing stack: ", RUN_ACTIVE, new Error().stack);
      RUN_ACTIVE = false;
      thisRuntime.EXN_STACKHEIGHT = 0;
      var pause = new PausePackage();
      throw makePause(pause, resumer);
    }

    function PausePackage() {
      this.resumeVal = null;
      this.errorVal = null;
      this.breakFlag = false;
      this.handlers = null;
    }
    PausePackage.prototype = {
      setHandlers: function(handlers) {
        if(this.breakFlag) {
          handlers.break();
        }
        else if (this.resumeVal !== null) {
          handlers.resume(this.resumeVal);
        }
        else if (this.errorVal !== null) {
          handlers.error(this.errorVal);
        }
        else {
          this.handlers = handlers;
        }
      },
      break: function() {
        if(this.resumeVal !== null || this.errorVal !== null) {
          throw "Cannot break with resume or error requested";
        }
        if(this.handlers !== null) {
          this.handlers.break();
        }
        else {
          this.breakFlag = true;
        }
      },
      error: function(err) {
        if(this.resumeVal !== null || this.breakFlag) {
          throw "Cannot error with resume or break requested";
        }
        if(this.handlers !== null) {
          this.handlers.error(err);
        }
        else {
          this.errorVal = err;
        }
      },
      resume: function(val) {
        if(this.errorVal !== null || this.breakFlag) {
          throw "Cannot resume with error or break requested";
        }
        if(this.handlers !== null) {
          this.handlers.resume(val);
        }
        else {
          this.resumeVal = val;
        }
      }
    };

    var manualPause = null;
    function schedulePause(resumer) {
      var pause = new PausePackage();
      manualPause = pause;
      resumer(pause);
    }

    function getExnValue(v) {
      if(!isOpaque(v) && !isPyretException(v.val)) {
        thisRuntime.ffi.throwMessageException("Got non-exception value in getExnVal");
      }
      return v.val.exn;
    }

    function runThunk(f, then) {
      return thisRuntime.run(f, thisRuntime.namespace, {}, then);
    }

    function execThunk(thunk) {
      function wrapResult(res) {
        if(isSuccessResult(res)) {
          return thisRuntime.ffi.makeLeft(res.result);
        } else if (isFailureResult(res)) {
          if(isPyretException(res.exn)) {
            return thisRuntime.ffi.makeRight(makeOpaque(res.exn));
          }
          else {
            return thisRuntime.ffi.makeRight(makeOpaque(makePyretFailException(thisRuntime.ffi.makeMessageException(String(res.exn + "\n" + res.exn.stack)))));
          }
        } else {
          CONSOLE.error("Bad execThunk result: ", res);
          return;
        }
      }
      thisRuntime.pauseStack(function(restarter) {
        thisRuntime.run(function(_, __) {
          return thunk.app();
        }, thisRuntime.namespace, {
          sync: false
        }, function(result) {
          if(isFailureResult(result) &&
             isPyretException(result.exn) &&
             thisRuntime.ffi.isUserBreak(result.exn.exn)) { restarter.break(); }
          else {
            restarter.resume(wrapResult(result));
          }
        });
      });
    }

    function runWhileRunning(thunk) {
      thisRuntime.pauseStack(function(restarter) {
        thisRuntime.run(function(_, __) {
          return thunk.app();
        }, thisRuntime.namespace, {
          sync: false
        }, function(result) {
          restarter.resume(result);
          if(isFailureResult(result) &&
             isPyretException(result.exn) &&
             thisRuntime.ffi.isUserBreak(result.exn.exn)) { restarter.break(); }
          else {
            restarter.resume(wrapResult(result))
          }
        });
      });
    }

    var INITIAL_GAS = theOutsideWorld.initialGas || 1000;

    var DEBUGLOG = true;
    /**
       @type {function(...[?]): undefined}
    */
    var log = function() {
      if(DEBUGLOG) { CONSOLE.log.apply(CONSOLE, arguments); }
    }

    var NumberErrbacks = {
      throwDivByZero: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwToleranceError: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwRelToleranceError: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwGeneralError: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwDomainError: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwSqrtNegative: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwLogNonPositive: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwIncomparableValues: function(msg) { thisRuntime.ffi.throwMessageException(msg); },
      throwInternalError: function(msg) { thisRuntime.ffi.throwInternalError(msg); },
    };


    var plus = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_plus"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeNumberBig(jsnums.add(l, r, NumberErrbacks));
      } else if (thisRuntime.isString(l) && thisRuntime.isString(r)) {
        return thisRuntime.makeString(l.concat(r));
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_plus")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_plus").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumStringBinopError(l, r, "+", "Plus", "_plus");
      }
    };

    var minus = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_minus"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeNumberBig(jsnums.subtract(l, r, NumberErrbacks));
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_minus")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_minus").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumericBinopError(l, r, "-", "Minus", "_minus");
      }
    };

    var times = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_times"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeNumberBig(jsnums.multiply(l, r, NumberErrbacks));
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_times")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_times").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumericBinopError(l, r, "*", "Times", "_times");
      }
    };

    var divide = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_divide"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeNumberBig(jsnums.divide(l, r, NumberErrbacks));
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_divide")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_divide").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumericBinopError(l, r, "/", "Divide", "_divide");
      }
    };

    var lessthan = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_lessthan"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeBoolean(jsnums.lessThan(l, r, NumberErrbacks));
      } else if (thisRuntime.isString(l) && thisRuntime.isString(r)) {
        return thisRuntime.makeBoolean(l < r);
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_lessthan")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_lessthan").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumStringBinopError(l, r, "<", "Less-than", "_lessthan");
      }
    };

    var greaterthan = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_greaterthan"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeBoolean(jsnums.greaterThan(l, r, NumberErrbacks));
      } else if (thisRuntime.isString(l) && thisRuntime.isString(r)) {
        return thisRuntime.makeBoolean(l > r);
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_greaterthan")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_greaterthan").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumStringBinopError(l, r, ">", "Greater-than", "_greaterthan");
      }
    };

    var lessequal = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_lessequal"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeBoolean(jsnums.lessThanOrEqual(l, r, NumberErrbacks));
      } else if (thisRuntime.isString(l) && thisRuntime.isString(r)) {
        return thisRuntime.makeBoolean(l <= r);
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_lessequal")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_lessequal").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumStringBinopError(l, r, "<=", "Less-than-or-equal", "_lessequal");
      }
    };

    var greaterequal = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["_greaterequal"], 2, $a); }
      if (thisRuntime.isNumber(l) && thisRuntime.isNumber(r)) {
        return thisRuntime.makeBoolean(jsnums.greaterThanOrEqual(l, r, NumberErrbacks));
      } else if (thisRuntime.isString(l) && thisRuntime.isString(r)) {
        return thisRuntime.makeBoolean(l >= r);
      } else if (thisRuntime.isObject(l) && hasProperty(l.dict, "_greaterequal")) {
        return safeTail(function() {
          return thisRuntime.getField(l, "_greaterequal").app(r);
        });
      } else {
        thisRuntime.ffi.throwNumStringBinopError(l, r, ">=", "Greater-than-or-equal", "_greaterequal");
      }
    };

    var checkArrayIndex = function(methodName, arr, ix) {
      var throwErr = function(reason) {
        thisRuntime.ffi.throwInvalidArrayIndex(methodName, arr, ix, reason);
      };
      if(ix >= arr.length) {
        throwErr("is too large; the array length is " + arr.length);
      }
      if(ix < 0) {
        throwErr("is a negative number.");
      }
      if(!(num_is_integer(ix))) {
        throwErr("is not an integer.");
      }
    }

    var raw_array_of = function(val, len) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-of"], 2, $a); }
      thisRuntime.checkNumber(len);
      var arr = new Array(len);
      var i = 0;
      while(i < len) {
        arr[i++] = val;
      }
      return arr;
    }

    var raw_array_build = function(f, len) {
      if (thisRuntime.isActivationRecord(f)) {
        var $ar = f;
        $step = $ar.step;
        $ans = $ar.ans;
        curIdx = $ar.vars[0];
        arr = $ar.vars[1];
        f = $ar.args[0];
        len = $ar.args[1];
      } else {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-build"], 2, $a); }
        thisRuntime.checkFunction(f);
        thisRuntime.checkNumber(len);
        var curIdx = 0;
        var arr = new Array();
        var $ans;
        var $step = 0;
      }
      var currentRunCount = 0;
      try {
        if (--thisRuntime.GAS <= 0) {
          thisRuntime.EXN_STACKHEIGHT = 0;
          throw thisRuntime.makeCont();
        }
        
        while (curIdx < len) {
          if (++currentRunCount >= 1000) {
            thisRuntime.EXN_STACKHEIGHT = 0;
            throw thisRuntime.makeCont();
          }
          switch($step) {
          case 0:
            $step = 1;
            $ans = f.app(curIdx);
            // no need to break
          case 1:
            arr.push($ans);
            $step = 0;
            curIdx++;
          }
        }
        return arr;
      } catch($e) {
        if (thisRuntime.isCont($e)) {
          $e.stack[thisRuntime.EXN_STACKHEIGHT++] =
            thisRuntime.makeActivationRecord(["raw-array-build"], raw_array_build, $step, [f, len], [curIdx, arr]);
        }
        throw $e;
      }
    }

    var raw_array_build_opt = function(f, len) {
      if (thisRuntime.isActivationRecord(f)) {
        var $ar = f;
        $step = $ar.step;
        $ans = $ar.ans;
        curIdx = $ar.vars[0];
        arr = $ar.vars[1];
        f = $ar.args[0];
        len = $ar.args[1];
      } else {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-build"], 2, $a); }
        thisRuntime.checkFunction(f);
        thisRuntime.checkNumber(len);
        var curIdx = 0;
        var arr = new Array();
        var $ans;
        var $step = 0;
      }
      var currentRunCount = 0;
      try {
        if (--thisRuntime.GAS <= 0) {
          thisRuntime.EXN_STACKHEIGHT = 0;
          throw thisRuntime.makeCont();
        }
        
        while (curIdx < len) {
          if (++currentRunCount >= 1000) {
            thisRuntime.EXN_STACKHEIGHT = 0;
            throw thisRuntime.makeCont();
          }
          switch($step) {
          case 0:
            $step = 1;
            $ans = f.app(curIdx);
            // no need to break
          case 1:
            if (thisRuntime.ffi.isSome($ans)) {
              arr.push(thisRuntime.getField($ans, "value"));
            }
            $step = 0;
            curIdx++;
          }
        }
        return arr;
      } catch($e) {
        if (thisRuntime.isCont($e)) {
          $e.stack[thisRuntime.EXN_STACKHEIGHT++] =
            thisRuntime.makeActivationRecord(["raw-array-build-opt"], raw_array_build_opt, $step, [f, len], [curIdx, arr]);
        }
        throw $e;
      }
    }

    var raw_array_get = function(arr, ix) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-obj-destructure"], 2, $a); }
      thisRuntime.checkArray(arr);
      thisRuntime.checkNumber(ix);
      checkArrayIndex("raw-array-get", arr, ix);
      return arr[ix];
    };

    var raw_array_obj_destructure = function(arr, keys) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-get"], 2, $a); }
      thisRuntime.checkArray(arr);
      thisRuntime.checkArray(keys);
      
      var obj = {}
      for(var i = 0; i < keys.length; i++) {
        obj[keys[i]] = arr[i];
      }
      
      return makeObject(obj);
    };

    var raw_array_set = function(arr, ix, newVal) {
      if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-set"], 3, $a); }
      thisRuntime.checkArray(arr);
      thisRuntime.checkNumber(ix);
      checkArrayIndex("raw-array-set", arr, ix);
      arr[ix] = newVal;
      return arr;
    };

    var raw_array_length = function(arr) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-length"], 1, $a); }
      thisRuntime.checkArray(arr);
      return makeNumber(arr.length);
    };

    var raw_array_to_list = function(arr) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-to-list"], 1, $a); }
      thisRuntime.checkArray(arr);
      return thisRuntime.ffi.makeList(arr);
    };

    var raw_array_constructor = function(arr) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array"], 1, $a); }
      thisRuntime.checkArray(arr);
      return arr;
    };

    var raw_array_concat = function(arr, other) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-concat"], 2, $a); }
      thisRuntime.checkArray(arr);
      thisRuntime.checkArray(other);
      return arr.concat(other);
    };

    var raw_array_maker = makeObject({
      make:  makeFunction(raw_array_constructor, "raw-array:make"),
      make0: makeFunction(function() { return []; }, "raw-array:make0"),
      make1: makeFunction(function(a) { return [a]; }, "raw-array:make1"),
      make2: makeFunction(function(a, b) { return [a, b]; }, "raw-array:make2"),
      make3: makeFunction(function(a, b, c) { return [a, b, c]; }, "raw-array:make3"),
      make4: makeFunction(function(a, b, c, d) { return [a, b, c, d]; }, "raw-array:make4"),
      make5: makeFunction(function(a, b, c, d, e) { return [a, b, c, d, e]; }, "raw-array:make5"),
    });

    var raw_array_fold = function(f, init, arr, start) {
      if (arguments.length !== 4) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-fold"], 4, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkPyretVal(init);
      thisRuntime.checkArray(arr);
      thisRuntime.checkNumber(start);
      var currentIndex = -1;
      var currentAcc = init;
      var length = arr.length;
      function foldHelp() {
        while(++currentIndex < length) {
          currentAcc = f.app(currentAcc, arr[currentIndex], currentIndex + start);
        }
        return currentAcc;
      }
      function foldFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            currentAcc = $ar.ans;
          }
          return foldHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-array-fold"],
              foldFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-array-fold"]);
          }
          throw $e;
        }
      }
      return foldFun();
    };

    var raw_array_map = function(f, arr) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-map"], 2, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkArray(arr);
      var currentIndex = -1;
      var length = arr.length;
      var newArray = new Array(length);
      function mapHelp() {
        while(++currentIndex < length) {
          newArray[currentIndex] = f.app(arr[currentIndex]);
        }
        return newArray;
      }
      function mapFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            newArray[currentIndex] = $ar.ans;
          }
          return mapHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-array-map"],
              mapFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-array-map"]);
          }
          throw $e;
        }
      }
      return mapFun();
    };

    var raw_array_mapi = function(f, arr) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-mapi"], 2, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkArray(arr);
      var currentIndex = -1;
      var length = arr.length;
      var newArray = new Array(length);
      function mapHelp() {
        while(++currentIndex < length) {
          newArray[currentIndex] = f.app(arr[currentIndex], currentIndex);
        }
        return newArray;
      }
      function mapFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            newArray[currentIndex] = $ar.ans;
          }
          return mapHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-array-map"],
              mapFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-array-map"]);
          }
          throw $e;
        }
      }
      return mapFun();
    };

    var raw_list_map = function(f, lst) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-list-map"], 2, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkList(lst);
      var currentAcc = [];
      var currentLst = lst;
      var currentFst;
      function foldHelp() {
        while(thisRuntime.ffi.isLink(currentLst)) {
          currentFst = thisRuntime.getColonField(currentLst, "first");
          currentLst = thisRuntime.getColonField(currentLst, "rest");
          currentAcc.push(f.app(currentFst));
        }
        return thisRuntime.ffi.makeList(currentAcc);
      }
      function foldFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            currentAcc.push($ar.ans);
          }
          return foldHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-list-map"],
              foldFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-list-map"]);
          }
          throw $e;
        }
      }
      return foldFun();
    };

    /**
     * Similar to `raw_array_map`, but applies a specific function to
     * the first item in the array
     */
    var raw_array_map1 = function(f1, f, arr) {
      if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-map1"], 3, $a); }
      thisRuntime.checkFunction(f1);
      thisRuntime.checkFunction(f);
      thisRuntime.checkArray(arr);
      var currentIndex = -1;
      var length = arr.length;
      var newArray = new Array(length);
      function mapHelp() {
        if (length === 0) { return newArray; }
        newArray[++currentIndex] = f1.app(arr[currentIndex]);
        while(++currentIndex < length) {
          newArray[currentIndex] = f.app(arr[currentIndex]);
        }
        return newArray;
      }
      function mapFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            newArray[currentIndex] = $ar.ans;
          }
          return mapHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-array-map1"],
              mapFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-array-map1"]);
          }
          throw $e;
        }
      }
      return mapFun();
    };

    var raw_list_filter = function(f, lst) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-list-filter"], 2, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkList(lst);
      var currentAcc = [];
      var currentLst = lst;
      var currentFst;
      function foldHelp() {
        while(thisRuntime.ffi.isLink(currentLst)) {
          currentFst = thisRuntime.getColonField(currentLst, "first");
          currentLst = thisRuntime.getColonField(currentLst, "rest");
          if(f.app(currentFst)) {
            currentAcc.push(currentFst);
          }
        }
        return thisRuntime.ffi.makeList(currentAcc);
      }
      function foldFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            if($ar.ans) {
              currentAcc.push(currentFst);
            }
          }
          return foldHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-list-filter"],
              foldFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-list-filter"]);
          }
          throw $e;
        }
      }
      return foldFun();
    };

    var raw_array_filter = function(f, arr) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-array-filter"], 2, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkArray(arr);
      var currentIndex = -1;
      var length = arr.length;
      var newArray = new Array();
      function filterHelp() {
        while(++currentIndex < length) {
          if(isPyretTrue(f.app(arr[currentIndex]))){
            newArray.push(arr[currentIndex]);
          }
        }
        return newArray;
      }
      function filterFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            if($ar.ans) { newArray.push(arr[currentIndex]); }
          }
          return filterHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-array-filter"],
              filterFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-array-filter"]);
          }
          throw $e;
        }
      }
      return filterFun();
    };

    var raw_list_fold = function(f, init, lst) {
      if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["raw-list-fold"], 3, $a); }
      thisRuntime.checkFunction(f);
      thisRuntime.checkPyretVal(init);
      thisRuntime.checkList(lst);
      var currentAcc = init;
      var currentLst = lst;
      function foldHelp() {
        while(thisRuntime.ffi.isLink(currentLst)) {
          var fst = thisRuntime.getColonField(currentLst, "first");
          currentLst = thisRuntime.getColonField(currentLst, "rest");
          currentAcc = f.app(currentAcc, fst);
        }
        return currentAcc;
      }
      function foldFun($ar) {
        try {
          if (thisRuntime.isActivationRecord($ar)) {
            currentAcc = $ar.ans;
          }
          return foldHelp();
        } catch ($e) {
          if (thisRuntime.isCont($e)) {
            $e.stack[thisRuntime.EXN_STACKHEIGHT++] = thisRuntime.makeActivationRecord(
              ["raw-list-fold"],
              foldFun,
              0, // step doesn't matter here
              [], []);
          }
          if (thisRuntime.isPyretException($e)) {
            $e.pyretStack.push(["raw-list-fold"]);
          }
          throw $e;
        }
      }
      return foldFun();
    };


    var string_substring = function(s, min, max) {
      if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-substring"], 3, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkNumber(min);
      thisRuntime.checkNumber(max);
      function exactCheck(name, val) {
        if(!jsnums.isInteger(val)) {
          thisRuntime.ffi.throwMessageException("substring: expected a positive integer for " + name + " index, but got " + String(val));
        }
      }
      exactCheck("start", min);
      exactCheck("end", max);
      if(jsnums.greaterThan(min, max, NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException("substring: min index " + String(min) + " is greater than max index " + String(max));
      }
      if(jsnums.lessThan(min, 0, NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException("substring: min index " + String(min) + " is less than 0");
      }
      if(jsnums.greaterThan(max, string_length(s), NumberErrbacks)) {
        thisRuntime.ffi.throwMessageException("substring: max index " + String(max) + " is larger than the string length " + String(string_length(s)));
      }
      return thisRuntime.makeString(s.substring(jsnums.toFixnum(min, NumberErrbacks), 
                                                jsnums.toFixnum(max, NumberErrbacks)));
    }
    var string_replace = function(s, find, replace) {
      if (arguments.length !== 3) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-replace"], 3, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkString(find);
      thisRuntime.checkString(replace);
      return thisRuntime.makeString(s.split(find).join(replace));
    }

    var string_equals = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-equals"], 2, $a); }
      thisRuntime.checkString(l);
      thisRuntime.checkString(r);
      return thisRuntime.makeBoolean(l === r);
    }
    var string_append = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-append"], 2, $a); }
      thisRuntime.checkString(l);
      thisRuntime.checkString(r);
      return thisRuntime.makeString(l.concat(r));
    }
    var string_contains = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-contains"], 2, $a); }
      thisRuntime.checkString(l);
      thisRuntime.checkString(r);
      return thisRuntime.makeBoolean(l.indexOf(r) !== -1);
    }
    var string_length = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-length"], 1, $a); }
      thisRuntime.checkString(s);
      return thisRuntime.makeNumber(s.length);
    }
    var string_isnumber = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-isnumber"], 1, $a); }
      checkString(s);
      var num = jsnums.fromString(s, NumberErrbacks);
      if(num !== false) { return true; }
      else { return false; }
    }
    var string_tonumber = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-tonumber"], 1, $a); }
      thisRuntime.checkString(s);
      var num = jsnums.fromString(s, NumberErrbacks);
      if(num !== false) {
        return makeNumberBig(/**@type {Bignum}*/ (num));
      }
      else {
        return makeNothing();
      }
    }
    var string_to_number = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-to-number"], 1, $a); }
      thisRuntime.checkString(s);
      var num = jsnums.fromString(s, NumberErrbacks);
      if(num !== false) {
        return thisRuntime.ffi.makeSome(makeNumberBig(/**@type {Bignum}*/ (num)));
      }
      else {
        return thisRuntime.ffi.makeNone();
      }
    }
    var string_repeat = function(s, n) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-repeat"], 2, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkNumber(n);
      var resultStr = "";
      // TODO(joe): loop up to a fixnum?
      for(var i = 0; i < jsnums.toFixnum(n, NumberErrbacks); i++) {
        resultStr += s;
      }
      return thisRuntime.makeString(resultStr);
    }
    var string_split_all = function(s, splitstr) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-split-all"], 2, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkString(splitstr);

      return thisRuntime.ffi.makeList(s.split(splitstr).map(thisRuntime.makeString));
    }
    var string_split = function(s, splitstr) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-split"], 2, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkString(splitstr);

      var idx = s.indexOf(splitstr);
      if (idx === -1)
        return thisRuntime.ffi.makeList([thisRuntime.makeString(s)]);
      else
        return thisRuntime.ffi.makeList([thisRuntime.makeString(s.slice(0, idx)),
                                         thisRuntime.makeString(s.slice(idx + splitstr.length))]);
    }
    var string_charat = function(s, n) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-char-at"], 2, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkNumber(n);
      if(!jsnums.isInteger(n) || n < 0) {
        thisRuntime.ffi.throwMessageException("string-char-at: expected a positive integer for the index, but got " + n);
      }
      if(n > (s.length - 1)) { thisRuntime.ffi.throwMessageException("string-char-at: index " + n + " is greater than the largest index the string " + s); }

      //TODO: Handle bignums that are beyond javascript
      return thisRuntime.makeString(String(s.charAt(jsnums.toFixnum(n, NumberErrbacks))));
    }
    var string_toupper = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-toupper"], 1, $a); }
      thisRuntime.checkString(s);
      return thisRuntime.makeString(s.toUpperCase());
    }
    var string_tolower = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-tolower"], 1, $a); }
      thisRuntime.checkString(s);
      return thisRuntime.makeString(s.toLowerCase());
    }
    var string_explode = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-explode"], 1, $a); }
      thisRuntime.checkString(s);
      return thisRuntime.ffi.makeList(s.split("").map(thisRuntime.makeString));
    }
    var string_indexOf = function(s, find) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-index-of"], 2, $a); }
      thisRuntime.checkString(s);
      thisRuntime.checkString(find);
      return thisRuntime.makeNumberBig(s.indexOf(find));
    }
    var string_to_code_point = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-to-code-point"], 1, $a); }
      thisRuntime.checkString(s);
      if(s.length !== 1) {
        thisRuntime.ffi.throwMessageException("Expected a string of length exactly one, got " + s);
      }
      var charCode = codePointAt(s, 0);
      if(!(typeof charCode === "number") || (isNaN(charCode))) {
        thisRuntime.ffi.throwMessageException("Could not find code for character: ", s);
      }
      else {
        return charCode;
      }
    }
    var checkNatural = makeCheckType(function(val) {
      return thisRuntime.isNumber(val) && jsnums.isInteger(val) && jsnums.greaterThanOrEqual(val, 0, NumberErrbacks);
    }, "Natural Number");
    var string_from_code_point = function(c) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-from-code-point"], 1, $a); }
      checkNatural(c);
      var c = jsnums.toFixnum(c, NumberErrbacks);
      var ASTRAL_CUTOFF = 65535;
      if(c > ASTRAL_CUTOFF) {
        thisRuntime.ffi.throwMessageException("Invalid code point: " + c);
      }
      try {
        var s = fromCodePoint(c);
        if(typeof s === "string") { return s; }
        else {
          thisRuntime.ffi.throwMessageException("Invalid code point: " + c);
        }
      }
      catch(e) {
        thisRuntime.ffi.throwMessageException("Invalid code point: " + c);
      }
    }
    var string_to_code_points = function(s) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-to-code-points"], 1, $a); }
      thisRuntime.checkString(s);
      var returnArray = [];
      for(var i = 0; i < s.length; i++) {
        var charCode = string_to_code_point(s[i]);
        returnArray[i] = charCode;
      }
      return thisRuntime.ffi.makeList(returnArray);
    }
    var string_from_code_points = function(l) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["string-from-code-points"], 1, $a); }
      thisRuntime.checkList(l);
      var arr = thisRuntime.ffi.toArray(l);
      var retStr = "";
      for(var i = 0; i < arr.length; i++) {
        var c = arr[i];
        var s = string_from_code_point(c);
        retStr += s;
      }
      return retStr;
    }

    var bool_not = function(l) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["not"], 1, $a); }
      thisRuntime.checkBoolean(l);
      return thisRuntime.makeBoolean(!l);
    };

    var rng = seedrandom("ahoy, world!");

    var num_random = function(max) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-random"], 1, $a); }
      checkNumber(max);
      var f = rng();
      return makeNumber(Math.floor(jsnums.toFixnum(max, NumberErrbacks) * f));
    };

    var num_random_seed = function(seed) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-random-seed"], 1, $a); }
      checkNumber(seed);
      rng = seedrandom(String(seed));
      return nothing;
    }

    var num_equal = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-equals"], 2, $a); }
      thisRuntime.checkNumber(l);
      thisRuntime.checkNumber(r);
      return thisRuntime.makeBoolean(jsnums.equals(l, r, NumberErrbacks));
    };

    var num_within_abs = function(delta) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within"], 1, $a); }
      thisRuntime.checkNumber(delta);
      if (jsnums.lessThan(delta, 0, NumberErrbacks)) {
        NumberErrbacks.throwToleranceError('negative tolerance ' + delta);
      }
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["from within"], 2, $a); }
        thisRuntime.checkNumber(l);
        thisRuntime.checkNumber(r);
        return makeBoolean(jsnums.roughlyEquals(l, r, delta, NumberErrbacks));
      }, "num-within-abs(...)");
    }

    var num_within_rel = function(relTol) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["within-rel"], 1, $a); }
      thisRuntime.checkNumber(relTol);
      return makeFunction(function(l, r) {
        if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["from within-rel"], 2, $a); }
        thisRuntime.checkNumber(l);
        thisRuntime.checkNumber(r);
        return makeBoolean(jsnums.roughlyEqualsRel(l, r, relTol, NumberErrbacks));
      }, "num-within-rel(...)");
    }

    var num_max = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-max"], 2, $a); }
      thisRuntime.checkNumber(l);
      thisRuntime.checkNumber(r);
      if (jsnums.greaterThanOrEqual(l, r, NumberErrbacks)) { return l; } else { return r; }
    }

    var num_min = function(l, r) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-min"], 2, $a); }
      thisRuntime.checkNumber(l);
      thisRuntime.checkNumber(r);
      if (jsnums.lessThanOrEqual(l, r, NumberErrbacks)) { return l; } else { return r; }
    }

    var num_abs = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-abs"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.abs(n, NumberErrbacks));
    }

    var num_sin = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-sin"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.sin(n, NumberErrbacks));
    }
    var num_cos = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-cos"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.cos(n, NumberErrbacks));
    }
    var num_tan = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-tan"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.tan(n, NumberErrbacks));
    }
    var num_asin = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-asin"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.asin(n, NumberErrbacks));
    }
    var num_acos = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-acos"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.acos(n, NumberErrbacks));
    }
    var num_atan = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-atan"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.atan(n, NumberErrbacks));
    }

    var num_atan2 = function(y, x) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-atan"], 2, $a); }
      thisRuntime.checkNumber(y);
      thisRuntime.checkNumber(x);
      return thisRuntime.makeNumberBig(jsnums.atan2(y, x, NumberErrbacks));
    };

    var num_modulo = function(n, mod) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-modulo"], 2, $a); }
      thisRuntime.checkNumber(n);
      thisRuntime.checkNumber(mod);
      return thisRuntime.makeNumberBig(jsnums.modulo(n, mod, NumberErrbacks));
    }
    var num_truncate = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-truncate"], 1, $a); }
      thisRuntime.checkNumber(n);
      if (jsnums.greaterThanOrEqual(n, 0, NumberErrbacks)) {
        return thisRuntime.makeNumberBig(jsnums.floor(n, NumberErrbacks));
      } else {
        return thisRuntime.makeNumberBig(jsnums.ceiling(n, NumberErrbacks));
      }
    }
    var num_sqrt = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-sqrt"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.sqrt(n, NumberErrbacks));
    }
    var num_sqr = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-sqr"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.sqr(n, NumberErrbacks));
    }
    var num_ceiling = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-ceiling"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.ceiling(n, NumberErrbacks));
    }
    var num_floor = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-floor"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.floor(n, NumberErrbacks));
    }
    var num_round = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-round"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.round(n, NumberErrbacks));
    }
    var num_round_even = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-round-even"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.roundEven(n, NumberErrbacks));
    }
    var num_log = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-log"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.log(n, NumberErrbacks));
    }
    var num_exp = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-exp"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.exp(n, NumberErrbacks));
    }
    var num_exact = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-exact"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.toRational(n, NumberErrbacks));
    }
    var num_to_rational = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-to-rational"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.toRational(n, NumberErrbacks));
    }
    var num_to_roughnum = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-to-roughnum"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.toRoughnum(n, NumberErrbacks));
    }
    var num_to_fixnum = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-to-fixnum"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeNumberBig(jsnums.toFixnum(n, NumberErrbacks));
    }
    var num_is_integer = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-integer"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isInteger(n))
    }
    var num_is_rational = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-rational"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isRational(n))
    }
    var num_is_roughnum = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-roughnum"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isRoughnum(n))
    }
    var num_is_positive = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-positive"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isPositive(n))
    }
    var num_is_negative = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-negative"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isNegative(n))
    }
    var num_is_non_positive = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-non-positive"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isNonPositive(n))
    }
    var num_is_non_negative = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-non-negative"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(jsnums.isNonNegative(n))
    }
    var num_is_fixnum = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-is-fixnum"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeBoolean(typeof n === "number");
    }
    var num_expt = function(n, pow) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-expt"], 2, $a); }
      thisRuntime.checkNumber(n);
      thisRuntime.checkNumber(pow);
      return thisRuntime.makeNumberBig(jsnums.expt(n, pow, NumberErrbacks));
    }
    var num_tostring = function(n) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-tostring"], 1, $a); }
      thisRuntime.checkNumber(n);
      return thisRuntime.makeString(String(n));
    }
    var num_tostring_digits = function(n, digits) {
      if (arguments.length !== 2) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["num-tostring-digits"], 2, $a); }
      thisRuntime.checkNumber(n);
      thisRuntime.checkNumber(digits);
      return thisRuntime.makeString(jsnums.toStringDigits(n, digits, NumberErrbacks));
    }
    function random(max) {
      if (arguments.length !== 1) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["random"], 1, $a); }
      thisRuntime.checkNumber(max);
      return num_random(max);
    }

    var time_now = function() {
      if (arguments.length !== 0) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["time-now"], 0, $a); }
      return new Date().getTime();
    }

    function loadBuiltinModules(modules, startName, withModules) {
      function loadWorklist(startMod) {
        function addMod(curMod, curPath, curName) {
          if (curPath.filter(function(b) { return b.name === curMod.name; }).length > 0) {
            CONSOLE.error("Module cycle: ", curMod, curPath);
            throw new Error("Module cycle in loadBuiltinModules");
          }
          if (typeof curMod === "function") {
            return [{mod: {
                theModule: curMod,
                name: curName,
                dependencies: []
              },
              path: curPath
            }];
          }
          var curDeps = curMod.dependencies;
          var depMods = curDeps.map(function(d) {
            //CONSOLE.error("Going to load: ", d);
            if(d.protocol === "legacy-path") {
              return { dname: d.args[0], modinfo: require(d.args[0]) };
            }
            else {
              if(d.name.indexOf("/") !== -1) {
                CONSOLE.error("Builtin names should not contain paths: ", d.name)
                throw d;
              }
              return { dname: d.name, modinfo: require("trove/" + d.name) };
            }
          });
          var tocomp = {mod: curMod, name: curName, path: curPath};
          return depMods.reduce(function(acc, elt) {
            //CONSOLE.error("elt to reduce on: ", elt);
            return addMod(elt.modinfo, curPath.concat([tocomp]), elt.dname).concat(acc);
          }, [tocomp])
        }
        return addMod(startMod, []);
      }
      var wl = loadWorklist({name: startName, dependencies: modules });
      var finalModMap = {};
      function getName(d) {
        if(d.protocol === "legacy-path") {
          return d.args[0];
        }
        else {
          return d.name;
        }
      }
      function isProbablyOldStyleRNSFunction(moduleFun) {
        var len2 = moduleFun.length === 2;
        var funSpace = String(moduleFun).indexOf("function (R") === 0;
        var funNoSpace = String(moduleFun).indexOf("function(R") === 0;
        return len2 && (funSpace || funNoSpace);
      }
      var rawModules = wl.forEach(function(m) {
        if(m.mod.name === startName) { return; }
        // NOTE(joe): yes this is depressing.  I know.
        if(isProbablyOldStyleRNSFunction(m.mod.theModule)) { // Already a runtime/namespace function
          var thisRawMod = m.mod.theModule;
        }
        else {
          var rawDeps = m.mod.dependencies.map(function(d) {
            return finalModMap[getName(d)];
          });
          var thisRawMod = m.mod.theModule.apply(null, rawDeps);
        }
        finalModMap[m.name] = thisRawMod;
      });
      var originalOrderRawModules = modules.map(function(m) {
        var mod = finalModMap[getName(m)];
        if(typeof mod === "undefined") {
          //CONSOLE.error("FinalModMap: ", finalModMap);
          throw Error("Unable to find module: " + getName(m));
        }
        return mod;
      });
      return loadModulesNew(thisRuntime.namespace, originalOrderRawModules, withModules);
    }

    function loadModule(module, runtime, namespace, withModule) {
      var modstring = String(module).substring(0, 500);
      return thisRuntime.safeCall(function() {
        if(typeof module === "function") {
          return module(thisRuntime, namespace);
        }
        else if (typeof module === "object") {
          if(module.dependencies === undefined) {
            // NOTE(joe): Catches already-initialized modules.  Needs to
            // be tracked down.  Putting the log back in detects them.
            //  CONSOLE.error("Undefined dependencies remain: ", module);
            return module;
          }
          if(module.oldDependencies) {
            //CONSOLE.error("Loading old deps: ", module.oldDependencies);
            var innerModule = module.theModule.apply(null, module.oldDependencies);
            //CONSOLE.error(String(innerModule).substring(0, 200));
            return innerModule(thisRuntime, namespace);
          }
          else {
            //CONSOLE.error("About to loadBuiltin modules: ", module.name, module.dependencies);
            return loadBuiltinModules(module.dependencies, module.name,
                  function() {
                    var innerModule = module.theModule.apply(null, Array.prototype.slice.call(arguments));
                    //CONSOLE.error(String(innerModule).substring(0, 200));
                    return innerModule(thisRuntime, namespace);
                  });

            //  CONSOLE.error("Cannot load this module: ", module);
          }
          /*
            return loadBuiltinModules(module.dependencies, module.name,
            function() {
            var innerModule = module.theModule.apply(null, Array.prototype.slice.call(arguments));
            return innerModule(thisRuntime, namespace);
            });

          */
        }
        else {
          CONSOLE.log("Unkown module type: ", module);
        }
      },
      withModule, "loadModule(" + modstring.substring(0, 70) + ")");
    }
    function loadJSModules(namespace, modules, withModules) {
      function loadModulesInt(toLoad, loaded) {
        if(toLoad.length > 0) {
          var nextMod = toLoad.pop();
          return loadModule(nextMod, thisRuntime, namespace, function(m) {
            return safeTail(function() {
              loaded.unshift(m);
              return loadModulesInt(toLoad, loaded);
            });
          });
        }
        else {
          return safeTail(function() { return withModules.apply(null, loaded); });
        }
      }
      var modulesCopy = modules.slice(0, modules.length);
      return loadModulesInt(modulesCopy, []);
    }
    function loadModulesNew(namespace, modules, withModules) {
      return loadJSModules(namespace, modules, function(/* args */) {
        var ms = new Array(arguments.length);
        for (var i = 0; i < arguments.length; i++) ms[i] = arguments[i];
        function wrapMod(m) {
          //CONSOLE.error("The module is: ", m);
          if (typeof m === 'undefined') {
            CONSOLE.error("Undefined module in this list: ", modules, String(withModules).slice(0, 500));
            throw new Error("Undefined module")
          }
          // NOTE(joe): These following tests should be coalesced into one
          // type that covers the JS and Pyret cases (and unifies the Pyret
          // representations for typed and untyped)
          else if (typeof m === "object" && !isObject(m)) {
            return m;
          }
          // NOTE(joe): Can we remove this next line?
          else if (hasField(m, "values")) {
            return m;
          }
          else if (hasField(m, "provide-plus-types")) {
            return getField(m, "provide-plus-types");
          }
          else {
            console.error("Got unrecognized module return format in loadModulesNew ", m);
            throw new Error("Got unrecognized module return format in loadModulesNew ",
                            JSON.stringify(m, null, "  "));
          }
        };
        var wrappedMods = ms.map(wrapMod);
        return withModules.apply(null, wrappedMods);
      });
    }
    function loadModules(namespace, modules, withModules) {
      return loadModulesNew(namespace, modules, function(/* varargs */) {
        var ms = new Array(arguments.length);
        for (var i = 0; i < arguments.length; i++) ms[i] = arguments[i];
        return safeTail(function() {
          return withModules.apply(null, ms.map(function(m) { return getField(m, "values"); }));
        });
      });
    }

    function depToString(d) {
      if(d["import-type"] === "builtin") {
        return d["import-type"] + "(" + d.name + ")";
      }
      else if(d["import-type"] === "dependency") {
        return d["protocol"] + "(" + d["args"].join(", ") + ")";
      }
      else {
        throw new Error("Unknown dependency description: ", d);
      }
    }

    function getExported(m) {
      if(isJSModReturn(m)) {
        return m.jsmod;
      }
      else {
        return thisRuntime.getField(m, "provide-plus-types");
      }
    }

    // EFFECT: adds modules to realm
    function runStandalone(staticMods, realm, depMap, toLoad, postLoadHooks) {
      // Assume that toLoad is in dependency order, so all of their requires are
      // already instantiated
      if(toLoad.length == 0) {
        return {
          "complete": "runStandalone completed successfully" ,
        };
      }
      else {
        var uri = toLoad[0];
        var mod = staticMods[uri];
        // CONSOLE.log(uri, mod);

        var reqs = mod.requires;
        if(depMap[uri] === undefined) {
          throw new Error("Module has no entry in depmap: " + uri);
        }
        var reqInstantiated = reqs.map(function(d) {
          var duri = depMap[uri][depToString(d)];
          if(duri === undefined) {
            throw new Error("Module not found in depmap: " + depToString(d) + " while loading " + uri);
          }
          if(realm[duri] === undefined) {
            throw new Error("Module not loaded yet: " + depToString(d) + " while loading " + uri);
          }
          return getExported(realm[duri]);
        });

        return thisRuntime.safeCall(function() {
          if (mod.nativeRequires.length === 0) {
            // CONSOLE.log("Nothing to load, skipping stack-pause");
            return mod.nativeRequires;
          } else {
            thisRuntime.pauseStack(function(restarter) {
              // CONSOLE.log("About to load: ", mod.nativeRequires);
              require(mod.nativeRequires, function(/* varargs */) {
                var nativeInstantiated = Array.prototype.slice.call(arguments);
                //CONSOLE.log("Loaded: ", nativeInstantiated);
                restarter.resume(nativeInstantiated);
              });
            });
          }
        }, function(natives) {
          function continu() {
            return thisRuntime.safeTail(function() {
              return runStandalone(staticMods, realm, depMap, toLoad.slice(1), postLoadHooks);
            });
          }
          if(realm[uri]) {
            return continu();
          }
          return thisRuntime.safeCall(function() {
            return mod.theModule.apply(null, [thisRuntime, thisRuntime.namespace, uri].concat(reqInstantiated).concat(natives));
          },
          function(r) {
            // CONSOLE.log("Result from module: ", r);
            realm[uri] = r;
            if(uri in postLoadHooks) {
              return thisRuntime.safeCall(function() {
                return postLoadHooks[uri](r);
              }, function(_) {
                return continu();
              }, "runStandalone, postLoadHook for " + uri);
            } else {
              return continu();
            }
          }, "runStandalone, loading " + uri);
        }, "runStandalone, native-dep loading " + uri);
      }
    }

    function JSModuleReturn(jsmod) {
      this.jsmod = jsmod;
    }
    function isJSModReturn(v) {
      return v instanceof JSModuleReturn;
    }
    function makeJSModuleReturn(jsmod) {
      return new JSModuleReturn(jsmod);
    }

    function makeModuleReturn(values, types) {
      return thisRuntime.makeObject({
        "provide-plus-types": thisRuntime.makeObject({
          "values": thisRuntime.makeObject(values),
          "types": types
        })
      });
    }

    function makeBrandPredicate(loc, brand, predName) {
      return makeFunction(function(val) {
        checkArityC(loc, 1, arguments);
        return hasBrand(val, brand);
      }, predName + "-pred");
    }
    function makeVariantConstructor(
      loc,
      checkAnnsThunk,
      checkArgs,
      checkLocs,
      checkMuts,
      allArgs,
      allMuts,
      base,
      brands,
      reflName,
      reflRefFields,
      reflFields,
      constructor) {
      function quote(s) { if (typeof s === "string") { return "'" + s + "'"; } else { return s; } }
      function constArr(arr) { return "[" + arr.map(quote).join(",") + "]"; }

      function makeConstructor() {
        var argNames = constructor.$fieldNames;
        var hasRefinement = false;
        var checkAnns = checkAnnsThunk();
        checkAnns.forEach(function(a) {
          if(!isCheapAnnotation(a)) {
            hasRefinement = true;
          }
        });
        var constructorBody =
          "var dict = thisRuntime.create(base);\n";
        allArgs.forEach(function(a, i) {
          if(allMuts[i]) {
            var checkIndex = checkArgs.indexOf(a);
            if(checkIndex >= 0) {
              constructorBody += "dict['" + argNames[i] + "'] = thisRuntime.makeUnsafeSetRef(checkAnns[" + checkIndex + "], " + a + ", checkLocs[" + checkIndex + "]);\n";
            }
            else {
              constructorBody += "dict['" + argNames[i] + "'] = thisRuntime.makeUnsafeSetRef(thisRuntime.Any, " + a + ", " + constArr(loc) + ");\n";
            }
          }
          else {
            constructorBody += "dict['" + argNames[i] + "'] = " + a + ";\n";
          }
        });
        constructorBody +=
          "return thisRuntime.makeDataValue(dict, brands, " + quote(reflName) + ", reflRefFields, reflFields,"  + allArgs.length + ", " + constArr(allMuts) + ", constructor);"

        //var arityCheck = "thisRuntime.checkArityC(loc, " + allArgs.length + ", arguments);";
        var arityCheck = "var $l = arguments.length; if($l !== 1) { var $t = new Array($l); for(var $i = 0;$i < $l;++$i) { $t[$i] = arguments[$i]; } thisRuntime.checkArityC(L[7],1,$t); }";

        var checksPlusBody = "";
        if(hasRefinement) {
          checksPlusBody = "return thisRuntime.checkConstructorArgs2(checkAnns, [" + checkArgs.join(",") + "], checkLocs, " + constArr(checkMuts) + ", function() {\n" +
            constructorBody + "\n" +
          "});";
        }
        else {
          checkArgs.forEach(function(a, i) {
            if(checkMuts[i]) {
              checksPlusBody += "thisRuntime.isGraphableRef(" + checkArgs[i] + ") || thisRuntime._checkAnn(checkLocs[" + i + "], checkAnns[" + i + "], " + checkArgs[i] + ");";
            }
            else {
              checksPlusBody += "thisRuntime._checkAnn(checkLocs[" + i + "], checkAnns[" + i + "], " + checkArgs[i] + ");";
            }
          });
          checksPlusBody += constructorBody;
        }

        var constrFun = "return function(" + allArgs.join(",") + ") {\n" +
          "if(arguments.length !== " + allArgs.length + ") {\n" +
          "thisRuntime.checkConstructorArityC(" + constArr(loc) + ", " + quote(reflName) + ", " + allArgs.length + ", thisRuntime.cloneArgs.apply(null, arguments));\n" +
          "}\n" +
          checksPlusBody + "\n" +
          "}";
        //CONSOLE.log(constrFun);

        var outerArgs = ["thisRuntime", "checkAnns", "checkLocs", "brands", "reflRefFields", "reflFields", "constructor", "base"];
        var outerFun = Function.apply(null, outerArgs.concat(["\"use strict\";\n" + constrFun]));
        return outerFun(thisRuntime, checkAnns, checkLocs, brands, reflRefFields, reflFields, constructor, base);
      }

      //CONSOLE.log(String(outerFun));

      var funToReturn = makeFunction(function() {
        var theFun = makeConstructor();
        funToReturn.app = theFun;
        //CONSOLE.log("Calling constructor ", quote(reflName), arguments);
        //CONSOLE.trace();
        var res = theFun.apply(null, arguments)
        //CONSOLE.log("got ", res);
        return res;
      }, reflName);
      funToReturn.$constrFor = reflName;
      return funToReturn;
    }

    function cloneArgs(/*arguments*/) {
      var args = new Array(arguments.length);
      for(var i = 0; i < args.length; ++i) {
        //i is always valid index in the arguments object
        args[i] = arguments[i];
      }
      return args;
    }

    function addModuleToNamespace(namespace, valFields, typeFields, moduleObj) {
      var newns = Namespace.namespace({});
      valFields.forEach(function(vf) {
        newns = newns.set(vf, getField(getField(moduleObj, "values"), vf));
      });
      typeFields.forEach(function(tf) {
        newns = newns.setType(tf, getField(moduleObj, "types")[tf]);
      });
      return namespace.merge(newns);
    }

    // Filled in by makePrimAnn
    var runtimeTypeBindings = {};

    /** type {!PBase} */
    var builtins = makeObject({
      'list-to-raw-array': makeFunction(function(l) { return thisRuntime.ffi.toArray(l); }, "list-to-raw-array"),
      'has-field': makeFunction(hasField, "has-field"),
      'raw-each-loop': makeFunction(eachLoop, "raw-each-loop"),
      'raw-list-map': makeFunction(raw_list_map, "raw-list-map"),
      'raw-list-filter': makeFunction(raw_list_filter, "raw-list-filter"),
      'raw-list-fold': makeFunction(raw_list_fold, "raw-list-fold"),
      'current-checker': makeFunction(function() {
        if (arguments.length !== 0) { var $a=new Array(arguments.length); for (var $i=0;$i<arguments.length;$i++) { $a[$i]=arguments[$i]; } throw thisRuntime.ffi.throwArityErrorC(["current-checker"], 0, $a); }
        return getParam("current-checker");
      }, "current-checker"),
      'trace-value': makeFunction(traceValue, "trace-value")
    });


    function traceValue(loc, val) {
      if(!thisRuntime.hasParam("onTrace")) { return val; }
      var callback = thisRuntime.getParam("onTrace");
      var uri = loc[0];
      if (typeof callback === 'function') {
        return thisRuntime.safeCall(function() {
          return callback(loc, val, uri);
        }, function(_) {
          return val;
        });
      }
      else {
        thisRuntime.ffi.throwMessageException("onTrace parameter was not a function: " + callback);
      }
    }

    function makeReactor(init, handlersDict) {
      if(!thisRuntime.hasParam("makeReactor")) { thisRuntime.ffi.throwMessageException("No reactor constructor provided"); }
      return thisRuntime.getParam("makeReactor")(init, handlersDict);
    }

    var runtimeNamespaceBindings = {
      'torepr': torepr,
      'to-repr': torepr,
      'tostring': tostring,
      'to-string': tostring,
      'test-print': print,
      'print': print,
      'display': display,
      'print-error': print_error,
      'display-error': display_error,
      'brander': brander,
      'raise': makeFunction(raiseJSJS, "raise"), //raiseUserException),
      'builtins': builtins,
      'nothing': nothing,
      'is-nothing': makeFunction(isNothing, "is-nothing"),
      'is-number': makeFunction(isNumber, "is-number"),
      'is-boolean': makeFunction(isBoolean, "is-boolean"),
      'is-string': makeFunction(isString, "is-string"),
      'is-function': makeFunction(isFunction, "is-function"),
      'is-object': makeFunction(isObject, "is-object"),
      'is-raw-array': makeFunction(isArray, "is-raw-array"),
      'is-tuple': makeFunction(isTuple, "is-tuple"),
      // NOTE(joe): this one different because the predicate is added when Table is loaded
      // (see handalone.js)
      'is-table': makeFunction(function(v) {
        return thisRuntime.isTable(v); 
      }, "is-tuple"),

      'run-task': makeFunction(execThunk, "run-task"),

      'gensym': gensym,
      'random': makeFunction(random, "random"),

      '_plus': makeFunction(plus, "_plus"),
      '_minus': makeFunction(minus, "_minus"),
      '_times': makeFunction(times, "_times"),
      '_divide': makeFunction(divide, "_divide"),
      '_lessthan': makeFunction(lessthan, "_lessthan"),
      '_greaterthan': makeFunction(greaterthan, "_greaterthan"),
      '_greaterequal': makeFunction(greaterequal, "_greaterequal"),
      '_lessequal': makeFunction(lessequal, "_lessequal"),

      'num-random': makeFunction(num_random, "num-random"),
      'num-random-seed': makeFunction(num_random_seed, "num-random-seed"),
      'num-max': makeFunction(num_max, "num-max"),
      'num-min': makeFunction(num_min, "num-min"),
      'num-equal': makeFunction(num_equal, "num-equal"),
      'num-within-abs': makeFunction(num_within_abs, "num-within-abs"),
      'num-within-rel': makeFunction(num_within_rel, "num-within-rel"),
      'num-abs': makeFunction(num_abs, "num-abs"),
      'num-sin': makeFunction(num_sin, "num-sin"),
      'num-cos': makeFunction(num_cos, "num-cos"),
      'num-tan': makeFunction(num_tan, "num-tan"),
      'num-asin': makeFunction(num_asin, "num-asin"),
      'num-acos': makeFunction(num_acos, "num-acos"),
      'num-atan': makeFunction(num_atan, "num-atan"),
      'num-atan2': makeFunction(num_atan2, "num-atan2"),
      'num-modulo': makeFunction(num_modulo, "num-modulo"),
      'num-truncate': makeFunction(num_truncate, "num-truncate"),
      'num-sqrt': makeFunction(num_sqrt, "num-sqrt"),
      'num-sqr': makeFunction(num_sqr, "num-sqr"),
      'num-ceiling': makeFunction(num_ceiling, "num-ceiling"),
      'num-floor': makeFunction(num_floor, "num-floor"),
      'num-round': makeFunction(num_round, "num-round"),
      'num-round-even': makeFunction(num_round_even, "num-round-even"),
      'num-log': makeFunction(num_log, "num-log"),
      'num-exp': makeFunction(num_exp, "num-exp"),
      'num-exact': makeFunction(num_exact, "num-exact"),
      'num-to-rational': makeFunction(num_to_rational, "num-to-rational"),
      'num-to-roughnum': makeFunction(num_to_roughnum, "num-to-roughnum"),
      'num-to-fixnum': makeFunction(num_to_fixnum, "num-to-fixnum"),
      'num-is-integer': makeFunction(num_is_integer, "num-is-integer"),
      'num-is-rational': makeFunction(num_is_rational, "num-is-rational"),
      'num-is-roughnum': makeFunction(num_is_roughnum, "num-is-roughnum"),
      'num-is-positive': makeFunction(num_is_positive, "num-is-positive"),
      'num-is-negative': makeFunction(num_is_negative, "num-is-negative"),
      'num-is-non-positive': makeFunction(num_is_non_positive, "num-is-non-positive"),
      'num-is-non-negative': makeFunction(num_is_non_negative, "num-is-non-negative"),
      'num-is-fixnum': makeFunction(num_is_fixnum, "num-is-fixnum"),
      'num-expt': makeFunction(num_expt, "num-expt"),
      'num-tostring': makeFunction(num_tostring, "num-tostring"),
      'num-to-string': makeFunction(num_tostring, "num-to-string"),
      'num-to-string-digits': makeFunction(num_tostring_digits, "num-to-string-digits"),

      'string-equal': makeFunction(string_equals, "string-equal"),
      'string-contains': makeFunction(string_contains, "string-contains"),
      'string-append': makeFunction(string_append, "string-append"),
      'string-length': makeFunction(string_length, "string-length"),
      'string-isnumber': makeFunction(string_isnumber, "string-isnumber"),
      'string-is-number': makeFunction(string_isnumber, "string-is-number"),
      'string-tonumber': makeFunction(string_tonumber, "string-tonumber"),
      'string-to-number': makeFunction(string_to_number, "string-to-number"),
      'string-repeat': makeFunction(string_repeat, "string-repeat"),
      'string-substring': makeFunction(string_substring, "string-substring"),
      'string-replace': makeFunction(string_replace, "string-replace"),
      'string-split': makeFunction(string_split, "string-split"),
      'string-split-all': makeFunction(string_split_all, "string-split-all"),
      'string-char-at': makeFunction(string_charat, "string-char-at"),
      'string-toupper': makeFunction(string_toupper, "string-toupper"),
      'string-to-upper': makeFunction(string_toupper, "string-to-upper"),
      'string-tolower': makeFunction(string_tolower, "string-tolower"),
      'string-to-lower': makeFunction(string_tolower, "string-to-lower"),
      'string-explode': makeFunction(string_explode, "string-explode"),
      'string-index-of': makeFunction(string_indexOf, "string-index-of"),
      'string-to-code-point': makeFunction(string_to_code_point, "string-to-code-point"),
      'string-from-code-point': makeFunction(string_from_code_point, "string-from-code-point"),
      'string-to-code-points': makeFunction(string_to_code_points, "string-to-code-points"),
      'string-from-code-points': makeFunction(string_from_code_points, "string-from-code-points"),

      'time-now': makeFunction(time_now, "time-now"),

      'raw-array-of': makeFunction(raw_array_of, "raw-array-of"),
      'raw-array-build': makeFunction(raw_array_build, "raw-array-build"),
      'raw-array-build-opt': makeFunction(raw_array_build_opt, "raw-array-build-opt"),
      'raw-array-get': makeFunction(raw_array_get, "raw-array-get"),
      'raw-array-set': makeFunction(raw_array_set, "raw-array-set"),
      'raw-array-length': makeFunction(raw_array_length, "raw-array-length"),
      'raw-array-to-list': makeFunction(raw_array_to_list, "raw-array-to-list"),
      'raw-array-fold': makeFunction(raw_array_fold, "raw-array-fold"),
      'raw-array-map': makeFunction(raw_array_map, "raw-array-map"),
      'raw-array-filter': makeFunction(raw_array_filter, "raw-array-filter"),
      'raw-array': raw_array_maker,
      'raw-each-loop': makeFunction(eachLoop, "raw-each-loop"),

      'not': makeFunction(bool_not, "not"),

      'ref-set'    : makeFunction(setRef, "ref-set"),
      'ref-get'    : makeFunction(getRef, "ref-get"),
      'ref-end-graph'   : makeFunction(refEndGraph, "ref-end-graph"),
      'ref-freeze' : makeFunction(freezeRef, "ref-freeze"),

      'identical3': identical3Py,
      'identical': identicalPy,
      'equal-now3': makeFunction(equalNow3, "equal-now3"),
      'equal-now': makeFunction(equalNow, "equal-now"),
      'equal-always3': makeFunction(equalAlways3, "equal-always3"),
      'equal-always': makeFunction(equalAlways, "equal-always"),

      'within-abs-now3' : makeFunction(equalWithinAbsNow3, "within-abs-now3"),
      'within-rel-now3' : makeFunction(equalWithinRelNow3, "within-rel-now3"),
      'within-abs3' : makeFunction(equalWithinAbs3, "within-abs3"),
      'within-rel3' : makeFunction(equalWithinRel3, "within-rel3"),
      'within-abs-now': makeFunction(equalWithinAbsNow, "within-abs-now"),
      'within-rel-now': makeFunction(equalWithinRelNow, "within-rel-now"),
      'within-abs': makeFunction(equalWithinAbs, "within-abs"),
      'within-rel': makeFunction(equalWithinRel, "within-rel"),

      'num-within': makeFunction(num_within_rel, "num-within"),
      'within-now3' : makeFunction(equalWithinRelNow3, "within-now3"),
      'within3' : makeFunction(equalWithinRel3, "within3"),
      'within-now': makeFunction(equalWithinRelNow, "within-now"),
      'within': makeFunction(equalWithinRel, "within"),

      'exn-unwrap': makeFunction(getExnValue, "exn-unwrap")

    };

    //Export the runtime
    //String keys should be used to prevent renaming
    var thisRuntime = {
      'run': run,
      'runThunk': runThunk,
      'execThunk': execThunk,
      'safeCall': safeCall,
      'safeThen': safeThen,
      'safeTail': safeTail,
      'eachLoop': eachLoop,
      'printPyretStack': printPyretStack,

      'traceValue': traceValue,


      'traceEnter': traceEnter,
      'traceExit': traceExit,
      'traceErrExit': traceErrExit,

      'isActivationRecord'   : isActivationRecord,
      'makeActivationRecord' : makeActivationRecord,

      'GAS': INITIAL_GAS,
      'INITIAL_GAS': INITIAL_GAS,

      'NumberErrbacks': NumberErrbacks,

      'namedBrander': namedBrander,

      'checkAnn': checkAnn,
      '_checkAnn': _checkAnn,
      'checkAnnArgs': checkAnnArgs,
      'checkArgsInternal': checkArgsInternal,
      'checkConstructorArgs': checkConstructorArgs,
      'checkConstructorArgs2': checkConstructorArgs2,
      'getDotAnn': getDotAnn,
      'makePredAnn': makePredAnn,
      'makePrimitiveAnn': makePrimitiveAnn,
      'makeBranderAnn': makeBranderAnn,
      'makeRecordAnn': makeRecordAnn,
      'makeTupleAnn': makeTupleAnn,

      'makeCont'    : makeCont,
      'isCont'      : isCont,
      'makePause'   : makePause,
      'isPause'     : isPause,

      'pauseStack'  : pauseStack,
      'schedulePause'  : schedulePause,
      'breakAll' : breakAll,

      'getField'         : getField,
      'getFieldLoc'      : getFieldLoc,
      'getFieldRef'      : getFieldRef,
      'getFields'        : getFields,
      'getColonField'    : getColonField,
      'getColonFieldLoc' : getColonFieldLoc,
      'getTuple'         : getTuple,
      'checkTupleBind'   : checkTupleBind,
      'extendObj'        : extendObj,

      'hasBrand' : hasBrand,

      'isPyretTrue' : isPyretTrue,
      'isPyretFalse' : isPyretFalse,

      'isBase'      : isBase,
      'isNothing'   : isNothing,
      'isNumber'    : isNumber,
      'isRoughnum'  : jsnums.isRoughnum,
      'isString'    : isString,
      'isBoolean'   : isBoolean,
      'isFunction'  : isFunction,
      'isMethod'    : isMethod,
      'isTuple'     : isTuple,
      'isObject'    : isObject,
      'isDataValue' : isDataValue,
      'isRef'       : isRef,
      'isOpaque'    : isOpaque,
      'isPyretVal'  : isPyretVal,

      'makePyretFailException': makePyretFailException,

      'isSuccessResult' : isSuccessResult,
      'makeSuccessResult' : makeSuccessResult,
      'isFailureResult' : isFailureResult,
      'makeFailureResult' : makeFailureResult,
      'isPyretException' : isPyretException,

      'makeNothing'  : makeNothing,
      'makeNumber'   : makeNumber,
      'makeNumberBig'   : makeNumberBig,
      'makeNumberFromString'   : makeNumberFromString,
      'makeBoolean'  : makeBoolean,
      'makeString'   : makeString,
      'makeFunction' : makeFunction,
      'makeMethod'   : makeMethod,
      'makeMethod0'   : makeMethod0,
      'makeMethod1'   : makeMethod1,
      'makeMethod2'   : makeMethod2,
      'makeMethod3'   : makeMethod3,
      'makeMethod4'   : makeMethod4,
      'makeMethod5'   : makeMethod5,
      'makeMethod6'   : makeMethod6,
      'makeMethod7'   : makeMethod7,
      'makeMethod8'   : makeMethod8,
      'makeMethodN'   : makeMethodN,
      'makeMethodFromFun' : makeMethodFromFun,
      'callIfPossible0' : callIfPossible0,
      'callIfPossible1' : callIfPossible1,
      'callIfPossible2' : callIfPossible2,
      'callIfPossible3' : callIfPossible3,
      'callIfPossible4' : callIfPossible4,
      'callIfPossible5' : callIfPossible5,
      'callIfPossible6' : callIfPossible6,
      'callIfPossible7' : callIfPossible7,
      'callIfPossible8' : callIfPossible8,
      'makeTuple' : makeTuple,
      'makeObject'   : makeObject,
      'makeArray' : makeArray,
      'makeArrayN' : function(n) { return new Array(n); },
      'checkArrayIndex': checkArrayIndex,
      'makeBrandedObject'   : makeBrandedObject,
      'makeGraphableRef' : makeGraphableRef,
      'makeRef' : makeRef,
      'makeUnsafeSetRef' : makeUnsafeSetRef,
      'makeVariantConstructor': makeVariantConstructor,
      'makeDataValue': makeDataValue,
      'makeMatch': makeMatch,
      'makeOpaque'   : makeOpaque,

      'derefField': derefField,

      'checkRefAnns' : checkRefAnns,

      'isGraphableRef' : isGraphableRef,
      'isRefGraphable' : isRefGraphable,
      'isRefFrozen' : isRefFrozen,
      'isRefSet' : isRefSet,
      'setRef' : setRef,
      'unsafeSetRef' : unsafeSetRef,
      'getRef' : getRef,
      'refEndGraph' : refEndGraph,
      'addRefAnn' : addRefAnn,
      'addRefAnns' : addRefAnns,
      'freezeRef' : freezeRef,

      'plus': plus,
      'minus': minus,
      'times': times,
      'divide': divide,
      'lessthan': lessthan,
      'greaterthan': greaterthan,
      'greaterequal': greaterequal,
      'lessequal': lessequal,

      'num_max': num_max,
      'num_min': num_min,
      'num_abs': num_abs,
      'num_sin': num_sin,
      'num_cos': num_cos,
      'num_tan': num_tan,
      'num_asin': num_asin,
      'num_acos': num_acos,
      'num_atan': num_atan,
      'num_atan2': num_atan2,
      'num_modulo': num_modulo,
      'num_truncate': num_truncate,
      'num_sqrt': num_sqrt,
      'num_ceiling': num_ceiling,
      'num_floor': num_floor,
      'num_log': num_log,
      'num_exp': num_exp,
      'num_exact': num_exact,
      'num_is_integer': num_is_integer,
      'num_expt': num_expt,
      'num_tostring': num_tostring,
      'num_to_string': num_tostring,
      'num_tostring_digits': num_tostring_digits,

      'string_contains': string_contains,
      'string_append': string_append,
      'string_length': string_length,
      'string_isnumber': string_isnumber,
      'string_to_number': string_to_number,
      'string_tonumber': string_tonumber,
      'string_repeat': string_repeat,
      'string_substring': string_substring,
      'string_replace': string_replace,
      'string_split': string_split,
      'string_split_all': string_split_all,
      'string_charat': string_charat,
      'string_toupper': string_toupper,
      'string_tolower': string_tolower,
      'string_explode': string_explode,
      'string_indexOf': string_indexOf,

      'raw_array_of': raw_array_of,
      'raw_array_get': raw_array_get,
      'raw_array_obj_destructure': raw_array_obj_destructure,
      'raw_array_set': raw_array_set,
      'raw_array_concat': raw_array_concat,
      'raw_array_length': raw_array_length,
      'raw_array_to_list': raw_array_to_list,
      'raw_array_map': raw_array_map,
      'raw_array_map1': raw_array_map1,
      'raw_array_mapi': raw_array_mapi,
      'raw_array_filter': raw_array_filter,

      'not': bool_not,

      'equiv': sameJSPy,
      'identical3': identical3,
      'identical': identical,
      'equal_now3': equalNow3,
      'equal_now': equalNow,
      'equal_always3': equalAlways3,
      'equal_always': equalAlways,
      'combineEquality': combineEquality,

      'within': equalWithinRel, //?

      'makeReactor': makeReactor,

      'raise': raiseJSJS,

      'pyretTrue': pyretTrue,
      'pyretFalse': pyretFalse,

      'undefined': undefined,
      'create': Object.create,
      'cloneArgs': cloneArgs,

      'hasField' : hasField,

      'toReprJS' : toReprJS,
      'toRepr' : function(val) { return toReprJS(val, ReprMethods._torepr); },
      'ReprMethods' : ReprMethods,

      'wrap' : wrap,
      'unwrap' : unwrap,

      'checkWrapBoolean' : checkWrapBoolean,

      'checkString' : checkString,
      'checkNumber' : checkNumber,
      'checkBoolean' : checkBoolean,
      'checkObject' : checkObject,
      'checkFunction' : checkFunction,
      'checkMethod' : checkMethod,
      'checkArray' : checkArray,
      'checkOpaque' : checkOpaque,
      'checkPyretVal' : checkPyretVal,
      'checkArity': checkArity,
      'checkArityC': checkArityC,
      'checkConstructorArityC': checkConstructorArityC,
      'checkTuple' : checkTuple,
      'makeCheckType' : makeCheckType,
      'confirm'      : confirm,
      'makeMessageException'      : function(str) {
        console.error("You shouldn't be using this any more!\n");
        console.trace();
        throw new Error(str);
      },
      'serial' : Math.random(),
      'log': log,

      'nothing': nothing,

      'makeSrcloc': makeSrcloc,

      'loadModule' : loadModule,
      'loadModules' : loadModules,
      'loadModulesNew' : loadModulesNew,
      'loadBuiltinModules' : loadBuiltinModules,
      'loadJSModules' : loadJSModules,

      'runStandalone' : runStandalone,

      'makeJSModuleReturn' : makeJSModuleReturn,
      'makeModuleReturn' : makeModuleReturn,

      'addModuleToNamespace' : addModuleToNamespace,

      'globalModuleObject' : makeObject({
        "provide-plus-types": makeObject({
          "values": makeObject(runtimeNamespaceBindings),
          "types": runtimeTypeBindings
        })
      }),

      'modules' : Object.create(null),
      'setStdout': function(newStdout) {
        theOutsideWorld.stdout = newStdout;
      },
      'getParam' : getParam,
      'getParamOrSetDefault' : getParamOrSetDefault,
      'setParam' : setParam,
      'hasParam' : hasParam,
      'makeNone' : function() {
        return thisRuntime.ffi.makeNone();
      },
      'makeSome' : function(v) {
        return thisRuntime.ffi.makeSome(v);
      },
      'clearParam' : clearParam,
      'stdout' : theOutsideWorld.stdout,
      'stderr' : theOutsideWorld.stderr,
      'console' : CONSOLE,

      'makePrimAnn': makePrimAnn
    };

    makePrimAnn("Number", isNumber);
    makePrimAnn("Exactnum", jsnums.isRational);
    makePrimAnn("Roughnum", jsnums.isRoughnum);
    makePrimAnn("NumInteger", jsnums.isInteger);
    makePrimAnn("NumRational", jsnums.isRational);
    makePrimAnn("NumPositive", jsnums.isPositive);
    makePrimAnn("NumNegative", jsnums.isNegative);
    makePrimAnn("NumNonPositive", jsnums.isNonPositive);
    makePrimAnn("NumNonNegative", jsnums.isNonNegative);
    makePrimAnn("String", isString);
    makePrimAnn("Boolean", isBoolean);
    makePrimAnn("RawArray", isArray);
    makePrimAnn("Function", function(v) { return isFunction(v) || isMethod(v) });
    makePrimAnn("Method", isMethod);
    makePrimAnn("Nothing", isNothing);
    makePrimAnn("Object", isObject);
    makePrimAnn("Tuple", isTuple);
    makePrimAnn("Any", function() { return true; });

    thisRuntime.namespace = Namespace.namespace(runtimeNamespaceBindings);

    // NOTE(joe): This is a necessary intermediate step to run all the code in
    // base/ (which should not fail any contract checks), before actually
    // instantiating the contracts library for full-on checks
    thisRuntime["ffi"] = {
      contractOk: true,
      isOk: function() { return true; },
      throwMessageException: function(thing) {
        console.error("Dummy throwMessageException: " + thing);
      }
    };

    return thisRuntime;
  }

  return  {'makeRuntime' : makeRuntime};


});

requirejs(["s-expression","pyret-base/js/type-util","pyret-base/js/runtime"]);
define("program-require", function(){});

define("program", ["s-expression","pyret-base/js/type-util","pyret-base/js/runtime"], function() {
return {"staticModules":{"builtin://global":({
  requires: [ ],
  provides: {
    shorthands: {
      "AnyPred":  ["arrow", ["Any"], "Boolean"],
      "AnyPred2": ["arrow", ["Any", "Any"], "Boolean"],
      "NumPred":  ["arrow", ["Number"], "Boolean"],
      "NumPred2": ["arrow", ["Number", "Number"], "Boolean"],
      "NumBinop": ["arrow", ["Number", "Number"], "Number"],
      "NumUnop":  ["arrow", ["Number"], "Number"],
      "StrPred":  ["arrow", ["String"], "Boolean"],
      "StrPred2": ["arrow", ["String", "String"], "Boolean"],
      "StrBinop": ["arrow", ["String", "String"], "String"],
      "StrUnop":  ["arrow", ["String"], "String"],
      "tva":      ["tid", "a"],
      "tvb":      ["tid", "b"],
      "tvc":      ["tid", "c"],
      "tvd":      ["tid", "d"],
      "tve":      ["tid", "e"],
      "Equality": { tag: "name", 
                    origin: { "import-type": "uri", uri: "builtin://equality" },
                    name: "EqualityResult" }
    },
    values: {
      "nothing": "Nothing",
      "torepr": ["arrow", ["Any"], "String"],
      "to-repr": ["arrow", ["Any"], "String"],
      "tostring": ["arrow", ["Any"], "String"],
      "to-string": ["arrow", ["Any"], "String"],
      "not": ["arrow", ["Boolean"], "Boolean"],

      "is-nothing": "AnyPred",
      "is-number": "AnyPred",
      "is-string": "AnyPred",
      "is-boolean": "AnyPred",
      "is-object": "AnyPred",
      "is-function": "AnyPred",
      "is-raw-array": "AnyPred",
      "is-table": "AnyPred",
      "is-tuple": "AnyPred",

      // Array functions
      "raw-array":           ["forall", ["a"], ["Maker", "tva", ["RawArray", "tva"]]],
      "raw-array-get":       ["forall", ["a"], ["arrow", [["RawArray", "tva"], "Number"], "tva"]],
      "raw-array-set":       ["forall", ["a"], ["arrow", [["RawArray", "tva"], "Number", "tva"], 
                                                ["RawArray", "tva"]]],
      "raw-array-of":        ["forall", ["a"], ["arrow", ["tva", "Number"], ["RawArray", "tva"]]],
      "raw-array-build-opt": ["forall", ["a"], ["arrow", [["arrow", ["Number"], ["Option", "tva"]], "Number"],
                                                ["RawArray", "tva"]]],
      "raw-array-build":     ["forall", ["a"], ["arrow", [["arrow", ["Number"], "tva"], "Number"],
                                                ["RawArray", "tva"]]],
      "raw-array-length":    ["forall", ["a"], ["arrow", [["RawArray", "tva"]], "Number"]],
      "raw-array-to-list":   ["forall", ["a"], ["arrow", [["RawArray", "tva"]], ["List", "tva"]]],
      "raw-array-filter":    ["forall", ["a"], ["arrow", [["arrow", ["tva"], "Boolean"], ["RawArray", "tva"]], ["RawArray", "tva"]]],
      "raw-array-map":    ["forall", ["a", "b"], ["arrow", [["arrow", ["tva"], "tvb"], ["RawArray", "tva"]], ["RawArray", "tvb"]]],
      "raw-array-fold":      ["forall", ["a", "b"], ["arrow", [["arrow", ["tvb", "tva", "Number"], "tvb"], 
                                                               "tvb", ["RawArray", "tva"], "Number"], "tvb"]],

      // Equality functions

      "equal-always3": ["arrow", ["Any", "Any"], "Equality"],
      "equal-now3":    ["arrow", ["Any", "Any"], "Equality"],
      "identical3":    ["arrow", ["Any", "Any"], "Equality"],
      "equal-always": "AnyPred2",
      "equal-now": "AnyPred2",
      "identical": "AnyPred2",
      "within": ["arrow", ["Number"], "AnyPred2"],
      "within-abs": ["arrow", ["Number"], "AnyPred2"],
      "within-rel": ["arrow", ["Number"], "AnyPred2"],
      "within-now": ["arrow", ["Number"], "AnyPred2"],
      "within-abs-now": ["arrow", ["Number"], "AnyPred2"],
      "within-rel-now": ["arrow", ["Number"], "AnyPred2"],

      // Number functions

      "string-to-number": ["arrow", ["String"], ["Option", "Number"]],
      "num-is-integer": "NumPred",
      "num-is-rational": "NumPred",
      "num-is-roughnum": "NumPred",
      "num-is-positive": "NumPred",
      "num-is-negative": "NumPred",
      "num-is-non-positive": "NumPred",
      "num-is-non-negative": "NumPred",
      "num-is-fixnum": "NumPred",

      "num-min": "NumBinop",
      "num-max": "NumBinop",
      "num-equal": "NumPred2",
      "num-within": ["arrow", ["Number"], "NumPred2"],
      "num-within-abs": ["arrow", ["Number"], "NumPred2"],
      "num-within-rel": ["arrow", ["Number"], "NumPred2"],

      "num-abs": "NumUnop",
      "num-sin": "NumUnop",
      "num-cos": "NumUnop",
      "num-tan": "NumUnop",
      "num-asin": "NumUnop",
      "num-acos": "NumUnop",
      "num-atan": "NumUnop",
      "num-atan2": "NumBinop",

      "num-modulo": "NumBinop",

      "num-truncate": "NumUnop",
      "num-sqrt": "NumUnop",
      "num-sqr": "NumUnop",
      "num-ceiling": "NumUnop",
      "num-floor": "NumUnop",
      "num-round": "NumUnop",
      "num-round-even": "NumUnop",
      "num-log": "NumUnop",
      "num-exp": "NumUnop",
      "num-exact": "NumUnop",
      "num-to-rational": "NumUnop",
      "num-to-roughnum": "NumUnop",
      "num-to-fixnum": "NumUnop",

      "num-expt": "NumBinop",
      "num-tostring": ["arrow", ["Number"], "String"],
      "num-to-string": ["arrow", ["Number"], "String"],
      "num-to-string-digits": ["arrow", ["Number", "Number"], "String"],

      "random": "NumUnop",
      "num-random": "NumUnop",
      "num-random-seed": ["arrow", ["Number"], "Nothing"],

      // Time functions

      "time-now": ["arrow", [], "Number"],

      // String functions

      "gensym": ["arrow", [], "String"],
      "string-repeat": ["arrow", ["String", "Number"], "String"],
      "string-substring": ["arrow", ["String", "Number", "Number"], "String"],
      "string-toupper": "StrUnop",
      "string-to-upper": "StrUnop",
      "string-tolower": "StrUnop",
      "string-to-lower": "StrUnop",
      "string-append": "StrBinop",
      "string-equal": "StrPred2",
      "string-contains": "StrPred2",
      "string-isnumber": "StrPred",
      "string-is-number": "StrPred",
      "string-to-number": ["arrow", ["String"], ["Option", "Number"]],
      "string-length": ["arrow", ["String"], "Number"],
      "string-replace": ["arrow", ["String", "String", "String"], "String"],
      "string-char-at": ["arrow", ["String", "Number"], "String"],
      "string-to-code-point": ["arrow", ["String"], "Number"],
      "string-from-code-point": ["arrow", ["Number"], "String"],
      "string-to-code-points": ["arrow", ["String"], ["List", "Number"]],
      "string-from-code-points": ["arrow", [["List", "Number"]], "String"],
      "string-split": ["arrow", ["String", "String"], ["List", "String"]],
      "string-split-all": ["arrow", ["String", "String"], ["List", "String"]],
      "string-explode": ["arrow", ["String"], ["List", "String"]],
      "string-index-of": ["arrow", ["String", "String"], "Number"],

    },
    aliases: {
      "Any": "tany"
    },
    datatypes: {
      "Number": ["data", "Number", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "Exactnum": ["data", "Exactnum", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "Roughnum": ["data", "Roughnum", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "NumInteger": ["data", "NumInteger", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "NumRational": ["data", "NumRational", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "NumPositive": ["data", "NumPositive", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "NumNegative": ["data", "NumNegative", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "NumNonPositive": ["data", "NumNonPositive", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "NumNonNegative": ["data", "NumNonNegative", [], [], {
        "_plus": ["arrow", ["Number"], "Number"],
        "_times": ["arrow", ["Number"], "Number"],
        "_divide": ["arrow", ["Number"], "Number"],
        "_minus": ["arrow", ["Number"], "Number"],
        "_lessthan": ["arrow", ["Number"], "Boolean"],
        "_lessequal": ["arrow", ["Number"], "Boolean"],
        "_greaterthan": ["arrow", ["Number"], "Boolean"],
        "_greaterequal": ["arrow", ["Number"], "Boolean"]
      }],
      "String": ["data", "String", [], [], {
        "_plus": ["arrow", ["String"], "String"],
        "_lessthan": ["arrow", ["String"], "Boolean"],
        "_lessequal": ["arrow", ["String"], "Boolean"],
        "_greaterthan": ["arrow", ["String"], "Boolean"],
        "_greaterequal": ["arrow", ["String"], "Boolean"]
      }],
      "Table": ["data", "Table", [], [], {
        "length": ["arrow", [], "Number"]
      }],
      "Function": ["data", "Function", [], [], {}],
      "Boolean": ["data", "Boolean", [], [], {}],
      "Object": ["data", "Object", [], [], {}],
      "Method": ["data", "Method", [], [], {}],
      "Nothing": ["data", "Nothing", [], [], {}],
      "RawArray": ["data", "RawArray", ["a"], [], {}]
    }
  },
  nativeRequires: [ ],
  theModule: function(runtime, namespace, uri /* intentionally blank */) {
    return runtime.globalModuleObject;
  }
})
,
"builtin://option":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"is-Option":"tany",
"is-none":"tany",
"is-some":"tany",
"none":"tany",
"some":"tany"},
"datatypes":{"atom#Option#1":["data","Option",["a"],[["none"],["some",
[["value",
["tid",
"a"]]]]],{"or-else":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://option"},
"name":"Option"},[["tid",
"a"]]],
["tid",
"a"]],
["tid",
"a"]],
"and-then":["forall",
["b"],
["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://option"},
"name":"Option"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
["tid",
"b"]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://option"},
"name":"Option"},[["tid",
"b"]]]]]}]},
"aliases":{"Option":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import6) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://option";
var D = R.undefined;
var L = [[M,10,49,140,10,50,141],
[M,10,27,118,10,36,127],
[M,10,43,134,10,44,135],
[M,10,4,95,13,7,205],
[M,14,60,267,14,69,276],
[M,14,31,238,14,40,247],
[M,14,47,254,14,55,262],
[M,14,4,211,17,7,321],
[M,21,6,463,21,16,473],
[M,19,49,398,19,50,399],
[M,19,27,376,19,36,385],
[M,19,43,392,19,44,393],
[M,19,4,353,22,7,481],
[M,25,6,616,25,10,620],
[M,25,13,623,25,23,633],
[M,23,60,543,23,69,552],
[M,25,6,616,25,25,635],
[M,25,11,621,25,24,634],
[M,23,31,514,23,40,523],
[M,23,47,530,23,55,538],
[M,23,4,487,26,7,643],
[M,9,2,78,17,7,321],
[M,18,2,324,26,7,643],
[M,18,18,340,18,19,341],
[M,18,4,326,18,20,342],
[M,8,0,60,33,3,808],
["dummy location"],
[M,3,0,13,33,3,808]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import6);
var $toplevel8 = function($$resumer101) {
var $step7 = 0;
var $ans10 = D;
var $al11 = L[27];
try {
if(R.isActivationRecord($$resumer101)) {
$step7 = $$resumer101.step;
$al11 = $$resumer101.from;
$ans10 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
Option20 = $$resumer101.vars[0];
is$Option72 = $$resumer101.vars[1];
is$none75 = $$resumer101.vars[2];
none78 = $$resumer101.vars[3];
is$some81 = $$resumer101.vars[4];
some44 = $$resumer101.vars[5];
defined_value96 = $$resumer101.vars[6];
defined_value97 = $$resumer101.vars[7];
defined_value98 = $$resumer101.vars[8];
defined_value99 = $$resumer101.vars[9];
defined_value100 = $$resumer101.vars[10];
answer94 = $$resumer101.vars[11];
provides93 = $$resumer101.vars[12];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7) {
case 0: var Option12 = R.namedBrander("Option",L[25]);
var Option20 = R.makeBranderAnn(Option12,"Option");
var Option69 = {"$var":D};
var is$Option72 = {"$var":D};
var is$none75 = {"$var":D};
var none78 = {"$var":D};
var is$some81 = {"$var":D};
var some44 = {"$var":D};
var $temp_full14 = function($self15,$v16) {
var $step13 = 0;
var $ans17 = D;
var $al18 = L[3];
try {
if(R.isActivationRecord($self15)) {
$step13 = $self15.step;
$al18 = $self15.from;
$ans17 = $self15.ans;
self15 = $self15.args[0];
v16 = $self15.args[1];
ann_check_temp19 = $self15.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[3],2,$t);
}
var self15 = $self15;
var v16 = $v16;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step13) {
case 0: $step13 = 1;
$al18 = L[1];
R._checkAnn(L[1],Option20,self15);
break;
case 1: $step13 = 2;
$al18 = L[2];
R._checkAnn(L[2],R.Any,v16);
break;
case 2: var ann_check_temp19 = v16;
$step13 = 3;
$al18 = L[0];
R._checkAnn(L[0],R.Any,ann_check_temp19);
break;
case 3: $step13 = 4;
$ans17 = ann_check_temp19;
break;
case 4: ++R.GAS;
return $ans17;
default: throw "No case numbered " + $step13 + " in $temp_full14";
}
}
} catch($e21) {
if(R.isCont($e21) && ($step13 !== 4)) {
$e21.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al18,$temp_full14,$step13,[self15,v16],[ann_check_temp19]);
}
if(R.isPyretException($e21)) {
$e21.pyretStack.push($al18);
}
throw $e21;
}
};
var anf_singleton_variant_member53 = R.makeMethod1($temp_full14,"or-else");
var $temp_full23 = function($self24,$$underscore25) {
var $step22 = 0;
var $ans26 = D;
var $al27 = L[7];
try {
if(R.isActivationRecord($self24)) {
$step22 = $self24.step;
$al27 = $self24.from;
$ans26 = $self24.ans;
self24 = $self24.args[0];
$underscore25 = $self24.args[1];
ann_check_temp28 = $self24.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[7],2,$t);
}
var self24 = $self24;
var $underscore25 = $$underscore25;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step22) {
case 0: $step22 = 1;
$al27 = L[5];
R._checkAnn(L[5],Option20,self24);
break;
case 1: $step22 = 2;
$al27 = L[6];
R._checkAnn(L[6],R.Function,$underscore25);
break;
case 2: var ann_check_temp28 = self24;
$step22 = 3;
$al27 = L[4];
R._checkAnn(L[4],Option20,ann_check_temp28);
break;
case 3: $step22 = 4;
$ans26 = ann_check_temp28;
break;
case 4: ++R.GAS;
return $ans26;
default: throw "No case numbered " + $step22 + " in $temp_full23";
}
}
} catch($e29) {
if(R.isCont($e29) && ($step22 !== 4)) {
$e29.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al27,$temp_full23,$step22,[self24,$underscore25],[ann_check_temp28]);
}
if(R.isPyretException($e29)) {
$e29.pyretStack.push($al27);
}
throw $e29;
}
};
var anf_singleton_variant_member54 = R.makeMethod1($temp_full23,"and-then");
var $temp_full31 = function($self32,$v33) {
var $step30 = 0;
var $ans34 = D;
var $al35 = L[12];
try {
if(R.isActivationRecord($self32)) {
$step30 = $self32.step;
$al35 = $self32.from;
$ans34 = $self32.ans;
self32 = $self32.args[0];
v33 = $self32.args[1];
ann_check_temp36 = $self32.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[12],2,$t);
}
var self32 = $self32;
var v33 = $v33;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step30) {
case 0: $step30 = 1;
$al35 = L[10];
R._checkAnn(L[10],Option20,self32);
break;
case 1: $step30 = 2;
$al35 = L[11];
R._checkAnn(L[11],R.Any,v33);
break;
case 2: $al35 = L[8];
var ann_check_temp36 = G(self32,"value",L[8]);
$step30 = 3;
$al35 = L[9];
R._checkAnn(L[9],R.Any,ann_check_temp36);
break;
case 3: $step30 = 4;
$ans34 = ann_check_temp36;
break;
case 4: ++R.GAS;
return $ans34;
default: throw "No case numbered " + $step30 + " in $temp_full31";
}
}
} catch($e37) {
if(R.isCont($e37) && ($step30 !== 4)) {
$e37.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al35,$temp_full31,$step30,[self32,v33],[ann_check_temp36]);
}
if(R.isPyretException($e37)) {
$e37.pyretStack.push($al35);
}
throw $e37;
}
};
var anf_variant_member61 = R.makeMethod1($temp_full31,"or-else");
var $temp_full39 = function($self40,$f41) {
var $step38 = 0;
var $ans42 = D;
var $al43 = L[20];
try {
if(R.isActivationRecord($self40)) {
$step38 = $self40.step;
$al43 = $self40.from;
$ans42 = $self40.ans;
self40 = $self40.args[0];
f41 = $self40.args[1];
anf_fun46 = $self40.vars[0];
ann_check_temp48 = $self40.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[20],2,$t);
}
var self40 = $self40;
var f41 = $f41;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step38) {
case 0: $step38 = 1;
$al43 = L[18];
R._checkAnn(L[18],Option20,self40);
break;
case 1: $step38 = 2;
$al43 = L[19];
R._checkAnn(L[19],R.Function,f41);
break;
case 2: var anf_fun46 = some44.$var === D?U(L[13],"some"):some44.$var;
$al43 = L[14];
var anf_arg45 = G(self40,"value",L[14]);
$step38 = 3;
$al43 = L[17];
if(!(R.isFunction(f41))) {
R.ffi.throwNonFunApp($al43,f41);
}
$ans42 = f41.app(anf_arg45);
break;
case 3: var anf_arg47 = $ans42;
$step38 = 4;
$al43 = L[16];
if(!(R.isFunction(anf_fun46))) {
R.ffi.throwNonFunApp($al43,anf_fun46);
}
$ans42 = anf_fun46.app(anf_arg47);
break;
case 4: var ann_check_temp48 = $ans42;
$step38 = 5;
$al43 = L[15];
R._checkAnn(L[15],Option20,ann_check_temp48);
break;
case 5: $step38 = 6;
$ans42 = ann_check_temp48;
break;
case 6: ++R.GAS;
return $ans42;
default: throw "No case numbered " + $step38 + " in $temp_full39";
}
}
} catch($e49) {
if(R.isCont($e49) && ($step38 !== 6)) {
$e49.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al43,$temp_full39,$step38,[self40,f41],[anf_fun46,ann_check_temp48]);
}
if(R.isPyretException($e49)) {
$e49.pyretStack.push($al43);
}
throw $e49;
}
};
var anf_variant_member62 = R.makeMethod1($temp_full39,"and-then");
var $none_getfields57 = function(f) {
return f();
};
var $none_getfieldsref55 = function(f) {
return f();
};
var $none_mutablemask56 = [];
var $none$base50 = {"or-else":anf_singleton_variant_member53,
"and-then":anf_singleton_variant_member54,
"_match":R.makeMatch("none",0)};
var $none$brander51 = R.namedBrander("none",L[21]);
var $none$brands52 = {};
$none$brands52[Option12._brand] = true;
$none$brands52[$none$brander51._brand] = true;
var $some_getfields65 = function(f) {
return f(this.dict["value"]);
};
var $some_getfieldsref63 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]));
};
var $some_mutablemask64 = [false];
var $some$base58 = {"$fieldNames":["value"],
"or-else":anf_variant_member61,
"and-then":anf_variant_member62,
"_match":R.makeMatch("some",1)};
var $some$brander59 = R.namedBrander("some",L[22]);
var $some$brands60 = {};
$some$brands60[Option12._brand] = true;
$some$brands60[$some$brander59._brand] = true;
var some66 = R.makeVariantConstructor(L[24],function() {
return [R.Any];
},["value67"],[L[23]],[false],["value67"],$some_mutablemask64,$some$base58,$some$brands60,"some",$some_getfieldsref63,$some_getfields65,$some$base58);
var anf_assign68 = R.makeObject({"Option":G(Option12,"test",L[25]),
"is-none":G($none$brander51,"test",L[21]),
"none":R.makeDataValue($none$base50,$none$brands52,"none",$none_getfieldsref55,$none_getfields57,-1,$none_mutablemask56,$none$base50),
"is-some":G($some$brander59,"test",L[22]),
"some":some66});
Option69.$var = anf_assign68;
var anf_bracket70 = Option69.$var;
$al11 = L[25];
var anf_assign71 = G(anf_bracket70,"Option",L[25]);
is$Option72.$var = anf_assign71;
var anf_bracket73 = Option69.$var;
$al11 = L[21];
var anf_assign74 = G(anf_bracket73,"is-none",L[21]);
is$none75.$var = anf_assign74;
var anf_bracket76 = Option69.$var;
$al11 = L[21];
var anf_assign77 = G(anf_bracket76,"none",L[21]);
none78.$var = anf_assign77;
var anf_bracket79 = Option69.$var;
$al11 = L[22];
var anf_assign80 = G(anf_bracket79,"is-some",L[22]);
is$some81.$var = anf_assign80;
var anf_bracket82 = Option69.$var;
$al11 = L[22];
var anf_assign83 = G(anf_bracket82,"some",L[22]);
some44.$var = anf_assign83;
var defined_value96 = some44.$var;
var defined_value97 = is$some81.$var;
var defined_value98 = none78.$var;
var defined_value99 = is$none75.$var;
var defined_value100 = is$Option72.$var;
$step7 = 1;
$al11 = L[26];
$field84 = R.getColonFieldLoc(builtins1,"trace-value",L[26]);
if(R.isMethod($field84)) {
$ans10 = $field84.full_meth(builtins1,L[26],nothing2);
} else {
if(!(R.isFunction($field84))) {
R.ffi.throwNonFunApp(L[26],$field84);
}
$ans10 = $field84.app(L[26],nothing2);
}
break;
case 1: var answer94 = $ans10;
var anf_obj85 = is$Option72.$var;
var anf_obj86 = none78.$var;
var anf_obj87 = is$none75.$var;
var anf_obj88 = some44.$var;
var anf_obj89 = is$some81.$var;
var provides93 = R.makeObject({"is-Option":anf_obj85,
"none":anf_obj86,
"is-none":anf_obj87,
"some":anf_obj88,
"is-some":anf_obj89});
$step7 = 2;
$al11 = L[25];
$field90 = R.getColonFieldLoc(builtins1,"current-checker",L[25]);
if(R.isMethod($field90)) {
$ans10 = $field90.full_meth(builtins1);
} else {
if(!(R.isFunction($field90))) {
R.ffi.throwNonFunApp(L[25],$field90);
}
$ans10 = $field90.app();
}
break;
case 2: var anf_method_obj91 = $ans10;
$step7 = 3;
$al11 = L[25];
$field92 = R.getColonFieldLoc(anf_method_obj91,"results",L[25]);
if(R.isMethod($field92)) {
$ans10 = $field92.full_meth(anf_method_obj91);
} else {
if(!(R.isFunction($field92))) {
R.ffi.throwNonFunApp(L[25],$field92);
}
$ans10 = $field92.app();
}
break;
case 3: var checks95 = $ans10;
$step7 = 4;
$ans10 = R.makeObject({"answer":answer94,
"namespace":NAMESPACE,
"defined-values":{"some":defined_value96,
"is-some":defined_value97,
"none":defined_value98,
"is-none":defined_value99,
"is-Option":defined_value100},
"defined-types":{"Option":Option20},
"provide-plus-types":R.makeObject({"values":provides93,
"types":{"Option":Option20}}),
"checks":checks95});
break;
case 4: ++R.GAS;
return $ans10;
default: throw "No case numbered " + $step7 + " in $toplevel8";
}
}
} catch($e102) {
if(R.isCont($e102) && ($step7 !== 4)) {
$e102.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al11,$toplevel8,$step7,[],[Option20,is$Option72,is$none75,none78,is$some81,some44,defined_value96,defined_value97,defined_value98,defined_value99,defined_value100,answer94,provides93]);
}
if(R.isPyretException($e102)) {
$e102.pyretStack.push($al11);
}
throw $e102;
}
};
return R.safeCall($toplevel8,function(moduleVal) {
R.modules["$builtin://option5"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://either":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"is-Either":"tany",
"is-left":"tany",
"is-right":"tany",
"left":"tany",
"right":"tany"},
"datatypes":{"atom#Either#1":["data","Either",["a","b"],[["left",
[["v",
["tid",
"a"]]]],["right",
[["v",
["tid",
"b"]]]]],{}]},
"aliases":{"Either":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import4) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://either";
var D = R.undefined;
var L = [[M,9,2,80,9,16,94],
[M,9,14,92,9,15,93],
[M,9,4,82,9,16,94],
[M,10,2,97,10,17,112],
[M,10,15,110,10,16,111],
[M,10,4,99,10,17,112],
[M,8,0,60,11,3,116],
["dummy location"],
[M,3,0,13,11,3,116]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import4);
var $toplevel6 = function($$resumer101) {
var $step5 = 0;
var $ans8 = D;
var $al10 = L[8];
try {
if(R.isActivationRecord($$resumer101)) {
$step5 = $$resumer101.step;
$al10 = $$resumer101.from;
$ans8 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
Either53 = $$resumer101.vars[0];
is$Either31 = $$resumer101.vars[1];
is$left34 = $$resumer101.vars[2];
left37 = $$resumer101.vars[3];
is$right40 = $$resumer101.vars[4];
right43 = $$resumer101.vars[5];
defined_value57 = $$resumer101.vars[6];
defined_value58 = $$resumer101.vars[7];
defined_value59 = $$resumer101.vars[8];
defined_value60 = $$resumer101.vars[9];
defined_value61 = $$resumer101.vars[10];
answer55 = $$resumer101.vars[11];
provides54 = $$resumer101.vars[12];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5) {
case 0: var Either11 = R.namedBrander("Either",L[6]);
var Either53 = R.makeBranderAnn(Either11,"Either");
var Either28 = {"$var":D};
var is$Either31 = {"$var":D};
var is$left34 = {"$var":D};
var left37 = {"$var":D};
var is$right40 = {"$var":D};
var right43 = {"$var":D};
var $left_getfields17 = function(f) {
return f(this.dict["v"]);
};
var $left_getfieldsref15 = function(f,refmask) {
return f(R.derefField(this.dict["v"],false,refmask[0]));
};
var $left_mutablemask16 = [false];
var $left$base12 = {"$fieldNames":["v"],
"_match":R.makeMatch("left",1)};
var $left$brander13 = R.namedBrander("left",L[0]);
var $left$brands14 = {};
$left$brands14[Either11._brand] = true;
$left$brands14[$left$brander13._brand] = true;
var left18 = R.makeVariantConstructor(L[2],function() {
return [R.Any];
},["v16"],[L[1]],[false],["v16"],$left_mutablemask16,$left$base12,$left$brands14,"left",$left_getfieldsref15,$left_getfields17,$left$base12);
var $right_getfields24 = function(f) {
return f(this.dict["v"]);
};
var $right_getfieldsref22 = function(f,refmask) {
return f(R.derefField(this.dict["v"],false,refmask[0]));
};
var $right_mutablemask23 = [false];
var $right$base19 = {"$fieldNames":["v"],
"_match":R.makeMatch("right",1)};
var $right$brander20 = R.namedBrander("right",L[3]);
var $right$brands21 = {};
$right$brands21[Either11._brand] = true;
$right$brands21[$right$brander20._brand] = true;
var right25 = R.makeVariantConstructor(L[5],function() {
return [R.Any];
},["v26"],[L[4]],[false],["v26"],$right_mutablemask23,$right$base19,$right$brands21,"right",$right_getfieldsref22,$right_getfields24,$right$base19);
var anf_assign27 = R.makeObject({"Either":G(Either11,"test",L[6]),
"is-left":G($left$brander13,"test",L[0]),
"left":left18,
"is-right":G($right$brander20,"test",L[3]),
"right":right25});
Either28.$var = anf_assign27;
var anf_bracket29 = Either28.$var;
$al10 = L[6];
var anf_assign30 = G(anf_bracket29,"Either",L[6]);
is$Either31.$var = anf_assign30;
var anf_bracket32 = Either28.$var;
$al10 = L[0];
var anf_assign33 = G(anf_bracket32,"is-left",L[0]);
is$left34.$var = anf_assign33;
var anf_bracket35 = Either28.$var;
$al10 = L[0];
var anf_assign36 = G(anf_bracket35,"left",L[0]);
left37.$var = anf_assign36;
var anf_bracket38 = Either28.$var;
$al10 = L[3];
var anf_assign39 = G(anf_bracket38,"is-right",L[3]);
is$right40.$var = anf_assign39;
var anf_bracket41 = Either28.$var;
$al10 = L[3];
var anf_assign42 = G(anf_bracket41,"right",L[3]);
right43.$var = anf_assign42;
var defined_value57 = right43.$var;
var defined_value58 = is$right40.$var;
var defined_value59 = left37.$var;
var defined_value60 = is$left34.$var;
var defined_value61 = is$Either31.$var;
$step5 = 1;
$al10 = L[7];
$field44 = R.getColonFieldLoc(builtins1,"trace-value",L[7]);
if(R.isMethod($field44)) {
$ans8 = $field44.full_meth(builtins1,L[7],nothing2);
} else {
if(!(R.isFunction($field44))) {
R.ffi.throwNonFunApp(L[7],$field44);
}
$ans8 = $field44.app(L[7],nothing2);
}
break;
case 1: var answer55 = $ans8;
var anf_obj45 = is$Either31.$var;
var anf_obj46 = left37.$var;
var anf_obj47 = is$left34.$var;
var anf_obj48 = right43.$var;
var anf_obj49 = is$right40.$var;
var provides54 = R.makeObject({"is-Either":anf_obj45,
"left":anf_obj46,
"is-left":anf_obj47,
"right":anf_obj48,
"is-right":anf_obj49});
$step5 = 2;
$al10 = L[6];
$field50 = R.getColonFieldLoc(builtins1,"current-checker",L[6]);
if(R.isMethod($field50)) {
$ans8 = $field50.full_meth(builtins1);
} else {
if(!(R.isFunction($field50))) {
R.ffi.throwNonFunApp(L[6],$field50);
}
$ans8 = $field50.app();
}
break;
case 2: var anf_method_obj51 = $ans8;
$step5 = 3;
$al10 = L[6];
$field52 = R.getColonFieldLoc(anf_method_obj51,"results",L[6]);
if(R.isMethod($field52)) {
$ans8 = $field52.full_meth(anf_method_obj51);
} else {
if(!(R.isFunction($field52))) {
R.ffi.throwNonFunApp(L[6],$field52);
}
$ans8 = $field52.app();
}
break;
case 3: var checks56 = $ans8;
$step5 = 4;
$ans8 = R.makeObject({"answer":answer55,
"namespace":NAMESPACE,
"defined-values":{"right":defined_value57,
"is-right":defined_value58,
"left":defined_value59,
"is-left":defined_value60,
"is-Either":defined_value61},
"defined-types":{"Either":Either53},
"provide-plus-types":R.makeObject({"values":provides54,
"types":{"Either":Either53}}),
"checks":checks56});
break;
case 4: ++R.GAS;
return $ans8;
default: throw "No case numbered " + $step5 + " in $toplevel6";
}
}
} catch($e62) {
if(R.isCont($e62) && ($step5 !== 4)) {
$e62.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al10,$toplevel6,$step5,[],[Either53,is$Either31,is$left34,left37,is$right40,right43,defined_value57,defined_value58,defined_value59,defined_value60,defined_value61,answer55,provides54]);
}
if(R.isPyretException($e62)) {
$e62.pyretStack.push($al10);
}
throw $e62;
}
};
return R.safeCall($toplevel6,function(moduleVal) {
R.modules["$builtin://either3"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://error-display":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"bulleted":"tany",
"bulleted-sequence":"tany",
"cmcode":"tany",
"code":"tany",
"ed-args":"tany",
"ed-components":"tany",
"ed-field-bindings":"tany",
"ed-fields":"tany",
"ed-names":"tany",
"ed-nth":"tany",
"ed-params":"tany",
"embed":"tany",
"error":"tany",
"h-sequence":"tany",
"highlight":"tany",
"is-ErrorDisplay":"tany",
"is-bulleted-sequence":"tany",
"is-cmcode":"tany",
"is-code":"tany",
"is-embed":"tany",
"is-h-sequence":"tany",
"is-highlight":"tany",
"is-loc":"tany",
"is-loc-display":"tany",
"is-maybe-stack-loc":"tany",
"is-optional":"tany",
"is-paragraph":"tany",
"is-text":"tany",
"is-v-sequence":"tany",
"loc":"tany",
"loc-display":"tany",
"locs":"tany",
"maybe-stack-loc":"tany",
"opt":"tany",
"optional":"tany",
"para":"tany",
"para-nospace":"tany",
"paragraph":"tany",
"sequence":"tany",
"text":"tany",
"v-sequence":"tany"},
"datatypes":{"atom#ErrorDisplay#1":["data","ErrorDisplay",[],[["paragraph",
[["contents",
"tany"]]],["bulleted-sequence",
[["contents",
"tany"]]],["v-sequence",
[["contents",
"tany"]]],["h-sequence",
[["sep",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["contents",
"tany"]]],["embed",
[["val",
"tany"]]],["text",
[["str",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["loc",
[["loc",
"tany"]]],["maybe-stack-loc",
[["contents-without-loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://error-display"},
"name":"ErrorDisplay"}],["contents-with-loc",
"tany"],["user-frames-only",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],["n",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]],["code",
[["contents",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://error-display"},
"name":"ErrorDisplay"}]]],["cmcode",
[["loc",
"tany"]]],["loc-display",
[["contents",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://error-display"},
"name":"ErrorDisplay"}],["style",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["loc",
"tany"]]],["optional",
[["contents",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://error-display"},
"name":"ErrorDisplay"}]]],["highlight",
[["color",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["locs",
"tany"],["contents",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://error-display"},
"name":"ErrorDisplay"}]]]],{}]},
"aliases":{"ErrorDisplay":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import13) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://error-display";
var D = R.undefined;
var L = [[M,9,2,81,9,49,128],
[M,9,4,83,9,49,128],
[M,10,2,131,10,57,186],
[M,10,4,133,10,57,186],
[M,11,2,189,11,50,237],
[M,11,4,191,11,50,237],
[M,12,2,240,12,65,303],
[M,12,58,296,12,64,302],
[M,12,4,242,12,65,303],
[M,13,2,306,13,21,325],
[M,13,4,308,13,21,325],
[M,14,2,328,14,23,349],
[M,14,16,342,14,22,348],
[M,14,4,330,14,23,349],
[M,15,2,352,15,28,378],
[M,15,4,354,15,28,378],
[M,16,2,381,18,43,541],
[M,16,25,404,16,31,410],
[M,16,53,432,16,60,439],
[M,18,30,528,18,42,540],
[M,16,4,383,18,43,541],
[M,19,2,544,19,34,576],
[M,19,21,563,19,33,575],
[M,19,4,546,19,34,576],
[M,20,2,579,20,31,608],
[M,20,4,581,20,31,608],
[M,21,2,611,21,79,688],
[M,21,46,655,21,52,661],
[M,21,66,675,21,78,687],
[M,21,4,613,21,79,688],
[M,22,2,691,22,38,727],
[M,22,25,714,22,37,726],
[M,22,4,693,22,38,727],
[M,23,2,730,23,84,812],
[M,23,26,754,23,38,766],
[M,23,77,805,23,83,811],
[M,23,4,732,23,84,812],
[M,8,0,60,24,3,816],
[M,28,29,857,28,51,879],
[M,28,9,837,28,55,883],
[M,29,48,933,29,57,942],
[M,29,29,914,29,61,946],
[M,29,9,894,29,65,950],
[M,30,48,1000,30,57,1009],
[M,30,29,981,30,62,1014],
[M,30,9,961,30,66,1018],
[M,31,48,1068,31,57,1077],
[M,31,29,1049,31,65,1085],
[M,31,9,1029,31,69,1089],
[M,32,48,1139,32,57,1148],
[M,32,29,1120,32,68,1159],
[M,32,9,1100,32,72,1163],
[M,33,48,1213,33,57,1222],
[M,33,29,1194,33,71,1236],
[M,33,9,1174,33,75,1240],
[M,34,48,1290,34,57,1299],
[M,34,29,1271,34,74,1316],
[M,34,9,1251,34,78,1320],
[M,38,29,1362,38,62,1395],
[M,38,39,1372,38,61,1394],
[M,38,9,1342,38,66,1399],
[M,39,58,1459,39,67,1468],
[M,39,29,1430,39,72,1473],
[M,39,39,1440,39,71,1472],
[M,39,9,1410,39,76,1477],
[M,40,58,1537,40,67,1546],
[M,40,29,1508,40,73,1552],
[M,40,39,1518,40,72,1551],
[M,40,9,1488,40,77,1556],
[M,41,58,1616,41,67,1625],
[M,41,29,1587,41,76,1634],
[M,41,39,1597,41,75,1633],
[M,41,9,1567,41,80,1638],
[M,42,58,1698,42,67,1707],
[M,42,29,1669,42,79,1719],
[M,42,39,1679,42,78,1718],
[M,42,9,1649,42,83,1723],
[M,43,58,1783,43,67,1792],
[M,43,29,1754,43,82,1807],
[M,43,39,1764,43,81,1806],
[M,43,9,1734,43,86,1811],
[M,44,58,1871,44,67,1880],
[M,44,29,1842,44,85,1898],
[M,44,39,1852,44,84,1897],
[M,44,9,1822,44,89,1902],
[M,48,29,1948,48,68,1987],
[M,48,40,1959,48,62,1981],
[M,48,9,1928,48,72,1991],
[M,49,59,2052,49,68,2061],
[M,49,29,2022,49,78,2071],
[M,49,40,2033,49,72,2065],
[M,49,9,2002,49,82,2075],
[M,50,59,2136,50,68,2145],
[M,50,29,2106,50,79,2156],
[M,50,40,2117,50,73,2150],
[M,50,9,2086,50,83,2160],
[M,51,59,2221,51,68,2230],
[M,51,29,2191,51,82,2244],
[M,51,40,2202,51,76,2238],
[M,51,9,2171,51,86,2248],
[M,52,59,2309,52,68,2318],
[M,52,29,2279,52,85,2335],
[M,52,40,2290,52,79,2329],
[M,52,9,2259,52,89,2339],
[M,53,59,2400,53,68,2409],
[M,53,29,2370,53,88,2429],
[M,53,40,2381,53,82,2423],
[M,53,9,2350,53,92,2433],
[M,54,59,2494,54,68,2503],
[M,54,29,2464,54,91,2526],
[M,54,40,2475,54,85,2520],
[M,54,9,2444,54,95,2530],
[M,60,29,2605,60,67,2643],
[M,60,40,2616,60,62,2638],
[M,60,9,2585,60,71,2647],
[M,61,59,2708,61,68,2717],
[M,61,29,2678,61,77,2726],
[M,61,40,2689,61,72,2721],
[M,61,9,2658,61,81,2730],
[M,62,59,2791,62,68,2800],
[M,62,29,2761,62,78,2810],
[M,62,40,2772,62,73,2805],
[M,62,9,2741,62,82,2814],
[M,63,59,2875,63,68,2884],
[M,63,29,2845,63,81,2897],
[M,63,40,2856,63,76,2892],
[M,63,9,2825,63,85,2901],
[M,64,59,2962,64,68,2971],
[M,64,29,2932,64,84,2987],
[M,64,40,2943,64,79,2982],
[M,64,9,2912,64,88,2991],
[M,65,59,3052,65,68,3061],
[M,65,29,3022,65,87,3080],
[M,65,40,3033,65,82,3075],
[M,65,9,3002,65,91,3084],
[M,66,59,3145,66,68,3154],
[M,66,29,3115,66,90,3176],
[M,66,40,3126,66,85,3171],
[M,66,9,3095,66,94,3180],
[M,70,29,3226,70,70,3267],
[M,70,47,3244,70,69,3266],
[M,70,9,3206,70,74,3271],
[M,71,66,3339,71,75,3348],
[M,71,29,3302,71,80,3353],
[M,71,47,3320,71,79,3352],
[M,71,9,3282,71,84,3357],
[M,72,66,3425,72,75,3434],
[M,72,29,3388,72,81,3440],
[M,72,47,3406,72,80,3439],
[M,72,9,3368,72,85,3444],
[M,73,66,3512,73,75,3521],
[M,73,29,3475,73,84,3530],
[M,73,47,3493,73,83,3529],
[M,73,9,3455,73,88,3534],
[M,74,66,3602,74,75,3611],
[M,74,29,3565,74,87,3623],
[M,74,47,3583,74,86,3622],
[M,74,9,3545,74,91,3627],
[M,75,66,3695,75,75,3704],
[M,75,29,3658,75,90,3719],
[M,75,47,3676,75,89,3718],
[M,75,9,3638,75,94,3723],
[M,76,66,3791,76,75,3800],
[M,76,29,3754,76,93,3818],
[M,76,47,3772,76,92,3817],
[M,76,9,3734,76,97,3822],
[M,80,29,3863,80,73,3907],
[M,80,38,3872,80,72,3906],
[M,80,49,3883,80,71,3905],
[M,80,9,3843,80,77,3911],
[M,81,68,3981,81,77,3990],
[M,81,29,3942,81,83,3996],
[M,81,38,3951,81,82,3995],
[M,81,49,3962,81,81,3994],
[M,81,9,3922,81,87,4000],
[M,82,68,4070,82,77,4079],
[M,82,29,4031,82,84,4086],
[M,82,38,4040,82,83,4085],
[M,82,49,4051,82,82,4084],
[M,82,9,4011,82,88,4090],
[M,83,68,4160,83,77,4169],
[M,83,29,4121,83,87,4179],
[M,83,38,4130,83,86,4178],
[M,83,49,4141,83,85,4177],
[M,83,9,4101,83,91,4183],
[M,84,68,4253,84,77,4262],
[M,84,29,4214,84,90,4275],
[M,84,38,4223,84,89,4274],
[M,84,49,4234,84,88,4273],
[M,84,9,4194,84,94,4279],
[M,85,68,4349,85,77,4358],
[M,85,29,4310,85,93,4374],
[M,85,38,4319,85,92,4373],
[M,85,49,4330,85,91,4372],
[M,85,9,4290,85,97,4378],
[M,86,68,4448,86,77,4457],
[M,86,29,4409,86,96,4476],
[M,86,38,4418,86,95,4475],
[M,86,49,4429,86,94,4474],
[M,86,9,4389,86,100,4480],
[M,92,12,4539,92,18,4545],
[M,90,3,4503,90,11,4511],
[M,92,4,4531,92,55,4582],
[M,91,4,4517,91,12,4525],
[M,89,0,4484,93,3,4587],
[M,98,12,4645,98,18,4651],
[M,96,3,4609,96,11,4617],
[M,98,4,4637,98,47,4680],
[M,97,4,4623,97,12,4631],
[M,95,0,4589,99,3,4685],
[M,104,12,4744,104,18,4750],
[M,102,3,4708,102,11,4716],
[M,104,4,4736,104,49,4781],
[M,103,4,4722,103,12,4730],
[M,101,0,4687,105,3,4786],
[M,110,12,4853,110,18,4859],
[M,108,3,4817,108,11,4825],
[M,110,4,4845,110,65,4906],
[M,109,4,4831,109,12,4839],
[M,107,0,4788,111,3,4911],
[M,116,12,4970,116,18,4976],
[M,114,3,4934,114,11,4942],
[M,116,4,4962,116,57,5015],
[M,115,4,4948,115,12,4956],
[M,113,0,4913,117,3,5020],
[M,122,12,5083,122,18,5089],
[M,120,3,5047,120,11,5055],
[M,122,4,5075,122,57,5128],
[M,121,4,5061,121,12,5069],
[M,119,0,5022,123,3,5133],
[M,129,10,5238,129,25,5253],
[M,130,10,5275,130,25,5290],
[M,131,10,5312,131,25,5327],
[M,126,2,5152,134,8,5394],
[M,128,6,5203,133,9,5385],
[M,128,6,5203,128,22,5219],
[M,127,21,5179,127,37,5195],
[M,125,0,5135,135,3,5398],
["dummy location"],
[M,3,0,13,135,3,5398]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var num$to$string3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-to-string");
var num$modulo4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-modulo");
var raw$array$to$list5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-to-list");
var raw$array6 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$Boolean9 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import13);
var $toplevel15 = function($$resumer101) {
var $step14 = 0;
var $ans18 = D;
var $al19 = L[239];
try {
if(R.isActivationRecord($$resumer101)) {
$step14 = $$resumer101.step;
$al19 = $$resumer101.from;
$ans18 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
ErrorDisplay85 = $$resumer101.vars[0];
is$ErrorDisplay138 = $$resumer101.vars[1];
is$paragraph141 = $$resumer101.vars[2];
paragraph144 = $$resumer101.vars[3];
is$bulleted$sequence147 = $$resumer101.vars[4];
bulleted$sequence150 = $$resumer101.vars[5];
is$v$sequence153 = $$resumer101.vars[6];
v$sequence156 = $$resumer101.vars[7];
is$h$sequence159 = $$resumer101.vars[8];
h$sequence162 = $$resumer101.vars[9];
is$embed165 = $$resumer101.vars[10];
embed168 = $$resumer101.vars[11];
is$text171 = $$resumer101.vars[12];
text174 = $$resumer101.vars[13];
is$loc177 = $$resumer101.vars[14];
loc180 = $$resumer101.vars[15];
is$maybe$stack$loc183 = $$resumer101.vars[16];
maybe$stack$loc186 = $$resumer101.vars[17];
is$code189 = $$resumer101.vars[18];
code192 = $$resumer101.vars[19];
is$cmcode195 = $$resumer101.vars[20];
cmcode198 = $$resumer101.vars[21];
is$loc$display201 = $$resumer101.vars[22];
loc$display204 = $$resumer101.vars[23];
is$optional207 = $$resumer101.vars[24];
optional210 = $$resumer101.vars[25];
is$highlight213 = $$resumer101.vars[26];
highlight216 = $$resumer101.vars[27];
locs865 = $$resumer101.vars[28];
para866 = $$resumer101.vars[29];
sequence455 = $$resumer101.vars[30];
error867 = $$resumer101.vars[31];
para$nospace868 = $$resumer101.vars[32];
bulleted869 = $$resumer101.vars[33];
opt870 = $$resumer101.vars[34];
ed$args737 = $$resumer101.vars[35];
ed$names753 = $$resumer101.vars[36];
ed$fields769 = $$resumer101.vars[37];
ed$field$bindings785 = $$resumer101.vars[38];
ed$params801 = $$resumer101.vars[39];
ed$components817 = $$resumer101.vars[40];
ed$nth836 = $$resumer101.vars[41];
defined_value884 = $$resumer101.vars[42];
defined_value885 = $$resumer101.vars[43];
defined_value886 = $$resumer101.vars[44];
defined_value887 = $$resumer101.vars[45];
defined_value888 = $$resumer101.vars[46];
defined_value889 = $$resumer101.vars[47];
defined_value890 = $$resumer101.vars[48];
defined_value891 = $$resumer101.vars[49];
defined_value892 = $$resumer101.vars[50];
defined_value893 = $$resumer101.vars[51];
defined_value894 = $$resumer101.vars[52];
defined_value895 = $$resumer101.vars[53];
defined_value896 = $$resumer101.vars[54];
defined_value897 = $$resumer101.vars[55];
defined_value898 = $$resumer101.vars[56];
defined_value899 = $$resumer101.vars[57];
defined_value900 = $$resumer101.vars[58];
defined_value901 = $$resumer101.vars[59];
defined_value902 = $$resumer101.vars[60];
defined_value903 = $$resumer101.vars[61];
defined_value904 = $$resumer101.vars[62];
defined_value905 = $$resumer101.vars[63];
defined_value906 = $$resumer101.vars[64];
defined_value907 = $$resumer101.vars[65];
defined_value908 = $$resumer101.vars[66];
defined_value909 = $$resumer101.vars[67];
defined_value910 = $$resumer101.vars[68];
defined_value911 = $$resumer101.vars[69];
defined_value912 = $$resumer101.vars[70];
defined_value913 = $$resumer101.vars[71];
defined_value914 = $$resumer101.vars[72];
defined_value915 = $$resumer101.vars[73];
defined_value916 = $$resumer101.vars[74];
defined_value917 = $$resumer101.vars[75];
answer882 = $$resumer101.vars[76];
provides881 = $$resumer101.vars[77];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step14) {
case 0: var ErrorDisplay20 = R.namedBrander("ErrorDisplay",L[37]);
var ErrorDisplay85 = R.makeBranderAnn(ErrorDisplay20,"ErrorDisplay");
var ErrorDisplay135 = {"$var":D};
var is$ErrorDisplay138 = {"$var":D};
var is$paragraph141 = {"$var":D};
var paragraph144 = {"$var":D};
var is$bulleted$sequence147 = {"$var":D};
var bulleted$sequence150 = {"$var":D};
var is$v$sequence153 = {"$var":D};
var v$sequence156 = {"$var":D};
var is$h$sequence159 = {"$var":D};
var h$sequence162 = {"$var":D};
var is$embed165 = {"$var":D};
var embed168 = {"$var":D};
var is$text171 = {"$var":D};
var text174 = {"$var":D};
var is$loc177 = {"$var":D};
var loc180 = {"$var":D};
var is$maybe$stack$loc183 = {"$var":D};
var maybe$stack$loc186 = {"$var":D};
var is$code189 = {"$var":D};
var code192 = {"$var":D};
var is$cmcode195 = {"$var":D};
var cmcode198 = {"$var":D};
var is$loc$display201 = {"$var":D};
var loc$display204 = {"$var":D};
var is$optional207 = {"$var":D};
var optional210 = {"$var":D};
var is$highlight213 = {"$var":D};
var highlight216 = {"$var":D};
var $paragraph_getfields26 = function(f) {
return f(this.dict["contents"]);
};
var $paragraph_getfieldsref24 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $paragraph_mutablemask25 = [false];
var $paragraph$base21 = {"$fieldNames":["contents"],
"_match":R.makeMatch("paragraph",1)};
var $paragraph$brander22 = R.namedBrander("paragraph",L[0]);
var $paragraph$brands23 = {};
$paragraph$brands23[ErrorDisplay20._brand] = true;
$paragraph$brands23[$paragraph$brander22._brand] = true;
var paragraph27 = R.makeVariantConstructor(L[1],function() {
return [];
},[],[],[false],["contents28"],$paragraph_mutablemask25,$paragraph$base21,$paragraph$brands23,"paragraph",$paragraph_getfieldsref24,$paragraph_getfields26,$paragraph$base21);
var $bulleted$sequence_getfields34 = function(f) {
return f(this.dict["contents"]);
};
var $bulleted$sequence_getfieldsref32 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $bulleted$sequence_mutablemask33 = [false];
var $bulleted$sequence$base29 = {"$fieldNames":["contents"],
"_match":R.makeMatch("bulleted-sequence",1)};
var $bulleted$sequence$brander30 = R.namedBrander("bulleted-sequence",L[2]);
var $bulleted$sequence$brands31 = {};
$bulleted$sequence$brands31[ErrorDisplay20._brand] = true;
$bulleted$sequence$brands31[$bulleted$sequence$brander30._brand] = true;
var bulleted$sequence35 = R.makeVariantConstructor(L[3],function() {
return [];
},[],[],[false],["contents36"],$bulleted$sequence_mutablemask33,$bulleted$sequence$base29,$bulleted$sequence$brands31,"bulleted-sequence",$bulleted$sequence_getfieldsref32,$bulleted$sequence_getfields34,$bulleted$sequence$base29);
var $v$sequence_getfields42 = function(f) {
return f(this.dict["contents"]);
};
var $v$sequence_getfieldsref40 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $v$sequence_mutablemask41 = [false];
var $v$sequence$base37 = {"$fieldNames":["contents"],
"_match":R.makeMatch("v-sequence",1)};
var $v$sequence$brander38 = R.namedBrander("v-sequence",L[4]);
var $v$sequence$brands39 = {};
$v$sequence$brands39[ErrorDisplay20._brand] = true;
$v$sequence$brands39[$v$sequence$brander38._brand] = true;
var v$sequence43 = R.makeVariantConstructor(L[5],function() {
return [];
},[],[],[false],["contents44"],$v$sequence_mutablemask41,$v$sequence$base37,$v$sequence$brands39,"v-sequence",$v$sequence_getfieldsref40,$v$sequence_getfields42,$v$sequence$base37);
var $h$sequence_getfields50 = function(f) {
return f(this.dict["contents"],this.dict["sep"]);
};
var $h$sequence_getfieldsref48 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]),R.derefField(this.dict["sep"],false,refmask[1]));
};
var $h$sequence_mutablemask49 = [false,false];
var $h$sequence$base45 = {"$fieldNames":["contents","sep"],
"_match":R.makeMatch("h-sequence",2)};
var $h$sequence$brander46 = R.namedBrander("h-sequence",L[6]);
var $h$sequence$brands47 = {};
$h$sequence$brands47[ErrorDisplay20._brand] = true;
$h$sequence$brands47[$h$sequence$brander46._brand] = true;
var h$sequence51 = R.makeVariantConstructor(L[8],function() {
return [$type$String7];
},["sep52"],[L[7]],[false,false],["contents53","sep52"],$h$sequence_mutablemask49,$h$sequence$base45,$h$sequence$brands47,"h-sequence",$h$sequence_getfieldsref48,$h$sequence_getfields50,$h$sequence$base45);
var $embed_getfields59 = function(f) {
return f(this.dict["val"]);
};
var $embed_getfieldsref57 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]));
};
var $embed_mutablemask58 = [false];
var $embed$base54 = {"$fieldNames":["val"],
"_match":R.makeMatch("embed",1)};
var $embed$brander55 = R.namedBrander("embed",L[9]);
var $embed$brands56 = {};
$embed$brands56[ErrorDisplay20._brand] = true;
$embed$brands56[$embed$brander55._brand] = true;
var embed60 = R.makeVariantConstructor(L[10],function() {
return [];
},[],[],[false],["val61"],$embed_mutablemask58,$embed$base54,$embed$brands56,"embed",$embed_getfieldsref57,$embed_getfields59,$embed$base54);
var $text_getfields67 = function(f) {
return f(this.dict["str"]);
};
var $text_getfieldsref65 = function(f,refmask) {
return f(R.derefField(this.dict["str"],false,refmask[0]));
};
var $text_mutablemask66 = [false];
var $text$base62 = {"$fieldNames":["str"],
"_match":R.makeMatch("text",1)};
var $text$brander63 = R.namedBrander("text",L[11]);
var $text$brands64 = {};
$text$brands64[ErrorDisplay20._brand] = true;
$text$brands64[$text$brander63._brand] = true;
var text68 = R.makeVariantConstructor(L[13],function() {
return [$type$String7];
},["str69"],[L[12]],[false],["str69"],$text_mutablemask66,$text$base62,$text$brands64,"text",$text_getfieldsref65,$text_getfields67,$text$base62);
var $loc_getfields75 = function(f) {
return f(this.dict["loc"]);
};
var $loc_getfieldsref73 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $loc_mutablemask74 = [false];
var $loc$base70 = {"$fieldNames":["loc"],
"_match":R.makeMatch("loc",1)};
var $loc$brander71 = R.namedBrander("loc",L[14]);
var $loc$brands72 = {};
$loc$brands72[ErrorDisplay20._brand] = true;
$loc$brands72[$loc$brander71._brand] = true;
var loc76 = R.makeVariantConstructor(L[15],function() {
return [];
},[],[],[false],["loc77"],$loc_mutablemask74,$loc$base70,$loc$brands72,"loc",$loc_getfieldsref73,$loc_getfields75,$loc$base70);
var $maybe$stack$loc_getfields83 = function(f) {
return f(this.dict["n"],this.dict["user-frames-only"],this.dict["contents-with-loc"],this.dict["contents-without-loc"]);
};
var $maybe$stack$loc_getfieldsref81 = function(f,refmask) {
return f(R.derefField(this.dict["n"],false,refmask[0]),R.derefField(this.dict["user-frames-only"],false,refmask[1]),R.derefField(this.dict["contents-with-loc"],false,refmask[2]),R.derefField(this.dict["contents-without-loc"],false,refmask[3]));
};
var $maybe$stack$loc_mutablemask82 = [false,false,false,false];
var $maybe$stack$loc$base78 = {"$fieldNames":["n","user-frames-only","contents-with-loc","contents-without-loc"],
"_match":R.makeMatch("maybe-stack-loc",4)};
var $maybe$stack$loc$brander79 = R.namedBrander("maybe-stack-loc",L[16]);
var $maybe$stack$loc$brands80 = {};
$maybe$stack$loc$brands80[ErrorDisplay20._brand] = true;
$maybe$stack$loc$brands80[$maybe$stack$loc$brander79._brand] = true;
var maybe$stack$loc84 = R.makeVariantConstructor(L[20],function() {
return [$type$Number8,$type$Boolean9,ErrorDisplay85];
},["n86","user$frames$only87","contents$without$loc88"],[L[17],L[18],L[19]],[false,false,false,false],["n86","user$frames$only87","contents$with$loc89","contents$without$loc88"],$maybe$stack$loc_mutablemask82,$maybe$stack$loc$base78,$maybe$stack$loc$brands80,"maybe-stack-loc",$maybe$stack$loc_getfieldsref81,$maybe$stack$loc_getfields83,$maybe$stack$loc$base78);
var $code_getfields95 = function(f) {
return f(this.dict["contents"]);
};
var $code_getfieldsref93 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $code_mutablemask94 = [false];
var $code$base90 = {"$fieldNames":["contents"],
"_match":R.makeMatch("code",1)};
var $code$brander91 = R.namedBrander("code",L[21]);
var $code$brands92 = {};
$code$brands92[ErrorDisplay20._brand] = true;
$code$brands92[$code$brander91._brand] = true;
var code96 = R.makeVariantConstructor(L[23],function() {
return [ErrorDisplay85];
},["contents97"],[L[22]],[false],["contents97"],$code_mutablemask94,$code$base90,$code$brands92,"code",$code_getfieldsref93,$code_getfields95,$code$base90);
var $cmcode_getfields103 = function(f) {
return f(this.dict["loc"]);
};
var $cmcode_getfieldsref101 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $cmcode_mutablemask102 = [false];
var $cmcode$base98 = {"$fieldNames":["loc"],
"_match":R.makeMatch("cmcode",1)};
var $cmcode$brander99 = R.namedBrander("cmcode",L[24]);
var $cmcode$brands100 = {};
$cmcode$brands100[ErrorDisplay20._brand] = true;
$cmcode$brands100[$cmcode$brander99._brand] = true;
var cmcode104 = R.makeVariantConstructor(L[25],function() {
return [];
},[],[],[false],["loc105"],$cmcode_mutablemask102,$cmcode$base98,$cmcode$brands100,"cmcode",$cmcode_getfieldsref101,$cmcode_getfields103,$cmcode$base98);
var $loc$display_getfields111 = function(f) {
return f(this.dict["loc"],this.dict["style"],this.dict["contents"]);
};
var $loc$display_getfieldsref109 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["style"],false,refmask[1]),R.derefField(this.dict["contents"],false,refmask[2]));
};
var $loc$display_mutablemask110 = [false,false,false];
var $loc$display$base106 = {"$fieldNames":["loc","style","contents"],
"_match":R.makeMatch("loc-display",3)};
var $loc$display$brander107 = R.namedBrander("loc-display",L[26]);
var $loc$display$brands108 = {};
$loc$display$brands108[ErrorDisplay20._brand] = true;
$loc$display$brands108[$loc$display$brander107._brand] = true;
var loc$display112 = R.makeVariantConstructor(L[29],function() {
return [$type$String7,ErrorDisplay85];
},["style113","contents114"],[L[27],L[28]],[false,false,false],["loc115","style113","contents114"],$loc$display_mutablemask110,$loc$display$base106,$loc$display$brands108,"loc-display",$loc$display_getfieldsref109,$loc$display_getfields111,$loc$display$base106);
var $optional_getfields121 = function(f) {
return f(this.dict["contents"]);
};
var $optional_getfieldsref119 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]));
};
var $optional_mutablemask120 = [false];
var $optional$base116 = {"$fieldNames":["contents"],
"_match":R.makeMatch("optional",1)};
var $optional$brander117 = R.namedBrander("optional",L[30]);
var $optional$brands118 = {};
$optional$brands118[ErrorDisplay20._brand] = true;
$optional$brands118[$optional$brander117._brand] = true;
var optional122 = R.makeVariantConstructor(L[32],function() {
return [ErrorDisplay85];
},["contents123"],[L[31]],[false],["contents123"],$optional_mutablemask120,$optional$base116,$optional$brands118,"optional",$optional_getfieldsref119,$optional_getfields121,$optional$base116);
var $highlight_getfields129 = function(f) {
return f(this.dict["contents"],this.dict["locs"],this.dict["color"]);
};
var $highlight_getfieldsref127 = function(f,refmask) {
return f(R.derefField(this.dict["contents"],false,refmask[0]),R.derefField(this.dict["locs"],false,refmask[1]),R.derefField(this.dict["color"],false,refmask[2]));
};
var $highlight_mutablemask128 = [false,false,false];
var $highlight$base124 = {"$fieldNames":["contents","locs","color"],
"_match":R.makeMatch("highlight",3)};
var $highlight$brander125 = R.namedBrander("highlight",L[33]);
var $highlight$brands126 = {};
$highlight$brands126[ErrorDisplay20._brand] = true;
$highlight$brands126[$highlight$brander125._brand] = true;
var highlight130 = R.makeVariantConstructor(L[36],function() {
return [ErrorDisplay85,$type$Number8];
},["contents131","color132"],[L[34],L[35]],[false,false,false],["contents131","locs133","color132"],$highlight_mutablemask128,$highlight$base124,$highlight$brands126,"highlight",$highlight_getfieldsref127,$highlight_getfields129,$highlight$base124);
var anf_assign134 = R.makeObject({"ErrorDisplay":G(ErrorDisplay20,"test",L[37]),
"is-paragraph":G($paragraph$brander22,"test",L[0]),
"paragraph":paragraph27,
"is-bulleted-sequence":G($bulleted$sequence$brander30,"test",L[2]),
"bulleted-sequence":bulleted$sequence35,
"is-v-sequence":G($v$sequence$brander38,"test",L[4]),
"v-sequence":v$sequence43,
"is-h-sequence":G($h$sequence$brander46,"test",L[6]),
"h-sequence":h$sequence51,
"is-embed":G($embed$brander55,"test",L[9]),
"embed":embed60,
"is-text":G($text$brander63,"test",L[11]),
"text":text68,
"is-loc":G($loc$brander71,"test",L[14]),
"loc":loc76,
"is-maybe-stack-loc":G($maybe$stack$loc$brander79,"test",L[16]),
"maybe-stack-loc":maybe$stack$loc84,
"is-code":G($code$brander91,"test",L[21]),
"code":code96,
"is-cmcode":G($cmcode$brander99,"test",L[24]),
"cmcode":cmcode104,
"is-loc-display":G($loc$display$brander107,"test",L[26]),
"loc-display":loc$display112,
"is-optional":G($optional$brander117,"test",L[30]),
"optional":optional122,
"is-highlight":G($highlight$brander125,"test",L[33]),
"highlight":highlight130});
ErrorDisplay135.$var = anf_assign134;
var anf_bracket136 = ErrorDisplay135.$var;
$al19 = L[37];
var anf_assign137 = G(anf_bracket136,"ErrorDisplay",L[37]);
is$ErrorDisplay138.$var = anf_assign137;
var anf_bracket139 = ErrorDisplay135.$var;
$al19 = L[0];
var anf_assign140 = G(anf_bracket139,"is-paragraph",L[0]);
is$paragraph141.$var = anf_assign140;
var anf_bracket142 = ErrorDisplay135.$var;
$al19 = L[0];
var anf_assign143 = G(anf_bracket142,"paragraph",L[0]);
paragraph144.$var = anf_assign143;
var anf_bracket145 = ErrorDisplay135.$var;
$al19 = L[2];
var anf_assign146 = G(anf_bracket145,"is-bulleted-sequence",L[2]);
is$bulleted$sequence147.$var = anf_assign146;
var anf_bracket148 = ErrorDisplay135.$var;
$al19 = L[2];
var anf_assign149 = G(anf_bracket148,"bulleted-sequence",L[2]);
bulleted$sequence150.$var = anf_assign149;
var anf_bracket151 = ErrorDisplay135.$var;
$al19 = L[4];
var anf_assign152 = G(anf_bracket151,"is-v-sequence",L[4]);
is$v$sequence153.$var = anf_assign152;
var anf_bracket154 = ErrorDisplay135.$var;
$al19 = L[4];
var anf_assign155 = G(anf_bracket154,"v-sequence",L[4]);
v$sequence156.$var = anf_assign155;
var anf_bracket157 = ErrorDisplay135.$var;
$al19 = L[6];
var anf_assign158 = G(anf_bracket157,"is-h-sequence",L[6]);
is$h$sequence159.$var = anf_assign158;
var anf_bracket160 = ErrorDisplay135.$var;
$al19 = L[6];
var anf_assign161 = G(anf_bracket160,"h-sequence",L[6]);
h$sequence162.$var = anf_assign161;
var anf_bracket163 = ErrorDisplay135.$var;
$al19 = L[9];
var anf_assign164 = G(anf_bracket163,"is-embed",L[9]);
is$embed165.$var = anf_assign164;
var anf_bracket166 = ErrorDisplay135.$var;
$al19 = L[9];
var anf_assign167 = G(anf_bracket166,"embed",L[9]);
embed168.$var = anf_assign167;
var anf_bracket169 = ErrorDisplay135.$var;
$al19 = L[11];
var anf_assign170 = G(anf_bracket169,"is-text",L[11]);
is$text171.$var = anf_assign170;
var anf_bracket172 = ErrorDisplay135.$var;
$al19 = L[11];
var anf_assign173 = G(anf_bracket172,"text",L[11]);
text174.$var = anf_assign173;
var anf_bracket175 = ErrorDisplay135.$var;
$al19 = L[14];
var anf_assign176 = G(anf_bracket175,"is-loc",L[14]);
is$loc177.$var = anf_assign176;
var anf_bracket178 = ErrorDisplay135.$var;
$al19 = L[14];
var anf_assign179 = G(anf_bracket178,"loc",L[14]);
loc180.$var = anf_assign179;
var anf_bracket181 = ErrorDisplay135.$var;
$al19 = L[16];
var anf_assign182 = G(anf_bracket181,"is-maybe-stack-loc",L[16]);
is$maybe$stack$loc183.$var = anf_assign182;
var anf_bracket184 = ErrorDisplay135.$var;
$al19 = L[16];
var anf_assign185 = G(anf_bracket184,"maybe-stack-loc",L[16]);
maybe$stack$loc186.$var = anf_assign185;
var anf_bracket187 = ErrorDisplay135.$var;
$al19 = L[21];
var anf_assign188 = G(anf_bracket187,"is-code",L[21]);
is$code189.$var = anf_assign188;
var anf_bracket190 = ErrorDisplay135.$var;
$al19 = L[21];
var anf_assign191 = G(anf_bracket190,"code",L[21]);
code192.$var = anf_assign191;
var anf_bracket193 = ErrorDisplay135.$var;
$al19 = L[24];
var anf_assign194 = G(anf_bracket193,"is-cmcode",L[24]);
is$cmcode195.$var = anf_assign194;
var anf_bracket196 = ErrorDisplay135.$var;
$al19 = L[24];
var anf_assign197 = G(anf_bracket196,"cmcode",L[24]);
cmcode198.$var = anf_assign197;
var anf_bracket199 = ErrorDisplay135.$var;
$al19 = L[26];
var anf_assign200 = G(anf_bracket199,"is-loc-display",L[26]);
is$loc$display201.$var = anf_assign200;
var anf_bracket202 = ErrorDisplay135.$var;
$al19 = L[26];
var anf_assign203 = G(anf_bracket202,"loc-display",L[26]);
loc$display204.$var = anf_assign203;
var anf_bracket205 = ErrorDisplay135.$var;
$al19 = L[30];
var anf_assign206 = G(anf_bracket205,"is-optional",L[30]);
is$optional207.$var = anf_assign206;
var anf_bracket208 = ErrorDisplay135.$var;
$al19 = L[30];
var anf_assign209 = G(anf_bracket208,"optional",L[30]);
optional210.$var = anf_assign209;
var anf_bracket211 = ErrorDisplay135.$var;
$al19 = L[33];
var anf_assign212 = G(anf_bracket211,"is-highlight",L[33]);
is$highlight213.$var = anf_assign212;
var anf_bracket214 = ErrorDisplay135.$var;
$al19 = L[33];
var anf_assign215 = G(anf_bracket214,"highlight",L[33]);
highlight216.$var = anf_assign215;
var $temp_lam218 = function($arr219) {
var $step217 = 0;
var $ans220 = D;
var $al221 = L[39];
try {
if(R.isActivationRecord($arr219)) {
$step217 = $arr219.step;
$al221 = $arr219.from;
$ans220 = $arr219.ans;
arr219 = $arr219.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[39],1,$t);
}
var arr219 = $arr219;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step217) {
case 0: $step217 = 1;
$al221 = L[38];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al221,raw$array$to$list5);
}
$ans220 = raw$array$to$list5.app(arr219);
break;
case 1: ++R.GAS;
return $ans220;
default: throw "No case numbered " + $step217 + " in $temp_lam218";
}
}
} catch($e222) {
if(R.isCont($e222) && ($step217 !== 1)) {
$e222.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al221,$temp_lam218,$step217,[arr219],[]);
}
if(R.isPyretException($e222)) {
$e222.pyretStack.push($al221);
}
throw $e222;
}
};
var anf_obj280 = R.makeFunction($temp_lam218,"");
var $temp_lam224 = function($$resumer101) {
var $step223 = 0;
var $ans225 = D;
var $al226 = L[42];
try {
if(R.isActivationRecord($$resumer101)) {
$step223 = $$resumer101.step;
$al226 = $$resumer101.from;
$ans225 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[42],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step223) {
case 0: $step223 = 1;
$al226 = L[40];
$field227 = R.getColonFieldLoc(raw$array6,"make0",L[40]);
if(R.isMethod($field227)) {
$ans225 = $field227.full_meth(raw$array6);
} else {
if(!(R.isFunction($field227))) {
R.ffi.throwNonFunApp(L[40],$field227);
}
$ans225 = $field227.app();
}
break;
case 1: var anf_arg228 = $ans225;
$step223 = 2;
$al226 = L[41];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al226,raw$array$to$list5);
}
$ans225 = raw$array$to$list5.app(anf_arg228);
break;
case 2: ++R.GAS;
return $ans225;
default: throw "No case numbered " + $step223 + " in $temp_lam224";
}
}
} catch($e229) {
if(R.isCont($e229) && ($step223 !== 2)) {
$e229.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al226,$temp_lam224,$step223,[],[]);
}
if(R.isPyretException($e229)) {
$e229.pyretStack.push($al226);
}
throw $e229;
}
};
var anf_obj281 = R.makeFunction($temp_lam224,"");
var $temp_lam231 = function($a232) {
var $step230 = 0;
var $ans233 = D;
var $al234 = L[45];
try {
if(R.isActivationRecord($a232)) {
$step230 = $a232.step;
$al234 = $a232.from;
$ans233 = $a232.ans;
a232 = $a232.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[45],1,$t);
}
var a232 = $a232;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step230) {
case 0: $step230 = 1;
$al234 = L[43];
$field235 = R.getColonFieldLoc(raw$array6,"make1",L[43]);
if(R.isMethod($field235)) {
$ans233 = $field235.full_meth(raw$array6,a232);
} else {
if(!(R.isFunction($field235))) {
R.ffi.throwNonFunApp(L[43],$field235);
}
$ans233 = $field235.app(a232);
}
break;
case 1: var anf_arg236 = $ans233;
$step230 = 2;
$al234 = L[44];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al234,raw$array$to$list5);
}
$ans233 = raw$array$to$list5.app(anf_arg236);
break;
case 2: ++R.GAS;
return $ans233;
default: throw "No case numbered " + $step230 + " in $temp_lam231";
}
}
} catch($e237) {
if(R.isCont($e237) && ($step230 !== 2)) {
$e237.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al234,$temp_lam231,$step230,[a232],[]);
}
if(R.isPyretException($e237)) {
$e237.pyretStack.push($al234);
}
throw $e237;
}
};
var anf_obj282 = R.makeFunction($temp_lam231,"");
var $temp_lam239 = function($a240,$b241) {
var $step238 = 0;
var $ans242 = D;
var $al243 = L[48];
try {
if(R.isActivationRecord($a240)) {
$step238 = $a240.step;
$al243 = $a240.from;
$ans242 = $a240.ans;
a240 = $a240.args[0];
b241 = $a240.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[48],2,$t);
}
var a240 = $a240;
var b241 = $b241;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step238) {
case 0: $step238 = 1;
$al243 = L[46];
$field244 = R.getColonFieldLoc(raw$array6,"make2",L[46]);
if(R.isMethod($field244)) {
$ans242 = $field244.full_meth(raw$array6,a240,b241);
} else {
if(!(R.isFunction($field244))) {
R.ffi.throwNonFunApp(L[46],$field244);
}
$ans242 = $field244.app(a240,b241);
}
break;
case 1: var anf_arg245 = $ans242;
$step238 = 2;
$al243 = L[47];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al243,raw$array$to$list5);
}
$ans242 = raw$array$to$list5.app(anf_arg245);
break;
case 2: ++R.GAS;
return $ans242;
default: throw "No case numbered " + $step238 + " in $temp_lam239";
}
}
} catch($e246) {
if(R.isCont($e246) && ($step238 !== 2)) {
$e246.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al243,$temp_lam239,$step238,[a240,b241],[]);
}
if(R.isPyretException($e246)) {
$e246.pyretStack.push($al243);
}
throw $e246;
}
};
var anf_obj283 = R.makeFunction($temp_lam239,"");
var $temp_lam248 = function($a249,$b250,$c251) {
var $step247 = 0;
var $ans252 = D;
var $al253 = L[51];
try {
if(R.isActivationRecord($a249)) {
$step247 = $a249.step;
$al253 = $a249.from;
$ans252 = $a249.ans;
a249 = $a249.args[0];
b250 = $a249.args[1];
c251 = $a249.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[51],3,$t);
}
var a249 = $a249;
var b250 = $b250;
var c251 = $c251;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step247) {
case 0: $step247 = 1;
$al253 = L[49];
$field254 = R.getColonFieldLoc(raw$array6,"make3",L[49]);
if(R.isMethod($field254)) {
$ans252 = $field254.full_meth(raw$array6,a249,b250,c251);
} else {
if(!(R.isFunction($field254))) {
R.ffi.throwNonFunApp(L[49],$field254);
}
$ans252 = $field254.app(a249,b250,c251);
}
break;
case 1: var anf_arg255 = $ans252;
$step247 = 2;
$al253 = L[50];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al253,raw$array$to$list5);
}
$ans252 = raw$array$to$list5.app(anf_arg255);
break;
case 2: ++R.GAS;
return $ans252;
default: throw "No case numbered " + $step247 + " in $temp_lam248";
}
}
} catch($e256) {
if(R.isCont($e256) && ($step247 !== 2)) {
$e256.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al253,$temp_lam248,$step247,[a249,b250,c251],[]);
}
if(R.isPyretException($e256)) {
$e256.pyretStack.push($al253);
}
throw $e256;
}
};
var anf_obj284 = R.makeFunction($temp_lam248,"");
var $temp_lam258 = function($a259,$b260,$c261,$d262) {
var $step257 = 0;
var $ans263 = D;
var $al264 = L[54];
try {
if(R.isActivationRecord($a259)) {
$step257 = $a259.step;
$al264 = $a259.from;
$ans263 = $a259.ans;
a259 = $a259.args[0];
b260 = $a259.args[1];
c261 = $a259.args[2];
d262 = $a259.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[54],4,$t);
}
var a259 = $a259;
var b260 = $b260;
var c261 = $c261;
var d262 = $d262;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step257) {
case 0: $step257 = 1;
$al264 = L[52];
$field265 = R.getColonFieldLoc(raw$array6,"make4",L[52]);
if(R.isMethod($field265)) {
$ans263 = $field265.full_meth(raw$array6,a259,b260,c261,d262);
} else {
if(!(R.isFunction($field265))) {
R.ffi.throwNonFunApp(L[52],$field265);
}
$ans263 = $field265.app(a259,b260,c261,d262);
}
break;
case 1: var anf_arg266 = $ans263;
$step257 = 2;
$al264 = L[53];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al264,raw$array$to$list5);
}
$ans263 = raw$array$to$list5.app(anf_arg266);
break;
case 2: ++R.GAS;
return $ans263;
default: throw "No case numbered " + $step257 + " in $temp_lam258";
}
}
} catch($e267) {
if(R.isCont($e267) && ($step257 !== 2)) {
$e267.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al264,$temp_lam258,$step257,[a259,b260,c261,d262],[]);
}
if(R.isPyretException($e267)) {
$e267.pyretStack.push($al264);
}
throw $e267;
}
};
var anf_obj285 = R.makeFunction($temp_lam258,"");
var $temp_lam269 = function($a270,$b271,$c272,$d273,$e274) {
var $step268 = 0;
var $ans275 = D;
var $al276 = L[57];
try {
if(R.isActivationRecord($a270)) {
$step268 = $a270.step;
$al276 = $a270.from;
$ans275 = $a270.ans;
a270 = $a270.args[0];
b271 = $a270.args[1];
c272 = $a270.args[2];
d273 = $a270.args[3];
e274 = $a270.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[57],5,$t);
}
var a270 = $a270;
var b271 = $b271;
var c272 = $c272;
var d273 = $d273;
var e274 = $e274;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step268) {
case 0: $step268 = 1;
$al276 = L[55];
$field277 = R.getColonFieldLoc(raw$array6,"make5",L[55]);
if(R.isMethod($field277)) {
$ans275 = $field277.full_meth(raw$array6,a270,b271,c272,d273,e274);
} else {
if(!(R.isFunction($field277))) {
R.ffi.throwNonFunApp(L[55],$field277);
}
$ans275 = $field277.app(a270,b271,c272,d273,e274);
}
break;
case 1: var anf_arg278 = $ans275;
$step268 = 2;
$al276 = L[56];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al276,raw$array$to$list5);
}
$ans275 = raw$array$to$list5.app(anf_arg278);
break;
case 2: ++R.GAS;
return $ans275;
default: throw "No case numbered " + $step268 + " in $temp_lam269";
}
}
} catch($e279) {
if(R.isCont($e279) && ($step268 !== 2)) {
$e279.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al276,$temp_lam269,$step268,[a270,b271,c272,d273,e274],[]);
}
if(R.isPyretException($e279)) {
$e279.pyretStack.push($al276);
}
throw $e279;
}
};
var anf_obj286 = R.makeFunction($temp_lam269,"");
var locs865 = R.makeObject({"make":anf_obj280,
"make0":anf_obj281,
"make1":anf_obj282,
"make2":anf_obj283,
"make3":anf_obj284,
"make4":anf_obj285,
"make5":anf_obj286});
var $temp_lam288 = function($arr289) {
var $step287 = 0;
var $ans290 = D;
var $al291 = L[60];
try {
if(R.isActivationRecord($arr289)) {
$step287 = $arr289.step;
$al291 = $arr289.from;
$ans290 = $arr289.ans;
arr289 = $arr289.args[0];
anf_fun292 = $arr289.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[60],1,$t);
}
var arr289 = $arr289;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step287) {
case 0: var anf_fun292 = paragraph144.$var;
$step287 = 1;
$al291 = L[59];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al291,raw$array$to$list5);
}
$ans290 = raw$array$to$list5.app(arr289);
break;
case 1: var anf_arg293 = $ans290;
$step287 = 2;
$al291 = L[58];
if(!(R.isFunction(anf_fun292))) {
R.ffi.throwNonFunApp($al291,anf_fun292);
}
$ans290 = anf_fun292.app(anf_arg293);
break;
case 2: ++R.GAS;
return $ans290;
default: throw "No case numbered " + $step287 + " in $temp_lam288";
}
}
} catch($e294) {
if(R.isCont($e294) && ($step287 !== 2)) {
$e294.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al291,$temp_lam288,$step287,[arr289],[anf_fun292]);
}
if(R.isPyretException($e294)) {
$e294.pyretStack.push($al291);
}
throw $e294;
}
};
var anf_obj364 = R.makeFunction($temp_lam288,"");
var $temp_lam296 = function($$resumer101) {
var $step295 = 0;
var $ans297 = D;
var $al298 = L[64];
try {
if(R.isActivationRecord($$resumer101)) {
$step295 = $$resumer101.step;
$al298 = $$resumer101.from;
$ans297 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_fun301 = $$resumer101.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[64],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step295) {
case 0: var anf_fun301 = paragraph144.$var;
$step295 = 1;
$al298 = L[61];
$field299 = R.getColonFieldLoc(raw$array6,"make0",L[61]);
if(R.isMethod($field299)) {
$ans297 = $field299.full_meth(raw$array6);
} else {
if(!(R.isFunction($field299))) {
R.ffi.throwNonFunApp(L[61],$field299);
}
$ans297 = $field299.app();
}
break;
case 1: var anf_arg300 = $ans297;
$step295 = 2;
$al298 = L[63];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al298,raw$array$to$list5);
}
$ans297 = raw$array$to$list5.app(anf_arg300);
break;
case 2: var anf_arg302 = $ans297;
$step295 = 3;
$al298 = L[62];
if(!(R.isFunction(anf_fun301))) {
R.ffi.throwNonFunApp($al298,anf_fun301);
}
$ans297 = anf_fun301.app(anf_arg302);
break;
case 3: ++R.GAS;
return $ans297;
default: throw "No case numbered " + $step295 + " in $temp_lam296";
}
}
} catch($e303) {
if(R.isCont($e303) && ($step295 !== 3)) {
$e303.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al298,$temp_lam296,$step295,[],[anf_fun301]);
}
if(R.isPyretException($e303)) {
$e303.pyretStack.push($al298);
}
throw $e303;
}
};
var anf_obj365 = R.makeFunction($temp_lam296,"");
var $temp_lam305 = function($a306) {
var $step304 = 0;
var $ans307 = D;
var $al308 = L[68];
try {
if(R.isActivationRecord($a306)) {
$step304 = $a306.step;
$al308 = $a306.from;
$ans307 = $a306.ans;
a306 = $a306.args[0];
anf_fun311 = $a306.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[68],1,$t);
}
var a306 = $a306;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step304) {
case 0: var anf_fun311 = paragraph144.$var;
$step304 = 1;
$al308 = L[65];
$field309 = R.getColonFieldLoc(raw$array6,"make1",L[65]);
if(R.isMethod($field309)) {
$ans307 = $field309.full_meth(raw$array6,a306);
} else {
if(!(R.isFunction($field309))) {
R.ffi.throwNonFunApp(L[65],$field309);
}
$ans307 = $field309.app(a306);
}
break;
case 1: var anf_arg310 = $ans307;
$step304 = 2;
$al308 = L[67];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al308,raw$array$to$list5);
}
$ans307 = raw$array$to$list5.app(anf_arg310);
break;
case 2: var anf_arg312 = $ans307;
$step304 = 3;
$al308 = L[66];
if(!(R.isFunction(anf_fun311))) {
R.ffi.throwNonFunApp($al308,anf_fun311);
}
$ans307 = anf_fun311.app(anf_arg312);
break;
case 3: ++R.GAS;
return $ans307;
default: throw "No case numbered " + $step304 + " in $temp_lam305";
}
}
} catch($e313) {
if(R.isCont($e313) && ($step304 !== 3)) {
$e313.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al308,$temp_lam305,$step304,[a306],[anf_fun311]);
}
if(R.isPyretException($e313)) {
$e313.pyretStack.push($al308);
}
throw $e313;
}
};
var anf_obj366 = R.makeFunction($temp_lam305,"");
var $temp_lam315 = function($a316,$b317) {
var $step314 = 0;
var $ans318 = D;
var $al319 = L[72];
try {
if(R.isActivationRecord($a316)) {
$step314 = $a316.step;
$al319 = $a316.from;
$ans318 = $a316.ans;
a316 = $a316.args[0];
b317 = $a316.args[1];
anf_fun322 = $a316.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[72],2,$t);
}
var a316 = $a316;
var b317 = $b317;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step314) {
case 0: var anf_fun322 = paragraph144.$var;
$step314 = 1;
$al319 = L[69];
$field320 = R.getColonFieldLoc(raw$array6,"make2",L[69]);
if(R.isMethod($field320)) {
$ans318 = $field320.full_meth(raw$array6,a316,b317);
} else {
if(!(R.isFunction($field320))) {
R.ffi.throwNonFunApp(L[69],$field320);
}
$ans318 = $field320.app(a316,b317);
}
break;
case 1: var anf_arg321 = $ans318;
$step314 = 2;
$al319 = L[71];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al319,raw$array$to$list5);
}
$ans318 = raw$array$to$list5.app(anf_arg321);
break;
case 2: var anf_arg323 = $ans318;
$step314 = 3;
$al319 = L[70];
if(!(R.isFunction(anf_fun322))) {
R.ffi.throwNonFunApp($al319,anf_fun322);
}
$ans318 = anf_fun322.app(anf_arg323);
break;
case 3: ++R.GAS;
return $ans318;
default: throw "No case numbered " + $step314 + " in $temp_lam315";
}
}
} catch($e324) {
if(R.isCont($e324) && ($step314 !== 3)) {
$e324.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al319,$temp_lam315,$step314,[a316,b317],[anf_fun322]);
}
if(R.isPyretException($e324)) {
$e324.pyretStack.push($al319);
}
throw $e324;
}
};
var anf_obj367 = R.makeFunction($temp_lam315,"");
var $temp_lam326 = function($a327,$b328,$c329) {
var $step325 = 0;
var $ans330 = D;
var $al331 = L[76];
try {
if(R.isActivationRecord($a327)) {
$step325 = $a327.step;
$al331 = $a327.from;
$ans330 = $a327.ans;
a327 = $a327.args[0];
b328 = $a327.args[1];
c329 = $a327.args[2];
anf_fun334 = $a327.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[76],3,$t);
}
var a327 = $a327;
var b328 = $b328;
var c329 = $c329;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step325) {
case 0: var anf_fun334 = paragraph144.$var;
$step325 = 1;
$al331 = L[73];
$field332 = R.getColonFieldLoc(raw$array6,"make3",L[73]);
if(R.isMethod($field332)) {
$ans330 = $field332.full_meth(raw$array6,a327,b328,c329);
} else {
if(!(R.isFunction($field332))) {
R.ffi.throwNonFunApp(L[73],$field332);
}
$ans330 = $field332.app(a327,b328,c329);
}
break;
case 1: var anf_arg333 = $ans330;
$step325 = 2;
$al331 = L[75];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al331,raw$array$to$list5);
}
$ans330 = raw$array$to$list5.app(anf_arg333);
break;
case 2: var anf_arg335 = $ans330;
$step325 = 3;
$al331 = L[74];
if(!(R.isFunction(anf_fun334))) {
R.ffi.throwNonFunApp($al331,anf_fun334);
}
$ans330 = anf_fun334.app(anf_arg335);
break;
case 3: ++R.GAS;
return $ans330;
default: throw "No case numbered " + $step325 + " in $temp_lam326";
}
}
} catch($e336) {
if(R.isCont($e336) && ($step325 !== 3)) {
$e336.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al331,$temp_lam326,$step325,[a327,b328,c329],[anf_fun334]);
}
if(R.isPyretException($e336)) {
$e336.pyretStack.push($al331);
}
throw $e336;
}
};
var anf_obj368 = R.makeFunction($temp_lam326,"");
var $temp_lam338 = function($a339,$b340,$c341,$d342) {
var $step337 = 0;
var $ans343 = D;
var $al344 = L[80];
try {
if(R.isActivationRecord($a339)) {
$step337 = $a339.step;
$al344 = $a339.from;
$ans343 = $a339.ans;
a339 = $a339.args[0];
b340 = $a339.args[1];
c341 = $a339.args[2];
d342 = $a339.args[3];
anf_fun347 = $a339.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[80],4,$t);
}
var a339 = $a339;
var b340 = $b340;
var c341 = $c341;
var d342 = $d342;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step337) {
case 0: var anf_fun347 = paragraph144.$var;
$step337 = 1;
$al344 = L[77];
$field345 = R.getColonFieldLoc(raw$array6,"make4",L[77]);
if(R.isMethod($field345)) {
$ans343 = $field345.full_meth(raw$array6,a339,b340,c341,d342);
} else {
if(!(R.isFunction($field345))) {
R.ffi.throwNonFunApp(L[77],$field345);
}
$ans343 = $field345.app(a339,b340,c341,d342);
}
break;
case 1: var anf_arg346 = $ans343;
$step337 = 2;
$al344 = L[79];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al344,raw$array$to$list5);
}
$ans343 = raw$array$to$list5.app(anf_arg346);
break;
case 2: var anf_arg348 = $ans343;
$step337 = 3;
$al344 = L[78];
if(!(R.isFunction(anf_fun347))) {
R.ffi.throwNonFunApp($al344,anf_fun347);
}
$ans343 = anf_fun347.app(anf_arg348);
break;
case 3: ++R.GAS;
return $ans343;
default: throw "No case numbered " + $step337 + " in $temp_lam338";
}
}
} catch($e349) {
if(R.isCont($e349) && ($step337 !== 3)) {
$e349.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al344,$temp_lam338,$step337,[a339,b340,c341,d342],[anf_fun347]);
}
if(R.isPyretException($e349)) {
$e349.pyretStack.push($al344);
}
throw $e349;
}
};
var anf_obj369 = R.makeFunction($temp_lam338,"");
var $temp_lam351 = function($a352,$b353,$c354,$d355,$e356) {
var $step350 = 0;
var $ans357 = D;
var $al358 = L[84];
try {
if(R.isActivationRecord($a352)) {
$step350 = $a352.step;
$al358 = $a352.from;
$ans357 = $a352.ans;
a352 = $a352.args[0];
b353 = $a352.args[1];
c354 = $a352.args[2];
d355 = $a352.args[3];
e356 = $a352.args[4];
anf_fun361 = $a352.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[84],5,$t);
}
var a352 = $a352;
var b353 = $b353;
var c354 = $c354;
var d355 = $d355;
var e356 = $e356;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step350) {
case 0: var anf_fun361 = paragraph144.$var;
$step350 = 1;
$al358 = L[81];
$field359 = R.getColonFieldLoc(raw$array6,"make5",L[81]);
if(R.isMethod($field359)) {
$ans357 = $field359.full_meth(raw$array6,a352,b353,c354,d355,e356);
} else {
if(!(R.isFunction($field359))) {
R.ffi.throwNonFunApp(L[81],$field359);
}
$ans357 = $field359.app(a352,b353,c354,d355,e356);
}
break;
case 1: var anf_arg360 = $ans357;
$step350 = 2;
$al358 = L[83];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al358,raw$array$to$list5);
}
$ans357 = raw$array$to$list5.app(anf_arg360);
break;
case 2: var anf_arg362 = $ans357;
$step350 = 3;
$al358 = L[82];
if(!(R.isFunction(anf_fun361))) {
R.ffi.throwNonFunApp($al358,anf_fun361);
}
$ans357 = anf_fun361.app(anf_arg362);
break;
case 3: ++R.GAS;
return $ans357;
default: throw "No case numbered " + $step350 + " in $temp_lam351";
}
}
} catch($e363) {
if(R.isCont($e363) && ($step350 !== 3)) {
$e363.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al358,$temp_lam351,$step350,[a352,b353,c354,d355,e356],[anf_fun361]);
}
if(R.isPyretException($e363)) {
$e363.pyretStack.push($al358);
}
throw $e363;
}
};
var anf_obj370 = R.makeFunction($temp_lam351,"");
var para866 = R.makeObject({"make":anf_obj364,
"make0":anf_obj365,
"make1":anf_obj366,
"make2":anf_obj367,
"make3":anf_obj368,
"make4":anf_obj369,
"make5":anf_obj370});
var $temp_lam372 = function($arr373) {
var $step371 = 0;
var $ans374 = D;
var $al375 = L[87];
try {
if(R.isActivationRecord($arr373)) {
$step371 = $arr373.step;
$al375 = $arr373.from;
$ans374 = $arr373.ans;
arr373 = $arr373.args[0];
anf_fun376 = $arr373.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[87],1,$t);
}
var arr373 = $arr373;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step371) {
case 0: var anf_fun376 = h$sequence162.$var;
$step371 = 1;
$al375 = L[86];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al375,raw$array$to$list5);
}
$ans374 = raw$array$to$list5.app(arr373);
break;
case 1: var anf_arg377 = $ans374;
$step371 = 2;
$al375 = L[85];
if(!(R.isFunction(anf_fun376))) {
R.ffi.throwNonFunApp($al375,anf_fun376);
}
$ans374 = anf_fun376.app(anf_arg377,(" "));
break;
case 2: ++R.GAS;
return $ans374;
default: throw "No case numbered " + $step371 + " in $temp_lam372";
}
}
} catch($e378) {
if(R.isCont($e378) && ($step371 !== 2)) {
$e378.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al375,$temp_lam372,$step371,[arr373],[anf_fun376]);
}
if(R.isPyretException($e378)) {
$e378.pyretStack.push($al375);
}
throw $e378;
}
};
var anf_obj448 = R.makeFunction($temp_lam372,"");
var $temp_lam380 = function($$resumer101) {
var $step379 = 0;
var $ans381 = D;
var $al382 = L[91];
try {
if(R.isActivationRecord($$resumer101)) {
$step379 = $$resumer101.step;
$al382 = $$resumer101.from;
$ans381 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_fun385 = $$resumer101.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[91],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step379) {
case 0: var anf_fun385 = h$sequence162.$var;
$step379 = 1;
$al382 = L[88];
$field383 = R.getColonFieldLoc(raw$array6,"make0",L[88]);
if(R.isMethod($field383)) {
$ans381 = $field383.full_meth(raw$array6);
} else {
if(!(R.isFunction($field383))) {
R.ffi.throwNonFunApp(L[88],$field383);
}
$ans381 = $field383.app();
}
break;
case 1: var anf_arg384 = $ans381;
$step379 = 2;
$al382 = L[90];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al382,raw$array$to$list5);
}
$ans381 = raw$array$to$list5.app(anf_arg384);
break;
case 2: var anf_arg386 = $ans381;
$step379 = 3;
$al382 = L[89];
if(!(R.isFunction(anf_fun385))) {
R.ffi.throwNonFunApp($al382,anf_fun385);
}
$ans381 = anf_fun385.app(anf_arg386,(" "));
break;
case 3: ++R.GAS;
return $ans381;
default: throw "No case numbered " + $step379 + " in $temp_lam380";
}
}
} catch($e387) {
if(R.isCont($e387) && ($step379 !== 3)) {
$e387.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al382,$temp_lam380,$step379,[],[anf_fun385]);
}
if(R.isPyretException($e387)) {
$e387.pyretStack.push($al382);
}
throw $e387;
}
};
var anf_obj449 = R.makeFunction($temp_lam380,"");
var $temp_lam389 = function($a390) {
var $step388 = 0;
var $ans391 = D;
var $al392 = L[95];
try {
if(R.isActivationRecord($a390)) {
$step388 = $a390.step;
$al392 = $a390.from;
$ans391 = $a390.ans;
a390 = $a390.args[0];
anf_fun395 = $a390.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[95],1,$t);
}
var a390 = $a390;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step388) {
case 0: var anf_fun395 = h$sequence162.$var;
$step388 = 1;
$al392 = L[92];
$field393 = R.getColonFieldLoc(raw$array6,"make1",L[92]);
if(R.isMethod($field393)) {
$ans391 = $field393.full_meth(raw$array6,a390);
} else {
if(!(R.isFunction($field393))) {
R.ffi.throwNonFunApp(L[92],$field393);
}
$ans391 = $field393.app(a390);
}
break;
case 1: var anf_arg394 = $ans391;
$step388 = 2;
$al392 = L[94];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al392,raw$array$to$list5);
}
$ans391 = raw$array$to$list5.app(anf_arg394);
break;
case 2: var anf_arg396 = $ans391;
$step388 = 3;
$al392 = L[93];
if(!(R.isFunction(anf_fun395))) {
R.ffi.throwNonFunApp($al392,anf_fun395);
}
$ans391 = anf_fun395.app(anf_arg396,(" "));
break;
case 3: ++R.GAS;
return $ans391;
default: throw "No case numbered " + $step388 + " in $temp_lam389";
}
}
} catch($e397) {
if(R.isCont($e397) && ($step388 !== 3)) {
$e397.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al392,$temp_lam389,$step388,[a390],[anf_fun395]);
}
if(R.isPyretException($e397)) {
$e397.pyretStack.push($al392);
}
throw $e397;
}
};
var anf_obj450 = R.makeFunction($temp_lam389,"");
var $temp_lam399 = function($a400,$b401) {
var $step398 = 0;
var $ans402 = D;
var $al403 = L[99];
try {
if(R.isActivationRecord($a400)) {
$step398 = $a400.step;
$al403 = $a400.from;
$ans402 = $a400.ans;
a400 = $a400.args[0];
b401 = $a400.args[1];
anf_fun406 = $a400.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[99],2,$t);
}
var a400 = $a400;
var b401 = $b401;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step398) {
case 0: var anf_fun406 = h$sequence162.$var;
$step398 = 1;
$al403 = L[96];
$field404 = R.getColonFieldLoc(raw$array6,"make2",L[96]);
if(R.isMethod($field404)) {
$ans402 = $field404.full_meth(raw$array6,a400,b401);
} else {
if(!(R.isFunction($field404))) {
R.ffi.throwNonFunApp(L[96],$field404);
}
$ans402 = $field404.app(a400,b401);
}
break;
case 1: var anf_arg405 = $ans402;
$step398 = 2;
$al403 = L[98];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al403,raw$array$to$list5);
}
$ans402 = raw$array$to$list5.app(anf_arg405);
break;
case 2: var anf_arg407 = $ans402;
$step398 = 3;
$al403 = L[97];
if(!(R.isFunction(anf_fun406))) {
R.ffi.throwNonFunApp($al403,anf_fun406);
}
$ans402 = anf_fun406.app(anf_arg407,(" "));
break;
case 3: ++R.GAS;
return $ans402;
default: throw "No case numbered " + $step398 + " in $temp_lam399";
}
}
} catch($e408) {
if(R.isCont($e408) && ($step398 !== 3)) {
$e408.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al403,$temp_lam399,$step398,[a400,b401],[anf_fun406]);
}
if(R.isPyretException($e408)) {
$e408.pyretStack.push($al403);
}
throw $e408;
}
};
var anf_obj451 = R.makeFunction($temp_lam399,"");
var $temp_lam410 = function($a411,$b412,$c413) {
var $step409 = 0;
var $ans414 = D;
var $al415 = L[103];
try {
if(R.isActivationRecord($a411)) {
$step409 = $a411.step;
$al415 = $a411.from;
$ans414 = $a411.ans;
a411 = $a411.args[0];
b412 = $a411.args[1];
c413 = $a411.args[2];
anf_fun418 = $a411.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[103],3,$t);
}
var a411 = $a411;
var b412 = $b412;
var c413 = $c413;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step409) {
case 0: var anf_fun418 = h$sequence162.$var;
$step409 = 1;
$al415 = L[100];
$field416 = R.getColonFieldLoc(raw$array6,"make3",L[100]);
if(R.isMethod($field416)) {
$ans414 = $field416.full_meth(raw$array6,a411,b412,c413);
} else {
if(!(R.isFunction($field416))) {
R.ffi.throwNonFunApp(L[100],$field416);
}
$ans414 = $field416.app(a411,b412,c413);
}
break;
case 1: var anf_arg417 = $ans414;
$step409 = 2;
$al415 = L[102];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al415,raw$array$to$list5);
}
$ans414 = raw$array$to$list5.app(anf_arg417);
break;
case 2: var anf_arg419 = $ans414;
$step409 = 3;
$al415 = L[101];
if(!(R.isFunction(anf_fun418))) {
R.ffi.throwNonFunApp($al415,anf_fun418);
}
$ans414 = anf_fun418.app(anf_arg419,(" "));
break;
case 3: ++R.GAS;
return $ans414;
default: throw "No case numbered " + $step409 + " in $temp_lam410";
}
}
} catch($e420) {
if(R.isCont($e420) && ($step409 !== 3)) {
$e420.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al415,$temp_lam410,$step409,[a411,b412,c413],[anf_fun418]);
}
if(R.isPyretException($e420)) {
$e420.pyretStack.push($al415);
}
throw $e420;
}
};
var anf_obj452 = R.makeFunction($temp_lam410,"");
var $temp_lam422 = function($a423,$b424,$c425,$d426) {
var $step421 = 0;
var $ans427 = D;
var $al428 = L[107];
try {
if(R.isActivationRecord($a423)) {
$step421 = $a423.step;
$al428 = $a423.from;
$ans427 = $a423.ans;
a423 = $a423.args[0];
b424 = $a423.args[1];
c425 = $a423.args[2];
d426 = $a423.args[3];
anf_fun431 = $a423.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[107],4,$t);
}
var a423 = $a423;
var b424 = $b424;
var c425 = $c425;
var d426 = $d426;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step421) {
case 0: var anf_fun431 = h$sequence162.$var;
$step421 = 1;
$al428 = L[104];
$field429 = R.getColonFieldLoc(raw$array6,"make4",L[104]);
if(R.isMethod($field429)) {
$ans427 = $field429.full_meth(raw$array6,a423,b424,c425,d426);
} else {
if(!(R.isFunction($field429))) {
R.ffi.throwNonFunApp(L[104],$field429);
}
$ans427 = $field429.app(a423,b424,c425,d426);
}
break;
case 1: var anf_arg430 = $ans427;
$step421 = 2;
$al428 = L[106];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al428,raw$array$to$list5);
}
$ans427 = raw$array$to$list5.app(anf_arg430);
break;
case 2: var anf_arg432 = $ans427;
$step421 = 3;
$al428 = L[105];
if(!(R.isFunction(anf_fun431))) {
R.ffi.throwNonFunApp($al428,anf_fun431);
}
$ans427 = anf_fun431.app(anf_arg432,(" "));
break;
case 3: ++R.GAS;
return $ans427;
default: throw "No case numbered " + $step421 + " in $temp_lam422";
}
}
} catch($e433) {
if(R.isCont($e433) && ($step421 !== 3)) {
$e433.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al428,$temp_lam422,$step421,[a423,b424,c425,d426],[anf_fun431]);
}
if(R.isPyretException($e433)) {
$e433.pyretStack.push($al428);
}
throw $e433;
}
};
var anf_obj453 = R.makeFunction($temp_lam422,"");
var $temp_lam435 = function($a436,$b437,$c438,$d439,$e440) {
var $step434 = 0;
var $ans441 = D;
var $al442 = L[111];
try {
if(R.isActivationRecord($a436)) {
$step434 = $a436.step;
$al442 = $a436.from;
$ans441 = $a436.ans;
a436 = $a436.args[0];
b437 = $a436.args[1];
c438 = $a436.args[2];
d439 = $a436.args[3];
e440 = $a436.args[4];
anf_fun445 = $a436.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[111],5,$t);
}
var a436 = $a436;
var b437 = $b437;
var c438 = $c438;
var d439 = $d439;
var e440 = $e440;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step434) {
case 0: var anf_fun445 = h$sequence162.$var;
$step434 = 1;
$al442 = L[108];
$field443 = R.getColonFieldLoc(raw$array6,"make5",L[108]);
if(R.isMethod($field443)) {
$ans441 = $field443.full_meth(raw$array6,a436,b437,c438,d439,e440);
} else {
if(!(R.isFunction($field443))) {
R.ffi.throwNonFunApp(L[108],$field443);
}
$ans441 = $field443.app(a436,b437,c438,d439,e440);
}
break;
case 1: var anf_arg444 = $ans441;
$step434 = 2;
$al442 = L[110];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al442,raw$array$to$list5);
}
$ans441 = raw$array$to$list5.app(anf_arg444);
break;
case 2: var anf_arg446 = $ans441;
$step434 = 3;
$al442 = L[109];
if(!(R.isFunction(anf_fun445))) {
R.ffi.throwNonFunApp($al442,anf_fun445);
}
$ans441 = anf_fun445.app(anf_arg446,(" "));
break;
case 3: ++R.GAS;
return $ans441;
default: throw "No case numbered " + $step434 + " in $temp_lam435";
}
}
} catch($e447) {
if(R.isCont($e447) && ($step434 !== 3)) {
$e447.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al442,$temp_lam435,$step434,[a436,b437,c438,d439,e440],[anf_fun445]);
}
if(R.isPyretException($e447)) {
$e447.pyretStack.push($al442);
}
throw $e447;
}
};
var anf_obj454 = R.makeFunction($temp_lam435,"");
var sequence455 = R.makeObject({"make":anf_obj448,
"make0":anf_obj449,
"make1":anf_obj450,
"make2":anf_obj451,
"make3":anf_obj452,
"make4":anf_obj453,
"make5":anf_obj454});
var error867 = sequence455;
var $temp_lam457 = function($arr458) {
var $step456 = 0;
var $ans459 = D;
var $al460 = L[114];
try {
if(R.isActivationRecord($arr458)) {
$step456 = $arr458.step;
$al460 = $arr458.from;
$ans459 = $arr458.ans;
arr458 = $arr458.args[0];
anf_fun461 = $arr458.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[114],1,$t);
}
var arr458 = $arr458;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step456) {
case 0: var anf_fun461 = h$sequence162.$var;
$step456 = 1;
$al460 = L[113];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al460,raw$array$to$list5);
}
$ans459 = raw$array$to$list5.app(arr458);
break;
case 1: var anf_arg462 = $ans459;
$step456 = 2;
$al460 = L[112];
if(!(R.isFunction(anf_fun461))) {
R.ffi.throwNonFunApp($al460,anf_fun461);
}
$ans459 = anf_fun461.app(anf_arg462,(""));
break;
case 2: ++R.GAS;
return $ans459;
default: throw "No case numbered " + $step456 + " in $temp_lam457";
}
}
} catch($e463) {
if(R.isCont($e463) && ($step456 !== 2)) {
$e463.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al460,$temp_lam457,$step456,[arr458],[anf_fun461]);
}
if(R.isPyretException($e463)) {
$e463.pyretStack.push($al460);
}
throw $e463;
}
};
var anf_obj533 = R.makeFunction($temp_lam457,"");
var $temp_lam465 = function($$resumer101) {
var $step464 = 0;
var $ans466 = D;
var $al467 = L[118];
try {
if(R.isActivationRecord($$resumer101)) {
$step464 = $$resumer101.step;
$al467 = $$resumer101.from;
$ans466 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_fun470 = $$resumer101.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[118],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step464) {
case 0: var anf_fun470 = h$sequence162.$var;
$step464 = 1;
$al467 = L[115];
$field468 = R.getColonFieldLoc(raw$array6,"make0",L[115]);
if(R.isMethod($field468)) {
$ans466 = $field468.full_meth(raw$array6);
} else {
if(!(R.isFunction($field468))) {
R.ffi.throwNonFunApp(L[115],$field468);
}
$ans466 = $field468.app();
}
break;
case 1: var anf_arg469 = $ans466;
$step464 = 2;
$al467 = L[117];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al467,raw$array$to$list5);
}
$ans466 = raw$array$to$list5.app(anf_arg469);
break;
case 2: var anf_arg471 = $ans466;
$step464 = 3;
$al467 = L[116];
if(!(R.isFunction(anf_fun470))) {
R.ffi.throwNonFunApp($al467,anf_fun470);
}
$ans466 = anf_fun470.app(anf_arg471,(""));
break;
case 3: ++R.GAS;
return $ans466;
default: throw "No case numbered " + $step464 + " in $temp_lam465";
}
}
} catch($e472) {
if(R.isCont($e472) && ($step464 !== 3)) {
$e472.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al467,$temp_lam465,$step464,[],[anf_fun470]);
}
if(R.isPyretException($e472)) {
$e472.pyretStack.push($al467);
}
throw $e472;
}
};
var anf_obj534 = R.makeFunction($temp_lam465,"");
var $temp_lam474 = function($a475) {
var $step473 = 0;
var $ans476 = D;
var $al477 = L[122];
try {
if(R.isActivationRecord($a475)) {
$step473 = $a475.step;
$al477 = $a475.from;
$ans476 = $a475.ans;
a475 = $a475.args[0];
anf_fun480 = $a475.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[122],1,$t);
}
var a475 = $a475;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step473) {
case 0: var anf_fun480 = h$sequence162.$var;
$step473 = 1;
$al477 = L[119];
$field478 = R.getColonFieldLoc(raw$array6,"make1",L[119]);
if(R.isMethod($field478)) {
$ans476 = $field478.full_meth(raw$array6,a475);
} else {
if(!(R.isFunction($field478))) {
R.ffi.throwNonFunApp(L[119],$field478);
}
$ans476 = $field478.app(a475);
}
break;
case 1: var anf_arg479 = $ans476;
$step473 = 2;
$al477 = L[121];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al477,raw$array$to$list5);
}
$ans476 = raw$array$to$list5.app(anf_arg479);
break;
case 2: var anf_arg481 = $ans476;
$step473 = 3;
$al477 = L[120];
if(!(R.isFunction(anf_fun480))) {
R.ffi.throwNonFunApp($al477,anf_fun480);
}
$ans476 = anf_fun480.app(anf_arg481,(""));
break;
case 3: ++R.GAS;
return $ans476;
default: throw "No case numbered " + $step473 + " in $temp_lam474";
}
}
} catch($e482) {
if(R.isCont($e482) && ($step473 !== 3)) {
$e482.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al477,$temp_lam474,$step473,[a475],[anf_fun480]);
}
if(R.isPyretException($e482)) {
$e482.pyretStack.push($al477);
}
throw $e482;
}
};
var anf_obj535 = R.makeFunction($temp_lam474,"");
var $temp_lam484 = function($a485,$b486) {
var $step483 = 0;
var $ans487 = D;
var $al488 = L[126];
try {
if(R.isActivationRecord($a485)) {
$step483 = $a485.step;
$al488 = $a485.from;
$ans487 = $a485.ans;
a485 = $a485.args[0];
b486 = $a485.args[1];
anf_fun491 = $a485.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[126],2,$t);
}
var a485 = $a485;
var b486 = $b486;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step483) {
case 0: var anf_fun491 = h$sequence162.$var;
$step483 = 1;
$al488 = L[123];
$field489 = R.getColonFieldLoc(raw$array6,"make2",L[123]);
if(R.isMethod($field489)) {
$ans487 = $field489.full_meth(raw$array6,a485,b486);
} else {
if(!(R.isFunction($field489))) {
R.ffi.throwNonFunApp(L[123],$field489);
}
$ans487 = $field489.app(a485,b486);
}
break;
case 1: var anf_arg490 = $ans487;
$step483 = 2;
$al488 = L[125];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al488,raw$array$to$list5);
}
$ans487 = raw$array$to$list5.app(anf_arg490);
break;
case 2: var anf_arg492 = $ans487;
$step483 = 3;
$al488 = L[124];
if(!(R.isFunction(anf_fun491))) {
R.ffi.throwNonFunApp($al488,anf_fun491);
}
$ans487 = anf_fun491.app(anf_arg492,(""));
break;
case 3: ++R.GAS;
return $ans487;
default: throw "No case numbered " + $step483 + " in $temp_lam484";
}
}
} catch($e493) {
if(R.isCont($e493) && ($step483 !== 3)) {
$e493.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al488,$temp_lam484,$step483,[a485,b486],[anf_fun491]);
}
if(R.isPyretException($e493)) {
$e493.pyretStack.push($al488);
}
throw $e493;
}
};
var anf_obj536 = R.makeFunction($temp_lam484,"");
var $temp_lam495 = function($a496,$b497,$c498) {
var $step494 = 0;
var $ans499 = D;
var $al500 = L[130];
try {
if(R.isActivationRecord($a496)) {
$step494 = $a496.step;
$al500 = $a496.from;
$ans499 = $a496.ans;
a496 = $a496.args[0];
b497 = $a496.args[1];
c498 = $a496.args[2];
anf_fun503 = $a496.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[130],3,$t);
}
var a496 = $a496;
var b497 = $b497;
var c498 = $c498;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step494) {
case 0: var anf_fun503 = h$sequence162.$var;
$step494 = 1;
$al500 = L[127];
$field501 = R.getColonFieldLoc(raw$array6,"make3",L[127]);
if(R.isMethod($field501)) {
$ans499 = $field501.full_meth(raw$array6,a496,b497,c498);
} else {
if(!(R.isFunction($field501))) {
R.ffi.throwNonFunApp(L[127],$field501);
}
$ans499 = $field501.app(a496,b497,c498);
}
break;
case 1: var anf_arg502 = $ans499;
$step494 = 2;
$al500 = L[129];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al500,raw$array$to$list5);
}
$ans499 = raw$array$to$list5.app(anf_arg502);
break;
case 2: var anf_arg504 = $ans499;
$step494 = 3;
$al500 = L[128];
if(!(R.isFunction(anf_fun503))) {
R.ffi.throwNonFunApp($al500,anf_fun503);
}
$ans499 = anf_fun503.app(anf_arg504,(""));
break;
case 3: ++R.GAS;
return $ans499;
default: throw "No case numbered " + $step494 + " in $temp_lam495";
}
}
} catch($e505) {
if(R.isCont($e505) && ($step494 !== 3)) {
$e505.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al500,$temp_lam495,$step494,[a496,b497,c498],[anf_fun503]);
}
if(R.isPyretException($e505)) {
$e505.pyretStack.push($al500);
}
throw $e505;
}
};
var anf_obj537 = R.makeFunction($temp_lam495,"");
var $temp_lam507 = function($a508,$b509,$c510,$d511) {
var $step506 = 0;
var $ans512 = D;
var $al513 = L[134];
try {
if(R.isActivationRecord($a508)) {
$step506 = $a508.step;
$al513 = $a508.from;
$ans512 = $a508.ans;
a508 = $a508.args[0];
b509 = $a508.args[1];
c510 = $a508.args[2];
d511 = $a508.args[3];
anf_fun516 = $a508.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[134],4,$t);
}
var a508 = $a508;
var b509 = $b509;
var c510 = $c510;
var d511 = $d511;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step506) {
case 0: var anf_fun516 = h$sequence162.$var;
$step506 = 1;
$al513 = L[131];
$field514 = R.getColonFieldLoc(raw$array6,"make4",L[131]);
if(R.isMethod($field514)) {
$ans512 = $field514.full_meth(raw$array6,a508,b509,c510,d511);
} else {
if(!(R.isFunction($field514))) {
R.ffi.throwNonFunApp(L[131],$field514);
}
$ans512 = $field514.app(a508,b509,c510,d511);
}
break;
case 1: var anf_arg515 = $ans512;
$step506 = 2;
$al513 = L[133];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al513,raw$array$to$list5);
}
$ans512 = raw$array$to$list5.app(anf_arg515);
break;
case 2: var anf_arg517 = $ans512;
$step506 = 3;
$al513 = L[132];
if(!(R.isFunction(anf_fun516))) {
R.ffi.throwNonFunApp($al513,anf_fun516);
}
$ans512 = anf_fun516.app(anf_arg517,(""));
break;
case 3: ++R.GAS;
return $ans512;
default: throw "No case numbered " + $step506 + " in $temp_lam507";
}
}
} catch($e518) {
if(R.isCont($e518) && ($step506 !== 3)) {
$e518.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al513,$temp_lam507,$step506,[a508,b509,c510,d511],[anf_fun516]);
}
if(R.isPyretException($e518)) {
$e518.pyretStack.push($al513);
}
throw $e518;
}
};
var anf_obj538 = R.makeFunction($temp_lam507,"");
var $temp_lam520 = function($a521,$b522,$c523,$d524,$e525) {
var $step519 = 0;
var $ans526 = D;
var $al527 = L[138];
try {
if(R.isActivationRecord($a521)) {
$step519 = $a521.step;
$al527 = $a521.from;
$ans526 = $a521.ans;
a521 = $a521.args[0];
b522 = $a521.args[1];
c523 = $a521.args[2];
d524 = $a521.args[3];
e525 = $a521.args[4];
anf_fun530 = $a521.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[138],5,$t);
}
var a521 = $a521;
var b522 = $b522;
var c523 = $c523;
var d524 = $d524;
var e525 = $e525;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step519) {
case 0: var anf_fun530 = h$sequence162.$var;
$step519 = 1;
$al527 = L[135];
$field528 = R.getColonFieldLoc(raw$array6,"make5",L[135]);
if(R.isMethod($field528)) {
$ans526 = $field528.full_meth(raw$array6,a521,b522,c523,d524,e525);
} else {
if(!(R.isFunction($field528))) {
R.ffi.throwNonFunApp(L[135],$field528);
}
$ans526 = $field528.app(a521,b522,c523,d524,e525);
}
break;
case 1: var anf_arg529 = $ans526;
$step519 = 2;
$al527 = L[137];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al527,raw$array$to$list5);
}
$ans526 = raw$array$to$list5.app(anf_arg529);
break;
case 2: var anf_arg531 = $ans526;
$step519 = 3;
$al527 = L[136];
if(!(R.isFunction(anf_fun530))) {
R.ffi.throwNonFunApp($al527,anf_fun530);
}
$ans526 = anf_fun530.app(anf_arg531,(""));
break;
case 3: ++R.GAS;
return $ans526;
default: throw "No case numbered " + $step519 + " in $temp_lam520";
}
}
} catch($e532) {
if(R.isCont($e532) && ($step519 !== 3)) {
$e532.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al527,$temp_lam520,$step519,[a521,b522,c523,d524,e525],[anf_fun530]);
}
if(R.isPyretException($e532)) {
$e532.pyretStack.push($al527);
}
throw $e532;
}
};
var anf_obj539 = R.makeFunction($temp_lam520,"");
var para$nospace868 = R.makeObject({"make":anf_obj533,
"make0":anf_obj534,
"make1":anf_obj535,
"make2":anf_obj536,
"make3":anf_obj537,
"make4":anf_obj538,
"make5":anf_obj539});
var $temp_lam541 = function($arr542) {
var $step540 = 0;
var $ans543 = D;
var $al544 = L[141];
try {
if(R.isActivationRecord($arr542)) {
$step540 = $arr542.step;
$al544 = $arr542.from;
$ans543 = $arr542.ans;
arr542 = $arr542.args[0];
anf_fun545 = $arr542.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],1,$t);
}
var arr542 = $arr542;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step540) {
case 0: var anf_fun545 = bulleted$sequence150.$var;
$step540 = 1;
$al544 = L[140];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al544,raw$array$to$list5);
}
$ans543 = raw$array$to$list5.app(arr542);
break;
case 1: var anf_arg546 = $ans543;
$step540 = 2;
$al544 = L[139];
if(!(R.isFunction(anf_fun545))) {
R.ffi.throwNonFunApp($al544,anf_fun545);
}
$ans543 = anf_fun545.app(anf_arg546);
break;
case 2: ++R.GAS;
return $ans543;
default: throw "No case numbered " + $step540 + " in $temp_lam541";
}
}
} catch($e547) {
if(R.isCont($e547) && ($step540 !== 2)) {
$e547.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al544,$temp_lam541,$step540,[arr542],[anf_fun545]);
}
if(R.isPyretException($e547)) {
$e547.pyretStack.push($al544);
}
throw $e547;
}
};
var anf_obj617 = R.makeFunction($temp_lam541,"");
var $temp_lam549 = function($$resumer101) {
var $step548 = 0;
var $ans550 = D;
var $al551 = L[145];
try {
if(R.isActivationRecord($$resumer101)) {
$step548 = $$resumer101.step;
$al551 = $$resumer101.from;
$ans550 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_fun554 = $$resumer101.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[145],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step548) {
case 0: var anf_fun554 = bulleted$sequence150.$var;
$step548 = 1;
$al551 = L[142];
$field552 = R.getColonFieldLoc(raw$array6,"make0",L[142]);
if(R.isMethod($field552)) {
$ans550 = $field552.full_meth(raw$array6);
} else {
if(!(R.isFunction($field552))) {
R.ffi.throwNonFunApp(L[142],$field552);
}
$ans550 = $field552.app();
}
break;
case 1: var anf_arg553 = $ans550;
$step548 = 2;
$al551 = L[144];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al551,raw$array$to$list5);
}
$ans550 = raw$array$to$list5.app(anf_arg553);
break;
case 2: var anf_arg555 = $ans550;
$step548 = 3;
$al551 = L[143];
if(!(R.isFunction(anf_fun554))) {
R.ffi.throwNonFunApp($al551,anf_fun554);
}
$ans550 = anf_fun554.app(anf_arg555);
break;
case 3: ++R.GAS;
return $ans550;
default: throw "No case numbered " + $step548 + " in $temp_lam549";
}
}
} catch($e556) {
if(R.isCont($e556) && ($step548 !== 3)) {
$e556.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al551,$temp_lam549,$step548,[],[anf_fun554]);
}
if(R.isPyretException($e556)) {
$e556.pyretStack.push($al551);
}
throw $e556;
}
};
var anf_obj618 = R.makeFunction($temp_lam549,"");
var $temp_lam558 = function($a559) {
var $step557 = 0;
var $ans560 = D;
var $al561 = L[149];
try {
if(R.isActivationRecord($a559)) {
$step557 = $a559.step;
$al561 = $a559.from;
$ans560 = $a559.ans;
a559 = $a559.args[0];
anf_fun564 = $a559.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[149],1,$t);
}
var a559 = $a559;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step557) {
case 0: var anf_fun564 = bulleted$sequence150.$var;
$step557 = 1;
$al561 = L[146];
$field562 = R.getColonFieldLoc(raw$array6,"make1",L[146]);
if(R.isMethod($field562)) {
$ans560 = $field562.full_meth(raw$array6,a559);
} else {
if(!(R.isFunction($field562))) {
R.ffi.throwNonFunApp(L[146],$field562);
}
$ans560 = $field562.app(a559);
}
break;
case 1: var anf_arg563 = $ans560;
$step557 = 2;
$al561 = L[148];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al561,raw$array$to$list5);
}
$ans560 = raw$array$to$list5.app(anf_arg563);
break;
case 2: var anf_arg565 = $ans560;
$step557 = 3;
$al561 = L[147];
if(!(R.isFunction(anf_fun564))) {
R.ffi.throwNonFunApp($al561,anf_fun564);
}
$ans560 = anf_fun564.app(anf_arg565);
break;
case 3: ++R.GAS;
return $ans560;
default: throw "No case numbered " + $step557 + " in $temp_lam558";
}
}
} catch($e566) {
if(R.isCont($e566) && ($step557 !== 3)) {
$e566.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al561,$temp_lam558,$step557,[a559],[anf_fun564]);
}
if(R.isPyretException($e566)) {
$e566.pyretStack.push($al561);
}
throw $e566;
}
};
var anf_obj619 = R.makeFunction($temp_lam558,"");
var $temp_lam568 = function($a569,$b570) {
var $step567 = 0;
var $ans571 = D;
var $al572 = L[153];
try {
if(R.isActivationRecord($a569)) {
$step567 = $a569.step;
$al572 = $a569.from;
$ans571 = $a569.ans;
a569 = $a569.args[0];
b570 = $a569.args[1];
anf_fun575 = $a569.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[153],2,$t);
}
var a569 = $a569;
var b570 = $b570;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step567) {
case 0: var anf_fun575 = bulleted$sequence150.$var;
$step567 = 1;
$al572 = L[150];
$field573 = R.getColonFieldLoc(raw$array6,"make2",L[150]);
if(R.isMethod($field573)) {
$ans571 = $field573.full_meth(raw$array6,a569,b570);
} else {
if(!(R.isFunction($field573))) {
R.ffi.throwNonFunApp(L[150],$field573);
}
$ans571 = $field573.app(a569,b570);
}
break;
case 1: var anf_arg574 = $ans571;
$step567 = 2;
$al572 = L[152];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al572,raw$array$to$list5);
}
$ans571 = raw$array$to$list5.app(anf_arg574);
break;
case 2: var anf_arg576 = $ans571;
$step567 = 3;
$al572 = L[151];
if(!(R.isFunction(anf_fun575))) {
R.ffi.throwNonFunApp($al572,anf_fun575);
}
$ans571 = anf_fun575.app(anf_arg576);
break;
case 3: ++R.GAS;
return $ans571;
default: throw "No case numbered " + $step567 + " in $temp_lam568";
}
}
} catch($e577) {
if(R.isCont($e577) && ($step567 !== 3)) {
$e577.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al572,$temp_lam568,$step567,[a569,b570],[anf_fun575]);
}
if(R.isPyretException($e577)) {
$e577.pyretStack.push($al572);
}
throw $e577;
}
};
var anf_obj620 = R.makeFunction($temp_lam568,"");
var $temp_lam579 = function($a580,$b581,$c582) {
var $step578 = 0;
var $ans583 = D;
var $al584 = L[157];
try {
if(R.isActivationRecord($a580)) {
$step578 = $a580.step;
$al584 = $a580.from;
$ans583 = $a580.ans;
a580 = $a580.args[0];
b581 = $a580.args[1];
c582 = $a580.args[2];
anf_fun587 = $a580.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[157],3,$t);
}
var a580 = $a580;
var b581 = $b581;
var c582 = $c582;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step578) {
case 0: var anf_fun587 = bulleted$sequence150.$var;
$step578 = 1;
$al584 = L[154];
$field585 = R.getColonFieldLoc(raw$array6,"make3",L[154]);
if(R.isMethod($field585)) {
$ans583 = $field585.full_meth(raw$array6,a580,b581,c582);
} else {
if(!(R.isFunction($field585))) {
R.ffi.throwNonFunApp(L[154],$field585);
}
$ans583 = $field585.app(a580,b581,c582);
}
break;
case 1: var anf_arg586 = $ans583;
$step578 = 2;
$al584 = L[156];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al584,raw$array$to$list5);
}
$ans583 = raw$array$to$list5.app(anf_arg586);
break;
case 2: var anf_arg588 = $ans583;
$step578 = 3;
$al584 = L[155];
if(!(R.isFunction(anf_fun587))) {
R.ffi.throwNonFunApp($al584,anf_fun587);
}
$ans583 = anf_fun587.app(anf_arg588);
break;
case 3: ++R.GAS;
return $ans583;
default: throw "No case numbered " + $step578 + " in $temp_lam579";
}
}
} catch($e589) {
if(R.isCont($e589) && ($step578 !== 3)) {
$e589.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al584,$temp_lam579,$step578,[a580,b581,c582],[anf_fun587]);
}
if(R.isPyretException($e589)) {
$e589.pyretStack.push($al584);
}
throw $e589;
}
};
var anf_obj621 = R.makeFunction($temp_lam579,"");
var $temp_lam591 = function($a592,$b593,$c594,$d595) {
var $step590 = 0;
var $ans596 = D;
var $al597 = L[161];
try {
if(R.isActivationRecord($a592)) {
$step590 = $a592.step;
$al597 = $a592.from;
$ans596 = $a592.ans;
a592 = $a592.args[0];
b593 = $a592.args[1];
c594 = $a592.args[2];
d595 = $a592.args[3];
anf_fun600 = $a592.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[161],4,$t);
}
var a592 = $a592;
var b593 = $b593;
var c594 = $c594;
var d595 = $d595;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step590) {
case 0: var anf_fun600 = bulleted$sequence150.$var;
$step590 = 1;
$al597 = L[158];
$field598 = R.getColonFieldLoc(raw$array6,"make4",L[158]);
if(R.isMethod($field598)) {
$ans596 = $field598.full_meth(raw$array6,a592,b593,c594,d595);
} else {
if(!(R.isFunction($field598))) {
R.ffi.throwNonFunApp(L[158],$field598);
}
$ans596 = $field598.app(a592,b593,c594,d595);
}
break;
case 1: var anf_arg599 = $ans596;
$step590 = 2;
$al597 = L[160];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al597,raw$array$to$list5);
}
$ans596 = raw$array$to$list5.app(anf_arg599);
break;
case 2: var anf_arg601 = $ans596;
$step590 = 3;
$al597 = L[159];
if(!(R.isFunction(anf_fun600))) {
R.ffi.throwNonFunApp($al597,anf_fun600);
}
$ans596 = anf_fun600.app(anf_arg601);
break;
case 3: ++R.GAS;
return $ans596;
default: throw "No case numbered " + $step590 + " in $temp_lam591";
}
}
} catch($e602) {
if(R.isCont($e602) && ($step590 !== 3)) {
$e602.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al597,$temp_lam591,$step590,[a592,b593,c594,d595],[anf_fun600]);
}
if(R.isPyretException($e602)) {
$e602.pyretStack.push($al597);
}
throw $e602;
}
};
var anf_obj622 = R.makeFunction($temp_lam591,"");
var $temp_lam604 = function($a605,$b606,$c607,$d608,$e609) {
var $step603 = 0;
var $ans610 = D;
var $al611 = L[165];
try {
if(R.isActivationRecord($a605)) {
$step603 = $a605.step;
$al611 = $a605.from;
$ans610 = $a605.ans;
a605 = $a605.args[0];
b606 = $a605.args[1];
c607 = $a605.args[2];
d608 = $a605.args[3];
e609 = $a605.args[4];
anf_fun614 = $a605.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[165],5,$t);
}
var a605 = $a605;
var b606 = $b606;
var c607 = $c607;
var d608 = $d608;
var e609 = $e609;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step603) {
case 0: var anf_fun614 = bulleted$sequence150.$var;
$step603 = 1;
$al611 = L[162];
$field612 = R.getColonFieldLoc(raw$array6,"make5",L[162]);
if(R.isMethod($field612)) {
$ans610 = $field612.full_meth(raw$array6,a605,b606,c607,d608,e609);
} else {
if(!(R.isFunction($field612))) {
R.ffi.throwNonFunApp(L[162],$field612);
}
$ans610 = $field612.app(a605,b606,c607,d608,e609);
}
break;
case 1: var anf_arg613 = $ans610;
$step603 = 2;
$al611 = L[164];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al611,raw$array$to$list5);
}
$ans610 = raw$array$to$list5.app(anf_arg613);
break;
case 2: var anf_arg615 = $ans610;
$step603 = 3;
$al611 = L[163];
if(!(R.isFunction(anf_fun614))) {
R.ffi.throwNonFunApp($al611,anf_fun614);
}
$ans610 = anf_fun614.app(anf_arg615);
break;
case 3: ++R.GAS;
return $ans610;
default: throw "No case numbered " + $step603 + " in $temp_lam604";
}
}
} catch($e616) {
if(R.isCont($e616) && ($step603 !== 3)) {
$e616.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al611,$temp_lam604,$step603,[a605,b606,c607,d608,e609],[anf_fun614]);
}
if(R.isPyretException($e616)) {
$e616.pyretStack.push($al611);
}
throw $e616;
}
};
var anf_obj623 = R.makeFunction($temp_lam604,"");
var bulleted869 = R.makeObject({"make":anf_obj617,
"make0":anf_obj618,
"make1":anf_obj619,
"make2":anf_obj620,
"make3":anf_obj621,
"make4":anf_obj622,
"make5":anf_obj623});
var $temp_lam625 = function($arr626) {
var $step624 = 0;
var $ans627 = D;
var $al628 = L[169];
try {
if(R.isActivationRecord($arr626)) {
$step624 = $arr626.step;
$al628 = $arr626.from;
$ans627 = $arr626.ans;
arr626 = $arr626.args[0];
anf_fun631 = $arr626.vars[0];
anf_fun629 = $arr626.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[169],1,$t);
}
var arr626 = $arr626;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step624) {
case 0: var anf_fun631 = optional210.$var;
var anf_fun629 = v$sequence156.$var;
$step624 = 1;
$al628 = L[168];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al628,raw$array$to$list5);
}
$ans627 = raw$array$to$list5.app(arr626);
break;
case 1: var anf_arg630 = $ans627;
$step624 = 2;
$al628 = L[167];
if(!(R.isFunction(anf_fun629))) {
R.ffi.throwNonFunApp($al628,anf_fun629);
}
$ans627 = anf_fun629.app(anf_arg630);
break;
case 2: var anf_arg632 = $ans627;
$step624 = 3;
$al628 = L[166];
if(!(R.isFunction(anf_fun631))) {
R.ffi.throwNonFunApp($al628,anf_fun631);
}
$ans627 = anf_fun631.app(anf_arg632);
break;
case 3: ++R.GAS;
return $ans627;
default: throw "No case numbered " + $step624 + " in $temp_lam625";
}
}
} catch($e633) {
if(R.isCont($e633) && ($step624 !== 3)) {
$e633.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al628,$temp_lam625,$step624,[arr626],[anf_fun631,anf_fun629]);
}
if(R.isPyretException($e633)) {
$e633.pyretStack.push($al628);
}
throw $e633;
}
};
var anf_obj715 = R.makeFunction($temp_lam625,"");
var $temp_lam635 = function($$resumer101) {
var $step634 = 0;
var $ans636 = D;
var $al637 = L[174];
try {
if(R.isActivationRecord($$resumer101)) {
$step634 = $$resumer101.step;
$al637 = $$resumer101.from;
$ans636 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_fun642 = $$resumer101.vars[0];
anf_fun640 = $$resumer101.vars[1];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[174],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step634) {
case 0: var anf_fun642 = optional210.$var;
var anf_fun640 = v$sequence156.$var;
$step634 = 1;
$al637 = L[170];
$field638 = R.getColonFieldLoc(raw$array6,"make0",L[170]);
if(R.isMethod($field638)) {
$ans636 = $field638.full_meth(raw$array6);
} else {
if(!(R.isFunction($field638))) {
R.ffi.throwNonFunApp(L[170],$field638);
}
$ans636 = $field638.app();
}
break;
case 1: var anf_arg639 = $ans636;
$step634 = 2;
$al637 = L[173];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al637,raw$array$to$list5);
}
$ans636 = raw$array$to$list5.app(anf_arg639);
break;
case 2: var anf_arg641 = $ans636;
$step634 = 3;
$al637 = L[172];
if(!(R.isFunction(anf_fun640))) {
R.ffi.throwNonFunApp($al637,anf_fun640);
}
$ans636 = anf_fun640.app(anf_arg641);
break;
case 3: var anf_arg643 = $ans636;
$step634 = 4;
$al637 = L[171];
if(!(R.isFunction(anf_fun642))) {
R.ffi.throwNonFunApp($al637,anf_fun642);
}
$ans636 = anf_fun642.app(anf_arg643);
break;
case 4: ++R.GAS;
return $ans636;
default: throw "No case numbered " + $step634 + " in $temp_lam635";
}
}
} catch($e644) {
if(R.isCont($e644) && ($step634 !== 4)) {
$e644.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al637,$temp_lam635,$step634,[],[anf_fun642,anf_fun640]);
}
if(R.isPyretException($e644)) {
$e644.pyretStack.push($al637);
}
throw $e644;
}
};
var anf_obj716 = R.makeFunction($temp_lam635,"");
var $temp_lam646 = function($a647) {
var $step645 = 0;
var $ans648 = D;
var $al649 = L[179];
try {
if(R.isActivationRecord($a647)) {
$step645 = $a647.step;
$al649 = $a647.from;
$ans648 = $a647.ans;
a647 = $a647.args[0];
anf_fun654 = $a647.vars[0];
anf_fun652 = $a647.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[179],1,$t);
}
var a647 = $a647;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step645) {
case 0: var anf_fun654 = optional210.$var;
var anf_fun652 = v$sequence156.$var;
$step645 = 1;
$al649 = L[175];
$field650 = R.getColonFieldLoc(raw$array6,"make1",L[175]);
if(R.isMethod($field650)) {
$ans648 = $field650.full_meth(raw$array6,a647);
} else {
if(!(R.isFunction($field650))) {
R.ffi.throwNonFunApp(L[175],$field650);
}
$ans648 = $field650.app(a647);
}
break;
case 1: var anf_arg651 = $ans648;
$step645 = 2;
$al649 = L[178];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al649,raw$array$to$list5);
}
$ans648 = raw$array$to$list5.app(anf_arg651);
break;
case 2: var anf_arg653 = $ans648;
$step645 = 3;
$al649 = L[177];
if(!(R.isFunction(anf_fun652))) {
R.ffi.throwNonFunApp($al649,anf_fun652);
}
$ans648 = anf_fun652.app(anf_arg653);
break;
case 3: var anf_arg655 = $ans648;
$step645 = 4;
$al649 = L[176];
if(!(R.isFunction(anf_fun654))) {
R.ffi.throwNonFunApp($al649,anf_fun654);
}
$ans648 = anf_fun654.app(anf_arg655);
break;
case 4: ++R.GAS;
return $ans648;
default: throw "No case numbered " + $step645 + " in $temp_lam646";
}
}
} catch($e656) {
if(R.isCont($e656) && ($step645 !== 4)) {
$e656.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al649,$temp_lam646,$step645,[a647],[anf_fun654,anf_fun652]);
}
if(R.isPyretException($e656)) {
$e656.pyretStack.push($al649);
}
throw $e656;
}
};
var anf_obj717 = R.makeFunction($temp_lam646,"");
var $temp_lam658 = function($a659,$b660) {
var $step657 = 0;
var $ans661 = D;
var $al662 = L[184];
try {
if(R.isActivationRecord($a659)) {
$step657 = $a659.step;
$al662 = $a659.from;
$ans661 = $a659.ans;
a659 = $a659.args[0];
b660 = $a659.args[1];
anf_fun667 = $a659.vars[0];
anf_fun665 = $a659.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[184],2,$t);
}
var a659 = $a659;
var b660 = $b660;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step657) {
case 0: var anf_fun667 = optional210.$var;
var anf_fun665 = v$sequence156.$var;
$step657 = 1;
$al662 = L[180];
$field663 = R.getColonFieldLoc(raw$array6,"make2",L[180]);
if(R.isMethod($field663)) {
$ans661 = $field663.full_meth(raw$array6,a659,b660);
} else {
if(!(R.isFunction($field663))) {
R.ffi.throwNonFunApp(L[180],$field663);
}
$ans661 = $field663.app(a659,b660);
}
break;
case 1: var anf_arg664 = $ans661;
$step657 = 2;
$al662 = L[183];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al662,raw$array$to$list5);
}
$ans661 = raw$array$to$list5.app(anf_arg664);
break;
case 2: var anf_arg666 = $ans661;
$step657 = 3;
$al662 = L[182];
if(!(R.isFunction(anf_fun665))) {
R.ffi.throwNonFunApp($al662,anf_fun665);
}
$ans661 = anf_fun665.app(anf_arg666);
break;
case 3: var anf_arg668 = $ans661;
$step657 = 4;
$al662 = L[181];
if(!(R.isFunction(anf_fun667))) {
R.ffi.throwNonFunApp($al662,anf_fun667);
}
$ans661 = anf_fun667.app(anf_arg668);
break;
case 4: ++R.GAS;
return $ans661;
default: throw "No case numbered " + $step657 + " in $temp_lam658";
}
}
} catch($e669) {
if(R.isCont($e669) && ($step657 !== 4)) {
$e669.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al662,$temp_lam658,$step657,[a659,b660],[anf_fun667,anf_fun665]);
}
if(R.isPyretException($e669)) {
$e669.pyretStack.push($al662);
}
throw $e669;
}
};
var anf_obj718 = R.makeFunction($temp_lam658,"");
var $temp_lam671 = function($a672,$b673,$c674) {
var $step670 = 0;
var $ans675 = D;
var $al676 = L[189];
try {
if(R.isActivationRecord($a672)) {
$step670 = $a672.step;
$al676 = $a672.from;
$ans675 = $a672.ans;
a672 = $a672.args[0];
b673 = $a672.args[1];
c674 = $a672.args[2];
anf_fun681 = $a672.vars[0];
anf_fun679 = $a672.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[189],3,$t);
}
var a672 = $a672;
var b673 = $b673;
var c674 = $c674;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step670) {
case 0: var anf_fun681 = optional210.$var;
var anf_fun679 = v$sequence156.$var;
$step670 = 1;
$al676 = L[185];
$field677 = R.getColonFieldLoc(raw$array6,"make3",L[185]);
if(R.isMethod($field677)) {
$ans675 = $field677.full_meth(raw$array6,a672,b673,c674);
} else {
if(!(R.isFunction($field677))) {
R.ffi.throwNonFunApp(L[185],$field677);
}
$ans675 = $field677.app(a672,b673,c674);
}
break;
case 1: var anf_arg678 = $ans675;
$step670 = 2;
$al676 = L[188];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al676,raw$array$to$list5);
}
$ans675 = raw$array$to$list5.app(anf_arg678);
break;
case 2: var anf_arg680 = $ans675;
$step670 = 3;
$al676 = L[187];
if(!(R.isFunction(anf_fun679))) {
R.ffi.throwNonFunApp($al676,anf_fun679);
}
$ans675 = anf_fun679.app(anf_arg680);
break;
case 3: var anf_arg682 = $ans675;
$step670 = 4;
$al676 = L[186];
if(!(R.isFunction(anf_fun681))) {
R.ffi.throwNonFunApp($al676,anf_fun681);
}
$ans675 = anf_fun681.app(anf_arg682);
break;
case 4: ++R.GAS;
return $ans675;
default: throw "No case numbered " + $step670 + " in $temp_lam671";
}
}
} catch($e683) {
if(R.isCont($e683) && ($step670 !== 4)) {
$e683.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al676,$temp_lam671,$step670,[a672,b673,c674],[anf_fun681,anf_fun679]);
}
if(R.isPyretException($e683)) {
$e683.pyretStack.push($al676);
}
throw $e683;
}
};
var anf_obj719 = R.makeFunction($temp_lam671,"");
var $temp_lam685 = function($a686,$b687,$c688,$d689) {
var $step684 = 0;
var $ans690 = D;
var $al691 = L[194];
try {
if(R.isActivationRecord($a686)) {
$step684 = $a686.step;
$al691 = $a686.from;
$ans690 = $a686.ans;
a686 = $a686.args[0];
b687 = $a686.args[1];
c688 = $a686.args[2];
d689 = $a686.args[3];
anf_fun696 = $a686.vars[0];
anf_fun694 = $a686.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[194],4,$t);
}
var a686 = $a686;
var b687 = $b687;
var c688 = $c688;
var d689 = $d689;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step684) {
case 0: var anf_fun696 = optional210.$var;
var anf_fun694 = v$sequence156.$var;
$step684 = 1;
$al691 = L[190];
$field692 = R.getColonFieldLoc(raw$array6,"make4",L[190]);
if(R.isMethod($field692)) {
$ans690 = $field692.full_meth(raw$array6,a686,b687,c688,d689);
} else {
if(!(R.isFunction($field692))) {
R.ffi.throwNonFunApp(L[190],$field692);
}
$ans690 = $field692.app(a686,b687,c688,d689);
}
break;
case 1: var anf_arg693 = $ans690;
$step684 = 2;
$al691 = L[193];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al691,raw$array$to$list5);
}
$ans690 = raw$array$to$list5.app(anf_arg693);
break;
case 2: var anf_arg695 = $ans690;
$step684 = 3;
$al691 = L[192];
if(!(R.isFunction(anf_fun694))) {
R.ffi.throwNonFunApp($al691,anf_fun694);
}
$ans690 = anf_fun694.app(anf_arg695);
break;
case 3: var anf_arg697 = $ans690;
$step684 = 4;
$al691 = L[191];
if(!(R.isFunction(anf_fun696))) {
R.ffi.throwNonFunApp($al691,anf_fun696);
}
$ans690 = anf_fun696.app(anf_arg697);
break;
case 4: ++R.GAS;
return $ans690;
default: throw "No case numbered " + $step684 + " in $temp_lam685";
}
}
} catch($e698) {
if(R.isCont($e698) && ($step684 !== 4)) {
$e698.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al691,$temp_lam685,$step684,[a686,b687,c688,d689],[anf_fun696,anf_fun694]);
}
if(R.isPyretException($e698)) {
$e698.pyretStack.push($al691);
}
throw $e698;
}
};
var anf_obj720 = R.makeFunction($temp_lam685,"");
var $temp_lam700 = function($a701,$b702,$c703,$d704,$e705) {
var $step699 = 0;
var $ans706 = D;
var $al707 = L[199];
try {
if(R.isActivationRecord($a701)) {
$step699 = $a701.step;
$al707 = $a701.from;
$ans706 = $a701.ans;
a701 = $a701.args[0];
b702 = $a701.args[1];
c703 = $a701.args[2];
d704 = $a701.args[3];
e705 = $a701.args[4];
anf_fun712 = $a701.vars[0];
anf_fun710 = $a701.vars[1];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[199],5,$t);
}
var a701 = $a701;
var b702 = $b702;
var c703 = $c703;
var d704 = $d704;
var e705 = $e705;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step699) {
case 0: var anf_fun712 = optional210.$var;
var anf_fun710 = v$sequence156.$var;
$step699 = 1;
$al707 = L[195];
$field708 = R.getColonFieldLoc(raw$array6,"make5",L[195]);
if(R.isMethod($field708)) {
$ans706 = $field708.full_meth(raw$array6,a701,b702,c703,d704,e705);
} else {
if(!(R.isFunction($field708))) {
R.ffi.throwNonFunApp(L[195],$field708);
}
$ans706 = $field708.app(a701,b702,c703,d704,e705);
}
break;
case 1: var anf_arg709 = $ans706;
$step699 = 2;
$al707 = L[198];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al707,raw$array$to$list5);
}
$ans706 = raw$array$to$list5.app(anf_arg709);
break;
case 2: var anf_arg711 = $ans706;
$step699 = 3;
$al707 = L[197];
if(!(R.isFunction(anf_fun710))) {
R.ffi.throwNonFunApp($al707,anf_fun710);
}
$ans706 = anf_fun710.app(anf_arg711);
break;
case 3: var anf_arg713 = $ans706;
$step699 = 4;
$al707 = L[196];
if(!(R.isFunction(anf_fun712))) {
R.ffi.throwNonFunApp($al707,anf_fun712);
}
$ans706 = anf_fun712.app(anf_arg713);
break;
case 4: ++R.GAS;
return $ans706;
default: throw "No case numbered " + $step699 + " in $temp_lam700";
}
}
} catch($e714) {
if(R.isCont($e714) && ($step699 !== 4)) {
$e714.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al707,$temp_lam700,$step699,[a701,b702,c703,d704,e705],[anf_fun712,anf_fun710]);
}
if(R.isPyretException($e714)) {
$e714.pyretStack.push($al707);
}
throw $e714;
}
};
var anf_obj721 = R.makeFunction($temp_lam700,"");
var opt870 = R.makeObject({"make":anf_obj715,
"make0":anf_obj716,
"make1":anf_obj717,
"make2":anf_obj718,
"make3":anf_obj719,
"make4":anf_obj720,
"make5":anf_obj721});
var ed$args737 = {"$var":D};
var ed$names753 = {"$var":D};
var ed$fields769 = {"$var":D};
var ed$field$bindings785 = {"$var":D};
var ed$params801 = {"$var":D};
var ed$components817 = {"$var":D};
var ed$nth836 = {"$var":D};
var $temp_lam723 = function($n724) {
var $step722 = 0;
var $ans725 = D;
var $al726 = L[204];
try {
if(R.isActivationRecord($n724)) {
$step722 = $n724.step;
$al726 = $n724.from;
$ans725 = $n724.ans;
n724 = $n724.args[0];
anf_arg731 = $n724.vars[0];
anf_fun729 = $n724.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[204],1,$t);
}
var n724 = $n724;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step722) {
case 0: var anf_fun727 = embed168.$var;
$step722 = 1;
$al726 = L[203];
if(!(R.isFunction(anf_fun727))) {
R.ffi.throwNonFunApp($al726,anf_fun727);
}
$ans725 = anf_fun727.app(n724);
break;
case 1: var anf_arg731 = $ans725;
var anf_fun729 = text174.$var;
$step722 = 2;
$al726 = L[200];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al726,equal$always2);
}
$ans725 = equal$always2.app(n724,(1));
break;
case 2: var anf_arg728 = $ans725;
$al726 = L[200];
var anf_if734 = R.checkWrapBoolean(anf_arg728);
$step722 = R.isPyretTrue(anf_if734)?3:4;
break;
case 3: $step722 = 5;
$ans725 = (" argument");
break;
case 4: $step722 = 5;
$ans725 = (" arguments");
break;
case 5: var anf_arg730 = $ans725;
$step722 = 6;
$al726 = L[202];
if(!(R.isFunction(anf_fun729))) {
R.ffi.throwNonFunApp($al726,anf_fun729);
}
$ans725 = anf_fun729.app(anf_arg730);
break;
case 6: var anf_arg732 = $ans725;
$step722 = 7;
$al726 = L[201];
$field733 = R.getColonFieldLoc(sequence455,"make2",L[201]);
if(R.isMethod($field733)) {
$ans725 = $field733.full_meth(sequence455,anf_arg731,anf_arg732);
} else {
if(!(R.isFunction($field733))) {
R.ffi.throwNonFunApp(L[201],$field733);
}
$ans725 = $field733.app(anf_arg731,anf_arg732);
}
break;
case 7: ++R.GAS;
return $ans725;
default: throw "No case numbered " + $step722 + " in $temp_lam723";
}
}
} catch($e735) {
if(R.isCont($e735) && ($step722 !== 7)) {
$e735.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al726,$temp_lam723,$step722,[n724],[anf_arg731,anf_fun729]);
}
if(R.isPyretException($e735)) {
$e735.pyretStack.push($al726);
}
throw $e735;
}
};
var anf_assign736 = R.makeFunction($temp_lam723,"ed-args");
ed$args737.$var = anf_assign736;
var $temp_lam739 = function($n740) {
var $step738 = 0;
var $ans741 = D;
var $al742 = L[209];
try {
if(R.isActivationRecord($n740)) {
$step738 = $n740.step;
$al742 = $n740.from;
$ans741 = $n740.ans;
n740 = $n740.args[0];
anf_arg747 = $n740.vars[0];
anf_fun745 = $n740.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[209],1,$t);
}
var n740 = $n740;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step738) {
case 0: var anf_fun743 = embed168.$var;
$step738 = 1;
$al742 = L[208];
if(!(R.isFunction(anf_fun743))) {
R.ffi.throwNonFunApp($al742,anf_fun743);
}
$ans741 = anf_fun743.app(n740);
break;
case 1: var anf_arg747 = $ans741;
var anf_fun745 = text174.$var;
$step738 = 2;
$al742 = L[205];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al742,equal$always2);
}
$ans741 = equal$always2.app(n740,(1));
break;
case 2: var anf_arg744 = $ans741;
$al742 = L[205];
var anf_if750 = R.checkWrapBoolean(anf_arg744);
$step738 = R.isPyretTrue(anf_if750)?3:4;
break;
case 3: $step738 = 5;
$ans741 = (" name");
break;
case 4: $step738 = 5;
$ans741 = (" names");
break;
case 5: var anf_arg746 = $ans741;
$step738 = 6;
$al742 = L[207];
if(!(R.isFunction(anf_fun745))) {
R.ffi.throwNonFunApp($al742,anf_fun745);
}
$ans741 = anf_fun745.app(anf_arg746);
break;
case 6: var anf_arg748 = $ans741;
$step738 = 7;
$al742 = L[206];
$field749 = R.getColonFieldLoc(sequence455,"make2",L[206]);
if(R.isMethod($field749)) {
$ans741 = $field749.full_meth(sequence455,anf_arg747,anf_arg748);
} else {
if(!(R.isFunction($field749))) {
R.ffi.throwNonFunApp(L[206],$field749);
}
$ans741 = $field749.app(anf_arg747,anf_arg748);
}
break;
case 7: ++R.GAS;
return $ans741;
default: throw "No case numbered " + $step738 + " in $temp_lam739";
}
}
} catch($e751) {
if(R.isCont($e751) && ($step738 !== 7)) {
$e751.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al742,$temp_lam739,$step738,[n740],[anf_arg747,anf_fun745]);
}
if(R.isPyretException($e751)) {
$e751.pyretStack.push($al742);
}
throw $e751;
}
};
var anf_assign752 = R.makeFunction($temp_lam739,"ed-names");
ed$names753.$var = anf_assign752;
var $temp_lam755 = function($n756) {
var $step754 = 0;
var $ans757 = D;
var $al758 = L[214];
try {
if(R.isActivationRecord($n756)) {
$step754 = $n756.step;
$al758 = $n756.from;
$ans757 = $n756.ans;
n756 = $n756.args[0];
anf_arg763 = $n756.vars[0];
anf_fun761 = $n756.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[214],1,$t);
}
var n756 = $n756;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step754) {
case 0: var anf_fun759 = embed168.$var;
$step754 = 1;
$al758 = L[213];
if(!(R.isFunction(anf_fun759))) {
R.ffi.throwNonFunApp($al758,anf_fun759);
}
$ans757 = anf_fun759.app(n756);
break;
case 1: var anf_arg763 = $ans757;
var anf_fun761 = text174.$var;
$step754 = 2;
$al758 = L[210];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al758,equal$always2);
}
$ans757 = equal$always2.app(n756,(1));
break;
case 2: var anf_arg760 = $ans757;
$al758 = L[210];
var anf_if766 = R.checkWrapBoolean(anf_arg760);
$step754 = R.isPyretTrue(anf_if766)?3:4;
break;
case 3: $step754 = 5;
$ans757 = (" field");
break;
case 4: $step754 = 5;
$ans757 = (" fields");
break;
case 5: var anf_arg762 = $ans757;
$step754 = 6;
$al758 = L[212];
if(!(R.isFunction(anf_fun761))) {
R.ffi.throwNonFunApp($al758,anf_fun761);
}
$ans757 = anf_fun761.app(anf_arg762);
break;
case 6: var anf_arg764 = $ans757;
$step754 = 7;
$al758 = L[211];
$field765 = R.getColonFieldLoc(sequence455,"make2",L[211]);
if(R.isMethod($field765)) {
$ans757 = $field765.full_meth(sequence455,anf_arg763,anf_arg764);
} else {
if(!(R.isFunction($field765))) {
R.ffi.throwNonFunApp(L[211],$field765);
}
$ans757 = $field765.app(anf_arg763,anf_arg764);
}
break;
case 7: ++R.GAS;
return $ans757;
default: throw "No case numbered " + $step754 + " in $temp_lam755";
}
}
} catch($e767) {
if(R.isCont($e767) && ($step754 !== 7)) {
$e767.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al758,$temp_lam755,$step754,[n756],[anf_arg763,anf_fun761]);
}
if(R.isPyretException($e767)) {
$e767.pyretStack.push($al758);
}
throw $e767;
}
};
var anf_assign768 = R.makeFunction($temp_lam755,"ed-fields");
ed$fields769.$var = anf_assign768;
var $temp_lam771 = function($n772) {
var $step770 = 0;
var $ans773 = D;
var $al774 = L[219];
try {
if(R.isActivationRecord($n772)) {
$step770 = $n772.step;
$al774 = $n772.from;
$ans773 = $n772.ans;
n772 = $n772.args[0];
anf_arg779 = $n772.vars[0];
anf_fun777 = $n772.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[219],1,$t);
}
var n772 = $n772;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step770) {
case 0: var anf_fun775 = embed168.$var;
$step770 = 1;
$al774 = L[218];
if(!(R.isFunction(anf_fun775))) {
R.ffi.throwNonFunApp($al774,anf_fun775);
}
$ans773 = anf_fun775.app(n772);
break;
case 1: var anf_arg779 = $ans773;
var anf_fun777 = text174.$var;
$step770 = 2;
$al774 = L[215];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al774,equal$always2);
}
$ans773 = equal$always2.app(n772,(1));
break;
case 2: var anf_arg776 = $ans773;
$al774 = L[215];
var anf_if782 = R.checkWrapBoolean(anf_arg776);
$step770 = R.isPyretTrue(anf_if782)?3:4;
break;
case 3: $step770 = 5;
$ans773 = (" field binding");
break;
case 4: $step770 = 5;
$ans773 = (" field bindings");
break;
case 5: var anf_arg778 = $ans773;
$step770 = 6;
$al774 = L[217];
if(!(R.isFunction(anf_fun777))) {
R.ffi.throwNonFunApp($al774,anf_fun777);
}
$ans773 = anf_fun777.app(anf_arg778);
break;
case 6: var anf_arg780 = $ans773;
$step770 = 7;
$al774 = L[216];
$field781 = R.getColonFieldLoc(sequence455,"make2",L[216]);
if(R.isMethod($field781)) {
$ans773 = $field781.full_meth(sequence455,anf_arg779,anf_arg780);
} else {
if(!(R.isFunction($field781))) {
R.ffi.throwNonFunApp(L[216],$field781);
}
$ans773 = $field781.app(anf_arg779,anf_arg780);
}
break;
case 7: ++R.GAS;
return $ans773;
default: throw "No case numbered " + $step770 + " in $temp_lam771";
}
}
} catch($e783) {
if(R.isCont($e783) && ($step770 !== 7)) {
$e783.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al774,$temp_lam771,$step770,[n772],[anf_arg779,anf_fun777]);
}
if(R.isPyretException($e783)) {
$e783.pyretStack.push($al774);
}
throw $e783;
}
};
var anf_assign784 = R.makeFunction($temp_lam771,"ed-field-bindings");
ed$field$bindings785.$var = anf_assign784;
var $temp_lam787 = function($n788) {
var $step786 = 0;
var $ans789 = D;
var $al790 = L[224];
try {
if(R.isActivationRecord($n788)) {
$step786 = $n788.step;
$al790 = $n788.from;
$ans789 = $n788.ans;
n788 = $n788.args[0];
anf_arg795 = $n788.vars[0];
anf_fun793 = $n788.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[224],1,$t);
}
var n788 = $n788;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step786) {
case 0: var anf_fun791 = embed168.$var;
$step786 = 1;
$al790 = L[223];
if(!(R.isFunction(anf_fun791))) {
R.ffi.throwNonFunApp($al790,anf_fun791);
}
$ans789 = anf_fun791.app(n788);
break;
case 1: var anf_arg795 = $ans789;
var anf_fun793 = text174.$var;
$step786 = 2;
$al790 = L[220];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al790,equal$always2);
}
$ans789 = equal$always2.app(n788,(1));
break;
case 2: var anf_arg792 = $ans789;
$al790 = L[220];
var anf_if798 = R.checkWrapBoolean(anf_arg792);
$step786 = R.isPyretTrue(anf_if798)?3:4;
break;
case 3: $step786 = 5;
$ans789 = (" parameter");
break;
case 4: $step786 = 5;
$ans789 = (" parameters");
break;
case 5: var anf_arg794 = $ans789;
$step786 = 6;
$al790 = L[222];
if(!(R.isFunction(anf_fun793))) {
R.ffi.throwNonFunApp($al790,anf_fun793);
}
$ans789 = anf_fun793.app(anf_arg794);
break;
case 6: var anf_arg796 = $ans789;
$step786 = 7;
$al790 = L[221];
$field797 = R.getColonFieldLoc(sequence455,"make2",L[221]);
if(R.isMethod($field797)) {
$ans789 = $field797.full_meth(sequence455,anf_arg795,anf_arg796);
} else {
if(!(R.isFunction($field797))) {
R.ffi.throwNonFunApp(L[221],$field797);
}
$ans789 = $field797.app(anf_arg795,anf_arg796);
}
break;
case 7: ++R.GAS;
return $ans789;
default: throw "No case numbered " + $step786 + " in $temp_lam787";
}
}
} catch($e799) {
if(R.isCont($e799) && ($step786 !== 7)) {
$e799.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al790,$temp_lam787,$step786,[n788],[anf_arg795,anf_fun793]);
}
if(R.isPyretException($e799)) {
$e799.pyretStack.push($al790);
}
throw $e799;
}
};
var anf_assign800 = R.makeFunction($temp_lam787,"ed-params");
ed$params801.$var = anf_assign800;
var $temp_lam803 = function($n804) {
var $step802 = 0;
var $ans805 = D;
var $al806 = L[229];
try {
if(R.isActivationRecord($n804)) {
$step802 = $n804.step;
$al806 = $n804.from;
$ans805 = $n804.ans;
n804 = $n804.args[0];
anf_arg811 = $n804.vars[0];
anf_fun809 = $n804.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[229],1,$t);
}
var n804 = $n804;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step802) {
case 0: var anf_fun807 = embed168.$var;
$step802 = 1;
$al806 = L[228];
if(!(R.isFunction(anf_fun807))) {
R.ffi.throwNonFunApp($al806,anf_fun807);
}
$ans805 = anf_fun807.app(n804);
break;
case 1: var anf_arg811 = $ans805;
var anf_fun809 = text174.$var;
$step802 = 2;
$al806 = L[225];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al806,equal$always2);
}
$ans805 = equal$always2.app(n804,(1));
break;
case 2: var anf_arg808 = $ans805;
$al806 = L[225];
var anf_if814 = R.checkWrapBoolean(anf_arg808);
$step802 = R.isPyretTrue(anf_if814)?3:4;
break;
case 3: $step802 = 5;
$ans805 = (" component");
break;
case 4: $step802 = 5;
$ans805 = (" components");
break;
case 5: var anf_arg810 = $ans805;
$step802 = 6;
$al806 = L[227];
if(!(R.isFunction(anf_fun809))) {
R.ffi.throwNonFunApp($al806,anf_fun809);
}
$ans805 = anf_fun809.app(anf_arg810);
break;
case 6: var anf_arg812 = $ans805;
$step802 = 7;
$al806 = L[226];
$field813 = R.getColonFieldLoc(sequence455,"make2",L[226]);
if(R.isMethod($field813)) {
$ans805 = $field813.full_meth(sequence455,anf_arg811,anf_arg812);
} else {
if(!(R.isFunction($field813))) {
R.ffi.throwNonFunApp(L[226],$field813);
}
$ans805 = $field813.app(anf_arg811,anf_arg812);
}
break;
case 7: ++R.GAS;
return $ans805;
default: throw "No case numbered " + $step802 + " in $temp_lam803";
}
}
} catch($e815) {
if(R.isCont($e815) && ($step802 !== 7)) {
$e815.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al806,$temp_lam803,$step802,[n804],[anf_arg811,anf_fun809]);
}
if(R.isPyretException($e815)) {
$e815.pyretStack.push($al806);
}
throw $e815;
}
};
var anf_assign816 = R.makeFunction($temp_lam803,"ed-components");
ed$components817.$var = anf_assign816;
var $temp_lam819 = function($n820) {
var $step818 = 0;
var $ans821 = D;
var $al822 = L[237];
try {
if(R.isActivationRecord($n820)) {
$step818 = $n820.step;
$al822 = $n820.from;
$ans821 = $n820.ans;
n820 = $n820.args[0];
anf_fun831 = $n820.vars[0];
last$digit823 = $n820.vars[1];
anf_arg829 = $n820.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[237],1,$t);
}
var n820 = $n820;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step818) {
case 0: var anf_fun831 = text174.$var;
$step818 = 1;
$al822 = L[236];
if(!(R.isFunction(num$modulo4))) {
R.ffi.throwNonFunApp($al822,num$modulo4);
}
$ans821 = num$modulo4.app(n820,(10));
break;
case 1: var last$digit823 = $ans821;
$step818 = 2;
$al822 = L[235];
if(!(R.isFunction(num$to$string3))) {
R.ffi.throwNonFunApp($al822,num$to$string3);
}
$ans821 = num$to$string3.app(n820);
break;
case 2: var anf_arg829 = $ans821;
$step818 = 3;
$al822 = L[230];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al822,equal$always2);
}
$ans821 = equal$always2.app(last$digit823,(1));
break;
case 3: var anf_arg824 = $ans821;
$al822 = L[230];
var anf_if833 = R.checkWrapBoolean(anf_arg824);
$step818 = R.isPyretTrue(anf_if833)?4:5;
break;
case 4: $step818 = 12;
$ans821 = ("\u02E2\u1D57");
break;
case 5: $step818 = 6;
$al822 = L[231];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al822,equal$always2);
}
$ans821 = equal$always2.app(last$digit823,(2));
break;
case 6: var anf_arg825 = $ans821;
$al822 = L[231];
var anf_if828 = R.checkWrapBoolean(anf_arg825);
$step818 = R.isPyretTrue(anf_if828)?7:8;
break;
case 7: $step818 = 12;
$ans821 = ("\u207F\u1D48");
break;
case 8: $step818 = 9;
$al822 = L[232];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al822,equal$always2);
}
$ans821 = equal$always2.app(last$digit823,(3));
break;
case 9: var anf_arg826 = $ans821;
$al822 = L[232];
var anf_if827 = R.checkWrapBoolean(anf_arg826);
$step818 = R.isPyretTrue(anf_if827)?10:11;
break;
case 10: $step818 = 12;
$ans821 = ("\u207F\u1D48");
break;
case 11: $step818 = 12;
$ans821 = ("\u1D57\u02B0");
break;
case 12: var anf_arg830 = $ans821;
$step818 = 13;
$al822 = L[234];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al822,_plus1);
}
$ans821 = _plus1.app(anf_arg829,anf_arg830);
break;
case 13: var anf_arg832 = $ans821;
$step818 = 14;
$al822 = L[233];
if(!(R.isFunction(anf_fun831))) {
R.ffi.throwNonFunApp($al822,anf_fun831);
}
$ans821 = anf_fun831.app(anf_arg832);
break;
case 14: ++R.GAS;
return $ans821;
default: throw "No case numbered " + $step818 + " in $temp_lam819";
}
}
} catch($e834) {
if(R.isCont($e834) && ($step818 !== 14)) {
$e834.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al822,$temp_lam819,$step818,[n820],[anf_fun831,last$digit823,anf_arg829]);
}
if(R.isPyretException($e834)) {
$e834.pyretStack.push($al822);
}
throw $e834;
}
};
var anf_assign835 = R.makeFunction($temp_lam819,"ed-nth");
ed$nth836.$var = anf_assign835;
var defined_value884 = ed$nth836.$var;
var defined_value885 = ed$components817.$var;
var defined_value886 = ed$params801.$var;
var defined_value887 = ed$field$bindings785.$var;
var defined_value888 = ed$fields769.$var;
var defined_value889 = ed$names753.$var;
var defined_value890 = ed$args737.$var;
var defined_value891 = optional210.$var;
var defined_value892 = v$sequence156.$var;
var defined_value893 = bulleted$sequence150.$var;
var defined_value894 = h$sequence162.$var;
var defined_value895 = paragraph144.$var;
var defined_value896 = highlight216.$var;
var defined_value897 = loc180.$var;
var defined_value898 = is$highlight213.$var;
var defined_value899 = is$optional207.$var;
var defined_value900 = loc$display204.$var;
var defined_value901 = is$loc$display201.$var;
var defined_value902 = cmcode198.$var;
var defined_value903 = is$cmcode195.$var;
var defined_value904 = code192.$var;
var defined_value905 = is$code189.$var;
var defined_value906 = maybe$stack$loc186.$var;
var defined_value907 = is$maybe$stack$loc183.$var;
var defined_value908 = is$loc177.$var;
var defined_value909 = text174.$var;
var defined_value910 = is$text171.$var;
var defined_value911 = embed168.$var;
var defined_value912 = is$embed165.$var;
var defined_value913 = is$h$sequence159.$var;
var defined_value914 = is$v$sequence153.$var;
var defined_value915 = is$bulleted$sequence147.$var;
var defined_value916 = is$paragraph141.$var;
var defined_value917 = is$ErrorDisplay138.$var;
$step14 = 1;
$al19 = L[238];
$field837 = R.getColonFieldLoc(builtins1,"trace-value",L[238]);
if(R.isMethod($field837)) {
$ans18 = $field837.full_meth(builtins1,L[238],nothing2);
} else {
if(!(R.isFunction($field837))) {
R.ffi.throwNonFunApp(L[238],$field837);
}
$ans18 = $field837.app(L[238],nothing2);
}
break;
case 1: var answer882 = $ans18;
var anf_obj838 = is$ErrorDisplay138.$var;
var anf_obj839 = paragraph144.$var;
var anf_obj840 = is$paragraph141.$var;
var anf_obj841 = bulleted$sequence150.$var;
var anf_obj842 = is$bulleted$sequence147.$var;
var anf_obj843 = v$sequence156.$var;
var anf_obj844 = is$v$sequence153.$var;
var anf_obj845 = h$sequence162.$var;
var anf_obj846 = is$h$sequence159.$var;
var anf_obj847 = embed168.$var;
var anf_obj848 = is$embed165.$var;
var anf_obj849 = text174.$var;
var anf_obj850 = is$text171.$var;
var anf_obj851 = loc180.$var;
var anf_obj852 = is$loc177.$var;
var anf_obj853 = maybe$stack$loc186.$var;
var anf_obj854 = is$maybe$stack$loc183.$var;
var anf_obj855 = code192.$var;
var anf_obj856 = is$code189.$var;
var anf_obj857 = cmcode198.$var;
var anf_obj858 = is$cmcode195.$var;
var anf_obj859 = loc$display204.$var;
var anf_obj860 = is$loc$display201.$var;
var anf_obj861 = optional210.$var;
var anf_obj862 = is$optional207.$var;
var anf_obj863 = highlight216.$var;
var anf_obj864 = is$highlight213.$var;
var anf_obj871 = ed$args737.$var;
var anf_obj872 = ed$names753.$var;
var anf_obj873 = ed$fields769.$var;
var anf_obj874 = ed$field$bindings785.$var;
var anf_obj875 = ed$params801.$var;
var anf_obj876 = ed$components817.$var;
var anf_obj877 = ed$nth836.$var;
var provides881 = R.makeObject({"is-ErrorDisplay":anf_obj838,
"paragraph":anf_obj839,
"is-paragraph":anf_obj840,
"bulleted-sequence":anf_obj841,
"is-bulleted-sequence":anf_obj842,
"v-sequence":anf_obj843,
"is-v-sequence":anf_obj844,
"h-sequence":anf_obj845,
"is-h-sequence":anf_obj846,
"embed":anf_obj847,
"is-embed":anf_obj848,
"text":anf_obj849,
"is-text":anf_obj850,
"loc":anf_obj851,
"is-loc":anf_obj852,
"maybe-stack-loc":anf_obj853,
"is-maybe-stack-loc":anf_obj854,
"code":anf_obj855,
"is-code":anf_obj856,
"cmcode":anf_obj857,
"is-cmcode":anf_obj858,
"loc-display":anf_obj859,
"is-loc-display":anf_obj860,
"optional":anf_obj861,
"is-optional":anf_obj862,
"highlight":anf_obj863,
"is-highlight":anf_obj864,
"locs":locs865,
"para":para866,
"sequence":sequence455,
"error":error867,
"para-nospace":para$nospace868,
"bulleted":bulleted869,
"opt":opt870,
"ed-args":anf_obj871,
"ed-names":anf_obj872,
"ed-fields":anf_obj873,
"ed-field-bindings":anf_obj874,
"ed-params":anf_obj875,
"ed-components":anf_obj876,
"ed-nth":anf_obj877});
$step14 = 2;
$al19 = L[37];
$field878 = R.getColonFieldLoc(builtins1,"current-checker",L[37]);
if(R.isMethod($field878)) {
$ans18 = $field878.full_meth(builtins1);
} else {
if(!(R.isFunction($field878))) {
R.ffi.throwNonFunApp(L[37],$field878);
}
$ans18 = $field878.app();
}
break;
case 2: var anf_method_obj879 = $ans18;
$step14 = 3;
$al19 = L[37];
$field880 = R.getColonFieldLoc(anf_method_obj879,"results",L[37]);
if(R.isMethod($field880)) {
$ans18 = $field880.full_meth(anf_method_obj879);
} else {
if(!(R.isFunction($field880))) {
R.ffi.throwNonFunApp(L[37],$field880);
}
$ans18 = $field880.app();
}
break;
case 3: var checks883 = $ans18;
$step14 = 4;
$ans18 = R.makeObject({"answer":answer882,
"namespace":NAMESPACE,
"defined-values":{"ed-nth":defined_value884,
"ed-components":defined_value885,
"ed-params":defined_value886,
"ed-field-bindings":defined_value887,
"ed-fields":defined_value888,
"ed-names":defined_value889,
"ed-args":defined_value890,
"opt":opt870,
"bulleted":bulleted869,
"optional":defined_value891,
"v-sequence":defined_value892,
"para-nospace":para$nospace868,
"bulleted-sequence":defined_value893,
"error":error867,
"h-sequence":defined_value894,
"sequence":sequence455,
"para":para866,
"locs":locs865,
"paragraph":defined_value895,
"highlight":defined_value896,
"loc":defined_value897,
"is-highlight":defined_value898,
"is-optional":defined_value899,
"loc-display":defined_value900,
"is-loc-display":defined_value901,
"cmcode":defined_value902,
"is-cmcode":defined_value903,
"code":defined_value904,
"is-code":defined_value905,
"maybe-stack-loc":defined_value906,
"is-maybe-stack-loc":defined_value907,
"is-loc":defined_value908,
"text":defined_value909,
"is-text":defined_value910,
"embed":defined_value911,
"is-embed":defined_value912,
"is-h-sequence":defined_value913,
"is-v-sequence":defined_value914,
"is-bulleted-sequence":defined_value915,
"is-paragraph":defined_value916,
"is-ErrorDisplay":defined_value917},
"defined-types":{"ErrorDisplay":ErrorDisplay85},
"provide-plus-types":R.makeObject({"values":provides881,
"types":{"ErrorDisplay":ErrorDisplay85}}),
"checks":checks883});
break;
case 4: ++R.GAS;
return $ans18;
default: throw "No case numbered " + $step14 + " in $toplevel15";
}
}
} catch($e918) {
if(R.isCont($e918) && ($step14 !== 4)) {
$e918.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al19,$toplevel15,$step14,[],[ErrorDisplay85,is$ErrorDisplay138,is$paragraph141,paragraph144,is$bulleted$sequence147,bulleted$sequence150,is$v$sequence153,v$sequence156,is$h$sequence159,h$sequence162,is$embed165,embed168,is$text171,text174,is$loc177,loc180,is$maybe$stack$loc183,maybe$stack$loc186,is$code189,code192,is$cmcode195,cmcode198,is$loc$display201,loc$display204,is$optional207,optional210,is$highlight213,highlight216,locs865,para866,sequence455,error867,para$nospace868,bulleted869,opt870,ed$args737,ed$names753,ed$fields769,ed$field$bindings785,ed$params801,ed$components817,ed$nth836,defined_value884,defined_value885,defined_value886,defined_value887,defined_value888,defined_value889,defined_value890,defined_value891,defined_value892,defined_value893,defined_value894,defined_value895,defined_value896,defined_value897,defined_value898,defined_value899,defined_value900,defined_value901,defined_value902,defined_value903,defined_value904,defined_value905,defined_value906,defined_value907,defined_value908,defined_value909,defined_value910,defined_value911,defined_value912,defined_value913,defined_value914,defined_value915,defined_value916,defined_value917,answer882,provides881]);
}
if(R.isPyretException($e918)) {
$e918.pyretStack.push($al19);
}
throw $e918;
}
};
return R.safeCall($toplevel15,function(moduleVal) {
R.modules["$builtin://error$display12"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://valueskeleton":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"is-ValueSkeleton":"tany",
"is-vs-collection":"tany",
"is-vs-constr":"tany",
"is-vs-seq":"tany",
"is-vs-str":"tany",
"is-vs-table":"tany",
"is-vs-value":"tany",
"vs-collection":"tany",
"vs-constr":"tany",
"vs-seq":"tany",
"vs-str":"tany",
"vs-table":"tany",
"vs-value":"tany"},
"datatypes":{"atom#ValueSkeleton#1":["data","ValueSkeleton",[],[["vs-str",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["vs-value",
[["v",
"tany"]]],["vs-collection",
[["items",
"tany"],["name",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["vs-constr",
[["args",
"tany"],["name",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["vs-table",
[["rows",
"tany"],["headers",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"RawArray"}]]],["vs-seq",
[["items",
"tany"]]]],{}]},
"aliases":{"ValueSkeleton":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import8) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://valueskeleton";
var D = R.undefined;
var L = [[M,9,2,82,9,23,103],
[M,9,16,96,9,22,102],
[M,9,4,84,9,23,103],
[M,10,2,106,10,22,126],
[M,10,4,108,10,22,126],
[M,11,2,129,11,40,167],
[M,11,26,153,11,32,159],
[M,11,4,131,11,40,167],
[M,12,2,170,12,35,203],
[M,12,22,190,12,28,196],
[M,12,4,172,12,35,203],
[M,13,2,206,13,62,266],
[M,13,24,228,13,32,236],
[M,13,4,208,13,62,266],
[M,14,2,269,14,17,284],
[M,14,4,271,14,17,284],
[M,8,0,60,15,3,288],
["dummy location"],
[M,3,0,13,15,3,288]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var $type$RawArray1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["RawArray"];
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import8);
var $toplevel10 = function($$resumer101) {
var $step9 = 0;
var $ans13 = D;
var $al14 = L[18];
try {
if(R.isActivationRecord($$resumer101)) {
$step9 = $$resumer101.step;
$al14 = $$resumer101.from;
$ans13 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
ValueSkeleton115 = $$resumer101.vars[0];
is$ValueSkeleton71 = $$resumer101.vars[1];
is$vs$str74 = $$resumer101.vars[2];
vs$str76 = $$resumer101.vars[3];
is$vs$value77 = $$resumer101.vars[4];
vs$value78 = $$resumer101.vars[5];
is$vs$collection79 = $$resumer101.vars[6];
vs$collection80 = $$resumer101.vars[7];
is$vs$constr81 = $$resumer101.vars[8];
vs$constr85 = $$resumer101.vars[9];
is$vs$table88 = $$resumer101.vars[10];
vs$table91 = $$resumer101.vars[11];
is$vs$seq94 = $$resumer101.vars[12];
vs$seq97 = $$resumer101.vars[13];
defined_value119 = $$resumer101.vars[14];
defined_value120 = $$resumer101.vars[15];
defined_value121 = $$resumer101.vars[16];
defined_value122 = $$resumer101.vars[17];
defined_value123 = $$resumer101.vars[18];
defined_value124 = $$resumer101.vars[19];
defined_value125 = $$resumer101.vars[20];
defined_value126 = $$resumer101.vars[21];
defined_value127 = $$resumer101.vars[22];
defined_value128 = $$resumer101.vars[23];
defined_value129 = $$resumer101.vars[24];
defined_value130 = $$resumer101.vars[25];
defined_value131 = $$resumer101.vars[26];
answer117 = $$resumer101.vars[27];
provides116 = $$resumer101.vars[28];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step9) {
case 0: var ValueSkeleton15 = R.namedBrander("ValueSkeleton",L[16]);
var ValueSkeleton115 = R.makeBranderAnn(ValueSkeleton15,"ValueSkeleton");
var ValueSkeleton68 = {"$var":D};
var is$ValueSkeleton71 = {"$var":D};
var is$vs$str74 = {"$var":D};
var vs$str76 = {"$var":D};
var is$vs$value77 = {"$var":D};
var vs$value78 = {"$var":D};
var is$vs$collection79 = {"$var":D};
var vs$collection80 = {"$var":D};
var is$vs$constr81 = {"$var":D};
var vs$constr85 = {"$var":D};
var is$vs$table88 = {"$var":D};
var vs$table91 = {"$var":D};
var is$vs$seq94 = {"$var":D};
var vs$seq97 = {"$var":D};
var $vs$str_getfields21 = function(f) {
return f(this.dict["s"]);
};
var $vs$str_getfieldsref19 = function(f,refmask) {
return f(R.derefField(this.dict["s"],false,refmask[0]));
};
var $vs$str_mutablemask20 = [false];
var $vs$str$base16 = {"$fieldNames":["s"],
"_match":R.makeMatch("vs-str",1)};
var $vs$str$brander17 = R.namedBrander("vs-str",L[0]);
var $vs$str$brands18 = {};
$vs$str$brands18[ValueSkeleton15._brand] = true;
$vs$str$brands18[$vs$str$brander17._brand] = true;
var vs$str22 = R.makeVariantConstructor(L[2],function() {
return [$type$String7];
},["s23"],[L[1]],[false],["s23"],$vs$str_mutablemask20,$vs$str$base16,$vs$str$brands18,"vs-str",$vs$str_getfieldsref19,$vs$str_getfields21,$vs$str$base16);
var $vs$value_getfields29 = function(f) {
return f(this.dict["v"]);
};
var $vs$value_getfieldsref27 = function(f,refmask) {
return f(R.derefField(this.dict["v"],false,refmask[0]));
};
var $vs$value_mutablemask28 = [false];
var $vs$value$base24 = {"$fieldNames":["v"],
"_match":R.makeMatch("vs-value",1)};
var $vs$value$brander25 = R.namedBrander("vs-value",L[3]);
var $vs$value$brands26 = {};
$vs$value$brands26[ValueSkeleton15._brand] = true;
$vs$value$brands26[$vs$value$brander25._brand] = true;
var vs$value30 = R.makeVariantConstructor(L[4],function() {
return [];
},[],[],[false],["v31"],$vs$value_mutablemask28,$vs$value$base24,$vs$value$brands26,"vs-value",$vs$value_getfieldsref27,$vs$value_getfields29,$vs$value$base24);
var $vs$collection_getfields37 = function(f) {
return f(this.dict["name"],this.dict["items"]);
};
var $vs$collection_getfieldsref35 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["items"],false,refmask[1]));
};
var $vs$collection_mutablemask36 = [false,false];
var $vs$collection$base32 = {"$fieldNames":["name","items"],
"_match":R.makeMatch("vs-collection",2)};
var $vs$collection$brander33 = R.namedBrander("vs-collection",L[5]);
var $vs$collection$brands34 = {};
$vs$collection$brands34[ValueSkeleton15._brand] = true;
$vs$collection$brands34[$vs$collection$brander33._brand] = true;
var vs$collection38 = R.makeVariantConstructor(L[7],function() {
return [$type$String7];
},["name39"],[L[6]],[false,false],["name39","items40"],$vs$collection_mutablemask36,$vs$collection$base32,$vs$collection$brands34,"vs-collection",$vs$collection_getfieldsref35,$vs$collection_getfields37,$vs$collection$base32);
var $vs$constr_getfields46 = function(f) {
return f(this.dict["name"],this.dict["args"]);
};
var $vs$constr_getfieldsref44 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["args"],false,refmask[1]));
};
var $vs$constr_mutablemask45 = [false,false];
var $vs$constr$base41 = {"$fieldNames":["name","args"],
"_match":R.makeMatch("vs-constr",2)};
var $vs$constr$brander42 = R.namedBrander("vs-constr",L[8]);
var $vs$constr$brands43 = {};
$vs$constr$brands43[ValueSkeleton15._brand] = true;
$vs$constr$brands43[$vs$constr$brander42._brand] = true;
var vs$constr47 = R.makeVariantConstructor(L[10],function() {
return [$type$String7];
},["name48"],[L[9]],[false,false],["name48","args49"],$vs$constr_mutablemask45,$vs$constr$base41,$vs$constr$brands43,"vs-constr",$vs$constr_getfieldsref44,$vs$constr_getfields46,$vs$constr$base41);
var $vs$table_getfields55 = function(f) {
return f(this.dict["headers"],this.dict["rows"]);
};
var $vs$table_getfieldsref53 = function(f,refmask) {
return f(R.derefField(this.dict["headers"],false,refmask[0]),R.derefField(this.dict["rows"],false,refmask[1]));
};
var $vs$table_mutablemask54 = [false,false];
var $vs$table$base50 = {"$fieldNames":["headers","rows"],
"_match":R.makeMatch("vs-table",2)};
var $vs$table$brander51 = R.namedBrander("vs-table",L[11]);
var $vs$table$brands52 = {};
$vs$table$brands52[ValueSkeleton15._brand] = true;
$vs$table$brands52[$vs$table$brander51._brand] = true;
var vs$table56 = R.makeVariantConstructor(L[13],function() {
return [$type$RawArray1];
},["headers57"],[L[12]],[false,false],["headers57","rows58"],$vs$table_mutablemask54,$vs$table$base50,$vs$table$brands52,"vs-table",$vs$table_getfieldsref53,$vs$table_getfields55,$vs$table$base50);
var $vs$seq_getfields64 = function(f) {
return f(this.dict["items"]);
};
var $vs$seq_getfieldsref62 = function(f,refmask) {
return f(R.derefField(this.dict["items"],false,refmask[0]));
};
var $vs$seq_mutablemask63 = [false];
var $vs$seq$base59 = {"$fieldNames":["items"],
"_match":R.makeMatch("vs-seq",1)};
var $vs$seq$brander60 = R.namedBrander("vs-seq",L[14]);
var $vs$seq$brands61 = {};
$vs$seq$brands61[ValueSkeleton15._brand] = true;
$vs$seq$brands61[$vs$seq$brander60._brand] = true;
var vs$seq65 = R.makeVariantConstructor(L[15],function() {
return [];
},[],[],[false],["items66"],$vs$seq_mutablemask63,$vs$seq$base59,$vs$seq$brands61,"vs-seq",$vs$seq_getfieldsref62,$vs$seq_getfields64,$vs$seq$base59);
var anf_assign67 = R.makeObject({"ValueSkeleton":G(ValueSkeleton15,"test",L[16]),
"is-vs-str":G($vs$str$brander17,"test",L[0]),
"vs-str":vs$str22,
"is-vs-value":G($vs$value$brander25,"test",L[3]),
"vs-value":vs$value30,
"is-vs-collection":G($vs$collection$brander33,"test",L[5]),
"vs-collection":vs$collection38,
"is-vs-constr":G($vs$constr$brander42,"test",L[8]),
"vs-constr":vs$constr47,
"is-vs-table":G($vs$table$brander51,"test",L[11]),
"vs-table":vs$table56,
"is-vs-seq":G($vs$seq$brander60,"test",L[14]),
"vs-seq":vs$seq65});
ValueSkeleton68.$var = anf_assign67;
var anf_bracket69 = ValueSkeleton68.$var;
$al14 = L[16];
var anf_assign70 = G(anf_bracket69,"ValueSkeleton",L[16]);
is$ValueSkeleton71.$var = anf_assign70;
var anf_bracket72 = ValueSkeleton68.$var;
$al14 = L[0];
var anf_assign73 = G(anf_bracket72,"is-vs-str",L[0]);
is$vs$str74.$var = anf_assign73;
var anf_bracket75 = ValueSkeleton68.$var;
$al14 = L[0];
var anf_assign68 = G(anf_bracket75,"vs-str",L[0]);
vs$str76.$var = anf_assign68;
var anf_bracket70 = ValueSkeleton68.$var;
$al14 = L[3];
var anf_assign71 = G(anf_bracket70,"is-vs-value",L[3]);
is$vs$value77.$var = anf_assign71;
var anf_bracket73 = ValueSkeleton68.$var;
$al14 = L[3];
var anf_assign74 = G(anf_bracket73,"vs-value",L[3]);
vs$value78.$var = anf_assign74;
var anf_bracket76 = ValueSkeleton68.$var;
$al14 = L[5];
var anf_assign77 = G(anf_bracket76,"is-vs-collection",L[5]);
is$vs$collection79.$var = anf_assign77;
var anf_bracket79 = ValueSkeleton68.$var;
$al14 = L[5];
var anf_assign80 = G(anf_bracket79,"vs-collection",L[5]);
vs$collection80.$var = anf_assign80;
var anf_bracket82 = ValueSkeleton68.$var;
$al14 = L[8];
var anf_assign83 = G(anf_bracket82,"is-vs-constr",L[8]);
is$vs$constr81.$var = anf_assign83;
var anf_bracket83 = ValueSkeleton68.$var;
$al14 = L[8];
var anf_assign84 = G(anf_bracket83,"vs-constr",L[8]);
vs$constr85.$var = anf_assign84;
var anf_bracket86 = ValueSkeleton68.$var;
$al14 = L[11];
var anf_assign87 = G(anf_bracket86,"is-vs-table",L[11]);
is$vs$table88.$var = anf_assign87;
var anf_bracket89 = ValueSkeleton68.$var;
$al14 = L[11];
var anf_assign90 = G(anf_bracket89,"vs-table",L[11]);
vs$table91.$var = anf_assign90;
var anf_bracket92 = ValueSkeleton68.$var;
$al14 = L[14];
var anf_assign93 = G(anf_bracket92,"is-vs-seq",L[14]);
is$vs$seq94.$var = anf_assign93;
var anf_bracket95 = ValueSkeleton68.$var;
$al14 = L[14];
var anf_assign96 = G(anf_bracket95,"vs-seq",L[14]);
vs$seq97.$var = anf_assign96;
var defined_value119 = vs$seq97.$var;
var defined_value120 = is$vs$seq94.$var;
var defined_value121 = vs$table91.$var;
var defined_value122 = is$vs$table88.$var;
var defined_value123 = vs$constr85.$var;
var defined_value124 = is$vs$constr81.$var;
var defined_value125 = vs$collection80.$var;
var defined_value126 = is$vs$collection79.$var;
var defined_value127 = vs$value78.$var;
var defined_value128 = is$vs$value77.$var;
var defined_value129 = vs$str76.$var;
var defined_value130 = is$vs$str74.$var;
var defined_value131 = is$ValueSkeleton71.$var;
$step9 = 1;
$al14 = L[17];
$field98 = R.getColonFieldLoc(builtins1,"trace-value",L[17]);
if(R.isMethod($field98)) {
$ans13 = $field98.full_meth(builtins1,L[17],nothing2);
} else {
if(!(R.isFunction($field98))) {
R.ffi.throwNonFunApp(L[17],$field98);
}
$ans13 = $field98.app(L[17],nothing2);
}
break;
case 1: var answer117 = $ans13;
var anf_obj99 = is$ValueSkeleton71.$var;
var anf_obj100 = vs$str76.$var;
var anf_obj101 = is$vs$str74.$var;
var anf_obj102 = vs$value78.$var;
var anf_obj103 = is$vs$value77.$var;
var anf_obj104 = vs$collection80.$var;
var anf_obj105 = is$vs$collection79.$var;
var anf_obj106 = vs$constr85.$var;
var anf_obj107 = is$vs$constr81.$var;
var anf_obj108 = vs$table91.$var;
var anf_obj109 = is$vs$table88.$var;
var anf_obj110 = vs$seq97.$var;
var anf_obj111 = is$vs$seq94.$var;
var provides116 = R.makeObject({"is-ValueSkeleton":anf_obj99,
"vs-str":anf_obj100,
"is-vs-str":anf_obj101,
"vs-value":anf_obj102,
"is-vs-value":anf_obj103,
"vs-collection":anf_obj104,
"is-vs-collection":anf_obj105,
"vs-constr":anf_obj106,
"is-vs-constr":anf_obj107,
"vs-table":anf_obj108,
"is-vs-table":anf_obj109,
"vs-seq":anf_obj110,
"is-vs-seq":anf_obj111});
$step9 = 2;
$al14 = L[16];
$field112 = R.getColonFieldLoc(builtins1,"current-checker",L[16]);
if(R.isMethod($field112)) {
$ans13 = $field112.full_meth(builtins1);
} else {
if(!(R.isFunction($field112))) {
R.ffi.throwNonFunApp(L[16],$field112);
}
$ans13 = $field112.app();
}
break;
case 2: var anf_method_obj113 = $ans13;
$step9 = 3;
$al14 = L[16];
$field114 = R.getColonFieldLoc(anf_method_obj113,"results",L[16]);
if(R.isMethod($field114)) {
$ans13 = $field114.full_meth(anf_method_obj113);
} else {
if(!(R.isFunction($field114))) {
R.ffi.throwNonFunApp(L[16],$field114);
}
$ans13 = $field114.app();
}
break;
case 3: var checks118 = $ans13;
$step9 = 4;
$ans13 = R.makeObject({"answer":answer117,
"namespace":NAMESPACE,
"defined-values":{"vs-seq":defined_value119,
"is-vs-seq":defined_value120,
"vs-table":defined_value121,
"is-vs-table":defined_value122,
"vs-constr":defined_value123,
"is-vs-constr":defined_value124,
"vs-collection":defined_value125,
"is-vs-collection":defined_value126,
"vs-value":defined_value127,
"is-vs-value":defined_value128,
"vs-str":defined_value129,
"is-vs-str":defined_value130,
"is-ValueSkeleton":defined_value131},
"defined-types":{"ValueSkeleton":ValueSkeleton115},
"provide-plus-types":R.makeObject({"values":provides116,
"types":{"ValueSkeleton":ValueSkeleton115}}),
"checks":checks118});
break;
case 4: ++R.GAS;
return $ans13;
default: throw "No case numbered " + $step9 + " in $toplevel10";
}
}
} catch($e132) {
if(R.isCont($e132) && ($step9 !== 4)) {
$e132.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al14,$toplevel10,$step9,[],[ValueSkeleton115,is$ValueSkeleton71,is$vs$str74,vs$str76,is$vs$value77,vs$value78,is$vs$collection79,vs$collection80,is$vs$constr81,vs$constr85,is$vs$table88,vs$table91,is$vs$seq94,vs$seq97,defined_value119,defined_value120,defined_value121,defined_value122,defined_value123,defined_value124,defined_value125,defined_value126,defined_value127,defined_value128,defined_value129,defined_value130,defined_value131,answer117,provides116]);
}
if(R.isPyretException($e132)) {
$e132.pyretStack.push($al14);
}
throw $e132;
}
};
return R.safeCall($toplevel10,function(moduleVal) {
R.modules["$builtin://valueskeleton7"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://error":({"requires":[{"import-type":"builtin",
"name":"error-display"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{"app-args-missing-comma":"tany",
"args-missing-comma":"tany",
"arity-mismatch":"tany",
"bad-block-stmt":"tany",
"bad-check-block-stmt":"tany",
"bad-tuple-bind":"tany",
"cases-arity-mismatch":"tany",
"cases-singleton-mismatch":"tany",
"constructor-arity-mismatch":"tany",
"draw-and-highlight":"tany",
"ed-intro":"tany",
"ed-simple-intro":"tany",
"empty-block":"tany",
"equality-failure":"tany",
"extend-non-object":"tany",
"field-not-found":"tany",
"fun-missing-colon":"tany",
"fun-missing-end":"tany",
"generic-type-mismatch":"tany",
"internal-error":"tany",
"invalid-array-index":"tany",
"is-ParseError":"tany",
"is-RuntimeError":"tany",
"is-app-args-missing-comma":"tany",
"is-args-missing-comma":"tany",
"is-arity-mismatch":"tany",
"is-bad-block-stmt":"tany",
"is-bad-check-block-stmt":"tany",
"is-bad-tuple-bind":"tany",
"is-cases-arity-mismatch":"tany",
"is-cases-singleton-mismatch":"tany",
"is-constructor-arity-mismatch":"tany",
"is-empty-block":"tany",
"is-equality-failure":"tany",
"is-extend-non-object":"tany",
"is-field-not-found":"tany",
"is-fun-missing-colon":"tany",
"is-fun-missing-end":"tany",
"is-generic-type-mismatch":"tany",
"is-internal-error":"tany",
"is-invalid-array-index":"tany",
"is-lookup-constructor-not-object":"tany",
"is-lookup-large-index":"tany",
"is-lookup-non-object":"tany",
"is-lookup-non-tuple":"tany",
"is-message-exception":"tany",
"is-missing-comma":"tany",
"is-missing-end":"tany",
"is-module-load-failure":"tany",
"is-multi-error":"tany",
"is-no-branches-matched":"tany",
"is-no-cases-matched":"tany",
"is-non-boolean-condition":"tany",
"is-non-boolean-op":"tany",
"is-non-function-app":"tany",
"is-non-tuple-bind":"tany",
"is-num-string-binop-error":"tany",
"is-numeric-binop-error":"tany",
"is-parse-error-bad-number":"tany",
"is-parse-error-bad-operator":"tany",
"is-parse-error-eof":"tany",
"is-parse-error-next-token":"tany",
"is-parse-error-unterminated-string":"tany",
"is-sample-error":"tany",
"is-template-not-finished":"tany",
"is-uninitialized-id":"tany",
"is-update-frozen-ref":"tany",
"is-update-non-existent-field":"tany",
"is-update-non-obj":"tany",
"is-update-non-ref":"tany",
"is-user-break":"tany",
"is-user-exception":"tany",
"lookup-constructor-not-object":"tany",
"lookup-large-index":"tany",
"lookup-non-object":"tany",
"lookup-non-tuple":"tany",
"message-exception":"tany",
"missing-comma":"tany",
"missing-end":"tany",
"module-load-failure":"tany",
"multi-error":"tany",
"no-branches-matched":"tany",
"no-cases-matched":"tany",
"non-boolean-condition":"tany",
"non-boolean-op":"tany",
"non-function-app":"tany",
"non-tuple-bind":"tany",
"num-string-binop-error":"tany",
"numeric-binop-error":"tany",
"parse-error-bad-number":"tany",
"parse-error-bad-operator":"tany",
"parse-error-eof":"tany",
"parse-error-next-token":"tany",
"parse-error-unterminated-string":"tany",
"please-report-bug":"tany",
"sample-error":"tany",
"template-not-finished":"tany",
"uninitialized-id":"tany",
"update-frozen-ref":"tany",
"update-non-existent-field":"tany",
"update-non-obj":"tany",
"update-non-ref":"tany",
"user-break":"tany",
"user-exception":"tany",
"vert-list-values":"tany"},
"datatypes":{"atom#ParseError#2":["data","ParseError",[],[["parse-error-next-token",
[["next-token",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["loc",
"tany"]]],["parse-error-eof",
[["loc",
"tany"]]],["parse-error-unterminated-string",
[["loc",
"tany"]]],["parse-error-bad-operator",
[["loc",
"tany"]]],["parse-error-bad-number",
[["loc",
"tany"]]],["empty-block",
[["loc",
"tany"]]],["bad-block-stmt",
[["loc",
"tany"]]],["bad-check-block-stmt",
[["loc",
"tany"]]],["fun-missing-colon",
[["loc",
"tany"]]],["fun-missing-end",
[["loc",
"tany"]]],["args-missing-comma",
[["loc",
"tany"]]],["app-args-missing-comma",
[["loc",
"tany"]]],["missing-end",
[["loc",
"tany"]]],["missing-comma",
[["loc",
"tany"]]]],{"render-fancy-reason":["arrow",
["tany",
"tany"],
"tany"],
"render-reason":["arrow",
["tany"],
"tany"]}],
"atom#RuntimeError#1":["data","RuntimeError",[],[["multi-error",
[["errors",
"tany"]]],["sample-error",
[["some-info",
"tany"],["loc",
"tany"]]],["message-exception",
[["message",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["update-non-obj",
[["objloc",
"tany"],["obj",
"tany"],["loc",
"tany"]]],["update-frozen-ref",
[["fieldloc",
"tany"],["field",
"tany"],["objloc",
"tany"],["obj",
"tany"],["loc",
"tany"]]],["update-non-ref",
[["fieldloc",
"tany"],["field",
"tany"],["objloc",
"tany"],["obj",
"tany"],["loc",
"tany"]]],["update-non-existent-field",
[["fieldloc",
"tany"],["field",
"tany"],["objloc",
"tany"],["obj",
"tany"],["loc",
"tany"]]],["no-cases-matched",
[["val",
"tany"],["loc",
"tany"]]],["no-branches-matched",
[["expression",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["loc",
"tany"]]],["internal-error",
[["info-args",
"tany"],["message",
"tany"]]],["template-not-finished",
[["loc",
"tany"]]],["field-not-found",
[["field",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["obj",
"tany"],["loc",
"tany"]]],["lookup-constructor-not-object",
[["field",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["constr-name",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["loc",
"tany"]]],["lookup-non-tuple",
[["index",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["non-tup",
"tany"],["loc",
"tany"]]],["lookup-large-index",
[["index",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["len",
"tany"],["tup",
"tany"],["loc",
"tany"]]],["non-tuple-bind",
[["non-tup",
"tany"],["loc",
"tany"]]],["bad-tuple-bind",
[["desiredLength",
"tany"],["length",
"tany"],["tup",
"tany"],["loc",
"tany"]]],["lookup-non-object",
[["field",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["non-obj",
"tany"],["loc",
"tany"]]],["extend-non-object",
[["non-obj",
"tany"],["loc",
"tany"]]],["non-boolean-condition",
[["value",
"tany"],["typ",
"tany"],["loc",
"tany"]]],["non-boolean-op",
[["value",
"tany"],["typ",
"tany"],["position",
"tany"],["loc",
"tany"]]],["generic-type-mismatch",
[["typ",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["val",
"tany"]]],["num-string-binop-error",
[["methodname",
"tany"],["opdesc",
"tany"],["opname",
"tany"],["val2",
"tany"],["val1",
"tany"]]],["numeric-binop-error",
[["methodname",
"tany"],["opdesc",
"tany"],["opname",
"tany"],["val2",
"tany"],["val1",
"tany"]]],["cases-singleton-mismatch",
[["cases-loc",
"tany"],["should-be-singleton",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],["branch-loc",
"tany"]]],["cases-arity-mismatch",
[["cases-loc",
"tany"],["actual-arity",
"tany"],["num-args",
"tany"],["branch-loc",
"tany"]]],["constructor-arity-mismatch",
[["fun-app-args",
"tany"],["fun-def-arity",
"tany"],["constructor-name",
"tany"],["fun-def-loc",
"tany"]]],["arity-mismatch",
[["fun-app-args",
"tany"],["fun-def-arity",
"tany"],["fun-def-loc",
"tany"]]],["non-function-app",
[["non-fun-val",
"tany"],["loc",
"tany"]]],["uninitialized-id",
[["name",
"tany"],["loc",
"tany"]]],["module-load-failure",
[["names",
"tany"]]],["invalid-array-index",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["index",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["array",
"tany"],["method-name",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["equality-failure",
[["value2",
"tany"],["value1",
"tany"],["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["user-break"],["user-exception",
[["value",
"tany"]]]],{"render-reason":["arrow",
["tany"],
"tany"]}]},
"aliases":{"ParseError":"tany",
"RuntimeError":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$ED16,$$import17,$O18,$VS19) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://error";
var D = R.undefined;
var L = [[M,12,39,227,12,48,236],
[M,12,2,190,12,49,237],
[M,11,0,161,13,3,241],
[M,15,36,306,15,43,313],
[M,15,45,315,15,58,328],
[M,15,25,295,15,63,333],
[M,15,16,286,15,64,334],
[M,15,2,272,15,65,335],
[M,14,0,242,16,3,339],
[M,19,5,378,19,21,394],
[M,20,5,401,20,12,408],
[M,21,6,416,21,46,456],
[M,22,6,464,22,17,475],
[M,23,6,483,23,26,503],
[M,21,14,424,21,45,455],
[M,21,14,424,21,36,446],
[M,25,5,518,25,12,525],
[M,26,6,533,26,48,575],
[M,27,6,583,27,17,594],
[M,28,6,602,28,26,622],
[M,26,14,541,26,47,574],
[M,26,14,541,26,38,565],
[M,18,0,341,30,3,633],
[M,33,3,689,33,10,696],
[M,34,4,702,34,31,729],
[M,35,17,748,35,30,761],
[M,35,33,764,35,40,771],
[M,35,4,735,35,54,785],
[M,37,9,809,37,26,826],
[M,36,4,791,41,10,890],
[M,32,0,635,42,3,895],
[M,45,3,925,45,10,932],
[M,45,12,934,45,51,973],
[M,44,0,897,46,3,978],
[M,51,17,1134,51,28,1145],
[M,51,33,1150,51,78,1195],
[M,51,17,1134,51,79,1196],
[M,52,6,1203,52,29,1226],
[M,50,4,1059,53,7,1234],
[M,55,17,1285,55,28,1296],
[M,55,33,1301,55,50,1318],
[M,55,17,1285,55,51,1319],
[M,56,6,1326,56,29,1349],
[M,54,4,1240,57,7,1357],
[M,60,9,1487,60,17,1495],
[M,60,9,1487,60,30,1508],
[M,62,8,1578,62,11,1581],
[M,63,28,1610,63,36,1618],
[M,63,14,1596,63,37,1619],
[M,67,34,1808,67,42,1816],
[M,70,12,1886,70,15,1889],
[M,68,12,1831,68,21,1840],
[M,67,8,1782,74,11,1975],
[M,73,12,1960,73,15,1963],
[M,71,12,1902,71,16,1906],
[M,67,14,1788,67,22,1796],
[M,67,24,1798,67,43,1817],
[M,77,8,2035,77,11,2038],
[M,59,4,1401,79,7,2056],
[M,81,9,2099,81,17,2107],
[M,81,9,2099,81,30,2120],
[M,83,8,2190,83,11,2193],
[M,86,8,2273,86,11,2276],
[M,80,4,2062,88,7,2294],
[M,91,6,2392,91,26,2412],
[M,90,4,2346,92,7,2420],
[M,94,7,2461,94,15,2469],
[M,94,18,2472,94,25,2479],
[M,94,35,2489,94,47,2501],
[M,94,27,2481,94,48,2502],
[M,93,4,2426,95,7,2512],
[M,97,18,2558,97,30,2570],
[M,97,6,2546,97,31,2571],
[M,96,4,2518,98,7,2579],
[M,101,9,2713,101,17,2721],
[M,101,9,2713,101,30,2734],
[M,102,9,2745,102,17,2753],
[M,103,57,2812,103,65,2820],
[M,104,11,2834,104,18,2841],
[M,104,20,2843,104,63,2886],
[M,105,20,2909,105,28,2917],
[M,105,11,2900,105,29,2918],
[M,103,10,2765,103,66,2821],
[M,107,9,2941,107,17,2949],
[M,108,50,3001,108,58,3009],
[M,109,20,3042,109,28,3050],
[M,109,10,3032,109,29,3051],
[M,110,11,3064,110,18,3071],
[M,111,12,3085,111,27,3100],
[M,112,25,3127,112,45,3147],
[M,112,48,3150,112,55,3157],
[M,112,57,3159,112,68,3170],
[M,112,12,3114,112,73,3175],
[M,113,12,3189,113,81,3258],
[M,114,19,3280,114,27,3288],
[M,114,10,3271,114,28,3289],
[M,108,10,2961,108,69,3020],
[M,100,4,2627,116,7,3308],
[M,118,7,3349,118,15,3357],
[M,119,55,3414,119,63,3422],
[M,120,9,3434,120,16,3441],
[M,120,18,3443,120,61,3486],
[M,121,18,3507,121,26,3515],
[M,121,9,3498,121,27,3516],
[M,119,8,3367,119,64,3423],
[M,117,4,3314,122,7,3525],
[M,125,13,3683,125,21,3691],
[M,125,13,3683,125,34,3704],
[M,125,9,3679,125,35,3705],
[M,125,54,3724,125,62,3732],
[M,125,40,3710,125,63,3733],
[M,125,9,3679,125,63,3733],
[M,126,9,3744,126,17,3752],
[M,127,50,3804,127,58,3812],
[M,128,20,3845,128,28,3853],
[M,128,10,3835,128,29,3854],
[M,129,11,3867,129,18,3874],
[M,130,12,3888,130,27,3903],
[M,131,25,3930,131,41,3946],
[M,131,44,3949,131,51,3956],
[M,131,53,3958,131,66,3971],
[M,131,12,3917,131,71,3976],
[M,132,12,3990,132,41,4019],
[M,133,25,4046,133,43,4064],
[M,133,46,4067,133,53,4074],
[M,133,55,4076,133,66,4087],
[M,133,12,4033,133,71,4092],
[M,134,19,4114,134,27,4122],
[M,134,10,4105,134,28,4123],
[M,127,10,3764,127,69,3823],
[M,136,9,4146,136,17,4154],
[M,137,57,4213,137,65,4221],
[M,138,11,4235,138,18,4242],
[M,139,12,4256,139,33,4277],
[M,140,28,4307,140,38,4317],
[M,140,20,4299,140,39,4318],
[M,140,12,4291,140,40,4319],
[M,141,12,4333,141,48,4369],
[M,142,19,4391,142,27,4399],
[M,142,10,4382,142,28,4400],
[M,137,10,4166,137,66,4222],
[M,124,4,3593,144,7,4419],
[M,146,7,4460,146,15,4468],
[M,147,55,4525,147,63,4533],
[M,148,9,4545,148,16,4552],
[M,149,10,4564,149,31,4585],
[M,150,26,4613,150,36,4623],
[M,150,18,4605,150,37,4624],
[M,150,10,4597,150,38,4625],
[M,151,10,4637,151,46,4673],
[M,152,19,4695,152,27,4703],
[M,152,10,4686,152,28,4704],
[M,147,8,4478,147,64,4534],
[M,145,4,4425,153,7,4713],
[M,156,13,4868,156,21,4876],
[M,156,13,4868,156,34,4889],
[M,156,9,4864,156,35,4890],
[M,156,54,4909,156,62,4917],
[M,156,40,4895,156,63,4918],
[M,156,9,4864,156,63,4918],
[M,157,9,4929,157,17,4937],
[M,158,50,4989,158,58,4997],
[M,159,20,5030,159,28,5038],
[M,159,10,5020,159,29,5039],
[M,160,11,5052,160,18,5059],
[M,161,12,5073,161,27,5088],
[M,162,25,5115,162,41,5131],
[M,162,44,5134,162,51,5141],
[M,162,53,5143,162,66,5156],
[M,162,12,5102,162,71,5161],
[M,163,12,5175,163,50,5213],
[M,164,25,5240,164,43,5258],
[M,164,46,5261,164,53,5268],
[M,164,55,5270,164,66,5281],
[M,164,12,5227,164,71,5286],
[M,165,19,5308,165,27,5316],
[M,165,10,5299,165,28,5317],
[M,158,10,4949,158,69,5008],
[M,167,9,5340,167,17,5348],
[M,168,55,5405,168,63,5413],
[M,169,9,5425,169,16,5432],
[M,170,10,5444,170,31,5465],
[M,171,26,5493,171,36,5503],
[M,171,18,5485,171,37,5504],
[M,171,10,5477,171,38,5505],
[M,172,10,5517,172,46,5553],
[M,173,19,5575,173,27,5583],
[M,173,10,5566,173,28,5584],
[M,168,8,5358,168,64,5414],
[M,155,4,4778,175,7,5603],
[M,177,7,5644,177,15,5652],
[M,178,55,5709,178,63,5717],
[M,179,9,5729,179,16,5736],
[M,180,10,5748,180,31,5769],
[M,181,26,5797,181,36,5807],
[M,181,18,5789,181,37,5808],
[M,181,10,5781,181,38,5809],
[M,182,10,5821,182,46,5857],
[M,183,19,5879,183,27,5887],
[M,183,10,5870,183,28,5888],
[M,178,8,5662,178,64,5718],
[M,176,4,5609,184,7,5897],
[M,187,9,6059,187,17,6067],
[M,187,9,6059,187,30,6080],
[M,188,9,6099,188,17,6107],
[M,189,57,6166,189,65,6174],
[M,190,11,6188,190,18,6195],
[M,191,12,6209,191,33,6230],
[M,192,28,6260,192,38,6270],
[M,192,20,6252,192,39,6271],
[M,192,12,6244,192,40,6272],
[M,193,12,6286,193,53,6327],
[M,194,19,6349,194,27,6357],
[M,194,10,6340,194,28,6358],
[M,189,10,6119,189,66,6175],
[M,196,9,6381,196,17,6389],
[M,197,50,6441,197,58,6449],
[M,198,20,6482,198,28,6490],
[M,198,10,6472,198,29,6491],
[M,199,11,6504,199,18,6511],
[M,200,12,6525,200,27,6540],
[M,201,25,6567,201,41,6583],
[M,201,44,6586,201,51,6593],
[M,201,53,6595,201,66,6608],
[M,201,12,6554,201,71,6613],
[M,202,12,6627,202,46,6661],
[M,203,25,6688,203,43,6706],
[M,203,46,6709,203,53,6716],
[M,203,55,6718,203,66,6729],
[M,203,12,6675,203,71,6734],
[M,204,19,6756,204,27,6764],
[M,204,10,6747,204,28,6765],
[M,197,10,6401,197,69,6460],
[M,186,4,5973,206,7,6784],
[M,208,7,6825,208,15,6833],
[M,209,55,6890,209,63,6898],
[M,210,9,6910,210,16,6917],
[M,211,10,6929,211,31,6950],
[M,212,26,6978,212,36,6988],
[M,212,18,6970,212,37,6989],
[M,212,10,6962,212,38,6990],
[M,213,10,7002,213,51,7043],
[M,214,17,7063,214,25,7071],
[M,214,8,7054,214,26,7072],
[M,209,8,6843,209,64,6899],
[M,207,4,6790,215,7,7081],
[M,218,9,7209,218,17,7217],
[M,218,9,7209,218,30,7230],
[M,218,52,7252,218,60,7260],
[M,218,34,7234,218,62,7262],
[M,218,38,7238,218,61,7261],
[M,218,9,7209,218,62,7262],
[M,219,9,7273,219,17,7281],
[M,220,46,7329,220,54,7337],
[M,221,11,7351,221,18,7358],
[M,221,20,7360,221,59,7399],
[M,222,19,7421,222,27,7429],
[M,222,10,7412,222,28,7430],
[M,220,10,7293,220,55,7338],
[M,223,28,7460,223,36,7468],
[M,223,14,7446,223,37,7469],
[M,224,34,7505,224,42,7513],
[M,226,13,7558,226,21,7566],
[M,227,43,7611,227,51,7619],
[M,228,24,7656,228,32,7664],
[M,228,14,7646,228,33,7665],
[M,229,15,7682,229,22,7689],
[M,230,16,7707,230,39,7730],
[M,231,29,7761,231,55,7787],
[M,231,57,7789,231,73,7805],
[M,231,78,7810,231,87,7819],
[M,231,57,7789,231,88,7820],
[M,231,16,7748,231,92,7824],
[M,232,16,7842,232,53,7879],
[M,233,29,7910,233,48,7929],
[M,233,50,7931,233,57,7938],
[M,233,59,7940,233,70,7951],
[M,233,59,7940,233,72,7953],
[M,233,16,7897,233,76,7957],
[M,234,16,7975,234,28,7987],
[M,235,24,8014,235,32,8022],
[M,235,15,8005,235,33,8023],
[M,227,14,7582,227,62,7630],
[M,225,12,7528,225,25,7541],
[M,224,8,7479,242,11,8294],
[M,225,10,7526,235,34,8024],
[M,237,13,8058,237,21,8066],
[M,238,43,8111,238,51,8119],
[M,239,24,8155,239,32,8163],
[M,239,14,8145,239,33,8164],
[M,240,15,8181,240,22,8188],
[M,240,24,8190,240,79,8245],
[M,241,24,8272,241,32,8280],
[M,241,15,8263,241,33,8281],
[M,238,14,8082,238,61,8129],
[M,236,12,8037,236,16,8041],
[M,236,10,8035,241,34,8282],
[M,224,14,7485,224,22,7493],
[M,224,24,7495,224,43,7514],
[M,218,6,7206,243,9,8304],
[M,217,4,7123,244,7,8312],
[M,246,7,8353,246,15,8361],
[M,247,44,8407,247,52,8415],
[M,248,9,8427,248,16,8434],
[M,248,18,8436,248,57,8475],
[M,249,17,8495,249,25,8503],
[M,249,8,8486,249,26,8504],
[M,247,8,8371,247,53,8416],
[M,245,4,8318,250,7,8513],
[M,253,13,8665,253,21,8673],
[M,253,13,8665,253,34,8686],
[M,253,9,8661,253,35,8687],
[M,253,54,8706,253,62,8714],
[M,253,40,8692,253,63,8715],
[M,253,9,8661,253,63,8715],
[M,254,9,8726,254,17,8734],
[M,255,19,8755,255,34,8770],
[M,255,52,8788,255,60,8796],
[M,256,20,8828,256,28,8836],
[M,256,10,8818,256,29,8837],
[M,257,11,8850,257,18,8857],
[M,258,12,8871,258,158,9017],
[M,255,10,8746,255,70,8806],
[M,255,19,8755,255,50,8786],
[M,260,9,9041,260,17,9049],
[M,261,26,9077,261,41,9092],
[M,261,59,9110,261,67,9118],
[M,262,11,9132,262,18,9139],
[M,263,12,9153,263,158,9299],
[M,261,10,9061,261,68,9119],
[M,261,26,9077,261,57,9108],
[M,252,4,8575,265,7,9319],
[M,267,7,9360,267,15,9368],
[M,268,24,9394,268,39,9409],
[M,268,57,9427,268,65,9435],
[M,269,9,9447,269,16,9454],
[M,270,10,9466,270,156,9612],
[M,268,8,9378,268,66,9436],
[M,268,24,9394,268,55,9425],
[M,266,4,9325,271,7,9622],
[M,274,6,9755,274,26,9775],
[M,273,4,9672,275,7,9783],
[M,277,7,9824,277,15,9832],
[M,278,9,9843,278,16,9850],
[M,278,18,9852,278,44,9878],
[M,278,54,9888,278,66,9900],
[M,278,46,9880,278,67,9901],
[M,279,9,9913,279,16,9920],
[M,279,18,9922,279,48,9952],
[M,280,25,9980,280,39,9994],
[M,280,8,9963,280,40,9995],
[M,276,4,9789,281,7,10004],
[M,284,9,10132,284,17,10140],
[M,284,9,10132,284,30,10153],
[M,284,52,10175,284,60,10183],
[M,284,34,10157,284,62,10185],
[M,284,38,10161,284,61,10184],
[M,284,9,10132,284,62,10185],
[M,285,9,10196,285,17,10204],
[M,286,60,10266,286,68,10274],
[M,287,11,10288,287,18,10295],
[M,287,20,10297,287,72,10349],
[M,286,10,10216,286,69,10275],
[M,289,9,10373,289,17,10381],
[M,290,53,10436,290,61,10444],
[M,291,20,10476,291,28,10484],
[M,291,10,10466,291,29,10485],
[M,292,11,10498,292,18,10505],
[M,292,20,10507,292,72,10559],
[M,290,10,10393,290,71,10454],
[M,283,4,10046,294,7,10579],
[M,296,7,10620,296,15,10628],
[M,297,58,10688,297,66,10696],
[M,298,9,10708,298,16,10715],
[M,298,18,10717,298,70,10769],
[M,297,8,10638,297,67,10697],
[M,295,4,10585,299,7,10779],
[M,302,9,10923,302,17,10931],
[M,302,9,10923,302,30,10944],
[M,302,52,10966,302,60,10974],
[M,302,34,10948,302,62,10976],
[M,302,38,10952,302,61,10975],
[M,302,9,10923,302,62,10976],
[M,303,9,10987,303,17,10995],
[M,304,53,11050,304,61,11058],
[M,305,11,11072,305,18,11079],
[M,306,12,11093,306,51,11132],
[M,307,28,11162,307,38,11172],
[M,307,20,11154,307,39,11173],
[M,307,12,11146,307,40,11174],
[M,308,11,11188,308,30,11207],
[M,304,10,11007,304,62,11059],
[M,309,28,11237,309,36,11245],
[M,309,14,11223,309,37,11246],
[M,310,34,11282,310,42,11290],
[M,313,16,11375,313,28,11387],
[M,312,25,11343,315,15,11444],
[M,314,16,11411,314,28,11423],
[M,316,13,11458,316,21,11466],
[M,317,50,11518,317,58,11526],
[M,318,24,11563,318,32,11571],
[M,318,14,11553,318,33,11572],
[M,319,15,11589,319,22,11596],
[M,320,16,11614,320,31,11629],
[M,321,29,11660,321,49,11680],
[M,321,51,11682,321,58,11689],
[M,321,60,11691,321,67,11698],
[M,321,60,11691,321,69,11700],
[M,321,16,11647,321,74,11705],
[M,322,16,11723,322,62,11769],
[M,323,30,11801,323,41,11812],
[M,323,43,11814,323,66,11837],
[M,324,59,11898,324,69,11908],
[M,324,51,11890,324,70,11909],
[M,324,43,11882,324,71,11910],
[M,325,30,11943,325,37,11950],
[M,325,39,11952,325,54,11967],
[M,323,16,11787,325,59,11972],
[M,326,16,11990,326,28,12002],
[M,327,24,12029,327,32,12037],
[M,327,15,12020,327,33,12038],
[M,317,14,11482,317,69,11537],
[M,311,12,11305,311,21,11314],
[M,310,8,11256,337,11,12425],
[M,311,10,11303,327,34,12039],
[M,329,13,12073,329,21,12081],
[M,330,50,12133,330,58,12141],
[M,331,24,12178,331,32,12186],
[M,331,14,12168,331,33,12187],
[M,332,15,12204,332,22,12211],
[M,333,16,12229,333,87,12300],
[M,334,32,12334,334,42,12344],
[M,334,24,12326,334,43,12345],
[M,334,16,12318,334,44,12346],
[M,335,16,12364,335,28,12376],
[M,336,24,12403,336,32,12411],
[M,336,15,12394,336,33,12412],
[M,330,14,12097,330,69,12152],
[M,328,12,12052,328,16,12056],
[M,328,10,12050,336,34,12413],
[M,310,14,11262,310,22,11270],
[M,310,24,11272,310,43,11291],
[M,339,9,12447,339,17,12455],
[M,340,53,12510,340,61,12518],
[M,341,11,12532,341,18,12539],
[M,342,12,12553,342,83,12624],
[M,343,28,12654,343,38,12664],
[M,343,20,12646,343,39,12665],
[M,343,12,12638,343,40,12666],
[M,344,12,12680,344,24,12692],
[M,345,20,12715,345,28,12723],
[M,345,11,12706,345,29,12724],
[M,340,10,12467,340,62,12519],
[M,301,4,10837,347,7,12743],
[M,349,7,12784,349,15,12792],
[M,350,51,12845,350,59,12853],
[M,351,9,12865,351,16,12872],
[M,352,10,12884,352,81,12955],
[M,353,26,12983,353,36,12993],
[M,353,18,12975,353,37,12994],
[M,353,10,12967,353,38,12995],
[M,354,10,13007,354,22,13019],
[M,355,18,13040,355,26,13048],
[M,355,9,13031,355,27,13049],
[M,350,8,12802,350,60,12854],
[M,348,4,12749,356,7,13058],
[M,359,9,13234,359,17,13242],
[M,359,9,13234,359,30,13255],
[M,359,52,13277,359,60,13285],
[M,359,34,13259,359,62,13287],
[M,359,38,13263,359,61,13286],
[M,359,9,13234,359,62,13287],
[M,360,9,13298,360,17,13306],
[M,361,53,13361,361,61,13369],
[M,362,11,13383,362,18,13390],
[M,363,12,13404,363,70,13462],
[M,361,10,13318,361,62,13370],
[M,365,9,13486,365,17,13494],
[M,366,46,13542,366,54,13550],
[M,367,20,13582,367,28,13590],
[M,367,10,13572,367,29,13591],
[M,368,11,13604,368,18,13611],
[M,368,20,13613,368,78,13671],
[M,366,10,13506,366,64,13560],
[M,358,4,13148,370,7,13691],
[M,372,7,13732,372,15,13740],
[M,373,51,13793,373,59,13801],
[M,374,9,13813,374,16,13820],
[M,375,10,13832,375,68,13890],
[M,373,8,13750,373,60,13802],
[M,371,4,13697,376,7,13900],
[M,379,9,14049,379,17,14057],
[M,379,9,14049,379,30,14070],
[M,380,9,14081,380,17,14089],
[M,381,53,14144,381,61,14152],
[M,382,11,14166,382,18,14173],
[M,382,20,14175,382,67,14222],
[M,383,19,14244,383,31,14256],
[M,383,10,14235,383,32,14257],
[M,381,10,14101,381,62,14153],
[M,384,28,14287,384,36,14295],
[M,384,14,14273,384,37,14296],
[M,385,34,14332,385,42,14340],
[M,387,13,14381,387,21,14389],
[M,388,50,14441,388,58,14449],
[M,389,24,14486,389,32,14494],
[M,389,14,14476,389,33,14495],
[M,390,15,14512,390,22,14519],
[M,391,16,14537,391,31,14552],
[M,392,29,14583,392,49,14603],
[M,392,52,14606,392,59,14613],
[M,392,61,14615,392,68,14622],
[M,392,61,14615,392,70,14624],
[M,392,16,14570,392,75,14629],
[M,393,16,14647,393,50,14681],
[M,394,23,14707,394,35,14719],
[M,394,14,14698,394,36,14720],
[M,388,14,14405,388,69,14460],
[M,386,12,14355,386,21,14364],
[M,385,8,14306,401,11,14998],
[M,386,10,14353,394,37,14721],
[M,396,13,14760,396,21,14768],
[M,397,50,14820,397,58,14828],
[M,398,24,14864,398,32,14872],
[M,398,14,14854,398,33,14873],
[M,399,15,14890,399,22,14897],
[M,399,24,14899,399,71,14946],
[M,400,23,14972,400,35,14984],
[M,400,14,14963,400,36,14985],
[M,397,14,14784,397,68,14838],
[M,395,12,14734,395,16,14738],
[M,395,10,14732,400,37,14986],
[M,385,14,14312,385,22,14320],
[M,385,24,14322,385,43,14341],
[M,403,9,15020,403,17,15028],
[M,404,53,15083,404,61,15091],
[M,405,11,15105,405,18,15112],
[M,405,20,15114,405,67,15161],
[M,406,19,15183,406,31,15195],
[M,406,10,15174,406,32,15196],
[M,404,10,15040,404,62,15092],
[M,378,4,13963,408,7,15215],
[M,410,7,15256,410,15,15264],
[M,411,51,15317,411,59,15325],
[M,412,9,15337,412,16,15344],
[M,412,18,15346,412,65,15393],
[M,413,17,15413,413,29,15425],
[M,413,8,15404,413,30,15426],
[M,411,8,15274,411,60,15326],
[M,409,4,15221,414,7,15435],
[M,417,9,15587,417,17,15595],
[M,417,9,15587,417,30,15608],
[M,418,9,15619,418,17,15627],
[M,419,53,15682,419,61,15690],
[M,420,11,15704,420,18,15711],
[M,421,12,15726,421,52,15766],
[M,422,29,15797,422,37,15805],
[M,422,12,15780,422,38,15806],
[M,423,12,15820,423,58,15866],
[M,424,34,15902,424,44,15912],
[M,424,12,15880,424,53,15921],
[M,425,19,15943,425,27,15951],
[M,425,10,15934,425,28,15952],
[M,424,20,15888,424,52,15920],
[M,424,20,15888,424,45,15913],
[M,419,10,15639,419,62,15691],
[M,426,28,15982,426,36,15990],
[M,426,14,15968,426,37,15991],
[M,427,34,16027,427,42,16035],
[M,429,13,16076,429,21,16084],
[M,430,50,16136,430,58,16144],
[M,431,24,16181,431,32,16189],
[M,431,14,16171,431,33,16190],
[M,432,15,16207,432,22,16214],
[M,432,14,16206,439,65,16614],
[M,433,16,16232,433,31,16247],
[M,434,29,16278,434,49,16298],
[M,434,52,16301,434,59,16308],
[M,434,61,16310,434,68,16317],
[M,434,61,16310,434,70,16319],
[M,434,16,16265,434,75,16324],
[M,435,16,16342,435,43,16369],
[M,436,33,16404,436,41,16412],
[M,436,16,16387,436,42,16413],
[M,437,16,16431,437,52,16467],
[M,438,29,16498,438,48,16517],
[M,438,51,16520,438,58,16527],
[M,438,60,16529,438,73,16542],
[M,438,16,16485,438,78,16547],
[M,439,45,16594,439,55,16604],
[M,439,16,16565,439,64,16613],
[M,440,23,16639,440,31,16647],
[M,440,14,16630,440,32,16648],
[M,439,24,16573,439,63,16612],
[M,439,24,16573,439,56,16605],
[M,439,31,16580,439,56,16605],
[M,430,14,16100,430,69,16155],
[M,428,12,16050,428,21,16059],
[M,427,8,16001,451,11,17099],
[M,428,10,16048,440,33,16649],
[M,442,13,16688,442,21,16696],
[M,443,50,16748,443,58,16756],
[M,444,24,16792,444,32,16800],
[M,444,14,16782,444,33,16801],
[M,445,15,16818,445,22,16825],
[M,446,16,16844,446,56,16884],
[M,447,33,16919,447,41,16927],
[M,447,16,16902,447,42,16928],
[M,448,16,16946,448,62,16992],
[M,449,38,17032,449,48,17042],
[M,449,16,17010,449,57,17051],
[M,450,23,17077,450,31,17085],
[M,450,14,17068,450,32,17086],
[M,449,24,17018,449,56,17050],
[M,449,24,17018,449,49,17043],
[M,443,14,16712,443,68,16766],
[M,441,12,16662,441,16,16666],
[M,441,10,16660,450,33,17087],
[M,427,14,16007,427,22,16015],
[M,427,24,16017,427,43,16036],
[M,453,9,17121,453,17,17129],
[M,454,53,17184,454,61,17192],
[M,455,11,17206,455,18,17213],
[M,456,12,17228,456,68,17284],
[M,457,29,17315,457,37,17323],
[M,457,12,17298,457,38,17324],
[M,458,12,17338,458,58,17384],
[M,459,34,17420,459,44,17430],
[M,459,12,17398,459,53,17439],
[M,460,19,17461,460,27,17469],
[M,460,10,17452,460,28,17470],
[M,459,20,17406,459,52,17438],
[M,459,20,17406,459,45,17431],
[M,454,10,17141,454,62,17193],
[M,416,4,15501,462,7,17489],
[M,464,7,17530,464,15,17538],
[M,465,51,17591,465,59,17599],
[M,466,9,17611,466,16,17618],
[M,467,10,17631,467,66,17687],
[M,468,27,17716,468,35,17724],
[M,468,10,17699,468,36,17725],
[M,469,10,17737,469,56,17783],
[M,470,32,17817,470,42,17827],
[M,470,10,17795,470,51,17836],
[M,471,17,17856,471,25,17864],
[M,471,8,17847,471,26,17865],
[M,470,18,17803,470,50,17835],
[M,470,18,17803,470,43,17828],
[M,465,8,17548,465,60,17600],
[M,463,4,17495,472,7,17874],
[M,475,9,18004,475,17,18012],
[M,475,9,18004,475,30,18025],
[M,476,9,18036,476,17,18044],
[M,477,11,18057,477,18,18064],
[M,478,12,18078,478,54,18120],
[M,479,19,18141,479,27,18149],
[M,479,12,18134,479,28,18150],
[M,480,12,18164,480,80,18232],
[M,481,19,18254,481,31,18266],
[M,481,10,18245,481,32,18267],
[M,482,10,18279,482,29,18298],
[M,483,28,18328,483,36,18336],
[M,483,14,18314,483,37,18337],
[M,484,34,18373,484,42,18381],
[M,486,13,18422,486,21,18430],
[M,487,50,18482,487,58,18490],
[M,488,24,18527,488,32,18535],
[M,488,14,18517,488,33,18536],
[M,489,15,18553,489,22,18560],
[M,489,24,18562,489,90,18628],
[M,490,23,18654,490,35,18666],
[M,490,14,18645,490,36,18667],
[M,487,14,18446,487,69,18501],
[M,485,12,18396,485,21,18405],
[M,484,8,18347,498,11,18970],
[M,485,10,18394,490,37,18668],
[M,492,13,18707,492,21,18715],
[M,493,15,18732,493,22,18739],
[M,494,16,18757,494,58,18799],
[M,495,23,18824,495,31,18832],
[M,495,16,18817,495,32,18833],
[M,496,16,18851,496,83,18918],
[M,497,23,18944,497,35,18956],
[M,497,14,18935,497,36,18957],
[M,491,12,18681,491,16,18685],
[M,491,10,18679,497,37,18958],
[M,484,14,18353,484,22,18361],
[M,484,24,18363,484,43,18382],
[M,500,9,18992,500,17,19000],
[M,501,11,19013,501,18,19020],
[M,502,12,19034,502,54,19076],
[M,503,19,19097,503,27,19105],
[M,503,12,19090,503,28,19106],
[M,504,12,19120,504,79,19187],
[M,505,19,19209,505,31,19221],
[M,505,10,19200,505,32,19222],
[M,474,4,17918,507,7,19241],
[M,509,9,19284,509,17,19292],
[M,509,9,19284,509,30,19305],
[M,510,9,19316,510,17,19324],
[M,511,11,19337,511,18,19344],
[M,512,12,19358,512,54,19400],
[M,513,19,19421,513,27,19429],
[M,513,12,19414,513,28,19430],
[M,514,12,19444,514,87,19519],
[M,515,19,19541,515,31,19553],
[M,515,10,19532,515,32,19554],
[M,516,10,19566,516,29,19585],
[M,518,9,19608,518,17,19616],
[M,519,11,19629,519,18,19636],
[M,520,12,19650,520,54,19692],
[M,521,19,19713,521,27,19721],
[M,521,12,19706,521,28,19722],
[M,522,12,19736,522,87,19811],
[M,523,19,19833,523,31,19845],
[M,523,10,19824,523,32,19846],
[M,508,4,19247,525,7,19865],
[M,528,9,20014,528,17,20022],
[M,528,9,20014,528,30,20035],
[M,529,9,20046,529,17,20054],
[M,530,11,20067,530,18,20074],
[M,530,10,20066,537,25,20415],
[M,531,12,20088,531,43,20119],
[M,532,19,20140,532,27,20148],
[M,532,12,20133,532,28,20149],
[M,533,12,20163,533,40,20191],
[M,534,29,20222,534,47,20240],
[M,534,12,20205,534,48,20241],
[M,535,12,20255,535,105,20348],
[M,536,29,20379,536,37,20387],
[M,536,12,20362,536,38,20388],
[M,537,12,20402,537,24,20414],
[M,538,19,20436,538,27,20444],
[M,538,10,20427,538,28,20445],
[M,539,10,20457,539,29,20476],
[M,540,28,20506,540,36,20514],
[M,540,14,20492,540,37,20515],
[M,541,34,20551,541,42,20559],
[M,543,13,20600,543,21,20608],
[M,544,40,20650,544,48,20658],
[M,545,24,20695,545,32,20703],
[M,545,14,20685,545,33,20704],
[M,546,15,20721,546,22,20728],
[M,546,14,20720,552,29,21078],
[M,547,16,20746,547,42,20772],
[M,548,41,20815,548,59,20833],
[M,548,29,20803,548,60,20834],
[M,548,62,20836,548,72,20846],
[M,548,77,20851,548,80,20854],
[M,548,62,20836,548,81,20855],
[M,548,16,20790,548,85,20859],
[M,549,16,20877,549,90,20951],
[M,550,16,20969,550,47,21000],
[M,551,33,21035,551,44,21046],
[M,551,16,21018,551,45,21047],
[M,552,16,21065,552,28,21077],
[M,553,23,21103,553,31,21111],
[M,553,14,21094,553,32,21112],
[M,544,14,20624,544,59,20669],
[M,542,12,20574,542,21,20583],
[M,541,8,20525,565,11,21614],
[M,542,10,20572,553,33,21113],
[M,555,13,21152,555,21,21160],
[M,556,40,21202,556,48,21210],
[M,557,24,21246,557,32,21254],
[M,557,14,21236,557,33,21255],
[M,558,15,21272,558,22,21279],
[M,559,16,21297,559,42,21323],
[M,560,25,21350,560,43,21368],
[M,560,16,21341,560,44,21369],
[M,561,16,21387,561,118,21489],
[M,562,33,21524,562,44,21535],
[M,562,16,21507,562,45,21536],
[M,563,16,21554,563,28,21566],
[M,564,23,21592,564,31,21600],
[M,564,14,21583,564,32,21601],
[M,556,14,21176,556,58,21220],
[M,554,12,21126,554,16,21130],
[M,554,10,21124,564,33,21602],
[M,541,14,20531,541,22,20539],
[M,541,24,20541,541,43,20560],
[M,567,9,21636,567,17,21644],
[M,568,11,21657,568,18,21664],
[M,568,10,21656,575,25,22008],
[M,569,12,21678,569,43,21709],
[M,570,19,21730,570,27,21738],
[M,570,12,21723,570,28,21739],
[M,571,12,21753,571,40,21781],
[M,572,29,21812,572,47,21830],
[M,572,12,21795,572,48,21831],
[M,573,12,21845,573,105,21938],
[M,574,29,21969,574,40,21980],
[M,574,12,21952,574,41,21981],
[M,575,12,21995,575,24,22007],
[M,576,19,22029,576,27,22037],
[M,576,10,22020,576,28,22038],
[M,527,4,19928,578,7,22057],
[M,580,9,22100,580,17,22108],
[M,580,9,22100,580,30,22121],
[M,581,9,22132,581,17,22140],
[M,582,11,22153,582,18,22160],
[M,582,10,22152,589,25,22504],
[M,583,12,22174,583,43,22205],
[M,584,19,22226,584,27,22234],
[M,584,12,22219,584,28,22235],
[M,585,12,22249,585,40,22277],
[M,586,29,22308,586,47,22326],
[M,586,12,22291,586,48,22327],
[M,587,12,22341,587,105,22434],
[M,588,29,22465,588,40,22476],
[M,588,12,22448,588,41,22477],
[M,589,12,22491,589,24,22503],
[M,590,19,22525,590,27,22533],
[M,590,10,22516,590,28,22534],
[M,591,10,22546,591,29,22565],
[M,593,9,22588,593,17,22596],
[M,594,11,22609,594,18,22616],
[M,594,10,22608,601,25,22971],
[M,595,12,22630,595,43,22661],
[M,596,19,22682,596,27,22690],
[M,596,12,22675,596,28,22691],
[M,597,12,22705,597,40,22733],
[M,598,29,22764,598,47,22782],
[M,598,12,22747,598,48,22783],
[M,599,12,22797,599,116,22901],
[M,600,29,22932,600,40,22943],
[M,600,12,22915,600,41,22944],
[M,601,12,22958,601,24,22970],
[M,602,19,22992,602,27,23000],
[M,602,10,22983,602,28,23001],
[M,579,4,22063,604,7,23021],
[M,607,9,23171,607,17,23179],
[M,607,9,23171,607,30,23192],
[M,608,9,23203,608,17,23211],
[M,609,42,23255,609,50,23263],
[M,610,11,23277,610,18,23284],
[M,610,20,23286,610,63,23329],
[M,611,20,23352,611,28,23360],
[M,611,11,23343,611,29,23361],
[M,609,10,23223,609,51,23264],
[M,612,28,23391,612,36,23399],
[M,612,14,23377,612,37,23400],
[M,613,34,23436,613,42,23444],
[M,616,16,23529,616,28,23541],
[M,615,25,23497,618,15,23598],
[M,617,16,23565,617,28,23577],
[M,619,13,23612,619,21,23620],
[M,620,50,23672,620,58,23680],
[M,621,24,23717,621,32,23725],
[M,621,14,23707,621,33,23726],
[M,622,15,23743,622,22,23750],
[M,623,16,23768,623,31,23783],
[M,624,29,23814,624,49,23834],
[M,624,52,23837,624,59,23844],
[M,624,61,23846,624,68,23853],
[M,624,61,23846,624,70,23855],
[M,624,16,23801,624,75,23860],
[M,625,16,23878,625,46,23908],
[M,626,23,23934,626,35,23946],
[M,626,14,23925,626,36,23947],
[M,620,14,23636,620,69,23691],
[M,614,12,23459,614,21,23468],
[M,613,8,23410,634,11,24233],
[M,614,10,23457,626,37,23948],
[M,628,13,23982,628,21,23990],
[M,629,50,24042,629,58,24050],
[M,630,24,24087,630,32,24095],
[M,630,14,24077,630,33,24096],
[M,631,15,24113,631,22,24120],
[M,632,16,24138,632,59,24181],
[M,633,23,24207,633,35,24219],
[M,633,14,24198,633,36,24220],
[M,629,14,24006,629,69,24061],
[M,627,12,23961,627,16,23965],
[M,627,10,23959,633,37,24221],
[M,613,14,23416,613,22,23424],
[M,613,24,23426,613,43,23445],
[M,636,9,24255,636,17,24263],
[M,637,42,24307,637,50,24315],
[M,638,11,24329,638,18,24336],
[M,638,20,24338,638,63,24381],
[M,639,19,24403,639,27,24411],
[M,639,10,24394,639,28,24412],
[M,637,10,24275,637,51,24316],
[M,606,4,23085,641,7,24431],
[M,643,7,24472,643,15,24480],
[M,644,41,24523,644,49,24531],
[M,645,9,24543,645,16,24550],
[M,645,18,24552,645,61,24595],
[M,646,17,24615,646,25,24623],
[M,646,8,24606,646,26,24624],
[M,644,8,24490,644,50,24532],
[M,642,4,24437,647,7,24633],
[M,650,9,24766,650,17,24774],
[M,650,9,24766,650,30,24787],
[M,651,9,24798,651,17,24806],
[M,652,57,24865,652,65,24873],
[M,653,11,24887,653,18,24894],
[M,653,20,24896,653,63,24939],
[M,654,20,24962,654,32,24974],
[M,654,11,24953,654,33,24975],
[M,652,10,24818,652,66,24874],
[M,655,28,25005,655,36,25013],
[M,655,14,24991,655,37,25014],
[M,656,34,25050,656,42,25058],
[M,659,16,25143,659,31,25158],
[M,658,25,25111,661,15,25215],
[M,660,16,25182,660,28,25194],
[M,662,13,25229,662,21,25237],
[M,663,54,25293,663,62,25301],
[M,664,24,25338,664,32,25346],
[M,664,14,25328,664,33,25347],
[M,665,15,25364,665,22,25371],
[M,666,16,25389,666,31,25404],
[M,667,29,25435,667,49,25455],
[M,667,52,25458,667,59,25465],
[M,667,61,25467,667,69,25475],
[M,667,61,25467,667,71,25477],
[M,667,16,25422,667,76,25482],
[M,668,16,25500,668,46,25530],
[M,669,23,25556,669,35,25568],
[M,669,14,25547,669,36,25569],
[M,663,14,25253,663,73,25312],
[M,657,12,25073,657,21,25082],
[M,656,8,25024,677,11,25859],
[M,657,10,25071,669,37,25570],
[M,671,13,25604,671,21,25612],
[M,672,54,25668,672,62,25676],
[M,673,24,25713,673,32,25721],
[M,673,14,25703,673,33,25722],
[M,674,15,25739,674,22,25746],
[M,675,16,25764,675,59,25807],
[M,676,23,25833,676,35,25845],
[M,676,14,25824,676,36,25846],
[M,672,14,25628,672,73,25687],
[M,670,12,25583,670,16,25587],
[M,670,10,25581,676,37,25847],
[M,656,14,25030,656,22,25038],
[M,656,24,25040,656,43,25059],
[M,679,9,25881,679,17,25889],
[M,680,57,25948,680,65,25956],
[M,681,11,25970,681,18,25977],
[M,681,20,25979,681,63,26022],
[M,682,19,26044,682,31,26056],
[M,682,10,26035,682,32,26057],
[M,680,10,25901,680,66,25957],
[M,649,4,24680,684,7,26076],
[M,686,7,26117,686,15,26125],
[M,687,55,26182,687,63,26190],
[M,688,9,26202,688,16,26209],
[M,688,18,26211,688,61,26254],
[M,689,17,26274,689,29,26286],
[M,689,8,26265,689,30,26287],
[M,687,8,26135,687,64,26191],
[M,685,4,26082,690,7,26296],
[M,693,6,26396,693,26,26416],
[M,692,4,26350,694,7,26433],
[M,696,7,26474,696,15,26482],
[M,697,9,26493,697,16,26500],
[M,697,8,26492,700,61,26749],
[M,698,10,26512,698,29,26531],
[M,698,39,26541,698,54,26556],
[M,698,31,26533,698,55,26557],
[M,698,57,26559,698,70,26572],
[M,698,80,26582,698,96,26598],
[M,698,72,26574,698,97,26599],
[M,699,10,26611,699,40,26641],
[M,699,50,26651,699,58,26659],
[M,699,42,26643,699,59,26660],
[M,699,61,26662,699,85,26686],
[M,700,29,26717,700,37,26725],
[M,700,40,26728,700,60,26748],
[M,701,17,26768,701,27,26778],
[M,701,8,26759,701,28,26779],
[M,700,10,26698,700,38,26726],
[M,695,4,26439,702,7,26788],
[M,705,6,26891,705,26,26911],
[M,704,4,26845,706,7,26928],
[M,708,7,26969,708,15,26977],
[M,709,9,26988,709,16,26995],
[M,709,8,26987,713,61,27294],
[M,710,10,27007,710,29,27026],
[M,710,39,27036,710,54,27051],
[M,710,31,27028,710,55,27052],
[M,710,57,27054,710,70,27067],
[M,710,80,27077,710,96,27093],
[M,710,72,27069,710,97,27094],
[M,711,10,27106,711,28,27124],
[M,711,38,27134,711,51,27147],
[M,711,30,27126,711,52,27148],
[M,711,54,27150,711,80,27176],
[M,712,18,27196,712,26,27204],
[M,712,10,27188,712,27,27205],
[M,712,29,27207,712,53,27231],
[M,713,29,27262,713,37,27270],
[M,713,40,27273,713,60,27293],
[M,714,17,27313,714,27,27323],
[M,714,8,27304,714,28,27324],
[M,713,10,27243,713,38,27271],
[M,707,4,26934,715,7,27333],
[M,718,5,27472,718,13,27480],
[M,721,13,27567,721,29,27583],
[M,722,13,27598,722,24,27609],
[M,724,15,27676,724,22,27683],
[M,725,16,27701,725,56,27741],
[M,726,25,27768,726,33,27776],
[M,726,16,27759,726,34,27777],
[M,727,16,27795,727,51,27830],
[M,728,25,27857,728,33,27865],
[M,728,16,27848,728,34,27866],
[M,729,16,27884,729,34,27902],
[M,730,23,27928,730,31,27936],
[M,730,14,27919,730,32,27937],
[M,723,14,27625,723,48,27659],
[M,731,18,27957,731,36,27975],
[M,732,13,27990,732,24,28001],
[M,734,14,28069,734,28,28083],
[M,735,15,28100,735,22,28107],
[M,736,16,28125,736,56,28165],
[M,737,25,28192,737,33,28200],
[M,737,16,28183,737,34,28201],
[M,738,16,28219,738,51,28254],
[M,739,25,28281,739,33,28289],
[M,739,16,28272,739,34,28290],
[M,740,16,28308,740,34,28326],
[M,741,23,28352,741,31,28360],
[M,741,14,28343,741,32,28361],
[M,733,14,28017,733,50,28053],
[M,743,13,28392,743,24,28403],
[M,745,15,28470,745,22,28477],
[M,746,16,28495,746,56,28535],
[M,747,25,28562,747,33,28570],
[M,747,16,28553,747,34,28571],
[M,748,16,28589,748,51,28624],
[M,749,25,28651,749,33,28659],
[M,749,16,28642,749,34,28660],
[M,750,16,28678,750,34,28696],
[M,751,23,28722,751,31,28730],
[M,751,14,28713,751,32,28731],
[M,744,14,28419,744,48,28453],
[M,720,10,27541,720,19,27550],
[M,719,6,27488,762,9,29101],
[M,720,8,27539,752,13,28746],
[M,754,11,28776,754,22,28787],
[M,755,13,28802,755,20,28809],
[M,756,14,28825,756,91,28902],
[M,757,23,28927,757,31,28935],
[M,757,14,28918,757,32,28936],
[M,758,14,28952,758,51,28989],
[M,759,23,29014,759,31,29022],
[M,759,14,29005,759,32,29023],
[M,760,14,29039,760,32,29057],
[M,761,21,29081,761,29,29089],
[M,761,12,29072,761,30,29090],
[M,753,10,28757,753,14,28761],
[M,753,8,28755,761,31,29091],
[M,719,12,27494,719,20,27502],
[M,719,22,27504,719,47,27529],
[M,717,4,27390,763,7,29110],
[M,765,7,29152,765,15,29160],
[M,768,13,29231,768,24,29242],
[M,770,15,29309,770,22,29316],
[M,771,16,29334,771,60,29378],
[M,772,25,29405,772,33,29413],
[M,772,16,29396,772,34,29414],
[M,773,16,29432,773,53,29469],
[M,774,25,29496,774,33,29504],
[M,774,16,29487,774,34,29505],
[M,775,16,29523,775,34,29541],
[M,769,14,29258,769,48,29292],
[M,767,10,29208,776,13,29557],
[M,777,11,29570,777,22,29581],
[M,778,13,29596,778,20,29603],
[M,779,14,29619,779,91,29696],
[M,780,23,29721,780,31,29729],
[M,780,14,29712,780,32,29730],
[M,781,14,29746,781,51,29783],
[M,782,23,29808,782,31,29816],
[M,782,14,29799,782,32,29817],
[M,783,14,29833,783,32,29851],
[M,766,8,29170,783,35,29854],
[M,784,17,29873,784,25,29881],
[M,784,8,29864,784,26,29882],
[M,764,4,29117,785,7,29891],
[M,788,7,30053,788,15,30061],
[M,791,15,30154,791,31,30170],
[M,792,15,30187,792,26,30198],
[M,792,14,30186,804,45,30729],
[M,793,32,30232,793,43,30243],
[M,794,17,30284,794,24,30291],
[M,795,18,30311,795,47,30340],
[M,796,25,30368,796,34,30377],
[M,796,16,30359,796,35,30378],
[M,797,17,30397,797,24,30404],
[M,798,18,30424,798,48,30454],
[M,799,25,30482,799,34,30491],
[M,799,16,30473,799,35,30492],
[M,800,17,30511,800,24,30518],
[M,801,35,30555,801,46,30566],
[M,801,18,30538,801,82,30602],
[M,802,19,30623,802,30,30634],
[M,803,20,30656,803,46,30682],
[M,804,20,30704,804,42,30726],
[M,801,26,30546,801,81,30601],
[M,801,26,30546,801,46,30566],
[M,793,16,30216,793,65,30265],
[M,793,32,30232,793,59,30259],
[M,805,20,30750,805,38,30768],
[M,808,30,30877,808,38,30885],
[M,808,30,30877,808,40,30887],
[M,809,30,30918,809,39,30927],
[M,809,30,30918,809,41,30929],
[M,810,19,30949,810,30,30960],
[M,810,18,30948,827,49,31796],
[M,811,29,30991,811,40,31002],
[M,812,20,31056,812,34,31070],
[M,813,21,31093,813,28,31100],
[M,814,23,31125,814,38,31140],
[M,815,36,31178,815,56,31198],
[M,815,59,31201,815,66,31208],
[M,815,23,31165,815,80,31222],
[M,816,23,31247,816,39,31263],
[M,817,29,31295,817,38,31304],
[M,817,20,31286,817,39,31305],
[M,818,21,31328,818,28,31335],
[M,819,22,31359,819,37,31374],
[M,820,35,31411,820,56,31432],
[M,820,59,31435,820,66,31442],
[M,820,22,31398,820,81,31457],
[M,821,22,31481,821,38,31497],
[M,822,29,31529,822,38,31538],
[M,822,20,31520,822,39,31539],
[M,823,21,31562,823,28,31569],
[M,824,39,31610,824,50,31621],
[M,824,22,31593,824,86,31657],
[M,825,23,31682,825,34,31693],
[M,826,24,31719,826,50,31745],
[M,827,24,31771,827,46,31793],
[M,824,30,31601,824,85,31656],
[M,824,30,31601,824,50,31621],
[M,811,20,30982,811,72,31034],
[M,811,29,30991,811,56,31018],
[M,807,18,30834,807,27,30843],
[M,806,14,30784,841,17,32449],
[M,807,16,30832,827,49,31796],
[M,829,19,31847,829,30,31858],
[M,829,18,31846,840,49,32431],
[M,830,29,31889,830,40,31900],
[M,831,20,31953,831,34,31967],
[M,832,21,31990,832,28,31997],
[M,832,30,31999,832,59,32028],
[M,833,29,32060,833,38,32069],
[M,833,20,32051,833,39,32070],
[M,834,21,32093,834,28,32100],
[M,834,30,32102,834,60,32132],
[M,835,29,32164,835,38,32173],
[M,835,20,32155,835,39,32174],
[M,836,21,32197,836,28,32204],
[M,837,39,32245,837,50,32256],
[M,837,22,32228,837,86,32292],
[M,838,23,32317,838,34,32328],
[M,839,24,32354,839,50,32380],
[M,840,24,32406,840,46,32428],
[M,837,30,32236,837,85,32291],
[M,837,30,32236,837,50,32256],
[M,830,20,31880,830,71,31931],
[M,830,29,31889,830,56,31916],
[M,828,18,31815,828,22,31819],
[M,828,16,31813,840,49,32431],
[M,806,20,30790,806,28,30798],
[M,806,30,30800,806,44,30814],
[M,843,15,32483,843,26,32494],
[M,843,14,32482,853,45,32989],
[M,844,32,32528,844,43,32539],
[M,845,17,32580,845,24,32587],
[M,845,26,32589,845,55,32618],
[M,846,25,32646,846,34,32655],
[M,846,16,32637,846,35,32656],
[M,847,17,32675,847,24,32682],
[M,847,26,32684,847,56,32714],
[M,848,25,32742,848,34,32751],
[M,848,16,32733,848,35,32752],
[M,849,17,32771,849,24,32778],
[M,850,35,32815,850,46,32826],
[M,850,18,32798,850,82,32862],
[M,851,19,32883,851,30,32894],
[M,852,20,32916,852,46,32942],
[M,853,20,32964,853,42,32986],
[M,850,26,32806,850,81,32861],
[M,850,26,32806,850,46,32826],
[M,844,16,32512,844,65,32561],
[M,844,32,32528,844,59,32555],
[M,790,12,30126,790,21,30135],
[M,789,8,30071,872,9,33611],
[M,790,10,30124,854,15,33005],
[M,856,11,33035,856,22,33046],
[M,856,10,33034,871,41,33601],
[M,857,13,33061,857,20,33068],
[M,858,14,33084,858,27,33097],
[M,859,22,33121,859,33,33132],
[M,859,14,33113,859,34,33133],
[M,860,14,33149,860,45,33180],
[M,861,13,33196,861,20,33203],
[M,862,14,33219,862,43,33248],
[M,863,21,33272,863,30,33281],
[M,863,12,33263,863,31,33282],
[M,864,13,33297,864,20,33304],
[M,865,14,33320,865,44,33350],
[M,866,21,33374,866,30,33383],
[M,866,12,33365,866,31,33384],
[M,867,13,33399,867,20,33406],
[M,868,31,33439,868,42,33450],
[M,868,14,33422,868,78,33486],
[M,869,15,33503,869,26,33514],
[M,870,16,33532,870,42,33558],
[M,871,16,33576,871,38,33598],
[M,868,22,33430,868,77,33485],
[M,868,22,33430,868,42,33450],
[M,855,10,33016,855,14,33020],
[M,855,8,33014,871,41,33601],
[M,789,14,30077,789,22,30085],
[M,789,24,30087,789,49,30112],
[M,787,4,29969,873,7,33620],
[M,875,7,33661,875,15,33669],
[M,877,11,33729,877,22,33740],
[M,877,10,33728,889,41,34223],
[M,878,28,33770,878,39,33781],
[M,879,13,33818,879,20,33825],
[M,880,14,33841,880,43,33870],
[M,881,21,33894,881,30,33903],
[M,881,12,33885,881,31,33904],
[M,882,13,33919,882,20,33926],
[M,883,14,33942,883,44,33972],
[M,884,21,33996,884,30,34005],
[M,884,12,33987,884,31,34006],
[M,885,13,34021,885,20,34028],
[M,886,31,34061,886,42,34072],
[M,886,14,34044,886,78,34108],
[M,887,15,34125,887,26,34136],
[M,888,16,34154,888,42,34180],
[M,889,16,34198,889,38,34220],
[M,886,22,34052,886,77,34107],
[M,886,22,34052,886,42,34072],
[M,878,12,33754,878,61,33803],
[M,878,28,33770,878,55,33797],
[M,876,8,33708,890,11,34235],
[M,891,9,34246,891,20,34257],
[M,891,8,34245,906,39,34782],
[M,892,11,34270,892,18,34277],
[M,893,12,34291,893,25,34304],
[M,894,20,34326,894,31,34337],
[M,894,12,34318,894,32,34338],
[M,895,12,34352,895,43,34383],
[M,896,11,34397,896,18,34404],
[M,897,12,34418,897,41,34447],
[M,898,19,34469,898,28,34478],
[M,898,10,34460,898,29,34479],
[M,899,11,34492,899,18,34499],
[M,900,12,34513,900,42,34543],
[M,901,19,34565,901,28,34574],
[M,901,10,34556,901,29,34575],
[M,902,11,34588,902,18,34595],
[M,903,29,34626,903,40,34637],
[M,903,12,34609,903,76,34673],
[M,904,13,34688,904,24,34699],
[M,905,14,34715,905,40,34741],
[M,906,14,34757,906,36,34779],
[M,875,17,33671,906,40,34783],
[M,903,20,34617,903,75,34672],
[M,903,20,34617,903,40,34637],
[M,874,4,33626,907,7,34792],
[M,910,7,34951,910,15,34959],
[M,913,15,35052,913,31,35068],
[M,914,15,35085,914,26,35096],
[M,914,14,35084,923,96,35514],
[M,915,32,35130,915,43,35141],
[M,916,17,35182,916,24,35189],
[M,917,18,35209,917,47,35238],
[M,918,25,35266,918,34,35275],
[M,918,16,35257,918,35,35276],
[M,919,17,35295,919,24,35302],
[M,920,18,35322,920,48,35352],
[M,921,25,35380,921,34,35389],
[M,921,16,35371,921,35,35390],
[M,922,17,35409,922,24,35416],
[M,923,35,35453,923,46,35464],
[M,923,18,35436,923,94,35512],
[M,923,26,35444,923,93,35511],
[M,923,26,35444,923,46,35464],
[M,915,16,35114,915,65,35163],
[M,915,32,35130,915,59,35157],
[M,924,20,35535,924,38,35553],
[M,927,30,35662,927,38,35670],
[M,927,30,35662,927,40,35672],
[M,928,30,35703,928,39,35712],
[M,928,30,35703,928,41,35714],
[M,929,19,35734,929,30,35745],
[M,929,18,35733,943,100,36456],
[M,930,29,35776,930,40,35787],
[M,931,20,35841,931,34,35855],
[M,932,21,35878,932,28,35885],
[M,933,23,35910,933,38,35925],
[M,934,36,35963,934,56,35983],
[M,934,59,35986,934,66,35993],
[M,934,23,35950,934,80,36007],
[M,935,23,36032,935,39,36048],
[M,936,29,36080,936,38,36089],
[M,936,20,36071,936,39,36090],
[M,937,21,36113,937,28,36120],
[M,938,22,36144,938,37,36159],
[M,939,35,36196,939,56,36217],
[M,939,59,36220,939,66,36227],
[M,939,22,36183,939,81,36242],
[M,940,22,36266,940,38,36282],
[M,941,29,36314,941,38,36323],
[M,941,20,36305,941,39,36324],
[M,942,21,36347,942,28,36354],
[M,943,39,36395,943,50,36406],
[M,943,22,36378,943,98,36454],
[M,943,30,36386,943,97,36453],
[M,943,30,36386,943,50,36406],
[M,930,20,35767,930,72,35819],
[M,930,29,35776,930,56,35803],
[M,926,18,35619,926,27,35628],
[M,925,14,35569,954,17,36984],
[M,926,16,35617,943,100,36456],
[M,945,19,36507,945,30,36518],
[M,945,18,36506,953,100,36966],
[M,946,29,36549,946,40,36560],
[M,947,20,36613,947,34,36627],
[M,948,21,36650,948,28,36657],
[M,948,30,36659,948,59,36688],
[M,949,29,36720,949,38,36729],
[M,949,20,36711,949,39,36730],
[M,950,21,36753,950,28,36760],
[M,950,30,36762,950,60,36792],
[M,951,29,36824,951,38,36833],
[M,951,20,36815,951,39,36834],
[M,952,21,36857,952,28,36864],
[M,953,39,36905,953,50,36916],
[M,953,22,36888,953,98,36964],
[M,953,30,36896,953,97,36963],
[M,953,30,36896,953,50,36916],
[M,946,20,36540,946,71,36591],
[M,946,29,36549,946,56,36576],
[M,944,18,36475,944,22,36479],
[M,944,16,36473,953,100,36966],
[M,925,20,35575,925,28,35583],
[M,925,30,35585,925,44,35599],
[M,956,15,37018,956,26,37029],
[M,956,14,37017,963,96,37411],
[M,957,32,37063,957,43,37074],
[M,958,17,37115,958,24,37122],
[M,958,26,37124,958,55,37153],
[M,959,25,37181,959,34,37190],
[M,959,16,37172,959,35,37191],
[M,960,17,37210,960,24,37217],
[M,960,26,37219,960,56,37249],
[M,961,25,37277,961,34,37286],
[M,961,16,37268,961,35,37287],
[M,962,17,37306,962,24,37313],
[M,963,35,37350,963,46,37361],
[M,963,18,37333,963,94,37409],
[M,963,26,37341,963,93,37408],
[M,963,26,37341,963,46,37361],
[M,957,16,37047,957,65,37096],
[M,957,32,37063,957,59,37090],
[M,912,12,35024,912,21,35033],
[M,911,8,34969,979,9,37932],
[M,912,10,35022,964,15,37427],
[M,966,11,37457,966,22,37468],
[M,966,10,37456,978,92,37922],
[M,967,13,37483,967,20,37490],
[M,968,14,37506,968,27,37519],
[M,969,22,37543,969,33,37554],
[M,969,14,37535,969,34,37555],
[M,970,14,37571,970,45,37602],
[M,971,13,37618,971,20,37625],
[M,972,14,37641,972,43,37670],
[M,973,21,37694,973,30,37703],
[M,973,12,37685,973,31,37704],
[M,974,13,37719,974,20,37726],
[M,975,14,37742,975,44,37772],
[M,976,21,37796,976,30,37805],
[M,976,12,37787,976,31,37806],
[M,977,13,37821,977,20,37828],
[M,978,31,37861,978,42,37872],
[M,978,14,37844,978,90,37920],
[M,978,22,37852,978,89,37919],
[M,978,22,37852,978,42,37872],
[M,965,10,37438,965,14,37442],
[M,965,8,37436,978,92,37922],
[M,911,14,34975,911,22,34983],
[M,911,24,34985,911,49,35010],
[M,909,4,34867,980,7,37941],
[M,982,7,37982,982,15,37990],
[M,984,11,38050,984,22,38061],
[M,984,10,38049,993,92,38443],
[M,985,28,38091,985,39,38102],
[M,986,13,38139,986,20,38146],
[M,987,14,38162,987,43,38191],
[M,988,21,38215,988,30,38224],
[M,988,12,38206,988,31,38225],
[M,989,13,38240,989,20,38247],
[M,990,14,38263,990,44,38293],
[M,991,21,38317,991,30,38326],
[M,991,12,38308,991,31,38327],
[M,992,13,38342,992,20,38349],
[M,993,31,38382,993,42,38393],
[M,993,14,38365,993,90,38441],
[M,993,22,38373,993,89,38440],
[M,993,22,38373,993,42,38393],
[M,985,12,38075,985,61,38124],
[M,985,28,38091,985,55,38118],
[M,983,8,38029,994,11,38455],
[M,995,9,38466,995,20,38477],
[M,995,8,38465,1007,90,38907],
[M,996,11,38490,996,18,38497],
[M,997,12,38511,997,25,38524],
[M,998,20,38546,998,31,38557],
[M,998,12,38538,998,32,38558],
[M,999,12,38572,999,43,38603],
[M,1000,11,38617,1000,18,38624],
[M,1001,12,38638,1001,41,38667],
[M,1002,19,38689,1002,28,38698],
[M,1002,10,38680,1002,29,38699],
[M,1003,11,38712,1003,18,38719],
[M,1004,12,38733,1004,42,38763],
[M,1005,19,38785,1005,28,38794],
[M,1005,10,38776,1005,29,38795],
[M,1006,11,38808,1006,18,38815],
[M,1007,29,38846,1007,40,38857],
[M,1007,12,38829,1007,88,38905],
[M,982,17,37992,1007,91,38908],
[M,1007,20,38837,1007,87,38904],
[M,1007,20,38837,1007,40,38857],
[M,981,4,37947,1008,7,38917],
[M,1011,9,39098,1011,24,39113],
[M,1011,9,39098,1011,37,39126],
[M,1012,9,39137,1012,17,39145],
[M,1013,11,39158,1013,18,39165],
[M,1014,12,39179,1014,41,39208],
[M,1015,19,39229,1015,34,39244],
[M,1015,12,39222,1015,35,39245],
[M,1016,15,39262,1016,39,39286],
[M,1017,14,39302,1017,111,39399],
[M,1019,14,39432,1019,131,39549],
[M,1021,28,39596,1021,43,39611],
[M,1021,14,39582,1021,44,39612],
[M,1022,34,39648,1022,48,39662],
[M,1024,21,39711,1024,33,39723],
[M,1024,47,39737,1024,50,39740],
[M,1024,47,39737,1024,61,39751],
[M,1024,65,39755,1024,80,39770],
[M,1024,65,39755,1024,91,39781],
[M,1024,47,39737,1024,91,39781],
[M,1024,39,39729,1024,95,39785],
[M,1024,21,39711,1024,96,39786],
[M,1024,21,39711,1024,102,39792],
[M,1025,13,39806,1025,21,39814],
[M,1026,15,39831,1026,22,39838],
[M,1027,16,39856,1027,56,39896],
[M,1028,29,39927,1028,52,39950],
[M,1028,55,39953,1028,62,39960],
[M,1028,64,39962,1028,79,39977],
[M,1028,16,39914,1028,85,39983],
[M,1029,16,40001,1029,36,40021],
[M,1030,24,40048,1030,39,40063],
[M,1030,14,40038,1030,40,40064],
[M,1031,17,40083,1031,41,40107],
[M,1032,17,40126,1032,24,40133],
[M,1033,18,40153,1033,33,40168],
[M,1034,31,40201,1034,48,40218],
[M,1034,51,40221,1034,58,40228],
[M,1034,60,40230,1034,75,40245],
[M,1034,18,40188,1034,81,40251],
[M,1035,18,40271,1035,37,40290],
[M,1036,31,40323,1036,55,40347],
[M,1036,57,40349,1036,68,40360],
[M,1036,73,40365,1036,76,40368],
[M,1036,57,40349,1036,77,40369],
[M,1036,18,40310,1036,81,40373],
[M,1037,18,40393,1037,75,40450],
[M,1039,17,40489,1039,24,40496],
[M,1040,18,40516,1040,77,40575],
[M,1041,31,40608,1041,49,40626],
[M,1041,52,40629,1041,59,40636],
[M,1041,61,40638,1041,75,40652],
[M,1041,18,40595,1041,80,40657],
[M,1042,18,40677,1042,80,40739],
[M,1023,12,39677,1023,21,39686],
[M,1022,8,39622,1057,11,41402],
[M,1023,10,39675,1043,18,40759],
[M,1045,13,40798,1045,21,40806],
[M,1046,15,40823,1046,22,40830],
[M,1047,16,40848,1047,53,40885],
[M,1048,29,40916,1048,52,40939],
[M,1048,55,40942,1048,62,40949],
[M,1048,64,40951,1048,79,40966],
[M,1048,16,40903,1048,84,40971],
[M,1049,16,40989,1049,36,41009],
[M,1050,17,41029,1050,41,41053],
[M,1051,17,41072,1051,24,41079],
[M,1052,18,41099,1052,106,41187],
[M,1054,17,41226,1054,24,41233],
[M,1055,18,41253,1055,135,41370],
[M,1044,12,40772,1044,16,40776],
[M,1044,10,40770,1056,18,41390],
[M,1022,14,39628,1022,22,39636],
[M,1022,24,39638,1022,49,39663],
[M,1059,9,41424,1059,17,41432],
[M,1060,11,41445,1060,18,41452],
[M,1061,12,41466,1061,43,41497],
[M,1062,19,41518,1062,34,41533],
[M,1062,12,41511,1062,35,41534],
[M,1063,15,41551,1063,39,41575],
[M,1064,14,41591,1064,111,41688],
[M,1066,14,41721,1066,131,41838],
[M,1010,4,39012,1069,7,41874],
[M,1071,9,41917,1071,24,41932],
[M,1071,9,41917,1071,37,41945],
[M,1072,9,41956,1072,17,41964],
[M,1073,11,41977,1073,18,41984],
[M,1074,12,41998,1074,41,42027],
[M,1075,19,42048,1075,34,42063],
[M,1075,12,42041,1075,35,42064],
[M,1076,15,42081,1076,39,42105],
[M,1077,14,42121,1077,92,42199],
[M,1079,14,42232,1079,121,42339],
[M,1081,10,42368,1081,29,42387],
[M,1083,9,42410,1083,17,42418],
[M,1084,11,42431,1084,18,42438],
[M,1085,12,42452,1085,43,42483],
[M,1086,19,42504,1086,34,42519],
[M,1086,12,42497,1086,35,42520],
[M,1087,15,42537,1087,39,42561],
[M,1088,14,42577,1088,92,42655],
[M,1090,14,42688,1090,121,42795],
[M,1070,4,41880,1093,7,42831],
[M,1096,9,43000,1096,24,43015],
[M,1096,9,43000,1096,37,43028],
[M,1097,9,43039,1097,17,43047],
[M,1098,11,43060,1098,18,43067],
[M,1099,12,43081,1099,50,43119],
[M,1100,19,43140,1100,33,43154],
[M,1100,12,43133,1100,34,43155],
[M,1101,12,43169,1101,80,43237],
[M,1102,19,43258,1102,34,43273],
[M,1102,12,43251,1102,35,43274],
[M,1103,12,43288,1103,24,43300],
[M,1104,11,43314,1104,18,43321],
[M,1105,12,43335,1105,45,43368],
[M,1106,33,43403,1106,46,43416],
[M,1106,12,43382,1106,47,43417],
[M,1107,12,43431,1107,24,43443],
[M,1108,11,43457,1108,18,43464],
[M,1109,12,43478,1109,69,43535],
[M,1110,25,43562,1110,42,43579],
[M,1110,12,43549,1110,43,43580],
[M,1111,11,43594,1111,18,43601],
[M,1112,12,43615,1112,126,43729],
[M,1113,28,43760,1113,43,43775],
[M,1113,14,43746,1113,44,43776],
[M,1114,34,43812,1114,48,43826],
[M,1116,21,43881,1116,39,43899],
[M,1116,53,43913,1116,56,43916],
[M,1116,53,43913,1116,67,43927],
[M,1116,71,43931,1116,86,43946],
[M,1116,71,43931,1116,97,43957],
[M,1116,53,43913,1116,97,43957],
[M,1116,45,43905,1116,101,43961],
[M,1116,21,43881,1116,102,43962],
[M,1116,21,43881,1116,108,43968],
[M,1117,13,43982,1117,21,43990],
[M,1118,15,44007,1118,22,44014],
[M,1119,16,44032,1119,40,44056],
[M,1120,29,44087,1120,47,44105],
[M,1120,50,44108,1120,57,44115],
[M,1120,59,44117,1120,73,44131],
[M,1120,16,44074,1120,78,44136],
[M,1121,16,44154,1121,36,44174],
[M,1122,29,44205,1122,52,44228],
[M,1122,55,44231,1122,62,44238],
[M,1122,64,44240,1122,79,44255],
[M,1122,16,44192,1122,85,44261],
[M,1123,16,44279,1123,36,44299],
[M,1124,24,44326,1124,38,44340],
[M,1124,14,44316,1124,39,44341],
[M,1125,15,44358,1125,22,44365],
[M,1126,16,44383,1126,49,44416],
[M,1129,56,44565,1129,69,44578],
[M,1129,35,44544,1129,70,44579],
[M,1129,80,44589,1129,83,44592],
[M,1129,71,44580,1129,84,44593],
[M,1129,22,44531,1129,87,44596],
[M,1128,20,44473,1128,52,44505],
[M,1127,16,44434,1131,19,44712],
[M,1130,81,44678,1130,94,44691],
[M,1130,60,44657,1130,95,44692],
[M,1130,20,44617,1130,56,44653],
[M,1132,16,44730,1132,28,44742],
[M,1133,15,44760,1133,22,44767],
[M,1134,16,44785,1134,70,44839],
[M,1135,29,44870,1135,46,44887],
[M,1135,16,44857,1135,47,44888],
[M,1136,15,44906,1136,22,44913],
[M,1137,16,44931,1137,130,45045],
[M,1115,12,43841,1115,27,43856],
[M,1114,8,43786,1154,11,45813],
[M,1115,10,43839,1137,132,45047],
[M,1139,13,45086,1139,21,45094],
[M,1140,15,45111,1140,22,45118],
[M,1141,16,45136,1141,53,45173],
[M,1142,29,45204,1142,52,45227],
[M,1142,55,45230,1142,62,45237],
[M,1142,64,45239,1142,79,45254],
[M,1142,16,45191,1142,85,45260],
[M,1143,16,45278,1143,36,45298],
[M,1144,24,45325,1144,36,45337],
[M,1144,14,45315,1144,37,45338],
[M,1145,15,45355,1145,22,45362],
[M,1146,16,45380,1146,49,45413],
[M,1147,37,45452,1147,50,45465],
[M,1147,16,45431,1147,51,45466],
[M,1148,16,45484,1148,28,45496],
[M,1149,15,45514,1149,22,45521],
[M,1150,16,45539,1150,70,45593],
[M,1151,29,45624,1151,46,45641],
[M,1151,16,45611,1151,47,45642],
[M,1152,15,45660,1152,22,45667],
[M,1153,16,45685,1153,130,45799],
[M,1138,12,45060,1138,16,45064],
[M,1138,10,45058,1153,132,45801],
[M,1114,14,43792,1114,22,43800],
[M,1114,24,43802,1114,49,43827],
[M,1156,9,45835,1156,17,45843],
[M,1157,11,45856,1157,18,45863],
[M,1158,12,45877,1158,50,45915],
[M,1159,19,45936,1159,33,45950],
[M,1159,12,45929,1159,34,45951],
[M,1160,12,45965,1160,80,46033],
[M,1161,19,46054,1161,34,46069],
[M,1161,12,46047,1161,35,46070],
[M,1162,12,46084,1162,24,46096],
[M,1163,11,46110,1163,18,46117],
[M,1164,12,46131,1164,45,46164],
[M,1165,33,46199,1165,46,46212],
[M,1165,12,46178,1165,47,46213],
[M,1166,12,46227,1166,24,46239],
[M,1167,11,46253,1167,18,46260],
[M,1168,12,46274,1168,69,46331],
[M,1169,25,46358,1169,42,46375],
[M,1169,12,46345,1169,43,46376],
[M,1170,11,46390,1170,18,46397],
[M,1171,12,46411,1171,126,46525],
[M,1095,4,42914,1173,7,46545],
[M,1175,7,46586,1175,15,46594],
[M,1176,9,46605,1176,16,46612],
[M,1177,10,46624,1177,48,46662],
[M,1178,17,46681,1178,31,46695],
[M,1178,10,46674,1178,32,46696],
[M,1179,10,46708,1179,78,46776],
[M,1180,17,46795,1180,32,46810],
[M,1180,10,46788,1180,33,46811],
[M,1181,10,46823,1181,22,46835],
[M,1182,9,46847,1182,16,46854],
[M,1183,10,46866,1183,43,46899],
[M,1184,31,46932,1184,44,46945],
[M,1184,10,46911,1184,45,46946],
[M,1185,10,46958,1185,22,46970],
[M,1186,9,46982,1186,16,46989],
[M,1187,10,47001,1187,67,47058],
[M,1188,23,47083,1188,40,47100],
[M,1188,10,47070,1188,41,47101],
[M,1189,9,47113,1189,16,47120],
[M,1190,10,47132,1190,124,47246],
[M,1174,4,46551,1191,7,47256],
[M,1194,22,47457,1194,39,47474],
[M,1194,22,47457,1194,48,47483],
[M,1197,11,47529,1197,19,47537],
[M,1199,17,47602,1199,33,47618],
[M,1199,17,47602,1199,46,47631],
[M,1205,19,47776,1205,43,47800],
[M,1206,19,47821,1206,30,47832],
[M,1207,21,47855,1207,28,47862],
[M,1208,22,47886,1208,72,47936],
[M,1209,22,47960,1209,41,47979],
[M,1210,22,48003,1210,162,48143],
[M,1211,21,48167,1211,28,48174],
[M,1212,22,48198,1212,47,48223],
[M,1213,22,48247,1213,63,48288],
[M,1214,25,48316,1214,45,48336],
[M,1214,20,48311,1214,46,48337],
[M,1215,24,48363,1215,50,48389],
[M,1218,47,48531,1218,67,48551],
[M,1218,70,48554,1218,77,48561],
[M,1218,79,48563,1218,87,48571],
[M,1218,79,48563,1218,89,48573],
[M,1218,34,48518,1218,94,48578],
[M,1219,23,48602,1219,34,48613],
[M,1221,24,48731,1221,46,48753],
[M,1222,25,48780,1222,32,48787],
[M,1223,39,48828,1223,64,48853],
[M,1223,66,48855,1223,74,48863],
[M,1223,79,48868,1223,82,48871],
[M,1223,66,48855,1223,83,48872],
[M,1223,26,48815,1223,86,48875],
[M,1224,26,48903,1224,57,48934],
[M,1226,26,48999,1226,38,49011],
[M,1227,24,49038,1227,39,49053],
[M,1220,24,48639,1220,90,48705],
[M,1217,22,48471,1217,31,48480],
[M,1216,18,48409,1236,21,49496],
[M,1217,20,48469,1227,40,49054],
[M,1229,23,49113,1229,34,49124],
[M,1231,24,49242,1231,46,49264],
[M,1232,25,49291,1232,32,49298],
[M,1233,26,49326,1233,51,49351],
[M,1234,26,49379,1234,67,49420],
[M,1235,29,49452,1235,49,49472],
[M,1235,24,49447,1235,50,49473],
[M,1230,24,49150,1230,90,49216],
[M,1228,22,49077,1228,26,49081],
[M,1228,20,49075,1235,51,49474],
[M,1216,24,48415,1216,32,48423],
[M,1216,34,48425,1216,56,48447],
[M,1238,19,49538,1238,30,49549],
[M,1240,21,49658,1240,28,49665],
[M,1241,22,49689,1241,51,49718],
[M,1242,22,49742,1242,47,49767],
[M,1243,22,49791,1243,47,49816],
[M,1244,27,49846,1244,47,49866],
[M,1244,22,49841,1244,48,49867],
[M,1239,20,49571,1239,83,49634],
[M,1204,16,47736,1204,33,47753],
[M,1198,12,47552,1255,15,50265],
[M,1204,14,47734,1245,19,49888],
[M,1247,15,49926,1247,26,49937],
[M,1248,17,49956,1248,24,49963],
[M,1249,18,49983,1249,70,50035],
[M,1250,17,50055,1250,24,50062],
[M,1251,18,50082,1251,47,50111],
[M,1252,18,50131,1252,43,50156],
[M,1253,18,50176,1253,43,50201],
[M,1254,23,50227,1254,43,50247],
[M,1254,18,50222,1254,44,50248],
[M,1246,14,49903,1246,18,49907],
[M,1246,12,49901,1254,45,50249],
[M,1198,18,47558,1198,26,47566],
[M,1198,28,47568,1203,25,47718],
[M,1196,8,47507,1256,13,50280],
[M,1258,25,50315,1258,41,50331],
[M,1258,11,50301,1258,42,50332],
[M,1263,20,50479,1263,35,50494],
[M,1262,16,50444,1265,19,50567],
[M,1261,16,50412,1261,27,50423],
[M,1260,12,50380,1267,15,50628],
[M,1259,10,50344,1268,13,50642],
[M,1269,36,50679,1269,52,50695],
[M,1276,23,50983,1276,35,50995],
[M,1276,40,51000,1276,52,51012],
[M,1276,23,50983,1276,52,51012],
[M,1277,34,51048,1277,38,51052],
[M,1277,34,51048,1277,40,51054],
[M,1277,42,51056,1277,46,51060],
[M,1277,42,51056,1277,48,51062],
[M,1277,23,51037,1277,32,51046],
[M,1278,28,51092,1278,40,51104],
[M,1279,34,51140,1279,38,51144],
[M,1279,34,51140,1279,40,51146],
[M,1279,23,51129,1279,32,51138],
[M,1280,28,51176,1280,40,51188],
[M,1281,34,51224,1281,38,51228],
[M,1281,34,51224,1281,40,51230],
[M,1281,23,51213,1281,32,51222],
[M,1283,23,51281,1283,32,51290],
[M,1284,26,51319,1284,42,51335],
[M,1275,19,50941,1284,24,51317],
[M,1274,33,50905,1274,49,50921],
[M,1273,33,50855,1273,49,50871],
[M,1273,33,50855,1273,46,50868],
[M,1272,18,50803,1272,33,50818],
[M,1271,44,50769,1293,17,52124],
[M,1272,16,50801,1284,43,51336],
[M,1285,38,51375,1285,64,51401],
[M,1285,69,51406,1285,72,51409],
[M,1285,38,51375,1285,73,51410],
[M,1285,75,51412,1285,91,51428],
[M,1285,18,51355,1285,33,51370],
[M,1286,67,51497,1286,70,51500],
[M,1286,58,51488,1286,71,51501],
[M,1286,80,51510,1286,83,51513],
[M,1286,73,51503,1286,84,51514],
[M,1286,18,51448,1286,53,51483],
[M,1287,67,51583,1287,70,51586],
[M,1287,58,51574,1287,71,51587],
[M,1287,80,51596,1287,83,51599],
[M,1287,73,51589,1287,84,51600],
[M,1287,18,51534,1287,53,51569],
[M,1288,70,51672,1288,73,51675],
[M,1288,61,51663,1288,74,51676],
[M,1288,83,51685,1288,86,51688],
[M,1288,76,51678,1288,87,51689],
[M,1288,18,51620,1288,56,51658],
[M,1289,74,51765,1289,80,51771],
[M,1289,74,51765,1289,82,51773],
[M,1289,63,51754,1289,72,51763],
[M,1289,86,51777,1289,102,51793],
[M,1289,44,51735,1289,84,51775],
[M,1289,18,51709,1289,34,51725],
[M,1290,74,51869,1290,80,51875],
[M,1290,74,51869,1290,82,51877],
[M,1290,63,51858,1290,72,51867],
[M,1290,86,51881,1290,102,51897],
[M,1290,44,51839,1290,84,51879],
[M,1290,18,51813,1290,37,51832],
[M,1291,74,51973,1291,80,51979],
[M,1291,74,51973,1291,82,51981],
[M,1291,63,51962,1291,72,51971],
[M,1291,86,51985,1291,102,52001],
[M,1291,44,51943,1291,84,51983],
[M,1291,18,51917,1291,37,51936],
[M,1292,74,52077,1292,80,52083],
[M,1292,74,52077,1292,82,52085],
[M,1292,63,52066,1292,72,52075],
[M,1292,86,52089,1292,102,52105],
[M,1292,44,52047,1292,84,52087],
[M,1292,18,52021,1292,39,52042],
[M,1271,15,50740,1271,19,50744],
[M,1271,21,50746,1271,40,50765],
[M,1295,17,52179,1295,28,52190],
[M,1296,19,52211,1296,26,52218],
[M,1297,20,52240,1297,35,52255],
[M,1299,20,52308,1299,60,52348],
[M,1300,44,52394,1300,62,52412],
[M,1300,33,52383,1300,63,52413],
[M,1300,20,52370,1300,73,52423],
[M,1301,20,52445,1301,32,52457],
[M,1302,18,52478,1302,48,52508],
[M,1294,21,52146,1303,17,52527],
[M,1294,14,52139,1303,18,52528],
["dummy location"],
[M,1271,14,50739,1271,41,50766],
[M,1270,14,50712,1270,23,50721],
[M,1269,10,50653,1315,13,52955],
[M,1270,12,50710,1303,18,52528],
[M,1306,17,52610,1306,28,52621],
[M,1307,19,52642,1307,26,52649],
[M,1308,20,52671,1308,35,52686],
[M,1310,20,52739,1310,68,52787],
[M,1311,31,52820,1311,49,52838],
[M,1311,20,52809,1311,50,52839],
[M,1312,20,52861,1312,32,52873],
[M,1313,28,52904,1313,44,52920],
[M,1313,18,52894,1313,45,52921],
[M,1305,21,52577,1314,17,52940],
[M,1305,14,52570,1314,18,52941],
[M,1304,14,52543,1304,18,52547],
[M,1269,16,50659,1269,24,50667],
[M,1269,26,50669,1269,53,50696],
[M,1318,13,53016,1318,20,53023],
[M,1318,12,53015,1325,27,53289],
[M,1319,14,53039,1319,29,53054],
[M,1321,14,53095,1321,55,53136],
[M,1322,21,53159,1322,37,53175],
[M,1322,14,53152,1322,38,53176],
[M,1323,14,53192,1323,36,53214],
[M,1324,25,53241,1324,43,53259],
[M,1324,14,53230,1324,44,53260],
[M,1325,14,53276,1325,26,53288],
[M,1317,17,52987,1326,13,53303],
[M,1317,10,52980,1326,14,53304],
[M,1193,4,47358,1328,7,53324],
[M,1330,17,53375,1330,34,53392],
[M,1330,17,53375,1330,43,53401],
[M,1331,20,53422,1331,33,53435],
[M,1332,19,53483,1332,32,53496],
[M,1333,23,53558,1333,41,53576],
[M,1333,23,53558,1333,46,53581],
[M,1336,11,53662,1336,27,53678],
[M,1336,11,53662,1336,40,53691],
[M,1342,13,53789,1342,29,53805],
[M,1342,13,53789,1342,42,53818],
[M,1343,13,53833,1343,21,53841],
[M,1344,15,53858,1344,22,53865],
[M,1344,24,53867,1344,51,53894],
[M,1344,62,53905,1344,80,53923],
[M,1344,53,53896,1344,81,53924],
[M,1344,83,53926,1344,111,53954],
[M,1346,15,54018,1346,22,54025],
[M,1346,24,54027,1346,55,54058],
[M,1346,57,54060,1346,75,54078],
[M,1346,77,54080,1346,93,54096],
[M,1347,31,54130,1347,48,54147],
[M,1347,14,54113,1347,49,54148],
[M,1346,32,54035,1346,54,54057],
[M,1345,14,53971,1345,44,54001],
[M,1344,91,53934,1344,110,53953],
[M,1349,13,54179,1349,21,54187],
[M,1349,12,54178,1356,50,54632],
[M,1350,15,54204,1350,22,54211],
[M,1350,24,54213,1350,51,54240],
[M,1350,62,54251,1350,80,54269],
[M,1350,53,54242,1350,81,54270],
[M,1351,16,54288,1351,71,54343],
[M,1352,33,54379,1352,49,54395],
[M,1353,15,54413,1353,22,54420],
[M,1353,24,54422,1353,39,54437],
[M,1355,15,54501,1355,22,54508],
[M,1355,24,54510,1355,55,54541],
[M,1355,57,54543,1355,75,54561],
[M,1355,77,54563,1355,93,54579],
[M,1356,31,54613,1356,48,54630],
[M,1356,14,54596,1356,49,54631],
[M,1355,32,54518,1355,54,54540],
[M,1354,14,54454,1354,44,54484],
[M,1352,14,54360,1352,50,54396],
[M,1351,24,54296,1351,70,54342],
[M,1341,8,53759,1358,11,54658],
[M,1359,9,54669,1359,17,54677],
[M,1360,11,54690,1360,18,54697],
[M,1360,20,54699,1360,47,54726],
[M,1360,58,54737,1360,76,54755],
[M,1360,49,54728,1360,77,54756],
[M,1360,79,54758,1360,108,54787],
[M,1361,29,54819,1361,45,54835],
[M,1362,11,54849,1362,18,54856],
[M,1362,20,54858,1362,51,54889],
[M,1362,53,54891,1362,71,54909],
[M,1362,73,54911,1362,89,54927],
[M,1363,27,54957,1363,44,54974],
[M,1335,6,53631,1363,47,54977],
[M,1363,10,54940,1363,45,54975],
[M,1362,28,54866,1362,50,54888],
[M,1361,10,54800,1361,46,54836],
[M,1360,87,54766,1360,107,54786],
[M,1329,4,53330,1364,7,54985],
[M,1367,22,55162,1367,39,55179],
[M,1367,22,55162,1367,48,55188],
[M,1370,11,55234,1370,19,55242],
[M,1372,17,55307,1372,33,55323],
[M,1372,17,55307,1372,46,55336],
[M,1378,19,55481,1378,43,55505],
[M,1379,19,55526,1379,30,55537],
[M,1380,21,55560,1380,28,55567],
[M,1381,22,55591,1381,72,55641],
[M,1382,22,55665,1382,41,55684],
[M,1383,22,55708,1383,162,55848],
[M,1384,21,55872,1384,28,55879],
[M,1385,22,55903,1385,47,55928],
[M,1386,22,55952,1386,63,55993],
[M,1387,25,56021,1387,45,56041],
[M,1387,20,56016,1387,46,56042],
[M,1388,24,56068,1388,50,56094],
[M,1391,47,56236,1391,67,56256],
[M,1391,70,56259,1391,77,56266],
[M,1391,79,56268,1391,87,56276],
[M,1391,79,56268,1391,89,56278],
[M,1391,34,56223,1391,94,56283],
[M,1392,23,56307,1392,34,56318],
[M,1394,24,56436,1394,46,56458],
[M,1395,25,56485,1395,32,56492],
[M,1396,39,56533,1396,64,56558],
[M,1396,66,56560,1396,74,56568],
[M,1396,79,56573,1396,82,56576],
[M,1396,66,56560,1396,83,56577],
[M,1396,26,56520,1396,86,56580],
[M,1397,26,56608,1397,57,56639],
[M,1399,26,56704,1399,38,56716],
[M,1400,24,56743,1400,39,56758],
[M,1393,24,56344,1393,90,56410],
[M,1390,22,56176,1390,31,56185],
[M,1389,18,56114,1409,21,57201],
[M,1390,20,56174,1400,40,56759],
[M,1402,23,56818,1402,34,56829],
[M,1404,24,56947,1404,46,56969],
[M,1405,25,56996,1405,32,57003],
[M,1406,26,57031,1406,51,57056],
[M,1407,26,57084,1407,67,57125],
[M,1408,29,57157,1408,49,57177],
[M,1408,24,57152,1408,50,57178],
[M,1403,24,56855,1403,90,56921],
[M,1401,22,56782,1401,26,56786],
[M,1401,20,56780,1408,51,57179],
[M,1389,24,56120,1389,32,56128],
[M,1389,34,56130,1389,56,56152],
[M,1411,19,57243,1411,30,57254],
[M,1413,21,57363,1413,28,57370],
[M,1414,22,57394,1414,51,57423],
[M,1415,22,57447,1415,47,57472],
[M,1416,22,57496,1416,47,57521],
[M,1417,27,57551,1417,47,57571],
[M,1417,22,57546,1417,48,57572],
[M,1412,20,57276,1412,83,57339],
[M,1377,16,55441,1377,33,55458],
[M,1371,12,55257,1428,15,57970],
[M,1377,14,55439,1418,19,57593],
[M,1420,15,57631,1420,26,57642],
[M,1421,17,57661,1421,24,57668],
[M,1422,18,57688,1422,70,57740],
[M,1423,17,57760,1423,24,57767],
[M,1424,18,57787,1424,47,57816],
[M,1425,18,57836,1425,43,57861],
[M,1426,18,57881,1426,43,57906],
[M,1427,23,57932,1427,43,57952],
[M,1427,18,57927,1427,44,57953],
[M,1419,14,57608,1419,18,57612],
[M,1419,12,57606,1427,45,57954],
[M,1371,18,55263,1371,26,55271],
[M,1371,28,55273,1376,25,55423],
[M,1369,8,55212,1429,13,57985],
[M,1431,25,58020,1431,41,58036],
[M,1431,11,58006,1431,42,58037],
[M,1436,20,58184,1436,35,58199],
[M,1435,16,58149,1438,19,58272],
[M,1434,16,58117,1434,27,58128],
[M,1433,12,58085,1440,15,58333],
[M,1432,10,58049,1441,13,58347],
[M,1442,36,58384,1442,52,58400],
[M,1449,23,58688,1449,35,58700],
[M,1449,40,58705,1449,52,58717],
[M,1449,23,58688,1449,52,58717],
[M,1450,34,58753,1450,38,58757],
[M,1450,34,58753,1450,40,58759],
[M,1450,42,58761,1450,46,58765],
[M,1450,42,58761,1450,48,58767],
[M,1450,23,58742,1450,32,58751],
[M,1451,28,58797,1451,40,58809],
[M,1452,34,58845,1452,38,58849],
[M,1452,34,58845,1452,40,58851],
[M,1452,23,58834,1452,32,58843],
[M,1453,28,58881,1453,40,58893],
[M,1454,34,58929,1454,38,58933],
[M,1454,34,58929,1454,40,58935],
[M,1454,23,58918,1454,32,58927],
[M,1456,23,58986,1456,32,58995],
[M,1457,26,59024,1457,42,59040],
[M,1448,19,58646,1457,24,59022],
[M,1447,33,58610,1447,49,58626],
[M,1446,33,58560,1446,49,58576],
[M,1446,33,58560,1446,46,58573],
[M,1445,18,58508,1445,33,58523],
[M,1444,44,58474,1466,17,59829],
[M,1445,16,58506,1457,43,59041],
[M,1458,38,59080,1458,64,59106],
[M,1458,69,59111,1458,72,59114],
[M,1458,38,59080,1458,73,59115],
[M,1458,75,59117,1458,91,59133],
[M,1458,18,59060,1458,33,59075],
[M,1459,67,59202,1459,70,59205],
[M,1459,58,59193,1459,71,59206],
[M,1459,80,59215,1459,83,59218],
[M,1459,73,59208,1459,84,59219],
[M,1459,18,59153,1459,53,59188],
[M,1460,67,59288,1460,70,59291],
[M,1460,58,59279,1460,71,59292],
[M,1460,80,59301,1460,83,59304],
[M,1460,73,59294,1460,84,59305],
[M,1460,18,59239,1460,53,59274],
[M,1461,70,59377,1461,73,59380],
[M,1461,61,59368,1461,74,59381],
[M,1461,83,59390,1461,86,59393],
[M,1461,76,59383,1461,87,59394],
[M,1461,18,59325,1461,56,59363],
[M,1462,74,59470,1462,80,59476],
[M,1462,74,59470,1462,82,59478],
[M,1462,63,59459,1462,72,59468],
[M,1462,86,59482,1462,102,59498],
[M,1462,44,59440,1462,84,59480],
[M,1462,18,59414,1462,34,59430],
[M,1463,74,59574,1463,80,59580],
[M,1463,74,59574,1463,82,59582],
[M,1463,63,59563,1463,72,59572],
[M,1463,86,59586,1463,102,59602],
[M,1463,44,59544,1463,84,59584],
[M,1463,18,59518,1463,37,59537],
[M,1464,74,59678,1464,80,59684],
[M,1464,74,59678,1464,82,59686],
[M,1464,63,59667,1464,72,59676],
[M,1464,86,59690,1464,102,59706],
[M,1464,44,59648,1464,84,59688],
[M,1464,18,59622,1464,37,59641],
[M,1465,74,59782,1465,80,59788],
[M,1465,74,59782,1465,82,59790],
[M,1465,63,59771,1465,72,59780],
[M,1465,86,59794,1465,102,59810],
[M,1465,44,59752,1465,84,59792],
[M,1465,18,59726,1465,39,59747],
[M,1444,15,58445,1444,19,58449],
[M,1444,21,58451,1444,40,58470],
[M,1468,17,59884,1468,28,59895],
[M,1469,19,59916,1469,26,59923],
[M,1470,20,59945,1470,35,59960],
[M,1472,20,60013,1472,57,60050],
[M,1473,44,60096,1473,62,60114],
[M,1473,33,60085,1473,63,60115],
[M,1473,20,60072,1473,73,60125],
[M,1474,20,60147,1474,32,60159],
[M,1475,18,60180,1475,48,60210],
[M,1467,21,59851,1476,17,60229],
[M,1467,14,59844,1476,18,60230],
[M,1444,14,58444,1444,41,58471],
[M,1443,14,58417,1443,23,58426],
[M,1442,10,58358,1488,13,60654],
[M,1443,12,58415,1476,18,60230],
[M,1479,17,60312,1479,28,60323],
[M,1480,19,60344,1480,26,60351],
[M,1481,20,60373,1481,35,60388],
[M,1483,20,60441,1483,65,60486],
[M,1484,31,60519,1484,49,60537],
[M,1484,20,60508,1484,50,60538],
[M,1485,20,60560,1485,32,60572],
[M,1486,28,60603,1486,44,60619],
[M,1486,18,60593,1486,45,60620],
[M,1478,21,60279,1487,17,60639],
[M,1478,14,60272,1487,18,60640],
[M,1477,14,60245,1477,18,60249],
[M,1442,16,58364,1442,24,58372],
[M,1442,26,58374,1442,53,58401],
[M,1491,13,60715,1491,20,60722],
[M,1491,12,60714,1498,27,60985],
[M,1492,14,60738,1492,29,60753],
[M,1494,14,60794,1494,52,60832],
[M,1495,21,60855,1495,37,60871],
[M,1495,14,60848,1495,38,60872],
[M,1496,14,60888,1496,36,60910],
[M,1497,25,60937,1497,43,60955],
[M,1497,14,60926,1497,44,60956],
[M,1498,14,60972,1498,26,60984],
[M,1490,17,60686,1499,13,60999],
[M,1490,10,60679,1499,14,61000],
[M,1366,4,55057,1501,7,61020],
[M,1503,17,61071,1503,34,61088],
[M,1503,17,61071,1503,43,61097],
[M,1504,20,61118,1504,33,61131],
[M,1505,19,61179,1505,32,61192],
[M,1506,23,61254,1506,41,61272],
[M,1506,23,61254,1506,46,61277],
[M,1509,11,61358,1509,27,61374],
[M,1509,11,61358,1509,40,61387],
[M,1515,13,61485,1515,29,61501],
[M,1515,13,61485,1515,42,61514],
[M,1516,13,61529,1516,21,61537],
[M,1517,15,61554,1517,22,61561],
[M,1517,24,61563,1517,51,61590],
[M,1517,62,61601,1517,80,61619],
[M,1517,53,61592,1517,81,61620],
[M,1517,83,61622,1517,111,61650],
[M,1519,15,61714,1519,22,61721],
[M,1519,24,61723,1519,55,61754],
[M,1519,57,61756,1519,75,61774],
[M,1519,77,61776,1519,93,61792],
[M,1520,31,61826,1520,48,61843],
[M,1520,14,61809,1520,49,61844],
[M,1519,32,61731,1519,54,61753],
[M,1518,14,61667,1518,44,61697],
[M,1517,91,61630,1517,110,61649],
[M,1522,13,61875,1522,21,61883],
[M,1522,12,61874,1529,50,62328],
[M,1523,15,61900,1523,22,61907],
[M,1523,24,61909,1523,51,61936],
[M,1523,62,61947,1523,80,61965],
[M,1523,53,61938,1523,81,61966],
[M,1524,16,61984,1524,71,62039],
[M,1525,33,62075,1525,49,62091],
[M,1526,15,62109,1526,22,62116],
[M,1526,24,62118,1526,39,62133],
[M,1528,15,62197,1528,22,62204],
[M,1528,24,62206,1528,55,62237],
[M,1528,57,62239,1528,75,62257],
[M,1528,77,62259,1528,93,62275],
[M,1529,31,62309,1529,48,62326],
[M,1529,14,62292,1529,49,62327],
[M,1528,32,62214,1528,54,62236],
[M,1527,14,62150,1527,44,62180],
[M,1525,14,62056,1525,50,62092],
[M,1524,24,61992,1524,70,62038],
[M,1514,8,61455,1531,11,62354],
[M,1532,9,62365,1532,17,62373],
[M,1533,11,62386,1533,18,62393],
[M,1533,20,62395,1533,47,62422],
[M,1533,58,62433,1533,76,62451],
[M,1533,49,62424,1533,77,62452],
[M,1533,79,62454,1533,108,62483],
[M,1534,29,62515,1534,45,62531],
[M,1535,11,62545,1535,18,62552],
[M,1535,20,62554,1535,51,62585],
[M,1535,53,62587,1535,71,62605],
[M,1535,73,62607,1535,89,62623],
[M,1536,27,62653,1536,44,62670],
[M,1508,6,61327,1536,47,62673],
[M,1536,10,62636,1536,45,62671],
[M,1535,28,62562,1535,50,62584],
[M,1534,10,62496,1534,46,62532],
[M,1533,87,62462,1533,107,62482],
[M,1502,4,61026,1537,7,62681],
[M,1540,9,62817,1540,17,62825],
[M,1540,9,62817,1540,30,62838],
[M,1541,9,62849,1541,17,62857],
[M,1542,61,62920,1542,69,62928],
[M,1543,11,62942,1543,18,62949],
[M,1543,20,62951,1543,70,63001],
[M,1544,19,63023,1544,35,63039],
[M,1544,10,63014,1544,36,63040],
[M,1542,10,62869,1542,70,62929],
[M,1545,28,63070,1545,36,63078],
[M,1545,14,63056,1545,37,63079],
[M,1546,34,63115,1546,42,63123],
[M,1548,13,63164,1548,21,63172],
[M,1549,58,63232,1549,66,63240],
[M,1550,24,63277,1550,32,63285],
[M,1550,14,63267,1550,33,63286],
[M,1551,15,63303,1551,22,63310],
[M,1552,16,63328,1552,31,63343],
[M,1553,29,63374,1553,49,63394],
[M,1553,52,63397,1553,59,63404],
[M,1555,43,63484,1555,49,63490],
[M,1555,22,63463,1555,39,63480],
[M,1554,18,63425,1557,21,63549],
[M,1556,31,63522,1556,36,63527],
[M,1553,16,63361,1557,26,63554],
[M,1558,16,63572,1558,53,63609],
[M,1559,25,63637,1559,41,63653],
[M,1559,16,63628,1559,42,63654],
[M,1549,14,63188,1549,77,63251],
[M,1547,12,63138,1547,21,63147],
[M,1546,8,63089,1567,11,63965],
[M,1547,10,63136,1559,43,63655],
[M,1561,13,63694,1561,21,63702],
[M,1562,58,63762,1562,66,63770],
[M,1563,24,63806,1563,32,63814],
[M,1563,14,63796,1563,33,63815],
[M,1564,15,63832,1564,22,63839],
[M,1565,16,63857,1565,66,63907],
[M,1566,25,63935,1566,41,63951],
[M,1566,16,63926,1566,42,63952],
[M,1562,14,63718,1562,76,63780],
[M,1560,12,63668,1560,16,63672],
[M,1560,10,63666,1566,43,63953],
[M,1546,14,63095,1546,22,63103],
[M,1546,24,63105,1546,43,63124],
[M,1569,9,63987,1569,17,63995],
[M,1570,61,64058,1570,69,64066],
[M,1571,11,64080,1571,18,64087],
[M,1571,20,64089,1571,70,64139],
[M,1572,19,64161,1572,35,64177],
[M,1572,10,64152,1572,36,64178],
[M,1570,10,64007,1570,70,64067],
[M,1539,4,62731,1574,7,64197],
[M,1576,7,64238,1576,15,64246],
[M,1577,59,64307,1577,67,64315],
[M,1578,9,64327,1578,16,64334],
[M,1578,18,64336,1578,68,64386],
[M,1579,17,64406,1579,33,64422],
[M,1579,8,64397,1579,34,64423],
[M,1577,8,64256,1577,68,64316],
[M,1575,4,64203,1580,7,64432],
[M,1583,9,64561,1583,17,64569],
[M,1583,9,64561,1583,30,64582],
[M,1584,9,64593,1584,17,64601],
[M,1585,11,64614,1585,18,64621],
[M,1586,12,64635,1586,38,64661],
[M,1587,28,64692,1587,37,64701],
[M,1587,20,64684,1587,38,64702],
[M,1587,12,64676,1587,39,64703],
[M,1588,12,64717,1588,38,64743],
[M,1589,19,64764,1589,27,64772],
[M,1589,12,64757,1589,28,64773],
[M,1590,12,64788,1590,31,64807],
[M,1591,28,64837,1591,36,64845],
[M,1591,14,64823,1591,37,64846],
[M,1592,9,64857,1592,17,64865],
[M,1593,11,64878,1593,18,64885],
[M,1594,12,64899,1594,27,64914],
[M,1595,25,64941,1595,46,64962],
[M,1595,49,64965,1595,56,64972],
[M,1595,58,64974,1595,66,64982],
[M,1595,12,64928,1595,71,64987],
[M,1596,21,65011,1596,29,65019],
[M,1596,11,65001,1596,30,65020],
[M,1597,11,65033,1597,18,65040],
[M,1598,12,65054,1598,89,65131],
[M,1599,25,65158,1599,40,65173],
[M,1599,43,65176,1599,50,65183],
[M,1599,52,65185,1599,60,65193],
[M,1599,12,65145,1599,65,65198],
[M,1600,12,65212,1600,69,65269],
[M,1602,9,65293,1602,17,65301],
[M,1603,11,65314,1603,18,65321],
[M,1604,12,65335,1604,38,65361],
[M,1605,28,65392,1605,37,65401],
[M,1605,20,65384,1605,38,65402],
[M,1605,12,65376,1605,39,65403],
[M,1606,12,65417,1606,27,65432],
[M,1607,19,65453,1607,27,65461],
[M,1607,12,65446,1607,28,65462],
[M,1608,12,65476,1608,139,65603],
[M,1582,4,64475,1610,7,65623],
[M,1612,9,65666,1612,17,65674],
[M,1612,9,65666,1612,30,65687],
[M,1613,9,65698,1613,17,65706],
[M,1614,11,65719,1614,18,65726],
[M,1615,12,65740,1615,38,65766],
[M,1616,28,65797,1616,37,65806],
[M,1616,20,65789,1616,38,65807],
[M,1616,12,65781,1616,39,65808],
[M,1617,12,65822,1617,38,65848],
[M,1618,19,65869,1618,27,65877],
[M,1618,12,65862,1618,28,65878],
[M,1619,12,65893,1619,31,65912],
[M,1621,9,65935,1621,17,65943],
[M,1622,11,65956,1622,18,65963],
[M,1623,12,65977,1623,38,66003],
[M,1624,28,66034,1624,37,66043],
[M,1624,20,66026,1624,38,66044],
[M,1624,12,66018,1624,39,66045],
[M,1625,12,66059,1625,27,66074],
[M,1626,19,66095,1626,27,66103],
[M,1626,12,66088,1626,28,66104],
[M,1627,12,66118,1627,139,66245],
[M,1611,4,65629,1629,7,66265],
[M,1632,6,66395,1632,26,66415],
[M,1631,4,66331,1633,7,66423],
[M,1635,7,66464,1635,15,66472],
[M,1636,9,66483,1636,16,66490],
[M,1637,13,66505,1637,23,66515],
[M,1637,13,66505,1637,32,66524],
[M,1637,13,66505,1637,37,66529],
[M,1637,39,66531,1637,86,66578],
[M,1638,39,66618,1638,87,66666],
[M,1640,22,66705,1640,32,66715],
[M,1640,37,66720,1640,44,66727],
[M,1640,22,66705,1640,45,66728],
[M,1640,8,66691,1640,52,66735],
[M,1634,4,66429,1641,7,66744],
[M,1644,7,66945,1644,15,66953],
[M,1647,15,67045,1647,31,67061],
[M,1648,15,67078,1648,26,67089],
[M,1649,17,67108,1649,24,67115],
[M,1650,18,67136,1650,51,67169],
[M,1651,34,67205,1651,50,67221],
[M,1651,26,67197,1651,51,67222],
[M,1651,18,67189,1651,52,67223],
[M,1652,18,67243,1652,34,67259],
[M,1653,18,67279,1653,29,67290],
[M,1654,18,67310,1654,112,67404],
[M,1655,17,67424,1655,24,67431],
[M,1656,27,67460,1656,37,67470],
[M,1656,18,67451,1656,38,67471],
[M,1657,18,67491,1657,64,67537],
[M,1658,26,67565,1658,37,67576],
[M,1658,18,67557,1658,38,67577],
[M,1659,16,67596,1659,35,67615],
[M,1660,20,67637,1660,38,67655],
[M,1661,15,67672,1661,26,67683],
[M,1662,25,67710,1662,41,67726],
[M,1663,16,67759,1663,30,67773],
[M,1664,17,67792,1664,24,67799],
[M,1665,18,67819,1665,115,67916],
[M,1666,27,67945,1666,37,67955],
[M,1666,18,67936,1666,38,67956],
[M,1667,18,67976,1667,64,68022],
[M,1668,26,68050,1668,37,68061],
[M,1668,18,68042,1668,38,68062],
[M,1662,16,67701,1662,56,67741],
[M,1670,15,68098,1670,26,68109],
[M,1671,17,68128,1671,24,68135],
[M,1672,18,68156,1672,51,68189],
[M,1673,34,68225,1673,50,68241],
[M,1673,26,68217,1673,51,68242],
[M,1673,18,68209,1673,52,68243],
[M,1674,18,68263,1674,34,68279],
[M,1675,18,68299,1675,29,68310],
[M,1676,18,68330,1676,114,68426],
[M,1677,17,68446,1677,24,68453],
[M,1678,27,68482,1678,37,68492],
[M,1678,18,68473,1678,38,68493],
[M,1679,18,68513,1679,64,68559],
[M,1680,26,68587,1680,37,68598],
[M,1680,18,68579,1680,38,68599],
[M,1646,12,67017,1646,21,67026],
[M,1645,8,66963,1692,11,69083],
[M,1646,10,67015,1681,15,68617],
[M,1683,13,68651,1683,24,68662],
[M,1684,15,68679,1684,22,68686],
[M,1685,16,68705,1685,49,68738],
[M,1686,32,68772,1686,48,68788],
[M,1686,24,68764,1686,49,68789],
[M,1686,16,68756,1686,50,68790],
[M,1687,16,68808,1687,112,68904],
[M,1688,15,68922,1688,22,68929],
[M,1689,25,68956,1689,35,68966],
[M,1689,16,68947,1689,36,68967],
[M,1690,16,68985,1690,62,69031],
[M,1691,24,69057,1691,35,69068],
[M,1691,16,69049,1691,36,69069],
[M,1682,12,68630,1682,16,68634],
[M,1682,10,68628,1691,38,69071],
[M,1645,14,66969,1645,22,66977],
[M,1645,24,66979,1645,48,67003],
[M,1643,4,66861,1693,7,69092],
[M,1697,13,69191,1697,29,69207],
[M,1698,13,69222,1698,21,69230],
[M,1699,15,69247,1699,22,69254],
[M,1700,16,69273,1700,49,69306],
[M,1701,32,69340,1701,48,69356],
[M,1701,24,69332,1701,49,69357],
[M,1701,16,69324,1701,50,69358],
[M,1702,16,69376,1702,32,69392],
[M,1703,16,69410,1703,27,69421],
[M,1704,16,69439,1704,110,69533],
[M,1705,15,69551,1705,22,69558],
[M,1706,25,69585,1706,35,69595],
[M,1706,16,69576,1706,36,69596],
[M,1707,16,69614,1707,62,69660],
[M,1708,24,69686,1708,35,69697],
[M,1708,16,69678,1708,36,69698],
[M,1709,14,69715,1709,33,69734],
[M,1711,13,69765,1711,21,69773],
[M,1712,15,69790,1712,22,69797],
[M,1713,16,69816,1713,49,69849],
[M,1714,32,69883,1714,48,69899],
[M,1714,24,69875,1714,49,69900],
[M,1714,16,69867,1714,50,69901],
[M,1715,16,69919,1715,32,69935],
[M,1716,16,69953,1716,27,69964],
[M,1717,16,69982,1717,110,70076],
[M,1718,15,70094,1718,22,70101],
[M,1719,25,70128,1719,35,70138],
[M,1719,16,70119,1719,36,70139],
[M,1720,16,70157,1720,62,70203],
[M,1721,24,70229,1721,35,70240],
[M,1721,16,70221,1721,36,70241],
[M,1696,8,69168,1723,11,70269],
[M,1724,9,70280,1724,17,70288],
[M,1725,11,70301,1725,18,70308],
[M,1726,12,70323,1726,45,70356],
[M,1727,28,70386,1727,44,70402],
[M,1727,20,70378,1727,45,70403],
[M,1727,12,70370,1727,46,70404],
[M,1728,12,70418,1728,106,70512],
[M,1729,11,70526,1729,18,70533],
[M,1730,21,70556,1730,31,70566],
[M,1730,12,70547,1730,32,70567],
[M,1731,12,70581,1731,58,70627],
[M,1732,20,70649,1732,31,70660],
[M,1732,12,70641,1732,32,70661],
[M,1695,6,69132,1732,35,70664],
[M,1694,4,69098,1733,7,70672],
[M,1736,6,70784,1736,26,70804],
[M,1735,4,70738,1737,7,70819],
[M,1739,15,70868,1739,26,70879],
[M,1740,15,70895,1740,26,70906],
[M,1742,10,70928,1742,27,70945],
[M,1742,32,70950,1742,49,70967],
[M,1742,10,70928,1742,49,70967],
[M,1745,13,71077,1745,21,71085],
[M,1746,15,71102,1746,22,71109],
[M,1746,24,71111,1746,40,71127],
[M,1747,15,71145,1747,22,71152],
[M,1747,24,71154,1747,40,71170],
[M,1748,15,71188,1748,22,71195],
[M,1748,24,71197,1748,40,71213],
[M,1749,15,71231,1749,22,71238],
[M,1749,24,71240,1749,54,71270],
[M,1750,22,71294,1750,39,71311],
[M,1750,14,71286,1750,40,71312],
[M,1750,42,71314,1750,87,71359],
[M,1744,10,71037,1752,13,71376],
[M,1753,13,71390,1753,36,71413],
[M,1753,41,71418,1753,64,71441],
[M,1753,13,71390,1753,64,71441],
[M,1754,12,71455,1754,98,71541],
[M,1755,18,71560,1755,41,71583],
[M,1756,12,71597,1756,110,71695],
[M,1757,18,71714,1757,41,71737],
[M,1758,12,71751,1758,110,71849],
[M,1753,10,71387,1759,13,71863],
[M,1761,11,71896,1761,19,71904],
[M,1762,13,71919,1762,20,71926],
[M,1762,22,71928,1762,79,71985],
[M,1763,13,72001,1763,20,72008],
[M,1763,31,72019,1763,42,72030],
[M,1763,22,72010,1763,43,72031],
[M,1764,13,72047,1764,20,72054],
[M,1764,31,72065,1764,42,72076],
[M,1764,22,72056,1764,43,72077],
[M,1738,4,70825,1766,7,72097],
[M,1770,6,72170,1770,26,72190],
[M,1769,4,72124,1771,7,72198],
[M,1773,7,72239,1773,15,72247],
[M,1773,17,72249,1773,51,72283],
[M,1772,4,72204,1774,7,72292],
[M,1778,6,72383,1778,26,72403],
[M,1777,4,72337,1779,7,72411],
[M,1780,33,72446,1780,41,72454],
[M,1780,44,72457,1780,51,72464],
[M,1780,62,72475,1780,72,72485],
[M,1780,53,72466,1780,73,72486],
[M,1780,4,72417,1780,79,72492],
[M,1782,18,72538,1782,28,72548],
[M,1782,6,72526,1782,29,72549],
[M,1781,4,72498,1783,7,72557],
[M,49,2,1001,57,7,1357],
[M,49,4,1003,49,49,1048],
[M,58,2,1360,88,7,2294],
[M,58,4,1362,58,32,1390],
[M,89,2,2297,98,7,2579],
[M,89,33,2328,89,39,2334],
[M,89,4,2299,89,40,2335],
[M,99,2,2582,122,7,3525],
[M,99,4,2584,99,36,2616],
[M,123,2,3528,153,7,4713],
[M,123,4,3530,123,56,3582],
[M,154,2,4716,184,7,5897],
[M,154,4,4718,154,53,4767],
[M,185,2,5900,215,7,7081],
[M,185,4,5902,185,64,5962],
[M,216,2,7084,250,7,8513],
[M,216,4,7086,216,30,7112],
[M,251,2,8516,271,7,9622],
[M,251,43,8557,251,49,8563],
[M,251,4,8518,251,50,8564],
[M,272,2,9625,281,7,10004],
[M,272,4,9627,272,38,9661],
[M,282,2,10007,299,7,10779],
[M,282,4,10009,282,30,10035],
[M,300,2,10782,356,7,13058],
[M,300,39,10819,300,45,10825],
[M,300,4,10784,300,46,10826],
[M,357,2,13061,376,7,13900],
[M,357,54,13113,357,60,13119],
[M,357,71,13130,357,77,13136],
[M,357,4,13063,357,78,13137],
[M,377,2,13903,414,7,15435],
[M,377,44,13945,377,50,13951],
[M,377,4,13905,377,51,13952],
[M,415,2,15438,472,7,17874],
[M,415,47,15483,415,53,15489],
[M,415,4,15440,415,54,15490],
[M,473,2,17877,525,7,19865],
[M,473,4,17879,473,32,17907],
[M,526,2,19868,604,7,23021],
[M,526,4,19870,526,51,19917],
[M,605,2,23024,647,7,24633],
[M,605,45,23067,605,51,23073],
[M,605,4,23026,605,52,23074],
[M,648,2,24636,690,7,26296],
[M,648,4,24638,648,35,24669],
[M,691,2,26299,702,7,26788],
[M,691,4,26301,691,42,26339],
[M,703,2,26791,715,7,27333],
[M,703,4,26793,703,45,26834],
[M,716,2,27336,785,7,29891],
[M,716,38,27372,716,44,27378],
[M,716,4,27338,716,45,27379],
[M,786,2,29894,907,7,34792],
[M,786,4,29896,786,66,29958],
[M,908,2,34795,1008,7,38917],
[M,908,4,34797,908,63,34856],
[M,1009,2,38920,1093,7,42831],
[M,1009,64,38982,1009,71,38989],
[M,1009,4,38922,1009,83,39001],
[M,1094,2,42834,1191,7,47256],
[M,1094,4,42836,1094,71,42903],
[M,1192,2,47259,1364,7,54985],
[M,1192,4,47261,1192,90,47347],
[M,1365,2,54988,1537,7,62681],
[M,1365,4,54990,1365,60,55046],
[M,1538,2,62684,1580,7,64432],
[M,1538,4,62686,1538,38,62720],
[M,1581,2,64435,1629,7,66265],
[M,1581,4,64437,1581,31,64464],
[M,1630,2,66268,1641,7,66744],
[M,1630,4,66270,1630,30,66296],
[M,1642,2,66747,1733,7,70672],
[M,1642,39,66784,1642,45,66790],
[M,1642,63,66808,1642,69,66814],
[M,1642,81,66826,1642,87,66832],
[M,1642,4,66749,1642,88,66833],
[M,1734,2,70675,1766,7,72097],
[M,1734,31,70704,1734,37,70710],
[M,1734,4,70677,1734,54,70727],
[M,1768,2,72101,1774,7,72292],
[M,1776,2,72296,1783,7,72557],
[M,1776,4,72298,1776,32,72326],
[M,48,0,980,1784,3,72561],
[M,1942,12,79721,1942,36,79745],
[M,1942,4,79713,1942,37,79746],
[M,1941,2,79681,1943,5,79752],
[M,1789,23,72716,1789,31,72724],
[M,1789,9,72702,1789,32,72725],
[M,1790,9,72736,1790,17,72744],
[M,1791,11,72757,1791,18,72764],
[M,1791,20,72766,1791,75,72821],
[M,1792,20,72844,1792,28,72852],
[M,1792,10,72834,1792,29,72853],
[M,1793,11,72866,1793,18,72873],
[M,1793,10,72865,1798,82,73348],
[M,1793,20,72875,1793,93,72948],
[M,1794,12,72962,1794,49,72999],
[M,1794,63,73013,1794,90,73040],
[M,1794,92,73042,1794,99,73049],
[M,1794,101,73051,1794,109,73059],
[M,1794,50,73000,1794,113,73063],
[M,1795,12,73077,1795,51,73116],
[M,1795,61,73126,1795,73,73138],
[M,1795,53,73118,1795,74,73139],
[M,1796,12,73153,1796,33,73174],
[M,1796,43,73184,1796,55,73196],
[M,1796,35,73176,1796,56,73197],
[M,1797,12,73211,1797,41,73240],
[M,1797,51,73250,1797,64,73263],
[M,1797,43,73242,1797,65,73264],
[M,1798,12,73278,1798,81,73347],
[M,1800,11,73373,1800,19,73381],
[M,1801,13,73396,1801,20,73403],
[M,1801,22,73405,1801,77,73460],
[M,1802,29,73491,1802,37,73499],
[M,1802,22,73484,1802,38,73500],
[M,1803,13,73516,1803,20,73523],
[M,1803,12,73515,1808,84,74008],
[M,1803,22,73525,1803,95,73598],
[M,1804,14,73614,1804,51,73651],
[M,1804,65,73665,1804,92,73692],
[M,1804,94,73694,1804,101,73701],
[M,1804,103,73703,1804,111,73711],
[M,1804,52,73652,1804,115,73715],
[M,1805,14,73731,1805,53,73770],
[M,1805,63,73780,1805,75,73792],
[M,1805,55,73772,1805,76,73793],
[M,1806,14,73809,1806,35,73830],
[M,1806,45,73840,1806,57,73852],
[M,1806,37,73832,1806,58,73853],
[M,1807,14,73869,1807,43,73898],
[M,1807,53,73908,1807,66,73921],
[M,1807,45,73900,1807,67,73922],
[M,1808,14,73938,1808,83,74007],
[M,1788,4,72644,1810,7,74027],
[M,1812,7,74068,1812,15,74076],
[M,1813,9,74087,1813,16,74094],
[M,1813,18,74096,1813,73,74151],
[M,1813,94,74172,1813,102,74180],
[M,1814,9,74193,1814,16,74200],
[M,1814,18,74202,1814,89,74273],
[M,1815,9,74285,1815,16,74292],
[M,1815,18,74294,1815,72,74348],
[M,1816,9,74360,1816,16,74367],
[M,1816,8,74359,1819,36,74588],
[M,1816,18,74369,1816,55,74406],
[M,1816,65,74416,1816,77,74428],
[M,1816,57,74408,1816,78,74429],
[M,1817,10,74441,1817,31,74462],
[M,1817,41,74472,1817,53,74484],
[M,1817,33,74464,1817,54,74485],
[M,1818,10,74497,1818,39,74526],
[M,1818,49,74536,1818,62,74549],
[M,1818,41,74528,1818,63,74550],
[M,1819,10,74562,1819,35,74587],
[M,1820,9,74599,1820,16,74606],
[M,1820,18,74608,1820,72,74662],
[M,1813,75,74153,1813,103,74181],
[M,1811,4,74033,1822,7,74679],
[M,1825,23,74787,1825,31,74795],
[M,1825,9,74773,1825,32,74796],
[M,1826,9,74807,1826,17,74815],
[M,1827,11,74829,1827,18,74836],
[M,1828,12,74850,1828,59,74897],
[M,1829,25,74924,1829,39,74938],
[M,1829,41,74940,1829,48,74947],
[M,1829,50,74949,1829,58,74957],
[M,1829,12,74911,1829,63,74962],
[M,1830,12,74976,1830,143,75107],
[M,1832,9,75131,1832,17,75139],
[M,1833,11,75153,1833,18,75160],
[M,1834,12,75174,1834,67,75229],
[M,1835,19,75250,1835,27,75258],
[M,1835,12,75243,1835,28,75259],
[M,1836,12,75273,1836,144,75405],
[M,1824,4,74715,1838,7,75425],
[M,1840,7,75466,1840,15,75474],
[M,1840,18,75477,1840,25,75484],
[M,1841,10,75496,1841,74,75560],
[M,1842,10,75572,1842,112,75674],
[M,1839,4,75431,1843,7,75684],
[M,1846,23,75808,1846,31,75816],
[M,1846,9,75794,1846,32,75817],
[M,1847,9,75828,1847,17,75836],
[M,1848,11,75850,1848,18,75857],
[M,1849,12,75871,1849,47,75906],
[M,1850,20,75929,1850,28,75937],
[M,1850,10,75919,1850,29,75938],
[M,1851,11,75951,1851,18,75958],
[M,1852,12,75972,1852,130,76090],
[M,1853,20,76112,1853,34,76126],
[M,1853,12,76104,1853,35,76127],
[M,1854,12,76141,1854,51,76180],
[M,1856,9,76204,1856,17,76212],
[M,1857,11,76226,1857,18,76233],
[M,1858,12,76247,1858,50,76285],
[M,1859,19,76306,1859,27,76314],
[M,1859,12,76299,1859,28,76315],
[M,1860,12,76329,1860,130,76447],
[M,1861,20,76469,1861,34,76483],
[M,1861,12,76461,1861,35,76484],
[M,1862,12,76498,1862,51,76537],
[M,1845,4,75736,1864,7,76557],
[M,1866,7,76598,1866,15,76606],
[M,1866,18,76609,1866,33,76624],
[M,1867,10,76636,1867,87,76713],
[M,1868,29,76744,1868,37,76752],
[M,1869,10,76765,1869,62,76817],
[M,1868,10,76725,1868,38,76753],
[M,1865,4,76563,1870,7,76827],
[M,1873,23,76944,1873,31,76952],
[M,1873,9,76930,1873,32,76953],
[M,1874,9,76964,1874,17,76972],
[M,1875,11,76986,1875,18,76993],
[M,1876,12,77007,1876,27,77022],
[M,1877,25,77049,1877,44,77068],
[M,1877,47,77071,1877,54,77078],
[M,1877,56,77080,1877,64,77088],
[M,1877,12,77036,1877,69,77093],
[M,1878,20,77116,1878,28,77124],
[M,1878,10,77106,1878,29,77125],
[M,1879,11,77138,1879,18,77145],
[M,1880,12,77159,1880,77,77224],
[M,1882,9,77248,1882,17,77256],
[M,1883,11,77270,1883,18,77277],
[M,1884,12,77291,1884,39,77318],
[M,1885,19,77339,1885,27,77347],
[M,1885,12,77332,1885,28,77348],
[M,1886,12,77362,1886,77,77427],
[M,1872,4,76872,1888,7,77447],
[M,1890,7,77488,1890,15,77496],
[M,1890,18,77499,1890,33,77514],
[M,1891,10,77526,1891,37,77553],
[M,1892,29,77584,1892,37,77592],
[M,1893,10,77605,1893,52,77647],
[M,1892,10,77565,1892,38,77593],
[M,1889,4,77453,1894,7,77657],
[M,1897,23,77772,1897,31,77780],
[M,1897,9,77758,1897,32,77781],
[M,1898,9,77792,1898,17,77800],
[M,1899,11,77814,1899,18,77821],
[M,1900,12,77835,1900,36,77859],
[M,1901,20,77882,1901,28,77890],
[M,1901,10,77872,1901,29,77891],
[M,1902,11,77904,1902,18,77911],
[M,1903,12,77925,1903,127,78040],
[M,1905,9,78064,1905,17,78072],
[M,1906,11,78086,1906,18,78093],
[M,1907,12,78107,1907,65,78160],
[M,1908,19,78181,1908,27,78189],
[M,1908,12,78174,1908,28,78190],
[M,1909,12,78204,1909,106,78298],
[M,1896,4,77700,1911,7,78318],
[M,1913,7,78359,1913,15,78367],
[M,1913,18,78370,1913,33,78385],
[M,1914,10,78397,1914,72,78459],
[M,1915,29,78490,1915,37,78498],
[M,1916,10,78511,1916,100,78601],
[M,1915,10,78471,1915,38,78499],
[M,1912,4,78324,1917,7,78611],
[M,1920,26,78710,1920,34,78718],
[M,1920,26,78710,1920,47,78731],
[M,1920,6,78690,1920,47,78731],
[M,1919,4,78643,1921,7,78739],
[M,1924,75,78890,1924,83,78898],
[M,1924,75,78890,1924,96,78911],
[M,1924,6,78821,1924,96,78911],
[M,1923,4,78774,1925,7,78919],
[M,1928,75,79076,1928,83,79084],
[M,1928,75,79076,1928,96,79097],
[M,1928,6,79007,1928,96,79097],
[M,1927,4,78960,1929,7,79105],
[M,1931,69,79208,1931,77,79216],
[M,1931,69,79208,1931,90,79229],
[M,1931,45,79184,1931,90,79229],
[M,1931,4,79143,1931,94,79233],
[M,1933,67,79332,1933,75,79340],
[M,1933,67,79332,1933,88,79353],
[M,1933,45,79310,1933,88,79353],
[M,1933,4,79269,1933,92,79357],
[M,1935,70,79462,1935,78,79470],
[M,1935,70,79462,1935,91,79483],
[M,1935,45,79437,1935,91,79483],
[M,1935,4,79396,1935,95,79487],
[M,1937,74,79600,1937,82,79608],
[M,1937,74,79600,1937,95,79621],
[M,1937,45,79571,1937,95,79621],
[M,1937,4,79530,1937,99,79625],
[M,1787,2,72582,1822,7,74679],
[M,1787,46,72626,1787,52,72632],
[M,1787,4,72584,1787,53,72633],
[M,1823,2,74682,1843,7,75684],
[M,1823,4,74684,1823,24,74704],
[M,1844,2,75687,1870,7,76827],
[M,1844,4,75689,1844,40,75725],
[M,1871,2,76830,1894,7,77657],
[M,1871,4,76832,1871,33,76861],
[M,1895,2,77660,1917,7,78611],
[M,1895,4,77662,1895,31,77689],
[M,1918,2,78614,1921,7,78739],
[M,1918,4,78616,1918,20,78632],
[M,1922,2,78742,1925,7,78919],
[M,1922,4,78744,1922,23,78763],
[M,1926,2,78922,1929,7,79105],
[M,1926,4,78924,1926,29,78949],
[M,1930,2,79108,1931,94,79233],
[M,1930,4,79110,1930,26,79132],
[M,1932,2,79236,1933,92,79357],
[M,1932,4,79238,1932,24,79258],
[M,1934,2,79360,1935,95,79487],
[M,1934,4,79362,1934,27,79385],
[M,1936,2,79490,1937,99,79625],
[M,1936,4,79492,1936,31,79519],
[M,1938,2,79628,1938,20,79646],
[M,1938,4,79630,1938,20,79646],
[M,1939,2,79649,1939,22,79669],
[M,1939,4,79651,1939,22,79669],
[M,1786,0,72563,1944,3,79756],
[M,1,0,0,1944,3,79756]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var tostring1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$Boolean9 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
var num$is$roughnum2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-is-roughnum");
var is$number3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"is-number");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var raw$array$to$list5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-to-list");
var raw$array6 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array");
var num$to$string3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-to-string");
var not4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"not");
var ED5 = R.getField($ED16,"values");
var O8 = R.getField($O18,"values");
var VS9 = R.getField($VS19,"values");
var ED10 = R.getField($ED16,"types");
var O13 = R.getField($O18,"types");
var VS14 = R.getField($VS19,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$ED16);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import17);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$O18);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS19);
var $toplevel21 = function($$resumer101) {
var $step20 = 0;
var $ans23 = D;
var $al24 = L[2822];
try {
if(R.isActivationRecord($$resumer101)) {
$step20 = $$resumer101.step;
$al24 = $$resumer101.from;
$ans23 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
RuntimeError7476 = $$resumer101.vars[0];
ParseError7477 = $$resumer101.vars[1];
draw$and$highlight38 = $$resumer101.vars[2];
vert$list$values62 = $$resumer101.vars[3];
ed$simple$intro95 = $$resumer101.vars[4];
ed$intro122 = $$resumer101.vars[5];
please$report$bug133 = $$resumer101.vars[6];
is$RuntimeError6488 = $$resumer101.vars[7];
is$multi$error6491 = $$resumer101.vars[8];
multi$error6494 = $$resumer101.vars[9];
is$sample$error6497 = $$resumer101.vars[10];
sample$error6500 = $$resumer101.vars[11];
is$message$exception6503 = $$resumer101.vars[12];
message$exception6506 = $$resumer101.vars[13];
is$update$non$obj6509 = $$resumer101.vars[14];
update$non$obj6512 = $$resumer101.vars[15];
is$update$frozen$ref6515 = $$resumer101.vars[16];
update$frozen$ref6518 = $$resumer101.vars[17];
is$update$non$ref6521 = $$resumer101.vars[18];
update$non$ref6524 = $$resumer101.vars[19];
is$update$non$existent$field6527 = $$resumer101.vars[20];
update$non$existent$field6530 = $$resumer101.vars[21];
is$no$cases$matched6533 = $$resumer101.vars[22];
no$cases$matched6536 = $$resumer101.vars[23];
is$no$branches$matched6539 = $$resumer101.vars[24];
no$branches$matched6542 = $$resumer101.vars[25];
is$internal$error6545 = $$resumer101.vars[26];
internal$error6548 = $$resumer101.vars[27];
is$template$not$finished6551 = $$resumer101.vars[28];
template$not$finished6554 = $$resumer101.vars[29];
is$field$not$found6557 = $$resumer101.vars[30];
field$not$found6560 = $$resumer101.vars[31];
is$lookup$constructor$not$object6563 = $$resumer101.vars[32];
lookup$constructor$not$object6566 = $$resumer101.vars[33];
is$lookup$non$tuple6569 = $$resumer101.vars[34];
lookup$non$tuple6572 = $$resumer101.vars[35];
is$lookup$large$index6575 = $$resumer101.vars[36];
lookup$large$index6578 = $$resumer101.vars[37];
is$non$tuple$bind6581 = $$resumer101.vars[38];
non$tuple$bind6584 = $$resumer101.vars[39];
is$bad$tuple$bind6587 = $$resumer101.vars[40];
bad$tuple$bind6590 = $$resumer101.vars[41];
is$lookup$non$object6593 = $$resumer101.vars[42];
lookup$non$object6596 = $$resumer101.vars[43];
is$extend$non$object6599 = $$resumer101.vars[44];
extend$non$object6602 = $$resumer101.vars[45];
is$non$boolean$condition6605 = $$resumer101.vars[46];
non$boolean$condition6608 = $$resumer101.vars[47];
is$non$boolean$op6611 = $$resumer101.vars[48];
non$boolean$op6614 = $$resumer101.vars[49];
is$generic$type$mismatch6617 = $$resumer101.vars[50];
generic$type$mismatch6620 = $$resumer101.vars[51];
is$num$string$binop$error6623 = $$resumer101.vars[52];
num$string$binop$error6626 = $$resumer101.vars[53];
is$numeric$binop$error6629 = $$resumer101.vars[54];
numeric$binop$error6632 = $$resumer101.vars[55];
is$cases$singleton$mismatch6635 = $$resumer101.vars[56];
cases$singleton$mismatch6638 = $$resumer101.vars[57];
is$cases$arity$mismatch6641 = $$resumer101.vars[58];
cases$arity$mismatch6644 = $$resumer101.vars[59];
is$constructor$arity$mismatch6647 = $$resumer101.vars[60];
constructor$arity$mismatch6650 = $$resumer101.vars[61];
is$arity$mismatch6653 = $$resumer101.vars[62];
arity$mismatch6656 = $$resumer101.vars[63];
is$non$function$app6659 = $$resumer101.vars[64];
non$function$app6662 = $$resumer101.vars[65];
is$uninitialized$id6665 = $$resumer101.vars[66];
uninitialized$id6668 = $$resumer101.vars[67];
is$module$load$failure6671 = $$resumer101.vars[68];
module$load$failure6674 = $$resumer101.vars[69];
is$invalid$array$index6677 = $$resumer101.vars[70];
invalid$array$index6680 = $$resumer101.vars[71];
is$equality$failure6683 = $$resumer101.vars[72];
equality$failure6686 = $$resumer101.vars[73];
is$user$break6689 = $$resumer101.vars[74];
user$break6692 = $$resumer101.vars[75];
is$user$exception6695 = $$resumer101.vars[76];
user$exception6698 = $$resumer101.vars[77];
is$ParseError7282 = $$resumer101.vars[78];
is$parse$error$next$token7285 = $$resumer101.vars[79];
parse$error$next$token7288 = $$resumer101.vars[80];
is$parse$error$eof7291 = $$resumer101.vars[81];
parse$error$eof7294 = $$resumer101.vars[82];
is$parse$error$unterminated$string7297 = $$resumer101.vars[83];
parse$error$unterminated$string7300 = $$resumer101.vars[84];
is$parse$error$bad$operator7303 = $$resumer101.vars[85];
parse$error$bad$operator7306 = $$resumer101.vars[86];
is$parse$error$bad$number7309 = $$resumer101.vars[87];
parse$error$bad$number7312 = $$resumer101.vars[88];
is$empty$block7315 = $$resumer101.vars[89];
empty$block7318 = $$resumer101.vars[90];
is$bad$block$stmt7321 = $$resumer101.vars[91];
bad$block$stmt7324 = $$resumer101.vars[92];
is$bad$check$block$stmt7327 = $$resumer101.vars[93];
bad$check$block$stmt7330 = $$resumer101.vars[94];
is$fun$missing$colon7333 = $$resumer101.vars[95];
fun$missing$colon7336 = $$resumer101.vars[96];
is$fun$missing$end7339 = $$resumer101.vars[97];
fun$missing$end7342 = $$resumer101.vars[98];
is$args$missing$comma7345 = $$resumer101.vars[99];
args$missing$comma7348 = $$resumer101.vars[100];
is$app$args$missing$comma7351 = $$resumer101.vars[101];
app$args$missing$comma7354 = $$resumer101.vars[102];
is$missing$end7357 = $$resumer101.vars[103];
missing$end7360 = $$resumer101.vars[104];
is$missing$comma7363 = $$resumer101.vars[105];
missing$comma7366 = $$resumer101.vars[106];
defined_value7481 = $$resumer101.vars[107];
defined_value7482 = $$resumer101.vars[108];
defined_value7483 = $$resumer101.vars[109];
defined_value7484 = $$resumer101.vars[110];
defined_value7485 = $$resumer101.vars[111];
defined_value7486 = $$resumer101.vars[112];
defined_value7487 = $$resumer101.vars[113];
defined_value7488 = $$resumer101.vars[114];
defined_value7489 = $$resumer101.vars[115];
defined_value7490 = $$resumer101.vars[116];
defined_value7491 = $$resumer101.vars[117];
defined_value7492 = $$resumer101.vars[118];
defined_value7493 = $$resumer101.vars[119];
defined_value7494 = $$resumer101.vars[120];
defined_value7495 = $$resumer101.vars[121];
defined_value7496 = $$resumer101.vars[122];
defined_value7497 = $$resumer101.vars[123];
defined_value7498 = $$resumer101.vars[124];
defined_value7499 = $$resumer101.vars[125];
defined_value7500 = $$resumer101.vars[126];
defined_value7501 = $$resumer101.vars[127];
defined_value7502 = $$resumer101.vars[128];
defined_value7503 = $$resumer101.vars[129];
defined_value7504 = $$resumer101.vars[130];
defined_value7505 = $$resumer101.vars[131];
defined_value7506 = $$resumer101.vars[132];
defined_value7507 = $$resumer101.vars[133];
defined_value7508 = $$resumer101.vars[134];
defined_value7509 = $$resumer101.vars[135];
defined_value7510 = $$resumer101.vars[136];
defined_value7511 = $$resumer101.vars[137];
defined_value7512 = $$resumer101.vars[138];
defined_value7513 = $$resumer101.vars[139];
defined_value7514 = $$resumer101.vars[140];
defined_value7515 = $$resumer101.vars[141];
defined_value7516 = $$resumer101.vars[142];
defined_value7517 = $$resumer101.vars[143];
defined_value7518 = $$resumer101.vars[144];
defined_value7519 = $$resumer101.vars[145];
defined_value7520 = $$resumer101.vars[146];
defined_value7521 = $$resumer101.vars[147];
defined_value7522 = $$resumer101.vars[148];
defined_value7523 = $$resumer101.vars[149];
defined_value7524 = $$resumer101.vars[150];
defined_value7525 = $$resumer101.vars[151];
defined_value7526 = $$resumer101.vars[152];
defined_value7527 = $$resumer101.vars[153];
defined_value7528 = $$resumer101.vars[154];
defined_value7529 = $$resumer101.vars[155];
defined_value7530 = $$resumer101.vars[156];
defined_value7531 = $$resumer101.vars[157];
defined_value7532 = $$resumer101.vars[158];
defined_value7533 = $$resumer101.vars[159];
defined_value7534 = $$resumer101.vars[160];
defined_value7535 = $$resumer101.vars[161];
defined_value7536 = $$resumer101.vars[162];
defined_value7537 = $$resumer101.vars[163];
defined_value7538 = $$resumer101.vars[164];
defined_value7539 = $$resumer101.vars[165];
defined_value7540 = $$resumer101.vars[166];
defined_value7541 = $$resumer101.vars[167];
defined_value7542 = $$resumer101.vars[168];
defined_value7543 = $$resumer101.vars[169];
defined_value7544 = $$resumer101.vars[170];
defined_value7545 = $$resumer101.vars[171];
defined_value7546 = $$resumer101.vars[172];
defined_value7547 = $$resumer101.vars[173];
defined_value7548 = $$resumer101.vars[174];
defined_value7549 = $$resumer101.vars[175];
defined_value7550 = $$resumer101.vars[176];
defined_value7551 = $$resumer101.vars[177];
defined_value7552 = $$resumer101.vars[178];
defined_value7553 = $$resumer101.vars[179];
defined_value7554 = $$resumer101.vars[180];
defined_value7555 = $$resumer101.vars[181];
defined_value7556 = $$resumer101.vars[182];
defined_value7557 = $$resumer101.vars[183];
defined_value7558 = $$resumer101.vars[184];
defined_value7559 = $$resumer101.vars[185];
defined_value7560 = $$resumer101.vars[186];
defined_value7561 = $$resumer101.vars[187];
defined_value7562 = $$resumer101.vars[188];
defined_value7563 = $$resumer101.vars[189];
defined_value7564 = $$resumer101.vars[190];
defined_value7565 = $$resumer101.vars[191];
defined_value7566 = $$resumer101.vars[192];
defined_value7567 = $$resumer101.vars[193];
defined_value7568 = $$resumer101.vars[194];
defined_value7569 = $$resumer101.vars[195];
defined_value7570 = $$resumer101.vars[196];
defined_value7571 = $$resumer101.vars[197];
defined_value7572 = $$resumer101.vars[198];
defined_value7573 = $$resumer101.vars[199];
defined_value7574 = $$resumer101.vars[200];
defined_value7575 = $$resumer101.vars[201];
defined_value7576 = $$resumer101.vars[202];
defined_value7577 = $$resumer101.vars[203];
defined_value7578 = $$resumer101.vars[204];
defined_value7579 = $$resumer101.vars[205];
defined_value7580 = $$resumer101.vars[206];
defined_value7581 = $$resumer101.vars[207];
defined_value7582 = $$resumer101.vars[208];
defined_value7583 = $$resumer101.vars[209];
defined_value7584 = $$resumer101.vars[210];
defined_value7585 = $$resumer101.vars[211];
answer7479 = $$resumer101.vars[212];
provides7478 = $$resumer101.vars[213];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step20) {
case 0: var RuntimeError25 = R.namedBrander("RuntimeError",L[2586]);
var RuntimeError7476 = R.makeBranderAnn(RuntimeError25,"RuntimeError");
var ParseError26 = R.namedBrander("ParseError",L[2821]);
var ParseError7477 = R.makeBranderAnn(ParseError26,"ParseError");
var draw$and$highlight38 = {"$var":D};
var vert$list$values62 = {"$var":D};
var ed$simple$intro95 = {"$var":D};
var ed$intro122 = {"$var":D};
var please$report$bug133 = {"$var":D};
var RuntimeError6485 = {"$var":D};
var is$RuntimeError6488 = {"$var":D};
var is$multi$error6491 = {"$var":D};
var multi$error6494 = {"$var":D};
var is$sample$error6497 = {"$var":D};
var sample$error6500 = {"$var":D};
var is$message$exception6503 = {"$var":D};
var message$exception6506 = {"$var":D};
var is$update$non$obj6509 = {"$var":D};
var update$non$obj6512 = {"$var":D};
var is$update$frozen$ref6515 = {"$var":D};
var update$frozen$ref6518 = {"$var":D};
var is$update$non$ref6521 = {"$var":D};
var update$non$ref6524 = {"$var":D};
var is$update$non$existent$field6527 = {"$var":D};
var update$non$existent$field6530 = {"$var":D};
var is$no$cases$matched6533 = {"$var":D};
var no$cases$matched6536 = {"$var":D};
var is$no$branches$matched6539 = {"$var":D};
var no$branches$matched6542 = {"$var":D};
var is$internal$error6545 = {"$var":D};
var internal$error6548 = {"$var":D};
var is$template$not$finished6551 = {"$var":D};
var template$not$finished6554 = {"$var":D};
var is$field$not$found6557 = {"$var":D};
var field$not$found6560 = {"$var":D};
var is$lookup$constructor$not$object6563 = {"$var":D};
var lookup$constructor$not$object6566 = {"$var":D};
var is$lookup$non$tuple6569 = {"$var":D};
var lookup$non$tuple6572 = {"$var":D};
var is$lookup$large$index6575 = {"$var":D};
var lookup$large$index6578 = {"$var":D};
var is$non$tuple$bind6581 = {"$var":D};
var non$tuple$bind6584 = {"$var":D};
var is$bad$tuple$bind6587 = {"$var":D};
var bad$tuple$bind6590 = {"$var":D};
var is$lookup$non$object6593 = {"$var":D};
var lookup$non$object6596 = {"$var":D};
var is$extend$non$object6599 = {"$var":D};
var extend$non$object6602 = {"$var":D};
var is$non$boolean$condition6605 = {"$var":D};
var non$boolean$condition6608 = {"$var":D};
var is$non$boolean$op6611 = {"$var":D};
var non$boolean$op6614 = {"$var":D};
var is$generic$type$mismatch6617 = {"$var":D};
var generic$type$mismatch6620 = {"$var":D};
var is$num$string$binop$error6623 = {"$var":D};
var num$string$binop$error6626 = {"$var":D};
var is$numeric$binop$error6629 = {"$var":D};
var numeric$binop$error6632 = {"$var":D};
var is$cases$singleton$mismatch6635 = {"$var":D};
var cases$singleton$mismatch6638 = {"$var":D};
var is$cases$arity$mismatch6641 = {"$var":D};
var cases$arity$mismatch6644 = {"$var":D};
var is$constructor$arity$mismatch6647 = {"$var":D};
var constructor$arity$mismatch6650 = {"$var":D};
var is$arity$mismatch6653 = {"$var":D};
var arity$mismatch6656 = {"$var":D};
var is$non$function$app6659 = {"$var":D};
var non$function$app6662 = {"$var":D};
var is$uninitialized$id6665 = {"$var":D};
var uninitialized$id6668 = {"$var":D};
var is$module$load$failure6671 = {"$var":D};
var module$load$failure6674 = {"$var":D};
var is$invalid$array$index6677 = {"$var":D};
var invalid$array$index6680 = {"$var":D};
var is$equality$failure6683 = {"$var":D};
var equality$failure6686 = {"$var":D};
var is$user$break6689 = {"$var":D};
var user$break6692 = {"$var":D};
var is$user$exception6695 = {"$var":D};
var user$exception6698 = {"$var":D};
var ParseError7279 = {"$var":D};
var is$ParseError7282 = {"$var":D};
var is$parse$error$next$token7285 = {"$var":D};
var parse$error$next$token7288 = {"$var":D};
var is$parse$error$eof7291 = {"$var":D};
var parse$error$eof7294 = {"$var":D};
var is$parse$error$unterminated$string7297 = {"$var":D};
var parse$error$unterminated$string7300 = {"$var":D};
var is$parse$error$bad$operator7303 = {"$var":D};
var parse$error$bad$operator7306 = {"$var":D};
var is$parse$error$bad$number7309 = {"$var":D};
var parse$error$bad$number7312 = {"$var":D};
var is$empty$block7315 = {"$var":D};
var empty$block7318 = {"$var":D};
var is$bad$block$stmt7321 = {"$var":D};
var bad$block$stmt7324 = {"$var":D};
var is$bad$check$block$stmt7327 = {"$var":D};
var bad$check$block$stmt7330 = {"$var":D};
var is$fun$missing$colon7333 = {"$var":D};
var fun$missing$colon7336 = {"$var":D};
var is$fun$missing$end7339 = {"$var":D};
var fun$missing$end7342 = {"$var":D};
var is$args$missing$comma7345 = {"$var":D};
var args$missing$comma7348 = {"$var":D};
var is$app$args$missing$comma7351 = {"$var":D};
var app$args$missing$comma7354 = {"$var":D};
var is$missing$end7357 = {"$var":D};
var missing$end7360 = {"$var":D};
var is$missing$comma7363 = {"$var":D};
var missing$comma7366 = {"$var":D};
var $temp_lam28 = function($l29) {
var $step27 = 0;
var $ans30 = D;
var $al31 = L[2];
try {
if(R.isActivationRecord($l29)) {
$step27 = $l29.step;
$al31 = $l29.from;
$ans30 = $l29.ans;
l29 = $l29.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],1,$t);
}
var l29 = $l29;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step27) {
case 0: $step27 = 1;
$al31 = L[0];
$field32 = R.getColonFieldLoc(ED5,"loc",L[0]);
if(R.isMethod($field32)) {
$ans30 = $field32.full_meth(ED5,l29);
} else {
if(!(R.isFunction($field32))) {
R.ffi.throwNonFunApp(L[0],$field32);
}
$ans30 = $field32.app(l29);
}
break;
case 1: var anf_arg33 = $ans30;
$step27 = 2;
$al31 = L[1];
$field34 = R.getColonFieldLoc(ED5,"loc-display",L[1]);
if(R.isMethod($field34)) {
$ans30 = $field34.full_meth(ED5,l29,("error-highlight"),anf_arg33);
} else {
if(!(R.isFunction($field34))) {
R.ffi.throwNonFunApp(L[1],$field34);
}
$ans30 = $field34.app(l29,("error-highlight"),anf_arg33);
}
break;
case 2: ++R.GAS;
return $ans30;
default: throw "No case numbered " + $step27 + " in $temp_lam28";
}
}
} catch($e35) {
if(R.isCont($e35) && ($step27 !== 2)) {
$e35.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al31,$temp_lam28,$step27,[l29],[]);
}
if(R.isPyretException($e35)) {
$e35.pyretStack.push($al31);
}
throw $e35;
}
};
var anf_assign37 = R.makeFunction($temp_lam28,"draw-and-highlight");
draw$and$highlight38.$var = anf_assign37;
var $temp_lam40 = function($vals41) {
var $step39 = 0;
var $ans43 = D;
var $al44 = L[8];
try {
if(R.isActivationRecord($vals41)) {
$step39 = $vals41.step;
$al44 = $vals41.from;
$ans43 = $vals41.ans;
vals41 = $vals41.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[8],1,$t);
}
var vals41 = $vals41;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step39) {
case 0: var $temp_lam46 = function($val47) {
var $step45 = 0;
var $ans48 = D;
var $al49 = L[5];
try {
if(R.isActivationRecord($val47)) {
$step45 = $val47.step;
$al49 = $val47.from;
$ans48 = $val47.ans;
val47 = $val47.args[0];
anf_method_obj52 = $val47.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],1,$t);
}
var val47 = $val47;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step45) {
case 0: $al49 = L[3];
var anf_method_obj52 = G(ED5,"para",L[3]);
$step45 = 1;
$al49 = L[4];
$field51 = R.getColonFieldLoc(ED5,"embed",L[4]);
if(R.isMethod($field51)) {
$ans48 = $field51.full_meth(ED5,val47);
} else {
if(!(R.isFunction($field51))) {
R.ffi.throwNonFunApp(L[4],$field51);
}
$ans48 = $field51.app(val47);
}
break;
case 1: var anf_arg53 = $ans48;
$step45 = 2;
$al49 = L[3];
$field54 = R.getColonFieldLoc(anf_method_obj52,"make1",L[3]);
if(R.isMethod($field54)) {
$ans48 = $field54.full_meth(anf_method_obj52,anf_arg53);
} else {
if(!(R.isFunction($field54))) {
R.ffi.throwNonFunApp(L[3],$field54);
}
$ans48 = $field54.app(anf_arg53);
}
break;
case 2: ++R.GAS;
return $ans48;
default: throw "No case numbered " + $step45 + " in $temp_lam46";
}
}
} catch($e55) {
if(R.isCont($e55) && ($step45 !== 2)) {
$e55.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al49,$temp_lam46,$step45,[val47],[anf_method_obj52]);
}
if(R.isPyretException($e55)) {
$e55.pyretStack.push($al49);
}
throw $e55;
}
};
var anf_arg56 = R.makeFunction($temp_lam46,"");
$step39 = 1;
$al44 = L[6];
$field57 = R.getColonFieldLoc(vals41,"map",L[6]);
if(R.isMethod($field57)) {
$ans43 = $field57.full_meth(vals41,anf_arg56);
} else {
if(!(R.isFunction($field57))) {
R.ffi.throwNonFunApp(L[6],$field57);
}
$ans43 = $field57.app(anf_arg56);
}
break;
case 1: var anf_arg58 = $ans43;
$step39 = 2;
$al44 = L[7];
$field59 = R.getColonFieldLoc(ED5,"v-sequence",L[7]);
if(R.isMethod($field59)) {
$ans43 = $field59.full_meth(ED5,anf_arg58);
} else {
if(!(R.isFunction($field59))) {
R.ffi.throwNonFunApp(L[7],$field59);
}
$ans43 = $field59.app(anf_arg58);
}
break;
case 2: ++R.GAS;
return $ans43;
default: throw "No case numbered " + $step39 + " in $temp_lam40";
}
}
} catch($e60) {
if(R.isCont($e60) && ($step39 !== 2)) {
$e60.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al44,$temp_lam40,$step39,[vals41],[]);
}
if(R.isPyretException($e60)) {
$e60.pyretStack.push($al44);
}
throw $e60;
}
};
var anf_assign61 = R.makeFunction($temp_lam40,"vert-list-values");
vert$list$values62.$var = anf_assign61;
var $temp_lam64 = function($name65,$loc66) {
var $step63 = 0;
var $ans67 = D;
var $al68 = L[22];
try {
if(R.isActivationRecord($name65)) {
$step63 = $name65.step;
$al68 = $name65.from;
$ans67 = $name65.ans;
name65 = $name65.args[0];
loc66 = $name65.args[1];
anf_method_obj76 = $name65.vars[0];
anf_arg77 = $name65.vars[1];
anf_arg78 = $name65.vars[2];
anf_method_obj87 = $name65.vars[3];
anf_arg88 = $name65.vars[4];
anf_arg89 = $name65.vars[5];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],2,$t);
}
var name65 = $name65;
var loc66 = $loc66;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step63) {
case 0: $step63 = 1;
$al68 = L[9];
$field69 = R.getColonFieldLoc(loc66,"is-builtin",L[9]);
if(R.isMethod($field69)) {
$ans67 = $field69.full_meth(loc66);
} else {
if(!(R.isFunction($field69))) {
R.ffi.throwNonFunApp(L[9],$field69);
}
$ans67 = $field69.app();
}
break;
case 1: var anf_arg70 = $ans67;
$al68 = L[9];
var anf_if92 = R.checkWrapBoolean(anf_arg70);
$step63 = R.isPyretTrue(anf_if92)?2:8;
break;
case 2: $al68 = L[10];
var anf_method_obj76 = G(ED5,"para",L[10]);
$step63 = 3;
$al68 = L[15];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al68,_plus1);
}
$ans67 = _plus1.app(("Evaluating a "),name65);
break;
case 3: var anf_arg71 = $ans67;
$step63 = 4;
$al68 = L[14];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al68,_plus1);
}
$ans67 = _plus1.app(anf_arg71,(" in "));
break;
case 4: var anf_arg72 = $ans67;
$step63 = 5;
$al68 = L[11];
$field73 = R.getColonFieldLoc(ED5,"text",L[11]);
if(R.isMethod($field73)) {
$ans67 = $field73.full_meth(ED5,anf_arg72);
} else {
if(!(R.isFunction($field73))) {
R.ffi.throwNonFunApp(L[11],$field73);
}
$ans67 = $field73.app(anf_arg72);
}
break;
case 5: var anf_arg77 = $ans67;
$step63 = 6;
$al68 = L[12];
$field74 = R.getColonFieldLoc(ED5,"loc",L[12]);
if(R.isMethod($field74)) {
$ans67 = $field74.full_meth(ED5,loc66);
} else {
if(!(R.isFunction($field74))) {
R.ffi.throwNonFunApp(L[12],$field74);
}
$ans67 = $field74.app(loc66);
}
break;
case 6: var anf_arg78 = $ans67;
$step63 = 7;
$al68 = L[13];
$field75 = R.getColonFieldLoc(ED5,"text",L[13]);
if(R.isMethod($field75)) {
$ans67 = $field75.full_meth(ED5,(" errored."));
} else {
if(!(R.isFunction($field75))) {
R.ffi.throwNonFunApp(L[13],$field75);
}
$ans67 = $field75.app((" errored."));
}
break;
case 7: var anf_arg79 = $ans67;
$step63 = 14;
$al68 = L[10];
$field80 = R.getColonFieldLoc(anf_method_obj76,"make3",L[10]);
if(R.isMethod($field80)) {
$ans67 = $field80.full_meth(anf_method_obj76,anf_arg77,anf_arg78,anf_arg79);
} else {
if(!(R.isFunction($field80))) {
R.ffi.throwNonFunApp(L[10],$field80);
}
$ans67 = $field80.app(anf_arg77,anf_arg78,anf_arg79);
}
break;
case 8: $al68 = L[16];
var anf_method_obj87 = G(ED5,"para",L[16]);
$step63 = 9;
$al68 = L[21];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al68,_plus1);
}
$ans67 = _plus1.app(("Evaluating the "),name65);
break;
case 9: var anf_arg81 = $ans67;
$step63 = 10;
$al68 = L[20];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al68,_plus1);
}
$ans67 = _plus1.app(anf_arg81,(" at "));
break;
case 10: var anf_arg82 = $ans67;
$step63 = 11;
$al68 = L[17];
$field83 = R.getColonFieldLoc(ED5,"text",L[17]);
if(R.isMethod($field83)) {
$ans67 = $field83.full_meth(ED5,anf_arg82);
} else {
if(!(R.isFunction($field83))) {
R.ffi.throwNonFunApp(L[17],$field83);
}
$ans67 = $field83.app(anf_arg82);
}
break;
case 11: var anf_arg88 = $ans67;
$step63 = 12;
$al68 = L[18];
$field85 = R.getColonFieldLoc(ED5,"loc",L[18]);
if(R.isMethod($field85)) {
$ans67 = $field85.full_meth(ED5,loc66);
} else {
if(!(R.isFunction($field85))) {
R.ffi.throwNonFunApp(L[18],$field85);
}
$ans67 = $field85.app(loc66);
}
break;
case 12: var anf_arg89 = $ans67;
$step63 = 13;
$al68 = L[19];
$field86 = R.getColonFieldLoc(ED5,"text",L[19]);
if(R.isMethod($field86)) {
$ans67 = $field86.full_meth(ED5,(" errored."));
} else {
if(!(R.isFunction($field86))) {
R.ffi.throwNonFunApp(L[19],$field86);
}
$ans67 = $field86.app((" errored."));
}
break;
case 13: var anf_arg90 = $ans67;
$step63 = 14;
$al68 = L[16];
$field91 = R.getColonFieldLoc(anf_method_obj87,"make3",L[16]);
if(R.isMethod($field91)) {
$ans67 = $field91.full_meth(anf_method_obj87,anf_arg88,anf_arg89,anf_arg90);
} else {
if(!(R.isFunction($field91))) {
R.ffi.throwNonFunApp(L[16],$field91);
}
$ans67 = $field91.app(anf_arg88,anf_arg89,anf_arg90);
}
break;
case 14: ++R.GAS;
return $ans67;
default: throw "No case numbered " + $step63 + " in $temp_lam64";
}
}
} catch($e93) {
if(R.isCont($e93) && ($step63 !== 14)) {
$e93.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al68,$temp_lam64,$step63,[name65,loc66],[anf_method_obj76,anf_arg77,anf_arg78,anf_method_obj87,anf_arg88,anf_arg89]);
}
if(R.isPyretException($e93)) {
$e93.pyretStack.push($al68);
}
throw $e93;
}
};
var anf_assign94 = R.makeFunction($temp_lam64,"ed-simple-intro");
ed$simple$intro95.$var = anf_assign94;
var $temp_lam97 = function($name98,$loc99,$color100,$followed$by$embed101) {
var $step96 = 0;
var $ans102 = D;
var $al103 = L[30];
try {
if(R.isActivationRecord($name98)) {
$step96 = $name98.step;
$al103 = $name98.from;
$ans102 = $name98.ans;
name98 = $name98.args[0];
loc99 = $name98.args[1];
color100 = $name98.args[2];
followed$by$embed101 = $name98.args[3];
anf_method_obj114 = $name98.vars[0];
anf_arg115 = $name98.vars[1];
anf_arg108 = $name98.vars[2];
anf_arg116 = $name98.vars[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],4,$t);
}
var name98 = $name98;
var loc99 = $loc99;
var color100 = $color100;
var followed$by$embed101 = $followed$by$embed101;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step96) {
case 0: $al103 = L[23];
var anf_method_obj114 = G(ED5,"para",L[23]);
$step96 = 1;
$al103 = L[24];
$field104 = R.getColonFieldLoc(ED5,"text",L[24]);
if(R.isMethod($field104)) {
$ans102 = $field104.full_meth(ED5,("Evaluating this "));
} else {
if(!(R.isFunction($field104))) {
R.ffi.throwNonFunApp(L[24],$field104);
}
$ans102 = $field104.app(("Evaluating this "));
}
break;
case 1: var anf_arg115 = $ans102;
$step96 = 2;
$al103 = L[25];
$field105 = R.getColonFieldLoc(ED5,"text",L[25]);
if(R.isMethod($field105)) {
$ans102 = $field105.full_meth(ED5,name98);
} else {
if(!(R.isFunction($field105))) {
R.ffi.throwNonFunApp(L[25],$field105);
}
$ans102 = $field105.app(name98);
}
break;
case 2: var anf_arg108 = $ans102;
$al103 = L[26];
var anf_method_obj106 = G(ED5,"locs",L[26]);
$step96 = 3;
$al103 = L[26];
$field107 = R.getColonFieldLoc(anf_method_obj106,"make1",L[26]);
if(R.isMethod($field107)) {
$ans102 = $field107.full_meth(anf_method_obj106,loc99);
} else {
if(!(R.isFunction($field107))) {
R.ffi.throwNonFunApp(L[26],$field107);
}
$ans102 = $field107.app(loc99);
}
break;
case 3: var anf_arg109 = $ans102;
$step96 = 4;
$al103 = L[27];
$field110 = R.getColonFieldLoc(ED5,"highlight",L[27]);
if(R.isMethod($field110)) {
$ans102 = $field110.full_meth(ED5,anf_arg108,anf_arg109,color100);
} else {
if(!(R.isFunction($field110))) {
R.ffi.throwNonFunApp(L[27],$field110);
}
$ans102 = $field110.app(anf_arg108,anf_arg109,color100);
}
break;
case 4: var anf_arg116 = $ans102;
$al103 = L[28];
var anf_if119 = R.checkWrapBoolean(followed$by$embed101);
$step96 = R.isPyretTrue(anf_if119)?5:6;
break;
case 5: $step96 = 7;
$ans102 = (" errored:");
break;
case 6: $step96 = 7;
$ans102 = (" errored.");
break;
case 7: var anf_arg111 = $ans102;
$step96 = 8;
$al103 = L[29];
$field113 = R.getColonFieldLoc(ED5,"text",L[29]);
if(R.isMethod($field113)) {
$ans102 = $field113.full_meth(ED5,anf_arg111);
} else {
if(!(R.isFunction($field113))) {
R.ffi.throwNonFunApp(L[29],$field113);
}
$ans102 = $field113.app(anf_arg111);
}
break;
case 8: var anf_arg117 = $ans102;
$step96 = 9;
$al103 = L[23];
$field118 = R.getColonFieldLoc(anf_method_obj114,"make3",L[23]);
if(R.isMethod($field118)) {
$ans102 = $field118.full_meth(anf_method_obj114,anf_arg115,anf_arg116,anf_arg117);
} else {
if(!(R.isFunction($field118))) {
R.ffi.throwNonFunApp(L[23],$field118);
}
$ans102 = $field118.app(anf_arg115,anf_arg116,anf_arg117);
}
break;
case 9: ++R.GAS;
return $ans102;
default: throw "No case numbered " + $step96 + " in $temp_lam97";
}
}
} catch($e120) {
if(R.isCont($e120) && ($step96 !== 9)) {
$e120.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al103,$temp_lam97,$step96,[name98,loc99,color100,followed$by$embed101],[anf_method_obj114,anf_arg115,anf_arg108,anf_arg116]);
}
if(R.isPyretException($e120)) {
$e120.pyretStack.push($al103);
}
throw $e120;
}
};
var anf_assign121 = R.makeFunction($temp_lam97,"ed-intro");
ed$intro122.$var = anf_assign121;
var $temp_lam124 = function($$resumer101) {
var $step123 = 0;
var $ans125 = D;
var $al126 = L[33];
try {
if(R.isActivationRecord($$resumer101)) {
$step123 = $$resumer101.step;
$al126 = $$resumer101.from;
$ans125 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj128 = $$resumer101.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[33],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step123) {
case 0: $al126 = L[31];
var anf_method_obj128 = G(ED5,"para",L[31]);
$step123 = 1;
$al126 = L[32];
$field127 = R.getColonFieldLoc(ED5,"text",L[32]);
if(R.isMethod($field127)) {
$ans125 = $field127.full_meth(ED5,("Please report this as a bug."));
} else {
if(!(R.isFunction($field127))) {
R.ffi.throwNonFunApp(L[32],$field127);
}
$ans125 = $field127.app(("Please report this as a bug."));
}
break;
case 1: var anf_arg129 = $ans125;
$step123 = 2;
$al126 = L[31];
$field130 = R.getColonFieldLoc(anf_method_obj128,"make1",L[31]);
if(R.isMethod($field130)) {
$ans125 = $field130.full_meth(anf_method_obj128,anf_arg129);
} else {
if(!(R.isFunction($field130))) {
R.ffi.throwNonFunApp(L[31],$field130);
}
$ans125 = $field130.app(anf_arg129);
}
break;
case 2: ++R.GAS;
return $ans125;
default: throw "No case numbered " + $step123 + " in $temp_lam124";
}
}
} catch($e131) {
if(R.isCont($e131) && ($step123 !== 2)) {
$e131.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al126,$temp_lam124,$step123,[],[anf_method_obj128]);
}
if(R.isPyretException($e131)) {
$e131.pyretStack.push($al126);
}
throw $e131;
}
};
var anf_assign132 = R.makeFunction($temp_lam124,"please-report-bug");
please$report$bug133.$var = anf_assign132;
var $temp_full135 = function($self136,$loc$to$ast137,$loc$to$src138) {
var $step134 = 0;
var $ans139 = D;
var $al140 = L[38];
try {
if(R.isActivationRecord($self136)) {
$step134 = $self136.step;
$al140 = $self136.from;
$ans139 = $self136.ans;
self136 = $self136.args[0];
loc$to$ast137 = $self136.args[1];
loc$to$src138 = $self136.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],3,$t);
}
var self136 = $self136;
var loc$to$ast137 = $loc$to$ast137;
var loc$to$src138 = $loc$to$src138;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step134) {
case 0: $al140 = L[34];
var anf_method_obj148 = G(self136,"errors",L[34]);
var $temp_lam142 = function($recv_143) {
var $step141 = 0;
var $ans144 = D;
var $al145 = L[35];
try {
if(R.isActivationRecord($recv_143)) {
$step141 = $recv_143.step;
$al145 = $recv_143.from;
$ans144 = $recv_143.ans;
recv_143 = $recv_143.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[35],1,$t);
}
var recv_143 = $recv_143;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step141) {
case 0: $step141 = 1;
$al145 = L[35];
$field146 = R.getColonFieldLoc(recv_143,"render-fancy-reason",L[35]);
if(R.isMethod($field146)) {
$ans144 = $field146.full_meth(recv_143,loc$to$ast137,loc$to$src138);
} else {
if(!(R.isFunction($field146))) {
R.ffi.throwNonFunApp(L[35],$field146);
}
$ans144 = $field146.app(loc$to$ast137,loc$to$src138);
}
break;
case 1: ++R.GAS;
return $ans144;
default: throw "No case numbered " + $step141 + " in $temp_lam142";
}
}
} catch($e147) {
if(R.isCont($e147) && ($step141 !== 1)) {
$e147.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al145,$temp_lam142,$step141,[recv_143],[]);
}
if(R.isPyretException($e147)) {
$e147.pyretStack.push($al145);
}
throw $e147;
}
};
var anf_arg149 = R.makeFunction($temp_lam142,"");
$step134 = 1;
$al140 = L[36];
$field150 = R.getColonFieldLoc(anf_method_obj148,"map",L[36]);
if(R.isMethod($field150)) {
$ans139 = $field150.full_meth(anf_method_obj148,anf_arg149);
} else {
if(!(R.isFunction($field150))) {
R.ffi.throwNonFunApp(L[36],$field150);
}
$ans139 = $field150.app(anf_arg149);
}
break;
case 1: var rendered151 = $ans139;
$step134 = 2;
$al140 = L[37];
$field152 = R.getColonFieldLoc(ED5,"v-sequence",L[37]);
if(R.isMethod($field152)) {
$ans139 = $field152.full_meth(ED5,rendered151);
} else {
if(!(R.isFunction($field152))) {
R.ffi.throwNonFunApp(L[37],$field152);
}
$ans139 = $field152.app(rendered151);
}
break;
case 2: ++R.GAS;
return $ans139;
default: throw "No case numbered " + $step134 + " in $temp_full135";
}
}
} catch($e153) {
if(R.isCont($e153) && ($step134 !== 2)) {
$e153.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al140,$temp_full135,$step134,[self136,loc$to$ast137,loc$to$src138],[]);
}
if(R.isPyretException($e153)) {
$e153.pyretStack.push($al140);
}
throw $e153;
}
};
var anf_variant_member6072 = R.makeMethod2($temp_full135,"render-fancy-reason");
var $temp_full155 = function($self156) {
var $step154 = 0;
var $ans157 = D;
var $al158 = L[43];
try {
if(R.isActivationRecord($self156)) {
$step154 = $self156.step;
$al158 = $self156.from;
$ans157 = $self156.ans;
self156 = $self156.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[43],1,$t);
}
var self156 = $self156;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step154) {
case 0: $al158 = L[39];
var anf_method_obj166 = G(self156,"errors",L[39]);
var $temp_lam160 = function($recv_161) {
var $step159 = 0;
var $ans162 = D;
var $al163 = L[40];
try {
if(R.isActivationRecord($recv_161)) {
$step159 = $recv_161.step;
$al163 = $recv_161.from;
$ans162 = $recv_161.ans;
recv_161 = $recv_161.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[40],1,$t);
}
var recv_161 = $recv_161;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step159) {
case 0: $step159 = 1;
$al163 = L[40];
$field164 = R.getColonFieldLoc(recv_161,"render-reason",L[40]);
if(R.isMethod($field164)) {
$ans162 = $field164.full_meth(recv_161);
} else {
if(!(R.isFunction($field164))) {
R.ffi.throwNonFunApp(L[40],$field164);
}
$ans162 = $field164.app();
}
break;
case 1: ++R.GAS;
return $ans162;
default: throw "No case numbered " + $step159 + " in $temp_lam160";
}
}
} catch($e165) {
if(R.isCont($e165) && ($step159 !== 1)) {
$e165.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al163,$temp_lam160,$step159,[recv_161],[]);
}
if(R.isPyretException($e165)) {
$e165.pyretStack.push($al163);
}
throw $e165;
}
};
var anf_arg167 = R.makeFunction($temp_lam160,"");
$step154 = 1;
$al158 = L[41];
$field168 = R.getColonFieldLoc(anf_method_obj166,"map",L[41]);
if(R.isMethod($field168)) {
$ans157 = $field168.full_meth(anf_method_obj166,anf_arg167);
} else {
if(!(R.isFunction($field168))) {
R.ffi.throwNonFunApp(L[41],$field168);
}
$ans157 = $field168.app(anf_arg167);
}
break;
case 1: var rendered169 = $ans157;
$step154 = 2;
$al158 = L[42];
$field170 = R.getColonFieldLoc(ED5,"v-sequence",L[42]);
if(R.isMethod($field170)) {
$ans157 = $field170.full_meth(ED5,rendered169);
} else {
if(!(R.isFunction($field170))) {
R.ffi.throwNonFunApp(L[42],$field170);
}
$ans157 = $field170.app(rendered169);
}
break;
case 2: ++R.GAS;
return $ans157;
default: throw "No case numbered " + $step154 + " in $temp_full155";
}
}
} catch($e171) {
if(R.isCont($e171) && ($step154 !== 2)) {
$e171.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al158,$temp_full155,$step154,[self156],[]);
}
if(R.isPyretException($e171)) {
$e171.pyretStack.push($al158);
}
throw $e171;
}
};
var anf_variant_member6073 = R.makeMethod0($temp_full155,"render-reason");
var $temp_full173 = function($self174,$maybe$stack$loc175,$src$available176,$maybe$ast177) {
var $step172 = 0;
var $ans178 = D;
var $al179 = L[58];
try {
if(R.isActivationRecord($self174)) {
$step172 = $self174.step;
$al179 = $self174.from;
$ans178 = $self174.ans;
self174 = $self174.args[0];
maybe$stack$loc175 = $self174.args[1];
src$available176 = $self174.args[2];
maybe$ast177 = $self174.args[3];
cases186 = $self174.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[58],4,$t);
}
var self174 = $self174;
var maybe$stack$loc175 = $maybe$stack$loc175;
var src$available176 = $src$available176;
var maybe$ast177 = $maybe$ast177;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step172) {
case 0: $al179 = L[44];
var anf_method_obj180 = G(self174,"loc",L[44]);
$step172 = 1;
$al179 = L[45];
$field181 = R.getColonFieldLoc(anf_method_obj180,"is-builtin",L[45]);
if(R.isMethod($field181)) {
$ans178 = $field181.full_meth(anf_method_obj180);
} else {
if(!(R.isFunction($field181))) {
R.ffi.throwNonFunApp(L[45],$field181);
}
$ans178 = $field181.app();
}
break;
case 1: var anf_arg182 = $ans178;
$al179 = L[45];
var anf_if191 = R.checkWrapBoolean(anf_arg182);
$step172 = R.isPyretTrue(anf_if191)?2:3;
break;
case 2: $step172 = 12;
$al179 = L[46];
$ans178 = R.throwUnfinishedTemplate(L[46]);
break;
case 3: $al179 = L[47];
var anf_arg183 = G(self174,"loc",L[47]);
$step172 = 4;
$al179 = L[48];
if(!(R.isFunction(src$available176))) {
R.ffi.throwNonFunApp($al179,src$available176);
}
$ans178 = src$available176.app(anf_arg183);
break;
case 4: var anf_arg184 = $ans178;
$al179 = L[48];
var anf_if190 = R.checkWrapBoolean(anf_arg184);
$step172 = R.isPyretTrue(anf_if190)?5:11;
break;
case 5: $al179 = L[49];
var anf_arg185 = G(self174,"loc",L[49]);
$step172 = 6;
$al179 = L[56];
if(!(R.isFunction(maybe$ast177))) {
R.ffi.throwNonFunApp($al179,maybe$ast177);
}
$ans178 = maybe$ast177.app(anf_arg185);
break;
case 6: var cases186 = $ans178;
$step172 = 7;
$al179 = L[55];
R._checkAnn(L[55],R.getDotAnn(L[55],"O",O13,"Option"),cases186);
break;
case 7: var $cases_dispatch189 = {"some":8,
"none":9};
$al179 = L[52];
$step172 = $cases_dispatch189[cases186.$name] || 10;
break;
case 8: if(cases186.$arity !== 1) {
if(cases186.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[51],1,cases186.$arity,L[52]);
} else {
R.ffi.throwCasesSingletonErrorC(L[51],true,L[52]);
}
}
var $fn187 = cases186.$constructor.$fieldNames;
R.derefField(cases186.dict[$fn187[0]],cases186.$mut_fields_mask[0],false);
$step172 = 12;
$al179 = L[50];
$ans178 = R.throwUnfinishedTemplate(L[50]);
break;
case 9: if(cases186.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[54],false,L[52]);
}
$step172 = 12;
$al179 = L[53];
$ans178 = R.throwUnfinishedTemplate(L[53]);
break;
case 10: $step172 = 12;
$al179 = L[52];
$ans178 = R.throwNoCasesMatched(L[52],cases186);
break;
case 11: $step172 = 12;
$al179 = L[57];
$ans178 = R.throwUnfinishedTemplate(L[57]);
break;
case 12: ++R.GAS;
return $ans178;
default: throw "No case numbered " + $step172 + " in $temp_full173";
}
}
} catch($e192) {
if(R.isCont($e192) && ($step172 !== 12)) {
$e192.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al179,$temp_full173,$step172,[self174,maybe$stack$loc175,src$available176,maybe$ast177],[cases186]);
}
if(R.isPyretException($e192)) {
$e192.pyretStack.push($al179);
}
throw $e192;
}
};
var anf_variant_member6082 = R.makeMethod3($temp_full173,"render-fancy-reason");
var $temp_full194 = function($self195) {
var $step193 = 0;
var $ans196 = D;
var $al197 = L[63];
try {
if(R.isActivationRecord($self195)) {
$step193 = $self195.step;
$al197 = $self195.from;
$ans196 = $self195.ans;
self195 = $self195.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[63],1,$t);
}
var self195 = $self195;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step193) {
case 0: $al197 = L[59];
var anf_method_obj198 = G(self195,"loc",L[59]);
$step193 = 1;
$al197 = L[60];
$field199 = R.getColonFieldLoc(anf_method_obj198,"is-builtin",L[60]);
if(R.isMethod($field199)) {
$ans196 = $field199.full_meth(anf_method_obj198);
} else {
if(!(R.isFunction($field199))) {
R.ffi.throwNonFunApp(L[60],$field199);
}
$ans196 = $field199.app();
}
break;
case 1: var anf_arg200 = $ans196;
$al197 = L[60];
var anf_if201 = R.checkWrapBoolean(anf_arg200);
$step193 = R.isPyretTrue(anf_if201)?2:3;
break;
case 2: $step193 = 4;
$al197 = L[61];
$ans196 = R.throwUnfinishedTemplate(L[61]);
break;
case 3: $step193 = 4;
$al197 = L[62];
$ans196 = R.throwUnfinishedTemplate(L[62]);
break;
case 4: ++R.GAS;
return $ans196;
default: throw "No case numbered " + $step193 + " in $temp_full194";
}
}
} catch($e202) {
if(R.isCont($e202) && ($step193 !== 4)) {
$e202.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al197,$temp_full194,$step193,[self195],[]);
}
if(R.isPyretException($e202)) {
$e202.pyretStack.push($al197);
}
throw $e202;
}
};
var anf_variant_member6083 = R.makeMethod0($temp_full194,"render-reason");
var $temp_full204 = function($self205,$$underscore206,$$underscore207) {
var $step203 = 0;
var $ans208 = D;
var $al209 = L[65];
try {
if(R.isActivationRecord($self205)) {
$step203 = $self205.step;
$al209 = $self205.from;
$ans208 = $self205.ans;
self205 = $self205.args[0];
$underscore206 = $self205.args[1];
$underscore207 = $self205.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[65],3,$t);
}
var self205 = $self205;
var $underscore206 = $$underscore206;
var $underscore207 = $$underscore207;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step203) {
case 0: $step203 = 1;
$al209 = L[64];
$field210 = R.getColonFieldLoc(self205,"render-reason",L[64]);
if(R.isMethod($field210)) {
$ans208 = $field210.full_meth(self205);
} else {
if(!(R.isFunction($field210))) {
R.ffi.throwNonFunApp(L[64],$field210);
}
$ans208 = $field210.app();
}
break;
case 1: ++R.GAS;
return $ans208;
default: throw "No case numbered " + $step203 + " in $temp_full204";
}
}
} catch($e211) {
if(R.isCont($e211) && ($step203 !== 1)) {
$e211.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al209,$temp_full204,$step203,[self205,$underscore206,$underscore207],[]);
}
if(R.isPyretException($e211)) {
$e211.pyretStack.push($al209);
}
throw $e211;
}
};
var anf_variant_member6093 = R.makeMethod2($temp_full204,"render-fancy-reason");
var $temp_full213 = function($self214) {
var $step212 = 0;
var $ans215 = D;
var $al216 = L[70];
try {
if(R.isActivationRecord($self214)) {
$step212 = $self214.step;
$al216 = $self214.from;
$ans215 = $self214.ans;
self214 = $self214.args[0];
anf_method_obj222 = $self214.vars[0];
anf_method_obj219 = $self214.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[70],1,$t);
}
var self214 = $self214;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step212) {
case 0: $al216 = L[66];
var anf_method_obj222 = G(ED5,"error",L[66]);
$al216 = L[67];
var anf_method_obj219 = G(ED5,"para",L[67]);
$al216 = L[68];
var anf_arg217 = G(self214,"message",L[68]);
$step212 = 1;
$al216 = L[69];
$field218 = R.getColonFieldLoc(ED5,"text",L[69]);
if(R.isMethod($field218)) {
$ans215 = $field218.full_meth(ED5,anf_arg217);
} else {
if(!(R.isFunction($field218))) {
R.ffi.throwNonFunApp(L[69],$field218);
}
$ans215 = $field218.app(anf_arg217);
}
break;
case 1: var anf_arg220 = $ans215;
$step212 = 2;
$al216 = L[67];
$field221 = R.getColonFieldLoc(anf_method_obj219,"make1",L[67]);
if(R.isMethod($field221)) {
$ans215 = $field221.full_meth(anf_method_obj219,anf_arg220);
} else {
if(!(R.isFunction($field221))) {
R.ffi.throwNonFunApp(L[67],$field221);
}
$ans215 = $field221.app(anf_arg220);
}
break;
case 2: var anf_arg223 = $ans215;
$step212 = 3;
$al216 = L[66];
$field224 = R.getColonFieldLoc(anf_method_obj222,"make1",L[66]);
if(R.isMethod($field224)) {
$ans215 = $field224.full_meth(anf_method_obj222,anf_arg223);
} else {
if(!(R.isFunction($field224))) {
R.ffi.throwNonFunApp(L[66],$field224);
}
$ans215 = $field224.app(anf_arg223);
}
break;
case 3: ++R.GAS;
return $ans215;
default: throw "No case numbered " + $step212 + " in $temp_full213";
}
}
} catch($e225) {
if(R.isCont($e225) && ($step212 !== 3)) {
$e225.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al216,$temp_full213,$step212,[self214],[anf_method_obj222,anf_method_obj219]);
}
if(R.isPyretException($e225)) {
$e225.pyretStack.push($al216);
}
throw $e225;
}
};
var anf_variant_member6094 = R.makeMethod0($temp_full213,"render-reason");
var $temp_full227 = function($self228) {
var $step226 = 0;
var $ans229 = D;
var $al230 = L[73];
try {
if(R.isActivationRecord($self228)) {
$step226 = $self228.step;
$al230 = $self228.from;
$ans229 = $self228.ans;
self228 = $self228.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[73],1,$t);
}
var self228 = $self228;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step226) {
case 0: $al230 = L[71];
var anf_arg231 = G(self228,"message",L[71]);
$step226 = 1;
$al230 = L[72];
$field232 = R.getColonFieldLoc(VS9,"vs-value",L[72]);
if(R.isMethod($field232)) {
$ans229 = $field232.full_meth(VS9,anf_arg231);
} else {
if(!(R.isFunction($field232))) {
R.ffi.throwNonFunApp(L[72],$field232);
}
$ans229 = $field232.app(anf_arg231);
}
break;
case 1: ++R.GAS;
return $ans229;
default: throw "No case numbered " + $step226 + " in $temp_full227";
}
}
} catch($e233) {
if(R.isCont($e233) && ($step226 !== 1)) {
$e233.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al230,$temp_full227,$step226,[self228],[]);
}
if(R.isPyretException($e233)) {
$e233.pyretStack.push($al230);
}
throw $e233;
}
};
var anf_variant_member6095 = R.makeMethod0($temp_full227,"_output");
var $temp_full235 = function($self236,$maybe$stack$loc237,$src$available238,$maybe$ast239) {
var $step234 = 0;
var $ans240 = D;
var $al241 = L[97];
try {
if(R.isActivationRecord($self236)) {
$step234 = $self236.step;
$al241 = $self236.from;
$ans240 = $self236.ans;
self236 = $self236.args[0];
maybe$stack$loc237 = $self236.args[1];
src$available238 = $self236.args[2];
maybe$ast239 = $self236.args[3];
anf_method_obj253 = $self236.vars[0];
anf_arg254 = $self236.vars[1];
anf_method_obj248 = $self236.vars[2];
anf_arg256 = $self236.vars[3];
anf_method_obj281 = $self236.vars[4];
anf_arg282 = $self236.vars[5];
anf_arg283 = $self236.vars[6];
anf_method_obj273 = $self236.vars[7];
anf_arg274 = $self236.vars[8];
anf_arg269 = $self236.vars[9];
anf_arg275 = $self236.vars[10];
anf_arg284 = $self236.vars[11];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[97],4,$t);
}
var self236 = $self236;
var maybe$stack$loc237 = $maybe$stack$loc237;
var src$available238 = $src$available238;
var maybe$ast239 = $maybe$ast239;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step234) {
case 0: $al241 = L[74];
var anf_method_obj242 = G(self236,"loc",L[74]);
$step234 = 1;
$al241 = L[75];
$field243 = R.getColonFieldLoc(anf_method_obj242,"is-builtin",L[75]);
if(R.isMethod($field243)) {
$ans240 = $field243.full_meth(anf_method_obj242);
} else {
if(!(R.isFunction($field243))) {
R.ffi.throwNonFunApp(L[75],$field243);
}
$ans240 = $field243.app();
}
break;
case 1: var anf_arg244 = $ans240;
$al241 = L[75];
var anf_if287 = R.checkWrapBoolean(anf_arg244);
$step234 = R.isPyretTrue(anf_if287)?2:7;
break;
case 2: $al241 = L[76];
var anf_method_obj253 = G(ED5,"error",L[76]);
var anf_fun245 = ed$simple$intro95.$var;
$al241 = L[77];
var anf_arg246 = G(self236,"loc",L[77]);
$step234 = 3;
$al241 = L[82];
if(!(R.isFunction(anf_fun245))) {
R.ffi.throwNonFunApp($al241,anf_fun245);
}
$ans240 = anf_fun245.app(("reference update expression"),anf_arg246);
break;
case 3: var anf_arg254 = $ans240;
$al241 = L[78];
var anf_method_obj248 = G(ED5,"para",L[78]);
$step234 = 4;
$al241 = L[79];
$field247 = R.getColonFieldLoc(ED5,"text",L[79]);
if(R.isMethod($field247)) {
$ans240 = $field247.full_meth(ED5,("It was given a non-object value:"));
} else {
if(!(R.isFunction($field247))) {
R.ffi.throwNonFunApp(L[79],$field247);
}
$ans240 = $field247.app(("It was given a non-object value:"));
}
break;
case 4: var anf_arg249 = $ans240;
$step234 = 5;
$al241 = L[78];
$field250 = R.getColonFieldLoc(anf_method_obj248,"make1",L[78]);
if(R.isMethod($field250)) {
$ans240 = $field250.full_meth(anf_method_obj248,anf_arg249);
} else {
if(!(R.isFunction($field250))) {
R.ffi.throwNonFunApp(L[78],$field250);
}
$ans240 = $field250.app(anf_arg249);
}
break;
case 5: var anf_arg256 = $ans240;
$al241 = L[80];
var anf_arg251 = G(self236,"obj",L[80]);
$step234 = 6;
$al241 = L[81];
$field252 = R.getColonFieldLoc(ED5,"embed",L[81]);
if(R.isMethod($field252)) {
$ans240 = $field252.full_meth(ED5,anf_arg251);
} else {
if(!(R.isFunction($field252))) {
R.ffi.throwNonFunApp(L[81],$field252);
}
$ans240 = $field252.app(anf_arg251);
}
break;
case 6: var anf_arg257 = $ans240;
$step234 = 17;
$al241 = L[76];
$field258 = R.getColonFieldLoc(anf_method_obj253,"make3",L[76]);
if(R.isMethod($field258)) {
$ans240 = $field258.full_meth(anf_method_obj253,anf_arg254,anf_arg256,anf_arg257);
} else {
if(!(R.isFunction($field258))) {
R.ffi.throwNonFunApp(L[76],$field258);
}
$ans240 = $field258.app(anf_arg254,anf_arg256,anf_arg257);
}
break;
case 7: $al241 = L[83];
var anf_method_obj281 = G(ED5,"error",L[83]);
var anf_fun259 = ed$intro122.$var;
$al241 = L[84];
var anf_arg260 = G(self236,"loc",L[84]);
$step234 = 8;
$al241 = L[96];
if(!(R.isFunction(anf_fun259))) {
R.ffi.throwNonFunApp($al241,anf_fun259);
}
$ans240 = anf_fun259.app(("reference update expression"),anf_arg260,(-1),(true));
break;
case 8: var anf_arg282 = $ans240;
$al241 = L[85];
var anf_arg261 = G(self236,"loc",L[85]);
$step234 = 9;
$al241 = L[86];
$field262 = R.getColonFieldLoc(ED5,"cmcode",L[86]);
if(R.isMethod($field262)) {
$ans240 = $field262.full_meth(ED5,anf_arg261);
} else {
if(!(R.isFunction($field262))) {
R.ffi.throwNonFunApp(L[86],$field262);
}
$ans240 = $field262.app(anf_arg261);
}
break;
case 9: var anf_arg283 = $ans240;
$al241 = L[87];
var anf_method_obj273 = G(ED5,"para",L[87]);
$step234 = 10;
$al241 = L[88];
$field263 = R.getColonFieldLoc(ED5,"text",L[88]);
if(R.isMethod($field263)) {
$ans240 = $field263.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field263))) {
R.ffi.throwNonFunApp(L[88],$field263);
}
$ans240 = $field263.app(("The "));
}
break;
case 10: var anf_arg274 = $ans240;
$step234 = 11;
$al241 = L[89];
$field264 = R.getColonFieldLoc(ED5,"text",L[89]);
if(R.isMethod($field264)) {
$ans240 = $field264.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field264))) {
R.ffi.throwNonFunApp(L[89],$field264);
}
$ans240 = $field264.app(("left side"));
}
break;
case 11: var anf_arg269 = $ans240;
$al241 = L[90];
var anf_method_obj265 = G(ED5,"locs",L[90]);
$al241 = L[91];
var anf_arg267 = G(self236,"objloc",L[91]);
$step234 = 12;
$al241 = L[90];
$field268 = R.getColonFieldLoc(anf_method_obj265,"make1",L[90]);
if(R.isMethod($field268)) {
$ans240 = $field268.full_meth(anf_method_obj265,anf_arg267);
} else {
if(!(R.isFunction($field268))) {
R.ffi.throwNonFunApp(L[90],$field268);
}
$ans240 = $field268.app(anf_arg267);
}
break;
case 12: var anf_arg270 = $ans240;
$step234 = 13;
$al241 = L[92];
$field271 = R.getColonFieldLoc(ED5,"highlight",L[92]);
if(R.isMethod($field271)) {
$ans240 = $field271.full_meth(ED5,anf_arg269,anf_arg270,(0));
} else {
if(!(R.isFunction($field271))) {
R.ffi.throwNonFunApp(L[92],$field271);
}
$ans240 = $field271.app(anf_arg269,anf_arg270,(0));
}
break;
case 13: var anf_arg275 = $ans240;
$step234 = 14;
$al241 = L[93];
$field272 = R.getColonFieldLoc(ED5,"text",L[93]);
if(R.isMethod($field272)) {
$ans240 = $field272.full_meth(ED5,(" is expected to evaluate to an object, but its value was: "));
} else {
if(!(R.isFunction($field272))) {
R.ffi.throwNonFunApp(L[93],$field272);
}
$ans240 = $field272.app((" is expected to evaluate to an object, but its value was: "));
}
break;
case 14: var anf_arg276 = $ans240;
$step234 = 15;
$al241 = L[87];
$field278 = R.getColonFieldLoc(anf_method_obj273,"make3",L[87]);
if(R.isMethod($field278)) {
$ans240 = $field278.full_meth(anf_method_obj273,anf_arg274,anf_arg275,anf_arg276);
} else {
if(!(R.isFunction($field278))) {
R.ffi.throwNonFunApp(L[87],$field278);
}
$ans240 = $field278.app(anf_arg274,anf_arg275,anf_arg276);
}
break;
case 15: var anf_arg284 = $ans240;
$al241 = L[94];
var anf_arg279 = G(self236,"obj",L[94]);
$step234 = 16;
$al241 = L[95];
$field280 = R.getColonFieldLoc(ED5,"embed",L[95]);
if(R.isMethod($field280)) {
$ans240 = $field280.full_meth(ED5,anf_arg279);
} else {
if(!(R.isFunction($field280))) {
R.ffi.throwNonFunApp(L[95],$field280);
}
$ans240 = $field280.app(anf_arg279);
}
break;
case 16: var anf_arg285 = $ans240;
$step234 = 17;
$al241 = L[83];
$field286 = R.getColonFieldLoc(anf_method_obj281,"make4",L[83]);
if(R.isMethod($field286)) {
$ans240 = $field286.full_meth(anf_method_obj281,anf_arg282,anf_arg283,anf_arg284,anf_arg285);
} else {
if(!(R.isFunction($field286))) {
R.ffi.throwNonFunApp(L[83],$field286);
}
$ans240 = $field286.app(anf_arg282,anf_arg283,anf_arg284,anf_arg285);
}
break;
case 17: ++R.GAS;
return $ans240;
default: throw "No case numbered " + $step234 + " in $temp_full235";
}
}
} catch($e288) {
if(R.isCont($e288) && ($step234 !== 17)) {
$e288.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al241,$temp_full235,$step234,[self236,maybe$stack$loc237,src$available238,maybe$ast239],[anf_method_obj253,anf_arg254,anf_method_obj248,anf_arg256,anf_method_obj281,anf_arg282,anf_arg283,anf_method_obj273,anf_arg274,anf_arg269,anf_arg275,anf_arg284]);
}
if(R.isPyretException($e288)) {
$e288.pyretStack.push($al241);
}
throw $e288;
}
};
var anf_variant_member6104 = R.makeMethod3($temp_full235,"render-fancy-reason");
var $temp_full290 = function($self291) {
var $step289 = 0;
var $ans292 = D;
var $al293 = L[105];
try {
if(R.isActivationRecord($self291)) {
$step289 = $self291.step;
$al293 = $self291.from;
$ans292 = $self291.ans;
self291 = $self291.args[0];
anf_method_obj303 = $self291.vars[0];
anf_arg304 = $self291.vars[1];
anf_method_obj297 = $self291.vars[2];
anf_arg305 = $self291.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[105],1,$t);
}
var self291 = $self291;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step289) {
case 0: $al293 = L[98];
var anf_method_obj303 = G(ED5,"error",L[98]);
var anf_fun294 = ed$simple$intro95.$var;
$al293 = L[99];
var anf_arg295 = G(self291,"loc",L[99]);
$step289 = 1;
$al293 = L[104];
if(!(R.isFunction(anf_fun294))) {
R.ffi.throwNonFunApp($al293,anf_fun294);
}
$ans292 = anf_fun294.app(("reference update expression"),anf_arg295);
break;
case 1: var anf_arg304 = $ans292;
$al293 = L[100];
var anf_method_obj297 = G(ED5,"para",L[100]);
$step289 = 2;
$al293 = L[101];
$field296 = R.getColonFieldLoc(ED5,"text",L[101]);
if(R.isMethod($field296)) {
$ans292 = $field296.full_meth(ED5,("It was given a non-object value:"));
} else {
if(!(R.isFunction($field296))) {
R.ffi.throwNonFunApp(L[101],$field296);
}
$ans292 = $field296.app(("It was given a non-object value:"));
}
break;
case 2: var anf_arg298 = $ans292;
$step289 = 3;
$al293 = L[100];
$field300 = R.getColonFieldLoc(anf_method_obj297,"make1",L[100]);
if(R.isMethod($field300)) {
$ans292 = $field300.full_meth(anf_method_obj297,anf_arg298);
} else {
if(!(R.isFunction($field300))) {
R.ffi.throwNonFunApp(L[100],$field300);
}
$ans292 = $field300.app(anf_arg298);
}
break;
case 3: var anf_arg305 = $ans292;
$al293 = L[102];
var anf_arg301 = G(self291,"obj",L[102]);
$step289 = 4;
$al293 = L[103];
$field302 = R.getColonFieldLoc(ED5,"embed",L[103]);
if(R.isMethod($field302)) {
$ans292 = $field302.full_meth(ED5,anf_arg301);
} else {
if(!(R.isFunction($field302))) {
R.ffi.throwNonFunApp(L[103],$field302);
}
$ans292 = $field302.app(anf_arg301);
}
break;
case 4: var anf_arg306 = $ans292;
$step289 = 5;
$al293 = L[98];
$field307 = R.getColonFieldLoc(anf_method_obj303,"make3",L[98]);
if(R.isMethod($field307)) {
$ans292 = $field307.full_meth(anf_method_obj303,anf_arg304,anf_arg305,anf_arg306);
} else {
if(!(R.isFunction($field307))) {
R.ffi.throwNonFunApp(L[98],$field307);
}
$ans292 = $field307.app(anf_arg304,anf_arg305,anf_arg306);
}
break;
case 5: ++R.GAS;
return $ans292;
default: throw "No case numbered " + $step289 + " in $temp_full290";
}
}
} catch($e308) {
if(R.isCont($e308) && ($step289 !== 5)) {
$e308.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al293,$temp_full290,$step289,[self291],[anf_method_obj303,anf_arg304,anf_method_obj297,anf_arg305]);
}
if(R.isPyretException($e308)) {
$e308.pyretStack.push($al293);
}
throw $e308;
}
};
var anf_variant_member6105 = R.makeMethod0($temp_full290,"render-reason");
var $temp_full310 = function($self311,$maybe$stack$loc312,$src$available313,$maybe$ast314) {
var $step309 = 0;
var $ans315 = D;
var $al316 = L[141];
try {
if(R.isActivationRecord($self311)) {
$step309 = $self311.step;
$al316 = $self311.from;
$ans315 = $self311.ans;
self311 = $self311.args[0];
maybe$stack$loc312 = $self311.args[1];
src$available313 = $self311.args[2];
maybe$ast314 = $self311.args[3];
anf_method_obj356 = $self311.vars[0];
anf_arg357 = $self311.vars[1];
anf_arg358 = $self311.vars[2];
anf_method_obj347 = $self311.vars[3];
anf_arg349 = $self311.vars[4];
anf_arg336 = $self311.vars[5];
anf_arg350 = $self311.vars[6];
anf_arg351 = $self311.vars[7];
anf_arg344 = $self311.vars[8];
anf_arg359 = $self311.vars[9];
anf_method_obj378 = $self311.vars[10];
anf_arg379 = $self311.vars[11];
anf_method_obj371 = $self311.vars[12];
anf_arg372 = $self311.vars[13];
anf_arg373 = $self311.vars[14];
anf_arg380 = $self311.vars[15];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],4,$t);
}
var self311 = $self311;
var maybe$stack$loc312 = $maybe$stack$loc312;
var src$available313 = $src$available313;
var maybe$ast314 = $maybe$ast314;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step309) {
case 0: $al316 = L[106];
var anf_method_obj317 = G(self311,"loc",L[106]);
$step309 = 1;
$al316 = L[107];
$field318 = R.getColonFieldLoc(anf_method_obj317,"is-builtin",L[107]);
if(R.isMethod($field318)) {
$ans315 = $field318.full_meth(anf_method_obj317);
} else {
if(!(R.isFunction($field318))) {
R.ffi.throwNonFunApp(L[107],$field318);
}
$ans315 = $field318.app();
}
break;
case 1: var anf_arg319 = $ans315;
$step309 = 2;
$al316 = L[108];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al316,not4);
}
$ans315 = not4.app(anf_arg319);
break;
case 2: var anf_arg320 = $ans315;
$al316 = L[108];
var anf_if384 = R.checkWrapBoolean(anf_arg320);
$step309 = R.isPyretTrue(anf_if384)?3:5;
break;
case 3: $al316 = L[109];
var anf_arg322 = G(self311,"loc",L[109]);
$step309 = 4;
$al316 = L[110];
if(!(R.isFunction(src$available313))) {
R.ffi.throwNonFunApp($al316,src$available313);
}
$ans315 = src$available313.app(anf_arg322);
break;
case 4: var anf_arg324 = $ans315;
$step309 = 6;
$al316 = L[110];
$ans315 = R.checkWrapBoolean(anf_arg324);
break;
case 5: $step309 = 6;
$ans315 = (false);
break;
case 6: var anf_arg325 = $ans315;
$al316 = L[111];
var anf_if383 = R.checkWrapBoolean(anf_arg325);
$step309 = R.isPyretTrue(anf_if383)?7:20;
break;
case 7: $al316 = L[112];
var anf_method_obj356 = G(ED5,"error",L[112]);
var anf_fun326 = ed$intro122.$var;
$al316 = L[113];
var anf_arg327 = G(self311,"loc",L[113]);
$step309 = 8;
$al316 = L[129];
if(!(R.isFunction(anf_fun326))) {
R.ffi.throwNonFunApp($al316,anf_fun326);
}
$ans315 = anf_fun326.app(("reference update expression"),anf_arg327,(-1),(true));
break;
case 8: var anf_arg357 = $ans315;
$al316 = L[114];
var anf_arg328 = G(self311,"loc",L[114]);
$step309 = 9;
$al316 = L[115];
$field329 = R.getColonFieldLoc(ED5,"cmcode",L[115]);
if(R.isMethod($field329)) {
$ans315 = $field329.full_meth(ED5,anf_arg328);
} else {
if(!(R.isFunction($field329))) {
R.ffi.throwNonFunApp(L[115],$field329);
}
$ans315 = $field329.app(anf_arg328);
}
break;
case 9: var anf_arg358 = $ans315;
$al316 = L[116];
var anf_method_obj347 = G(ED5,"para",L[116]);
$step309 = 10;
$al316 = L[117];
$field330 = R.getColonFieldLoc(ED5,"text",L[117]);
if(R.isMethod($field330)) {
$ans315 = $field330.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field330))) {
R.ffi.throwNonFunApp(L[117],$field330);
}
$ans315 = $field330.app(("The "));
}
break;
case 10: var anf_arg349 = $ans315;
$step309 = 11;
$al316 = L[118];
$field331 = R.getColonFieldLoc(ED5,"text",L[118]);
if(R.isMethod($field331)) {
$ans315 = $field331.full_meth(ED5,("field"));
} else {
if(!(R.isFunction($field331))) {
R.ffi.throwNonFunApp(L[118],$field331);
}
$ans315 = $field331.app(("field"));
}
break;
case 11: var anf_arg336 = $ans315;
$al316 = L[119];
var anf_method_obj332 = G(ED5,"locs",L[119]);
$al316 = L[120];
var anf_arg334 = G(self311,"fieldloc",L[120]);
$step309 = 12;
$al316 = L[119];
$field335 = R.getColonFieldLoc(anf_method_obj332,"make1",L[119]);
if(R.isMethod($field335)) {
$ans315 = $field335.full_meth(anf_method_obj332,anf_arg334);
} else {
if(!(R.isFunction($field335))) {
R.ffi.throwNonFunApp(L[119],$field335);
}
$ans315 = $field335.app(anf_arg334);
}
break;
case 12: var anf_arg337 = $ans315;
$step309 = 13;
$al316 = L[121];
$field338 = R.getColonFieldLoc(ED5,"highlight",L[121]);
if(R.isMethod($field338)) {
$ans315 = $field338.full_meth(ED5,anf_arg336,anf_arg337,(0));
} else {
if(!(R.isFunction($field338))) {
R.ffi.throwNonFunApp(L[121],$field338);
}
$ans315 = $field338.app(anf_arg336,anf_arg337,(0));
}
break;
case 13: var anf_arg350 = $ans315;
$step309 = 14;
$al316 = L[122];
$field339 = R.getColonFieldLoc(ED5,"text",L[122]);
if(R.isMethod($field339)) {
$ans315 = $field339.full_meth(ED5,(" is frozen in the "));
} else {
if(!(R.isFunction($field339))) {
R.ffi.throwNonFunApp(L[122],$field339);
}
$ans315 = $field339.app((" is frozen in the "));
}
break;
case 14: var anf_arg351 = $ans315;
$step309 = 15;
$al316 = L[123];
$field340 = R.getColonFieldLoc(ED5,"text",L[123]);
if(R.isMethod($field340)) {
$ans315 = $field340.full_meth(ED5,("object:"));
} else {
if(!(R.isFunction($field340))) {
R.ffi.throwNonFunApp(L[123],$field340);
}
$ans315 = $field340.app(("object:"));
}
break;
case 15: var anf_arg344 = $ans315;
$al316 = L[124];
var anf_method_obj341 = G(ED5,"locs",L[124]);
$al316 = L[125];
var anf_arg342 = G(self311,"objloc",L[125]);
$step309 = 16;
$al316 = L[124];
$field343 = R.getColonFieldLoc(anf_method_obj341,"make1",L[124]);
if(R.isMethod($field343)) {
$ans315 = $field343.full_meth(anf_method_obj341,anf_arg342);
} else {
if(!(R.isFunction($field343))) {
R.ffi.throwNonFunApp(L[124],$field343);
}
$ans315 = $field343.app(anf_arg342);
}
break;
case 16: var anf_arg345 = $ans315;
$step309 = 17;
$al316 = L[126];
$field346 = R.getColonFieldLoc(ED5,"highlight",L[126]);
if(R.isMethod($field346)) {
$ans315 = $field346.full_meth(ED5,anf_arg344,anf_arg345,(1));
} else {
if(!(R.isFunction($field346))) {
R.ffi.throwNonFunApp(L[126],$field346);
}
$ans315 = $field346.app(anf_arg344,anf_arg345,(1));
}
break;
case 17: var anf_arg352 = $ans315;
$step309 = 18;
$al316 = L[116];
$field353 = R.getColonFieldLoc(anf_method_obj347,"make4",L[116]);
if(R.isMethod($field353)) {
$ans315 = $field353.full_meth(anf_method_obj347,anf_arg349,anf_arg350,anf_arg351,anf_arg352);
} else {
if(!(R.isFunction($field353))) {
R.ffi.throwNonFunApp(L[116],$field353);
}
$ans315 = $field353.app(anf_arg349,anf_arg350,anf_arg351,anf_arg352);
}
break;
case 18: var anf_arg359 = $ans315;
$al316 = L[127];
var anf_arg354 = G(self311,"obj",L[127]);
$step309 = 19;
$al316 = L[128];
$field355 = R.getColonFieldLoc(ED5,"embed",L[128]);
if(R.isMethod($field355)) {
$ans315 = $field355.full_meth(ED5,anf_arg354);
} else {
if(!(R.isFunction($field355))) {
R.ffi.throwNonFunApp(L[128],$field355);
}
$ans315 = $field355.app(anf_arg354);
}
break;
case 19: var anf_arg361 = $ans315;
$step309 = 28;
$al316 = L[112];
$field362 = R.getColonFieldLoc(anf_method_obj356,"make4",L[112]);
if(R.isMethod($field362)) {
$ans315 = $field362.full_meth(anf_method_obj356,anf_arg357,anf_arg358,anf_arg359,anf_arg361);
} else {
if(!(R.isFunction($field362))) {
R.ffi.throwNonFunApp(L[112],$field362);
}
$ans315 = $field362.app(anf_arg357,anf_arg358,anf_arg359,anf_arg361);
}
break;
case 20: $al316 = L[130];
var anf_method_obj378 = G(ED5,"error",L[130]);
var anf_fun363 = ed$simple$intro95.$var;
$al316 = L[131];
var anf_arg364 = G(self311,"loc",L[131]);
$step309 = 21;
$al316 = L[140];
if(!(R.isFunction(anf_fun363))) {
R.ffi.throwNonFunApp($al316,anf_fun363);
}
$ans315 = anf_fun363.app(("reference update expression"),anf_arg364);
break;
case 21: var anf_arg379 = $ans315;
$al316 = L[132];
var anf_method_obj371 = G(ED5,"para",L[132]);
$step309 = 22;
$al316 = L[133];
$field365 = R.getColonFieldLoc(ED5,"text",L[133]);
if(R.isMethod($field365)) {
$ans315 = $field365.full_meth(ED5,("The field "));
} else {
if(!(R.isFunction($field365))) {
R.ffi.throwNonFunApp(L[133],$field365);
}
$ans315 = $field365.app(("The field "));
}
break;
case 22: var anf_arg372 = $ans315;
$al316 = L[134];
var anf_arg366 = G(self311,"field",L[134]);
$step309 = 23;
$al316 = L[135];
$field367 = R.getColonFieldLoc(ED5,"text",L[135]);
if(R.isMethod($field367)) {
$ans315 = $field367.full_meth(ED5,anf_arg366);
} else {
if(!(R.isFunction($field367))) {
R.ffi.throwNonFunApp(L[135],$field367);
}
$ans315 = $field367.app(anf_arg366);
}
break;
case 23: var anf_arg368 = $ans315;
$step309 = 24;
$al316 = L[136];
$field369 = R.getColonFieldLoc(ED5,"code",L[136]);
if(R.isMethod($field369)) {
$ans315 = $field369.full_meth(ED5,anf_arg368);
} else {
if(!(R.isFunction($field369))) {
R.ffi.throwNonFunApp(L[136],$field369);
}
$ans315 = $field369.app(anf_arg368);
}
break;
case 24: var anf_arg373 = $ans315;
$step309 = 25;
$al316 = L[137];
$field370 = R.getColonFieldLoc(ED5,"text",L[137]);
if(R.isMethod($field370)) {
$ans315 = $field370.full_meth(ED5,(" is frozen in the object:"));
} else {
if(!(R.isFunction($field370))) {
R.ffi.throwNonFunApp(L[137],$field370);
}
$ans315 = $field370.app((" is frozen in the object:"));
}
break;
case 25: var anf_arg374 = $ans315;
$step309 = 26;
$al316 = L[132];
$field375 = R.getColonFieldLoc(anf_method_obj371,"make3",L[132]);
if(R.isMethod($field375)) {
$ans315 = $field375.full_meth(anf_method_obj371,anf_arg372,anf_arg373,anf_arg374);
} else {
if(!(R.isFunction($field375))) {
R.ffi.throwNonFunApp(L[132],$field375);
}
$ans315 = $field375.app(anf_arg372,anf_arg373,anf_arg374);
}
break;
case 26: var anf_arg380 = $ans315;
$al316 = L[138];
var anf_arg376 = G(self311,"obj",L[138]);
$step309 = 27;
$al316 = L[139];
$field377 = R.getColonFieldLoc(ED5,"embed",L[139]);
if(R.isMethod($field377)) {
$ans315 = $field377.full_meth(ED5,anf_arg376);
} else {
if(!(R.isFunction($field377))) {
R.ffi.throwNonFunApp(L[139],$field377);
}
$ans315 = $field377.app(anf_arg376);
}
break;
case 27: var anf_arg381 = $ans315;
$step309 = 28;
$al316 = L[130];
$field382 = R.getColonFieldLoc(anf_method_obj378,"make3",L[130]);
if(R.isMethod($field382)) {
$ans315 = $field382.full_meth(anf_method_obj378,anf_arg379,anf_arg380,anf_arg381);
} else {
if(!(R.isFunction($field382))) {
R.ffi.throwNonFunApp(L[130],$field382);
}
$ans315 = $field382.app(anf_arg379,anf_arg380,anf_arg381);
}
break;
case 28: ++R.GAS;
return $ans315;
default: throw "No case numbered " + $step309 + " in $temp_full310";
}
}
} catch($e385) {
if(R.isCont($e385) && ($step309 !== 28)) {
$e385.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al316,$temp_full310,$step309,[self311,maybe$stack$loc312,src$available313,maybe$ast314],[anf_method_obj356,anf_arg357,anf_arg358,anf_method_obj347,anf_arg349,anf_arg336,anf_arg350,anf_arg351,anf_arg344,anf_arg359,anf_method_obj378,anf_arg379,anf_method_obj371,anf_arg372,anf_arg373,anf_arg380]);
}
if(R.isPyretException($e385)) {
$e385.pyretStack.push($al316);
}
throw $e385;
}
};
var anf_variant_member6116 = R.makeMethod3($temp_full310,"render-fancy-reason");
var $temp_full387 = function($self388) {
var $step386 = 0;
var $ans389 = D;
var $al390 = L[153];
try {
if(R.isActivationRecord($self388)) {
$step386 = $self388.step;
$al390 = $self388.from;
$ans389 = $self388.ans;
self388 = $self388.args[0];
anf_method_obj408 = $self388.vars[0];
anf_arg409 = $self388.vars[1];
anf_method_obj400 = $self388.vars[2];
anf_arg401 = $self388.vars[3];
anf_arg402 = $self388.vars[4];
anf_arg410 = $self388.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[153],1,$t);
}
var self388 = $self388;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step386) {
case 0: $al390 = L[142];
var anf_method_obj408 = G(ED5,"error",L[142]);
var anf_fun391 = ed$simple$intro95.$var;
$al390 = L[143];
var anf_arg392 = G(self388,"loc",L[143]);
$step386 = 1;
$al390 = L[152];
if(!(R.isFunction(anf_fun391))) {
R.ffi.throwNonFunApp($al390,anf_fun391);
}
$ans389 = anf_fun391.app(("reference update expression"),anf_arg392);
break;
case 1: var anf_arg409 = $ans389;
$al390 = L[144];
var anf_method_obj400 = G(ED5,"para",L[144]);
$step386 = 2;
$al390 = L[145];
$field394 = R.getColonFieldLoc(ED5,"text",L[145]);
if(R.isMethod($field394)) {
$ans389 = $field394.full_meth(ED5,("The field "));
} else {
if(!(R.isFunction($field394))) {
R.ffi.throwNonFunApp(L[145],$field394);
}
$ans389 = $field394.app(("The field "));
}
break;
case 2: var anf_arg401 = $ans389;
$al390 = L[146];
var anf_arg395 = G(self388,"field",L[146]);
$step386 = 3;
$al390 = L[147];
$field396 = R.getColonFieldLoc(ED5,"text",L[147]);
if(R.isMethod($field396)) {
$ans389 = $field396.full_meth(ED5,anf_arg395);
} else {
if(!(R.isFunction($field396))) {
R.ffi.throwNonFunApp(L[147],$field396);
}
$ans389 = $field396.app(anf_arg395);
}
break;
case 3: var anf_arg397 = $ans389;
$step386 = 4;
$al390 = L[148];
$field398 = R.getColonFieldLoc(ED5,"code",L[148]);
if(R.isMethod($field398)) {
$ans389 = $field398.full_meth(ED5,anf_arg397);
} else {
if(!(R.isFunction($field398))) {
R.ffi.throwNonFunApp(L[148],$field398);
}
$ans389 = $field398.app(anf_arg397);
}
break;
case 4: var anf_arg402 = $ans389;
$step386 = 5;
$al390 = L[149];
$field399 = R.getColonFieldLoc(ED5,"text",L[149]);
if(R.isMethod($field399)) {
$ans389 = $field399.full_meth(ED5,(" is frozen in the object:"));
} else {
if(!(R.isFunction($field399))) {
R.ffi.throwNonFunApp(L[149],$field399);
}
$ans389 = $field399.app((" is frozen in the object:"));
}
break;
case 5: var anf_arg403 = $ans389;
$step386 = 6;
$al390 = L[144];
$field405 = R.getColonFieldLoc(anf_method_obj400,"make3",L[144]);
if(R.isMethod($field405)) {
$ans389 = $field405.full_meth(anf_method_obj400,anf_arg401,anf_arg402,anf_arg403);
} else {
if(!(R.isFunction($field405))) {
R.ffi.throwNonFunApp(L[144],$field405);
}
$ans389 = $field405.app(anf_arg401,anf_arg402,anf_arg403);
}
break;
case 6: var anf_arg410 = $ans389;
$al390 = L[150];
var anf_arg406 = G(self388,"obj",L[150]);
$step386 = 7;
$al390 = L[151];
$field407 = R.getColonFieldLoc(ED5,"embed",L[151]);
if(R.isMethod($field407)) {
$ans389 = $field407.full_meth(ED5,anf_arg406);
} else {
if(!(R.isFunction($field407))) {
R.ffi.throwNonFunApp(L[151],$field407);
}
$ans389 = $field407.app(anf_arg406);
}
break;
case 7: var anf_arg411 = $ans389;
$step386 = 8;
$al390 = L[142];
$field412 = R.getColonFieldLoc(anf_method_obj408,"make3",L[142]);
if(R.isMethod($field412)) {
$ans389 = $field412.full_meth(anf_method_obj408,anf_arg409,anf_arg410,anf_arg411);
} else {
if(!(R.isFunction($field412))) {
R.ffi.throwNonFunApp(L[142],$field412);
}
$ans389 = $field412.app(anf_arg409,anf_arg410,anf_arg411);
}
break;
case 8: ++R.GAS;
return $ans389;
default: throw "No case numbered " + $step386 + " in $temp_full387";
}
}
} catch($e413) {
if(R.isCont($e413) && ($step386 !== 8)) {
$e413.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al390,$temp_full387,$step386,[self388],[anf_method_obj408,anf_arg409,anf_method_obj400,anf_arg401,anf_arg402,anf_arg410]);
}
if(R.isPyretException($e413)) {
$e413.pyretStack.push($al390);
}
throw $e413;
}
};
var anf_variant_member6117 = R.makeMethod0($temp_full387,"render-reason");
var $temp_full415 = function($self416,$maybe$stack$loc417,$src$available418,$maybe$ast419) {
var $step414 = 0;
var $ans420 = D;
var $al421 = L[189];
try {
if(R.isActivationRecord($self416)) {
$step414 = $self416.step;
$al421 = $self416.from;
$ans420 = $self416.ans;
self416 = $self416.args[0];
maybe$stack$loc417 = $self416.args[1];
src$available418 = $self416.args[2];
maybe$ast419 = $self416.args[3];
anf_method_obj460 = $self416.vars[0];
anf_arg461 = $self416.vars[1];
anf_arg463 = $self416.vars[2];
anf_method_obj452 = $self416.vars[3];
anf_arg453 = $self416.vars[4];
anf_arg440 = $self416.vars[5];
anf_arg454 = $self416.vars[6];
anf_arg455 = $self416.vars[7];
anf_arg449 = $self416.vars[8];
anf_arg464 = $self416.vars[9];
anf_method_obj482 = $self416.vars[10];
anf_arg483 = $self416.vars[11];
anf_method_obj475 = $self416.vars[12];
anf_arg476 = $self416.vars[13];
anf_arg477 = $self416.vars[14];
anf_arg484 = $self416.vars[15];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[189],4,$t);
}
var self416 = $self416;
var maybe$stack$loc417 = $maybe$stack$loc417;
var src$available418 = $src$available418;
var maybe$ast419 = $maybe$ast419;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step414) {
case 0: $al421 = L[154];
var anf_method_obj422 = G(self416,"loc",L[154]);
$step414 = 1;
$al421 = L[155];
$field423 = R.getColonFieldLoc(anf_method_obj422,"is-builtin",L[155]);
if(R.isMethod($field423)) {
$ans420 = $field423.full_meth(anf_method_obj422);
} else {
if(!(R.isFunction($field423))) {
R.ffi.throwNonFunApp(L[155],$field423);
}
$ans420 = $field423.app();
}
break;
case 1: var anf_arg424 = $ans420;
$step414 = 2;
$al421 = L[156];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al421,not4);
}
$ans420 = not4.app(anf_arg424);
break;
case 2: var anf_arg425 = $ans420;
$al421 = L[156];
var anf_if488 = R.checkWrapBoolean(anf_arg425);
$step414 = R.isPyretTrue(anf_if488)?3:5;
break;
case 3: $al421 = L[157];
var anf_arg426 = G(self416,"loc",L[157]);
$step414 = 4;
$al421 = L[158];
if(!(R.isFunction(src$available418))) {
R.ffi.throwNonFunApp($al421,src$available418);
}
$ans420 = src$available418.app(anf_arg426);
break;
case 4: var anf_arg427 = $ans420;
$step414 = 6;
$al421 = L[158];
$ans420 = R.checkWrapBoolean(anf_arg427);
break;
case 5: $step414 = 6;
$ans420 = (false);
break;
case 6: var anf_arg428 = $ans420;
$al421 = L[159];
var anf_if487 = R.checkWrapBoolean(anf_arg428);
$step414 = R.isPyretTrue(anf_if487)?7:20;
break;
case 7: $al421 = L[160];
var anf_method_obj460 = G(ED5,"error",L[160]);
var anf_fun429 = ed$intro122.$var;
$al421 = L[161];
var anf_arg431 = G(self416,"loc",L[161]);
$step414 = 8;
$al421 = L[177];
if(!(R.isFunction(anf_fun429))) {
R.ffi.throwNonFunApp($al421,anf_fun429);
}
$ans420 = anf_fun429.app(("reference update expression"),anf_arg431,(-1),(true));
break;
case 8: var anf_arg461 = $ans420;
$al421 = L[162];
var anf_arg433 = G(self416,"loc",L[162]);
$step414 = 9;
$al421 = L[163];
$field434 = R.getColonFieldLoc(ED5,"cmcode",L[163]);
if(R.isMethod($field434)) {
$ans420 = $field434.full_meth(ED5,anf_arg433);
} else {
if(!(R.isFunction($field434))) {
R.ffi.throwNonFunApp(L[163],$field434);
}
$ans420 = $field434.app(anf_arg433);
}
break;
case 9: var anf_arg463 = $ans420;
$al421 = L[164];
var anf_method_obj452 = G(ED5,"para",L[164]);
$step414 = 10;
$al421 = L[165];
$field435 = R.getColonFieldLoc(ED5,"text",L[165]);
if(R.isMethod($field435)) {
$ans420 = $field435.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field435))) {
R.ffi.throwNonFunApp(L[165],$field435);
}
$ans420 = $field435.app(("The "));
}
break;
case 10: var anf_arg453 = $ans420;
$step414 = 11;
$al421 = L[166];
$field436 = R.getColonFieldLoc(ED5,"text",L[166]);
if(R.isMethod($field436)) {
$ans420 = $field436.full_meth(ED5,("field"));
} else {
if(!(R.isFunction($field436))) {
R.ffi.throwNonFunApp(L[166],$field436);
}
$ans420 = $field436.app(("field"));
}
break;
case 11: var anf_arg440 = $ans420;
$al421 = L[167];
var anf_method_obj437 = G(ED5,"locs",L[167]);
$al421 = L[168];
var anf_arg438 = G(self416,"fieldloc",L[168]);
$step414 = 12;
$al421 = L[167];
$field439 = R.getColonFieldLoc(anf_method_obj437,"make1",L[167]);
if(R.isMethod($field439)) {
$ans420 = $field439.full_meth(anf_method_obj437,anf_arg438);
} else {
if(!(R.isFunction($field439))) {
R.ffi.throwNonFunApp(L[167],$field439);
}
$ans420 = $field439.app(anf_arg438);
}
break;
case 12: var anf_arg441 = $ans420;
$step414 = 13;
$al421 = L[169];
$field442 = R.getColonFieldLoc(ED5,"highlight",L[169]);
if(R.isMethod($field442)) {
$ans420 = $field442.full_meth(ED5,anf_arg440,anf_arg441,(0));
} else {
if(!(R.isFunction($field442))) {
R.ffi.throwNonFunApp(L[169],$field442);
}
$ans420 = $field442.app(anf_arg440,anf_arg441,(0));
}
break;
case 13: var anf_arg454 = $ans420;
$step414 = 14;
$al421 = L[170];
$field444 = R.getColonFieldLoc(ED5,"text",L[170]);
if(R.isMethod($field444)) {
$ans420 = $field444.full_meth(ED5,(" is not a reference in the "));
} else {
if(!(R.isFunction($field444))) {
R.ffi.throwNonFunApp(L[170],$field444);
}
$ans420 = $field444.app((" is not a reference in the "));
}
break;
case 14: var anf_arg455 = $ans420;
$step414 = 15;
$al421 = L[171];
$field445 = R.getColonFieldLoc(ED5,"text",L[171]);
if(R.isMethod($field445)) {
$ans420 = $field445.full_meth(ED5,("object:"));
} else {
if(!(R.isFunction($field445))) {
R.ffi.throwNonFunApp(L[171],$field445);
}
$ans420 = $field445.app(("object:"));
}
break;
case 15: var anf_arg449 = $ans420;
$al421 = L[172];
var anf_method_obj446 = G(ED5,"locs",L[172]);
$al421 = L[173];
var anf_arg447 = G(self416,"objloc",L[173]);
$step414 = 16;
$al421 = L[172];
$field448 = R.getColonFieldLoc(anf_method_obj446,"make1",L[172]);
if(R.isMethod($field448)) {
$ans420 = $field448.full_meth(anf_method_obj446,anf_arg447);
} else {
if(!(R.isFunction($field448))) {
R.ffi.throwNonFunApp(L[172],$field448);
}
$ans420 = $field448.app(anf_arg447);
}
break;
case 16: var anf_arg450 = $ans420;
$step414 = 17;
$al421 = L[174];
$field451 = R.getColonFieldLoc(ED5,"highlight",L[174]);
if(R.isMethod($field451)) {
$ans420 = $field451.full_meth(ED5,anf_arg449,anf_arg450,(1));
} else {
if(!(R.isFunction($field451))) {
R.ffi.throwNonFunApp(L[174],$field451);
}
$ans420 = $field451.app(anf_arg449,anf_arg450,(1));
}
break;
case 17: var anf_arg456 = $ans420;
$step414 = 18;
$al421 = L[164];
$field457 = R.getColonFieldLoc(anf_method_obj452,"make4",L[164]);
if(R.isMethod($field457)) {
$ans420 = $field457.full_meth(anf_method_obj452,anf_arg453,anf_arg454,anf_arg455,anf_arg456);
} else {
if(!(R.isFunction($field457))) {
R.ffi.throwNonFunApp(L[164],$field457);
}
$ans420 = $field457.app(anf_arg453,anf_arg454,anf_arg455,anf_arg456);
}
break;
case 18: var anf_arg464 = $ans420;
$al421 = L[175];
var anf_arg458 = G(self416,"obj",L[175]);
$step414 = 19;
$al421 = L[176];
$field459 = R.getColonFieldLoc(ED5,"embed",L[176]);
if(R.isMethod($field459)) {
$ans420 = $field459.full_meth(ED5,anf_arg458);
} else {
if(!(R.isFunction($field459))) {
R.ffi.throwNonFunApp(L[176],$field459);
}
$ans420 = $field459.app(anf_arg458);
}
break;
case 19: var anf_arg465 = $ans420;
$step414 = 28;
$al421 = L[160];
$field466 = R.getColonFieldLoc(anf_method_obj460,"make4",L[160]);
if(R.isMethod($field466)) {
$ans420 = $field466.full_meth(anf_method_obj460,anf_arg461,anf_arg463,anf_arg464,anf_arg465);
} else {
if(!(R.isFunction($field466))) {
R.ffi.throwNonFunApp(L[160],$field466);
}
$ans420 = $field466.app(anf_arg461,anf_arg463,anf_arg464,anf_arg465);
}
break;
case 20: $al421 = L[178];
var anf_method_obj482 = G(ED5,"error",L[178]);
var anf_fun467 = ed$simple$intro95.$var;
$al421 = L[179];
var anf_arg468 = G(self416,"loc",L[179]);
$step414 = 21;
$al421 = L[188];
if(!(R.isFunction(anf_fun467))) {
R.ffi.throwNonFunApp($al421,anf_fun467);
}
$ans420 = anf_fun467.app(("reference update expression"),anf_arg468);
break;
case 21: var anf_arg483 = $ans420;
$al421 = L[180];
var anf_method_obj475 = G(ED5,"para",L[180]);
$step414 = 22;
$al421 = L[181];
$field469 = R.getColonFieldLoc(ED5,"text",L[181]);
if(R.isMethod($field469)) {
$ans420 = $field469.full_meth(ED5,("The field "));
} else {
if(!(R.isFunction($field469))) {
R.ffi.throwNonFunApp(L[181],$field469);
}
$ans420 = $field469.app(("The field "));
}
break;
case 22: var anf_arg476 = $ans420;
$al421 = L[182];
var anf_arg470 = G(self416,"field",L[182]);
$step414 = 23;
$al421 = L[183];
$field471 = R.getColonFieldLoc(ED5,"text",L[183]);
if(R.isMethod($field471)) {
$ans420 = $field471.full_meth(ED5,anf_arg470);
} else {
if(!(R.isFunction($field471))) {
R.ffi.throwNonFunApp(L[183],$field471);
}
$ans420 = $field471.app(anf_arg470);
}
break;
case 23: var anf_arg472 = $ans420;
$step414 = 24;
$al421 = L[184];
$field473 = R.getColonFieldLoc(ED5,"code",L[184]);
if(R.isMethod($field473)) {
$ans420 = $field473.full_meth(ED5,anf_arg472);
} else {
if(!(R.isFunction($field473))) {
R.ffi.throwNonFunApp(L[184],$field473);
}
$ans420 = $field473.app(anf_arg472);
}
break;
case 24: var anf_arg477 = $ans420;
$step414 = 25;
$al421 = L[185];
$field474 = R.getColonFieldLoc(ED5,"text",L[185]);
if(R.isMethod($field474)) {
$ans420 = $field474.full_meth(ED5,(" is frozen in the object:"));
} else {
if(!(R.isFunction($field474))) {
R.ffi.throwNonFunApp(L[185],$field474);
}
$ans420 = $field474.app((" is frozen in the object:"));
}
break;
case 25: var anf_arg478 = $ans420;
$step414 = 26;
$al421 = L[180];
$field479 = R.getColonFieldLoc(anf_method_obj475,"make3",L[180]);
if(R.isMethod($field479)) {
$ans420 = $field479.full_meth(anf_method_obj475,anf_arg476,anf_arg477,anf_arg478);
} else {
if(!(R.isFunction($field479))) {
R.ffi.throwNonFunApp(L[180],$field479);
}
$ans420 = $field479.app(anf_arg476,anf_arg477,anf_arg478);
}
break;
case 26: var anf_arg484 = $ans420;
$al421 = L[186];
var anf_arg480 = G(self416,"obj",L[186]);
$step414 = 27;
$al421 = L[187];
$field481 = R.getColonFieldLoc(ED5,"embed",L[187]);
if(R.isMethod($field481)) {
$ans420 = $field481.full_meth(ED5,anf_arg480);
} else {
if(!(R.isFunction($field481))) {
R.ffi.throwNonFunApp(L[187],$field481);
}
$ans420 = $field481.app(anf_arg480);
}
break;
case 27: var anf_arg485 = $ans420;
$step414 = 28;
$al421 = L[178];
$field486 = R.getColonFieldLoc(anf_method_obj482,"make3",L[178]);
if(R.isMethod($field486)) {
$ans420 = $field486.full_meth(anf_method_obj482,anf_arg483,anf_arg484,anf_arg485);
} else {
if(!(R.isFunction($field486))) {
R.ffi.throwNonFunApp(L[178],$field486);
}
$ans420 = $field486.app(anf_arg483,anf_arg484,anf_arg485);
}
break;
case 28: ++R.GAS;
return $ans420;
default: throw "No case numbered " + $step414 + " in $temp_full415";
}
}
} catch($e489) {
if(R.isCont($e489) && ($step414 !== 28)) {
$e489.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al421,$temp_full415,$step414,[self416,maybe$stack$loc417,src$available418,maybe$ast419],[anf_method_obj460,anf_arg461,anf_arg463,anf_method_obj452,anf_arg453,anf_arg440,anf_arg454,anf_arg455,anf_arg449,anf_arg464,anf_method_obj482,anf_arg483,anf_method_obj475,anf_arg476,anf_arg477,anf_arg484]);
}
if(R.isPyretException($e489)) {
$e489.pyretStack.push($al421);
}
throw $e489;
}
};
var anf_variant_member6130 = R.makeMethod3($temp_full415,"render-fancy-reason");
var $temp_full491 = function($self492) {
var $step490 = 0;
var $ans493 = D;
var $al494 = L[201];
try {
if(R.isActivationRecord($self492)) {
$step490 = $self492.step;
$al494 = $self492.from;
$ans493 = $self492.ans;
self492 = $self492.args[0];
anf_method_obj511 = $self492.vars[0];
anf_arg512 = $self492.vars[1];
anf_method_obj504 = $self492.vars[2];
anf_arg505 = $self492.vars[3];
anf_arg506 = $self492.vars[4];
anf_arg513 = $self492.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[201],1,$t);
}
var self492 = $self492;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step490) {
case 0: $al494 = L[190];
var anf_method_obj511 = G(ED5,"error",L[190]);
var anf_fun495 = ed$simple$intro95.$var;
$al494 = L[191];
var anf_arg496 = G(self492,"loc",L[191]);
$step490 = 1;
$al494 = L[200];
if(!(R.isFunction(anf_fun495))) {
R.ffi.throwNonFunApp($al494,anf_fun495);
}
$ans493 = anf_fun495.app(("reference update expression"),anf_arg496);
break;
case 1: var anf_arg512 = $ans493;
$al494 = L[192];
var anf_method_obj504 = G(ED5,"para",L[192]);
$step490 = 2;
$al494 = L[193];
$field497 = R.getColonFieldLoc(ED5,"text",L[193]);
if(R.isMethod($field497)) {
$ans493 = $field497.full_meth(ED5,("The field "));
} else {
if(!(R.isFunction($field497))) {
R.ffi.throwNonFunApp(L[193],$field497);
}
$ans493 = $field497.app(("The field "));
}
break;
case 2: var anf_arg505 = $ans493;
$al494 = L[194];
var anf_arg498 = G(self492,"field",L[194]);
$step490 = 3;
$al494 = L[195];
$field499 = R.getColonFieldLoc(ED5,"text",L[195]);
if(R.isMethod($field499)) {
$ans493 = $field499.full_meth(ED5,anf_arg498);
} else {
if(!(R.isFunction($field499))) {
R.ffi.throwNonFunApp(L[195],$field499);
}
$ans493 = $field499.app(anf_arg498);
}
break;
case 3: var anf_arg500 = $ans493;
$step490 = 4;
$al494 = L[196];
$field502 = R.getColonFieldLoc(ED5,"code",L[196]);
if(R.isMethod($field502)) {
$ans493 = $field502.full_meth(ED5,anf_arg500);
} else {
if(!(R.isFunction($field502))) {
R.ffi.throwNonFunApp(L[196],$field502);
}
$ans493 = $field502.app(anf_arg500);
}
break;
case 4: var anf_arg506 = $ans493;
$step490 = 5;
$al494 = L[197];
$field503 = R.getColonFieldLoc(ED5,"text",L[197]);
if(R.isMethod($field503)) {
$ans493 = $field503.full_meth(ED5,(" is frozen in the object:"));
} else {
if(!(R.isFunction($field503))) {
R.ffi.throwNonFunApp(L[197],$field503);
}
$ans493 = $field503.app((" is frozen in the object:"));
}
break;
case 5: var anf_arg507 = $ans493;
$step490 = 6;
$al494 = L[192];
$field508 = R.getColonFieldLoc(anf_method_obj504,"make3",L[192]);
if(R.isMethod($field508)) {
$ans493 = $field508.full_meth(anf_method_obj504,anf_arg505,anf_arg506,anf_arg507);
} else {
if(!(R.isFunction($field508))) {
R.ffi.throwNonFunApp(L[192],$field508);
}
$ans493 = $field508.app(anf_arg505,anf_arg506,anf_arg507);
}
break;
case 6: var anf_arg513 = $ans493;
$al494 = L[198];
var anf_arg509 = G(self492,"obj",L[198]);
$step490 = 7;
$al494 = L[199];
$field510 = R.getColonFieldLoc(ED5,"embed",L[199]);
if(R.isMethod($field510)) {
$ans493 = $field510.full_meth(ED5,anf_arg509);
} else {
if(!(R.isFunction($field510))) {
R.ffi.throwNonFunApp(L[199],$field510);
}
$ans493 = $field510.app(anf_arg509);
}
break;
case 7: var anf_arg514 = $ans493;
$step490 = 8;
$al494 = L[190];
$field515 = R.getColonFieldLoc(anf_method_obj511,"make3",L[190]);
if(R.isMethod($field515)) {
$ans493 = $field515.full_meth(anf_method_obj511,anf_arg512,anf_arg513,anf_arg514);
} else {
if(!(R.isFunction($field515))) {
R.ffi.throwNonFunApp(L[190],$field515);
}
$ans493 = $field515.app(anf_arg512,anf_arg513,anf_arg514);
}
break;
case 8: ++R.GAS;
return $ans493;
default: throw "No case numbered " + $step490 + " in $temp_full491";
}
}
} catch($e516) {
if(R.isCont($e516) && ($step490 !== 8)) {
$e516.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al494,$temp_full491,$step490,[self492],[anf_method_obj511,anf_arg512,anf_method_obj504,anf_arg505,anf_arg506,anf_arg513]);
}
if(R.isPyretException($e516)) {
$e516.pyretStack.push($al494);
}
throw $e516;
}
};
var anf_variant_member6131 = R.makeMethod0($temp_full491,"render-reason");
var $temp_full518 = function($self519,$maybe$stack$loc520,$src$available521,$maybe$ast522) {
var $step517 = 0;
var $ans523 = D;
var $al524 = L[233];
try {
if(R.isActivationRecord($self519)) {
$step517 = $self519.step;
$al524 = $self519.from;
$ans523 = $self519.ans;
self519 = $self519.args[0];
maybe$stack$loc520 = $self519.args[1];
src$available521 = $self519.args[2];
maybe$ast522 = $self519.args[3];
anf_method_obj544 = $self519.vars[0];
anf_arg545 = $self519.vars[1];
anf_method_obj537 = $self519.vars[2];
anf_arg538 = $self519.vars[3];
anf_arg539 = $self519.vars[4];
anf_arg547 = $self519.vars[5];
anf_method_obj581 = $self519.vars[6];
anf_arg582 = $self519.vars[7];
anf_arg583 = $self519.vars[8];
anf_method_obj571 = $self519.vars[9];
anf_arg572 = $self519.vars[10];
anf_arg559 = $self519.vars[11];
anf_arg573 = $self519.vars[12];
anf_arg575 = $self519.vars[13];
anf_arg568 = $self519.vars[14];
anf_arg584 = $self519.vars[15];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[233],4,$t);
}
var self519 = $self519;
var maybe$stack$loc520 = $maybe$stack$loc520;
var src$available521 = $src$available521;
var maybe$ast522 = $maybe$ast522;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step517) {
case 0: $al524 = L[202];
var anf_method_obj525 = G(self519,"loc",L[202]);
$step517 = 1;
$al524 = L[203];
$field526 = R.getColonFieldLoc(anf_method_obj525,"is-builtin",L[203]);
if(R.isMethod($field526)) {
$ans523 = $field526.full_meth(anf_method_obj525);
} else {
if(!(R.isFunction($field526))) {
R.ffi.throwNonFunApp(L[203],$field526);
}
$ans523 = $field526.app();
}
break;
case 1: var anf_arg527 = $ans523;
$al524 = L[203];
var anf_if587 = R.checkWrapBoolean(anf_arg527);
$step517 = R.isPyretTrue(anf_if587)?2:10;
break;
case 2: $al524 = L[204];
var anf_method_obj544 = G(ED5,"error",L[204]);
var anf_fun528 = ed$simple$intro95.$var;
$al524 = L[205];
var anf_arg530 = G(self519,"loc",L[205]);
$step517 = 3;
$al524 = L[214];
if(!(R.isFunction(anf_fun528))) {
R.ffi.throwNonFunApp($al524,anf_fun528);
}
$ans523 = anf_fun528.app(("reference update expression"),anf_arg530);
break;
case 3: var anf_arg545 = $ans523;
$al524 = L[206];
var anf_method_obj537 = G(ED5,"para",L[206]);
$step517 = 4;
$al524 = L[207];
$field531 = R.getColonFieldLoc(ED5,"text",L[207]);
if(R.isMethod($field531)) {
$ans523 = $field531.full_meth(ED5,("The field "));
} else {
if(!(R.isFunction($field531))) {
R.ffi.throwNonFunApp(L[207],$field531);
}
$ans523 = $field531.app(("The field "));
}
break;
case 4: var anf_arg538 = $ans523;
$al524 = L[208];
var anf_arg532 = G(self519,"field",L[208]);
$step517 = 5;
$al524 = L[209];
$field533 = R.getColonFieldLoc(ED5,"text",L[209]);
if(R.isMethod($field533)) {
$ans523 = $field533.full_meth(ED5,anf_arg532);
} else {
if(!(R.isFunction($field533))) {
R.ffi.throwNonFunApp(L[209],$field533);
}
$ans523 = $field533.app(anf_arg532);
}
break;
case 5: var anf_arg534 = $ans523;
$step517 = 6;
$al524 = L[210];
$field535 = R.getColonFieldLoc(ED5,"code",L[210]);
if(R.isMethod($field535)) {
$ans523 = $field535.full_meth(ED5,anf_arg534);
} else {
if(!(R.isFunction($field535))) {
R.ffi.throwNonFunApp(L[210],$field535);
}
$ans523 = $field535.app(anf_arg534);
}
break;
case 6: var anf_arg539 = $ans523;
$step517 = 7;
$al524 = L[211];
$field536 = R.getColonFieldLoc(ED5,"text",L[211]);
if(R.isMethod($field536)) {
$ans523 = $field536.full_meth(ED5,(" does not exist in the object:"));
} else {
if(!(R.isFunction($field536))) {
R.ffi.throwNonFunApp(L[211],$field536);
}
$ans523 = $field536.app((" does not exist in the object:"));
}
break;
case 7: var anf_arg540 = $ans523;
$step517 = 8;
$al524 = L[206];
$field541 = R.getColonFieldLoc(anf_method_obj537,"make3",L[206]);
if(R.isMethod($field541)) {
$ans523 = $field541.full_meth(anf_method_obj537,anf_arg538,anf_arg539,anf_arg540);
} else {
if(!(R.isFunction($field541))) {
R.ffi.throwNonFunApp(L[206],$field541);
}
$ans523 = $field541.app(anf_arg538,anf_arg539,anf_arg540);
}
break;
case 8: var anf_arg547 = $ans523;
$al524 = L[212];
var anf_arg542 = G(self519,"obj",L[212]);
$step517 = 9;
$al524 = L[213];
$field543 = R.getColonFieldLoc(ED5,"embed",L[213]);
if(R.isMethod($field543)) {
$ans523 = $field543.full_meth(ED5,anf_arg542);
} else {
if(!(R.isFunction($field543))) {
R.ffi.throwNonFunApp(L[213],$field543);
}
$ans523 = $field543.app(anf_arg542);
}
break;
case 9: var anf_arg548 = $ans523;
$step517 = 23;
$al524 = L[204];
$field549 = R.getColonFieldLoc(anf_method_obj544,"make3",L[204]);
if(R.isMethod($field549)) {
$ans523 = $field549.full_meth(anf_method_obj544,anf_arg545,anf_arg547,anf_arg548);
} else {
if(!(R.isFunction($field549))) {
R.ffi.throwNonFunApp(L[204],$field549);
}
$ans523 = $field549.app(anf_arg545,anf_arg547,anf_arg548);
}
break;
case 10: $al524 = L[215];
var anf_method_obj581 = G(ED5,"error",L[215]);
var anf_fun550 = ed$intro122.$var;
$al524 = L[216];
var anf_arg551 = G(self519,"loc",L[216]);
$step517 = 11;
$al524 = L[232];
if(!(R.isFunction(anf_fun550))) {
R.ffi.throwNonFunApp($al524,anf_fun550);
}
$ans523 = anf_fun550.app(("reference update expression"),anf_arg551,(-1),(true));
break;
case 11: var anf_arg582 = $ans523;
$al524 = L[217];
var anf_arg552 = G(self519,"loc",L[217]);
$step517 = 12;
$al524 = L[218];
$field553 = R.getColonFieldLoc(ED5,"cmcode",L[218]);
if(R.isMethod($field553)) {
$ans523 = $field553.full_meth(ED5,anf_arg552);
} else {
if(!(R.isFunction($field553))) {
R.ffi.throwNonFunApp(L[218],$field553);
}
$ans523 = $field553.app(anf_arg552);
}
break;
case 12: var anf_arg583 = $ans523;
$al524 = L[219];
var anf_method_obj571 = G(ED5,"para",L[219]);
$step517 = 13;
$al524 = L[220];
$field554 = R.getColonFieldLoc(ED5,"text",L[220]);
if(R.isMethod($field554)) {
$ans523 = $field554.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field554))) {
R.ffi.throwNonFunApp(L[220],$field554);
}
$ans523 = $field554.app(("The "));
}
break;
case 13: var anf_arg572 = $ans523;
$step517 = 14;
$al524 = L[221];
$field555 = R.getColonFieldLoc(ED5,"text",L[221]);
if(R.isMethod($field555)) {
$ans523 = $field555.full_meth(ED5,("field"));
} else {
if(!(R.isFunction($field555))) {
R.ffi.throwNonFunApp(L[221],$field555);
}
$ans523 = $field555.app(("field"));
}
break;
case 14: var anf_arg559 = $ans523;
$al524 = L[222];
var anf_method_obj556 = G(ED5,"locs",L[222]);
$al524 = L[223];
var anf_arg557 = G(self519,"fieldloc",L[223]);
$step517 = 15;
$al524 = L[222];
$field558 = R.getColonFieldLoc(anf_method_obj556,"make1",L[222]);
if(R.isMethod($field558)) {
$ans523 = $field558.full_meth(anf_method_obj556,anf_arg557);
} else {
if(!(R.isFunction($field558))) {
R.ffi.throwNonFunApp(L[222],$field558);
}
$ans523 = $field558.app(anf_arg557);
}
break;
case 15: var anf_arg560 = $ans523;
$step517 = 16;
$al524 = L[224];
$field561 = R.getColonFieldLoc(ED5,"highlight",L[224]);
if(R.isMethod($field561)) {
$ans523 = $field561.full_meth(ED5,anf_arg559,anf_arg560,(0));
} else {
if(!(R.isFunction($field561))) {
R.ffi.throwNonFunApp(L[224],$field561);
}
$ans523 = $field561.app(anf_arg559,anf_arg560,(0));
}
break;
case 16: var anf_arg573 = $ans523;
$step517 = 17;
$al524 = L[225];
$field563 = R.getColonFieldLoc(ED5,"text",L[225]);
if(R.isMethod($field563)) {
$ans523 = $field563.full_meth(ED5,(" does not exist in the "));
} else {
if(!(R.isFunction($field563))) {
R.ffi.throwNonFunApp(L[225],$field563);
}
$ans523 = $field563.app((" does not exist in the "));
}
break;
case 17: var anf_arg575 = $ans523;
$step517 = 18;
$al524 = L[226];
$field564 = R.getColonFieldLoc(ED5,"text",L[226]);
if(R.isMethod($field564)) {
$ans523 = $field564.full_meth(ED5,("object:"));
} else {
if(!(R.isFunction($field564))) {
R.ffi.throwNonFunApp(L[226],$field564);
}
$ans523 = $field564.app(("object:"));
}
break;
case 18: var anf_arg568 = $ans523;
$al524 = L[227];
var anf_method_obj565 = G(ED5,"locs",L[227]);
$al524 = L[228];
var anf_arg566 = G(self519,"objloc",L[228]);
$step517 = 19;
$al524 = L[227];
$field567 = R.getColonFieldLoc(anf_method_obj565,"make1",L[227]);
if(R.isMethod($field567)) {
$ans523 = $field567.full_meth(anf_method_obj565,anf_arg566);
} else {
if(!(R.isFunction($field567))) {
R.ffi.throwNonFunApp(L[227],$field567);
}
$ans523 = $field567.app(anf_arg566);
}
break;
case 19: var anf_arg569 = $ans523;
$step517 = 20;
$al524 = L[229];
$field570 = R.getColonFieldLoc(ED5,"highlight",L[229]);
if(R.isMethod($field570)) {
$ans523 = $field570.full_meth(ED5,anf_arg568,anf_arg569,(1));
} else {
if(!(R.isFunction($field570))) {
R.ffi.throwNonFunApp(L[229],$field570);
}
$ans523 = $field570.app(anf_arg568,anf_arg569,(1));
}
break;
case 20: var anf_arg577 = $ans523;
$step517 = 21;
$al524 = L[219];
$field578 = R.getColonFieldLoc(anf_method_obj571,"make4",L[219]);
if(R.isMethod($field578)) {
$ans523 = $field578.full_meth(anf_method_obj571,anf_arg572,anf_arg573,anf_arg575,anf_arg577);
} else {
if(!(R.isFunction($field578))) {
R.ffi.throwNonFunApp(L[219],$field578);
}
$ans523 = $field578.app(anf_arg572,anf_arg573,anf_arg575,anf_arg577);
}
break;
case 21: var anf_arg584 = $ans523;
$al524 = L[230];
var anf_arg579 = G(self519,"obj",L[230]);
$step517 = 22;
$al524 = L[231];
$field580 = R.getColonFieldLoc(ED5,"embed",L[231]);
if(R.isMethod($field580)) {
$ans523 = $field580.full_meth(ED5,anf_arg579);
} else {
if(!(R.isFunction($field580))) {
R.ffi.throwNonFunApp(L[231],$field580);
}
$ans523 = $field580.app(anf_arg579);
}
break;
case 22: var anf_arg585 = $ans523;
$step517 = 23;
$al524 = L[215];
$field586 = R.getColonFieldLoc(anf_method_obj581,"make4",L[215]);
if(R.isMethod($field586)) {
$ans523 = $field586.full_meth(anf_method_obj581,anf_arg582,anf_arg583,anf_arg584,anf_arg585);
} else {
if(!(R.isFunction($field586))) {
R.ffi.throwNonFunApp(L[215],$field586);
}
$ans523 = $field586.app(anf_arg582,anf_arg583,anf_arg584,anf_arg585);
}
break;
case 23: ++R.GAS;
return $ans523;
default: throw "No case numbered " + $step517 + " in $temp_full518";
}
}
} catch($e588) {
if(R.isCont($e588) && ($step517 !== 23)) {
$e588.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al524,$temp_full518,$step517,[self519,maybe$stack$loc520,src$available521,maybe$ast522],[anf_method_obj544,anf_arg545,anf_method_obj537,anf_arg538,anf_arg539,anf_arg547,anf_method_obj581,anf_arg582,anf_arg583,anf_method_obj571,anf_arg572,anf_arg559,anf_arg573,anf_arg575,anf_arg568,anf_arg584]);
}
if(R.isPyretException($e588)) {
$e588.pyretStack.push($al524);
}
throw $e588;
}
};
var anf_variant_member6144 = R.makeMethod3($temp_full518,"render-fancy-reason");
var $temp_full590 = function($self591) {
var $step589 = 0;
var $ans592 = D;
var $al593 = L[245];
try {
if(R.isActivationRecord($self591)) {
$step589 = $self591.step;
$al593 = $self591.from;
$ans592 = $self591.ans;
self591 = $self591.args[0];
anf_method_obj610 = $self591.vars[0];
anf_arg611 = $self591.vars[1];
anf_method_obj603 = $self591.vars[2];
anf_arg604 = $self591.vars[3];
anf_arg605 = $self591.vars[4];
anf_arg612 = $self591.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[245],1,$t);
}
var self591 = $self591;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step589) {
case 0: $al593 = L[234];
var anf_method_obj610 = G(ED5,"error",L[234]);
var anf_fun594 = ed$simple$intro95.$var;
$al593 = L[235];
var anf_arg595 = G(self591,"loc",L[235]);
$step589 = 1;
$al593 = L[244];
if(!(R.isFunction(anf_fun594))) {
R.ffi.throwNonFunApp($al593,anf_fun594);
}
$ans592 = anf_fun594.app(("reference update expression"),anf_arg595);
break;
case 1: var anf_arg611 = $ans592;
$al593 = L[236];
var anf_method_obj603 = G(ED5,"para",L[236]);
$step589 = 2;
$al593 = L[237];
$field596 = R.getColonFieldLoc(ED5,"text",L[237]);
if(R.isMethod($field596)) {
$ans592 = $field596.full_meth(ED5,("The field "));
} else {
if(!(R.isFunction($field596))) {
R.ffi.throwNonFunApp(L[237],$field596);
}
$ans592 = $field596.app(("The field "));
}
break;
case 2: var anf_arg604 = $ans592;
$al593 = L[238];
var anf_arg597 = G(self591,"field",L[238]);
$step589 = 3;
$al593 = L[239];
$field599 = R.getColonFieldLoc(ED5,"text",L[239]);
if(R.isMethod($field599)) {
$ans592 = $field599.full_meth(ED5,anf_arg597);
} else {
if(!(R.isFunction($field599))) {
R.ffi.throwNonFunApp(L[239],$field599);
}
$ans592 = $field599.app(anf_arg597);
}
break;
case 3: var anf_arg600 = $ans592;
$step589 = 4;
$al593 = L[240];
$field601 = R.getColonFieldLoc(ED5,"code",L[240]);
if(R.isMethod($field601)) {
$ans592 = $field601.full_meth(ED5,anf_arg600);
} else {
if(!(R.isFunction($field601))) {
R.ffi.throwNonFunApp(L[240],$field601);
}
$ans592 = $field601.app(anf_arg600);
}
break;
case 4: var anf_arg605 = $ans592;
$step589 = 5;
$al593 = L[241];
$field602 = R.getColonFieldLoc(ED5,"text",L[241]);
if(R.isMethod($field602)) {
$ans592 = $field602.full_meth(ED5,(" does not exist in the object:"));
} else {
if(!(R.isFunction($field602))) {
R.ffi.throwNonFunApp(L[241],$field602);
}
$ans592 = $field602.app((" does not exist in the object:"));
}
break;
case 5: var anf_arg606 = $ans592;
$step589 = 6;
$al593 = L[236];
$field607 = R.getColonFieldLoc(anf_method_obj603,"make3",L[236]);
if(R.isMethod($field607)) {
$ans592 = $field607.full_meth(anf_method_obj603,anf_arg604,anf_arg605,anf_arg606);
} else {
if(!(R.isFunction($field607))) {
R.ffi.throwNonFunApp(L[236],$field607);
}
$ans592 = $field607.app(anf_arg604,anf_arg605,anf_arg606);
}
break;
case 6: var anf_arg612 = $ans592;
$al593 = L[242];
var anf_arg608 = G(self591,"obj",L[242]);
$step589 = 7;
$al593 = L[243];
$field609 = R.getColonFieldLoc(ED5,"embed",L[243]);
if(R.isMethod($field609)) {
$ans592 = $field609.full_meth(ED5,anf_arg608);
} else {
if(!(R.isFunction($field609))) {
R.ffi.throwNonFunApp(L[243],$field609);
}
$ans592 = $field609.app(anf_arg608);
}
break;
case 7: var anf_arg614 = $ans592;
$step589 = 8;
$al593 = L[234];
$field615 = R.getColonFieldLoc(anf_method_obj610,"make3",L[234]);
if(R.isMethod($field615)) {
$ans592 = $field615.full_meth(anf_method_obj610,anf_arg611,anf_arg612,anf_arg614);
} else {
if(!(R.isFunction($field615))) {
R.ffi.throwNonFunApp(L[234],$field615);
}
$ans592 = $field615.app(anf_arg611,anf_arg612,anf_arg614);
}
break;
case 8: ++R.GAS;
return $ans592;
default: throw "No case numbered " + $step589 + " in $temp_full590";
}
}
} catch($e617) {
if(R.isCont($e617) && ($step589 !== 8)) {
$e617.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al593,$temp_full590,$step589,[self591],[anf_method_obj610,anf_arg611,anf_method_obj603,anf_arg604,anf_arg605,anf_arg612]);
}
if(R.isPyretException($e617)) {
$e617.pyretStack.push($al593);
}
throw $e617;
}
};
var anf_variant_member6145 = R.makeMethod0($temp_full590,"render-reason");
var $temp_full619 = function($self620,$maybe$stack$loc621,$src$available622,$maybe$ast623) {
var $step618 = 0;
var $ans624 = D;
var $al625 = L[300];
try {
if(R.isActivationRecord($self620)) {
$step618 = $self620.step;
$al625 = $self620.from;
$ans624 = $self620.ans;
self620 = $self620.args[0];
maybe$stack$loc621 = $self620.args[1];
src$available622 = $self620.args[2];
maybe$ast623 = $self620.args[3];
anf_method_obj644 = $self620.vars[0];
anf_arg645 = $self620.vars[1];
anf_method_obj638 = $self620.vars[2];
anf_arg646 = $self620.vars[3];
cases653 = $self620.vars[4];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[300],4,$t);
}
var self620 = $self620;
var maybe$stack$loc621 = $maybe$stack$loc621;
var src$available622 = $src$available622;
var maybe$ast623 = $maybe$ast623;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step618) {
case 0: $al625 = L[246];
var anf_method_obj626 = G(self620,"loc",L[246]);
$step618 = 1;
$al625 = L[247];
$field627 = R.getColonFieldLoc(anf_method_obj626,"is-builtin",L[247]);
if(R.isMethod($field627)) {
$ans624 = $field627.full_meth(anf_method_obj626);
} else {
if(!(R.isFunction($field627))) {
R.ffi.throwNonFunApp(L[247],$field627);
}
$ans624 = $field627.app();
}
break;
case 1: var anf_arg628 = $ans624;
$al625 = L[247];
var anf_if764 = R.checkWrapBoolean(anf_arg628);
$step618 = R.isPyretTrue(anf_if764)?2:3;
break;
case 2: $step618 = 6;
$ans624 = (true);
break;
case 3: $al625 = L[248];
var anf_arg629 = G(self620,"loc",L[248]);
$step618 = 4;
$al625 = L[250];
if(!(R.isFunction(src$available622))) {
R.ffi.throwNonFunApp($al625,src$available622);
}
$ans624 = src$available622.app(anf_arg629);
break;
case 4: var anf_arg631 = $ans624;
$step618 = 5;
$al625 = L[249];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al625,not4);
}
$ans624 = not4.app(anf_arg631);
break;
case 5: var anf_arg633 = $ans624;
$step618 = 6;
$al625 = L[249];
$ans624 = R.checkWrapBoolean(anf_arg633);
break;
case 6: var anf_arg634 = $ans624;
$al625 = L[251];
var anf_if763 = R.checkWrapBoolean(anf_arg634);
$step618 = R.isPyretTrue(anf_if763)?7:12;
break;
case 7: $al625 = L[252];
var anf_method_obj644 = G(ED5,"error",L[252]);
var anf_fun635 = ed$simple$intro95.$var;
$al625 = L[253];
var anf_arg636 = G(self620,"loc",L[253]);
$step618 = 8;
$al625 = L[258];
if(!(R.isFunction(anf_fun635))) {
R.ffi.throwNonFunApp($al625,anf_fun635);
}
$ans624 = anf_fun635.app(("cases expression"),anf_arg636);
break;
case 8: var anf_arg645 = $ans624;
$al625 = L[254];
var anf_method_obj638 = G(ED5,"para",L[254]);
$step618 = 9;
$al625 = L[255];
$field637 = R.getColonFieldLoc(ED5,"text",L[255]);
if(R.isMethod($field637)) {
$ans624 = $field637.full_meth(ED5,("No branch matched the value:"));
} else {
if(!(R.isFunction($field637))) {
R.ffi.throwNonFunApp(L[255],$field637);
}
$ans624 = $field637.app(("No branch matched the value:"));
}
break;
case 9: var anf_arg640 = $ans624;
$step618 = 10;
$al625 = L[254];
$field641 = R.getColonFieldLoc(anf_method_obj638,"make1",L[254]);
if(R.isMethod($field641)) {
$ans624 = $field641.full_meth(anf_method_obj638,anf_arg640);
} else {
if(!(R.isFunction($field641))) {
R.ffi.throwNonFunApp(L[254],$field641);
}
$ans624 = $field641.app(anf_arg640);
}
break;
case 10: var anf_arg646 = $ans624;
$al625 = L[256];
var anf_arg642 = G(self620,"val",L[256]);
$step618 = 11;
$al625 = L[257];
$field643 = R.getColonFieldLoc(ED5,"embed",L[257]);
if(R.isMethod($field643)) {
$ans624 = $field643.full_meth(ED5,anf_arg642);
} else {
if(!(R.isFunction($field643))) {
R.ffi.throwNonFunApp(L[257],$field643);
}
$ans624 = $field643.app(anf_arg642);
}
break;
case 11: var anf_arg647 = $ans624;
$step618 = 21;
$al625 = L[252];
$field648 = R.getColonFieldLoc(anf_method_obj644,"make3",L[252]);
if(R.isMethod($field648)) {
$ans624 = $field648.full_meth(anf_method_obj644,anf_arg645,anf_arg646,anf_arg647);
} else {
if(!(R.isFunction($field648))) {
R.ffi.throwNonFunApp(L[252],$field648);
}
$ans624 = $field648.app(anf_arg645,anf_arg646,anf_arg647);
}
break;
case 12: $al625 = L[259];
var anf_arg649 = G(self620,"loc",L[259]);
$step618 = 13;
$al625 = L[260];
if(!(R.isFunction(src$available622))) {
R.ffi.throwNonFunApp($al625,src$available622);
}
$ans624 = src$available622.app(anf_arg649);
break;
case 13: var anf_arg650 = $ans624;
$al625 = L[260];
var anf_if762 = R.checkWrapBoolean(anf_arg650);
$step618 = R.isPyretTrue(anf_if762)?14:20;
break;
case 14: $al625 = L[261];
var anf_arg652 = G(self620,"loc",L[261]);
$step618 = 15;
$al625 = L[298];
if(!(R.isFunction(maybe$ast623))) {
R.ffi.throwNonFunApp($al625,maybe$ast623);
}
$ans624 = maybe$ast623.app(anf_arg652);
break;
case 15: var cases653 = $ans624;
$step618 = 16;
$al625 = L[297];
R._checkAnn(L[297],R.getDotAnn(L[297],"O",O13,"Option"),cases653);
break;
case 16: var $cases_dispatch761 = {"some":17,
"none":18};
$al625 = L[284];
$step618 = $cases_dispatch761[cases653.$name] || 19;
break;
case 17: if(cases653.$arity !== 1) {
if(cases653.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[283],1,cases653.$arity,L[284]);
} else {
R.ffi.throwCasesSingletonErrorC(L[283],true,L[284]);
}
}
$step618 = 21;
$al625 = L[285];
var $temp_branch703 = function($ast$cse661) {
var $step704 = 0;
var $ans705 = D;
var $al706 = L[262];
try {
if(R.isActivationRecord($ast$cse661)) {
$step704 = $ast$cse661.step;
$al706 = $ast$cse661.from;
$ans705 = $ast$cse661.ans;
ast$cse661 = $ast$cse661.args[0];
anf_method_obj696 = $ast$cse661.vars[0];
anf_arg698 = $ast$cse661.vars[1];
anf_arg699 = $ast$cse661.vars[2];
anf_method_obj686 = $ast$cse661.vars[3];
anf_arg687 = $ast$cse661.vars[4];
anf_arg671 = $ast$cse661.vars[5];
anf_arg688 = $ast$cse661.vars[6];
anf_arg689 = $ast$cse661.vars[7];
anf_arg681 = $ast$cse661.vars[8];
anf_arg690 = $ast$cse661.vars[9];
anf_arg700 = $ast$cse661.vars[10];
} else {
var ast$cse661 = $ast$cse661;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step704) {
case 0: $al706 = L[262];
var anf_method_obj696 = G(ED5,"error",L[262]);
var anf_fun655 = ed$intro122.$var;
$al706 = L[263];
var anf_arg656 = G(self620,"loc",L[263]);
$step704 = 1;
$al706 = L[282];
if(!(R.isFunction(anf_fun655))) {
R.ffi.throwNonFunApp($al706,anf_fun655);
}
$ans705 = anf_fun655.app(("cases expression"),anf_arg656,(-1),(true));
break;
case 1: var anf_arg698 = $ans705;
$al706 = L[264];
var anf_arg657 = G(self620,"loc",L[264]);
$step704 = 2;
$al706 = L[265];
$field707 = R.getColonFieldLoc(ED5,"cmcode",L[265]);
if(R.isMethod($field707)) {
$ans705 = $field707.full_meth(ED5,anf_arg657);
} else {
if(!(R.isFunction($field707))) {
R.ffi.throwNonFunApp(L[265],$field707);
}
$ans705 = $field707.app(anf_arg657);
}
break;
case 2: var anf_arg699 = $ans705;
$al706 = L[266];
var anf_method_obj686 = G(ED5,"para",L[266]);
$step704 = 3;
$al706 = L[267];
$field709 = R.getColonFieldLoc(ED5,"text",L[267]);
if(R.isMethod($field709)) {
$ans705 = $field709.full_meth(ED5,("None of the "));
} else {
if(!(R.isFunction($field709))) {
R.ffi.throwNonFunApp(L[267],$field709);
}
$ans705 = $field709.app(("None of the "));
}
break;
case 3: var anf_arg687 = $ans705;
$step704 = 4;
$al706 = L[268];
$field710 = R.getColonFieldLoc(ED5,"text",L[268]);
if(R.isMethod($field710)) {
$ans705 = $field710.full_meth(ED5,("branch patterns"));
} else {
if(!(R.isFunction($field710))) {
R.ffi.throwNonFunApp(L[268],$field710);
}
$ans705 = $field710.app(("branch patterns"));
}
break;
case 4: var anf_arg671 = $ans705;
$al706 = L[269];
var anf_method_obj668 = G(ast$cse661,"branches",L[269]);
var $temp_lam712 = function($recv_664) {
var $step711 = 0;
var $ans713 = D;
var $al714 = L[270];
try {
if(R.isActivationRecord($recv_664)) {
$step711 = $recv_664.step;
$al714 = $recv_664.from;
$ans713 = $recv_664.ans;
recv_664 = $recv_664.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[270],1,$t);
}
var recv_664 = $recv_664;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step711) {
case 0: $step711 = 1;
$al714 = L[270];
$ans713 = G(recv_664,"pat-loc",L[270]);
break;
case 1: ++R.GAS;
return $ans713;
default: throw "No case numbered " + $step711 + " in $temp_lam712";
}
}
} catch($e715) {
if(R.isCont($e715) && ($step711 !== 1)) {
$e715.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al714,$temp_lam712,$step711,[recv_664],[]);
}
if(R.isPyretException($e715)) {
$e715.pyretStack.push($al714);
}
throw $e715;
}
};
var anf_arg669 = R.makeFunction($temp_lam712,"");
$step704 = 5;
$al706 = L[271];
$field716 = R.getColonFieldLoc(anf_method_obj668,"map",L[271]);
if(R.isMethod($field716)) {
$ans705 = $field716.full_meth(anf_method_obj668,anf_arg669);
} else {
if(!(R.isFunction($field716))) {
R.ffi.throwNonFunApp(L[271],$field716);
}
$ans705 = $field716.app(anf_arg669);
}
break;
case 5: var anf_arg672 = $ans705;
$step704 = 6;
$al706 = L[272];
$field717 = R.getColonFieldLoc(ED5,"highlight",L[272]);
if(R.isMethod($field717)) {
$ans705 = $field717.full_meth(ED5,anf_arg671,anf_arg672,(0));
} else {
if(!(R.isFunction($field717))) {
R.ffi.throwNonFunApp(L[272],$field717);
}
$ans705 = $field717.app(anf_arg671,anf_arg672,(0));
}
break;
case 6: var anf_arg688 = $ans705;
$step704 = 7;
$al706 = L[273];
$field718 = R.getColonFieldLoc(ED5,"text",L[273]);
if(R.isMethod($field718)) {
$ans705 = $field718.full_meth(ED5,(" matched the value of the "));
} else {
if(!(R.isFunction($field718))) {
R.ffi.throwNonFunApp(L[273],$field718);
}
$ans705 = $field718.app((" matched the value of the "));
}
break;
case 7: var anf_arg689 = $ans705;
$step704 = 8;
$al706 = L[274];
$field719 = R.getColonFieldLoc(ED5,"text",L[274]);
if(R.isMethod($field719)) {
$ans705 = $field719.full_meth(ED5,("argument"));
} else {
if(!(R.isFunction($field719))) {
R.ffi.throwNonFunApp(L[274],$field719);
}
$ans705 = $field719.app(("argument"));
}
break;
case 8: var anf_arg681 = $ans705;
$al706 = L[275];
var anf_method_obj677 = G(ED5,"locs",L[275]);
$al706 = L[276];
var anf_bracket676 = G(ast$cse661,"val",L[276]);
$al706 = L[277];
var anf_arg679 = G(anf_bracket676,"l",L[277]);
$step704 = 9;
$al706 = L[275];
$field720 = R.getColonFieldLoc(anf_method_obj677,"make1",L[275]);
if(R.isMethod($field720)) {
$ans705 = $field720.full_meth(anf_method_obj677,anf_arg679);
} else {
if(!(R.isFunction($field720))) {
R.ffi.throwNonFunApp(L[275],$field720);
}
$ans705 = $field720.app(anf_arg679);
}
break;
case 9: var anf_arg683 = $ans705;
$step704 = 10;
$al706 = L[278];
$field721 = R.getColonFieldLoc(ED5,"highlight",L[278]);
if(R.isMethod($field721)) {
$ans705 = $field721.full_meth(ED5,anf_arg681,anf_arg683,(1));
} else {
if(!(R.isFunction($field721))) {
R.ffi.throwNonFunApp(L[278],$field721);
}
$ans705 = $field721.app(anf_arg681,anf_arg683,(1));
}
break;
case 10: var anf_arg690 = $ans705;
$step704 = 11;
$al706 = L[279];
$field722 = R.getColonFieldLoc(ED5,"text",L[279]);
if(R.isMethod($field722)) {
$ans705 = $field722.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field722))) {
R.ffi.throwNonFunApp(L[279],$field722);
}
$ans705 = $field722.app((":"));
}
break;
case 11: var anf_arg691 = $ans705;
$step704 = 12;
$al706 = L[266];
$field723 = R.getColonFieldLoc(anf_method_obj686,"make5",L[266]);
if(R.isMethod($field723)) {
$ans705 = $field723.full_meth(anf_method_obj686,anf_arg687,anf_arg688,anf_arg689,anf_arg690,anf_arg691);
} else {
if(!(R.isFunction($field723))) {
R.ffi.throwNonFunApp(L[266],$field723);
}
$ans705 = $field723.app(anf_arg687,anf_arg688,anf_arg689,anf_arg690,anf_arg691);
}
break;
case 12: var anf_arg700 = $ans705;
$al706 = L[280];
var anf_arg694 = G(self620,"val",L[280]);
$step704 = 13;
$al706 = L[281];
$field724 = R.getColonFieldLoc(ED5,"embed",L[281]);
if(R.isMethod($field724)) {
$ans705 = $field724.full_meth(ED5,anf_arg694);
} else {
if(!(R.isFunction($field724))) {
R.ffi.throwNonFunApp(L[281],$field724);
}
$ans705 = $field724.app(anf_arg694);
}
break;
case 13: var anf_arg701 = $ans705;
$step704 = 14;
$al706 = L[262];
$field725 = R.getColonFieldLoc(anf_method_obj696,"make4",L[262]);
if(R.isMethod($field725)) {
$ans705 = $field725.full_meth(anf_method_obj696,anf_arg698,anf_arg699,anf_arg700,anf_arg701);
} else {
if(!(R.isFunction($field725))) {
R.ffi.throwNonFunApp(L[262],$field725);
}
$ans705 = $field725.app(anf_arg698,anf_arg699,anf_arg700,anf_arg701);
}
break;
case 14: ++R.GAS;
return $ans705;
default: throw "No case numbered " + $step704 + " in $temp_branch703";
}
}
} catch($e726) {
if(R.isCont($e726) && ($step704 !== 14)) {
$e726.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al706,$temp_branch703,$step704,[ast$cse661],[anf_method_obj696,anf_arg698,anf_arg699,anf_method_obj686,anf_arg687,anf_arg671,anf_arg688,anf_arg689,anf_arg681,anf_arg690,anf_arg700]);
}
if(R.isPyretException($e726)) {
$e726.pyretStack.push($al706);
}
throw $e726;
}
};
$ans624 = cases653.$app_fields($temp_branch703,[false]);
break;
case 18: if(cases653.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[295],false,L[284]);
}
$step618 = 21;
$al625 = L[296];
var $temp_branch751 = function($$resumer101) {
var $step752 = 0;
var $ans753 = D;
var $al754 = L[286];
try {
if(R.isActivationRecord($$resumer101)) {
$step752 = $$resumer101.step;
$al754 = $$resumer101.from;
$ans753 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj741 = $$resumer101.vars[0];
anf_arg742 = $$resumer101.vars[1];
anf_arg743 = $$resumer101.vars[2];
anf_method_obj736 = $$resumer101.vars[3];
anf_arg745 = $$resumer101.vars[4];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step752) {
case 0: $al754 = L[286];
var anf_method_obj741 = G(ED5,"error",L[286]);
var anf_fun728 = ed$intro122.$var;
$al754 = L[287];
var anf_arg729 = G(self620,"loc",L[287]);
$step752 = 1;
$al754 = L[294];
if(!(R.isFunction(anf_fun728))) {
R.ffi.throwNonFunApp($al754,anf_fun728);
}
$ans753 = anf_fun728.app(("cases expression"),anf_arg729,(0),(true));
break;
case 1: var anf_arg742 = $ans753;
$al754 = L[288];
var anf_arg733 = G(self620,"loc",L[288]);
$step752 = 2;
$al754 = L[289];
$field755 = R.getColonFieldLoc(ED5,"cmcode",L[289]);
if(R.isMethod($field755)) {
$ans753 = $field755.full_meth(ED5,anf_arg733);
} else {
if(!(R.isFunction($field755))) {
R.ffi.throwNonFunApp(L[289],$field755);
}
$ans753 = $field755.app(anf_arg733);
}
break;
case 2: var anf_arg743 = $ans753;
$al754 = L[290];
var anf_method_obj736 = G(ED5,"para",L[290]);
$step752 = 3;
$al754 = L[291];
$field756 = R.getColonFieldLoc(ED5,"text",L[291]);
if(R.isMethod($field756)) {
$ans753 = $field756.full_meth(ED5,("No branch matched the value of the argument:"));
} else {
if(!(R.isFunction($field756))) {
R.ffi.throwNonFunApp(L[291],$field756);
}
$ans753 = $field756.app(("No branch matched the value of the argument:"));
}
break;
case 3: var anf_arg737 = $ans753;
$step752 = 4;
$al754 = L[290];
$field757 = R.getColonFieldLoc(anf_method_obj736,"make1",L[290]);
if(R.isMethod($field757)) {
$ans753 = $field757.full_meth(anf_method_obj736,anf_arg737);
} else {
if(!(R.isFunction($field757))) {
R.ffi.throwNonFunApp(L[290],$field757);
}
$ans753 = $field757.app(anf_arg737);
}
break;
case 4: var anf_arg745 = $ans753;
$al754 = L[292];
var anf_arg739 = G(self620,"val",L[292]);
$step752 = 5;
$al754 = L[293];
$field758 = R.getColonFieldLoc(ED5,"embed",L[293]);
if(R.isMethod($field758)) {
$ans753 = $field758.full_meth(ED5,anf_arg739);
} else {
if(!(R.isFunction($field758))) {
R.ffi.throwNonFunApp(L[293],$field758);
}
$ans753 = $field758.app(anf_arg739);
}
break;
case 5: var anf_arg749 = $ans753;
$step752 = 6;
$al754 = L[286];
$field759 = R.getColonFieldLoc(anf_method_obj741,"make4",L[286]);
if(R.isMethod($field759)) {
$ans753 = $field759.full_meth(anf_method_obj741,anf_arg742,anf_arg743,anf_arg745,anf_arg749);
} else {
if(!(R.isFunction($field759))) {
R.ffi.throwNonFunApp(L[286],$field759);
}
$ans753 = $field759.app(anf_arg742,anf_arg743,anf_arg745,anf_arg749);
}
break;
case 6: ++R.GAS;
return $ans753;
default: throw "No case numbered " + $step752 + " in $temp_branch751";
}
}
} catch($e760) {
if(R.isCont($e760) && ($step752 !== 6)) {
$e760.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al754,$temp_branch751,$step752,[],[anf_method_obj741,anf_arg742,anf_arg743,anf_method_obj736,anf_arg745]);
}
if(R.isPyretException($e760)) {
$e760.pyretStack.push($al754);
}
throw $e760;
}
};
$ans624 = cases653.$app_fields($temp_branch751,[]);
break;
case 19: $step618 = 21;
$al625 = L[284];
$ans624 = R.throwNoCasesMatched(L[284],cases653);
break;
case 20: $step618 = 21;
$al625 = L[299];
$ans624 = R.throwNoBranchesMatched(L[299],("if"));
break;
case 21: ++R.GAS;
return $ans624;
default: throw "No case numbered " + $step618 + " in $temp_full619";
}
}
} catch($e765) {
if(R.isCont($e765) && ($step618 !== 21)) {
$e765.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al625,$temp_full619,$step618,[self620,maybe$stack$loc621,src$available622,maybe$ast623],[anf_method_obj644,anf_arg645,anf_method_obj638,anf_arg646,cases653]);
}
if(R.isPyretException($e765)) {
$e765.pyretStack.push($al625);
}
throw $e765;
}
};
var anf_variant_member6158 = R.makeMethod3($temp_full619,"render-fancy-reason");
var $temp_full767 = function($self768) {
var $step766 = 0;
var $ans769 = D;
var $al770 = L[308];
try {
if(R.isActivationRecord($self768)) {
$step766 = $self768.step;
$al770 = $self768.from;
$ans769 = $self768.ans;
self768 = $self768.args[0];
anf_method_obj779 = $self768.vars[0];
anf_arg781 = $self768.vars[1];
anf_method_obj774 = $self768.vars[2];
anf_arg782 = $self768.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[308],1,$t);
}
var self768 = $self768;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step766) {
case 0: $al770 = L[301];
var anf_method_obj779 = G(ED5,"error",L[301]);
var anf_fun771 = ed$simple$intro95.$var;
$al770 = L[302];
var anf_arg772 = G(self768,"loc",L[302]);
$step766 = 1;
$al770 = L[307];
if(!(R.isFunction(anf_fun771))) {
R.ffi.throwNonFunApp($al770,anf_fun771);
}
$ans769 = anf_fun771.app(("cases expression"),anf_arg772);
break;
case 1: var anf_arg781 = $ans769;
$al770 = L[303];
var anf_method_obj774 = G(ED5,"para",L[303]);
$step766 = 2;
$al770 = L[304];
$field773 = R.getColonFieldLoc(ED5,"text",L[304]);
if(R.isMethod($field773)) {
$ans769 = $field773.full_meth(ED5,("No branch matched the value:"));
} else {
if(!(R.isFunction($field773))) {
R.ffi.throwNonFunApp(L[304],$field773);
}
$ans769 = $field773.app(("No branch matched the value:"));
}
break;
case 2: var anf_arg775 = $ans769;
$step766 = 3;
$al770 = L[303];
$field776 = R.getColonFieldLoc(anf_method_obj774,"make1",L[303]);
if(R.isMethod($field776)) {
$ans769 = $field776.full_meth(anf_method_obj774,anf_arg775);
} else {
if(!(R.isFunction($field776))) {
R.ffi.throwNonFunApp(L[303],$field776);
}
$ans769 = $field776.app(anf_arg775);
}
break;
case 3: var anf_arg782 = $ans769;
$al770 = L[305];
var anf_arg777 = G(self768,"val",L[305]);
$step766 = 4;
$al770 = L[306];
$field778 = R.getColonFieldLoc(ED5,"embed",L[306]);
if(R.isMethod($field778)) {
$ans769 = $field778.full_meth(ED5,anf_arg777);
} else {
if(!(R.isFunction($field778))) {
R.ffi.throwNonFunApp(L[306],$field778);
}
$ans769 = $field778.app(anf_arg777);
}
break;
case 4: var anf_arg783 = $ans769;
$step766 = 5;
$al770 = L[301];
$field784 = R.getColonFieldLoc(anf_method_obj779,"make3",L[301]);
if(R.isMethod($field784)) {
$ans769 = $field784.full_meth(anf_method_obj779,anf_arg781,anf_arg782,anf_arg783);
} else {
if(!(R.isFunction($field784))) {
R.ffi.throwNonFunApp(L[301],$field784);
}
$ans769 = $field784.app(anf_arg781,anf_arg782,anf_arg783);
}
break;
case 5: ++R.GAS;
return $ans769;
default: throw "No case numbered " + $step766 + " in $temp_full767";
}
}
} catch($e785) {
if(R.isCont($e785) && ($step766 !== 5)) {
$e785.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al770,$temp_full767,$step766,[self768],[anf_method_obj779,anf_arg781,anf_method_obj774,anf_arg782]);
}
if(R.isPyretException($e785)) {
$e785.pyretStack.push($al770);
}
throw $e785;
}
};
var anf_variant_member6159 = R.makeMethod0($temp_full767,"render-reason");
var $temp_full788 = function($self789,$maybe$stack$loc790,$src$available791,$maybe$ast792) {
var $step787 = 0;
var $ans793 = D;
var $al794 = L[331];
try {
if(R.isActivationRecord($self789)) {
$step787 = $self789.step;
$al794 = $self789.from;
$ans793 = $self789.ans;
self789 = $self789.args[0];
maybe$stack$loc790 = $self789.args[1];
src$available791 = $self789.args[2];
maybe$ast792 = $self789.args[3];
anf_method_obj815 = $self789.vars[0];
anf_fun803 = $self789.vars[1];
anf_arg816 = $self789.vars[2];
anf_arg817 = $self789.vars[3];
anf_method_obj809 = $self789.vars[4];
anf_method_obj829 = $self789.vars[5];
anf_fun821 = $self789.vars[6];
anf_arg831 = $self789.vars[7];
anf_method_obj825 = $self789.vars[8];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[331],4,$t);
}
var self789 = $self789;
var maybe$stack$loc790 = $maybe$stack$loc790;
var src$available791 = $src$available791;
var maybe$ast792 = $maybe$ast792;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step787) {
case 0: $al794 = L[309];
var anf_method_obj795 = G(self789,"loc",L[309]);
$step787 = 1;
$al794 = L[310];
$field796 = R.getColonFieldLoc(anf_method_obj795,"is-builtin",L[310]);
if(R.isMethod($field796)) {
$ans793 = $field796.full_meth(anf_method_obj795);
} else {
if(!(R.isFunction($field796))) {
R.ffi.throwNonFunApp(L[310],$field796);
}
$ans793 = $field796.app();
}
break;
case 1: var anf_arg797 = $ans793;
$step787 = 2;
$al794 = L[311];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al794,not4);
}
$ans793 = not4.app(anf_arg797);
break;
case 2: var anf_arg798 = $ans793;
$al794 = L[311];
var anf_if836 = R.checkWrapBoolean(anf_arg798);
$step787 = R.isPyretTrue(anf_if836)?3:5;
break;
case 3: $al794 = L[312];
var anf_arg799 = G(self789,"loc",L[312]);
$step787 = 4;
$al794 = L[313];
if(!(R.isFunction(src$available791))) {
R.ffi.throwNonFunApp($al794,src$available791);
}
$ans793 = src$available791.app(anf_arg799);
break;
case 4: var anf_arg800 = $ans793;
$step787 = 6;
$al794 = L[313];
$ans793 = R.checkWrapBoolean(anf_arg800);
break;
case 5: $step787 = 6;
$ans793 = (false);
break;
case 6: var anf_arg801 = $ans793;
$al794 = L[314];
var anf_if835 = R.checkWrapBoolean(anf_arg801);
$step787 = R.isPyretTrue(anf_if835)?7:13;
break;
case 7: $al794 = L[315];
var anf_method_obj815 = G(ED5,"error",L[315]);
var anf_fun803 = ed$intro122.$var;
$al794 = L[316];
var anf_arg802 = G(self789,"expression",L[316]);
$step787 = 8;
$al794 = L[323];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al794,_plus1);
}
$ans793 = _plus1.app(anf_arg802,(" expression"));
break;
case 8: var anf_arg804 = $ans793;
$al794 = L[317];
var anf_arg805 = G(self789,"loc",L[317]);
$step787 = 9;
$al794 = L[322];
if(!(R.isFunction(anf_fun803))) {
R.ffi.throwNonFunApp($al794,anf_fun803);
}
$ans793 = anf_fun803.app(anf_arg804,anf_arg805,(0),(true));
break;
case 9: var anf_arg816 = $ans793;
$al794 = L[318];
var anf_arg806 = G(self789,"loc",L[318]);
$step787 = 10;
$al794 = L[319];
$field807 = R.getColonFieldLoc(ED5,"cmcode",L[319]);
if(R.isMethod($field807)) {
$ans793 = $field807.full_meth(ED5,anf_arg806);
} else {
if(!(R.isFunction($field807))) {
R.ffi.throwNonFunApp(L[319],$field807);
}
$ans793 = $field807.app(anf_arg806);
}
break;
case 10: var anf_arg817 = $ans793;
$al794 = L[320];
var anf_method_obj809 = G(ED5,"para",L[320]);
$step787 = 11;
$al794 = L[321];
$field808 = R.getColonFieldLoc(ED5,"text",L[321]);
if(R.isMethod($field808)) {
$ans793 = $field808.full_meth(ED5,("It expected that the condition of at least one branch be satisfied. No branch conditions were satisfied, so no branch could be entered."));
} else {
if(!(R.isFunction($field808))) {
R.ffi.throwNonFunApp(L[321],$field808);
}
$ans793 = $field808.app(("It expected that the condition of at least one branch be satisfied. No branch conditions were satisfied, so no branch could be entered."));
}
break;
case 11: var anf_arg813 = $ans793;
$step787 = 12;
$al794 = L[320];
$field814 = R.getColonFieldLoc(anf_method_obj809,"make1",L[320]);
if(R.isMethod($field814)) {
$ans793 = $field814.full_meth(anf_method_obj809,anf_arg813);
} else {
if(!(R.isFunction($field814))) {
R.ffi.throwNonFunApp(L[320],$field814);
}
$ans793 = $field814.app(anf_arg813);
}
break;
case 12: var anf_arg818 = $ans793;
$step787 = 18;
$al794 = L[315];
$field819 = R.getColonFieldLoc(anf_method_obj815,"make3",L[315]);
if(R.isMethod($field819)) {
$ans793 = $field819.full_meth(anf_method_obj815,anf_arg816,anf_arg817,anf_arg818);
} else {
if(!(R.isFunction($field819))) {
R.ffi.throwNonFunApp(L[315],$field819);
}
$ans793 = $field819.app(anf_arg816,anf_arg817,anf_arg818);
}
break;
case 13: $al794 = L[324];
var anf_method_obj829 = G(ED5,"error",L[324]);
var anf_fun821 = ed$simple$intro95.$var;
$al794 = L[325];
var anf_arg820 = G(self789,"expression",L[325]);
$step787 = 14;
$al794 = L[330];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al794,_plus1);
}
$ans793 = _plus1.app(anf_arg820,(" expression"));
break;
case 14: var anf_arg822 = $ans793;
$al794 = L[326];
var anf_arg823 = G(self789,"loc",L[326]);
$step787 = 15;
$al794 = L[329];
if(!(R.isFunction(anf_fun821))) {
R.ffi.throwNonFunApp($al794,anf_fun821);
}
$ans793 = anf_fun821.app(anf_arg822,anf_arg823);
break;
case 15: var anf_arg831 = $ans793;
$al794 = L[327];
var anf_method_obj825 = G(ED5,"para",L[327]);
$step787 = 16;
$al794 = L[328];
$field824 = R.getColonFieldLoc(ED5,"text",L[328]);
if(R.isMethod($field824)) {
$ans793 = $field824.full_meth(ED5,("It expected that the condition of at least one branch be satisfied. No branch conditions were satisfied, so no branch could be entered."));
} else {
if(!(R.isFunction($field824))) {
R.ffi.throwNonFunApp(L[328],$field824);
}
$ans793 = $field824.app(("It expected that the condition of at least one branch be satisfied. No branch conditions were satisfied, so no branch could be entered."));
}
break;
case 16: var anf_arg827 = $ans793;
$step787 = 17;
$al794 = L[327];
$field828 = R.getColonFieldLoc(anf_method_obj825,"make1",L[327]);
if(R.isMethod($field828)) {
$ans793 = $field828.full_meth(anf_method_obj825,anf_arg827);
} else {
if(!(R.isFunction($field828))) {
R.ffi.throwNonFunApp(L[327],$field828);
}
$ans793 = $field828.app(anf_arg827);
}
break;
case 17: var anf_arg833 = $ans793;
$step787 = 18;
$al794 = L[324];
$field834 = R.getColonFieldLoc(anf_method_obj829,"make2",L[324]);
if(R.isMethod($field834)) {
$ans793 = $field834.full_meth(anf_method_obj829,anf_arg831,anf_arg833);
} else {
if(!(R.isFunction($field834))) {
R.ffi.throwNonFunApp(L[324],$field834);
}
$ans793 = $field834.app(anf_arg831,anf_arg833);
}
break;
case 18: ++R.GAS;
return $ans793;
default: throw "No case numbered " + $step787 + " in $temp_full788";
}
}
} catch($e837) {
if(R.isCont($e837) && ($step787 !== 18)) {
$e837.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al794,$temp_full788,$step787,[self789,maybe$stack$loc790,src$available791,maybe$ast792],[anf_method_obj815,anf_fun803,anf_arg816,anf_arg817,anf_method_obj809,anf_method_obj829,anf_fun821,anf_arg831,anf_method_obj825]);
}
if(R.isPyretException($e837)) {
$e837.pyretStack.push($al794);
}
throw $e837;
}
};
var anf_variant_member6169 = R.makeMethod3($temp_full788,"render-fancy-reason");
var $temp_full839 = function($self840) {
var $step838 = 0;
var $ans841 = D;
var $al842 = L[339];
try {
if(R.isActivationRecord($self840)) {
$step838 = $self840.step;
$al842 = $self840.from;
$ans841 = $self840.ans;
self840 = $self840.args[0];
anf_method_obj851 = $self840.vars[0];
anf_fun844 = $self840.vars[1];
anf_arg852 = $self840.vars[2];
anf_method_obj848 = $self840.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[339],1,$t);
}
var self840 = $self840;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step838) {
case 0: $al842 = L[332];
var anf_method_obj851 = G(ED5,"error",L[332]);
var anf_fun844 = ed$simple$intro95.$var;
$al842 = L[333];
var anf_arg843 = G(self840,"expression",L[333]);
$step838 = 1;
$al842 = L[338];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al842,_plus1);
}
$ans841 = _plus1.app(anf_arg843,(" expression"));
break;
case 1: var anf_arg845 = $ans841;
$al842 = L[334];
var anf_arg846 = G(self840,"loc",L[334]);
$step838 = 2;
$al842 = L[337];
if(!(R.isFunction(anf_fun844))) {
R.ffi.throwNonFunApp($al842,anf_fun844);
}
$ans841 = anf_fun844.app(anf_arg845,anf_arg846);
break;
case 2: var anf_arg852 = $ans841;
$al842 = L[335];
var anf_method_obj848 = G(ED5,"para",L[335]);
$step838 = 3;
$al842 = L[336];
$field847 = R.getColonFieldLoc(ED5,"text",L[336]);
if(R.isMethod($field847)) {
$ans841 = $field847.full_meth(ED5,("It expected that the condition of at least one branch be satisfied. No branch conditions were satisfied, so no branch could be entered."));
} else {
if(!(R.isFunction($field847))) {
R.ffi.throwNonFunApp(L[336],$field847);
}
$ans841 = $field847.app(("It expected that the condition of at least one branch be satisfied. No branch conditions were satisfied, so no branch could be entered."));
}
break;
case 3: var anf_arg849 = $ans841;
$step838 = 4;
$al842 = L[335];
$field850 = R.getColonFieldLoc(anf_method_obj848,"make1",L[335]);
if(R.isMethod($field850)) {
$ans841 = $field850.full_meth(anf_method_obj848,anf_arg849);
} else {
if(!(R.isFunction($field850))) {
R.ffi.throwNonFunApp(L[335],$field850);
}
$ans841 = $field850.app(anf_arg849);
}
break;
case 4: var anf_arg853 = $ans841;
$step838 = 5;
$al842 = L[332];
$field854 = R.getColonFieldLoc(anf_method_obj851,"make2",L[332]);
if(R.isMethod($field854)) {
$ans841 = $field854.full_meth(anf_method_obj851,anf_arg852,anf_arg853);
} else {
if(!(R.isFunction($field854))) {
R.ffi.throwNonFunApp(L[332],$field854);
}
$ans841 = $field854.app(anf_arg852,anf_arg853);
}
break;
case 5: ++R.GAS;
return $ans841;
default: throw "No case numbered " + $step838 + " in $temp_full839";
}
}
} catch($e855) {
if(R.isCont($e855) && ($step838 !== 5)) {
$e855.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al842,$temp_full839,$step838,[self840],[anf_method_obj851,anf_fun844,anf_arg852,anf_method_obj848]);
}
if(R.isPyretException($e855)) {
$e855.pyretStack.push($al842);
}
throw $e855;
}
};
var anf_variant_member6170 = R.makeMethod0($temp_full839,"render-reason");
var $temp_full857 = function($self858,$maybe$stack$loc859,$src$available860,$maybe$ast861) {
var $step856 = 0;
var $ans862 = D;
var $al863 = L[341];
try {
if(R.isActivationRecord($self858)) {
$step856 = $self858.step;
$al863 = $self858.from;
$ans862 = $self858.ans;
self858 = $self858.args[0];
maybe$stack$loc859 = $self858.args[1];
src$available860 = $self858.args[2];
maybe$ast861 = $self858.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[341],4,$t);
}
var self858 = $self858;
var maybe$stack$loc859 = $maybe$stack$loc859;
var src$available860 = $src$available860;
var maybe$ast861 = $maybe$ast861;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step856) {
case 0: $step856 = 1;
$al863 = L[340];
$field864 = R.getColonFieldLoc(self858,"render-reason",L[340]);
if(R.isMethod($field864)) {
$ans862 = $field864.full_meth(self858);
} else {
if(!(R.isFunction($field864))) {
R.ffi.throwNonFunApp(L[340],$field864);
}
$ans862 = $field864.app();
}
break;
case 1: ++R.GAS;
return $ans862;
default: throw "No case numbered " + $step856 + " in $temp_full857";
}
}
} catch($e865) {
if(R.isCont($e865) && ($step856 !== 1)) {
$e865.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al863,$temp_full857,$step856,[self858,maybe$stack$loc859,src$available860,maybe$ast861],[]);
}
if(R.isPyretException($e865)) {
$e865.pyretStack.push($al863);
}
throw $e865;
}
};
var anf_variant_member6180 = R.makeMethod3($temp_full857,"render-fancy-reason");
var $temp_full867 = function($self868) {
var $step866 = 0;
var $ans869 = D;
var $al870 = L[351];
try {
if(R.isActivationRecord($self868)) {
$step866 = $self868.step;
$al870 = $self868.from;
$ans869 = $self868.ans;
self868 = $self868.args[0];
anf_method_obj885 = $self868.vars[0];
anf_method_obj874 = $self868.vars[1];
anf_arg875 = $self868.vars[2];
anf_arg886 = $self868.vars[3];
anf_method_obj880 = $self868.vars[4];
anf_arg887 = $self868.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[351],1,$t);
}
var self868 = $self868;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step866) {
case 0: $al870 = L[342];
var anf_method_obj885 = G(ED5,"error",L[342]);
$al870 = L[343];
var anf_method_obj874 = G(ED5,"para",L[343]);
$step866 = 1;
$al870 = L[344];
$field871 = R.getColonFieldLoc(ED5,"text",L[344]);
if(R.isMethod($field871)) {
$ans869 = $field871.full_meth(ED5,("Internal error:"));
} else {
if(!(R.isFunction($field871))) {
R.ffi.throwNonFunApp(L[344],$field871);
}
$ans869 = $field871.app(("Internal error:"));
}
break;
case 1: var anf_arg875 = $ans869;
$al870 = L[345];
var anf_arg872 = G(self868,"message",L[345]);
$step866 = 2;
$al870 = L[346];
$field873 = R.getColonFieldLoc(ED5,"text",L[346]);
if(R.isMethod($field873)) {
$ans869 = $field873.full_meth(ED5,anf_arg872);
} else {
if(!(R.isFunction($field873))) {
R.ffi.throwNonFunApp(L[346],$field873);
}
$ans869 = $field873.app(anf_arg872);
}
break;
case 2: var anf_arg876 = $ans869;
$step866 = 3;
$al870 = L[343];
$field877 = R.getColonFieldLoc(anf_method_obj874,"make2",L[343]);
if(R.isMethod($field877)) {
$ans869 = $field877.full_meth(anf_method_obj874,anf_arg875,anf_arg876);
} else {
if(!(R.isFunction($field877))) {
R.ffi.throwNonFunApp(L[343],$field877);
}
$ans869 = $field877.app(anf_arg875,anf_arg876);
}
break;
case 3: var anf_arg886 = $ans869;
$al870 = L[347];
var anf_method_obj880 = G(ED5,"para",L[347]);
$step866 = 4;
$al870 = L[348];
$field879 = R.getColonFieldLoc(ED5,"text",L[348]);
if(R.isMethod($field879)) {
$ans869 = $field879.full_meth(ED5,("Relevant arguments:"));
} else {
if(!(R.isFunction($field879))) {
R.ffi.throwNonFunApp(L[348],$field879);
}
$ans869 = $field879.app(("Relevant arguments:"));
}
break;
case 4: var anf_arg881 = $ans869;
$step866 = 5;
$al870 = L[347];
$field882 = R.getColonFieldLoc(anf_method_obj880,"make1",L[347]);
if(R.isMethod($field882)) {
$ans869 = $field882.full_meth(anf_method_obj880,anf_arg881);
} else {
if(!(R.isFunction($field882))) {
R.ffi.throwNonFunApp(L[347],$field882);
}
$ans869 = $field882.app(anf_arg881);
}
break;
case 5: var anf_arg887 = $ans869;
var anf_fun883 = vert$list$values62.$var;
$al870 = L[349];
var anf_arg884 = G(self868,"info-args",L[349]);
$step866 = 6;
$al870 = L[350];
if(!(R.isFunction(anf_fun883))) {
R.ffi.throwNonFunApp($al870,anf_fun883);
}
$ans869 = anf_fun883.app(anf_arg884);
break;
case 6: var anf_arg888 = $ans869;
$step866 = 7;
$al870 = L[342];
$field889 = R.getColonFieldLoc(anf_method_obj885,"make3",L[342]);
if(R.isMethod($field889)) {
$ans869 = $field889.full_meth(anf_method_obj885,anf_arg886,anf_arg887,anf_arg888);
} else {
if(!(R.isFunction($field889))) {
R.ffi.throwNonFunApp(L[342],$field889);
}
$ans869 = $field889.app(anf_arg886,anf_arg887,anf_arg888);
}
break;
case 7: ++R.GAS;
return $ans869;
default: throw "No case numbered " + $step866 + " in $temp_full867";
}
}
} catch($e890) {
if(R.isCont($e890) && ($step866 !== 7)) {
$e890.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al870,$temp_full867,$step866,[self868],[anf_method_obj885,anf_method_obj874,anf_arg875,anf_arg886,anf_method_obj880,anf_arg887]);
}
if(R.isPyretException($e890)) {
$e890.pyretStack.push($al870);
}
throw $e890;
}
};
var anf_variant_member6181 = R.makeMethod0($temp_full867,"render-reason");
var $temp_full892 = function($self893,$maybe$stack$loc894,$src$available895,$maybe$ast896) {
var $step891 = 0;
var $ans897 = D;
var $al898 = L[370];
try {
if(R.isActivationRecord($self893)) {
$step891 = $self893.step;
$al898 = $self893.from;
$ans897 = $self893.ans;
self893 = $self893.args[0];
maybe$stack$loc894 = $self893.args[1];
src$available895 = $self893.args[2];
maybe$ast896 = $self893.args[3];
anf_method_obj912 = $self893.vars[0];
anf_arg913 = $self893.vars[1];
anf_method_obj909 = $self893.vars[2];
anf_method_obj924 = $self893.vars[3];
anf_arg925 = $self893.vars[4];
anf_arg926 = $self893.vars[5];
anf_method_obj921 = $self893.vars[6];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[370],4,$t);
}
var self893 = $self893;
var maybe$stack$loc894 = $maybe$stack$loc894;
var src$available895 = $src$available895;
var maybe$ast896 = $maybe$ast896;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step891) {
case 0: $al898 = L[352];
var anf_method_obj899 = G(self893,"loc",L[352]);
$step891 = 1;
$al898 = L[353];
$field900 = R.getColonFieldLoc(anf_method_obj899,"is-builtin",L[353]);
if(R.isMethod($field900)) {
$ans897 = $field900.full_meth(anf_method_obj899);
} else {
if(!(R.isFunction($field900))) {
R.ffi.throwNonFunApp(L[353],$field900);
}
$ans897 = $field900.app();
}
break;
case 1: var anf_arg901 = $ans897;
$al898 = L[353];
var anf_if930 = R.checkWrapBoolean(anf_arg901);
$step891 = R.isPyretTrue(anf_if930)?2:3;
break;
case 2: $step891 = 6;
$ans897 = (true);
break;
case 3: $al898 = L[354];
var anf_arg902 = G(self893,"loc",L[354]);
$step891 = 4;
$al898 = L[356];
if(!(R.isFunction(src$available895))) {
R.ffi.throwNonFunApp($al898,src$available895);
}
$ans897 = src$available895.app(anf_arg902);
break;
case 4: var anf_arg903 = $ans897;
$step891 = 5;
$al898 = L[355];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al898,not4);
}
$ans897 = not4.app(anf_arg903);
break;
case 5: var anf_arg904 = $ans897;
$step891 = 6;
$al898 = L[355];
$ans897 = R.checkWrapBoolean(anf_arg904);
break;
case 6: var anf_arg905 = $ans897;
$al898 = L[357];
var anf_if929 = R.checkWrapBoolean(anf_arg905);
$step891 = R.isPyretTrue(anf_if929)?7:11;
break;
case 7: $al898 = L[358];
var anf_method_obj912 = G(ED5,"error",L[358]);
var anf_fun906 = ed$simple$intro95.$var;
$al898 = L[359];
var anf_arg907 = G(self893,"loc",L[359]);
$step891 = 8;
$al898 = L[362];
if(!(R.isFunction(anf_fun906))) {
R.ffi.throwNonFunApp($al898,anf_fun906);
}
$ans897 = anf_fun906.app(("unfinished template expression"),anf_arg907);
break;
case 8: var anf_arg913 = $ans897;
$al898 = L[360];
var anf_method_obj909 = G(ED5,"para",L[360]);
$step891 = 9;
$al898 = L[361];
$field908 = R.getColonFieldLoc(ED5,"text",L[361]);
if(R.isMethod($field908)) {
$ans897 = $field908.full_meth(ED5,("Template expressions cannot be evaluated."));
} else {
if(!(R.isFunction($field908))) {
R.ffi.throwNonFunApp(L[361],$field908);
}
$ans897 = $field908.app(("Template expressions cannot be evaluated."));
}
break;
case 9: var anf_arg910 = $ans897;
$step891 = 10;
$al898 = L[360];
$field911 = R.getColonFieldLoc(anf_method_obj909,"make1",L[360]);
if(R.isMethod($field911)) {
$ans897 = $field911.full_meth(anf_method_obj909,anf_arg910);
} else {
if(!(R.isFunction($field911))) {
R.ffi.throwNonFunApp(L[360],$field911);
}
$ans897 = $field911.app(anf_arg910);
}
break;
case 10: var anf_arg914 = $ans897;
$step891 = 16;
$al898 = L[358];
$field915 = R.getColonFieldLoc(anf_method_obj912,"make2",L[358]);
if(R.isMethod($field915)) {
$ans897 = $field915.full_meth(anf_method_obj912,anf_arg913,anf_arg914);
} else {
if(!(R.isFunction($field915))) {
R.ffi.throwNonFunApp(L[358],$field915);
}
$ans897 = $field915.app(anf_arg913,anf_arg914);
}
break;
case 11: $al898 = L[363];
var anf_method_obj924 = G(ED5,"error",L[363]);
var anf_fun916 = ed$intro122.$var;
$al898 = L[364];
var anf_arg917 = G(self893,"loc",L[364]);
$step891 = 12;
$al898 = L[369];
if(!(R.isFunction(anf_fun916))) {
R.ffi.throwNonFunApp($al898,anf_fun916);
}
$ans897 = anf_fun916.app(("unfinished template expression"),anf_arg917,(1),(true));
break;
case 12: var anf_arg925 = $ans897;
$al898 = L[365];
var anf_arg918 = G(self893,"loc",L[365]);
$step891 = 13;
$al898 = L[366];
$field919 = R.getColonFieldLoc(ED5,"cmcode",L[366]);
if(R.isMethod($field919)) {
$ans897 = $field919.full_meth(ED5,anf_arg918);
} else {
if(!(R.isFunction($field919))) {
R.ffi.throwNonFunApp(L[366],$field919);
}
$ans897 = $field919.app(anf_arg918);
}
break;
case 13: var anf_arg926 = $ans897;
$al898 = L[367];
var anf_method_obj921 = G(ED5,"para",L[367]);
$step891 = 14;
$al898 = L[368];
$field920 = R.getColonFieldLoc(ED5,"text",L[368]);
if(R.isMethod($field920)) {
$ans897 = $field920.full_meth(ED5,("Template expressions cannot be evaluated."));
} else {
if(!(R.isFunction($field920))) {
R.ffi.throwNonFunApp(L[368],$field920);
}
$ans897 = $field920.app(("Template expressions cannot be evaluated."));
}
break;
case 14: var anf_arg922 = $ans897;
$step891 = 15;
$al898 = L[367];
$field923 = R.getColonFieldLoc(anf_method_obj921,"make1",L[367]);
if(R.isMethod($field923)) {
$ans897 = $field923.full_meth(anf_method_obj921,anf_arg922);
} else {
if(!(R.isFunction($field923))) {
R.ffi.throwNonFunApp(L[367],$field923);
}
$ans897 = $field923.app(anf_arg922);
}
break;
case 15: var anf_arg927 = $ans897;
$step891 = 16;
$al898 = L[363];
$field928 = R.getColonFieldLoc(anf_method_obj924,"make3",L[363]);
if(R.isMethod($field928)) {
$ans897 = $field928.full_meth(anf_method_obj924,anf_arg925,anf_arg926,anf_arg927);
} else {
if(!(R.isFunction($field928))) {
R.ffi.throwNonFunApp(L[363],$field928);
}
$ans897 = $field928.app(anf_arg925,anf_arg926,anf_arg927);
}
break;
case 16: ++R.GAS;
return $ans897;
default: throw "No case numbered " + $step891 + " in $temp_full892";
}
}
} catch($e931) {
if(R.isCont($e931) && ($step891 !== 16)) {
$e931.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al898,$temp_full892,$step891,[self893,maybe$stack$loc894,src$available895,maybe$ast896],[anf_method_obj912,anf_arg913,anf_method_obj909,anf_method_obj924,anf_arg925,anf_arg926,anf_method_obj921]);
}
if(R.isPyretException($e931)) {
$e931.pyretStack.push($al898);
}
throw $e931;
}
};
var anf_variant_member6191 = R.makeMethod3($temp_full892,"render-fancy-reason");
var $temp_full933 = function($self934) {
var $step932 = 0;
var $ans935 = D;
var $al936 = L[376];
try {
if(R.isActivationRecord($self934)) {
$step932 = $self934.step;
$al936 = $self934.from;
$ans935 = $self934.ans;
self934 = $self934.args[0];
anf_method_obj943 = $self934.vars[0];
anf_arg944 = $self934.vars[1];
anf_method_obj940 = $self934.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[376],1,$t);
}
var self934 = $self934;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step932) {
case 0: $al936 = L[371];
var anf_method_obj943 = G(ED5,"error",L[371]);
var anf_fun937 = ed$simple$intro95.$var;
$al936 = L[372];
var anf_arg938 = G(self934,"loc",L[372]);
$step932 = 1;
$al936 = L[375];
if(!(R.isFunction(anf_fun937))) {
R.ffi.throwNonFunApp($al936,anf_fun937);
}
$ans935 = anf_fun937.app(("unfinished template expression"),anf_arg938);
break;
case 1: var anf_arg944 = $ans935;
$al936 = L[373];
var anf_method_obj940 = G(ED5,"para",L[373]);
$step932 = 2;
$al936 = L[374];
$field939 = R.getColonFieldLoc(ED5,"text",L[374]);
if(R.isMethod($field939)) {
$ans935 = $field939.full_meth(ED5,("Template expressions cannot be evaluated."));
} else {
if(!(R.isFunction($field939))) {
R.ffi.throwNonFunApp(L[374],$field939);
}
$ans935 = $field939.app(("Template expressions cannot be evaluated."));
}
break;
case 2: var anf_arg941 = $ans935;
$step932 = 3;
$al936 = L[373];
$field942 = R.getColonFieldLoc(anf_method_obj940,"make1",L[373]);
if(R.isMethod($field942)) {
$ans935 = $field942.full_meth(anf_method_obj940,anf_arg941);
} else {
if(!(R.isFunction($field942))) {
R.ffi.throwNonFunApp(L[373],$field942);
}
$ans935 = $field942.app(anf_arg941);
}
break;
case 3: var anf_arg945 = $ans935;
$step932 = 4;
$al936 = L[371];
$field946 = R.getColonFieldLoc(anf_method_obj943,"make2",L[371]);
if(R.isMethod($field946)) {
$ans935 = $field946.full_meth(anf_method_obj943,anf_arg944,anf_arg945);
} else {
if(!(R.isFunction($field946))) {
R.ffi.throwNonFunApp(L[371],$field946);
}
$ans935 = $field946.app(anf_arg944,anf_arg945);
}
break;
case 4: ++R.GAS;
return $ans935;
default: throw "No case numbered " + $step932 + " in $temp_full933";
}
}
} catch($e947) {
if(R.isCont($e947) && ($step932 !== 4)) {
$e947.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al936,$temp_full933,$step932,[self934],[anf_method_obj943,anf_arg944,anf_method_obj940]);
}
if(R.isPyretException($e947)) {
$e947.pyretStack.push($al936);
}
throw $e947;
}
};
var anf_variant_member6192 = R.makeMethod0($temp_full933,"render-reason");
var $temp_full949 = function($self950,$maybe$stack$loc951,$src$available952,$maybe$ast953) {
var $step948 = 0;
var $ans954 = D;
var $al955 = L[453];
try {
if(R.isActivationRecord($self950)) {
$step948 = $self950.step;
$al955 = $self950.from;
$ans954 = $self950.ans;
self950 = $self950.args[0];
maybe$stack$loc951 = $self950.args[1];
src$available952 = $self950.args[2];
maybe$ast953 = $self950.args[3];
anf_method_obj975 = $self950.vars[0];
anf_arg976 = $self950.vars[1];
anf_method_obj970 = $self950.vars[2];
anf_arg971 = $self950.vars[3];
anf_arg977 = $self950.vars[4];
cases983 = $self950.vars[5];
anf_method_obj1115 = $self950.vars[6];
anf_arg1116 = $self950.vars[7];
anf_method_obj1108 = $self950.vars[8];
anf_arg1109 = $self950.vars[9];
anf_arg1110 = $self950.vars[10];
anf_arg1117 = $self950.vars[11];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[453],4,$t);
}
var self950 = $self950;
var maybe$stack$loc951 = $maybe$stack$loc951;
var src$available952 = $src$available952;
var maybe$ast953 = $maybe$ast953;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step948) {
case 0: $al955 = L[377];
var anf_method_obj956 = G(self950,"loc",L[377]);
$step948 = 1;
$al955 = L[378];
$field957 = R.getColonFieldLoc(anf_method_obj956,"is-builtin",L[378]);
if(R.isMethod($field957)) {
$ans954 = $field957.full_meth(anf_method_obj956);
} else {
if(!(R.isFunction($field957))) {
R.ffi.throwNonFunApp(L[378],$field957);
}
$ans954 = $field957.app();
}
break;
case 1: var anf_arg958 = $ans954;
$al955 = L[378];
var anf_if1122 = R.checkWrapBoolean(anf_arg958);
$step948 = R.isPyretTrue(anf_if1122)?2:3;
break;
case 2: $step948 = 6;
$ans954 = (true);
break;
case 3: $al955 = L[379];
var anf_arg959 = G(self950,"loc",L[379]);
$step948 = 4;
$al955 = L[381];
if(!(R.isFunction(src$available952))) {
R.ffi.throwNonFunApp($al955,src$available952);
}
$ans954 = src$available952.app(anf_arg959);
break;
case 4: var anf_arg960 = $ans954;
$step948 = 5;
$al955 = L[380];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al955,not4);
}
$ans954 = not4.app(anf_arg960);
break;
case 5: var anf_arg961 = $ans954;
$step948 = 6;
$al955 = L[380];
$ans954 = R.checkWrapBoolean(anf_arg961);
break;
case 6: var anf_arg962 = $ans954;
$al955 = L[382];
var anf_if1121 = R.checkWrapBoolean(anf_arg962);
$step948 = R.isPyretTrue(anf_if1121)?7:14;
break;
case 7: $al955 = L[383];
var anf_method_obj975 = G(ED5,"error",L[383]);
var anf_fun963 = ed$simple$intro95.$var;
$al955 = L[384];
var anf_arg964 = G(self950,"loc",L[384]);
$step948 = 8;
$al955 = L[391];
if(!(R.isFunction(anf_fun963))) {
R.ffi.throwNonFunApp($al955,anf_fun963);
}
$ans954 = anf_fun963.app(("field lookup expression"),anf_arg964);
break;
case 8: var anf_arg976 = $ans954;
$al955 = L[385];
var anf_method_obj970 = G(ED5,"para",L[385]);
$step948 = 9;
$al955 = L[386];
$field965 = R.getColonFieldLoc(ED5,"text",L[386]);
if(R.isMethod($field965)) {
$ans954 = $field965.full_meth(ED5,("does not have a field named "));
} else {
if(!(R.isFunction($field965))) {
R.ffi.throwNonFunApp(L[386],$field965);
}
$ans954 = $field965.app(("does not have a field named "));
}
break;
case 9: var anf_arg971 = $ans954;
$al955 = L[387];
var anf_arg966 = G(self950,"field",L[387]);
$step948 = 10;
$al955 = L[388];
$field967 = R.getColonFieldLoc(ED5,"text",L[388]);
if(R.isMethod($field967)) {
$ans954 = $field967.full_meth(ED5,anf_arg966);
} else {
if(!(R.isFunction($field967))) {
R.ffi.throwNonFunApp(L[388],$field967);
}
$ans954 = $field967.app(anf_arg966);
}
break;
case 10: var anf_arg968 = $ans954;
$step948 = 11;
$al955 = L[389];
$field969 = R.getColonFieldLoc(ED5,"code",L[389]);
if(R.isMethod($field969)) {
$ans954 = $field969.full_meth(ED5,anf_arg968);
} else {
if(!(R.isFunction($field969))) {
R.ffi.throwNonFunApp(L[389],$field969);
}
$ans954 = $field969.app(anf_arg968);
}
break;
case 11: var anf_arg972 = $ans954;
$step948 = 12;
$al955 = L[385];
$field973 = R.getColonFieldLoc(anf_method_obj970,"make2",L[385]);
if(R.isMethod($field973)) {
$ans954 = $field973.full_meth(anf_method_obj970,anf_arg971,anf_arg972);
} else {
if(!(R.isFunction($field973))) {
R.ffi.throwNonFunApp(L[385],$field973);
}
$ans954 = $field973.app(anf_arg971,anf_arg972);
}
break;
case 12: var anf_arg977 = $ans954;
var anf_fun974 = please$report$bug133.$var;
$step948 = 13;
$al955 = L[390];
if(!(R.isFunction(anf_fun974))) {
R.ffi.throwNonFunApp($al955,anf_fun974);
}
$ans954 = anf_fun974.app();
break;
case 13: var anf_arg978 = $ans954;
$step948 = 30;
$al955 = L[383];
$field979 = R.getColonFieldLoc(anf_method_obj975,"make3",L[383]);
if(R.isMethod($field979)) {
$ans954 = $field979.full_meth(anf_method_obj975,anf_arg976,anf_arg977,anf_arg978);
} else {
if(!(R.isFunction($field979))) {
R.ffi.throwNonFunApp(L[383],$field979);
}
$ans954 = $field979.app(anf_arg976,anf_arg977,anf_arg978);
}
break;
case 14: $al955 = L[392];
var anf_arg980 = G(self950,"loc",L[392]);
$step948 = 15;
$al955 = L[393];
if(!(R.isFunction(src$available952))) {
R.ffi.throwNonFunApp($al955,src$available952);
}
$ans954 = src$available952.app(anf_arg980);
break;
case 15: var anf_arg981 = $ans954;
$al955 = L[393];
var anf_if1120 = R.checkWrapBoolean(anf_arg981);
$step948 = R.isPyretTrue(anf_if1120)?16:22;
break;
case 16: $al955 = L[394];
var anf_arg982 = G(self950,"loc",L[394]);
$step948 = 17;
$al955 = L[441];
if(!(R.isFunction(maybe$ast953))) {
R.ffi.throwNonFunApp($al955,maybe$ast953);
}
$ans954 = maybe$ast953.app(anf_arg982);
break;
case 17: var cases983 = $ans954;
$step948 = 18;
$al955 = L[440];
R._checkAnn(L[440],R.getDotAnn(L[440],"O",O13,"Option"),cases983);
break;
case 18: var $cases_dispatch1099 = {"some":19,
"none":20};
$al955 = L[423];
$step948 = $cases_dispatch1099[cases983.$name] || 21;
break;
case 19: if(cases983.$arity !== 1) {
if(cases983.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[422],1,cases983.$arity,L[423]);
} else {
R.ffi.throwCasesSingletonErrorC(L[422],true,L[423]);
}
}
$step948 = 30;
$al955 = L[424];
var $temp_branch1040 = function($ast984) {
var $step1041 = 0;
var $ans1042 = D;
var $al1043 = L[396];
try {
if(R.isActivationRecord($ast984)) {
$step1041 = $ast984.step;
$al1043 = $ast984.from;
$ans1042 = $ast984.ans;
ast984 = $ast984.args[0];
cases985 = $ast984.vars[0];
ast999 = $ast984.vars[1];
anf_method_obj1034 = $ast984.vars[2];
anf_arg1035 = $ast984.vars[3];
anf_arg1036 = $ast984.vars[4];
anf_method_obj1025 = $ast984.vars[5];
anf_arg1026 = $ast984.vars[6];
anf_arg1004 = $ast984.vars[7];
anf_arg1027 = $ast984.vars[8];
anf_arg1028 = $ast984.vars[9];
anf_method_obj1013 = $ast984.vars[10];
anf_arg1014 = $ast984.vars[11];
anf_arg1021 = $ast984.vars[12];
anf_method_obj1018 = $ast984.vars[13];
anf_arg1029 = $ast984.vars[14];
anf_arg1037 = $ast984.vars[15];
} else {
var ast984 = $ast984;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1041) {
case 0: var cases985 = ast984;
var $cases_dispatch1044 = {"s-dot":1,
"s-app":2};
$al1043 = L[396];
$step1041 = $cases_dispatch1044[cases985.$name] || 3;
break;
case 1: if(cases985.$arity !== 3) {
if(cases985.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[395],3,cases985.$arity,L[396]);
} else {
R.ffi.throwCasesSingletonErrorC(L[395],true,L[396]);
}
}
var $fn187 = cases985.$constructor.$fieldNames;
R.derefField(cases985.dict[$fn187[0]],cases985.$mut_fields_mask[0],false);
R.derefField(cases985.dict[$fn187[1]],cases985.$mut_fields_mask[1],false);
R.derefField(cases985.dict[$fn187[2]],cases985.$mut_fields_mask[2],false);
$step1041 = 4;
$ans1042 = ast984;
break;
case 2: if(cases985.$arity !== 3) {
if(cases985.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[397],3,cases985.$arity,L[396]);
} else {
R.ffi.throwCasesSingletonErrorC(L[397],true,L[396]);
}
}
var $fn187 = cases985.$constructor.$fieldNames;
R.derefField(cases985.dict[$fn187[0]],cases985.$mut_fields_mask[0],false);
var f989 = R.derefField(cases985.dict[$fn187[1]],cases985.$mut_fields_mask[1],false);
R.derefField(cases985.dict[$fn187[2]],cases985.$mut_fields_mask[2],false);
$step1041 = 4;
$ans1042 = f989;
break;
case 3: $step1041 = 4;
$al1043 = L[396];
$ans1042 = R.throwNoCasesMatched(L[396],cases985);
break;
case 4: var ast999 = $ans1042;
$al1043 = L[398];
var anf_method_obj1034 = G(ED5,"error",L[398]);
var anf_fun993 = ed$intro122.$var;
$al1043 = L[399];
var anf_arg994 = G(self950,"loc",L[399]);
$step1041 = 5;
$al1043 = L[421];
if(!(R.isFunction(anf_fun993))) {
R.ffi.throwNonFunApp($al1043,anf_fun993);
}
$ans1042 = anf_fun993.app(("field lookup expression"),anf_arg994,(-1),(true));
break;
case 5: var anf_arg1035 = $ans1042;
$al1043 = L[400];
var anf_arg995 = G(self950,"loc",L[400]);
$step1041 = 6;
$al1043 = L[401];
$field1045 = R.getColonFieldLoc(ED5,"cmcode",L[401]);
if(R.isMethod($field1045)) {
$ans1042 = $field1045.full_meth(ED5,anf_arg995);
} else {
if(!(R.isFunction($field1045))) {
R.ffi.throwNonFunApp(L[401],$field1045);
}
$ans1042 = $field1045.app(anf_arg995);
}
break;
case 6: var anf_arg1036 = $ans1042;
$al1043 = L[402];
var anf_method_obj1025 = G(ED5,"para",L[402]);
$step1041 = 7;
$al1043 = L[403];
$field1046 = R.getColonFieldLoc(ED5,"text",L[403]);
if(R.isMethod($field1046)) {
$ans1042 = $field1046.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field1046))) {
R.ffi.throwNonFunApp(L[403],$field1046);
}
$ans1042 = $field1046.app(("The "));
}
break;
case 7: var anf_arg1026 = $ans1042;
$step1041 = 8;
$al1043 = L[404];
$field1047 = R.getColonFieldLoc(ED5,"text",L[404]);
if(R.isMethod($field1047)) {
$ans1042 = $field1047.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field1047))) {
R.ffi.throwNonFunApp(L[404],$field1047);
}
$ans1042 = $field1047.app(("left side"));
}
break;
case 8: var anf_arg1004 = $ans1042;
$al1043 = L[405];
var anf_method_obj1001 = G(ED5,"locs",L[405]);
$al1043 = L[406];
var anf_bracket1000 = G(ast999,"obj",L[406]);
$al1043 = L[407];
var anf_arg1002 = G(anf_bracket1000,"l",L[407]);
$step1041 = 9;
$al1043 = L[405];
$field1048 = R.getColonFieldLoc(anf_method_obj1001,"make1",L[405]);
if(R.isMethod($field1048)) {
$ans1042 = $field1048.full_meth(anf_method_obj1001,anf_arg1002);
} else {
if(!(R.isFunction($field1048))) {
R.ffi.throwNonFunApp(L[405],$field1048);
}
$ans1042 = $field1048.app(anf_arg1002);
}
break;
case 9: var anf_arg1005 = $ans1042;
$step1041 = 10;
$al1043 = L[408];
$field1049 = R.getColonFieldLoc(ED5,"highlight",L[408]);
if(R.isMethod($field1049)) {
$ans1042 = $field1049.full_meth(ED5,anf_arg1004,anf_arg1005,(0));
} else {
if(!(R.isFunction($field1049))) {
R.ffi.throwNonFunApp(L[408],$field1049);
}
$ans1042 = $field1049.app(anf_arg1004,anf_arg1005,(0));
}
break;
case 10: var anf_arg1027 = $ans1042;
$step1041 = 11;
$al1043 = L[409];
$field1050 = R.getColonFieldLoc(ED5,"text",L[409]);
if(R.isMethod($field1050)) {
$ans1042 = $field1050.full_meth(ED5,(" was an object that did not have a "));
} else {
if(!(R.isFunction($field1050))) {
R.ffi.throwNonFunApp(L[409],$field1050);
}
$ans1042 = $field1050.app((" was an object that did not have a "));
}
break;
case 11: var anf_arg1028 = $ans1042;
$al1043 = L[410];
var anf_method_obj1013 = G(ED5,"sequence",L[410]);
$step1041 = 12;
$al1043 = L[411];
$field1051 = R.getColonFieldLoc(ED5,"text",L[411]);
if(R.isMethod($field1051)) {
$ans1042 = $field1051.full_meth(ED5,("field named "));
} else {
if(!(R.isFunction($field1051))) {
R.ffi.throwNonFunApp(L[411],$field1051);
}
$ans1042 = $field1051.app(("field named "));
}
break;
case 12: var anf_arg1014 = $ans1042;
$al1043 = L[412];
var anf_arg1009 = G(self950,"field",L[412]);
$step1041 = 13;
$al1043 = L[413];
$field1052 = R.getColonFieldLoc(ED5,"text",L[413]);
if(R.isMethod($field1052)) {
$ans1042 = $field1052.full_meth(ED5,anf_arg1009);
} else {
if(!(R.isFunction($field1052))) {
R.ffi.throwNonFunApp(L[413],$field1052);
}
$ans1042 = $field1052.app(anf_arg1009);
}
break;
case 13: var anf_arg1011 = $ans1042;
$step1041 = 14;
$al1043 = L[414];
$field1053 = R.getColonFieldLoc(ED5,"code",L[414]);
if(R.isMethod($field1053)) {
$ans1042 = $field1053.full_meth(ED5,anf_arg1011);
} else {
if(!(R.isFunction($field1053))) {
R.ffi.throwNonFunApp(L[414],$field1053);
}
$ans1042 = $field1053.app(anf_arg1011);
}
break;
case 14: var anf_arg1015 = $ans1042;
$step1041 = 15;
$al1043 = L[410];
$field1054 = R.getColonFieldLoc(anf_method_obj1013,"make2",L[410]);
if(R.isMethod($field1054)) {
$ans1042 = $field1054.full_meth(anf_method_obj1013,anf_arg1014,anf_arg1015);
} else {
if(!(R.isFunction($field1054))) {
R.ffi.throwNonFunApp(L[410],$field1054);
}
$ans1042 = $field1054.app(anf_arg1014,anf_arg1015);
}
break;
case 15: var anf_arg1021 = $ans1042;
$al1043 = L[415];
var anf_method_obj1018 = G(ED5,"locs",L[415]);
$step1041 = 16;
$al1043 = L[416];
$field1055 = R.getColonFieldLoc(ast999,"field-loc",L[416]);
if(R.isMethod($field1055)) {
$ans1042 = $field1055.full_meth(ast999);
} else {
if(!(R.isFunction($field1055))) {
R.ffi.throwNonFunApp(L[416],$field1055);
}
$ans1042 = $field1055.app();
}
break;
case 16: var anf_arg1019 = $ans1042;
$step1041 = 17;
$al1043 = L[415];
$field1056 = R.getColonFieldLoc(anf_method_obj1018,"make1",L[415]);
if(R.isMethod($field1056)) {
$ans1042 = $field1056.full_meth(anf_method_obj1018,anf_arg1019);
} else {
if(!(R.isFunction($field1056))) {
R.ffi.throwNonFunApp(L[415],$field1056);
}
$ans1042 = $field1056.app(anf_arg1019);
}
break;
case 17: var anf_arg1022 = $ans1042;
$step1041 = 18;
$al1043 = L[417];
$field1057 = R.getColonFieldLoc(ED5,"highlight",L[417]);
if(R.isMethod($field1057)) {
$ans1042 = $field1057.full_meth(ED5,anf_arg1021,anf_arg1022,(1));
} else {
if(!(R.isFunction($field1057))) {
R.ffi.throwNonFunApp(L[417],$field1057);
}
$ans1042 = $field1057.app(anf_arg1021,anf_arg1022,(1));
}
break;
case 18: var anf_arg1029 = $ans1042;
$step1041 = 19;
$al1043 = L[418];
$field1058 = R.getColonFieldLoc(ED5,"text",L[418]);
if(R.isMethod($field1058)) {
$ans1042 = $field1058.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1058))) {
R.ffi.throwNonFunApp(L[418],$field1058);
}
$ans1042 = $field1058.app((":"));
}
break;
case 19: var anf_arg1030 = $ans1042;
$step1041 = 20;
$al1043 = L[402];
$field1059 = R.getColonFieldLoc(anf_method_obj1025,"make5",L[402]);
if(R.isMethod($field1059)) {
$ans1042 = $field1059.full_meth(anf_method_obj1025,anf_arg1026,anf_arg1027,anf_arg1028,anf_arg1029,anf_arg1030);
} else {
if(!(R.isFunction($field1059))) {
R.ffi.throwNonFunApp(L[402],$field1059);
}
$ans1042 = $field1059.app(anf_arg1026,anf_arg1027,anf_arg1028,anf_arg1029,anf_arg1030);
}
break;
case 20: var anf_arg1037 = $ans1042;
$al1043 = L[419];
var anf_arg1032 = G(self950,"obj",L[419]);
$step1041 = 21;
$al1043 = L[420];
$field1060 = R.getColonFieldLoc(ED5,"embed",L[420]);
if(R.isMethod($field1060)) {
$ans1042 = $field1060.full_meth(ED5,anf_arg1032);
} else {
if(!(R.isFunction($field1060))) {
R.ffi.throwNonFunApp(L[420],$field1060);
}
$ans1042 = $field1060.app(anf_arg1032);
}
break;
case 21: var anf_arg1038 = $ans1042;
$step1041 = 22;
$al1043 = L[398];
$field1061 = R.getColonFieldLoc(anf_method_obj1034,"make4",L[398]);
if(R.isMethod($field1061)) {
$ans1042 = $field1061.full_meth(anf_method_obj1034,anf_arg1035,anf_arg1036,anf_arg1037,anf_arg1038);
} else {
if(!(R.isFunction($field1061))) {
R.ffi.throwNonFunApp(L[398],$field1061);
}
$ans1042 = $field1061.app(anf_arg1035,anf_arg1036,anf_arg1037,anf_arg1038);
}
break;
case 22: ++R.GAS;
return $ans1042;
default: throw "No case numbered " + $step1041 + " in $temp_branch1040";
}
}
} catch($e1062) {
if(R.isCont($e1062) && ($step1041 !== 22)) {
$e1062.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1043,$temp_branch1040,$step1041,[ast984],[cases985,ast999,anf_method_obj1034,anf_arg1035,anf_arg1036,anf_method_obj1025,anf_arg1026,anf_arg1004,anf_arg1027,anf_arg1028,anf_method_obj1013,anf_arg1014,anf_arg1021,anf_method_obj1018,anf_arg1029,anf_arg1037]);
}
if(R.isPyretException($e1062)) {
$e1062.pyretStack.push($al1043);
}
throw $e1062;
}
};
$ans954 = cases983.$app_fields($temp_branch1040,[false]);
break;
case 20: if(cases983.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[438],false,L[423]);
}
$step948 = 30;
$al955 = L[439];
var $temp_branch1086 = function($$resumer101) {
var $step1087 = 0;
var $ans1088 = D;
var $al1089 = L[425];
try {
if(R.isActivationRecord($$resumer101)) {
$step1087 = $$resumer101.step;
$al1089 = $$resumer101.from;
$ans1088 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj1080 = $$resumer101.vars[0];
anf_arg1081 = $$resumer101.vars[1];
anf_arg1082 = $$resumer101.vars[2];
anf_method_obj1073 = $$resumer101.vars[3];
anf_arg1074 = $$resumer101.vars[4];
anf_arg1075 = $$resumer101.vars[5];
anf_arg1083 = $$resumer101.vars[6];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1087) {
case 0: $al1089 = L[425];
var anf_method_obj1080 = G(ED5,"error",L[425]);
var anf_fun1063 = ed$intro122.$var;
$al1089 = L[426];
var anf_arg1064 = G(self950,"loc",L[426]);
$step1087 = 1;
$al1089 = L[437];
if(!(R.isFunction(anf_fun1063))) {
R.ffi.throwNonFunApp($al1089,anf_fun1063);
}
$ans1088 = anf_fun1063.app(("field lookup expression"),anf_arg1064,(-1),(true));
break;
case 1: var anf_arg1081 = $ans1088;
$al1089 = L[427];
var anf_arg1065 = G(self950,"loc",L[427]);
$step1087 = 2;
$al1089 = L[428];
$field1090 = R.getColonFieldLoc(ED5,"cmcode",L[428]);
if(R.isMethod($field1090)) {
$ans1088 = $field1090.full_meth(ED5,anf_arg1065);
} else {
if(!(R.isFunction($field1090))) {
R.ffi.throwNonFunApp(L[428],$field1090);
}
$ans1088 = $field1090.app(anf_arg1065);
}
break;
case 2: var anf_arg1082 = $ans1088;
$al1089 = L[429];
var anf_method_obj1073 = G(ED5,"para",L[429]);
$step1087 = 3;
$al1089 = L[430];
$field1091 = R.getColonFieldLoc(ED5,"text",L[430]);
if(R.isMethod($field1091)) {
$ans1088 = $field1091.full_meth(ED5,("The left side was an object that did not have a field named "));
} else {
if(!(R.isFunction($field1091))) {
R.ffi.throwNonFunApp(L[430],$field1091);
}
$ans1088 = $field1091.app(("The left side was an object that did not have a field named "));
}
break;
case 3: var anf_arg1074 = $ans1088;
$al1089 = L[431];
var anf_arg1068 = G(self950,"field",L[431]);
$step1087 = 4;
$al1089 = L[432];
$field1092 = R.getColonFieldLoc(ED5,"text",L[432]);
if(R.isMethod($field1092)) {
$ans1088 = $field1092.full_meth(ED5,anf_arg1068);
} else {
if(!(R.isFunction($field1092))) {
R.ffi.throwNonFunApp(L[432],$field1092);
}
$ans1088 = $field1092.app(anf_arg1068);
}
break;
case 4: var anf_arg1070 = $ans1088;
$step1087 = 5;
$al1089 = L[433];
$field1093 = R.getColonFieldLoc(ED5,"code",L[433]);
if(R.isMethod($field1093)) {
$ans1088 = $field1093.full_meth(ED5,anf_arg1070);
} else {
if(!(R.isFunction($field1093))) {
R.ffi.throwNonFunApp(L[433],$field1093);
}
$ans1088 = $field1093.app(anf_arg1070);
}
break;
case 5: var anf_arg1075 = $ans1088;
$step1087 = 6;
$al1089 = L[434];
$field1094 = R.getColonFieldLoc(ED5,"text",L[434]);
if(R.isMethod($field1094)) {
$ans1088 = $field1094.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1094))) {
R.ffi.throwNonFunApp(L[434],$field1094);
}
$ans1088 = $field1094.app((":"));
}
break;
case 6: var anf_arg1076 = $ans1088;
$step1087 = 7;
$al1089 = L[429];
$field1095 = R.getColonFieldLoc(anf_method_obj1073,"make3",L[429]);
if(R.isMethod($field1095)) {
$ans1088 = $field1095.full_meth(anf_method_obj1073,anf_arg1074,anf_arg1075,anf_arg1076);
} else {
if(!(R.isFunction($field1095))) {
R.ffi.throwNonFunApp(L[429],$field1095);
}
$ans1088 = $field1095.app(anf_arg1074,anf_arg1075,anf_arg1076);
}
break;
case 7: var anf_arg1083 = $ans1088;
$al1089 = L[435];
var anf_arg1078 = G(self950,"obj",L[435]);
$step1087 = 8;
$al1089 = L[436];
$field1096 = R.getColonFieldLoc(ED5,"embed",L[436]);
if(R.isMethod($field1096)) {
$ans1088 = $field1096.full_meth(ED5,anf_arg1078);
} else {
if(!(R.isFunction($field1096))) {
R.ffi.throwNonFunApp(L[436],$field1096);
}
$ans1088 = $field1096.app(anf_arg1078);
}
break;
case 8: var anf_arg1084 = $ans1088;
$step1087 = 9;
$al1089 = L[425];
$field1097 = R.getColonFieldLoc(anf_method_obj1080,"make4",L[425]);
if(R.isMethod($field1097)) {
$ans1088 = $field1097.full_meth(anf_method_obj1080,anf_arg1081,anf_arg1082,anf_arg1083,anf_arg1084);
} else {
if(!(R.isFunction($field1097))) {
R.ffi.throwNonFunApp(L[425],$field1097);
}
$ans1088 = $field1097.app(anf_arg1081,anf_arg1082,anf_arg1083,anf_arg1084);
}
break;
case 9: ++R.GAS;
return $ans1088;
default: throw "No case numbered " + $step1087 + " in $temp_branch1086";
}
}
} catch($e1098) {
if(R.isCont($e1098) && ($step1087 !== 9)) {
$e1098.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1089,$temp_branch1086,$step1087,[],[anf_method_obj1080,anf_arg1081,anf_arg1082,anf_method_obj1073,anf_arg1074,anf_arg1075,anf_arg1083]);
}
if(R.isPyretException($e1098)) {
$e1098.pyretStack.push($al1089);
}
throw $e1098;
}
};
$ans954 = cases983.$app_fields($temp_branch1086,[]);
break;
case 21: $step948 = 30;
$al955 = L[423];
$ans954 = R.throwNoCasesMatched(L[423],cases983);
break;
case 22: $al955 = L[442];
var anf_method_obj1115 = G(ED5,"error",L[442]);
var anf_fun1100 = ed$simple$intro95.$var;
$al955 = L[443];
var anf_arg1101 = G(self950,"loc",L[443]);
$step948 = 23;
$al955 = L[452];
if(!(R.isFunction(anf_fun1100))) {
R.ffi.throwNonFunApp($al955,anf_fun1100);
}
$ans954 = anf_fun1100.app(("field lookup expression"),anf_arg1101);
break;
case 23: var anf_arg1116 = $ans954;
$al955 = L[444];
var anf_method_obj1108 = G(ED5,"para",L[444]);
$step948 = 24;
$al955 = L[445];
$field1102 = R.getColonFieldLoc(ED5,"text",L[445]);
if(R.isMethod($field1102)) {
$ans954 = $field1102.full_meth(ED5,("The left side was an object that did not have a field named "));
} else {
if(!(R.isFunction($field1102))) {
R.ffi.throwNonFunApp(L[445],$field1102);
}
$ans954 = $field1102.app(("The left side was an object that did not have a field named "));
}
break;
case 24: var anf_arg1109 = $ans954;
$al955 = L[446];
var anf_arg1103 = G(self950,"field",L[446]);
$step948 = 25;
$al955 = L[447];
$field1104 = R.getColonFieldLoc(ED5,"text",L[447]);
if(R.isMethod($field1104)) {
$ans954 = $field1104.full_meth(ED5,anf_arg1103);
} else {
if(!(R.isFunction($field1104))) {
R.ffi.throwNonFunApp(L[447],$field1104);
}
$ans954 = $field1104.app(anf_arg1103);
}
break;
case 25: var anf_arg1105 = $ans954;
$step948 = 26;
$al955 = L[448];
$field1106 = R.getColonFieldLoc(ED5,"code",L[448]);
if(R.isMethod($field1106)) {
$ans954 = $field1106.full_meth(ED5,anf_arg1105);
} else {
if(!(R.isFunction($field1106))) {
R.ffi.throwNonFunApp(L[448],$field1106);
}
$ans954 = $field1106.app(anf_arg1105);
}
break;
case 26: var anf_arg1110 = $ans954;
$step948 = 27;
$al955 = L[449];
$field1107 = R.getColonFieldLoc(ED5,"text",L[449]);
if(R.isMethod($field1107)) {
$ans954 = $field1107.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1107))) {
R.ffi.throwNonFunApp(L[449],$field1107);
}
$ans954 = $field1107.app((":"));
}
break;
case 27: var anf_arg1111 = $ans954;
$step948 = 28;
$al955 = L[444];
$field1112 = R.getColonFieldLoc(anf_method_obj1108,"make3",L[444]);
if(R.isMethod($field1112)) {
$ans954 = $field1112.full_meth(anf_method_obj1108,anf_arg1109,anf_arg1110,anf_arg1111);
} else {
if(!(R.isFunction($field1112))) {
R.ffi.throwNonFunApp(L[444],$field1112);
}
$ans954 = $field1112.app(anf_arg1109,anf_arg1110,anf_arg1111);
}
break;
case 28: var anf_arg1117 = $ans954;
$al955 = L[450];
var anf_arg1113 = G(self950,"obj",L[450]);
$step948 = 29;
$al955 = L[451];
$field1114 = R.getColonFieldLoc(ED5,"embed",L[451]);
if(R.isMethod($field1114)) {
$ans954 = $field1114.full_meth(ED5,anf_arg1113);
} else {
if(!(R.isFunction($field1114))) {
R.ffi.throwNonFunApp(L[451],$field1114);
}
$ans954 = $field1114.app(anf_arg1113);
}
break;
case 29: var anf_arg1118 = $ans954;
$step948 = 30;
$al955 = L[442];
$field1119 = R.getColonFieldLoc(anf_method_obj1115,"make3",L[442]);
if(R.isMethod($field1119)) {
$ans954 = $field1119.full_meth(anf_method_obj1115,anf_arg1116,anf_arg1117,anf_arg1118);
} else {
if(!(R.isFunction($field1119))) {
R.ffi.throwNonFunApp(L[442],$field1119);
}
$ans954 = $field1119.app(anf_arg1116,anf_arg1117,anf_arg1118);
}
break;
case 30: ++R.GAS;
return $ans954;
default: throw "No case numbered " + $step948 + " in $temp_full949";
}
}
} catch($e1123) {
if(R.isCont($e1123) && ($step948 !== 30)) {
$e1123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al955,$temp_full949,$step948,[self950,maybe$stack$loc951,src$available952,maybe$ast953],[anf_method_obj975,anf_arg976,anf_method_obj970,anf_arg971,anf_arg977,cases983,anf_method_obj1115,anf_arg1116,anf_method_obj1108,anf_arg1109,anf_arg1110,anf_arg1117]);
}
if(R.isPyretException($e1123)) {
$e1123.pyretStack.push($al955);
}
throw $e1123;
}
};
var anf_variant_member6201 = R.makeMethod3($temp_full949,"render-fancy-reason");
var $temp_full1125 = function($self1126) {
var $step1124 = 0;
var $ans1127 = D;
var $al1128 = L[465];
try {
if(R.isActivationRecord($self1126)) {
$step1124 = $self1126.step;
$al1128 = $self1126.from;
$ans1127 = $self1126.ans;
self1126 = $self1126.args[0];
anf_method_obj1144 = $self1126.vars[0];
anf_arg1145 = $self1126.vars[1];
anf_method_obj1137 = $self1126.vars[2];
anf_arg1138 = $self1126.vars[3];
anf_arg1139 = $self1126.vars[4];
anf_arg1146 = $self1126.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[465],1,$t);
}
var self1126 = $self1126;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1124) {
case 0: $al1128 = L[454];
var anf_method_obj1144 = G(ED5,"error",L[454]);
var anf_fun1129 = ed$simple$intro95.$var;
$al1128 = L[455];
var anf_arg1130 = G(self1126,"loc",L[455]);
$step1124 = 1;
$al1128 = L[464];
if(!(R.isFunction(anf_fun1129))) {
R.ffi.throwNonFunApp($al1128,anf_fun1129);
}
$ans1127 = anf_fun1129.app(("field lookup expression"),anf_arg1130);
break;
case 1: var anf_arg1145 = $ans1127;
$al1128 = L[456];
var anf_method_obj1137 = G(ED5,"para",L[456]);
$step1124 = 2;
$al1128 = L[457];
$field1131 = R.getColonFieldLoc(ED5,"text",L[457]);
if(R.isMethod($field1131)) {
$ans1127 = $field1131.full_meth(ED5,("The left side was an object that did not have a field named "));
} else {
if(!(R.isFunction($field1131))) {
R.ffi.throwNonFunApp(L[457],$field1131);
}
$ans1127 = $field1131.app(("The left side was an object that did not have a field named "));
}
break;
case 2: var anf_arg1138 = $ans1127;
$al1128 = L[458];
var anf_arg1132 = G(self1126,"field",L[458]);
$step1124 = 3;
$al1128 = L[459];
$field1133 = R.getColonFieldLoc(ED5,"text",L[459]);
if(R.isMethod($field1133)) {
$ans1127 = $field1133.full_meth(ED5,anf_arg1132);
} else {
if(!(R.isFunction($field1133))) {
R.ffi.throwNonFunApp(L[459],$field1133);
}
$ans1127 = $field1133.app(anf_arg1132);
}
break;
case 3: var anf_arg1134 = $ans1127;
$step1124 = 4;
$al1128 = L[460];
$field1135 = R.getColonFieldLoc(ED5,"code",L[460]);
if(R.isMethod($field1135)) {
$ans1127 = $field1135.full_meth(ED5,anf_arg1134);
} else {
if(!(R.isFunction($field1135))) {
R.ffi.throwNonFunApp(L[460],$field1135);
}
$ans1127 = $field1135.app(anf_arg1134);
}
break;
case 4: var anf_arg1139 = $ans1127;
$step1124 = 5;
$al1128 = L[461];
$field1136 = R.getColonFieldLoc(ED5,"text",L[461]);
if(R.isMethod($field1136)) {
$ans1127 = $field1136.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1136))) {
R.ffi.throwNonFunApp(L[461],$field1136);
}
$ans1127 = $field1136.app((":"));
}
break;
case 5: var anf_arg1140 = $ans1127;
$step1124 = 6;
$al1128 = L[456];
$field1141 = R.getColonFieldLoc(anf_method_obj1137,"make3",L[456]);
if(R.isMethod($field1141)) {
$ans1127 = $field1141.full_meth(anf_method_obj1137,anf_arg1138,anf_arg1139,anf_arg1140);
} else {
if(!(R.isFunction($field1141))) {
R.ffi.throwNonFunApp(L[456],$field1141);
}
$ans1127 = $field1141.app(anf_arg1138,anf_arg1139,anf_arg1140);
}
break;
case 6: var anf_arg1146 = $ans1127;
$al1128 = L[462];
var anf_arg1142 = G(self1126,"obj",L[462]);
$step1124 = 7;
$al1128 = L[463];
$field1143 = R.getColonFieldLoc(ED5,"embed",L[463]);
if(R.isMethod($field1143)) {
$ans1127 = $field1143.full_meth(ED5,anf_arg1142);
} else {
if(!(R.isFunction($field1143))) {
R.ffi.throwNonFunApp(L[463],$field1143);
}
$ans1127 = $field1143.app(anf_arg1142);
}
break;
case 7: var anf_arg1147 = $ans1127;
$step1124 = 8;
$al1128 = L[454];
$field1148 = R.getColonFieldLoc(anf_method_obj1144,"make3",L[454]);
if(R.isMethod($field1148)) {
$ans1127 = $field1148.full_meth(anf_method_obj1144,anf_arg1145,anf_arg1146,anf_arg1147);
} else {
if(!(R.isFunction($field1148))) {
R.ffi.throwNonFunApp(L[454],$field1148);
}
$ans1127 = $field1148.app(anf_arg1145,anf_arg1146,anf_arg1147);
}
break;
case 8: ++R.GAS;
return $ans1127;
default: throw "No case numbered " + $step1124 + " in $temp_full1125";
}
}
} catch($e1149) {
if(R.isCont($e1149) && ($step1124 !== 8)) {
$e1149.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1128,$temp_full1125,$step1124,[self1126],[anf_method_obj1144,anf_arg1145,anf_method_obj1137,anf_arg1138,anf_arg1139,anf_arg1146]);
}
if(R.isPyretException($e1149)) {
$e1149.pyretStack.push($al1128);
}
throw $e1149;
}
};
var anf_variant_member6202 = R.makeMethod0($temp_full1125,"render-reason");
var $temp_full1151 = function($self1152,$maybe$stack$loc1153,$src$available1154,$maybe$ast1155) {
var $step1150 = 0;
var $ans1156 = D;
var $al1157 = L[484];
try {
if(R.isActivationRecord($self1152)) {
$step1150 = $self1152.step;
$al1157 = $self1152.from;
$ans1156 = $self1152.ans;
self1152 = $self1152.args[0];
maybe$stack$loc1153 = $self1152.args[1];
src$available1154 = $self1152.args[2];
maybe$ast1155 = $self1152.args[3];
anf_method_obj1171 = $self1152.vars[0];
anf_arg1172 = $self1152.vars[1];
anf_method_obj1168 = $self1152.vars[2];
anf_method_obj1183 = $self1152.vars[3];
anf_arg1184 = $self1152.vars[4];
anf_arg1185 = $self1152.vars[5];
anf_method_obj1180 = $self1152.vars[6];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[484],4,$t);
}
var self1152 = $self1152;
var maybe$stack$loc1153 = $maybe$stack$loc1153;
var src$available1154 = $src$available1154;
var maybe$ast1155 = $maybe$ast1155;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1150) {
case 0: $al1157 = L[466];
var anf_method_obj1158 = G(self1152,"loc",L[466]);
$step1150 = 1;
$al1157 = L[467];
$field1159 = R.getColonFieldLoc(anf_method_obj1158,"is-builtin",L[467]);
if(R.isMethod($field1159)) {
$ans1156 = $field1159.full_meth(anf_method_obj1158);
} else {
if(!(R.isFunction($field1159))) {
R.ffi.throwNonFunApp(L[467],$field1159);
}
$ans1156 = $field1159.app();
}
break;
case 1: var anf_arg1160 = $ans1156;
$al1157 = L[467];
var anf_if1189 = R.checkWrapBoolean(anf_arg1160);
$step1150 = R.isPyretTrue(anf_if1189)?2:3;
break;
case 2: $step1150 = 6;
$ans1156 = (true);
break;
case 3: $al1157 = L[468];
var anf_arg1161 = G(self1152,"loc",L[468]);
$step1150 = 4;
$al1157 = L[470];
if(!(R.isFunction(src$available1154))) {
R.ffi.throwNonFunApp($al1157,src$available1154);
}
$ans1156 = src$available1154.app(anf_arg1161);
break;
case 4: var anf_arg1162 = $ans1156;
$step1150 = 5;
$al1157 = L[469];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al1157,not4);
}
$ans1156 = not4.app(anf_arg1162);
break;
case 5: var anf_arg1163 = $ans1156;
$step1150 = 6;
$al1157 = L[469];
$ans1156 = R.checkWrapBoolean(anf_arg1163);
break;
case 6: var anf_arg1164 = $ans1156;
$al1157 = L[471];
var anf_if1188 = R.checkWrapBoolean(anf_arg1164);
$step1150 = R.isPyretTrue(anf_if1188)?7:11;
break;
case 7: $al1157 = L[472];
var anf_method_obj1171 = G(ED5,"error",L[472]);
var anf_fun1165 = ed$simple$intro95.$var;
$al1157 = L[473];
var anf_arg1166 = G(self1152,"loc",L[473]);
$step1150 = 8;
$al1157 = L[476];
if(!(R.isFunction(anf_fun1165))) {
R.ffi.throwNonFunApp($al1157,anf_fun1165);
}
$ans1156 = anf_fun1165.app(("field lookup expression"),anf_arg1166);
break;
case 8: var anf_arg1172 = $ans1156;
$al1157 = L[474];
var anf_method_obj1168 = G(ED5,"para",L[474]);
$step1150 = 9;
$al1157 = L[475];
$field1167 = R.getColonFieldLoc(ED5,"text",L[475]);
if(R.isMethod($field1167)) {
$ans1156 = $field1167.full_meth(ED5,("The left side was a constructor, not an object."));
} else {
if(!(R.isFunction($field1167))) {
R.ffi.throwNonFunApp(L[475],$field1167);
}
$ans1156 = $field1167.app(("The left side was a constructor, not an object."));
}
break;
case 9: var anf_arg1169 = $ans1156;
$step1150 = 10;
$al1157 = L[474];
$field1170 = R.getColonFieldLoc(anf_method_obj1168,"make1",L[474]);
if(R.isMethod($field1170)) {
$ans1156 = $field1170.full_meth(anf_method_obj1168,anf_arg1169);
} else {
if(!(R.isFunction($field1170))) {
R.ffi.throwNonFunApp(L[474],$field1170);
}
$ans1156 = $field1170.app(anf_arg1169);
}
break;
case 10: var anf_arg1173 = $ans1156;
$step1150 = 16;
$al1157 = L[472];
$field1174 = R.getColonFieldLoc(anf_method_obj1171,"make2",L[472]);
if(R.isMethod($field1174)) {
$ans1156 = $field1174.full_meth(anf_method_obj1171,anf_arg1172,anf_arg1173);
} else {
if(!(R.isFunction($field1174))) {
R.ffi.throwNonFunApp(L[472],$field1174);
}
$ans1156 = $field1174.app(anf_arg1172,anf_arg1173);
}
break;
case 11: $al1157 = L[477];
var anf_method_obj1183 = G(ED5,"error",L[477]);
var anf_fun1175 = ed$intro122.$var;
$al1157 = L[478];
var anf_arg1176 = G(self1152,"loc",L[478]);
$step1150 = 12;
$al1157 = L[483];
if(!(R.isFunction(anf_fun1175))) {
R.ffi.throwNonFunApp($al1157,anf_fun1175);
}
$ans1156 = anf_fun1175.app(("field lookup expression"),anf_arg1176,(0),(true));
break;
case 12: var anf_arg1184 = $ans1156;
$al1157 = L[479];
var anf_arg1177 = G(self1152,"loc",L[479]);
$step1150 = 13;
$al1157 = L[480];
$field1178 = R.getColonFieldLoc(ED5,"cmcode",L[480]);
if(R.isMethod($field1178)) {
$ans1156 = $field1178.full_meth(ED5,anf_arg1177);
} else {
if(!(R.isFunction($field1178))) {
R.ffi.throwNonFunApp(L[480],$field1178);
}
$ans1156 = $field1178.app(anf_arg1177);
}
break;
case 13: var anf_arg1185 = $ans1156;
$al1157 = L[481];
var anf_method_obj1180 = G(ED5,"para",L[481]);
$step1150 = 14;
$al1157 = L[482];
$field1179 = R.getColonFieldLoc(ED5,"text",L[482]);
if(R.isMethod($field1179)) {
$ans1156 = $field1179.full_meth(ED5,("The left side was a constructor, not an object."));
} else {
if(!(R.isFunction($field1179))) {
R.ffi.throwNonFunApp(L[482],$field1179);
}
$ans1156 = $field1179.app(("The left side was a constructor, not an object."));
}
break;
case 14: var anf_arg1181 = $ans1156;
$step1150 = 15;
$al1157 = L[481];
$field1182 = R.getColonFieldLoc(anf_method_obj1180,"make1",L[481]);
if(R.isMethod($field1182)) {
$ans1156 = $field1182.full_meth(anf_method_obj1180,anf_arg1181);
} else {
if(!(R.isFunction($field1182))) {
R.ffi.throwNonFunApp(L[481],$field1182);
}
$ans1156 = $field1182.app(anf_arg1181);
}
break;
case 15: var anf_arg1186 = $ans1156;
$step1150 = 16;
$al1157 = L[477];
$field1187 = R.getColonFieldLoc(anf_method_obj1183,"make3",L[477]);
if(R.isMethod($field1187)) {
$ans1156 = $field1187.full_meth(anf_method_obj1183,anf_arg1184,anf_arg1185,anf_arg1186);
} else {
if(!(R.isFunction($field1187))) {
R.ffi.throwNonFunApp(L[477],$field1187);
}
$ans1156 = $field1187.app(anf_arg1184,anf_arg1185,anf_arg1186);
}
break;
case 16: ++R.GAS;
return $ans1156;
default: throw "No case numbered " + $step1150 + " in $temp_full1151";
}
}
} catch($e1190) {
if(R.isCont($e1190) && ($step1150 !== 16)) {
$e1190.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1157,$temp_full1151,$step1150,[self1152,maybe$stack$loc1153,src$available1154,maybe$ast1155],[anf_method_obj1171,anf_arg1172,anf_method_obj1168,anf_method_obj1183,anf_arg1184,anf_arg1185,anf_method_obj1180]);
}
if(R.isPyretException($e1190)) {
$e1190.pyretStack.push($al1157);
}
throw $e1190;
}
};
var anf_variant_member6213 = R.makeMethod3($temp_full1151,"render-fancy-reason");
var $temp_full1192 = function($self1193) {
var $step1191 = 0;
var $ans1194 = D;
var $al1195 = L[490];
try {
if(R.isActivationRecord($self1193)) {
$step1191 = $self1193.step;
$al1195 = $self1193.from;
$ans1194 = $self1193.ans;
self1193 = $self1193.args[0];
anf_method_obj1202 = $self1193.vars[0];
anf_arg1203 = $self1193.vars[1];
anf_method_obj1199 = $self1193.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[490],1,$t);
}
var self1193 = $self1193;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1191) {
case 0: $al1195 = L[485];
var anf_method_obj1202 = G(ED5,"error",L[485]);
var anf_fun1196 = ed$simple$intro95.$var;
$al1195 = L[486];
var anf_arg1197 = G(self1193,"loc",L[486]);
$step1191 = 1;
$al1195 = L[489];
if(!(R.isFunction(anf_fun1196))) {
R.ffi.throwNonFunApp($al1195,anf_fun1196);
}
$ans1194 = anf_fun1196.app(("field lookup expression"),anf_arg1197);
break;
case 1: var anf_arg1203 = $ans1194;
$al1195 = L[487];
var anf_method_obj1199 = G(ED5,"para",L[487]);
$step1191 = 2;
$al1195 = L[488];
$field1198 = R.getColonFieldLoc(ED5,"text",L[488]);
if(R.isMethod($field1198)) {
$ans1194 = $field1198.full_meth(ED5,("The left side was a constructor, not an object."));
} else {
if(!(R.isFunction($field1198))) {
R.ffi.throwNonFunApp(L[488],$field1198);
}
$ans1194 = $field1198.app(("The left side was a constructor, not an object."));
}
break;
case 2: var anf_arg1200 = $ans1194;
$step1191 = 3;
$al1195 = L[487];
$field1201 = R.getColonFieldLoc(anf_method_obj1199,"make1",L[487]);
if(R.isMethod($field1201)) {
$ans1194 = $field1201.full_meth(anf_method_obj1199,anf_arg1200);
} else {
if(!(R.isFunction($field1201))) {
R.ffi.throwNonFunApp(L[487],$field1201);
}
$ans1194 = $field1201.app(anf_arg1200);
}
break;
case 3: var anf_arg1204 = $ans1194;
$step1191 = 4;
$al1195 = L[485];
$field1205 = R.getColonFieldLoc(anf_method_obj1202,"make2",L[485]);
if(R.isMethod($field1205)) {
$ans1194 = $field1205.full_meth(anf_method_obj1202,anf_arg1203,anf_arg1204);
} else {
if(!(R.isFunction($field1205))) {
R.ffi.throwNonFunApp(L[485],$field1205);
}
$ans1194 = $field1205.app(anf_arg1203,anf_arg1204);
}
break;
case 4: ++R.GAS;
return $ans1194;
default: throw "No case numbered " + $step1191 + " in $temp_full1192";
}
}
} catch($e1206) {
if(R.isCont($e1206) && ($step1191 !== 4)) {
$e1206.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1195,$temp_full1192,$step1191,[self1193],[anf_method_obj1202,anf_arg1203,anf_method_obj1199]);
}
if(R.isPyretException($e1206)) {
$e1206.pyretStack.push($al1195);
}
throw $e1206;
}
};
var anf_variant_member6214 = R.makeMethod0($temp_full1192,"render-reason");
var $temp_full1208 = function($self1209,$maybe$stack$loc1210,$src$available1211,$maybe$ast1212) {
var $step1207 = 0;
var $ans1213 = D;
var $al1214 = L[541];
try {
if(R.isActivationRecord($self1209)) {
$step1207 = $self1209.step;
$al1214 = $self1209.from;
$ans1213 = $self1209.ans;
self1209 = $self1209.args[0];
maybe$stack$loc1210 = $self1209.args[1];
src$available1211 = $self1209.args[2];
maybe$ast1212 = $self1209.args[3];
anf_method_obj1226 = $self1209.vars[0];
anf_arg1227 = $self1209.vars[1];
anf_method_obj1221 = $self1209.vars[2];
anf_arg1228 = $self1209.vars[3];
cases1234 = $self1209.vars[4];
anf_method_obj1312 = $self1209.vars[5];
anf_arg1313 = $self1209.vars[6];
anf_method_obj1307 = $self1209.vars[7];
anf_arg1314 = $self1209.vars[8];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[541],4,$t);
}
var self1209 = $self1209;
var maybe$stack$loc1210 = $maybe$stack$loc1210;
var src$available1211 = $src$available1211;
var maybe$ast1212 = $maybe$ast1212;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1207) {
case 0: $al1214 = L[491];
var anf_method_obj1215 = G(self1209,"loc",L[491]);
$step1207 = 1;
$al1214 = L[492];
$field1216 = R.getColonFieldLoc(anf_method_obj1215,"is-builtin",L[492]);
if(R.isMethod($field1216)) {
$ans1213 = $field1216.full_meth(anf_method_obj1215);
} else {
if(!(R.isFunction($field1216))) {
R.ffi.throwNonFunApp(L[492],$field1216);
}
$ans1213 = $field1216.app();
}
break;
case 1: var anf_arg1217 = $ans1213;
$al1214 = L[492];
var anf_if1318 = R.checkWrapBoolean(anf_arg1217);
$step1207 = R.isPyretTrue(anf_if1318)?2:7;
break;
case 2: $al1214 = L[493];
var anf_method_obj1226 = G(ED5,"error",L[493]);
var anf_fun1218 = ed$simple$intro95.$var;
$al1214 = L[494];
var anf_arg1219 = G(self1209,"loc",L[494]);
$step1207 = 3;
$al1214 = L[499];
if(!(R.isFunction(anf_fun1218))) {
R.ffi.throwNonFunApp($al1214,anf_fun1218);
}
$ans1213 = anf_fun1218.app(("tuple lookup expression"),anf_arg1219);
break;
case 3: var anf_arg1227 = $ans1213;
$al1214 = L[495];
var anf_method_obj1221 = G(ED5,"para",L[495]);
$step1207 = 4;
$al1214 = L[496];
$field1220 = R.getColonFieldLoc(ED5,"text",L[496]);
if(R.isMethod($field1220)) {
$ans1213 = $field1220.full_meth(ED5,("The left side was not a tuple value:"));
} else {
if(!(R.isFunction($field1220))) {
R.ffi.throwNonFunApp(L[496],$field1220);
}
$ans1213 = $field1220.app(("The left side was not a tuple value:"));
}
break;
case 4: var anf_arg1222 = $ans1213;
$step1207 = 5;
$al1214 = L[495];
$field1223 = R.getColonFieldLoc(anf_method_obj1221,"make1",L[495]);
if(R.isMethod($field1223)) {
$ans1213 = $field1223.full_meth(anf_method_obj1221,anf_arg1222);
} else {
if(!(R.isFunction($field1223))) {
R.ffi.throwNonFunApp(L[495],$field1223);
}
$ans1213 = $field1223.app(anf_arg1222);
}
break;
case 5: var anf_arg1228 = $ans1213;
$al1214 = L[497];
var anf_arg1224 = G(self1209,"non-tup",L[497]);
$step1207 = 6;
$al1214 = L[498];
$field1225 = R.getColonFieldLoc(ED5,"embed",L[498]);
if(R.isMethod($field1225)) {
$ans1213 = $field1225.full_meth(ED5,anf_arg1224);
} else {
if(!(R.isFunction($field1225))) {
R.ffi.throwNonFunApp(L[498],$field1225);
}
$ans1213 = $field1225.app(anf_arg1224);
}
break;
case 6: var anf_arg1229 = $ans1213;
$step1207 = 20;
$al1214 = L[493];
$field1230 = R.getColonFieldLoc(anf_method_obj1226,"make3",L[493]);
if(R.isMethod($field1230)) {
$ans1213 = $field1230.full_meth(anf_method_obj1226,anf_arg1227,anf_arg1228,anf_arg1229);
} else {
if(!(R.isFunction($field1230))) {
R.ffi.throwNonFunApp(L[493],$field1230);
}
$ans1213 = $field1230.app(anf_arg1227,anf_arg1228,anf_arg1229);
}
break;
case 7: $al1214 = L[500];
var anf_arg1231 = G(self1209,"loc",L[500]);
$step1207 = 8;
$al1214 = L[501];
if(!(R.isFunction(src$available1211))) {
R.ffi.throwNonFunApp($al1214,src$available1211);
}
$ans1213 = src$available1211.app(anf_arg1231);
break;
case 8: var anf_arg1232 = $ans1213;
$al1214 = L[501];
var anf_if1317 = R.checkWrapBoolean(anf_arg1232);
$step1207 = R.isPyretTrue(anf_if1317)?9:15;
break;
case 9: $al1214 = L[502];
var anf_arg1233 = G(self1209,"loc",L[502]);
$step1207 = 10;
$al1214 = L[533];
if(!(R.isFunction(maybe$ast1212))) {
R.ffi.throwNonFunApp($al1214,maybe$ast1212);
}
$ans1213 = maybe$ast1212.app(anf_arg1233);
break;
case 10: var cases1234 = $ans1213;
$step1207 = 11;
$al1214 = L[532];
R._checkAnn(L[532],R.getDotAnn(L[532],"O",O13,"Option"),cases1234);
break;
case 11: var $cases_dispatch1303 = {"some":12,
"none":13};
$al1214 = L[519];
$step1207 = $cases_dispatch1303[cases1234.$name] || 14;
break;
case 12: if(cases1234.$arity !== 1) {
if(cases1234.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[518],1,cases1234.$arity,L[519]);
} else {
R.ffi.throwCasesSingletonErrorC(L[518],true,L[519]);
}
}
$step1207 = 20;
$al1214 = L[520];
var $temp_branch1263 = function($ast1241) {
var $step1264 = 0;
var $ans1265 = D;
var $al1266 = L[503];
try {
if(R.isActivationRecord($ast1241)) {
$step1264 = $ast1241.step;
$al1266 = $ast1241.from;
$ans1265 = $ast1241.ans;
ast1241 = $ast1241.args[0];
anf_method_obj1257 = $ast1241.vars[0];
anf_arg1258 = $ast1241.vars[1];
anf_arg1259 = $ast1241.vars[2];
anf_method_obj1250 = $ast1241.vars[3];
anf_arg1251 = $ast1241.vars[4];
anf_arg1246 = $ast1241.vars[5];
anf_arg1252 = $ast1241.vars[6];
anf_arg1260 = $ast1241.vars[7];
} else {
var ast1241 = $ast1241;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1264) {
case 0: $al1266 = L[503];
var anf_method_obj1257 = G(ED5,"error",L[503]);
var anf_fun1235 = ed$intro122.$var;
$al1266 = L[504];
var anf_arg1236 = G(self1209,"loc",L[504]);
$step1264 = 1;
$al1266 = L[517];
if(!(R.isFunction(anf_fun1235))) {
R.ffi.throwNonFunApp($al1266,anf_fun1235);
}
$ans1265 = anf_fun1235.app(("tuple lookup expression"),anf_arg1236,(-1),(true));
break;
case 1: var anf_arg1258 = $ans1265;
$al1266 = L[505];
var anf_arg1237 = G(self1209,"loc",L[505]);
$step1264 = 2;
$al1266 = L[506];
$field1267 = R.getColonFieldLoc(ED5,"cmcode",L[506]);
if(R.isMethod($field1267)) {
$ans1265 = $field1267.full_meth(ED5,anf_arg1237);
} else {
if(!(R.isFunction($field1267))) {
R.ffi.throwNonFunApp(L[506],$field1267);
}
$ans1265 = $field1267.app(anf_arg1237);
}
break;
case 2: var anf_arg1259 = $ans1265;
$al1266 = L[507];
var anf_method_obj1250 = G(ED5,"para",L[507]);
$step1264 = 3;
$al1266 = L[508];
$field1268 = R.getColonFieldLoc(ED5,"text",L[508]);
if(R.isMethod($field1268)) {
$ans1265 = $field1268.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field1268))) {
R.ffi.throwNonFunApp(L[508],$field1268);
}
$ans1265 = $field1268.app(("The "));
}
break;
case 3: var anf_arg1251 = $ans1265;
$step1264 = 4;
$al1266 = L[509];
$field1269 = R.getColonFieldLoc(ED5,"text",L[509]);
if(R.isMethod($field1269)) {
$ans1265 = $field1269.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field1269))) {
R.ffi.throwNonFunApp(L[509],$field1269);
}
$ans1265 = $field1269.app(("left side"));
}
break;
case 4: var anf_arg1246 = $ans1265;
$al1266 = L[510];
var anf_method_obj1243 = G(ED5,"locs",L[510]);
$al1266 = L[511];
var anf_bracket1242 = G(ast1241,"tup",L[511]);
$al1266 = L[512];
var anf_arg1244 = G(anf_bracket1242,"l",L[512]);
$step1264 = 5;
$al1266 = L[510];
$field1270 = R.getColonFieldLoc(anf_method_obj1243,"make1",L[510]);
if(R.isMethod($field1270)) {
$ans1265 = $field1270.full_meth(anf_method_obj1243,anf_arg1244);
} else {
if(!(R.isFunction($field1270))) {
R.ffi.throwNonFunApp(L[510],$field1270);
}
$ans1265 = $field1270.app(anf_arg1244);
}
break;
case 5: var anf_arg1247 = $ans1265;
$step1264 = 6;
$al1266 = L[513];
$field1271 = R.getColonFieldLoc(ED5,"highlight",L[513]);
if(R.isMethod($field1271)) {
$ans1265 = $field1271.full_meth(ED5,anf_arg1246,anf_arg1247,(0));
} else {
if(!(R.isFunction($field1271))) {
R.ffi.throwNonFunApp(L[513],$field1271);
}
$ans1265 = $field1271.app(anf_arg1246,anf_arg1247,(0));
}
break;
case 6: var anf_arg1252 = $ans1265;
$step1264 = 7;
$al1266 = L[514];
$field1272 = R.getColonFieldLoc(ED5,"text",L[514]);
if(R.isMethod($field1272)) {
$ans1265 = $field1272.full_meth(ED5,(" was not a tuple value:"));
} else {
if(!(R.isFunction($field1272))) {
R.ffi.throwNonFunApp(L[514],$field1272);
}
$ans1265 = $field1272.app((" was not a tuple value:"));
}
break;
case 7: var anf_arg1253 = $ans1265;
$step1264 = 8;
$al1266 = L[507];
$field1273 = R.getColonFieldLoc(anf_method_obj1250,"make3",L[507]);
if(R.isMethod($field1273)) {
$ans1265 = $field1273.full_meth(anf_method_obj1250,anf_arg1251,anf_arg1252,anf_arg1253);
} else {
if(!(R.isFunction($field1273))) {
R.ffi.throwNonFunApp(L[507],$field1273);
}
$ans1265 = $field1273.app(anf_arg1251,anf_arg1252,anf_arg1253);
}
break;
case 8: var anf_arg1260 = $ans1265;
$al1266 = L[515];
var anf_arg1255 = G(self1209,"non-tup",L[515]);
$step1264 = 9;
$al1266 = L[516];
$field1274 = R.getColonFieldLoc(ED5,"embed",L[516]);
if(R.isMethod($field1274)) {
$ans1265 = $field1274.full_meth(ED5,anf_arg1255);
} else {
if(!(R.isFunction($field1274))) {
R.ffi.throwNonFunApp(L[516],$field1274);
}
$ans1265 = $field1274.app(anf_arg1255);
}
break;
case 9: var anf_arg1261 = $ans1265;
$step1264 = 10;
$al1266 = L[503];
$field1275 = R.getColonFieldLoc(anf_method_obj1257,"make4",L[503]);
if(R.isMethod($field1275)) {
$ans1265 = $field1275.full_meth(anf_method_obj1257,anf_arg1258,anf_arg1259,anf_arg1260,anf_arg1261);
} else {
if(!(R.isFunction($field1275))) {
R.ffi.throwNonFunApp(L[503],$field1275);
}
$ans1265 = $field1275.app(anf_arg1258,anf_arg1259,anf_arg1260,anf_arg1261);
}
break;
case 10: ++R.GAS;
return $ans1265;
default: throw "No case numbered " + $step1264 + " in $temp_branch1263";
}
}
} catch($e1276) {
if(R.isCont($e1276) && ($step1264 !== 10)) {
$e1276.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1266,$temp_branch1263,$step1264,[ast1241],[anf_method_obj1257,anf_arg1258,anf_arg1259,anf_method_obj1250,anf_arg1251,anf_arg1246,anf_arg1252,anf_arg1260]);
}
if(R.isPyretException($e1276)) {
$e1276.pyretStack.push($al1266);
}
throw $e1276;
}
};
$ans1213 = cases1234.$app_fields($temp_branch1263,[false]);
break;
case 13: if(cases1234.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[530],false,L[519]);
}
$step1207 = 20;
$al1214 = L[531];
var $temp_branch1293 = function($$resumer101) {
var $step1294 = 0;
var $ans1295 = D;
var $al1296 = L[521];
try {
if(R.isActivationRecord($$resumer101)) {
$step1294 = $$resumer101.step;
$al1296 = $$resumer101.from;
$ans1295 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj1287 = $$resumer101.vars[0];
anf_arg1288 = $$resumer101.vars[1];
anf_arg1289 = $$resumer101.vars[2];
anf_method_obj1282 = $$resumer101.vars[3];
anf_arg1290 = $$resumer101.vars[4];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1294) {
case 0: $al1296 = L[521];
var anf_method_obj1287 = G(ED5,"error",L[521]);
var anf_fun1277 = ed$intro122.$var;
$al1296 = L[522];
var anf_arg1278 = G(self1209,"loc",L[522]);
$step1294 = 1;
$al1296 = L[529];
if(!(R.isFunction(anf_fun1277))) {
R.ffi.throwNonFunApp($al1296,anf_fun1277);
}
$ans1295 = anf_fun1277.app(("tuple lookup expression"),anf_arg1278,(0),(true));
break;
case 1: var anf_arg1288 = $ans1295;
$al1296 = L[523];
var anf_arg1279 = G(self1209,"loc",L[523]);
$step1294 = 2;
$al1296 = L[524];
$field1297 = R.getColonFieldLoc(ED5,"cmcode",L[524]);
if(R.isMethod($field1297)) {
$ans1295 = $field1297.full_meth(ED5,anf_arg1279);
} else {
if(!(R.isFunction($field1297))) {
R.ffi.throwNonFunApp(L[524],$field1297);
}
$ans1295 = $field1297.app(anf_arg1279);
}
break;
case 2: var anf_arg1289 = $ans1295;
$al1296 = L[525];
var anf_method_obj1282 = G(ED5,"para",L[525]);
$step1294 = 3;
$al1296 = L[526];
$field1298 = R.getColonFieldLoc(ED5,"text",L[526]);
if(R.isMethod($field1298)) {
$ans1295 = $field1298.full_meth(ED5,("The left side was not a tuple value:"));
} else {
if(!(R.isFunction($field1298))) {
R.ffi.throwNonFunApp(L[526],$field1298);
}
$ans1295 = $field1298.app(("The left side was not a tuple value:"));
}
break;
case 3: var anf_arg1283 = $ans1295;
$step1294 = 4;
$al1296 = L[525];
$field1299 = R.getColonFieldLoc(anf_method_obj1282,"make1",L[525]);
if(R.isMethod($field1299)) {
$ans1295 = $field1299.full_meth(anf_method_obj1282,anf_arg1283);
} else {
if(!(R.isFunction($field1299))) {
R.ffi.throwNonFunApp(L[525],$field1299);
}
$ans1295 = $field1299.app(anf_arg1283);
}
break;
case 4: var anf_arg1290 = $ans1295;
$al1296 = L[527];
var anf_arg1285 = G(self1209,"non-tup",L[527]);
$step1294 = 5;
$al1296 = L[528];
$field1300 = R.getColonFieldLoc(ED5,"embed",L[528]);
if(R.isMethod($field1300)) {
$ans1295 = $field1300.full_meth(ED5,anf_arg1285);
} else {
if(!(R.isFunction($field1300))) {
R.ffi.throwNonFunApp(L[528],$field1300);
}
$ans1295 = $field1300.app(anf_arg1285);
}
break;
case 5: var anf_arg1291 = $ans1295;
$step1294 = 6;
$al1296 = L[521];
$field1301 = R.getColonFieldLoc(anf_method_obj1287,"make4",L[521]);
if(R.isMethod($field1301)) {
$ans1295 = $field1301.full_meth(anf_method_obj1287,anf_arg1288,anf_arg1289,anf_arg1290,anf_arg1291);
} else {
if(!(R.isFunction($field1301))) {
R.ffi.throwNonFunApp(L[521],$field1301);
}
$ans1295 = $field1301.app(anf_arg1288,anf_arg1289,anf_arg1290,anf_arg1291);
}
break;
case 6: ++R.GAS;
return $ans1295;
default: throw "No case numbered " + $step1294 + " in $temp_branch1293";
}
}
} catch($e1302) {
if(R.isCont($e1302) && ($step1294 !== 6)) {
$e1302.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1296,$temp_branch1293,$step1294,[],[anf_method_obj1287,anf_arg1288,anf_arg1289,anf_method_obj1282,anf_arg1290]);
}
if(R.isPyretException($e1302)) {
$e1302.pyretStack.push($al1296);
}
throw $e1302;
}
};
$ans1213 = cases1234.$app_fields($temp_branch1293,[]);
break;
case 14: $step1207 = 20;
$al1214 = L[519];
$ans1213 = R.throwNoCasesMatched(L[519],cases1234);
break;
case 15: $al1214 = L[534];
var anf_method_obj1312 = G(ED5,"error",L[534]);
var anf_fun1304 = ed$simple$intro95.$var;
$al1214 = L[535];
var anf_arg1305 = G(self1209,"loc",L[535]);
$step1207 = 16;
$al1214 = L[540];
if(!(R.isFunction(anf_fun1304))) {
R.ffi.throwNonFunApp($al1214,anf_fun1304);
}
$ans1213 = anf_fun1304.app(("tuple lookup expression"),anf_arg1305);
break;
case 16: var anf_arg1313 = $ans1213;
$al1214 = L[536];
var anf_method_obj1307 = G(ED5,"para",L[536]);
$step1207 = 17;
$al1214 = L[537];
$field1306 = R.getColonFieldLoc(ED5,"text",L[537]);
if(R.isMethod($field1306)) {
$ans1213 = $field1306.full_meth(ED5,("The left side was not a tuple value:"));
} else {
if(!(R.isFunction($field1306))) {
R.ffi.throwNonFunApp(L[537],$field1306);
}
$ans1213 = $field1306.app(("The left side was not a tuple value:"));
}
break;
case 17: var anf_arg1308 = $ans1213;
$step1207 = 18;
$al1214 = L[536];
$field1309 = R.getColonFieldLoc(anf_method_obj1307,"make1",L[536]);
if(R.isMethod($field1309)) {
$ans1213 = $field1309.full_meth(anf_method_obj1307,anf_arg1308);
} else {
if(!(R.isFunction($field1309))) {
R.ffi.throwNonFunApp(L[536],$field1309);
}
$ans1213 = $field1309.app(anf_arg1308);
}
break;
case 18: var anf_arg1314 = $ans1213;
$al1214 = L[538];
var anf_arg1310 = G(self1209,"non-tup",L[538]);
$step1207 = 19;
$al1214 = L[539];
$field1311 = R.getColonFieldLoc(ED5,"embed",L[539]);
if(R.isMethod($field1311)) {
$ans1213 = $field1311.full_meth(ED5,anf_arg1310);
} else {
if(!(R.isFunction($field1311))) {
R.ffi.throwNonFunApp(L[539],$field1311);
}
$ans1213 = $field1311.app(anf_arg1310);
}
break;
case 19: var anf_arg1315 = $ans1213;
$step1207 = 20;
$al1214 = L[534];
$field1316 = R.getColonFieldLoc(anf_method_obj1312,"make3",L[534]);
if(R.isMethod($field1316)) {
$ans1213 = $field1316.full_meth(anf_method_obj1312,anf_arg1313,anf_arg1314,anf_arg1315);
} else {
if(!(R.isFunction($field1316))) {
R.ffi.throwNonFunApp(L[534],$field1316);
}
$ans1213 = $field1316.app(anf_arg1313,anf_arg1314,anf_arg1315);
}
break;
case 20: ++R.GAS;
return $ans1213;
default: throw "No case numbered " + $step1207 + " in $temp_full1208";
}
}
} catch($e1319) {
if(R.isCont($e1319) && ($step1207 !== 20)) {
$e1319.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1214,$temp_full1208,$step1207,[self1209,maybe$stack$loc1210,src$available1211,maybe$ast1212],[anf_method_obj1226,anf_arg1227,anf_method_obj1221,anf_arg1228,cases1234,anf_method_obj1312,anf_arg1313,anf_method_obj1307,anf_arg1314]);
}
if(R.isPyretException($e1319)) {
$e1319.pyretStack.push($al1214);
}
throw $e1319;
}
};
var anf_variant_member6225 = R.makeMethod3($temp_full1208,"render-fancy-reason");
var $temp_full1321 = function($self1322) {
var $step1320 = 0;
var $ans1323 = D;
var $al1324 = L[549];
try {
if(R.isActivationRecord($self1322)) {
$step1320 = $self1322.step;
$al1324 = $self1322.from;
$ans1323 = $self1322.ans;
self1322 = $self1322.args[0];
anf_method_obj1333 = $self1322.vars[0];
anf_arg1334 = $self1322.vars[1];
anf_method_obj1328 = $self1322.vars[2];
anf_arg1335 = $self1322.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[549],1,$t);
}
var self1322 = $self1322;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1320) {
case 0: $al1324 = L[542];
var anf_method_obj1333 = G(ED5,"error",L[542]);
var anf_fun1325 = ed$simple$intro95.$var;
$al1324 = L[543];
var anf_arg1326 = G(self1322,"loc",L[543]);
$step1320 = 1;
$al1324 = L[548];
if(!(R.isFunction(anf_fun1325))) {
R.ffi.throwNonFunApp($al1324,anf_fun1325);
}
$ans1323 = anf_fun1325.app(("tuple lookup expression"),anf_arg1326);
break;
case 1: var anf_arg1334 = $ans1323;
$al1324 = L[544];
var anf_method_obj1328 = G(ED5,"para",L[544]);
$step1320 = 2;
$al1324 = L[545];
$field1327 = R.getColonFieldLoc(ED5,"text",L[545]);
if(R.isMethod($field1327)) {
$ans1323 = $field1327.full_meth(ED5,("The left side was not a tuple value:"));
} else {
if(!(R.isFunction($field1327))) {
R.ffi.throwNonFunApp(L[545],$field1327);
}
$ans1323 = $field1327.app(("The left side was not a tuple value:"));
}
break;
case 2: var anf_arg1329 = $ans1323;
$step1320 = 3;
$al1324 = L[544];
$field1330 = R.getColonFieldLoc(anf_method_obj1328,"make1",L[544]);
if(R.isMethod($field1330)) {
$ans1323 = $field1330.full_meth(anf_method_obj1328,anf_arg1329);
} else {
if(!(R.isFunction($field1330))) {
R.ffi.throwNonFunApp(L[544],$field1330);
}
$ans1323 = $field1330.app(anf_arg1329);
}
break;
case 3: var anf_arg1335 = $ans1323;
$al1324 = L[546];
var anf_arg1331 = G(self1322,"non-tup",L[546]);
$step1320 = 4;
$al1324 = L[547];
$field1332 = R.getColonFieldLoc(ED5,"embed",L[547]);
if(R.isMethod($field1332)) {
$ans1323 = $field1332.full_meth(ED5,anf_arg1331);
} else {
if(!(R.isFunction($field1332))) {
R.ffi.throwNonFunApp(L[547],$field1332);
}
$ans1323 = $field1332.app(anf_arg1331);
}
break;
case 4: var anf_arg1336 = $ans1323;
$step1320 = 5;
$al1324 = L[542];
$field1337 = R.getColonFieldLoc(anf_method_obj1333,"make3",L[542]);
if(R.isMethod($field1337)) {
$ans1323 = $field1337.full_meth(anf_method_obj1333,anf_arg1334,anf_arg1335,anf_arg1336);
} else {
if(!(R.isFunction($field1337))) {
R.ffi.throwNonFunApp(L[542],$field1337);
}
$ans1323 = $field1337.app(anf_arg1334,anf_arg1335,anf_arg1336);
}
break;
case 5: ++R.GAS;
return $ans1323;
default: throw "No case numbered " + $step1320 + " in $temp_full1321";
}
}
} catch($e1338) {
if(R.isCont($e1338) && ($step1320 !== 5)) {
$e1338.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1324,$temp_full1321,$step1320,[self1322],[anf_method_obj1333,anf_arg1334,anf_method_obj1328,anf_arg1335]);
}
if(R.isPyretException($e1338)) {
$e1338.pyretStack.push($al1324);
}
throw $e1338;
}
};
var anf_variant_member6226 = R.makeMethod0($temp_full1321,"render-reason");
var $temp_full1340 = function($self1341,$maybe$stack$loc1342,$src$available1343,$maybe$ast1344) {
var $step1339 = 0;
var $ans1345 = D;
var $al1346 = L[634];
try {
if(R.isActivationRecord($self1341)) {
$step1339 = $self1341.step;
$al1346 = $self1341.from;
$ans1345 = $self1341.ans;
self1341 = $self1341.args[0];
maybe$stack$loc1342 = $self1341.args[1];
src$available1343 = $self1341.args[2];
maybe$ast1344 = $self1341.args[3];
anf_method_obj1368 = $self1341.vars[0];
anf_arg1369 = $self1341.vars[1];
anf_method_obj1360 = $self1341.vars[2];
anf_arg1361 = $self1341.vars[3];
anf_arg1362 = $self1341.vars[4];
anf_arg1363 = $self1341.vars[5];
anf_arg1370 = $self1341.vars[6];
cases1376 = $self1341.vars[7];
anf_method_obj1496 = $self1341.vars[8];
anf_arg1497 = $self1341.vars[9];
anf_method_obj1488 = $self1341.vars[10];
anf_arg1489 = $self1341.vars[11];
anf_arg1490 = $self1341.vars[12];
anf_arg1491 = $self1341.vars[13];
anf_arg1498 = $self1341.vars[14];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[634],4,$t);
}
var self1341 = $self1341;
var maybe$stack$loc1342 = $maybe$stack$loc1342;
var src$available1343 = $src$available1343;
var maybe$ast1344 = $maybe$ast1344;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1339) {
case 0: $al1346 = L[550];
var anf_method_obj1347 = G(self1341,"loc",L[550]);
$step1339 = 1;
$al1346 = L[551];
$field1348 = R.getColonFieldLoc(anf_method_obj1347,"is-builtin",L[551]);
if(R.isMethod($field1348)) {
$ans1345 = $field1348.full_meth(anf_method_obj1347);
} else {
if(!(R.isFunction($field1348))) {
R.ffi.throwNonFunApp(L[551],$field1348);
}
$ans1345 = $field1348.app();
}
break;
case 1: var anf_arg1349 = $ans1345;
$al1346 = L[551];
var anf_if1502 = R.checkWrapBoolean(anf_arg1349);
$step1339 = R.isPyretTrue(anf_if1502)?2:12;
break;
case 2: $al1346 = L[552];
var anf_method_obj1368 = G(ED5,"error",L[552]);
var anf_fun1350 = ed$simple$intro95.$var;
$al1346 = L[553];
var anf_arg1351 = G(self1341,"loc",L[553]);
$step1339 = 3;
$al1346 = L[565];
if(!(R.isFunction(anf_fun1350))) {
R.ffi.throwNonFunApp($al1346,anf_fun1350);
}
$ans1345 = anf_fun1350.app(("tuple lookup expression"),anf_arg1351);
break;
case 3: var anf_arg1369 = $ans1345;
$al1346 = L[554];
var anf_method_obj1360 = G(ED5,"para",L[554]);
$step1339 = 4;
$al1346 = L[555];
$field1352 = R.getColonFieldLoc(ED5,"text",L[555]);
if(R.isMethod($field1352)) {
$ans1345 = $field1352.full_meth(ED5,("The left side was a tuple of "));
} else {
if(!(R.isFunction($field1352))) {
R.ffi.throwNonFunApp(L[555],$field1352);
}
$ans1345 = $field1352.app(("The left side was a tuple of "));
}
break;
case 4: var anf_arg1361 = $ans1345;
$al1346 = L[556];
var anf_arg1353 = G(self1341,"len",L[556]);
$step1339 = 5;
$al1346 = L[557];
$field1354 = R.getColonFieldLoc(ED5,"ed-components",L[557]);
if(R.isMethod($field1354)) {
$ans1345 = $field1354.full_meth(ED5,anf_arg1353);
} else {
if(!(R.isFunction($field1354))) {
R.ffi.throwNonFunApp(L[557],$field1354);
}
$ans1345 = $field1354.app(anf_arg1353);
}
break;
case 5: var anf_arg1362 = $ans1345;
$step1339 = 6;
$al1346 = L[558];
$field1355 = R.getColonFieldLoc(ED5,"text",L[558]);
if(R.isMethod($field1355)) {
$ans1345 = $field1355.full_meth(ED5,(", smaller than the given position ("));
} else {
if(!(R.isFunction($field1355))) {
R.ffi.throwNonFunApp(L[558],$field1355);
}
$ans1345 = $field1355.app((", smaller than the given position ("));
}
break;
case 6: var anf_arg1363 = $ans1345;
$al1346 = L[559];
var anf_arg1356 = G(self1341,"index",L[559]);
$step1339 = 7;
$al1346 = L[564];
if(!(R.isFunction(num$to$string3))) {
R.ffi.throwNonFunApp($al1346,num$to$string3);
}
$ans1345 = num$to$string3.app(anf_arg1356);
break;
case 7: var anf_arg1357 = $ans1345;
$step1339 = 8;
$al1346 = L[563];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1346,_plus1);
}
$ans1345 = _plus1.app(anf_arg1357,("):"));
break;
case 8: var anf_arg1358 = $ans1345;
$step1339 = 9;
$al1346 = L[560];
$field1359 = R.getColonFieldLoc(ED5,"text",L[560]);
if(R.isMethod($field1359)) {
$ans1345 = $field1359.full_meth(ED5,anf_arg1358);
} else {
if(!(R.isFunction($field1359))) {
R.ffi.throwNonFunApp(L[560],$field1359);
}
$ans1345 = $field1359.app(anf_arg1358);
}
break;
case 9: var anf_arg1364 = $ans1345;
$step1339 = 10;
$al1346 = L[554];
$field1365 = R.getColonFieldLoc(anf_method_obj1360,"make4",L[554]);
if(R.isMethod($field1365)) {
$ans1345 = $field1365.full_meth(anf_method_obj1360,anf_arg1361,anf_arg1362,anf_arg1363,anf_arg1364);
} else {
if(!(R.isFunction($field1365))) {
R.ffi.throwNonFunApp(L[554],$field1365);
}
$ans1345 = $field1365.app(anf_arg1361,anf_arg1362,anf_arg1363,anf_arg1364);
}
break;
case 10: var anf_arg1370 = $ans1345;
$al1346 = L[561];
var anf_arg1366 = G(self1341,"tup",L[561]);
$step1339 = 11;
$al1346 = L[562];
$field1367 = R.getColonFieldLoc(ED5,"embed",L[562]);
if(R.isMethod($field1367)) {
$ans1345 = $field1367.full_meth(ED5,anf_arg1366);
} else {
if(!(R.isFunction($field1367))) {
R.ffi.throwNonFunApp(L[562],$field1367);
}
$ans1345 = $field1367.app(anf_arg1366);
}
break;
case 11: var anf_arg1371 = $ans1345;
$step1339 = 30;
$al1346 = L[552];
$field1372 = R.getColonFieldLoc(anf_method_obj1368,"make3",L[552]);
if(R.isMethod($field1372)) {
$ans1345 = $field1372.full_meth(anf_method_obj1368,anf_arg1369,anf_arg1370,anf_arg1371);
} else {
if(!(R.isFunction($field1372))) {
R.ffi.throwNonFunApp(L[552],$field1372);
}
$ans1345 = $field1372.app(anf_arg1369,anf_arg1370,anf_arg1371);
}
break;
case 12: $al1346 = L[566];
var anf_arg1373 = G(self1341,"loc",L[566]);
$step1339 = 13;
$al1346 = L[567];
if(!(R.isFunction(src$available1343))) {
R.ffi.throwNonFunApp($al1346,src$available1343);
}
$ans1345 = src$available1343.app(anf_arg1373);
break;
case 13: var anf_arg1374 = $ans1345;
$al1346 = L[567];
var anf_if1501 = R.checkWrapBoolean(anf_arg1374);
$step1339 = R.isPyretTrue(anf_if1501)?14:20;
break;
case 14: $al1346 = L[568];
var anf_arg1375 = G(self1341,"loc",L[568]);
$step1339 = 15;
$al1346 = L[619];
if(!(R.isFunction(maybe$ast1344))) {
R.ffi.throwNonFunApp($al1346,maybe$ast1344);
}
$ans1345 = maybe$ast1344.app(anf_arg1375);
break;
case 15: var cases1376 = $ans1345;
$step1339 = 16;
$al1346 = L[618];
R._checkAnn(L[618],R.getDotAnn(L[618],"O",O13,"Option"),cases1376);
break;
case 16: var $cases_dispatch1477 = {"some":17,
"none":18};
$al1346 = L[598];
$step1339 = $cases_dispatch1477[cases1376.$name] || 19;
break;
case 17: if(cases1376.$arity !== 1) {
if(cases1376.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[597],1,cases1376.$arity,L[598]);
} else {
R.ffi.throwCasesSingletonErrorC(L[597],true,L[598]);
}
}
$step1339 = 30;
$al1346 = L[599];
var $temp_branch1418 = function($ast1383) {
var $step1419 = 0;
var $ans1420 = D;
var $al1421 = L[569];
try {
if(R.isActivationRecord($ast1383)) {
$step1419 = $ast1383.step;
$al1421 = $ast1383.from;
$ans1420 = $ast1383.ans;
ast1383 = $ast1383.args[0];
anf_method_obj1412 = $ast1383.vars[0];
anf_arg1413 = $ast1383.vars[1];
anf_arg1414 = $ast1383.vars[2];
anf_method_obj1407 = $ast1383.vars[3];
anf_array1408 = $ast1383.vars[4];
anf_arg1388 = $ast1383.vars[5];
anf_arg1399 = $ast1383.vars[6];
anf_arg1415 = $ast1383.vars[7];
} else {
var ast1383 = $ast1383;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1419) {
case 0: $al1421 = L[569];
var anf_method_obj1412 = G(ED5,"error",L[569]);
var anf_fun1377 = ed$intro122.$var;
$al1421 = L[570];
var anf_arg1378 = G(self1341,"loc",L[570]);
$step1419 = 1;
$al1421 = L[596];
if(!(R.isFunction(anf_fun1377))) {
R.ffi.throwNonFunApp($al1421,anf_fun1377);
}
$ans1420 = anf_fun1377.app(("tuple lookup expression"),anf_arg1378,(-1),(true));
break;
case 1: var anf_arg1413 = $ans1420;
$al1421 = L[571];
var anf_arg1379 = G(self1341,"loc",L[571]);
$step1419 = 2;
$al1421 = L[572];
$field1422 = R.getColonFieldLoc(ED5,"cmcode",L[572]);
if(R.isMethod($field1422)) {
$ans1420 = $field1422.full_meth(ED5,anf_arg1379);
} else {
if(!(R.isFunction($field1422))) {
R.ffi.throwNonFunApp(L[572],$field1422);
}
$ans1420 = $field1422.app(anf_arg1379);
}
break;
case 2: var anf_arg1414 = $ans1420;
$al1421 = L[573];
var anf_method_obj1407 = G(ED5,"para",L[573]);
$al1421 = L[574];
var anf_array1408 = R.makeArrayN((7));
$step1419 = 3;
$al1421 = L[575];
$field1423 = R.getColonFieldLoc(ED5,"text",L[575]);
if(R.isMethod($field1423)) {
$ans1420 = $field1423.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field1423))) {
R.ffi.throwNonFunApp(L[575],$field1423);
}
$ans1420 = $field1423.app(("The "));
}
break;
case 3: anf_array1408[0] = $ans1420;
$step1419 = 4;
$al1421 = L[576];
$field1424 = R.getColonFieldLoc(ED5,"text",L[576]);
if(R.isMethod($field1424)) {
$ans1420 = $field1424.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field1424))) {
R.ffi.throwNonFunApp(L[576],$field1424);
}
$ans1420 = $field1424.app(("left side"));
}
break;
case 4: var anf_arg1388 = $ans1420;
$al1421 = L[577];
var anf_method_obj1385 = G(ED5,"locs",L[577]);
$al1421 = L[578];
var anf_bracket1384 = G(ast1383,"tup",L[578]);
$al1421 = L[579];
var anf_arg1386 = G(anf_bracket1384,"l",L[579]);
$step1419 = 5;
$al1421 = L[577];
$field1425 = R.getColonFieldLoc(anf_method_obj1385,"make1",L[577]);
if(R.isMethod($field1425)) {
$ans1420 = $field1425.full_meth(anf_method_obj1385,anf_arg1386);
} else {
if(!(R.isFunction($field1425))) {
R.ffi.throwNonFunApp(L[577],$field1425);
}
$ans1420 = $field1425.app(anf_arg1386);
}
break;
case 5: var anf_arg1389 = $ans1420;
$step1419 = 6;
$al1421 = L[580];
$field1426 = R.getColonFieldLoc(ED5,"highlight",L[580]);
if(R.isMethod($field1426)) {
$ans1420 = $field1426.full_meth(ED5,anf_arg1388,anf_arg1389,(0));
} else {
if(!(R.isFunction($field1426))) {
R.ffi.throwNonFunApp(L[580],$field1426);
}
$ans1420 = $field1426.app(anf_arg1388,anf_arg1389,(0));
}
break;
case 6: anf_array1408[1] = $ans1420;
$step1419 = 7;
$al1421 = L[581];
$field1427 = R.getColonFieldLoc(ED5,"text",L[581]);
if(R.isMethod($field1427)) {
$ans1420 = $field1427.full_meth(ED5,(" was a tuple of "));
} else {
if(!(R.isFunction($field1427))) {
R.ffi.throwNonFunApp(L[581],$field1427);
}
$ans1420 = $field1427.app((" was a tuple of "));
}
break;
case 7: anf_array1408[2] = $ans1420;
$al1421 = L[582];
var anf_arg1392 = G(self1341,"len",L[582]);
$step1419 = 8;
$al1421 = L[583];
$field1428 = R.getColonFieldLoc(ED5,"ed-components",L[583]);
if(R.isMethod($field1428)) {
$ans1420 = $field1428.full_meth(ED5,anf_arg1392);
} else {
if(!(R.isFunction($field1428))) {
R.ffi.throwNonFunApp(L[583],$field1428);
}
$ans1420 = $field1428.app(anf_arg1392);
}
break;
case 8: anf_array1408[3] = $ans1420;
$step1419 = 9;
$al1421 = L[584];
$field1429 = R.getColonFieldLoc(ED5,"text",L[584]);
if(R.isMethod($field1429)) {
$ans1420 = $field1429.full_meth(ED5,(", smaller than the given "));
} else {
if(!(R.isFunction($field1429))) {
R.ffi.throwNonFunApp(L[584],$field1429);
}
$ans1420 = $field1429.app((", smaller than the given "));
}
break;
case 9: anf_array1408[4] = $ans1420;
$step1419 = 10;
$al1421 = L[585];
$field1430 = R.getColonFieldLoc(ED5,"text",L[585]);
if(R.isMethod($field1430)) {
$ans1420 = $field1430.full_meth(ED5,("position"));
} else {
if(!(R.isFunction($field1430))) {
R.ffi.throwNonFunApp(L[585],$field1430);
}
$ans1420 = $field1430.app(("position"));
}
break;
case 10: var anf_arg1399 = $ans1420;
$al1421 = L[586];
var anf_method_obj1396 = G(ED5,"locs",L[586]);
$al1421 = L[587];
var anf_arg1397 = G(ast1383,"index-loc",L[587]);
$step1419 = 11;
$al1421 = L[586];
$field1431 = R.getColonFieldLoc(anf_method_obj1396,"make1",L[586]);
if(R.isMethod($field1431)) {
$ans1420 = $field1431.full_meth(anf_method_obj1396,anf_arg1397);
} else {
if(!(R.isFunction($field1431))) {
R.ffi.throwNonFunApp(L[586],$field1431);
}
$ans1420 = $field1431.app(anf_arg1397);
}
break;
case 11: var anf_arg1400 = $ans1420;
$step1419 = 12;
$al1421 = L[588];
$field1432 = R.getColonFieldLoc(ED5,"highlight",L[588]);
if(R.isMethod($field1432)) {
$ans1420 = $field1432.full_meth(ED5,anf_arg1399,anf_arg1400,(1));
} else {
if(!(R.isFunction($field1432))) {
R.ffi.throwNonFunApp(L[588],$field1432);
}
$ans1420 = $field1432.app(anf_arg1399,anf_arg1400,(1));
}
break;
case 12: anf_array1408[5] = $ans1420;
$al1421 = L[589];
var anf_arg1402 = G(self1341,"index",L[589]);
$step1419 = 13;
$al1421 = L[595];
if(!(R.isFunction(num$to$string3))) {
R.ffi.throwNonFunApp($al1421,num$to$string3);
}
$ans1420 = num$to$string3.app(anf_arg1402);
break;
case 13: var anf_arg1403 = $ans1420;
$step1419 = 14;
$al1421 = L[594];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1421,_plus1);
}
$ans1420 = _plus1.app((" ("),anf_arg1403);
break;
case 14: var anf_arg1404 = $ans1420;
$step1419 = 15;
$al1421 = L[593];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1421,_plus1);
}
$ans1420 = _plus1.app(anf_arg1404,("):"));
break;
case 15: var anf_arg1405 = $ans1420;
$step1419 = 16;
$al1421 = L[590];
$field1433 = R.getColonFieldLoc(ED5,"text",L[590]);
if(R.isMethod($field1433)) {
$ans1420 = $field1433.full_meth(ED5,anf_arg1405);
} else {
if(!(R.isFunction($field1433))) {
R.ffi.throwNonFunApp(L[590],$field1433);
}
$ans1420 = $field1433.app(anf_arg1405);
}
break;
case 16: anf_array1408[6] = $ans1420;
$step1419 = 17;
$al1421 = L[573];
$field1434 = R.getColonFieldLoc(anf_method_obj1407,"make",L[573]);
if(R.isMethod($field1434)) {
$ans1420 = $field1434.full_meth(anf_method_obj1407,anf_array1408);
} else {
if(!(R.isFunction($field1434))) {
R.ffi.throwNonFunApp(L[573],$field1434);
}
$ans1420 = $field1434.app(anf_array1408);
}
break;
case 17: var anf_arg1415 = $ans1420;
$al1421 = L[591];
var anf_arg1410 = G(self1341,"tup",L[591]);
$step1419 = 18;
$al1421 = L[592];
$field1435 = R.getColonFieldLoc(ED5,"embed",L[592]);
if(R.isMethod($field1435)) {
$ans1420 = $field1435.full_meth(ED5,anf_arg1410);
} else {
if(!(R.isFunction($field1435))) {
R.ffi.throwNonFunApp(L[592],$field1435);
}
$ans1420 = $field1435.app(anf_arg1410);
}
break;
case 18: var anf_arg1416 = $ans1420;
$step1419 = 19;
$al1421 = L[569];
$field1436 = R.getColonFieldLoc(anf_method_obj1412,"make4",L[569]);
if(R.isMethod($field1436)) {
$ans1420 = $field1436.full_meth(anf_method_obj1412,anf_arg1413,anf_arg1414,anf_arg1415,anf_arg1416);
} else {
if(!(R.isFunction($field1436))) {
R.ffi.throwNonFunApp(L[569],$field1436);
}
$ans1420 = $field1436.app(anf_arg1413,anf_arg1414,anf_arg1415,anf_arg1416);
}
break;
case 19: ++R.GAS;
return $ans1420;
default: throw "No case numbered " + $step1419 + " in $temp_branch1418";
}
}
} catch($e1437) {
if(R.isCont($e1437) && ($step1419 !== 19)) {
$e1437.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1421,$temp_branch1418,$step1419,[ast1383],[anf_method_obj1412,anf_arg1413,anf_arg1414,anf_method_obj1407,anf_array1408,anf_arg1388,anf_arg1399,anf_arg1415]);
}
if(R.isPyretException($e1437)) {
$e1437.pyretStack.push($al1421);
}
throw $e1437;
}
};
$ans1345 = cases1376.$app_fields($temp_branch1418,[false]);
break;
case 18: if(cases1376.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[616],false,L[598]);
}
$step1339 = 30;
$al1346 = L[617];
var $temp_branch1464 = function($$resumer101) {
var $step1465 = 0;
var $ans1466 = D;
var $al1467 = L[600];
try {
if(R.isActivationRecord($$resumer101)) {
$step1465 = $$resumer101.step;
$al1467 = $$resumer101.from;
$ans1466 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj1458 = $$resumer101.vars[0];
anf_arg1459 = $$resumer101.vars[1];
anf_arg1460 = $$resumer101.vars[2];
anf_method_obj1450 = $$resumer101.vars[3];
anf_arg1451 = $$resumer101.vars[4];
anf_arg1452 = $$resumer101.vars[5];
anf_arg1453 = $$resumer101.vars[6];
anf_arg1461 = $$resumer101.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1465) {
case 0: $al1467 = L[600];
var anf_method_obj1458 = G(ED5,"error",L[600]);
var anf_fun1438 = ed$intro122.$var;
$al1467 = L[601];
var anf_arg1439 = G(self1341,"loc",L[601]);
$step1465 = 1;
$al1467 = L[615];
if(!(R.isFunction(anf_fun1438))) {
R.ffi.throwNonFunApp($al1467,anf_fun1438);
}
$ans1466 = anf_fun1438.app(("tuple lookup expression"),anf_arg1439,(0),(true));
break;
case 1: var anf_arg1459 = $ans1466;
$al1467 = L[602];
var anf_arg1440 = G(self1341,"loc",L[602]);
$step1465 = 2;
$al1467 = L[603];
$field1468 = R.getColonFieldLoc(ED5,"cmcode",L[603]);
if(R.isMethod($field1468)) {
$ans1466 = $field1468.full_meth(ED5,anf_arg1440);
} else {
if(!(R.isFunction($field1468))) {
R.ffi.throwNonFunApp(L[603],$field1468);
}
$ans1466 = $field1468.app(anf_arg1440);
}
break;
case 2: var anf_arg1460 = $ans1466;
$al1467 = L[604];
var anf_method_obj1450 = G(ED5,"para",L[604]);
$step1465 = 3;
$al1467 = L[605];
$field1469 = R.getColonFieldLoc(ED5,"text",L[605]);
if(R.isMethod($field1469)) {
$ans1466 = $field1469.full_meth(ED5,("The left side was a tuple of "));
} else {
if(!(R.isFunction($field1469))) {
R.ffi.throwNonFunApp(L[605],$field1469);
}
$ans1466 = $field1469.app(("The left side was a tuple of "));
}
break;
case 3: var anf_arg1451 = $ans1466;
$al1467 = L[606];
var anf_arg1443 = G(self1341,"len",L[606]);
$step1465 = 4;
$al1467 = L[607];
$field1470 = R.getColonFieldLoc(ED5,"ed-components",L[607]);
if(R.isMethod($field1470)) {
$ans1466 = $field1470.full_meth(ED5,anf_arg1443);
} else {
if(!(R.isFunction($field1470))) {
R.ffi.throwNonFunApp(L[607],$field1470);
}
$ans1466 = $field1470.app(anf_arg1443);
}
break;
case 4: var anf_arg1452 = $ans1466;
$step1465 = 5;
$al1467 = L[608];
$field1471 = R.getColonFieldLoc(ED5,"text",L[608]);
if(R.isMethod($field1471)) {
$ans1466 = $field1471.full_meth(ED5,(", smaller than the given position ("));
} else {
if(!(R.isFunction($field1471))) {
R.ffi.throwNonFunApp(L[608],$field1471);
}
$ans1466 = $field1471.app((", smaller than the given position ("));
}
break;
case 5: var anf_arg1453 = $ans1466;
$al1467 = L[609];
var anf_arg1446 = G(self1341,"index",L[609]);
$step1465 = 6;
$al1467 = L[614];
if(!(R.isFunction(num$to$string3))) {
R.ffi.throwNonFunApp($al1467,num$to$string3);
}
$ans1466 = num$to$string3.app(anf_arg1446);
break;
case 6: var anf_arg1447 = $ans1466;
$step1465 = 7;
$al1467 = L[613];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1467,_plus1);
}
$ans1466 = _plus1.app(anf_arg1447,("):"));
break;
case 7: var anf_arg1448 = $ans1466;
$step1465 = 8;
$al1467 = L[610];
$field1472 = R.getColonFieldLoc(ED5,"text",L[610]);
if(R.isMethod($field1472)) {
$ans1466 = $field1472.full_meth(ED5,anf_arg1448);
} else {
if(!(R.isFunction($field1472))) {
R.ffi.throwNonFunApp(L[610],$field1472);
}
$ans1466 = $field1472.app(anf_arg1448);
}
break;
case 8: var anf_arg1454 = $ans1466;
$step1465 = 9;
$al1467 = L[604];
$field1473 = R.getColonFieldLoc(anf_method_obj1450,"make4",L[604]);
if(R.isMethod($field1473)) {
$ans1466 = $field1473.full_meth(anf_method_obj1450,anf_arg1451,anf_arg1452,anf_arg1453,anf_arg1454);
} else {
if(!(R.isFunction($field1473))) {
R.ffi.throwNonFunApp(L[604],$field1473);
}
$ans1466 = $field1473.app(anf_arg1451,anf_arg1452,anf_arg1453,anf_arg1454);
}
break;
case 9: var anf_arg1461 = $ans1466;
$al1467 = L[611];
var anf_arg1456 = G(self1341,"tup",L[611]);
$step1465 = 10;
$al1467 = L[612];
$field1474 = R.getColonFieldLoc(ED5,"embed",L[612]);
if(R.isMethod($field1474)) {
$ans1466 = $field1474.full_meth(ED5,anf_arg1456);
} else {
if(!(R.isFunction($field1474))) {
R.ffi.throwNonFunApp(L[612],$field1474);
}
$ans1466 = $field1474.app(anf_arg1456);
}
break;
case 10: var anf_arg1462 = $ans1466;
$step1465 = 11;
$al1467 = L[600];
$field1475 = R.getColonFieldLoc(anf_method_obj1458,"make4",L[600]);
if(R.isMethod($field1475)) {
$ans1466 = $field1475.full_meth(anf_method_obj1458,anf_arg1459,anf_arg1460,anf_arg1461,anf_arg1462);
} else {
if(!(R.isFunction($field1475))) {
R.ffi.throwNonFunApp(L[600],$field1475);
}
$ans1466 = $field1475.app(anf_arg1459,anf_arg1460,anf_arg1461,anf_arg1462);
}
break;
case 11: ++R.GAS;
return $ans1466;
default: throw "No case numbered " + $step1465 + " in $temp_branch1464";
}
}
} catch($e1476) {
if(R.isCont($e1476) && ($step1465 !== 11)) {
$e1476.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1467,$temp_branch1464,$step1465,[],[anf_method_obj1458,anf_arg1459,anf_arg1460,anf_method_obj1450,anf_arg1451,anf_arg1452,anf_arg1453,anf_arg1461]);
}
if(R.isPyretException($e1476)) {
$e1476.pyretStack.push($al1467);
}
throw $e1476;
}
};
$ans1345 = cases1376.$app_fields($temp_branch1464,[]);
break;
case 19: $step1339 = 30;
$al1346 = L[598];
$ans1345 = R.throwNoCasesMatched(L[598],cases1376);
break;
case 20: $al1346 = L[620];
var anf_method_obj1496 = G(ED5,"error",L[620]);
var anf_fun1478 = ed$simple$intro95.$var;
$al1346 = L[621];
var anf_arg1479 = G(self1341,"loc",L[621]);
$step1339 = 21;
$al1346 = L[633];
if(!(R.isFunction(anf_fun1478))) {
R.ffi.throwNonFunApp($al1346,anf_fun1478);
}
$ans1345 = anf_fun1478.app(("tuple lookup expression"),anf_arg1479);
break;
case 21: var anf_arg1497 = $ans1345;
$al1346 = L[622];
var anf_method_obj1488 = G(ED5,"para",L[622]);
$step1339 = 22;
$al1346 = L[623];
$field1480 = R.getColonFieldLoc(ED5,"text",L[623]);
if(R.isMethod($field1480)) {
$ans1345 = $field1480.full_meth(ED5,(" failed because the left side was a tuple of "));
} else {
if(!(R.isFunction($field1480))) {
R.ffi.throwNonFunApp(L[623],$field1480);
}
$ans1345 = $field1480.app((" failed because the left side was a tuple of "));
}
break;
case 22: var anf_arg1489 = $ans1345;
$al1346 = L[624];
var anf_arg1481 = G(self1341,"len",L[624]);
$step1339 = 23;
$al1346 = L[625];
$field1482 = R.getColonFieldLoc(ED5,"ed-components",L[625]);
if(R.isMethod($field1482)) {
$ans1345 = $field1482.full_meth(ED5,anf_arg1481);
} else {
if(!(R.isFunction($field1482))) {
R.ffi.throwNonFunApp(L[625],$field1482);
}
$ans1345 = $field1482.app(anf_arg1481);
}
break;
case 23: var anf_arg1490 = $ans1345;
$step1339 = 24;
$al1346 = L[626];
$field1483 = R.getColonFieldLoc(ED5,"text",L[626]);
if(R.isMethod($field1483)) {
$ans1345 = $field1483.full_meth(ED5,(", smaller than the given position ("));
} else {
if(!(R.isFunction($field1483))) {
R.ffi.throwNonFunApp(L[626],$field1483);
}
$ans1345 = $field1483.app((", smaller than the given position ("));
}
break;
case 24: var anf_arg1491 = $ans1345;
$al1346 = L[627];
var anf_arg1484 = G(self1341,"index",L[627]);
$step1339 = 25;
$al1346 = L[632];
if(!(R.isFunction(num$to$string3))) {
R.ffi.throwNonFunApp($al1346,num$to$string3);
}
$ans1345 = num$to$string3.app(anf_arg1484);
break;
case 25: var anf_arg1485 = $ans1345;
$step1339 = 26;
$al1346 = L[631];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1346,_plus1);
}
$ans1345 = _plus1.app(anf_arg1485,("):"));
break;
case 26: var anf_arg1486 = $ans1345;
$step1339 = 27;
$al1346 = L[628];
$field1487 = R.getColonFieldLoc(ED5,"text",L[628]);
if(R.isMethod($field1487)) {
$ans1345 = $field1487.full_meth(ED5,anf_arg1486);
} else {
if(!(R.isFunction($field1487))) {
R.ffi.throwNonFunApp(L[628],$field1487);
}
$ans1345 = $field1487.app(anf_arg1486);
}
break;
case 27: var anf_arg1492 = $ans1345;
$step1339 = 28;
$al1346 = L[622];
$field1493 = R.getColonFieldLoc(anf_method_obj1488,"make4",L[622]);
if(R.isMethod($field1493)) {
$ans1345 = $field1493.full_meth(anf_method_obj1488,anf_arg1489,anf_arg1490,anf_arg1491,anf_arg1492);
} else {
if(!(R.isFunction($field1493))) {
R.ffi.throwNonFunApp(L[622],$field1493);
}
$ans1345 = $field1493.app(anf_arg1489,anf_arg1490,anf_arg1491,anf_arg1492);
}
break;
case 28: var anf_arg1498 = $ans1345;
$al1346 = L[629];
var anf_arg1494 = G(self1341,"tup",L[629]);
$step1339 = 29;
$al1346 = L[630];
$field1495 = R.getColonFieldLoc(ED5,"embed",L[630]);
if(R.isMethod($field1495)) {
$ans1345 = $field1495.full_meth(ED5,anf_arg1494);
} else {
if(!(R.isFunction($field1495))) {
R.ffi.throwNonFunApp(L[630],$field1495);
}
$ans1345 = $field1495.app(anf_arg1494);
}
break;
case 29: var anf_arg1499 = $ans1345;
$step1339 = 30;
$al1346 = L[620];
$field1500 = R.getColonFieldLoc(anf_method_obj1496,"make3",L[620]);
if(R.isMethod($field1500)) {
$ans1345 = $field1500.full_meth(anf_method_obj1496,anf_arg1497,anf_arg1498,anf_arg1499);
} else {
if(!(R.isFunction($field1500))) {
R.ffi.throwNonFunApp(L[620],$field1500);
}
$ans1345 = $field1500.app(anf_arg1497,anf_arg1498,anf_arg1499);
}
break;
case 30: ++R.GAS;
return $ans1345;
default: throw "No case numbered " + $step1339 + " in $temp_full1340";
}
}
} catch($e1503) {
if(R.isCont($e1503) && ($step1339 !== 30)) {
$e1503.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1346,$temp_full1340,$step1339,[self1341,maybe$stack$loc1342,src$available1343,maybe$ast1344],[anf_method_obj1368,anf_arg1369,anf_method_obj1360,anf_arg1361,anf_arg1362,anf_arg1363,anf_arg1370,cases1376,anf_method_obj1496,anf_arg1497,anf_method_obj1488,anf_arg1489,anf_arg1490,anf_arg1491,anf_arg1498]);
}
if(R.isPyretException($e1503)) {
$e1503.pyretStack.push($al1346);
}
throw $e1503;
}
};
var anf_variant_member6237 = R.makeMethod3($temp_full1340,"render-fancy-reason");
var $temp_full1505 = function($self1506) {
var $step1504 = 0;
var $ans1507 = D;
var $al1508 = L[649];
try {
if(R.isActivationRecord($self1506)) {
$step1504 = $self1506.step;
$al1508 = $self1506.from;
$ans1507 = $self1506.ans;
self1506 = $self1506.args[0];
anf_method_obj1527 = $self1506.vars[0];
anf_arg1528 = $self1506.vars[1];
anf_method_obj1519 = $self1506.vars[2];
anf_arg1520 = $self1506.vars[3];
anf_arg1521 = $self1506.vars[4];
anf_arg1522 = $self1506.vars[5];
anf_arg1529 = $self1506.vars[6];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[649],1,$t);
}
var self1506 = $self1506;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1504) {
case 0: $al1508 = L[635];
var anf_method_obj1527 = G(ED5,"error",L[635]);
var anf_fun1509 = ed$simple$intro95.$var;
$al1508 = L[636];
var anf_arg1510 = G(self1506,"loc",L[636]);
$step1504 = 1;
$al1508 = L[648];
if(!(R.isFunction(anf_fun1509))) {
R.ffi.throwNonFunApp($al1508,anf_fun1509);
}
$ans1507 = anf_fun1509.app(("tuple lookup expression"),anf_arg1510);
break;
case 1: var anf_arg1528 = $ans1507;
$al1508 = L[637];
var anf_method_obj1519 = G(ED5,"para",L[637]);
$step1504 = 2;
$al1508 = L[638];
$field1511 = R.getColonFieldLoc(ED5,"text",L[638]);
if(R.isMethod($field1511)) {
$ans1507 = $field1511.full_meth(ED5,(" failed because the left side was a tuple of "));
} else {
if(!(R.isFunction($field1511))) {
R.ffi.throwNonFunApp(L[638],$field1511);
}
$ans1507 = $field1511.app((" failed because the left side was a tuple of "));
}
break;
case 2: var anf_arg1520 = $ans1507;
$al1508 = L[639];
var anf_arg1512 = G(self1506,"len",L[639]);
$step1504 = 3;
$al1508 = L[640];
$field1513 = R.getColonFieldLoc(ED5,"ed-components",L[640]);
if(R.isMethod($field1513)) {
$ans1507 = $field1513.full_meth(ED5,anf_arg1512);
} else {
if(!(R.isFunction($field1513))) {
R.ffi.throwNonFunApp(L[640],$field1513);
}
$ans1507 = $field1513.app(anf_arg1512);
}
break;
case 3: var anf_arg1521 = $ans1507;
$step1504 = 4;
$al1508 = L[641];
$field1514 = R.getColonFieldLoc(ED5,"text",L[641]);
if(R.isMethod($field1514)) {
$ans1507 = $field1514.full_meth(ED5,(", smaller than the given position ("));
} else {
if(!(R.isFunction($field1514))) {
R.ffi.throwNonFunApp(L[641],$field1514);
}
$ans1507 = $field1514.app((", smaller than the given position ("));
}
break;
case 4: var anf_arg1522 = $ans1507;
$al1508 = L[642];
var anf_arg1515 = G(self1506,"index",L[642]);
$step1504 = 5;
$al1508 = L[647];
if(!(R.isFunction(num$to$string3))) {
R.ffi.throwNonFunApp($al1508,num$to$string3);
}
$ans1507 = num$to$string3.app(anf_arg1515);
break;
case 5: var anf_arg1516 = $ans1507;
$step1504 = 6;
$al1508 = L[646];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1508,_plus1);
}
$ans1507 = _plus1.app(anf_arg1516,("):"));
break;
case 6: var anf_arg1517 = $ans1507;
$step1504 = 7;
$al1508 = L[643];
$field1518 = R.getColonFieldLoc(ED5,"text",L[643]);
if(R.isMethod($field1518)) {
$ans1507 = $field1518.full_meth(ED5,anf_arg1517);
} else {
if(!(R.isFunction($field1518))) {
R.ffi.throwNonFunApp(L[643],$field1518);
}
$ans1507 = $field1518.app(anf_arg1517);
}
break;
case 7: var anf_arg1523 = $ans1507;
$step1504 = 8;
$al1508 = L[637];
$field1524 = R.getColonFieldLoc(anf_method_obj1519,"make4",L[637]);
if(R.isMethod($field1524)) {
$ans1507 = $field1524.full_meth(anf_method_obj1519,anf_arg1520,anf_arg1521,anf_arg1522,anf_arg1523);
} else {
if(!(R.isFunction($field1524))) {
R.ffi.throwNonFunApp(L[637],$field1524);
}
$ans1507 = $field1524.app(anf_arg1520,anf_arg1521,anf_arg1522,anf_arg1523);
}
break;
case 8: var anf_arg1529 = $ans1507;
$al1508 = L[644];
var anf_arg1525 = G(self1506,"tup",L[644]);
$step1504 = 9;
$al1508 = L[645];
$field1526 = R.getColonFieldLoc(ED5,"embed",L[645]);
if(R.isMethod($field1526)) {
$ans1507 = $field1526.full_meth(ED5,anf_arg1525);
} else {
if(!(R.isFunction($field1526))) {
R.ffi.throwNonFunApp(L[645],$field1526);
}
$ans1507 = $field1526.app(anf_arg1525);
}
break;
case 9: var anf_arg1530 = $ans1507;
$step1504 = 10;
$al1508 = L[635];
$field1531 = R.getColonFieldLoc(anf_method_obj1527,"make3",L[635]);
if(R.isMethod($field1531)) {
$ans1507 = $field1531.full_meth(anf_method_obj1527,anf_arg1528,anf_arg1529,anf_arg1530);
} else {
if(!(R.isFunction($field1531))) {
R.ffi.throwNonFunApp(L[635],$field1531);
}
$ans1507 = $field1531.app(anf_arg1528,anf_arg1529,anf_arg1530);
}
break;
case 10: ++R.GAS;
return $ans1507;
default: throw "No case numbered " + $step1504 + " in $temp_full1505";
}
}
} catch($e1532) {
if(R.isCont($e1532) && ($step1504 !== 10)) {
$e1532.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1508,$temp_full1505,$step1504,[self1506],[anf_method_obj1527,anf_arg1528,anf_method_obj1519,anf_arg1520,anf_arg1521,anf_arg1522,anf_arg1529]);
}
if(R.isPyretException($e1532)) {
$e1532.pyretStack.push($al1508);
}
throw $e1532;
}
};
var anf_variant_member6238 = R.makeMethod0($temp_full1505,"render-reason");
var $temp_full1534 = function($self1535,$maybe$stack$loc1536,$src$available1537,$maybe$ast1538) {
var $step1533 = 0;
var $ans1539 = D;
var $al1540 = L[696];
try {
if(R.isActivationRecord($self1535)) {
$step1533 = $self1535.step;
$al1540 = $self1535.from;
$ans1539 = $self1535.ans;
self1535 = $self1535.args[0];
maybe$stack$loc1536 = $self1535.args[1];
src$available1537 = $self1535.args[2];
maybe$ast1538 = $self1535.args[3];
anf_method_obj1556 = $self1535.vars[0];
anf_method_obj1548 = $self1535.vars[1];
anf_arg1549 = $self1535.vars[2];
anf_arg1550 = $self1535.vars[3];
anf_arg1557 = $self1535.vars[4];
anf_arg1558 = $self1535.vars[5];
cases1564 = $self1535.vars[6];
anf_method_obj1630 = $self1535.vars[7];
anf_method_obj1623 = $self1535.vars[8];
anf_arg1624 = $self1535.vars[9];
anf_arg1625 = $self1535.vars[10];
anf_arg1631 = $self1535.vars[11];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[696],4,$t);
}
var self1535 = $self1535;
var maybe$stack$loc1536 = $maybe$stack$loc1536;
var src$available1537 = $src$available1537;
var maybe$ast1538 = $maybe$ast1538;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1533) {
case 0: $al1540 = L[650];
var anf_method_obj1541 = G(self1535,"loc",L[650]);
$step1533 = 1;
$al1540 = L[651];
$field1542 = R.getColonFieldLoc(anf_method_obj1541,"is-builtin",L[651]);
if(R.isMethod($field1542)) {
$ans1539 = $field1542.full_meth(anf_method_obj1541);
} else {
if(!(R.isFunction($field1542))) {
R.ffi.throwNonFunApp(L[651],$field1542);
}
$ans1539 = $field1542.app();
}
break;
case 1: var anf_arg1543 = $ans1539;
$al1540 = L[651];
var anf_if1635 = R.checkWrapBoolean(anf_arg1543);
$step1533 = R.isPyretTrue(anf_if1635)?2:9;
break;
case 2: $al1540 = L[652];
var anf_method_obj1556 = G(ED5,"error",L[652]);
$al1540 = L[653];
var anf_method_obj1548 = G(ED5,"para",L[653]);
$step1533 = 3;
$al1540 = L[654];
$field1544 = R.getColonFieldLoc(ED5,"text",L[654]);
if(R.isMethod($field1544)) {
$ans1539 = $field1544.full_meth(ED5,("The tuple binding statement in "));
} else {
if(!(R.isFunction($field1544))) {
R.ffi.throwNonFunApp(L[654],$field1544);
}
$ans1539 = $field1544.app(("The tuple binding statement in "));
}
break;
case 3: var anf_arg1549 = $ans1539;
$al1540 = L[655];
var anf_arg1545 = G(self1535,"loc",L[655]);
$step1533 = 4;
$al1540 = L[656];
$field1546 = R.getColonFieldLoc(ED5,"loc",L[656]);
if(R.isMethod($field1546)) {
$ans1539 = $field1546.full_meth(ED5,anf_arg1545);
} else {
if(!(R.isFunction($field1546))) {
R.ffi.throwNonFunApp(L[656],$field1546);
}
$ans1539 = $field1546.app(anf_arg1545);
}
break;
case 4: var anf_arg1550 = $ans1539;
$step1533 = 5;
$al1540 = L[657];
$field1547 = R.getColonFieldLoc(ED5,"text",L[657]);
if(R.isMethod($field1547)) {
$ans1539 = $field1547.full_meth(ED5,(" failed because the binding was given a non-tuple value: "));
} else {
if(!(R.isFunction($field1547))) {
R.ffi.throwNonFunApp(L[657],$field1547);
}
$ans1539 = $field1547.app((" failed because the binding was given a non-tuple value: "));
}
break;
case 5: var anf_arg1551 = $ans1539;
$step1533 = 6;
$al1540 = L[653];
$field1552 = R.getColonFieldLoc(anf_method_obj1548,"make3",L[653]);
if(R.isMethod($field1552)) {
$ans1539 = $field1552.full_meth(anf_method_obj1548,anf_arg1549,anf_arg1550,anf_arg1551);
} else {
if(!(R.isFunction($field1552))) {
R.ffi.throwNonFunApp(L[653],$field1552);
}
$ans1539 = $field1552.app(anf_arg1549,anf_arg1550,anf_arg1551);
}
break;
case 6: var anf_arg1557 = $ans1539;
$al1540 = L[658];
var anf_arg1553 = G(self1535,"non-tup",L[658]);
$step1533 = 7;
$al1540 = L[659];
$field1554 = R.getColonFieldLoc(ED5,"embed",L[659]);
if(R.isMethod($field1554)) {
$ans1539 = $field1554.full_meth(ED5,anf_arg1553);
} else {
if(!(R.isFunction($field1554))) {
R.ffi.throwNonFunApp(L[659],$field1554);
}
$ans1539 = $field1554.app(anf_arg1553);
}
break;
case 7: var anf_arg1558 = $ans1539;
var anf_fun1555 = please$report$bug133.$var;
$step1533 = 8;
$al1540 = L[660];
if(!(R.isFunction(anf_fun1555))) {
R.ffi.throwNonFunApp($al1540,anf_fun1555);
}
$ans1539 = anf_fun1555.app();
break;
case 8: var anf_arg1559 = $ans1539;
$step1533 = 23;
$al1540 = L[652];
$field1560 = R.getColonFieldLoc(anf_method_obj1556,"make3",L[652]);
if(R.isMethod($field1560)) {
$ans1539 = $field1560.full_meth(anf_method_obj1556,anf_arg1557,anf_arg1558,anf_arg1559);
} else {
if(!(R.isFunction($field1560))) {
R.ffi.throwNonFunApp(L[652],$field1560);
}
$ans1539 = $field1560.app(anf_arg1557,anf_arg1558,anf_arg1559);
}
break;
case 9: $al1540 = L[661];
var anf_arg1561 = G(self1535,"loc",L[661]);
$step1533 = 10;
$al1540 = L[662];
if(!(R.isFunction(src$available1537))) {
R.ffi.throwNonFunApp($al1540,src$available1537);
}
$ans1539 = src$available1537.app(anf_arg1561);
break;
case 10: var anf_arg1562 = $ans1539;
$al1540 = L[662];
var anf_if1634 = R.checkWrapBoolean(anf_arg1562);
$step1533 = R.isPyretTrue(anf_if1634)?11:17;
break;
case 11: $al1540 = L[663];
var anf_arg1563 = G(self1535,"loc",L[663]);
$step1533 = 12;
$al1540 = L[687];
if(!(R.isFunction(maybe$ast1538))) {
R.ffi.throwNonFunApp($al1540,maybe$ast1538);
}
$ans1539 = maybe$ast1538.app(anf_arg1563);
break;
case 12: var cases1564 = $ans1539;
$step1533 = 13;
$al1540 = L[686];
R._checkAnn(L[686],R.getDotAnn(L[686],"O",O13,"Option"),cases1564);
break;
case 13: var $cases_dispatch1618 = {"some":14,
"none":15};
$al1540 = L[674];
$step1533 = $cases_dispatch1618[cases1564.$name] || 16;
break;
case 14: if(cases1564.$arity !== 1) {
if(cases1564.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[673],1,cases1564.$arity,L[674]);
} else {
R.ffi.throwCasesSingletonErrorC(L[673],true,L[674]);
}
}
$step1533 = 23;
$al1540 = L[675];
var $temp_branch1581 = function($ast1590) {
var $step1582 = 0;
var $ans1583 = D;
var $al1584 = L[664];
try {
if(R.isActivationRecord($ast1590)) {
$step1582 = $ast1590.step;
$al1584 = $ast1590.from;
$ans1583 = $ast1590.ans;
ast1590 = $ast1590.args[0];
anf_method_obj1575 = $ast1590.vars[0];
anf_arg1576 = $ast1590.vars[1];
anf_arg1577 = $ast1590.vars[2];
anf_method_obj1570 = $ast1590.vars[3];
anf_arg1578 = $ast1590.vars[4];
} else {
var ast1590 = $ast1590;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1582) {
case 0: $al1584 = L[664];
var anf_method_obj1575 = G(ED5,"error",L[664]);
var anf_fun1565 = ed$intro122.$var;
$al1584 = L[665];
var anf_arg1566 = G(self1535,"loc",L[665]);
$step1582 = 1;
$al1584 = L[672];
if(!(R.isFunction(anf_fun1565))) {
R.ffi.throwNonFunApp($al1584,anf_fun1565);
}
$ans1583 = anf_fun1565.app(("tuple binding statement"),anf_arg1566,(-1),(true));
break;
case 1: var anf_arg1576 = $ans1583;
$al1584 = L[666];
var anf_arg1567 = G(self1535,"loc",L[666]);
$step1582 = 2;
$al1584 = L[667];
$field1585 = R.getColonFieldLoc(ED5,"cmcode",L[667]);
if(R.isMethod($field1585)) {
$ans1583 = $field1585.full_meth(ED5,anf_arg1567);
} else {
if(!(R.isFunction($field1585))) {
R.ffi.throwNonFunApp(L[667],$field1585);
}
$ans1583 = $field1585.app(anf_arg1567);
}
break;
case 2: var anf_arg1577 = $ans1583;
$al1584 = L[668];
var anf_method_obj1570 = G(ED5,"para",L[668]);
$step1582 = 3;
$al1584 = L[669];
$field1586 = R.getColonFieldLoc(ED5,"text",L[669]);
if(R.isMethod($field1586)) {
$ans1583 = $field1586.full_meth(ED5,("failed because the binding was given a non-tuple value:"));
} else {
if(!(R.isFunction($field1586))) {
R.ffi.throwNonFunApp(L[669],$field1586);
}
$ans1583 = $field1586.app(("failed because the binding was given a non-tuple value:"));
}
break;
case 3: var anf_arg1571 = $ans1583;
$step1582 = 4;
$al1584 = L[668];
$field1587 = R.getColonFieldLoc(anf_method_obj1570,"make1",L[668]);
if(R.isMethod($field1587)) {
$ans1583 = $field1587.full_meth(anf_method_obj1570,anf_arg1571);
} else {
if(!(R.isFunction($field1587))) {
R.ffi.throwNonFunApp(L[668],$field1587);
}
$ans1583 = $field1587.app(anf_arg1571);
}
break;
case 4: var anf_arg1578 = $ans1583;
$al1584 = L[670];
var anf_arg1573 = G(self1535,"non-tup",L[670]);
$step1582 = 5;
$al1584 = L[671];
$field1588 = R.getColonFieldLoc(ED5,"embed",L[671]);
if(R.isMethod($field1588)) {
$ans1583 = $field1588.full_meth(ED5,anf_arg1573);
} else {
if(!(R.isFunction($field1588))) {
R.ffi.throwNonFunApp(L[671],$field1588);
}
$ans1583 = $field1588.app(anf_arg1573);
}
break;
case 5: var anf_arg1579 = $ans1583;
$step1582 = 6;
$al1584 = L[664];
$field1589 = R.getColonFieldLoc(anf_method_obj1575,"make4",L[664]);
if(R.isMethod($field1589)) {
$ans1583 = $field1589.full_meth(anf_method_obj1575,anf_arg1576,anf_arg1577,anf_arg1578,anf_arg1579);
} else {
if(!(R.isFunction($field1589))) {
R.ffi.throwNonFunApp(L[664],$field1589);
}
$ans1583 = $field1589.app(anf_arg1576,anf_arg1577,anf_arg1578,anf_arg1579);
}
break;
case 6: ++R.GAS;
return $ans1583;
default: throw "No case numbered " + $step1582 + " in $temp_branch1581";
}
}
} catch($e1591) {
if(R.isCont($e1591) && ($step1582 !== 6)) {
$e1591.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1584,$temp_branch1581,$step1582,[ast1590],[anf_method_obj1575,anf_arg1576,anf_arg1577,anf_method_obj1570,anf_arg1578]);
}
if(R.isPyretException($e1591)) {
$e1591.pyretStack.push($al1584);
}
throw $e1591;
}
};
$ans1539 = cases1564.$app_fields($temp_branch1581,[false]);
break;
case 15: if(cases1564.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[684],false,L[674]);
}
$step1533 = 23;
$al1540 = L[685];
var $temp_branch1607 = function($$resumer101) {
var $step1608 = 0;
var $ans1609 = D;
var $al1610 = L[676];
try {
if(R.isActivationRecord($$resumer101)) {
$step1608 = $$resumer101.step;
$al1610 = $$resumer101.from;
$ans1609 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj1603 = $$resumer101.vars[0];
anf_method_obj1596 = $$resumer101.vars[1];
anf_arg1597 = $$resumer101.vars[2];
anf_arg1598 = $$resumer101.vars[3];
anf_arg1604 = $$resumer101.vars[4];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1608) {
case 0: $al1610 = L[676];
var anf_method_obj1603 = G(ED5,"error",L[676]);
$al1610 = L[677];
var anf_method_obj1596 = G(ED5,"para",L[677]);
$step1608 = 1;
$al1610 = L[678];
$field1611 = R.getColonFieldLoc(ED5,"text",L[678]);
if(R.isMethod($field1611)) {
$ans1609 = $field1611.full_meth(ED5,("The tuple binding statement in "));
} else {
if(!(R.isFunction($field1611))) {
R.ffi.throwNonFunApp(L[678],$field1611);
}
$ans1609 = $field1611.app(("The tuple binding statement in "));
}
break;
case 1: var anf_arg1597 = $ans1609;
$al1610 = L[679];
var anf_arg1593 = G(self1535,"loc",L[679]);
$step1608 = 2;
$al1610 = L[680];
$field1612 = R.getColonFieldLoc(ED5,"loc",L[680]);
if(R.isMethod($field1612)) {
$ans1609 = $field1612.full_meth(ED5,anf_arg1593);
} else {
if(!(R.isFunction($field1612))) {
R.ffi.throwNonFunApp(L[680],$field1612);
}
$ans1609 = $field1612.app(anf_arg1593);
}
break;
case 2: var anf_arg1598 = $ans1609;
$step1608 = 3;
$al1610 = L[681];
$field1613 = R.getColonFieldLoc(ED5,"text",L[681]);
if(R.isMethod($field1613)) {
$ans1609 = $field1613.full_meth(ED5,(" failed because the binding was given a non-tuple value:"));
} else {
if(!(R.isFunction($field1613))) {
R.ffi.throwNonFunApp(L[681],$field1613);
}
$ans1609 = $field1613.app((" failed because the binding was given a non-tuple value:"));
}
break;
case 3: var anf_arg1599 = $ans1609;
$step1608 = 4;
$al1610 = L[677];
$field1614 = R.getColonFieldLoc(anf_method_obj1596,"make3",L[677]);
if(R.isMethod($field1614)) {
$ans1609 = $field1614.full_meth(anf_method_obj1596,anf_arg1597,anf_arg1598,anf_arg1599);
} else {
if(!(R.isFunction($field1614))) {
R.ffi.throwNonFunApp(L[677],$field1614);
}
$ans1609 = $field1614.app(anf_arg1597,anf_arg1598,anf_arg1599);
}
break;
case 4: var anf_arg1604 = $ans1609;
$al1610 = L[682];
var anf_arg1601 = G(self1535,"non-tup",L[682]);
$step1608 = 5;
$al1610 = L[683];
$field1615 = R.getColonFieldLoc(ED5,"embed",L[683]);
if(R.isMethod($field1615)) {
$ans1609 = $field1615.full_meth(ED5,anf_arg1601);
} else {
if(!(R.isFunction($field1615))) {
R.ffi.throwNonFunApp(L[683],$field1615);
}
$ans1609 = $field1615.app(anf_arg1601);
}
break;
case 5: var anf_arg1605 = $ans1609;
$step1608 = 6;
$al1610 = L[676];
$field1616 = R.getColonFieldLoc(anf_method_obj1603,"make2",L[676]);
if(R.isMethod($field1616)) {
$ans1609 = $field1616.full_meth(anf_method_obj1603,anf_arg1604,anf_arg1605);
} else {
if(!(R.isFunction($field1616))) {
R.ffi.throwNonFunApp(L[676],$field1616);
}
$ans1609 = $field1616.app(anf_arg1604,anf_arg1605);
}
break;
case 6: ++R.GAS;
return $ans1609;
default: throw "No case numbered " + $step1608 + " in $temp_branch1607";
}
}
} catch($e1617) {
if(R.isCont($e1617) && ($step1608 !== 6)) {
$e1617.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1610,$temp_branch1607,$step1608,[],[anf_method_obj1603,anf_method_obj1596,anf_arg1597,anf_arg1598,anf_arg1604]);
}
if(R.isPyretException($e1617)) {
$e1617.pyretStack.push($al1610);
}
throw $e1617;
}
};
$ans1539 = cases1564.$app_fields($temp_branch1607,[]);
break;
case 16: $step1533 = 23;
$al1540 = L[674];
$ans1539 = R.throwNoCasesMatched(L[674],cases1564);
break;
case 17: $al1540 = L[688];
var anf_method_obj1630 = G(ED5,"error",L[688]);
$al1540 = L[689];
var anf_method_obj1623 = G(ED5,"para",L[689]);
$step1533 = 18;
$al1540 = L[690];
$field1619 = R.getColonFieldLoc(ED5,"text",L[690]);
if(R.isMethod($field1619)) {
$ans1539 = $field1619.full_meth(ED5,("The tuple binding statement in "));
} else {
if(!(R.isFunction($field1619))) {
R.ffi.throwNonFunApp(L[690],$field1619);
}
$ans1539 = $field1619.app(("The tuple binding statement in "));
}
break;
case 18: var anf_arg1624 = $ans1539;
$al1540 = L[691];
var anf_arg1620 = G(self1535,"loc",L[691]);
$step1533 = 19;
$al1540 = L[692];
$field1621 = R.getColonFieldLoc(ED5,"loc",L[692]);
if(R.isMethod($field1621)) {
$ans1539 = $field1621.full_meth(ED5,anf_arg1620);
} else {
if(!(R.isFunction($field1621))) {
R.ffi.throwNonFunApp(L[692],$field1621);
}
$ans1539 = $field1621.app(anf_arg1620);
}
break;
case 19: var anf_arg1625 = $ans1539;
$step1533 = 20;
$al1540 = L[693];
$field1622 = R.getColonFieldLoc(ED5,"text",L[693]);
if(R.isMethod($field1622)) {
$ans1539 = $field1622.full_meth(ED5,(" failed because the binding was given a non-tuple value:"));
} else {
if(!(R.isFunction($field1622))) {
R.ffi.throwNonFunApp(L[693],$field1622);
}
$ans1539 = $field1622.app((" failed because the binding was given a non-tuple value:"));
}
break;
case 20: var anf_arg1626 = $ans1539;
$step1533 = 21;
$al1540 = L[689];
$field1627 = R.getColonFieldLoc(anf_method_obj1623,"make3",L[689]);
if(R.isMethod($field1627)) {
$ans1539 = $field1627.full_meth(anf_method_obj1623,anf_arg1624,anf_arg1625,anf_arg1626);
} else {
if(!(R.isFunction($field1627))) {
R.ffi.throwNonFunApp(L[689],$field1627);
}
$ans1539 = $field1627.app(anf_arg1624,anf_arg1625,anf_arg1626);
}
break;
case 21: var anf_arg1631 = $ans1539;
$al1540 = L[694];
var anf_arg1628 = G(self1535,"non-tup",L[694]);
$step1533 = 22;
$al1540 = L[695];
$field1629 = R.getColonFieldLoc(ED5,"embed",L[695]);
if(R.isMethod($field1629)) {
$ans1539 = $field1629.full_meth(ED5,anf_arg1628);
} else {
if(!(R.isFunction($field1629))) {
R.ffi.throwNonFunApp(L[695],$field1629);
}
$ans1539 = $field1629.app(anf_arg1628);
}
break;
case 22: var anf_arg1632 = $ans1539;
$step1533 = 23;
$al1540 = L[688];
$field1633 = R.getColonFieldLoc(anf_method_obj1630,"make2",L[688]);
if(R.isMethod($field1633)) {
$ans1539 = $field1633.full_meth(anf_method_obj1630,anf_arg1631,anf_arg1632);
} else {
if(!(R.isFunction($field1633))) {
R.ffi.throwNonFunApp(L[688],$field1633);
}
$ans1539 = $field1633.app(anf_arg1631,anf_arg1632);
}
break;
case 23: ++R.GAS;
return $ans1539;
default: throw "No case numbered " + $step1533 + " in $temp_full1534";
}
}
} catch($e1636) {
if(R.isCont($e1636) && ($step1533 !== 23)) {
$e1636.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1540,$temp_full1534,$step1533,[self1535,maybe$stack$loc1536,src$available1537,maybe$ast1538],[anf_method_obj1556,anf_method_obj1548,anf_arg1549,anf_arg1550,anf_arg1557,anf_arg1558,cases1564,anf_method_obj1630,anf_method_obj1623,anf_arg1624,anf_arg1625,anf_arg1631]);
}
if(R.isPyretException($e1636)) {
$e1636.pyretStack.push($al1540);
}
throw $e1636;
}
};
var anf_variant_member6250 = R.makeMethod3($temp_full1534,"render-fancy-reason");
var $temp_full1638 = function($self1639) {
var $step1637 = 0;
var $ans1640 = D;
var $al1641 = L[716];
try {
if(R.isActivationRecord($self1639)) {
$step1637 = $self1639.step;
$al1641 = $self1639.from;
$ans1640 = $self1639.ans;
self1639 = $self1639.args[0];
anf_method_obj1657 = $self1639.vars[0];
anf_method_obj1649 = $self1639.vars[1];
anf_arg1650 = $self1639.vars[2];
anf_arg1651 = $self1639.vars[3];
anf_arg1658 = $self1639.vars[4];
anf_arg1659 = $self1639.vars[5];
anf_method_obj1673 = $self1639.vars[6];
anf_method_obj1666 = $self1639.vars[7];
anf_arg1667 = $self1639.vars[8];
anf_arg1668 = $self1639.vars[9];
anf_arg1674 = $self1639.vars[10];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[716],1,$t);
}
var self1639 = $self1639;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1637) {
case 0: $al1641 = L[697];
var anf_method_obj1642 = G(self1639,"loc",L[697]);
$step1637 = 1;
$al1641 = L[698];
$field1643 = R.getColonFieldLoc(anf_method_obj1642,"is-builtin",L[698]);
if(R.isMethod($field1643)) {
$ans1640 = $field1643.full_meth(anf_method_obj1642);
} else {
if(!(R.isFunction($field1643))) {
R.ffi.throwNonFunApp(L[698],$field1643);
}
$ans1640 = $field1643.app();
}
break;
case 1: var anf_arg1644 = $ans1640;
$al1641 = L[698];
var anf_if1677 = R.checkWrapBoolean(anf_arg1644);
$step1637 = R.isPyretTrue(anf_if1677)?2:9;
break;
case 2: $al1641 = L[699];
var anf_method_obj1657 = G(ED5,"error",L[699]);
$al1641 = L[700];
var anf_method_obj1649 = G(ED5,"para",L[700]);
$step1637 = 3;
$al1641 = L[701];
$field1645 = R.getColonFieldLoc(ED5,"text",L[701]);
if(R.isMethod($field1645)) {
$ans1640 = $field1645.full_meth(ED5,("The tuple binding statement in "));
} else {
if(!(R.isFunction($field1645))) {
R.ffi.throwNonFunApp(L[701],$field1645);
}
$ans1640 = $field1645.app(("The tuple binding statement in "));
}
break;
case 3: var anf_arg1650 = $ans1640;
$al1641 = L[702];
var anf_arg1646 = G(self1639,"loc",L[702]);
$step1637 = 4;
$al1641 = L[703];
$field1647 = R.getColonFieldLoc(ED5,"loc",L[703]);
if(R.isMethod($field1647)) {
$ans1640 = $field1647.full_meth(ED5,anf_arg1646);
} else {
if(!(R.isFunction($field1647))) {
R.ffi.throwNonFunApp(L[703],$field1647);
}
$ans1640 = $field1647.app(anf_arg1646);
}
break;
case 4: var anf_arg1651 = $ans1640;
$step1637 = 5;
$al1641 = L[704];
$field1648 = R.getColonFieldLoc(ED5,"text",L[704]);
if(R.isMethod($field1648)) {
$ans1640 = $field1648.full_meth(ED5,(" failed because the right hand side did not evaluate to a tuple:"));
} else {
if(!(R.isFunction($field1648))) {
R.ffi.throwNonFunApp(L[704],$field1648);
}
$ans1640 = $field1648.app((" failed because the right hand side did not evaluate to a tuple:"));
}
break;
case 5: var anf_arg1652 = $ans1640;
$step1637 = 6;
$al1641 = L[700];
$field1653 = R.getColonFieldLoc(anf_method_obj1649,"make3",L[700]);
if(R.isMethod($field1653)) {
$ans1640 = $field1653.full_meth(anf_method_obj1649,anf_arg1650,anf_arg1651,anf_arg1652);
} else {
if(!(R.isFunction($field1653))) {
R.ffi.throwNonFunApp(L[700],$field1653);
}
$ans1640 = $field1653.app(anf_arg1650,anf_arg1651,anf_arg1652);
}
break;
case 6: var anf_arg1658 = $ans1640;
$al1641 = L[705];
var anf_arg1654 = G(self1639,"non-tup",L[705]);
$step1637 = 7;
$al1641 = L[706];
$field1655 = R.getColonFieldLoc(ED5,"embed",L[706]);
if(R.isMethod($field1655)) {
$ans1640 = $field1655.full_meth(ED5,anf_arg1654);
} else {
if(!(R.isFunction($field1655))) {
R.ffi.throwNonFunApp(L[706],$field1655);
}
$ans1640 = $field1655.app(anf_arg1654);
}
break;
case 7: var anf_arg1659 = $ans1640;
var anf_fun1656 = please$report$bug133.$var;
$step1637 = 8;
$al1641 = L[707];
if(!(R.isFunction(anf_fun1656))) {
R.ffi.throwNonFunApp($al1641,anf_fun1656);
}
$ans1640 = anf_fun1656.app();
break;
case 8: var anf_arg1660 = $ans1640;
$step1637 = 15;
$al1641 = L[699];
$field1661 = R.getColonFieldLoc(anf_method_obj1657,"make3",L[699]);
if(R.isMethod($field1661)) {
$ans1640 = $field1661.full_meth(anf_method_obj1657,anf_arg1658,anf_arg1659,anf_arg1660);
} else {
if(!(R.isFunction($field1661))) {
R.ffi.throwNonFunApp(L[699],$field1661);
}
$ans1640 = $field1661.app(anf_arg1658,anf_arg1659,anf_arg1660);
}
break;
case 9: $al1641 = L[708];
var anf_method_obj1673 = G(ED5,"error",L[708]);
$al1641 = L[709];
var anf_method_obj1666 = G(ED5,"para",L[709]);
$step1637 = 10;
$al1641 = L[710];
$field1662 = R.getColonFieldLoc(ED5,"text",L[710]);
if(R.isMethod($field1662)) {
$ans1640 = $field1662.full_meth(ED5,("The tuple binding statement in "));
} else {
if(!(R.isFunction($field1662))) {
R.ffi.throwNonFunApp(L[710],$field1662);
}
$ans1640 = $field1662.app(("The tuple binding statement in "));
}
break;
case 10: var anf_arg1667 = $ans1640;
$al1641 = L[711];
var anf_arg1663 = G(self1639,"loc",L[711]);
$step1637 = 11;
$al1641 = L[712];
$field1664 = R.getColonFieldLoc(ED5,"loc",L[712]);
if(R.isMethod($field1664)) {
$ans1640 = $field1664.full_meth(ED5,anf_arg1663);
} else {
if(!(R.isFunction($field1664))) {
R.ffi.throwNonFunApp(L[712],$field1664);
}
$ans1640 = $field1664.app(anf_arg1663);
}
break;
case 11: var anf_arg1668 = $ans1640;
$step1637 = 12;
$al1641 = L[713];
$field1665 = R.getColonFieldLoc(ED5,"text",L[713]);
if(R.isMethod($field1665)) {
$ans1640 = $field1665.full_meth(ED5,(" failed because the right hand side did not evaluate to a tuple:"));
} else {
if(!(R.isFunction($field1665))) {
R.ffi.throwNonFunApp(L[713],$field1665);
}
$ans1640 = $field1665.app((" failed because the right hand side did not evaluate to a tuple:"));
}
break;
case 12: var anf_arg1669 = $ans1640;
$step1637 = 13;
$al1641 = L[709];
$field1670 = R.getColonFieldLoc(anf_method_obj1666,"make3",L[709]);
if(R.isMethod($field1670)) {
$ans1640 = $field1670.full_meth(anf_method_obj1666,anf_arg1667,anf_arg1668,anf_arg1669);
} else {
if(!(R.isFunction($field1670))) {
R.ffi.throwNonFunApp(L[709],$field1670);
}
$ans1640 = $field1670.app(anf_arg1667,anf_arg1668,anf_arg1669);
}
break;
case 13: var anf_arg1674 = $ans1640;
$al1641 = L[714];
var anf_arg1671 = G(self1639,"non-tup",L[714]);
$step1637 = 14;
$al1641 = L[715];
$field1672 = R.getColonFieldLoc(ED5,"embed",L[715]);
if(R.isMethod($field1672)) {
$ans1640 = $field1672.full_meth(ED5,anf_arg1671);
} else {
if(!(R.isFunction($field1672))) {
R.ffi.throwNonFunApp(L[715],$field1672);
}
$ans1640 = $field1672.app(anf_arg1671);
}
break;
case 14: var anf_arg1675 = $ans1640;
$step1637 = 15;
$al1641 = L[708];
$field1676 = R.getColonFieldLoc(anf_method_obj1673,"make2",L[708]);
if(R.isMethod($field1676)) {
$ans1640 = $field1676.full_meth(anf_method_obj1673,anf_arg1674,anf_arg1675);
} else {
if(!(R.isFunction($field1676))) {
R.ffi.throwNonFunApp(L[708],$field1676);
}
$ans1640 = $field1676.app(anf_arg1674,anf_arg1675);
}
break;
case 15: ++R.GAS;
return $ans1640;
default: throw "No case numbered " + $step1637 + " in $temp_full1638";
}
}
} catch($e1678) {
if(R.isCont($e1678) && ($step1637 !== 15)) {
$e1678.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1641,$temp_full1638,$step1637,[self1639],[anf_method_obj1657,anf_method_obj1649,anf_arg1650,anf_arg1651,anf_arg1658,anf_arg1659,anf_method_obj1673,anf_method_obj1666,anf_arg1667,anf_arg1668,anf_arg1674]);
}
if(R.isPyretException($e1678)) {
$e1678.pyretStack.push($al1641);
}
throw $e1678;
}
};
var anf_variant_member6251 = R.makeMethod0($temp_full1638,"render-reason");
var $temp_full1680 = function($self1681,$maybe$stack$loc1682,$src$available1683,$maybe$ast1684) {
var $step1679 = 0;
var $ans1685 = D;
var $al1686 = L[796];
try {
if(R.isActivationRecord($self1681)) {
$step1679 = $self1681.step;
$al1686 = $self1681.from;
$ans1685 = $self1681.ans;
self1681 = $self1681.args[0];
maybe$stack$loc1682 = $self1681.args[1];
src$available1683 = $self1681.args[2];
maybe$ast1684 = $self1681.args[3];
anf_method_obj1706 = $self1681.vars[0];
anf_method_obj1700 = $self1681.vars[1];
anf_array1701 = $self1681.vars[2];
anf_arg1707 = $self1681.vars[3];
anf_arg1708 = $self1681.vars[4];
cases1714 = $self1681.vars[5];
anf_method_obj1829 = $self1681.vars[6];
anf_method_obj1824 = $self1681.vars[7];
anf_array1825 = $self1681.vars[8];
anf_arg1830 = $self1681.vars[9];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[796],4,$t);
}
var self1681 = $self1681;
var maybe$stack$loc1682 = $maybe$stack$loc1682;
var src$available1683 = $src$available1683;
var maybe$ast1684 = $maybe$ast1684;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1679) {
case 0: $al1686 = L[717];
var anf_method_obj1687 = G(self1681,"loc",L[717]);
$step1679 = 1;
$al1686 = L[718];
$field1688 = R.getColonFieldLoc(anf_method_obj1687,"is-builtin",L[718]);
if(R.isMethod($field1688)) {
$ans1685 = $field1688.full_meth(anf_method_obj1687);
} else {
if(!(R.isFunction($field1688))) {
R.ffi.throwNonFunApp(L[718],$field1688);
}
$ans1685 = $field1688.app();
}
break;
case 1: var anf_arg1689 = $ans1685;
$al1686 = L[718];
var anf_if1834 = R.checkWrapBoolean(anf_arg1689);
$step1679 = R.isPyretTrue(anf_if1834)?2:13;
break;
case 2: $al1686 = L[719];
var anf_method_obj1706 = G(ED5,"error",L[719]);
$al1686 = L[720];
var anf_method_obj1700 = G(ED5,"para",L[720]);
$al1686 = L[721];
var anf_array1701 = R.makeArrayN((7));
$step1679 = 3;
$al1686 = L[722];
$field1690 = R.getColonFieldLoc(ED5,"text",L[722]);
if(R.isMethod($field1690)) {
$ans1685 = $field1690.full_meth(ED5,("The tuple binding in"));
} else {
if(!(R.isFunction($field1690))) {
R.ffi.throwNonFunApp(L[722],$field1690);
}
$ans1685 = $field1690.app(("The tuple binding in"));
}
break;
case 3: anf_array1701[0] = $ans1685;
$al1686 = L[723];
var anf_arg1691 = G(self1681,"loc",L[723]);
$step1679 = 4;
$al1686 = L[724];
$field1692 = R.getColonFieldLoc(ED5,"loc",L[724]);
if(R.isMethod($field1692)) {
$ans1685 = $field1692.full_meth(ED5,anf_arg1691);
} else {
if(!(R.isFunction($field1692))) {
R.ffi.throwNonFunApp(L[724],$field1692);
}
$ans1685 = $field1692.app(anf_arg1691);
}
break;
case 4: anf_array1701[1] = $ans1685;
$step1679 = 5;
$al1686 = L[725];
$field1693 = R.getColonFieldLoc(ED5,"text",L[725]);
if(R.isMethod($field1693)) {
$ans1685 = $field1693.full_meth(ED5,("  failed because "));
} else {
if(!(R.isFunction($field1693))) {
R.ffi.throwNonFunApp(L[725],$field1693);
}
$ans1685 = $field1693.app(("  failed because "));
}
break;
case 5: anf_array1701[2] = $ans1685;
$al1686 = L[726];
var anf_arg1694 = G(self1681,"desiredLength",L[726]);
$step1679 = 6;
$al1686 = L[727];
$field1695 = R.getColonFieldLoc(ED5,"ed-components",L[727]);
if(R.isMethod($field1695)) {
$ans1685 = $field1695.full_meth(ED5,anf_arg1694);
} else {
if(!(R.isFunction($field1695))) {
R.ffi.throwNonFunApp(L[727],$field1695);
}
$ans1685 = $field1695.app(anf_arg1694);
}
break;
case 6: anf_array1701[3] = $ans1685;
$step1679 = 7;
$al1686 = L[728];
$field1696 = R.getColonFieldLoc(ED5,"text",L[728]);
if(R.isMethod($field1696)) {
$ans1685 = $field1696.full_meth(ED5,(" are expected to be bound to values, but the binding was given a tuple containing "));
} else {
if(!(R.isFunction($field1696))) {
R.ffi.throwNonFunApp(L[728],$field1696);
}
$ans1685 = $field1696.app((" are expected to be bound to values, but the binding was given a tuple containing "));
}
break;
case 7: anf_array1701[4] = $ans1685;
$al1686 = L[729];
var anf_arg1697 = G(self1681,"els",L[729]);
$step1679 = 8;
$al1686 = L[730];
$field1698 = R.getColonFieldLoc(ED5,"ed-components",L[730]);
if(R.isMethod($field1698)) {
$ans1685 = $field1698.full_meth(ED5,anf_arg1697);
} else {
if(!(R.isFunction($field1698))) {
R.ffi.throwNonFunApp(L[730],$field1698);
}
$ans1685 = $field1698.app(anf_arg1697);
}
break;
case 8: anf_array1701[5] = $ans1685;
$step1679 = 9;
$al1686 = L[731];
$field1699 = R.getColonFieldLoc(ED5,"text",L[731]);
if(R.isMethod($field1699)) {
$ans1685 = $field1699.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1699))) {
R.ffi.throwNonFunApp(L[731],$field1699);
}
$ans1685 = $field1699.app((":"));
}
break;
case 9: anf_array1701[6] = $ans1685;
$step1679 = 10;
$al1686 = L[720];
$field1702 = R.getColonFieldLoc(anf_method_obj1700,"make",L[720]);
if(R.isMethod($field1702)) {
$ans1685 = $field1702.full_meth(anf_method_obj1700,anf_array1701);
} else {
if(!(R.isFunction($field1702))) {
R.ffi.throwNonFunApp(L[720],$field1702);
}
$ans1685 = $field1702.app(anf_array1701);
}
break;
case 10: var anf_arg1707 = $ans1685;
$al1686 = L[732];
var anf_arg1703 = G(self1681,"tup",L[732]);
$step1679 = 11;
$al1686 = L[733];
$field1704 = R.getColonFieldLoc(ED5,"embed",L[733]);
if(R.isMethod($field1704)) {
$ans1685 = $field1704.full_meth(ED5,anf_arg1703);
} else {
if(!(R.isFunction($field1704))) {
R.ffi.throwNonFunApp(L[733],$field1704);
}
$ans1685 = $field1704.app(anf_arg1703);
}
break;
case 11: var anf_arg1708 = $ans1685;
var anf_fun1705 = please$report$bug133.$var;
$step1679 = 12;
$al1686 = L[734];
if(!(R.isFunction(anf_fun1705))) {
R.ffi.throwNonFunApp($al1686,anf_fun1705);
}
$ans1685 = anf_fun1705.app();
break;
case 12: var anf_arg1709 = $ans1685;
$step1679 = 31;
$al1686 = L[719];
$field1710 = R.getColonFieldLoc(anf_method_obj1706,"make3",L[719]);
if(R.isMethod($field1710)) {
$ans1685 = $field1710.full_meth(anf_method_obj1706,anf_arg1707,anf_arg1708,anf_arg1709);
} else {
if(!(R.isFunction($field1710))) {
R.ffi.throwNonFunApp(L[719],$field1710);
}
$ans1685 = $field1710.app(anf_arg1707,anf_arg1708,anf_arg1709);
}
break;
case 13: $al1686 = L[735];
var anf_arg1711 = G(self1681,"loc",L[735]);
$step1679 = 14;
$al1686 = L[736];
if(!(R.isFunction(src$available1683))) {
R.ffi.throwNonFunApp($al1686,src$available1683);
}
$ans1685 = src$available1683.app(anf_arg1711);
break;
case 14: var anf_arg1712 = $ans1685;
$al1686 = L[736];
var anf_if1833 = R.checkWrapBoolean(anf_arg1712);
$step1679 = R.isPyretTrue(anf_if1833)?15:21;
break;
case 15: $al1686 = L[737];
var anf_arg1713 = G(self1681,"loc",L[737]);
$step1679 = 16;
$al1686 = L[780];
if(!(R.isFunction(maybe$ast1684))) {
R.ffi.throwNonFunApp($al1686,maybe$ast1684);
}
$ans1685 = maybe$ast1684.app(anf_arg1713);
break;
case 16: var cases1714 = $ans1685;
$step1679 = 17;
$al1686 = L[779];
R._checkAnn(L[779],R.getDotAnn(L[779],"O",O13,"Option"),cases1714);
break;
case 17: var $cases_dispatch1813 = {"some":18,
"none":19};
$al1686 = L[760];
$step1679 = $cases_dispatch1813[cases1714.$name] || 20;
break;
case 18: if(cases1714.$arity !== 1) {
if(cases1714.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[759],1,cases1714.$arity,L[760]);
} else {
R.ffi.throwCasesSingletonErrorC(L[759],true,L[760]);
}
}
$step1679 = 31;
$al1686 = L[761];
var $temp_branch1751 = function($ast1722) {
var $step1752 = 0;
var $ans1753 = D;
var $al1754 = L[738];
try {
if(R.isActivationRecord($ast1722)) {
$step1752 = $ast1722.step;
$al1754 = $ast1722.from;
$ans1753 = $ast1722.ans;
ast1722 = $ast1722.args[0];
anf_method_obj1745 = $ast1722.vars[0];
anf_arg1746 = $ast1722.vars[1];
anf_arg1747 = $ast1722.vars[2];
anf_method_obj1740 = $ast1722.vars[3];
anf_array1741 = $ast1722.vars[4];
anf_arg1732 = $ast1722.vars[5];
anf_arg1748 = $ast1722.vars[6];
} else {
var ast1722 = $ast1722;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1752) {
case 0: $al1754 = L[738];
var anf_method_obj1745 = G(ED5,"error",L[738]);
var anf_fun1715 = ed$intro122.$var;
$al1754 = L[739];
var anf_arg1716 = G(self1681,"loc",L[739]);
$step1752 = 1;
$al1754 = L[758];
if(!(R.isFunction(anf_fun1715))) {
R.ffi.throwNonFunApp($al1754,anf_fun1715);
}
$ans1753 = anf_fun1715.app(("tuple binding"),anf_arg1716,(-1),(true));
break;
case 1: var anf_arg1746 = $ans1753;
$al1754 = L[740];
var anf_arg1717 = G(self1681,"loc",L[740]);
$step1752 = 2;
$al1754 = L[741];
$field1755 = R.getColonFieldLoc(ED5,"cmcode",L[741]);
if(R.isMethod($field1755)) {
$ans1753 = $field1755.full_meth(ED5,anf_arg1717);
} else {
if(!(R.isFunction($field1755))) {
R.ffi.throwNonFunApp(L[741],$field1755);
}
$ans1753 = $field1755.app(anf_arg1717);
}
break;
case 2: var anf_arg1747 = $ans1753;
$al1754 = L[742];
var anf_method_obj1740 = G(ED5,"para",L[742]);
$al1754 = L[743];
var anf_array1741 = R.makeArrayN((6));
$step1752 = 3;
$al1754 = L[744];
$field1756 = R.getColonFieldLoc(ED5,"text",L[744]);
if(R.isMethod($field1756)) {
$ans1753 = $field1756.full_meth(ED5,("failed because "));
} else {
if(!(R.isFunction($field1756))) {
R.ffi.throwNonFunApp(L[744],$field1756);
}
$ans1753 = $field1756.app(("failed because "));
}
break;
case 3: anf_array1741[0] = $ans1753;
$al1754 = L[745];
var anf_arg1720 = G(self1681,"desiredLength",L[745]);
$step1752 = 4;
$al1754 = L[746];
$field1757 = R.getColonFieldLoc(ED5,"ed-names",L[746]);
if(R.isMethod($field1757)) {
$ans1753 = $field1757.full_meth(ED5,anf_arg1720);
} else {
if(!(R.isFunction($field1757))) {
R.ffi.throwNonFunApp(L[746],$field1757);
}
$ans1753 = $field1757.app(anf_arg1720);
}
break;
case 4: var anf_arg1732 = $ans1753;
$al1754 = L[747];
var anf_method_obj1729 = G(ast1722,"fields",L[747]);
var $temp_lam1759 = function($recv_1725) {
var $step1758 = 0;
var $ans1760 = D;
var $al1761 = L[748];
try {
if(R.isActivationRecord($recv_1725)) {
$step1758 = $recv_1725.step;
$al1761 = $recv_1725.from;
$ans1760 = $recv_1725.ans;
recv_1725 = $recv_1725.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[748],1,$t);
}
var recv_1725 = $recv_1725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1758) {
case 0: $step1758 = 1;
$al1761 = L[748];
$ans1760 = G(recv_1725,"l",L[748]);
break;
case 1: ++R.GAS;
return $ans1760;
default: throw "No case numbered " + $step1758 + " in $temp_lam1759";
}
}
} catch($e1762) {
if(R.isCont($e1762) && ($step1758 !== 1)) {
$e1762.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1761,$temp_lam1759,$step1758,[recv_1725],[]);
}
if(R.isPyretException($e1762)) {
$e1762.pyretStack.push($al1761);
}
throw $e1762;
}
};
var anf_arg1730 = R.makeFunction($temp_lam1759,"");
$step1752 = 5;
$al1754 = L[749];
$field1763 = R.getColonFieldLoc(anf_method_obj1729,"map",L[749]);
if(R.isMethod($field1763)) {
$ans1753 = $field1763.full_meth(anf_method_obj1729,anf_arg1730);
} else {
if(!(R.isFunction($field1763))) {
R.ffi.throwNonFunApp(L[749],$field1763);
}
$ans1753 = $field1763.app(anf_arg1730);
}
break;
case 5: var anf_arg1733 = $ans1753;
$step1752 = 6;
$al1754 = L[750];
$field1764 = R.getColonFieldLoc(ED5,"highlight",L[750]);
if(R.isMethod($field1764)) {
$ans1753 = $field1764.full_meth(ED5,anf_arg1732,anf_arg1733,(0));
} else {
if(!(R.isFunction($field1764))) {
R.ffi.throwNonFunApp(L[750],$field1764);
}
$ans1753 = $field1764.app(anf_arg1732,anf_arg1733,(0));
}
break;
case 6: anf_array1741[1] = $ans1753;
$step1752 = 7;
$al1754 = L[751];
$field1765 = R.getColonFieldLoc(ED5,"text",L[751]);
if(R.isMethod($field1765)) {
$ans1753 = $field1765.full_meth(ED5,(" are expected to be bound to values, but the binding was given "));
} else {
if(!(R.isFunction($field1765))) {
R.ffi.throwNonFunApp(L[751],$field1765);
}
$ans1753 = $field1765.app((" are expected to be bound to values, but the binding was given "));
}
break;
case 7: anf_array1741[2] = $ans1753;
$step1752 = 8;
$al1754 = L[752];
$field1766 = R.getColonFieldLoc(ED5,"text",L[752]);
if(R.isMethod($field1766)) {
$ans1753 = $field1766.full_meth(ED5,(" a tuple containing "));
} else {
if(!(R.isFunction($field1766))) {
R.ffi.throwNonFunApp(L[752],$field1766);
}
$ans1753 = $field1766.app((" a tuple containing "));
}
break;
case 8: anf_array1741[3] = $ans1753;
$al1754 = L[753];
var anf_arg1737 = G(self1681,"length",L[753]);
$step1752 = 9;
$al1754 = L[754];
$field1767 = R.getColonFieldLoc(ED5,"ed-components",L[754]);
if(R.isMethod($field1767)) {
$ans1753 = $field1767.full_meth(ED5,anf_arg1737);
} else {
if(!(R.isFunction($field1767))) {
R.ffi.throwNonFunApp(L[754],$field1767);
}
$ans1753 = $field1767.app(anf_arg1737);
}
break;
case 9: anf_array1741[4] = $ans1753;
$step1752 = 10;
$al1754 = L[755];
$field1768 = R.getColonFieldLoc(ED5,"text",L[755]);
if(R.isMethod($field1768)) {
$ans1753 = $field1768.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1768))) {
R.ffi.throwNonFunApp(L[755],$field1768);
}
$ans1753 = $field1768.app((":"));
}
break;
case 10: anf_array1741[5] = $ans1753;
$step1752 = 11;
$al1754 = L[742];
$field1769 = R.getColonFieldLoc(anf_method_obj1740,"make",L[742]);
if(R.isMethod($field1769)) {
$ans1753 = $field1769.full_meth(anf_method_obj1740,anf_array1741);
} else {
if(!(R.isFunction($field1769))) {
R.ffi.throwNonFunApp(L[742],$field1769);
}
$ans1753 = $field1769.app(anf_array1741);
}
break;
case 11: var anf_arg1748 = $ans1753;
$al1754 = L[756];
var anf_arg1743 = G(self1681,"tup",L[756]);
$step1752 = 12;
$al1754 = L[757];
$field1770 = R.getColonFieldLoc(ED5,"embed",L[757]);
if(R.isMethod($field1770)) {
$ans1753 = $field1770.full_meth(ED5,anf_arg1743);
} else {
if(!(R.isFunction($field1770))) {
R.ffi.throwNonFunApp(L[757],$field1770);
}
$ans1753 = $field1770.app(anf_arg1743);
}
break;
case 12: var anf_arg1749 = $ans1753;
$step1752 = 13;
$al1754 = L[738];
$field1771 = R.getColonFieldLoc(anf_method_obj1745,"make4",L[738]);
if(R.isMethod($field1771)) {
$ans1753 = $field1771.full_meth(anf_method_obj1745,anf_arg1746,anf_arg1747,anf_arg1748,anf_arg1749);
} else {
if(!(R.isFunction($field1771))) {
R.ffi.throwNonFunApp(L[738],$field1771);
}
$ans1753 = $field1771.app(anf_arg1746,anf_arg1747,anf_arg1748,anf_arg1749);
}
break;
case 13: ++R.GAS;
return $ans1753;
default: throw "No case numbered " + $step1752 + " in $temp_branch1751";
}
}
} catch($e1772) {
if(R.isCont($e1772) && ($step1752 !== 13)) {
$e1772.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1754,$temp_branch1751,$step1752,[ast1722],[anf_method_obj1745,anf_arg1746,anf_arg1747,anf_method_obj1740,anf_array1741,anf_arg1732,anf_arg1748]);
}
if(R.isPyretException($e1772)) {
$e1772.pyretStack.push($al1754);
}
throw $e1772;
}
};
$ans1685 = cases1714.$app_fields($temp_branch1751,[false]);
break;
case 19: if(cases1714.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[777],false,L[760]);
}
$step1679 = 31;
$al1686 = L[778];
var $temp_branch1799 = function($$resumer101) {
var $step1800 = 0;
var $ans1801 = D;
var $al1802 = L[762];
try {
if(R.isActivationRecord($$resumer101)) {
$step1800 = $$resumer101.step;
$al1802 = $$resumer101.from;
$ans1801 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj1793 = $$resumer101.vars[0];
anf_arg1794 = $$resumer101.vars[1];
anf_arg1795 = $$resumer101.vars[2];
anf_method_obj1784 = $$resumer101.vars[3];
anf_arg1785 = $$resumer101.vars[4];
anf_arg1786 = $$resumer101.vars[5];
anf_arg1787 = $$resumer101.vars[6];
anf_arg1788 = $$resumer101.vars[7];
anf_arg1796 = $$resumer101.vars[8];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1800) {
case 0: $al1802 = L[762];
var anf_method_obj1793 = G(ED5,"error",L[762]);
var anf_fun1773 = ed$intro122.$var;
$al1802 = L[763];
var anf_arg1774 = G(self1681,"loc",L[763]);
$step1800 = 1;
$al1802 = L[776];
if(!(R.isFunction(anf_fun1773))) {
R.ffi.throwNonFunApp($al1802,anf_fun1773);
}
$ans1801 = anf_fun1773.app(("tuple binding"),anf_arg1774,(0),(true));
break;
case 1: var anf_arg1794 = $ans1801;
$al1802 = L[764];
var anf_arg1775 = G(self1681,"loc",L[764]);
$step1800 = 2;
$al1802 = L[765];
$field1803 = R.getColonFieldLoc(ED5,"cmcode",L[765]);
if(R.isMethod($field1803)) {
$ans1801 = $field1803.full_meth(ED5,anf_arg1775);
} else {
if(!(R.isFunction($field1803))) {
R.ffi.throwNonFunApp(L[765],$field1803);
}
$ans1801 = $field1803.app(anf_arg1775);
}
break;
case 2: var anf_arg1795 = $ans1801;
$al1802 = L[766];
var anf_method_obj1784 = G(ED5,"para",L[766]);
$step1800 = 3;
$al1802 = L[767];
$field1804 = R.getColonFieldLoc(ED5,"text",L[767]);
if(R.isMethod($field1804)) {
$ans1801 = $field1804.full_meth(ED5,("failed because "));
} else {
if(!(R.isFunction($field1804))) {
R.ffi.throwNonFunApp(L[767],$field1804);
}
$ans1801 = $field1804.app(("failed because "));
}
break;
case 3: var anf_arg1785 = $ans1801;
$al1802 = L[768];
var anf_arg1778 = G(self1681,"desiredLength",L[768]);
$step1800 = 4;
$al1802 = L[769];
$field1805 = R.getColonFieldLoc(ED5,"embed",L[769]);
if(R.isMethod($field1805)) {
$ans1801 = $field1805.full_meth(ED5,anf_arg1778);
} else {
if(!(R.isFunction($field1805))) {
R.ffi.throwNonFunApp(L[769],$field1805);
}
$ans1801 = $field1805.app(anf_arg1778);
}
break;
case 4: var anf_arg1786 = $ans1801;
$step1800 = 5;
$al1802 = L[770];
$field1806 = R.getColonFieldLoc(ED5,"ed-components",L[770]);
if(R.isMethod($field1806)) {
$ans1801 = $field1806.full_meth(ED5,(" are expected to be bound to values, but the binding was given a tuple containing "));
} else {
if(!(R.isFunction($field1806))) {
R.ffi.throwNonFunApp(L[770],$field1806);
}
$ans1801 = $field1806.app((" are expected to be bound to values, but the binding was given a tuple containing "));
}
break;
case 5: var anf_arg1787 = $ans1801;
$al1802 = L[771];
var anf_arg1781 = G(self1681,"length",L[771]);
$step1800 = 6;
$al1802 = L[772];
$field1807 = R.getColonFieldLoc(ED5,"ed-components",L[772]);
if(R.isMethod($field1807)) {
$ans1801 = $field1807.full_meth(ED5,anf_arg1781);
} else {
if(!(R.isFunction($field1807))) {
R.ffi.throwNonFunApp(L[772],$field1807);
}
$ans1801 = $field1807.app(anf_arg1781);
}
break;
case 6: var anf_arg1788 = $ans1801;
$step1800 = 7;
$al1802 = L[773];
$field1808 = R.getColonFieldLoc(ED5,"text",L[773]);
if(R.isMethod($field1808)) {
$ans1801 = $field1808.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1808))) {
R.ffi.throwNonFunApp(L[773],$field1808);
}
$ans1801 = $field1808.app((":"));
}
break;
case 7: var anf_arg1789 = $ans1801;
$step1800 = 8;
$al1802 = L[766];
$field1809 = R.getColonFieldLoc(anf_method_obj1784,"make5",L[766]);
if(R.isMethod($field1809)) {
$ans1801 = $field1809.full_meth(anf_method_obj1784,anf_arg1785,anf_arg1786,anf_arg1787,anf_arg1788,anf_arg1789);
} else {
if(!(R.isFunction($field1809))) {
R.ffi.throwNonFunApp(L[766],$field1809);
}
$ans1801 = $field1809.app(anf_arg1785,anf_arg1786,anf_arg1787,anf_arg1788,anf_arg1789);
}
break;
case 8: var anf_arg1796 = $ans1801;
$al1802 = L[774];
var anf_arg1791 = G(self1681,"tup",L[774]);
$step1800 = 9;
$al1802 = L[775];
$field1810 = R.getColonFieldLoc(ED5,"embed",L[775]);
if(R.isMethod($field1810)) {
$ans1801 = $field1810.full_meth(ED5,anf_arg1791);
} else {
if(!(R.isFunction($field1810))) {
R.ffi.throwNonFunApp(L[775],$field1810);
}
$ans1801 = $field1810.app(anf_arg1791);
}
break;
case 9: var anf_arg1797 = $ans1801;
$step1800 = 10;
$al1802 = L[762];
$field1811 = R.getColonFieldLoc(anf_method_obj1793,"make4",L[762]);
if(R.isMethod($field1811)) {
$ans1801 = $field1811.full_meth(anf_method_obj1793,anf_arg1794,anf_arg1795,anf_arg1796,anf_arg1797);
} else {
if(!(R.isFunction($field1811))) {
R.ffi.throwNonFunApp(L[762],$field1811);
}
$ans1801 = $field1811.app(anf_arg1794,anf_arg1795,anf_arg1796,anf_arg1797);
}
break;
case 10: ++R.GAS;
return $ans1801;
default: throw "No case numbered " + $step1800 + " in $temp_branch1799";
}
}
} catch($e1812) {
if(R.isCont($e1812) && ($step1800 !== 10)) {
$e1812.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1802,$temp_branch1799,$step1800,[],[anf_method_obj1793,anf_arg1794,anf_arg1795,anf_method_obj1784,anf_arg1785,anf_arg1786,anf_arg1787,anf_arg1788,anf_arg1796]);
}
if(R.isPyretException($e1812)) {
$e1812.pyretStack.push($al1802);
}
throw $e1812;
}
};
$ans1685 = cases1714.$app_fields($temp_branch1799,[]);
break;
case 20: $step1679 = 31;
$al1686 = L[760];
$ans1685 = R.throwNoCasesMatched(L[760],cases1714);
break;
case 21: $al1686 = L[781];
var anf_method_obj1829 = G(ED5,"error",L[781]);
$al1686 = L[782];
var anf_method_obj1824 = G(ED5,"para",L[782]);
$al1686 = L[783];
var anf_array1825 = R.makeArrayN((7));
$step1679 = 22;
$al1686 = L[784];
$field1814 = R.getColonFieldLoc(ED5,"text",L[784]);
if(R.isMethod($field1814)) {
$ans1685 = $field1814.full_meth(ED5,("The tuple binding in"));
} else {
if(!(R.isFunction($field1814))) {
R.ffi.throwNonFunApp(L[784],$field1814);
}
$ans1685 = $field1814.app(("The tuple binding in"));
}
break;
case 22: anf_array1825[0] = $ans1685;
$al1686 = L[785];
var anf_arg1815 = G(self1681,"loc",L[785]);
$step1679 = 23;
$al1686 = L[786];
$field1816 = R.getColonFieldLoc(ED5,"loc",L[786]);
if(R.isMethod($field1816)) {
$ans1685 = $field1816.full_meth(ED5,anf_arg1815);
} else {
if(!(R.isFunction($field1816))) {
R.ffi.throwNonFunApp(L[786],$field1816);
}
$ans1685 = $field1816.app(anf_arg1815);
}
break;
case 23: anf_array1825[1] = $ans1685;
$step1679 = 24;
$al1686 = L[787];
$field1817 = R.getColonFieldLoc(ED5,"text",L[787]);
if(R.isMethod($field1817)) {
$ans1685 = $field1817.full_meth(ED5,("  failed because "));
} else {
if(!(R.isFunction($field1817))) {
R.ffi.throwNonFunApp(L[787],$field1817);
}
$ans1685 = $field1817.app(("  failed because "));
}
break;
case 24: anf_array1825[2] = $ans1685;
$al1686 = L[788];
var anf_arg1818 = G(self1681,"desiredLength",L[788]);
$step1679 = 25;
$al1686 = L[789];
$field1819 = R.getColonFieldLoc(ED5,"ed-components",L[789]);
if(R.isMethod($field1819)) {
$ans1685 = $field1819.full_meth(ED5,anf_arg1818);
} else {
if(!(R.isFunction($field1819))) {
R.ffi.throwNonFunApp(L[789],$field1819);
}
$ans1685 = $field1819.app(anf_arg1818);
}
break;
case 25: anf_array1825[3] = $ans1685;
$step1679 = 26;
$al1686 = L[790];
$field1820 = R.getColonFieldLoc(ED5,"text",L[790]);
if(R.isMethod($field1820)) {
$ans1685 = $field1820.full_meth(ED5,(" are expected to be bound to values, but the binding was given a tuple containing "));
} else {
if(!(R.isFunction($field1820))) {
R.ffi.throwNonFunApp(L[790],$field1820);
}
$ans1685 = $field1820.app((" are expected to be bound to values, but the binding was given a tuple containing "));
}
break;
case 26: anf_array1825[4] = $ans1685;
$al1686 = L[791];
var anf_arg1821 = G(self1681,"length",L[791]);
$step1679 = 27;
$al1686 = L[792];
$field1822 = R.getColonFieldLoc(ED5,"ed-components",L[792]);
if(R.isMethod($field1822)) {
$ans1685 = $field1822.full_meth(ED5,anf_arg1821);
} else {
if(!(R.isFunction($field1822))) {
R.ffi.throwNonFunApp(L[792],$field1822);
}
$ans1685 = $field1822.app(anf_arg1821);
}
break;
case 27: anf_array1825[5] = $ans1685;
$step1679 = 28;
$al1686 = L[793];
$field1823 = R.getColonFieldLoc(ED5,"text",L[793]);
if(R.isMethod($field1823)) {
$ans1685 = $field1823.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1823))) {
R.ffi.throwNonFunApp(L[793],$field1823);
}
$ans1685 = $field1823.app((":"));
}
break;
case 28: anf_array1825[6] = $ans1685;
$step1679 = 29;
$al1686 = L[782];
$field1826 = R.getColonFieldLoc(anf_method_obj1824,"make",L[782]);
if(R.isMethod($field1826)) {
$ans1685 = $field1826.full_meth(anf_method_obj1824,anf_array1825);
} else {
if(!(R.isFunction($field1826))) {
R.ffi.throwNonFunApp(L[782],$field1826);
}
$ans1685 = $field1826.app(anf_array1825);
}
break;
case 29: var anf_arg1830 = $ans1685;
$al1686 = L[794];
var anf_arg1827 = G(self1681,"tup",L[794]);
$step1679 = 30;
$al1686 = L[795];
$field1828 = R.getColonFieldLoc(ED5,"embed",L[795]);
if(R.isMethod($field1828)) {
$ans1685 = $field1828.full_meth(ED5,anf_arg1827);
} else {
if(!(R.isFunction($field1828))) {
R.ffi.throwNonFunApp(L[795],$field1828);
}
$ans1685 = $field1828.app(anf_arg1827);
}
break;
case 30: var anf_arg1831 = $ans1685;
$step1679 = 31;
$al1686 = L[781];
$field1832 = R.getColonFieldLoc(anf_method_obj1829,"make2",L[781]);
if(R.isMethod($field1832)) {
$ans1685 = $field1832.full_meth(anf_method_obj1829,anf_arg1830,anf_arg1831);
} else {
if(!(R.isFunction($field1832))) {
R.ffi.throwNonFunApp(L[781],$field1832);
}
$ans1685 = $field1832.app(anf_arg1830,anf_arg1831);
}
break;
case 31: ++R.GAS;
return $ans1685;
default: throw "No case numbered " + $step1679 + " in $temp_full1680";
}
}
} catch($e1835) {
if(R.isCont($e1835) && ($step1679 !== 31)) {
$e1835.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1686,$temp_full1680,$step1679,[self1681,maybe$stack$loc1682,src$available1683,maybe$ast1684],[anf_method_obj1706,anf_method_obj1700,anf_array1701,anf_arg1707,anf_arg1708,cases1714,anf_method_obj1829,anf_method_obj1824,anf_array1825,anf_arg1830]);
}
if(R.isPyretException($e1835)) {
$e1835.pyretStack.push($al1686);
}
throw $e1835;
}
};
var anf_variant_member6261 = R.makeMethod3($temp_full1680,"render-fancy-reason");
var $temp_full1837 = function($self1838) {
var $step1836 = 0;
var $ans1839 = D;
var $al1840 = L[830];
try {
if(R.isActivationRecord($self1838)) {
$step1836 = $self1838.step;
$al1840 = $self1838.from;
$ans1839 = $self1838.ans;
self1838 = $self1838.args[0];
anf_method_obj1860 = $self1838.vars[0];
anf_method_obj1854 = $self1838.vars[1];
anf_array1855 = $self1838.vars[2];
anf_arg1861 = $self1838.vars[3];
anf_arg1862 = $self1838.vars[4];
anf_method_obj1880 = $self1838.vars[5];
anf_method_obj1875 = $self1838.vars[6];
anf_array1876 = $self1838.vars[7];
anf_arg1881 = $self1838.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[830],1,$t);
}
var self1838 = $self1838;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1836) {
case 0: $al1840 = L[797];
var anf_method_obj1841 = G(self1838,"loc",L[797]);
$step1836 = 1;
$al1840 = L[798];
$field1842 = R.getColonFieldLoc(anf_method_obj1841,"is-builtin",L[798]);
if(R.isMethod($field1842)) {
$ans1839 = $field1842.full_meth(anf_method_obj1841);
} else {
if(!(R.isFunction($field1842))) {
R.ffi.throwNonFunApp(L[798],$field1842);
}
$ans1839 = $field1842.app();
}
break;
case 1: var anf_arg1843 = $ans1839;
$al1840 = L[798];
var anf_if1884 = R.checkWrapBoolean(anf_arg1843);
$step1836 = R.isPyretTrue(anf_if1884)?2:13;
break;
case 2: $al1840 = L[799];
var anf_method_obj1860 = G(ED5,"error",L[799]);
$al1840 = L[800];
var anf_method_obj1854 = G(ED5,"para",L[800]);
$al1840 = L[801];
var anf_array1855 = R.makeArrayN((7));
$step1836 = 3;
$al1840 = L[802];
$field1844 = R.getColonFieldLoc(ED5,"text",L[802]);
if(R.isMethod($field1844)) {
$ans1839 = $field1844.full_meth(ED5,("The tuple binding in"));
} else {
if(!(R.isFunction($field1844))) {
R.ffi.throwNonFunApp(L[802],$field1844);
}
$ans1839 = $field1844.app(("The tuple binding in"));
}
break;
case 3: anf_array1855[0] = $ans1839;
$al1840 = L[803];
var anf_arg1845 = G(self1838,"loc",L[803]);
$step1836 = 4;
$al1840 = L[804];
$field1846 = R.getColonFieldLoc(ED5,"loc",L[804]);
if(R.isMethod($field1846)) {
$ans1839 = $field1846.full_meth(ED5,anf_arg1845);
} else {
if(!(R.isFunction($field1846))) {
R.ffi.throwNonFunApp(L[804],$field1846);
}
$ans1839 = $field1846.app(anf_arg1845);
}
break;
case 4: anf_array1855[1] = $ans1839;
$step1836 = 5;
$al1840 = L[805];
$field1847 = R.getColonFieldLoc(ED5,"text",L[805]);
if(R.isMethod($field1847)) {
$ans1839 = $field1847.full_meth(ED5,("  failed because "));
} else {
if(!(R.isFunction($field1847))) {
R.ffi.throwNonFunApp(L[805],$field1847);
}
$ans1839 = $field1847.app(("  failed because "));
}
break;
case 5: anf_array1855[2] = $ans1839;
$al1840 = L[806];
var anf_arg1848 = G(self1838,"desiredLength",L[806]);
$step1836 = 6;
$al1840 = L[807];
$field1849 = R.getColonFieldLoc(ED5,"ed-components",L[807]);
if(R.isMethod($field1849)) {
$ans1839 = $field1849.full_meth(ED5,anf_arg1848);
} else {
if(!(R.isFunction($field1849))) {
R.ffi.throwNonFunApp(L[807],$field1849);
}
$ans1839 = $field1849.app(anf_arg1848);
}
break;
case 6: anf_array1855[3] = $ans1839;
$step1836 = 7;
$al1840 = L[808];
$field1850 = R.getColonFieldLoc(ED5,"text",L[808]);
if(R.isMethod($field1850)) {
$ans1839 = $field1850.full_meth(ED5,(" are expected to be bound to values, but the binding was given a tuple containing "));
} else {
if(!(R.isFunction($field1850))) {
R.ffi.throwNonFunApp(L[808],$field1850);
}
$ans1839 = $field1850.app((" are expected to be bound to values, but the binding was given a tuple containing "));
}
break;
case 7: anf_array1855[4] = $ans1839;
$al1840 = L[809];
var anf_arg1851 = G(self1838,"length",L[809]);
$step1836 = 8;
$al1840 = L[810];
$field1852 = R.getColonFieldLoc(ED5,"ed-components",L[810]);
if(R.isMethod($field1852)) {
$ans1839 = $field1852.full_meth(ED5,anf_arg1851);
} else {
if(!(R.isFunction($field1852))) {
R.ffi.throwNonFunApp(L[810],$field1852);
}
$ans1839 = $field1852.app(anf_arg1851);
}
break;
case 8: anf_array1855[5] = $ans1839;
$step1836 = 9;
$al1840 = L[811];
$field1853 = R.getColonFieldLoc(ED5,"text",L[811]);
if(R.isMethod($field1853)) {
$ans1839 = $field1853.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1853))) {
R.ffi.throwNonFunApp(L[811],$field1853);
}
$ans1839 = $field1853.app((":"));
}
break;
case 9: anf_array1855[6] = $ans1839;
$step1836 = 10;
$al1840 = L[800];
$field1856 = R.getColonFieldLoc(anf_method_obj1854,"make",L[800]);
if(R.isMethod($field1856)) {
$ans1839 = $field1856.full_meth(anf_method_obj1854,anf_array1855);
} else {
if(!(R.isFunction($field1856))) {
R.ffi.throwNonFunApp(L[800],$field1856);
}
$ans1839 = $field1856.app(anf_array1855);
}
break;
case 10: var anf_arg1861 = $ans1839;
$al1840 = L[812];
var anf_arg1857 = G(self1838,"tup",L[812]);
$step1836 = 11;
$al1840 = L[813];
$field1858 = R.getColonFieldLoc(ED5,"embed",L[813]);
if(R.isMethod($field1858)) {
$ans1839 = $field1858.full_meth(ED5,anf_arg1857);
} else {
if(!(R.isFunction($field1858))) {
R.ffi.throwNonFunApp(L[813],$field1858);
}
$ans1839 = $field1858.app(anf_arg1857);
}
break;
case 11: var anf_arg1862 = $ans1839;
var anf_fun1859 = please$report$bug133.$var;
$step1836 = 12;
$al1840 = L[814];
if(!(R.isFunction(anf_fun1859))) {
R.ffi.throwNonFunApp($al1840,anf_fun1859);
}
$ans1839 = anf_fun1859.app();
break;
case 12: var anf_arg1863 = $ans1839;
$step1836 = 23;
$al1840 = L[799];
$field1864 = R.getColonFieldLoc(anf_method_obj1860,"make3",L[799]);
if(R.isMethod($field1864)) {
$ans1839 = $field1864.full_meth(anf_method_obj1860,anf_arg1861,anf_arg1862,anf_arg1863);
} else {
if(!(R.isFunction($field1864))) {
R.ffi.throwNonFunApp(L[799],$field1864);
}
$ans1839 = $field1864.app(anf_arg1861,anf_arg1862,anf_arg1863);
}
break;
case 13: $al1840 = L[815];
var anf_method_obj1880 = G(ED5,"error",L[815]);
$al1840 = L[816];
var anf_method_obj1875 = G(ED5,"para",L[816]);
$al1840 = L[817];
var anf_array1876 = R.makeArrayN((7));
$step1836 = 14;
$al1840 = L[818];
$field1865 = R.getColonFieldLoc(ED5,"text",L[818]);
if(R.isMethod($field1865)) {
$ans1839 = $field1865.full_meth(ED5,("The tuple binding in"));
} else {
if(!(R.isFunction($field1865))) {
R.ffi.throwNonFunApp(L[818],$field1865);
}
$ans1839 = $field1865.app(("The tuple binding in"));
}
break;
case 14: anf_array1876[0] = $ans1839;
$al1840 = L[819];
var anf_arg1866 = G(self1838,"loc",L[819]);
$step1836 = 15;
$al1840 = L[820];
$field1867 = R.getColonFieldLoc(ED5,"loc",L[820]);
if(R.isMethod($field1867)) {
$ans1839 = $field1867.full_meth(ED5,anf_arg1866);
} else {
if(!(R.isFunction($field1867))) {
R.ffi.throwNonFunApp(L[820],$field1867);
}
$ans1839 = $field1867.app(anf_arg1866);
}
break;
case 15: anf_array1876[1] = $ans1839;
$step1836 = 16;
$al1840 = L[821];
$field1868 = R.getColonFieldLoc(ED5,"text",L[821]);
if(R.isMethod($field1868)) {
$ans1839 = $field1868.full_meth(ED5,("  failed because "));
} else {
if(!(R.isFunction($field1868))) {
R.ffi.throwNonFunApp(L[821],$field1868);
}
$ans1839 = $field1868.app(("  failed because "));
}
break;
case 16: anf_array1876[2] = $ans1839;
$al1840 = L[822];
var anf_arg1869 = G(self1838,"desiredLength",L[822]);
$step1836 = 17;
$al1840 = L[823];
$field1870 = R.getColonFieldLoc(ED5,"ed-components",L[823]);
if(R.isMethod($field1870)) {
$ans1839 = $field1870.full_meth(ED5,anf_arg1869);
} else {
if(!(R.isFunction($field1870))) {
R.ffi.throwNonFunApp(L[823],$field1870);
}
$ans1839 = $field1870.app(anf_arg1869);
}
break;
case 17: anf_array1876[3] = $ans1839;
$step1836 = 18;
$al1840 = L[824];
$field1871 = R.getColonFieldLoc(ED5,"text",L[824]);
if(R.isMethod($field1871)) {
$ans1839 = $field1871.full_meth(ED5,(" are expected to be bound to values, but the right hand side evaluated to a tuple containing "));
} else {
if(!(R.isFunction($field1871))) {
R.ffi.throwNonFunApp(L[824],$field1871);
}
$ans1839 = $field1871.app((" are expected to be bound to values, but the right hand side evaluated to a tuple containing "));
}
break;
case 18: anf_array1876[4] = $ans1839;
$al1840 = L[825];
var anf_arg1872 = G(self1838,"length",L[825]);
$step1836 = 19;
$al1840 = L[826];
$field1873 = R.getColonFieldLoc(ED5,"ed-components",L[826]);
if(R.isMethod($field1873)) {
$ans1839 = $field1873.full_meth(ED5,anf_arg1872);
} else {
if(!(R.isFunction($field1873))) {
R.ffi.throwNonFunApp(L[826],$field1873);
}
$ans1839 = $field1873.app(anf_arg1872);
}
break;
case 19: anf_array1876[5] = $ans1839;
$step1836 = 20;
$al1840 = L[827];
$field1874 = R.getColonFieldLoc(ED5,"text",L[827]);
if(R.isMethod($field1874)) {
$ans1839 = $field1874.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field1874))) {
R.ffi.throwNonFunApp(L[827],$field1874);
}
$ans1839 = $field1874.app((":"));
}
break;
case 20: anf_array1876[6] = $ans1839;
$step1836 = 21;
$al1840 = L[816];
$field1877 = R.getColonFieldLoc(anf_method_obj1875,"make",L[816]);
if(R.isMethod($field1877)) {
$ans1839 = $field1877.full_meth(anf_method_obj1875,anf_array1876);
} else {
if(!(R.isFunction($field1877))) {
R.ffi.throwNonFunApp(L[816],$field1877);
}
$ans1839 = $field1877.app(anf_array1876);
}
break;
case 21: var anf_arg1881 = $ans1839;
$al1840 = L[828];
var anf_arg1878 = G(self1838,"tup",L[828]);
$step1836 = 22;
$al1840 = L[829];
$field1879 = R.getColonFieldLoc(ED5,"embed",L[829]);
if(R.isMethod($field1879)) {
$ans1839 = $field1879.full_meth(ED5,anf_arg1878);
} else {
if(!(R.isFunction($field1879))) {
R.ffi.throwNonFunApp(L[829],$field1879);
}
$ans1839 = $field1879.app(anf_arg1878);
}
break;
case 22: var anf_arg1882 = $ans1839;
$step1836 = 23;
$al1840 = L[815];
$field1883 = R.getColonFieldLoc(anf_method_obj1880,"make2",L[815]);
if(R.isMethod($field1883)) {
$ans1839 = $field1883.full_meth(anf_method_obj1880,anf_arg1881,anf_arg1882);
} else {
if(!(R.isFunction($field1883))) {
R.ffi.throwNonFunApp(L[815],$field1883);
}
$ans1839 = $field1883.app(anf_arg1881,anf_arg1882);
}
break;
case 23: ++R.GAS;
return $ans1839;
default: throw "No case numbered " + $step1836 + " in $temp_full1837";
}
}
} catch($e1885) {
if(R.isCont($e1885) && ($step1836 !== 23)) {
$e1885.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1840,$temp_full1837,$step1836,[self1838],[anf_method_obj1860,anf_method_obj1854,anf_array1855,anf_arg1861,anf_arg1862,anf_method_obj1880,anf_method_obj1875,anf_array1876,anf_arg1881]);
}
if(R.isPyretException($e1885)) {
$e1885.pyretStack.push($al1840);
}
throw $e1885;
}
};
var anf_variant_member6262 = R.makeMethod0($temp_full1837,"render-reason");
var $temp_full1887 = function($self1888,$maybe$stack$loc1889,$src$available1890,$maybe$ast1891) {
var $step1886 = 0;
var $ans1892 = D;
var $al1893 = L[884];
try {
if(R.isActivationRecord($self1888)) {
$step1886 = $self1888.step;
$al1893 = $self1888.from;
$ans1892 = $self1888.ans;
self1888 = $self1888.args[0];
maybe$stack$loc1889 = $self1888.args[1];
src$available1890 = $self1888.args[2];
maybe$ast1891 = $self1888.args[3];
anf_method_obj1905 = $self1888.vars[0];
anf_arg1906 = $self1888.vars[1];
anf_method_obj1900 = $self1888.vars[2];
anf_arg1907 = $self1888.vars[3];
cases1913 = $self1888.vars[4];
anf_method_obj2001 = $self1888.vars[5];
anf_arg2002 = $self1888.vars[6];
anf_method_obj1996 = $self1888.vars[7];
anf_arg2003 = $self1888.vars[8];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[884],4,$t);
}
var self1888 = $self1888;
var maybe$stack$loc1889 = $maybe$stack$loc1889;
var src$available1890 = $src$available1890;
var maybe$ast1891 = $maybe$ast1891;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1886) {
case 0: $al1893 = L[831];
var anf_method_obj1894 = G(self1888,"loc",L[831]);
$step1886 = 1;
$al1893 = L[832];
$field1895 = R.getColonFieldLoc(anf_method_obj1894,"is-builtin",L[832]);
if(R.isMethod($field1895)) {
$ans1892 = $field1895.full_meth(anf_method_obj1894);
} else {
if(!(R.isFunction($field1895))) {
R.ffi.throwNonFunApp(L[832],$field1895);
}
$ans1892 = $field1895.app();
}
break;
case 1: var anf_arg1896 = $ans1892;
$al1893 = L[832];
var anf_if2007 = R.checkWrapBoolean(anf_arg1896);
$step1886 = R.isPyretTrue(anf_if2007)?2:7;
break;
case 2: $al1893 = L[833];
var anf_method_obj1905 = G(ED5,"error",L[833]);
var anf_fun1897 = ed$simple$intro95.$var;
$al1893 = L[834];
var anf_arg1898 = G(self1888,"loc",L[834]);
$step1886 = 3;
$al1893 = L[839];
if(!(R.isFunction(anf_fun1897))) {
R.ffi.throwNonFunApp($al1893,anf_fun1897);
}
$ans1892 = anf_fun1897.app(("field lookup"),anf_arg1898);
break;
case 3: var anf_arg1906 = $ans1892;
$al1893 = L[835];
var anf_method_obj1900 = G(ED5,"para",L[835]);
$step1886 = 4;
$al1893 = L[836];
$field1899 = R.getColonFieldLoc(ED5,"text",L[836]);
if(R.isMethod($field1899)) {
$ans1892 = $field1899.full_meth(ED5,("It was given a non-object value:"));
} else {
if(!(R.isFunction($field1899))) {
R.ffi.throwNonFunApp(L[836],$field1899);
}
$ans1892 = $field1899.app(("It was given a non-object value:"));
}
break;
case 4: var anf_arg1901 = $ans1892;
$step1886 = 5;
$al1893 = L[835];
$field1902 = R.getColonFieldLoc(anf_method_obj1900,"make1",L[835]);
if(R.isMethod($field1902)) {
$ans1892 = $field1902.full_meth(anf_method_obj1900,anf_arg1901);
} else {
if(!(R.isFunction($field1902))) {
R.ffi.throwNonFunApp(L[835],$field1902);
}
$ans1892 = $field1902.app(anf_arg1901);
}
break;
case 5: var anf_arg1907 = $ans1892;
$al1893 = L[837];
var anf_arg1903 = G(self1888,"obj",L[837]);
$step1886 = 6;
$al1893 = L[838];
$field1904 = R.getColonFieldLoc(ED5,"embed",L[838]);
if(R.isMethod($field1904)) {
$ans1892 = $field1904.full_meth(ED5,anf_arg1903);
} else {
if(!(R.isFunction($field1904))) {
R.ffi.throwNonFunApp(L[838],$field1904);
}
$ans1892 = $field1904.app(anf_arg1903);
}
break;
case 6: var anf_arg1908 = $ans1892;
$step1886 = 20;
$al1893 = L[833];
$field1909 = R.getColonFieldLoc(anf_method_obj1905,"make3",L[833]);
if(R.isMethod($field1909)) {
$ans1892 = $field1909.full_meth(anf_method_obj1905,anf_arg1906,anf_arg1907,anf_arg1908);
} else {
if(!(R.isFunction($field1909))) {
R.ffi.throwNonFunApp(L[833],$field1909);
}
$ans1892 = $field1909.app(anf_arg1906,anf_arg1907,anf_arg1908);
}
break;
case 7: $al1893 = L[840];
var anf_arg1910 = G(self1888,"loc",L[840]);
$step1886 = 8;
$al1893 = L[841];
if(!(R.isFunction(src$available1890))) {
R.ffi.throwNonFunApp($al1893,src$available1890);
}
$ans1892 = src$available1890.app(anf_arg1910);
break;
case 8: var anf_arg1911 = $ans1892;
$al1893 = L[841];
var anf_if2006 = R.checkWrapBoolean(anf_arg1911);
$step1886 = R.isPyretTrue(anf_if2006)?9:15;
break;
case 9: $al1893 = L[842];
var anf_arg1912 = G(self1888,"loc",L[842]);
$step1886 = 10;
$al1893 = L[876];
if(!(R.isFunction(maybe$ast1891))) {
R.ffi.throwNonFunApp($al1893,maybe$ast1891);
}
$ans1892 = maybe$ast1891.app(anf_arg1912);
break;
case 10: var cases1913 = $ans1892;
$step1886 = 11;
$al1893 = L[875];
R._checkAnn(L[875],R.getDotAnn(L[875],"O",O13,"Option"),cases1913);
break;
case 11: var $cases_dispatch1992 = {"some":12,
"none":13};
$al1893 = L[862];
$step1886 = $cases_dispatch1992[cases1913.$name] || 14;
break;
case 12: if(cases1913.$arity !== 1) {
if(cases1913.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[861],1,cases1913.$arity,L[862]);
} else {
R.ffi.throwCasesSingletonErrorC(L[861],true,L[862]);
}
}
$step1886 = 20;
$al1893 = L[863];
var $temp_branch1951 = function($ast1914) {
var $step1952 = 0;
var $ans1953 = D;
var $al1954 = L[844];
try {
if(R.isActivationRecord($ast1914)) {
$step1952 = $ast1914.step;
$al1954 = $ast1914.from;
$ans1953 = $ast1914.ans;
ast1914 = $ast1914.args[0];
cases1915 = $ast1914.vars[0];
ast1929 = $ast1914.vars[1];
anf_method_obj1945 = $ast1914.vars[2];
anf_arg1946 = $ast1914.vars[3];
anf_arg1947 = $ast1914.vars[4];
anf_method_obj1938 = $ast1914.vars[5];
anf_arg1939 = $ast1914.vars[6];
anf_arg1934 = $ast1914.vars[7];
anf_arg1940 = $ast1914.vars[8];
anf_arg1948 = $ast1914.vars[9];
} else {
var ast1914 = $ast1914;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1952) {
case 0: var cases1915 = ast1914;
var $cases_dispatch1955 = {"s-dot":1,
"s-app":2};
$al1954 = L[844];
$step1952 = $cases_dispatch1955[cases1915.$name] || 3;
break;
case 1: if(cases1915.$arity !== 3) {
if(cases1915.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[843],3,cases1915.$arity,L[844]);
} else {
R.ffi.throwCasesSingletonErrorC(L[843],true,L[844]);
}
}
var $fn187 = cases1915.$constructor.$fieldNames;
R.derefField(cases1915.dict[$fn187[0]],cases1915.$mut_fields_mask[0],false);
R.derefField(cases1915.dict[$fn187[1]],cases1915.$mut_fields_mask[1],false);
R.derefField(cases1915.dict[$fn187[2]],cases1915.$mut_fields_mask[2],false);
$step1952 = 4;
$ans1953 = ast1914;
break;
case 2: if(cases1915.$arity !== 3) {
if(cases1915.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[845],3,cases1915.$arity,L[844]);
} else {
R.ffi.throwCasesSingletonErrorC(L[845],true,L[844]);
}
}
var $fn187 = cases1915.$constructor.$fieldNames;
R.derefField(cases1915.dict[$fn187[0]],cases1915.$mut_fields_mask[0],false);
var f1919 = R.derefField(cases1915.dict[$fn187[1]],cases1915.$mut_fields_mask[1],false);
R.derefField(cases1915.dict[$fn187[2]],cases1915.$mut_fields_mask[2],false);
$step1952 = 4;
$ans1953 = f1919;
break;
case 3: $step1952 = 4;
$al1954 = L[844];
$ans1953 = R.throwNoCasesMatched(L[844],cases1915);
break;
case 4: var ast1929 = $ans1953;
$al1954 = L[846];
var anf_method_obj1945 = G(ED5,"error",L[846]);
var anf_fun1923 = ed$intro122.$var;
$al1954 = L[847];
var anf_arg1924 = G(self1888,"loc",L[847]);
$step1952 = 5;
$al1954 = L[860];
if(!(R.isFunction(anf_fun1923))) {
R.ffi.throwNonFunApp($al1954,anf_fun1923);
}
$ans1953 = anf_fun1923.app(("field lookup expression"),anf_arg1924,(-1),(true));
break;
case 5: var anf_arg1946 = $ans1953;
$al1954 = L[848];
var anf_arg1925 = G(self1888,"loc",L[848]);
$step1952 = 6;
$al1954 = L[849];
$field1956 = R.getColonFieldLoc(ED5,"cmcode",L[849]);
if(R.isMethod($field1956)) {
$ans1953 = $field1956.full_meth(ED5,anf_arg1925);
} else {
if(!(R.isFunction($field1956))) {
R.ffi.throwNonFunApp(L[849],$field1956);
}
$ans1953 = $field1956.app(anf_arg1925);
}
break;
case 6: var anf_arg1947 = $ans1953;
$al1954 = L[850];
var anf_method_obj1938 = G(ED5,"para",L[850]);
$step1952 = 7;
$al1954 = L[851];
$field1957 = R.getColonFieldLoc(ED5,"text",L[851]);
if(R.isMethod($field1957)) {
$ans1953 = $field1957.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field1957))) {
R.ffi.throwNonFunApp(L[851],$field1957);
}
$ans1953 = $field1957.app(("The "));
}
break;
case 7: var anf_arg1939 = $ans1953;
$step1952 = 8;
$al1954 = L[852];
$field1958 = R.getColonFieldLoc(ED5,"text",L[852]);
if(R.isMethod($field1958)) {
$ans1953 = $field1958.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field1958))) {
R.ffi.throwNonFunApp(L[852],$field1958);
}
$ans1953 = $field1958.app(("left side"));
}
break;
case 8: var anf_arg1934 = $ans1953;
$al1954 = L[853];
var anf_method_obj1931 = G(ED5,"locs",L[853]);
$al1954 = L[854];
var anf_bracket1930 = G(ast1929,"obj",L[854]);
$al1954 = L[855];
var anf_arg1932 = G(anf_bracket1930,"l",L[855]);
$step1952 = 9;
$al1954 = L[853];
$field1959 = R.getColonFieldLoc(anf_method_obj1931,"make1",L[853]);
if(R.isMethod($field1959)) {
$ans1953 = $field1959.full_meth(anf_method_obj1931,anf_arg1932);
} else {
if(!(R.isFunction($field1959))) {
R.ffi.throwNonFunApp(L[853],$field1959);
}
$ans1953 = $field1959.app(anf_arg1932);
}
break;
case 9: var anf_arg1935 = $ans1953;
$step1952 = 10;
$al1954 = L[856];
$field1960 = R.getColonFieldLoc(ED5,"highlight",L[856]);
if(R.isMethod($field1960)) {
$ans1953 = $field1960.full_meth(ED5,anf_arg1934,anf_arg1935,(0));
} else {
if(!(R.isFunction($field1960))) {
R.ffi.throwNonFunApp(L[856],$field1960);
}
$ans1953 = $field1960.app(anf_arg1934,anf_arg1935,(0));
}
break;
case 10: var anf_arg1940 = $ans1953;
$step1952 = 11;
$al1954 = L[857];
$field1961 = R.getColonFieldLoc(ED5,"text",L[857]);
if(R.isMethod($field1961)) {
$ans1953 = $field1961.full_meth(ED5,(" was not an object:"));
} else {
if(!(R.isFunction($field1961))) {
R.ffi.throwNonFunApp(L[857],$field1961);
}
$ans1953 = $field1961.app((" was not an object:"));
}
break;
case 11: var anf_arg1941 = $ans1953;
$step1952 = 12;
$al1954 = L[850];
$field1962 = R.getColonFieldLoc(anf_method_obj1938,"make3",L[850]);
if(R.isMethod($field1962)) {
$ans1953 = $field1962.full_meth(anf_method_obj1938,anf_arg1939,anf_arg1940,anf_arg1941);
} else {
if(!(R.isFunction($field1962))) {
R.ffi.throwNonFunApp(L[850],$field1962);
}
$ans1953 = $field1962.app(anf_arg1939,anf_arg1940,anf_arg1941);
}
break;
case 12: var anf_arg1948 = $ans1953;
$al1954 = L[858];
var anf_arg1943 = G(self1888,"non-obj",L[858]);
$step1952 = 13;
$al1954 = L[859];
$field1963 = R.getColonFieldLoc(ED5,"embed",L[859]);
if(R.isMethod($field1963)) {
$ans1953 = $field1963.full_meth(ED5,anf_arg1943);
} else {
if(!(R.isFunction($field1963))) {
R.ffi.throwNonFunApp(L[859],$field1963);
}
$ans1953 = $field1963.app(anf_arg1943);
}
break;
case 13: var anf_arg1949 = $ans1953;
$step1952 = 14;
$al1954 = L[846];
$field1964 = R.getColonFieldLoc(anf_method_obj1945,"make4",L[846]);
if(R.isMethod($field1964)) {
$ans1953 = $field1964.full_meth(anf_method_obj1945,anf_arg1946,anf_arg1947,anf_arg1948,anf_arg1949);
} else {
if(!(R.isFunction($field1964))) {
R.ffi.throwNonFunApp(L[846],$field1964);
}
$ans1953 = $field1964.app(anf_arg1946,anf_arg1947,anf_arg1948,anf_arg1949);
}
break;
case 14: ++R.GAS;
return $ans1953;
default: throw "No case numbered " + $step1952 + " in $temp_branch1951";
}
}
} catch($e1965) {
if(R.isCont($e1965) && ($step1952 !== 14)) {
$e1965.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1954,$temp_branch1951,$step1952,[ast1914],[cases1915,ast1929,anf_method_obj1945,anf_arg1946,anf_arg1947,anf_method_obj1938,anf_arg1939,anf_arg1934,anf_arg1940,anf_arg1948]);
}
if(R.isPyretException($e1965)) {
$e1965.pyretStack.push($al1954);
}
throw $e1965;
}
};
$ans1892 = cases1913.$app_fields($temp_branch1951,[false]);
break;
case 13: if(cases1913.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[873],false,L[862]);
}
$step1886 = 20;
$al1893 = L[874];
var $temp_branch1982 = function($$resumer101) {
var $step1983 = 0;
var $ans1984 = D;
var $al1985 = L[864];
try {
if(R.isActivationRecord($$resumer101)) {
$step1983 = $$resumer101.step;
$al1985 = $$resumer101.from;
$ans1984 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj1976 = $$resumer101.vars[0];
anf_arg1977 = $$resumer101.vars[1];
anf_arg1978 = $$resumer101.vars[2];
anf_method_obj1971 = $$resumer101.vars[3];
anf_arg1979 = $$resumer101.vars[4];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1983) {
case 0: $al1985 = L[864];
var anf_method_obj1976 = G(ED5,"error",L[864]);
var anf_fun1966 = ed$intro122.$var;
$al1985 = L[865];
var anf_arg1967 = G(self1888,"loc",L[865]);
$step1983 = 1;
$al1985 = L[872];
if(!(R.isFunction(anf_fun1966))) {
R.ffi.throwNonFunApp($al1985,anf_fun1966);
}
$ans1984 = anf_fun1966.app(("field lookup expression"),anf_arg1967,(-1),(true));
break;
case 1: var anf_arg1977 = $ans1984;
$al1985 = L[866];
var anf_arg1968 = G(self1888,"loc",L[866]);
$step1983 = 2;
$al1985 = L[867];
$field1986 = R.getColonFieldLoc(ED5,"cmcode",L[867]);
if(R.isMethod($field1986)) {
$ans1984 = $field1986.full_meth(ED5,anf_arg1968);
} else {
if(!(R.isFunction($field1986))) {
R.ffi.throwNonFunApp(L[867],$field1986);
}
$ans1984 = $field1986.app(anf_arg1968);
}
break;
case 2: var anf_arg1978 = $ans1984;
$al1985 = L[868];
var anf_method_obj1971 = G(ED5,"para",L[868]);
$step1983 = 3;
$al1985 = L[869];
$field1987 = R.getColonFieldLoc(ED5,"text",L[869]);
if(R.isMethod($field1987)) {
$ans1984 = $field1987.full_meth(ED5,("The left side was not an object:"));
} else {
if(!(R.isFunction($field1987))) {
R.ffi.throwNonFunApp(L[869],$field1987);
}
$ans1984 = $field1987.app(("The left side was not an object:"));
}
break;
case 3: var anf_arg1972 = $ans1984;
$step1983 = 4;
$al1985 = L[868];
$field1988 = R.getColonFieldLoc(anf_method_obj1971,"make1",L[868]);
if(R.isMethod($field1988)) {
$ans1984 = $field1988.full_meth(anf_method_obj1971,anf_arg1972);
} else {
if(!(R.isFunction($field1988))) {
R.ffi.throwNonFunApp(L[868],$field1988);
}
$ans1984 = $field1988.app(anf_arg1972);
}
break;
case 4: var anf_arg1979 = $ans1984;
$al1985 = L[870];
var anf_arg1974 = G(self1888,"non-obj",L[870]);
$step1983 = 5;
$al1985 = L[871];
$field1989 = R.getColonFieldLoc(ED5,"embed",L[871]);
if(R.isMethod($field1989)) {
$ans1984 = $field1989.full_meth(ED5,anf_arg1974);
} else {
if(!(R.isFunction($field1989))) {
R.ffi.throwNonFunApp(L[871],$field1989);
}
$ans1984 = $field1989.app(anf_arg1974);
}
break;
case 5: var anf_arg1980 = $ans1984;
$step1983 = 6;
$al1985 = L[864];
$field1990 = R.getColonFieldLoc(anf_method_obj1976,"make4",L[864]);
if(R.isMethod($field1990)) {
$ans1984 = $field1990.full_meth(anf_method_obj1976,anf_arg1977,anf_arg1978,anf_arg1979,anf_arg1980);
} else {
if(!(R.isFunction($field1990))) {
R.ffi.throwNonFunApp(L[864],$field1990);
}
$ans1984 = $field1990.app(anf_arg1977,anf_arg1978,anf_arg1979,anf_arg1980);
}
break;
case 6: ++R.GAS;
return $ans1984;
default: throw "No case numbered " + $step1983 + " in $temp_branch1982";
}
}
} catch($e1991) {
if(R.isCont($e1991) && ($step1983 !== 6)) {
$e1991.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1985,$temp_branch1982,$step1983,[],[anf_method_obj1976,anf_arg1977,anf_arg1978,anf_method_obj1971,anf_arg1979]);
}
if(R.isPyretException($e1991)) {
$e1991.pyretStack.push($al1985);
}
throw $e1991;
}
};
$ans1892 = cases1913.$app_fields($temp_branch1982,[]);
break;
case 14: $step1886 = 20;
$al1893 = L[862];
$ans1892 = R.throwNoCasesMatched(L[862],cases1913);
break;
case 15: $al1893 = L[877];
var anf_method_obj2001 = G(ED5,"error",L[877]);
var anf_fun1993 = ed$simple$intro95.$var;
$al1893 = L[878];
var anf_arg1994 = G(self1888,"loc",L[878]);
$step1886 = 16;
$al1893 = L[883];
if(!(R.isFunction(anf_fun1993))) {
R.ffi.throwNonFunApp($al1893,anf_fun1993);
}
$ans1892 = anf_fun1993.app(("field lookup"),anf_arg1994);
break;
case 16: var anf_arg2002 = $ans1892;
$al1893 = L[879];
var anf_method_obj1996 = G(ED5,"para",L[879]);
$step1886 = 17;
$al1893 = L[880];
$field1995 = R.getColonFieldLoc(ED5,"text",L[880]);
if(R.isMethod($field1995)) {
$ans1892 = $field1995.full_meth(ED5,("The left side was not an object:"));
} else {
if(!(R.isFunction($field1995))) {
R.ffi.throwNonFunApp(L[880],$field1995);
}
$ans1892 = $field1995.app(("The left side was not an object:"));
}
break;
case 17: var anf_arg1997 = $ans1892;
$step1886 = 18;
$al1893 = L[879];
$field1998 = R.getColonFieldLoc(anf_method_obj1996,"make1",L[879]);
if(R.isMethod($field1998)) {
$ans1892 = $field1998.full_meth(anf_method_obj1996,anf_arg1997);
} else {
if(!(R.isFunction($field1998))) {
R.ffi.throwNonFunApp(L[879],$field1998);
}
$ans1892 = $field1998.app(anf_arg1997);
}
break;
case 18: var anf_arg2003 = $ans1892;
$al1893 = L[881];
var anf_arg1999 = G(self1888,"obj",L[881]);
$step1886 = 19;
$al1893 = L[882];
$field2000 = R.getColonFieldLoc(ED5,"embed",L[882]);
if(R.isMethod($field2000)) {
$ans1892 = $field2000.full_meth(ED5,anf_arg1999);
} else {
if(!(R.isFunction($field2000))) {
R.ffi.throwNonFunApp(L[882],$field2000);
}
$ans1892 = $field2000.app(anf_arg1999);
}
break;
case 19: var anf_arg2004 = $ans1892;
$step1886 = 20;
$al1893 = L[877];
$field2005 = R.getColonFieldLoc(anf_method_obj2001,"make3",L[877]);
if(R.isMethod($field2005)) {
$ans1892 = $field2005.full_meth(anf_method_obj2001,anf_arg2002,anf_arg2003,anf_arg2004);
} else {
if(!(R.isFunction($field2005))) {
R.ffi.throwNonFunApp(L[877],$field2005);
}
$ans1892 = $field2005.app(anf_arg2002,anf_arg2003,anf_arg2004);
}
break;
case 20: ++R.GAS;
return $ans1892;
default: throw "No case numbered " + $step1886 + " in $temp_full1887";
}
}
} catch($e2008) {
if(R.isCont($e2008) && ($step1886 !== 20)) {
$e2008.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1893,$temp_full1887,$step1886,[self1888,maybe$stack$loc1889,src$available1890,maybe$ast1891],[anf_method_obj1905,anf_arg1906,anf_method_obj1900,anf_arg1907,cases1913,anf_method_obj2001,anf_arg2002,anf_method_obj1996,anf_arg2003]);
}
if(R.isPyretException($e2008)) {
$e2008.pyretStack.push($al1893);
}
throw $e2008;
}
};
var anf_variant_member6274 = R.makeMethod3($temp_full1887,"render-fancy-reason");
var $temp_full2010 = function($self2011) {
var $step2009 = 0;
var $ans2012 = D;
var $al2013 = L[892];
try {
if(R.isActivationRecord($self2011)) {
$step2009 = $self2011.step;
$al2013 = $self2011.from;
$ans2012 = $self2011.ans;
self2011 = $self2011.args[0];
anf_method_obj2022 = $self2011.vars[0];
anf_arg2023 = $self2011.vars[1];
anf_method_obj2017 = $self2011.vars[2];
anf_arg2024 = $self2011.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[892],1,$t);
}
var self2011 = $self2011;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2009) {
case 0: $al2013 = L[885];
var anf_method_obj2022 = G(ED5,"error",L[885]);
var anf_fun2014 = ed$simple$intro95.$var;
$al2013 = L[886];
var anf_arg2015 = G(self2011,"loc",L[886]);
$step2009 = 1;
$al2013 = L[891];
if(!(R.isFunction(anf_fun2014))) {
R.ffi.throwNonFunApp($al2013,anf_fun2014);
}
$ans2012 = anf_fun2014.app(("object lookup"),anf_arg2015);
break;
case 1: var anf_arg2023 = $ans2012;
$al2013 = L[887];
var anf_method_obj2017 = G(ED5,"para",L[887]);
$step2009 = 2;
$al2013 = L[888];
$field2016 = R.getColonFieldLoc(ED5,"text",L[888]);
if(R.isMethod($field2016)) {
$ans2012 = $field2016.full_meth(ED5,("The left side was not an object:"));
} else {
if(!(R.isFunction($field2016))) {
R.ffi.throwNonFunApp(L[888],$field2016);
}
$ans2012 = $field2016.app(("The left side was not an object:"));
}
break;
case 2: var anf_arg2018 = $ans2012;
$step2009 = 3;
$al2013 = L[887];
$field2019 = R.getColonFieldLoc(anf_method_obj2017,"make1",L[887]);
if(R.isMethod($field2019)) {
$ans2012 = $field2019.full_meth(anf_method_obj2017,anf_arg2018);
} else {
if(!(R.isFunction($field2019))) {
R.ffi.throwNonFunApp(L[887],$field2019);
}
$ans2012 = $field2019.app(anf_arg2018);
}
break;
case 3: var anf_arg2024 = $ans2012;
$al2013 = L[889];
var anf_arg2020 = G(self2011,"obj",L[889]);
$step2009 = 4;
$al2013 = L[890];
$field2021 = R.getColonFieldLoc(ED5,"embed",L[890]);
if(R.isMethod($field2021)) {
$ans2012 = $field2021.full_meth(ED5,anf_arg2020);
} else {
if(!(R.isFunction($field2021))) {
R.ffi.throwNonFunApp(L[890],$field2021);
}
$ans2012 = $field2021.app(anf_arg2020);
}
break;
case 4: var anf_arg2025 = $ans2012;
$step2009 = 5;
$al2013 = L[885];
$field2026 = R.getColonFieldLoc(anf_method_obj2022,"make3",L[885]);
if(R.isMethod($field2026)) {
$ans2012 = $field2026.full_meth(anf_method_obj2022,anf_arg2023,anf_arg2024,anf_arg2025);
} else {
if(!(R.isFunction($field2026))) {
R.ffi.throwNonFunApp(L[885],$field2026);
}
$ans2012 = $field2026.app(anf_arg2023,anf_arg2024,anf_arg2025);
}
break;
case 5: ++R.GAS;
return $ans2012;
default: throw "No case numbered " + $step2009 + " in $temp_full2010";
}
}
} catch($e2027) {
if(R.isCont($e2027) && ($step2009 !== 5)) {
$e2027.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2013,$temp_full2010,$step2009,[self2011],[anf_method_obj2022,anf_arg2023,anf_method_obj2017,anf_arg2024]);
}
if(R.isPyretException($e2027)) {
$e2027.pyretStack.push($al2013);
}
throw $e2027;
}
};
var anf_variant_member6275 = R.makeMethod0($temp_full2010,"render-reason");
var $temp_full2029 = function($self2030,$maybe$stack$loc2031,$src$available2032,$maybe$ast2033) {
var $step2028 = 0;
var $ans2034 = D;
var $al2035 = L[946];
try {
if(R.isActivationRecord($self2030)) {
$step2028 = $self2030.step;
$al2035 = $self2030.from;
$ans2034 = $self2030.ans;
self2030 = $self2030.args[0];
maybe$stack$loc2031 = $self2030.args[1];
src$available2032 = $self2030.args[2];
maybe$ast2033 = $self2030.args[3];
anf_method_obj2047 = $self2030.vars[0];
anf_arg2048 = $self2030.vars[1];
anf_method_obj2042 = $self2030.vars[2];
anf_arg2049 = $self2030.vars[3];
cases2055 = $self2030.vars[4];
anf_method_obj2143 = $self2030.vars[5];
anf_arg2144 = $self2030.vars[6];
anf_method_obj2138 = $self2030.vars[7];
anf_arg2145 = $self2030.vars[8];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[946],4,$t);
}
var self2030 = $self2030;
var maybe$stack$loc2031 = $maybe$stack$loc2031;
var src$available2032 = $src$available2032;
var maybe$ast2033 = $maybe$ast2033;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2028) {
case 0: $al2035 = L[893];
var anf_method_obj2036 = G(self2030,"loc",L[893]);
$step2028 = 1;
$al2035 = L[894];
$field2037 = R.getColonFieldLoc(anf_method_obj2036,"is-builtin",L[894]);
if(R.isMethod($field2037)) {
$ans2034 = $field2037.full_meth(anf_method_obj2036);
} else {
if(!(R.isFunction($field2037))) {
R.ffi.throwNonFunApp(L[894],$field2037);
}
$ans2034 = $field2037.app();
}
break;
case 1: var anf_arg2038 = $ans2034;
$al2035 = L[894];
var anf_if2149 = R.checkWrapBoolean(anf_arg2038);
$step2028 = R.isPyretTrue(anf_if2149)?2:7;
break;
case 2: $al2035 = L[895];
var anf_method_obj2047 = G(ED5,"error",L[895]);
var anf_fun2039 = ed$simple$intro95.$var;
$al2035 = L[896];
var anf_arg2040 = G(self2030,"loc",L[896]);
$step2028 = 3;
$al2035 = L[901];
if(!(R.isFunction(anf_fun2039))) {
R.ffi.throwNonFunApp($al2035,anf_fun2039);
}
$ans2034 = anf_fun2039.app(("object extension expression"),anf_arg2040);
break;
case 3: var anf_arg2048 = $ans2034;
$al2035 = L[897];
var anf_method_obj2042 = G(ED5,"para",L[897]);
$step2028 = 4;
$al2035 = L[898];
$field2041 = R.getColonFieldLoc(ED5,"text",L[898]);
if(R.isMethod($field2041)) {
$ans2034 = $field2041.full_meth(ED5,("It was given a non-object value:"));
} else {
if(!(R.isFunction($field2041))) {
R.ffi.throwNonFunApp(L[898],$field2041);
}
$ans2034 = $field2041.app(("It was given a non-object value:"));
}
break;
case 4: var anf_arg2043 = $ans2034;
$step2028 = 5;
$al2035 = L[897];
$field2044 = R.getColonFieldLoc(anf_method_obj2042,"make1",L[897]);
if(R.isMethod($field2044)) {
$ans2034 = $field2044.full_meth(anf_method_obj2042,anf_arg2043);
} else {
if(!(R.isFunction($field2044))) {
R.ffi.throwNonFunApp(L[897],$field2044);
}
$ans2034 = $field2044.app(anf_arg2043);
}
break;
case 5: var anf_arg2049 = $ans2034;
$al2035 = L[899];
var anf_arg2045 = G(self2030,"non-obj",L[899]);
$step2028 = 6;
$al2035 = L[900];
$field2046 = R.getColonFieldLoc(ED5,"embed",L[900]);
if(R.isMethod($field2046)) {
$ans2034 = $field2046.full_meth(ED5,anf_arg2045);
} else {
if(!(R.isFunction($field2046))) {
R.ffi.throwNonFunApp(L[900],$field2046);
}
$ans2034 = $field2046.app(anf_arg2045);
}
break;
case 6: var anf_arg2050 = $ans2034;
$step2028 = 20;
$al2035 = L[895];
$field2051 = R.getColonFieldLoc(anf_method_obj2047,"make3",L[895]);
if(R.isMethod($field2051)) {
$ans2034 = $field2051.full_meth(anf_method_obj2047,anf_arg2048,anf_arg2049,anf_arg2050);
} else {
if(!(R.isFunction($field2051))) {
R.ffi.throwNonFunApp(L[895],$field2051);
}
$ans2034 = $field2051.app(anf_arg2048,anf_arg2049,anf_arg2050);
}
break;
case 7: $al2035 = L[902];
var anf_arg2052 = G(self2030,"loc",L[902]);
$step2028 = 8;
$al2035 = L[903];
if(!(R.isFunction(src$available2032))) {
R.ffi.throwNonFunApp($al2035,src$available2032);
}
$ans2034 = src$available2032.app(anf_arg2052);
break;
case 8: var anf_arg2053 = $ans2034;
$al2035 = L[903];
var anf_if2148 = R.checkWrapBoolean(anf_arg2053);
$step2028 = R.isPyretTrue(anf_if2148)?9:15;
break;
case 9: $al2035 = L[904];
var anf_arg2054 = G(self2030,"loc",L[904]);
$step2028 = 10;
$al2035 = L[938];
if(!(R.isFunction(maybe$ast2033))) {
R.ffi.throwNonFunApp($al2035,maybe$ast2033);
}
$ans2034 = maybe$ast2033.app(anf_arg2054);
break;
case 10: var cases2055 = $ans2034;
$step2028 = 11;
$al2035 = L[937];
R._checkAnn(L[937],R.getDotAnn(L[937],"O",O13,"Option"),cases2055);
break;
case 11: var $cases_dispatch2134 = {"some":12,
"none":13};
$al2035 = L[924];
$step2028 = $cases_dispatch2134[cases2055.$name] || 14;
break;
case 12: if(cases2055.$arity !== 1) {
if(cases2055.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[923],1,cases2055.$arity,L[924]);
} else {
R.ffi.throwCasesSingletonErrorC(L[923],true,L[924]);
}
}
$step2028 = 20;
$al2035 = L[925];
var $temp_branch2093 = function($ast2056) {
var $step2094 = 0;
var $ans2095 = D;
var $al2096 = L[906];
try {
if(R.isActivationRecord($ast2056)) {
$step2094 = $ast2056.step;
$al2096 = $ast2056.from;
$ans2095 = $ast2056.ans;
ast2056 = $ast2056.args[0];
cases2057 = $ast2056.vars[0];
ast2071 = $ast2056.vars[1];
anf_method_obj2087 = $ast2056.vars[2];
anf_arg2088 = $ast2056.vars[3];
anf_arg2089 = $ast2056.vars[4];
anf_method_obj2080 = $ast2056.vars[5];
anf_arg2081 = $ast2056.vars[6];
anf_arg2076 = $ast2056.vars[7];
anf_arg2082 = $ast2056.vars[8];
anf_arg2090 = $ast2056.vars[9];
} else {
var ast2056 = $ast2056;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2094) {
case 0: var cases2057 = ast2056;
var $cases_dispatch2097 = {"s-extend":1,
"s-app":2};
$al2096 = L[906];
$step2094 = $cases_dispatch2097[cases2057.$name] || 3;
break;
case 1: if(cases2057.$arity !== 3) {
if(cases2057.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[905],3,cases2057.$arity,L[906]);
} else {
R.ffi.throwCasesSingletonErrorC(L[905],true,L[906]);
}
}
var $fn187 = cases2057.$constructor.$fieldNames;
R.derefField(cases2057.dict[$fn187[0]],cases2057.$mut_fields_mask[0],false);
R.derefField(cases2057.dict[$fn187[1]],cases2057.$mut_fields_mask[1],false);
R.derefField(cases2057.dict[$fn187[2]],cases2057.$mut_fields_mask[2],false);
$step2094 = 4;
$ans2095 = ast2056;
break;
case 2: if(cases2057.$arity !== 3) {
if(cases2057.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[907],3,cases2057.$arity,L[906]);
} else {
R.ffi.throwCasesSingletonErrorC(L[907],true,L[906]);
}
}
var $fn187 = cases2057.$constructor.$fieldNames;
R.derefField(cases2057.dict[$fn187[0]],cases2057.$mut_fields_mask[0],false);
var f2061 = R.derefField(cases2057.dict[$fn187[1]],cases2057.$mut_fields_mask[1],false);
R.derefField(cases2057.dict[$fn187[2]],cases2057.$mut_fields_mask[2],false);
$step2094 = 4;
$ans2095 = f2061;
break;
case 3: $step2094 = 4;
$al2096 = L[906];
$ans2095 = R.throwNoCasesMatched(L[906],cases2057);
break;
case 4: var ast2071 = $ans2095;
$al2096 = L[908];
var anf_method_obj2087 = G(ED5,"error",L[908]);
var anf_fun2065 = ed$intro122.$var;
$al2096 = L[909];
var anf_arg2066 = G(self2030,"loc",L[909]);
$step2094 = 5;
$al2096 = L[922];
if(!(R.isFunction(anf_fun2065))) {
R.ffi.throwNonFunApp($al2096,anf_fun2065);
}
$ans2095 = anf_fun2065.app(("object extension expression"),anf_arg2066,(-1),(true));
break;
case 5: var anf_arg2088 = $ans2095;
$al2096 = L[910];
var anf_arg2067 = G(self2030,"loc",L[910]);
$step2094 = 6;
$al2096 = L[911];
$field2098 = R.getColonFieldLoc(ED5,"cmcode",L[911]);
if(R.isMethod($field2098)) {
$ans2095 = $field2098.full_meth(ED5,anf_arg2067);
} else {
if(!(R.isFunction($field2098))) {
R.ffi.throwNonFunApp(L[911],$field2098);
}
$ans2095 = $field2098.app(anf_arg2067);
}
break;
case 6: var anf_arg2089 = $ans2095;
$al2096 = L[912];
var anf_method_obj2080 = G(ED5,"para",L[912]);
$step2094 = 7;
$al2096 = L[913];
$field2099 = R.getColonFieldLoc(ED5,"text",L[913]);
if(R.isMethod($field2099)) {
$ans2095 = $field2099.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field2099))) {
R.ffi.throwNonFunApp(L[913],$field2099);
}
$ans2095 = $field2099.app(("The "));
}
break;
case 7: var anf_arg2081 = $ans2095;
$step2094 = 8;
$al2096 = L[914];
$field2100 = R.getColonFieldLoc(ED5,"text",L[914]);
if(R.isMethod($field2100)) {
$ans2095 = $field2100.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field2100))) {
R.ffi.throwNonFunApp(L[914],$field2100);
}
$ans2095 = $field2100.app(("left side"));
}
break;
case 8: var anf_arg2076 = $ans2095;
$al2096 = L[915];
var anf_method_obj2073 = G(ED5,"locs",L[915]);
$al2096 = L[916];
var anf_bracket2072 = G(ast2071,"supe",L[916]);
$al2096 = L[917];
var anf_arg2074 = G(anf_bracket2072,"l",L[917]);
$step2094 = 9;
$al2096 = L[915];
$field2101 = R.getColonFieldLoc(anf_method_obj2073,"make1",L[915]);
if(R.isMethod($field2101)) {
$ans2095 = $field2101.full_meth(anf_method_obj2073,anf_arg2074);
} else {
if(!(R.isFunction($field2101))) {
R.ffi.throwNonFunApp(L[915],$field2101);
}
$ans2095 = $field2101.app(anf_arg2074);
}
break;
case 9: var anf_arg2077 = $ans2095;
$step2094 = 10;
$al2096 = L[918];
$field2102 = R.getColonFieldLoc(ED5,"highlight",L[918]);
if(R.isMethod($field2102)) {
$ans2095 = $field2102.full_meth(ED5,anf_arg2076,anf_arg2077,(0));
} else {
if(!(R.isFunction($field2102))) {
R.ffi.throwNonFunApp(L[918],$field2102);
}
$ans2095 = $field2102.app(anf_arg2076,anf_arg2077,(0));
}
break;
case 10: var anf_arg2082 = $ans2095;
$step2094 = 11;
$al2096 = L[919];
$field2103 = R.getColonFieldLoc(ED5,"text",L[919]);
if(R.isMethod($field2103)) {
$ans2095 = $field2103.full_meth(ED5,(" was not an object:"));
} else {
if(!(R.isFunction($field2103))) {
R.ffi.throwNonFunApp(L[919],$field2103);
}
$ans2095 = $field2103.app((" was not an object:"));
}
break;
case 11: var anf_arg2083 = $ans2095;
$step2094 = 12;
$al2096 = L[912];
$field2104 = R.getColonFieldLoc(anf_method_obj2080,"make3",L[912]);
if(R.isMethod($field2104)) {
$ans2095 = $field2104.full_meth(anf_method_obj2080,anf_arg2081,anf_arg2082,anf_arg2083);
} else {
if(!(R.isFunction($field2104))) {
R.ffi.throwNonFunApp(L[912],$field2104);
}
$ans2095 = $field2104.app(anf_arg2081,anf_arg2082,anf_arg2083);
}
break;
case 12: var anf_arg2090 = $ans2095;
$al2096 = L[920];
var anf_arg2085 = G(self2030,"non-obj",L[920]);
$step2094 = 13;
$al2096 = L[921];
$field2105 = R.getColonFieldLoc(ED5,"embed",L[921]);
if(R.isMethod($field2105)) {
$ans2095 = $field2105.full_meth(ED5,anf_arg2085);
} else {
if(!(R.isFunction($field2105))) {
R.ffi.throwNonFunApp(L[921],$field2105);
}
$ans2095 = $field2105.app(anf_arg2085);
}
break;
case 13: var anf_arg2091 = $ans2095;
$step2094 = 14;
$al2096 = L[908];
$field2106 = R.getColonFieldLoc(anf_method_obj2087,"make4",L[908]);
if(R.isMethod($field2106)) {
$ans2095 = $field2106.full_meth(anf_method_obj2087,anf_arg2088,anf_arg2089,anf_arg2090,anf_arg2091);
} else {
if(!(R.isFunction($field2106))) {
R.ffi.throwNonFunApp(L[908],$field2106);
}
$ans2095 = $field2106.app(anf_arg2088,anf_arg2089,anf_arg2090,anf_arg2091);
}
break;
case 14: ++R.GAS;
return $ans2095;
default: throw "No case numbered " + $step2094 + " in $temp_branch2093";
}
}
} catch($e2107) {
if(R.isCont($e2107) && ($step2094 !== 14)) {
$e2107.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2096,$temp_branch2093,$step2094,[ast2056],[cases2057,ast2071,anf_method_obj2087,anf_arg2088,anf_arg2089,anf_method_obj2080,anf_arg2081,anf_arg2076,anf_arg2082,anf_arg2090]);
}
if(R.isPyretException($e2107)) {
$e2107.pyretStack.push($al2096);
}
throw $e2107;
}
};
$ans2034 = cases2055.$app_fields($temp_branch2093,[false]);
break;
case 13: if(cases2055.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[935],false,L[924]);
}
$step2028 = 20;
$al2035 = L[936];
var $temp_branch2124 = function($$resumer101) {
var $step2125 = 0;
var $ans2126 = D;
var $al2127 = L[926];
try {
if(R.isActivationRecord($$resumer101)) {
$step2125 = $$resumer101.step;
$al2127 = $$resumer101.from;
$ans2126 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj2118 = $$resumer101.vars[0];
anf_arg2119 = $$resumer101.vars[1];
anf_arg2120 = $$resumer101.vars[2];
anf_method_obj2113 = $$resumer101.vars[3];
anf_arg2121 = $$resumer101.vars[4];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2125) {
case 0: $al2127 = L[926];
var anf_method_obj2118 = G(ED5,"error",L[926]);
var anf_fun2108 = ed$intro122.$var;
$al2127 = L[927];
var anf_arg2109 = G(self2030,"loc",L[927]);
$step2125 = 1;
$al2127 = L[934];
if(!(R.isFunction(anf_fun2108))) {
R.ffi.throwNonFunApp($al2127,anf_fun2108);
}
$ans2126 = anf_fun2108.app(("object extension expression"),anf_arg2109,(-1),(true));
break;
case 1: var anf_arg2119 = $ans2126;
$al2127 = L[928];
var anf_arg2110 = G(self2030,"loc",L[928]);
$step2125 = 2;
$al2127 = L[929];
$field2128 = R.getColonFieldLoc(ED5,"cmcode",L[929]);
if(R.isMethod($field2128)) {
$ans2126 = $field2128.full_meth(ED5,anf_arg2110);
} else {
if(!(R.isFunction($field2128))) {
R.ffi.throwNonFunApp(L[929],$field2128);
}
$ans2126 = $field2128.app(anf_arg2110);
}
break;
case 2: var anf_arg2120 = $ans2126;
$al2127 = L[930];
var anf_method_obj2113 = G(ED5,"para",L[930]);
$step2125 = 3;
$al2127 = L[931];
$field2129 = R.getColonFieldLoc(ED5,"text",L[931]);
if(R.isMethod($field2129)) {
$ans2126 = $field2129.full_meth(ED5,("The left side was not an object:"));
} else {
if(!(R.isFunction($field2129))) {
R.ffi.throwNonFunApp(L[931],$field2129);
}
$ans2126 = $field2129.app(("The left side was not an object:"));
}
break;
case 3: var anf_arg2114 = $ans2126;
$step2125 = 4;
$al2127 = L[930];
$field2130 = R.getColonFieldLoc(anf_method_obj2113,"make1",L[930]);
if(R.isMethod($field2130)) {
$ans2126 = $field2130.full_meth(anf_method_obj2113,anf_arg2114);
} else {
if(!(R.isFunction($field2130))) {
R.ffi.throwNonFunApp(L[930],$field2130);
}
$ans2126 = $field2130.app(anf_arg2114);
}
break;
case 4: var anf_arg2121 = $ans2126;
$al2127 = L[932];
var anf_arg2116 = G(self2030,"non-obj",L[932]);
$step2125 = 5;
$al2127 = L[933];
$field2131 = R.getColonFieldLoc(ED5,"embed",L[933]);
if(R.isMethod($field2131)) {
$ans2126 = $field2131.full_meth(ED5,anf_arg2116);
} else {
if(!(R.isFunction($field2131))) {
R.ffi.throwNonFunApp(L[933],$field2131);
}
$ans2126 = $field2131.app(anf_arg2116);
}
break;
case 5: var anf_arg2122 = $ans2126;
$step2125 = 6;
$al2127 = L[926];
$field2132 = R.getColonFieldLoc(anf_method_obj2118,"make4",L[926]);
if(R.isMethod($field2132)) {
$ans2126 = $field2132.full_meth(anf_method_obj2118,anf_arg2119,anf_arg2120,anf_arg2121,anf_arg2122);
} else {
if(!(R.isFunction($field2132))) {
R.ffi.throwNonFunApp(L[926],$field2132);
}
$ans2126 = $field2132.app(anf_arg2119,anf_arg2120,anf_arg2121,anf_arg2122);
}
break;
case 6: ++R.GAS;
return $ans2126;
default: throw "No case numbered " + $step2125 + " in $temp_branch2124";
}
}
} catch($e2133) {
if(R.isCont($e2133) && ($step2125 !== 6)) {
$e2133.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2127,$temp_branch2124,$step2125,[],[anf_method_obj2118,anf_arg2119,anf_arg2120,anf_method_obj2113,anf_arg2121]);
}
if(R.isPyretException($e2133)) {
$e2133.pyretStack.push($al2127);
}
throw $e2133;
}
};
$ans2034 = cases2055.$app_fields($temp_branch2124,[]);
break;
case 14: $step2028 = 20;
$al2035 = L[924];
$ans2034 = R.throwNoCasesMatched(L[924],cases2055);
break;
case 15: $al2035 = L[939];
var anf_method_obj2143 = G(ED5,"error",L[939]);
var anf_fun2135 = ed$simple$intro95.$var;
$al2035 = L[940];
var anf_arg2136 = G(self2030,"loc",L[940]);
$step2028 = 16;
$al2035 = L[945];
if(!(R.isFunction(anf_fun2135))) {
R.ffi.throwNonFunApp($al2035,anf_fun2135);
}
$ans2034 = anf_fun2135.app(("object extension expression"),anf_arg2136);
break;
case 16: var anf_arg2144 = $ans2034;
$al2035 = L[941];
var anf_method_obj2138 = G(ED5,"para",L[941]);
$step2028 = 17;
$al2035 = L[942];
$field2137 = R.getColonFieldLoc(ED5,"text",L[942]);
if(R.isMethod($field2137)) {
$ans2034 = $field2137.full_meth(ED5,("The left side was not an object:"));
} else {
if(!(R.isFunction($field2137))) {
R.ffi.throwNonFunApp(L[942],$field2137);
}
$ans2034 = $field2137.app(("The left side was not an object:"));
}
break;
case 17: var anf_arg2139 = $ans2034;
$step2028 = 18;
$al2035 = L[941];
$field2140 = R.getColonFieldLoc(anf_method_obj2138,"make1",L[941]);
if(R.isMethod($field2140)) {
$ans2034 = $field2140.full_meth(anf_method_obj2138,anf_arg2139);
} else {
if(!(R.isFunction($field2140))) {
R.ffi.throwNonFunApp(L[941],$field2140);
}
$ans2034 = $field2140.app(anf_arg2139);
}
break;
case 18: var anf_arg2145 = $ans2034;
$al2035 = L[943];
var anf_arg2141 = G(self2030,"non-obj",L[943]);
$step2028 = 19;
$al2035 = L[944];
$field2142 = R.getColonFieldLoc(ED5,"embed",L[944]);
if(R.isMethod($field2142)) {
$ans2034 = $field2142.full_meth(ED5,anf_arg2141);
} else {
if(!(R.isFunction($field2142))) {
R.ffi.throwNonFunApp(L[944],$field2142);
}
$ans2034 = $field2142.app(anf_arg2141);
}
break;
case 19: var anf_arg2146 = $ans2034;
$step2028 = 20;
$al2035 = L[939];
$field2147 = R.getColonFieldLoc(anf_method_obj2143,"make3",L[939]);
if(R.isMethod($field2147)) {
$ans2034 = $field2147.full_meth(anf_method_obj2143,anf_arg2144,anf_arg2145,anf_arg2146);
} else {
if(!(R.isFunction($field2147))) {
R.ffi.throwNonFunApp(L[939],$field2147);
}
$ans2034 = $field2147.app(anf_arg2144,anf_arg2145,anf_arg2146);
}
break;
case 20: ++R.GAS;
return $ans2034;
default: throw "No case numbered " + $step2028 + " in $temp_full2029";
}
}
} catch($e2150) {
if(R.isCont($e2150) && ($step2028 !== 20)) {
$e2150.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2035,$temp_full2029,$step2028,[self2030,maybe$stack$loc2031,src$available2032,maybe$ast2033],[anf_method_obj2047,anf_arg2048,anf_method_obj2042,anf_arg2049,cases2055,anf_method_obj2143,anf_arg2144,anf_method_obj2138,anf_arg2145]);
}
if(R.isPyretException($e2150)) {
$e2150.pyretStack.push($al2035);
}
throw $e2150;
}
};
var anf_variant_member6286 = R.makeMethod3($temp_full2029,"render-fancy-reason");
var $temp_full2152 = function($self2153) {
var $step2151 = 0;
var $ans2154 = D;
var $al2155 = L[954];
try {
if(R.isActivationRecord($self2153)) {
$step2151 = $self2153.step;
$al2155 = $self2153.from;
$ans2154 = $self2153.ans;
self2153 = $self2153.args[0];
anf_method_obj2164 = $self2153.vars[0];
anf_arg2165 = $self2153.vars[1];
anf_method_obj2159 = $self2153.vars[2];
anf_arg2166 = $self2153.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[954],1,$t);
}
var self2153 = $self2153;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2151) {
case 0: $al2155 = L[947];
var anf_method_obj2164 = G(ED5,"error",L[947]);
var anf_fun2156 = ed$simple$intro95.$var;
$al2155 = L[948];
var anf_arg2157 = G(self2153,"loc",L[948]);
$step2151 = 1;
$al2155 = L[953];
if(!(R.isFunction(anf_fun2156))) {
R.ffi.throwNonFunApp($al2155,anf_fun2156);
}
$ans2154 = anf_fun2156.app(("object extension expression"),anf_arg2157);
break;
case 1: var anf_arg2165 = $ans2154;
$al2155 = L[949];
var anf_method_obj2159 = G(ED5,"para",L[949]);
$step2151 = 2;
$al2155 = L[950];
$field2158 = R.getColonFieldLoc(ED5,"text",L[950]);
if(R.isMethod($field2158)) {
$ans2154 = $field2158.full_meth(ED5,("The left side was not an object:"));
} else {
if(!(R.isFunction($field2158))) {
R.ffi.throwNonFunApp(L[950],$field2158);
}
$ans2154 = $field2158.app(("The left side was not an object:"));
}
break;
case 2: var anf_arg2160 = $ans2154;
$step2151 = 3;
$al2155 = L[949];
$field2161 = R.getColonFieldLoc(anf_method_obj2159,"make1",L[949]);
if(R.isMethod($field2161)) {
$ans2154 = $field2161.full_meth(anf_method_obj2159,anf_arg2160);
} else {
if(!(R.isFunction($field2161))) {
R.ffi.throwNonFunApp(L[949],$field2161);
}
$ans2154 = $field2161.app(anf_arg2160);
}
break;
case 3: var anf_arg2166 = $ans2154;
$al2155 = L[951];
var anf_arg2162 = G(self2153,"non-obj",L[951]);
$step2151 = 4;
$al2155 = L[952];
$field2163 = R.getColonFieldLoc(ED5,"embed",L[952]);
if(R.isMethod($field2163)) {
$ans2154 = $field2163.full_meth(ED5,anf_arg2162);
} else {
if(!(R.isFunction($field2163))) {
R.ffi.throwNonFunApp(L[952],$field2163);
}
$ans2154 = $field2163.app(anf_arg2162);
}
break;
case 4: var anf_arg2167 = $ans2154;
$step2151 = 5;
$al2155 = L[947];
$field2168 = R.getColonFieldLoc(anf_method_obj2164,"make3",L[947]);
if(R.isMethod($field2168)) {
$ans2154 = $field2168.full_meth(anf_method_obj2164,anf_arg2165,anf_arg2166,anf_arg2167);
} else {
if(!(R.isFunction($field2168))) {
R.ffi.throwNonFunApp(L[947],$field2168);
}
$ans2154 = $field2168.app(anf_arg2165,anf_arg2166,anf_arg2167);
}
break;
case 5: ++R.GAS;
return $ans2154;
default: throw "No case numbered " + $step2151 + " in $temp_full2152";
}
}
} catch($e2169) {
if(R.isCont($e2169) && ($step2151 !== 5)) {
$e2169.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2155,$temp_full2152,$step2151,[self2153],[anf_method_obj2164,anf_arg2165,anf_method_obj2159,anf_arg2166]);
}
if(R.isPyretException($e2169)) {
$e2169.pyretStack.push($al2155);
}
throw $e2169;
}
};
var anf_variant_member6287 = R.makeMethod0($temp_full2152,"render-reason");
var $temp_full2171 = function($self2172,$$underscore2173,$$underscore2174) {
var $step2170 = 0;
var $ans2175 = D;
var $al2176 = L[956];
try {
if(R.isActivationRecord($self2172)) {
$step2170 = $self2172.step;
$al2176 = $self2172.from;
$ans2175 = $self2172.ans;
self2172 = $self2172.args[0];
$underscore2173 = $self2172.args[1];
$underscore2174 = $self2172.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[956],3,$t);
}
var self2172 = $self2172;
var $underscore2173 = $$underscore2173;
var $underscore2174 = $$underscore2174;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2170) {
case 0: $step2170 = 1;
$al2176 = L[955];
$field2177 = R.getColonFieldLoc(self2172,"render-reason",L[955]);
if(R.isMethod($field2177)) {
$ans2175 = $field2177.full_meth(self2172);
} else {
if(!(R.isFunction($field2177))) {
R.ffi.throwNonFunApp(L[955],$field2177);
}
$ans2175 = $field2177.app();
}
break;
case 1: ++R.GAS;
return $ans2175;
default: throw "No case numbered " + $step2170 + " in $temp_full2171";
}
}
} catch($e2178) {
if(R.isCont($e2178) && ($step2170 !== 1)) {
$e2178.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2176,$temp_full2171,$step2170,[self2172,$underscore2173,$underscore2174],[]);
}
if(R.isPyretException($e2178)) {
$e2178.pyretStack.push($al2176);
}
throw $e2178;
}
};
var anf_variant_member6297 = R.makeMethod2($temp_full2171,"render-fancy-reason");
var $temp_full2180 = function($self2181) {
var $step2179 = 0;
var $ans2182 = D;
var $al2183 = L[975];
try {
if(R.isActivationRecord($self2181)) {
$step2179 = $self2181.step;
$al2183 = $self2181.from;
$ans2182 = $self2181.ans;
self2181 = $self2181.args[0];
anf_method_obj2204 = $self2181.vars[0];
anf_method_obj2199 = $self2181.vars[1];
anf_array2200 = $self2181.vars[2];
anf_arg2205 = $self2181.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[975],1,$t);
}
var self2181 = $self2181;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2179) {
case 0: $al2183 = L[957];
var anf_method_obj2204 = G(ED5,"error",L[957]);
$al2183 = L[958];
var anf_method_obj2199 = G(ED5,"para",L[958]);
$al2183 = L[959];
var anf_array2200 = R.makeArrayN((9));
$step2179 = 1;
$al2183 = L[960];
$field2184 = R.getColonFieldLoc(ED5,"text",L[960]);
if(R.isMethod($field2184)) {
$ans2182 = $field2184.full_meth(ED5,("Expected"));
} else {
if(!(R.isFunction($field2184))) {
R.ffi.throwNonFunApp(L[960],$field2184);
}
$ans2182 = $field2184.app(("Expected"));
}
break;
case 1: anf_array2200[0] = $ans2182;
$step2179 = 2;
$al2183 = L[961];
$field2185 = R.getColonFieldLoc(ED5,"text",L[961]);
if(R.isMethod($field2185)) {
$ans2182 = $field2185.full_meth(ED5,("true"));
} else {
if(!(R.isFunction($field2185))) {
R.ffi.throwNonFunApp(L[961],$field2185);
}
$ans2182 = $field2185.app(("true"));
}
break;
case 2: var anf_arg2186 = $ans2182;
$step2179 = 3;
$al2183 = L[962];
$field2187 = R.getColonFieldLoc(ED5,"code",L[962]);
if(R.isMethod($field2187)) {
$ans2182 = $field2187.full_meth(ED5,anf_arg2186);
} else {
if(!(R.isFunction($field2187))) {
R.ffi.throwNonFunApp(L[962],$field2187);
}
$ans2182 = $field2187.app(anf_arg2186);
}
break;
case 3: anf_array2200[1] = $ans2182;
$step2179 = 4;
$al2183 = L[963];
$field2188 = R.getColonFieldLoc(ED5,"text",L[963]);
if(R.isMethod($field2188)) {
$ans2182 = $field2188.full_meth(ED5,("or"));
} else {
if(!(R.isFunction($field2188))) {
R.ffi.throwNonFunApp(L[963],$field2188);
}
$ans2182 = $field2188.app(("or"));
}
break;
case 4: anf_array2200[2] = $ans2182;
$step2179 = 5;
$al2183 = L[964];
$field2189 = R.getColonFieldLoc(ED5,"text",L[964]);
if(R.isMethod($field2189)) {
$ans2182 = $field2189.full_meth(ED5,("false"));
} else {
if(!(R.isFunction($field2189))) {
R.ffi.throwNonFunApp(L[964],$field2189);
}
$ans2182 = $field2189.app(("false"));
}
break;
case 5: var anf_arg2190 = $ans2182;
$step2179 = 6;
$al2183 = L[965];
$field2191 = R.getColonFieldLoc(ED5,"code",L[965]);
if(R.isMethod($field2191)) {
$ans2182 = $field2191.full_meth(ED5,anf_arg2190);
} else {
if(!(R.isFunction($field2191))) {
R.ffi.throwNonFunApp(L[965],$field2191);
}
$ans2182 = $field2191.app(anf_arg2190);
}
break;
case 6: anf_array2200[3] = $ans2182;
$step2179 = 7;
$al2183 = L[966];
$field2192 = R.getColonFieldLoc(ED5,"text",L[966]);
if(R.isMethod($field2192)) {
$ans2182 = $field2192.full_meth(ED5,("for the test in the"));
} else {
if(!(R.isFunction($field2192))) {
R.ffi.throwNonFunApp(L[966],$field2192);
}
$ans2182 = $field2192.app(("for the test in the"));
}
break;
case 7: anf_array2200[4] = $ans2182;
$al2183 = L[967];
var anf_arg2193 = G(self2181,"typ",L[967]);
$step2179 = 8;
$al2183 = L[968];
$field2194 = R.getColonFieldLoc(ED5,"text",L[968]);
if(R.isMethod($field2194)) {
$ans2182 = $field2194.full_meth(ED5,anf_arg2193);
} else {
if(!(R.isFunction($field2194))) {
R.ffi.throwNonFunApp(L[968],$field2194);
}
$ans2182 = $field2194.app(anf_arg2193);
}
break;
case 8: anf_array2200[5] = $ans2182;
$step2179 = 9;
$al2183 = L[969];
$field2195 = R.getColonFieldLoc(ED5,"text",L[969]);
if(R.isMethod($field2195)) {
$ans2182 = $field2195.full_meth(ED5,("expression at"));
} else {
if(!(R.isFunction($field2195))) {
R.ffi.throwNonFunApp(L[969],$field2195);
}
$ans2182 = $field2195.app(("expression at"));
}
break;
case 9: anf_array2200[6] = $ans2182;
var anf_fun2196 = draw$and$highlight38.$var;
$al2183 = L[970];
var anf_arg2197 = G(self2181,"loc",L[970]);
$step2179 = 10;
$al2183 = L[974];
if(!(R.isFunction(anf_fun2196))) {
R.ffi.throwNonFunApp($al2183,anf_fun2196);
}
$ans2182 = anf_fun2196.app(anf_arg2197);
break;
case 10: anf_array2200[7] = $ans2182;
$step2179 = 11;
$al2183 = L[971];
$field2198 = R.getColonFieldLoc(ED5,"text",L[971]);
if(R.isMethod($field2198)) {
$ans2182 = $field2198.full_meth(ED5,(" but got:"));
} else {
if(!(R.isFunction($field2198))) {
R.ffi.throwNonFunApp(L[971],$field2198);
}
$ans2182 = $field2198.app((" but got:"));
}
break;
case 11: anf_array2200[8] = $ans2182;
$step2179 = 12;
$al2183 = L[958];
$field2201 = R.getColonFieldLoc(anf_method_obj2199,"make",L[958]);
if(R.isMethod($field2201)) {
$ans2182 = $field2201.full_meth(anf_method_obj2199,anf_array2200);
} else {
if(!(R.isFunction($field2201))) {
R.ffi.throwNonFunApp(L[958],$field2201);
}
$ans2182 = $field2201.app(anf_array2200);
}
break;
case 12: var anf_arg2205 = $ans2182;
$al2183 = L[972];
var anf_arg2202 = G(self2181,"value",L[972]);
$step2179 = 13;
$al2183 = L[973];
$field2203 = R.getColonFieldLoc(ED5,"embed",L[973]);
if(R.isMethod($field2203)) {
$ans2182 = $field2203.full_meth(ED5,anf_arg2202);
} else {
if(!(R.isFunction($field2203))) {
R.ffi.throwNonFunApp(L[973],$field2203);
}
$ans2182 = $field2203.app(anf_arg2202);
}
break;
case 13: var anf_arg2206 = $ans2182;
$step2179 = 14;
$al2183 = L[957];
$field2207 = R.getColonFieldLoc(anf_method_obj2204,"make2",L[957]);
if(R.isMethod($field2207)) {
$ans2182 = $field2207.full_meth(anf_method_obj2204,anf_arg2205,anf_arg2206);
} else {
if(!(R.isFunction($field2207))) {
R.ffi.throwNonFunApp(L[957],$field2207);
}
$ans2182 = $field2207.app(anf_arg2205,anf_arg2206);
}
break;
case 14: ++R.GAS;
return $ans2182;
default: throw "No case numbered " + $step2179 + " in $temp_full2180";
}
}
} catch($e2208) {
if(R.isCont($e2208) && ($step2179 !== 14)) {
$e2208.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2183,$temp_full2180,$step2179,[self2181],[anf_method_obj2204,anf_method_obj2199,anf_array2200,anf_arg2205]);
}
if(R.isPyretException($e2208)) {
$e2208.pyretStack.push($al2183);
}
throw $e2208;
}
};
var anf_variant_member6298 = R.makeMethod0($temp_full2180,"render-reason");
var $temp_full2210 = function($self2211,$$underscore2212,$$underscore2213) {
var $step2209 = 0;
var $ans2214 = D;
var $al2215 = L[977];
try {
if(R.isActivationRecord($self2211)) {
$step2209 = $self2211.step;
$al2215 = $self2211.from;
$ans2214 = $self2211.ans;
self2211 = $self2211.args[0];
$underscore2212 = $self2211.args[1];
$underscore2213 = $self2211.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[977],3,$t);
}
var self2211 = $self2211;
var $underscore2212 = $$underscore2212;
var $underscore2213 = $$underscore2213;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2209) {
case 0: $step2209 = 1;
$al2215 = L[976];
$field2216 = R.getColonFieldLoc(self2211,"render-reason",L[976]);
if(R.isMethod($field2216)) {
$ans2214 = $field2216.full_meth(self2211);
} else {
if(!(R.isFunction($field2216))) {
R.ffi.throwNonFunApp(L[976],$field2216);
}
$ans2214 = $field2216.app();
}
break;
case 1: ++R.GAS;
return $ans2214;
default: throw "No case numbered " + $step2209 + " in $temp_full2210";
}
}
} catch($e2217) {
if(R.isCont($e2217) && ($step2209 !== 1)) {
$e2217.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2215,$temp_full2210,$step2209,[self2211,$underscore2212,$underscore2213],[]);
}
if(R.isPyretException($e2217)) {
$e2217.pyretStack.push($al2215);
}
throw $e2217;
}
};
var anf_variant_member6309 = R.makeMethod2($temp_full2210,"render-fancy-reason");
var $temp_full2219 = function($self2220) {
var $step2218 = 0;
var $ans2221 = D;
var $al2222 = L[999];
try {
if(R.isActivationRecord($self2220)) {
$step2218 = $self2220.step;
$al2222 = $self2220.from;
$ans2221 = $self2220.ans;
self2220 = $self2220.args[0];
anf_method_obj2246 = $self2220.vars[0];
anf_method_obj2241 = $self2220.vars[1];
anf_array2242 = $self2220.vars[2];
anf_arg2247 = $self2220.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[999],1,$t);
}
var self2220 = $self2220;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2218) {
case 0: $al2222 = L[978];
var anf_method_obj2246 = G(ED5,"error",L[978]);
$al2222 = L[979];
var anf_method_obj2241 = G(ED5,"para",L[979]);
$al2222 = L[980];
var anf_array2242 = R.makeArrayN((11));
$step2218 = 1;
$al2222 = L[981];
$field2223 = R.getColonFieldLoc(ED5,"text",L[981]);
if(R.isMethod($field2223)) {
$ans2221 = $field2223.full_meth(ED5,("Expected"));
} else {
if(!(R.isFunction($field2223))) {
R.ffi.throwNonFunApp(L[981],$field2223);
}
$ans2221 = $field2223.app(("Expected"));
}
break;
case 1: anf_array2242[0] = $ans2221;
$step2218 = 2;
$al2222 = L[982];
$field2224 = R.getColonFieldLoc(ED5,"text",L[982]);
if(R.isMethod($field2224)) {
$ans2221 = $field2224.full_meth(ED5,("true"));
} else {
if(!(R.isFunction($field2224))) {
R.ffi.throwNonFunApp(L[982],$field2224);
}
$ans2221 = $field2224.app(("true"));
}
break;
case 2: var anf_arg2225 = $ans2221;
$step2218 = 3;
$al2222 = L[983];
$field2226 = R.getColonFieldLoc(ED5,"code",L[983]);
if(R.isMethod($field2226)) {
$ans2221 = $field2226.full_meth(ED5,anf_arg2225);
} else {
if(!(R.isFunction($field2226))) {
R.ffi.throwNonFunApp(L[983],$field2226);
}
$ans2221 = $field2226.app(anf_arg2225);
}
break;
case 3: anf_array2242[1] = $ans2221;
$step2218 = 4;
$al2222 = L[984];
$field2227 = R.getColonFieldLoc(ED5,"text",L[984]);
if(R.isMethod($field2227)) {
$ans2221 = $field2227.full_meth(ED5,("or"));
} else {
if(!(R.isFunction($field2227))) {
R.ffi.throwNonFunApp(L[984],$field2227);
}
$ans2221 = $field2227.app(("or"));
}
break;
case 4: anf_array2242[2] = $ans2221;
$step2218 = 5;
$al2222 = L[985];
$field2228 = R.getColonFieldLoc(ED5,"text",L[985]);
if(R.isMethod($field2228)) {
$ans2221 = $field2228.full_meth(ED5,("false"));
} else {
if(!(R.isFunction($field2228))) {
R.ffi.throwNonFunApp(L[985],$field2228);
}
$ans2221 = $field2228.app(("false"));
}
break;
case 5: var anf_arg2229 = $ans2221;
$step2218 = 6;
$al2222 = L[986];
$field2230 = R.getColonFieldLoc(ED5,"code",L[986]);
if(R.isMethod($field2230)) {
$ans2221 = $field2230.full_meth(ED5,anf_arg2229);
} else {
if(!(R.isFunction($field2230))) {
R.ffi.throwNonFunApp(L[986],$field2230);
}
$ans2221 = $field2230.app(anf_arg2229);
}
break;
case 6: anf_array2242[3] = $ans2221;
$step2218 = 7;
$al2222 = L[987];
$field2231 = R.getColonFieldLoc(ED5,"text",L[987]);
if(R.isMethod($field2231)) {
$ans2221 = $field2231.full_meth(ED5,("for the"));
} else {
if(!(R.isFunction($field2231))) {
R.ffi.throwNonFunApp(L[987],$field2231);
}
$ans2221 = $field2231.app(("for the"));
}
break;
case 7: anf_array2242[4] = $ans2221;
$al2222 = L[988];
var anf_arg2232 = G(self2220,"position",L[988]);
$step2218 = 8;
$al2222 = L[989];
$field2233 = R.getColonFieldLoc(ED5,"text",L[989]);
if(R.isMethod($field2233)) {
$ans2221 = $field2233.full_meth(ED5,anf_arg2232);
} else {
if(!(R.isFunction($field2233))) {
R.ffi.throwNonFunApp(L[989],$field2233);
}
$ans2221 = $field2233.app(anf_arg2232);
}
break;
case 8: anf_array2242[5] = $ans2221;
$step2218 = 9;
$al2222 = L[990];
$field2234 = R.getColonFieldLoc(ED5,"text",L[990]);
if(R.isMethod($field2234)) {
$ans2221 = $field2234.full_meth(ED5,("argument in the"));
} else {
if(!(R.isFunction($field2234))) {
R.ffi.throwNonFunApp(L[990],$field2234);
}
$ans2221 = $field2234.app(("argument in the"));
}
break;
case 9: anf_array2242[6] = $ans2221;
$al2222 = L[991];
var anf_arg2235 = G(self2220,"typ",L[991]);
$step2218 = 10;
$al2222 = L[992];
$field2236 = R.getColonFieldLoc(ED5,"text",L[992]);
if(R.isMethod($field2236)) {
$ans2221 = $field2236.full_meth(ED5,anf_arg2235);
} else {
if(!(R.isFunction($field2236))) {
R.ffi.throwNonFunApp(L[992],$field2236);
}
$ans2221 = $field2236.app(anf_arg2235);
}
break;
case 10: anf_array2242[7] = $ans2221;
$step2218 = 11;
$al2222 = L[993];
$field2237 = R.getColonFieldLoc(ED5,"text",L[993]);
if(R.isMethod($field2237)) {
$ans2221 = $field2237.full_meth(ED5,("expression at"));
} else {
if(!(R.isFunction($field2237))) {
R.ffi.throwNonFunApp(L[993],$field2237);
}
$ans2221 = $field2237.app(("expression at"));
}
break;
case 11: anf_array2242[8] = $ans2221;
var anf_fun2238 = draw$and$highlight38.$var;
$al2222 = L[994];
var anf_arg2239 = G(self2220,"loc",L[994]);
$step2218 = 12;
$al2222 = L[998];
if(!(R.isFunction(anf_fun2238))) {
R.ffi.throwNonFunApp($al2222,anf_fun2238);
}
$ans2221 = anf_fun2238.app(anf_arg2239);
break;
case 12: anf_array2242[9] = $ans2221;
$step2218 = 13;
$al2222 = L[995];
$field2240 = R.getColonFieldLoc(ED5,"text",L[995]);
if(R.isMethod($field2240)) {
$ans2221 = $field2240.full_meth(ED5,(" but got:"));
} else {
if(!(R.isFunction($field2240))) {
R.ffi.throwNonFunApp(L[995],$field2240);
}
$ans2221 = $field2240.app((" but got:"));
}
break;
case 13: anf_array2242[10] = $ans2221;
$step2218 = 14;
$al2222 = L[979];
$field2243 = R.getColonFieldLoc(anf_method_obj2241,"make",L[979]);
if(R.isMethod($field2243)) {
$ans2221 = $field2243.full_meth(anf_method_obj2241,anf_array2242);
} else {
if(!(R.isFunction($field2243))) {
R.ffi.throwNonFunApp(L[979],$field2243);
}
$ans2221 = $field2243.app(anf_array2242);
}
break;
case 14: var anf_arg2247 = $ans2221;
$al2222 = L[996];
var anf_arg2244 = G(self2220,"value",L[996]);
$step2218 = 15;
$al2222 = L[997];
$field2245 = R.getColonFieldLoc(ED5,"embed",L[997]);
if(R.isMethod($field2245)) {
$ans2221 = $field2245.full_meth(ED5,anf_arg2244);
} else {
if(!(R.isFunction($field2245))) {
R.ffi.throwNonFunApp(L[997],$field2245);
}
$ans2221 = $field2245.app(anf_arg2244);
}
break;
case 15: var anf_arg2248 = $ans2221;
$step2218 = 16;
$al2222 = L[978];
$field2249 = R.getColonFieldLoc(anf_method_obj2246,"make2",L[978]);
if(R.isMethod($field2249)) {
$ans2221 = $field2249.full_meth(anf_method_obj2246,anf_arg2247,anf_arg2248);
} else {
if(!(R.isFunction($field2249))) {
R.ffi.throwNonFunApp(L[978],$field2249);
}
$ans2221 = $field2249.app(anf_arg2247,anf_arg2248);
}
break;
case 16: ++R.GAS;
return $ans2221;
default: throw "No case numbered " + $step2218 + " in $temp_full2219";
}
}
} catch($e2250) {
if(R.isCont($e2250) && ($step2218 !== 16)) {
$e2250.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2222,$temp_full2219,$step2218,[self2220],[anf_method_obj2246,anf_method_obj2241,anf_array2242,anf_arg2247]);
}
if(R.isPyretException($e2250)) {
$e2250.pyretStack.push($al2222);
}
throw $e2250;
}
};
var anf_variant_member6310 = R.makeMethod0($temp_full2219,"render-reason");
var $temp_full2252 = function($self2253,$maybe$stack$loc2254,$src$available2255,$maybe$ast2256) {
var $step2251 = 0;
var $ans2257 = D;
var $al2258 = L[1058];
try {
if(R.isActivationRecord($self2253)) {
$step2251 = $self2253.step;
$al2258 = $self2253.from;
$ans2257 = $self2253.ans;
self2253 = $self2253.args[0];
maybe$stack$loc2254 = $self2253.args[1];
src$available2255 = $self2253.args[2];
maybe$ast2256 = $self2253.args[3];
anf_method_obj2399 = $self2253.vars[0];
cases2259 = $self2253.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1058],4,$t);
}
var self2253 = $self2253;
var maybe$stack$loc2254 = $maybe$stack$loc2254;
var src$available2255 = $src$available2255;
var maybe$ast2256 = $maybe$ast2256;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2251) {
case 0: $al2258 = L[1000];
var anf_method_obj2399 = G(ED5,"error",L[1000]);
$step2251 = 1;
$al2258 = L[1057];
if(!(R.isFunction(maybe$stack$loc2254))) {
R.ffi.throwNonFunApp($al2258,maybe$stack$loc2254);
}
$ans2257 = maybe$stack$loc2254.app((0),(false));
break;
case 1: var cases2259 = $ans2257;
$step2251 = 2;
$al2258 = L[1056];
R._checkAnn(L[1056],R.getDotAnn(L[1056],"O",O13,"Option"),cases2259);
break;
case 2: var $cases_dispatch2398 = {"some":3,
"none":4};
$al2258 = L[1041];
$step2251 = $cases_dispatch2398[cases2259.$name] || 5;
break;
case 3: if(cases2259.$arity !== 1) {
if(cases2259.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1040],1,cases2259.$arity,L[1041]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1040],true,L[1041]);
}
}
$step2251 = 6;
$al2258 = L[1042];
var $temp_branch2334 = function($loc2260) {
var $step2335 = 0;
var $ans2336 = D;
var $al2337 = L[1001];
try {
if(R.isActivationRecord($loc2260)) {
$step2335 = $loc2260.step;
$al2337 = $loc2260.from;
$ans2336 = $loc2260.ans;
loc2260 = $loc2260.args[0];
anf_method_obj2280 = $loc2260.vars[0];
anf_arg2281 = $loc2260.vars[1];
anf_method_obj2271 = $loc2260.vars[2];
anf_arg2272 = $loc2260.vars[3];
anf_arg2273 = $loc2260.vars[4];
anf_arg2274 = $loc2260.vars[5];
anf_arg2275 = $loc2260.vars[6];
anf_arg2282 = $loc2260.vars[7];
anf_method_obj2304 = $loc2260.vars[8];
anf_arg2305 = $loc2260.vars[9];
anf_arg2306 = $loc2260.vars[10];
anf_method_obj2295 = $loc2260.vars[11];
anf_arg2296 = $loc2260.vars[12];
anf_arg2297 = $loc2260.vars[13];
anf_arg2298 = $loc2260.vars[14];
anf_arg2299 = $loc2260.vars[15];
anf_arg2307 = $loc2260.vars[16];
anf_method_obj2327 = $loc2260.vars[17];
anf_arg2328 = $loc2260.vars[18];
anf_method_obj2318 = $loc2260.vars[19];
anf_arg2319 = $loc2260.vars[20];
anf_arg2320 = $loc2260.vars[21];
anf_arg2321 = $loc2260.vars[22];
anf_arg2322 = $loc2260.vars[23];
anf_arg2329 = $loc2260.vars[24];
} else {
var loc2260 = $loc2260;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2335) {
case 0: $step2335 = 1;
$al2337 = L[1001];
$field2338 = R.getColonFieldLoc(loc2260,"is-builtin",L[1001]);
if(R.isMethod($field2338)) {
$ans2336 = $field2338.full_meth(loc2260);
} else {
if(!(R.isFunction($field2338))) {
R.ffi.throwNonFunApp(L[1001],$field2338);
}
$ans2336 = $field2338.app();
}
break;
case 1: var anf_arg2262 = $ans2336;
$al2337 = L[1001];
var anf_if2333 = R.checkWrapBoolean(anf_arg2262);
$step2335 = R.isPyretTrue(anf_if2333)?2:11;
break;
case 2: $al2337 = L[1002];
var anf_method_obj2280 = G(ED5,"sequence",L[1002]);
var anf_fun2263 = ed$simple$intro95.$var;
$step2335 = 3;
$al2337 = L[1013];
if(!(R.isFunction(anf_fun2263))) {
R.ffi.throwNonFunApp($al2337,anf_fun2263);
}
$ans2336 = anf_fun2263.app(("expression"),loc2260);
break;
case 3: var anf_arg2281 = $ans2336;
$al2337 = L[1003];
var anf_method_obj2271 = G(ED5,"para",L[1003]);
$step2335 = 4;
$al2337 = L[1004];
$field2339 = R.getColonFieldLoc(ED5,"text",L[1004]);
if(R.isMethod($field2339)) {
$ans2336 = $field2339.full_meth(ED5,("It was expected to produce a "));
} else {
if(!(R.isFunction($field2339))) {
R.ffi.throwNonFunApp(L[1004],$field2339);
}
$ans2336 = $field2339.app(("It was expected to produce a "));
}
break;
case 4: var anf_arg2272 = $ans2336;
$al2337 = L[1005];
var anf_arg2265 = G(self2253,"typ",L[1005]);
$step2335 = 5;
$al2337 = L[1006];
$field2340 = R.getColonFieldLoc(ED5,"embed",L[1006]);
if(R.isMethod($field2340)) {
$ans2336 = $field2340.full_meth(ED5,anf_arg2265);
} else {
if(!(R.isFunction($field2340))) {
R.ffi.throwNonFunApp(L[1006],$field2340);
}
$ans2336 = $field2340.app(anf_arg2265);
}
break;
case 5: var anf_arg2273 = $ans2336;
$step2335 = 6;
$al2337 = L[1007];
$field2341 = R.getColonFieldLoc(ED5,"text",L[1007]);
if(R.isMethod($field2341)) {
$ans2336 = $field2341.full_meth(ED5,(", but it produced a non-"));
} else {
if(!(R.isFunction($field2341))) {
R.ffi.throwNonFunApp(L[1007],$field2341);
}
$ans2336 = $field2341.app((", but it produced a non-"));
}
break;
case 6: var anf_arg2274 = $ans2336;
$al2337 = L[1008];
var anf_arg2268 = G(self2253,"typ",L[1008]);
$step2335 = 7;
$al2337 = L[1009];
$field2342 = R.getColonFieldLoc(ED5,"embed",L[1009]);
if(R.isMethod($field2342)) {
$ans2336 = $field2342.full_meth(ED5,anf_arg2268);
} else {
if(!(R.isFunction($field2342))) {
R.ffi.throwNonFunApp(L[1009],$field2342);
}
$ans2336 = $field2342.app(anf_arg2268);
}
break;
case 7: var anf_arg2275 = $ans2336;
$step2335 = 8;
$al2337 = L[1010];
$field2343 = R.getColonFieldLoc(ED5,"text",L[1010]);
if(R.isMethod($field2343)) {
$ans2336 = $field2343.full_meth(ED5,(" value:"));
} else {
if(!(R.isFunction($field2343))) {
R.ffi.throwNonFunApp(L[1010],$field2343);
}
$ans2336 = $field2343.app((" value:"));
}
break;
case 8: var anf_arg2276 = $ans2336;
$step2335 = 9;
$al2337 = L[1003];
$field2344 = R.getColonFieldLoc(anf_method_obj2271,"make5",L[1003]);
if(R.isMethod($field2344)) {
$ans2336 = $field2344.full_meth(anf_method_obj2271,anf_arg2272,anf_arg2273,anf_arg2274,anf_arg2275,anf_arg2276);
} else {
if(!(R.isFunction($field2344))) {
R.ffi.throwNonFunApp(L[1003],$field2344);
}
$ans2336 = $field2344.app(anf_arg2272,anf_arg2273,anf_arg2274,anf_arg2275,anf_arg2276);
}
break;
case 9: var anf_arg2282 = $ans2336;
$al2337 = L[1011];
var anf_arg2278 = G(self2253,"val",L[1011]);
$step2335 = 10;
$al2337 = L[1012];
$field2345 = R.getColonFieldLoc(ED5,"embed",L[1012]);
if(R.isMethod($field2345)) {
$ans2336 = $field2345.full_meth(ED5,anf_arg2278);
} else {
if(!(R.isFunction($field2345))) {
R.ffi.throwNonFunApp(L[1012],$field2345);
}
$ans2336 = $field2345.app(anf_arg2278);
}
break;
case 10: var anf_arg2283 = $ans2336;
$step2335 = 32;
$al2337 = L[1002];
$field2346 = R.getColonFieldLoc(anf_method_obj2280,"make3",L[1002]);
if(R.isMethod($field2346)) {
$ans2336 = $field2346.full_meth(anf_method_obj2280,anf_arg2281,anf_arg2282,anf_arg2283);
} else {
if(!(R.isFunction($field2346))) {
R.ffi.throwNonFunApp(L[1002],$field2346);
}
$ans2336 = $field2346.app(anf_arg2281,anf_arg2282,anf_arg2283);
}
break;
case 11: $step2335 = 12;
$al2337 = L[1014];
if(!(R.isFunction(src$available2255))) {
R.ffi.throwNonFunApp($al2337,src$available2255);
}
$ans2336 = src$available2255.app(loc2260);
break;
case 12: var anf_arg2285 = $ans2336;
$al2337 = L[1014];
var anf_if2332 = R.checkWrapBoolean(anf_arg2285);
$step2335 = R.isPyretTrue(anf_if2332)?13:23;
break;
case 13: $al2337 = L[1015];
var anf_method_obj2304 = G(ED5,"sequence",L[1015]);
var anf_fun2286 = ed$intro122.$var;
$step2335 = 14;
$al2337 = L[1027];
if(!(R.isFunction(anf_fun2286))) {
R.ffi.throwNonFunApp($al2337,anf_fun2286);
}
$ans2336 = anf_fun2286.app(("expression"),loc2260,(0),(true));
break;
case 14: var anf_arg2305 = $ans2336;
$step2335 = 15;
$al2337 = L[1016];
$field2347 = R.getColonFieldLoc(ED5,"cmcode",L[1016]);
if(R.isMethod($field2347)) {
$ans2336 = $field2347.full_meth(ED5,loc2260);
} else {
if(!(R.isFunction($field2347))) {
R.ffi.throwNonFunApp(L[1016],$field2347);
}
$ans2336 = $field2347.app(loc2260);
}
break;
case 15: var anf_arg2306 = $ans2336;
$al2337 = L[1017];
var anf_method_obj2295 = G(ED5,"para",L[1017]);
$step2335 = 16;
$al2337 = L[1018];
$field2348 = R.getColonFieldLoc(ED5,"text",L[1018]);
if(R.isMethod($field2348)) {
$ans2336 = $field2348.full_meth(ED5,("It was expected to produce a "));
} else {
if(!(R.isFunction($field2348))) {
R.ffi.throwNonFunApp(L[1018],$field2348);
}
$ans2336 = $field2348.app(("It was expected to produce a "));
}
break;
case 16: var anf_arg2296 = $ans2336;
$al2337 = L[1019];
var anf_arg2289 = G(self2253,"typ",L[1019]);
$step2335 = 17;
$al2337 = L[1020];
$field2349 = R.getColonFieldLoc(ED5,"embed",L[1020]);
if(R.isMethod($field2349)) {
$ans2336 = $field2349.full_meth(ED5,anf_arg2289);
} else {
if(!(R.isFunction($field2349))) {
R.ffi.throwNonFunApp(L[1020],$field2349);
}
$ans2336 = $field2349.app(anf_arg2289);
}
break;
case 17: var anf_arg2297 = $ans2336;
$step2335 = 18;
$al2337 = L[1021];
$field2350 = R.getColonFieldLoc(ED5,"text",L[1021]);
if(R.isMethod($field2350)) {
$ans2336 = $field2350.full_meth(ED5,(", but it produced a non-"));
} else {
if(!(R.isFunction($field2350))) {
R.ffi.throwNonFunApp(L[1021],$field2350);
}
$ans2336 = $field2350.app((", but it produced a non-"));
}
break;
case 18: var anf_arg2298 = $ans2336;
$al2337 = L[1022];
var anf_arg2292 = G(self2253,"typ",L[1022]);
$step2335 = 19;
$al2337 = L[1023];
$field2351 = R.getColonFieldLoc(ED5,"embed",L[1023]);
if(R.isMethod($field2351)) {
$ans2336 = $field2351.full_meth(ED5,anf_arg2292);
} else {
if(!(R.isFunction($field2351))) {
R.ffi.throwNonFunApp(L[1023],$field2351);
}
$ans2336 = $field2351.app(anf_arg2292);
}
break;
case 19: var anf_arg2299 = $ans2336;
$step2335 = 20;
$al2337 = L[1024];
$field2352 = R.getColonFieldLoc(ED5,"text",L[1024]);
if(R.isMethod($field2352)) {
$ans2336 = $field2352.full_meth(ED5,(" value:"));
} else {
if(!(R.isFunction($field2352))) {
R.ffi.throwNonFunApp(L[1024],$field2352);
}
$ans2336 = $field2352.app((" value:"));
}
break;
case 20: var anf_arg2300 = $ans2336;
$step2335 = 21;
$al2337 = L[1017];
$field2353 = R.getColonFieldLoc(anf_method_obj2295,"make5",L[1017]);
if(R.isMethod($field2353)) {
$ans2336 = $field2353.full_meth(anf_method_obj2295,anf_arg2296,anf_arg2297,anf_arg2298,anf_arg2299,anf_arg2300);
} else {
if(!(R.isFunction($field2353))) {
R.ffi.throwNonFunApp(L[1017],$field2353);
}
$ans2336 = $field2353.app(anf_arg2296,anf_arg2297,anf_arg2298,anf_arg2299,anf_arg2300);
}
break;
case 21: var anf_arg2307 = $ans2336;
$al2337 = L[1025];
var anf_arg2302 = G(self2253,"val",L[1025]);
$step2335 = 22;
$al2337 = L[1026];
$field2354 = R.getColonFieldLoc(ED5,"embed",L[1026]);
if(R.isMethod($field2354)) {
$ans2336 = $field2354.full_meth(ED5,anf_arg2302);
} else {
if(!(R.isFunction($field2354))) {
R.ffi.throwNonFunApp(L[1026],$field2354);
}
$ans2336 = $field2354.app(anf_arg2302);
}
break;
case 22: var anf_arg2308 = $ans2336;
$step2335 = 32;
$al2337 = L[1015];
$field2355 = R.getColonFieldLoc(anf_method_obj2304,"make4",L[1015]);
if(R.isMethod($field2355)) {
$ans2336 = $field2355.full_meth(anf_method_obj2304,anf_arg2305,anf_arg2306,anf_arg2307,anf_arg2308);
} else {
if(!(R.isFunction($field2355))) {
R.ffi.throwNonFunApp(L[1015],$field2355);
}
$ans2336 = $field2355.app(anf_arg2305,anf_arg2306,anf_arg2307,anf_arg2308);
}
break;
case 23: $al2337 = L[1028];
var anf_method_obj2327 = G(ED5,"sequence",L[1028]);
var anf_fun2310 = ed$simple$intro95.$var;
$step2335 = 24;
$al2337 = L[1039];
if(!(R.isFunction(anf_fun2310))) {
R.ffi.throwNonFunApp($al2337,anf_fun2310);
}
$ans2336 = anf_fun2310.app(("expression"),loc2260);
break;
case 24: var anf_arg2328 = $ans2336;
$al2337 = L[1029];
var anf_method_obj2318 = G(ED5,"para",L[1029]);
$step2335 = 25;
$al2337 = L[1030];
$field2356 = R.getColonFieldLoc(ED5,"text",L[1030]);
if(R.isMethod($field2356)) {
$ans2336 = $field2356.full_meth(ED5,("It was expected to produce a "));
} else {
if(!(R.isFunction($field2356))) {
R.ffi.throwNonFunApp(L[1030],$field2356);
}
$ans2336 = $field2356.app(("It was expected to produce a "));
}
break;
case 25: var anf_arg2319 = $ans2336;
$al2337 = L[1031];
var anf_arg2312 = G(self2253,"typ",L[1031]);
$step2335 = 26;
$al2337 = L[1032];
$field2357 = R.getColonFieldLoc(ED5,"embed",L[1032]);
if(R.isMethod($field2357)) {
$ans2336 = $field2357.full_meth(ED5,anf_arg2312);
} else {
if(!(R.isFunction($field2357))) {
R.ffi.throwNonFunApp(L[1032],$field2357);
}
$ans2336 = $field2357.app(anf_arg2312);
}
break;
case 26: var anf_arg2320 = $ans2336;
$step2335 = 27;
$al2337 = L[1033];
$field2358 = R.getColonFieldLoc(ED5,"text",L[1033]);
if(R.isMethod($field2358)) {
$ans2336 = $field2358.full_meth(ED5,(", but it produced a non-"));
} else {
if(!(R.isFunction($field2358))) {
R.ffi.throwNonFunApp(L[1033],$field2358);
}
$ans2336 = $field2358.app((", but it produced a non-"));
}
break;
case 27: var anf_arg2321 = $ans2336;
$al2337 = L[1034];
var anf_arg2315 = G(self2253,"typ",L[1034]);
$step2335 = 28;
$al2337 = L[1035];
$field2359 = R.getColonFieldLoc(ED5,"embed",L[1035]);
if(R.isMethod($field2359)) {
$ans2336 = $field2359.full_meth(ED5,anf_arg2315);
} else {
if(!(R.isFunction($field2359))) {
R.ffi.throwNonFunApp(L[1035],$field2359);
}
$ans2336 = $field2359.app(anf_arg2315);
}
break;
case 28: var anf_arg2322 = $ans2336;
$step2335 = 29;
$al2337 = L[1036];
$field2360 = R.getColonFieldLoc(ED5,"text",L[1036]);
if(R.isMethod($field2360)) {
$ans2336 = $field2360.full_meth(ED5,(" value:"));
} else {
if(!(R.isFunction($field2360))) {
R.ffi.throwNonFunApp(L[1036],$field2360);
}
$ans2336 = $field2360.app((" value:"));
}
break;
case 29: var anf_arg2323 = $ans2336;
$step2335 = 30;
$al2337 = L[1029];
$field2361 = R.getColonFieldLoc(anf_method_obj2318,"make5",L[1029]);
if(R.isMethod($field2361)) {
$ans2336 = $field2361.full_meth(anf_method_obj2318,anf_arg2319,anf_arg2320,anf_arg2321,anf_arg2322,anf_arg2323);
} else {
if(!(R.isFunction($field2361))) {
R.ffi.throwNonFunApp(L[1029],$field2361);
}
$ans2336 = $field2361.app(anf_arg2319,anf_arg2320,anf_arg2321,anf_arg2322,anf_arg2323);
}
break;
case 30: var anf_arg2329 = $ans2336;
$al2337 = L[1037];
var anf_arg2325 = G(self2253,"val",L[1037]);
$step2335 = 31;
$al2337 = L[1038];
$field2362 = R.getColonFieldLoc(ED5,"embed",L[1038]);
if(R.isMethod($field2362)) {
$ans2336 = $field2362.full_meth(ED5,anf_arg2325);
} else {
if(!(R.isFunction($field2362))) {
R.ffi.throwNonFunApp(L[1038],$field2362);
}
$ans2336 = $field2362.app(anf_arg2325);
}
break;
case 31: var anf_arg2330 = $ans2336;
$step2335 = 32;
$al2337 = L[1028];
$field2363 = R.getColonFieldLoc(anf_method_obj2327,"make3",L[1028]);
if(R.isMethod($field2363)) {
$ans2336 = $field2363.full_meth(anf_method_obj2327,anf_arg2328,anf_arg2329,anf_arg2330);
} else {
if(!(R.isFunction($field2363))) {
R.ffi.throwNonFunApp(L[1028],$field2363);
}
$ans2336 = $field2363.app(anf_arg2328,anf_arg2329,anf_arg2330);
}
break;
case 32: ++R.GAS;
return $ans2336;
default: throw "No case numbered " + $step2335 + " in $temp_branch2334";
}
}
} catch($e2364) {
if(R.isCont($e2364) && ($step2335 !== 32)) {
$e2364.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2337,$temp_branch2334,$step2335,[loc2260],[anf_method_obj2280,anf_arg2281,anf_method_obj2271,anf_arg2272,anf_arg2273,anf_arg2274,anf_arg2275,anf_arg2282,anf_method_obj2304,anf_arg2305,anf_arg2306,anf_method_obj2295,anf_arg2296,anf_arg2297,anf_arg2298,anf_arg2299,anf_arg2307,anf_method_obj2327,anf_arg2328,anf_method_obj2318,anf_arg2319,anf_arg2320,anf_arg2321,anf_arg2322,anf_arg2329]);
}
if(R.isPyretException($e2364)) {
$e2364.pyretStack.push($al2337);
}
throw $e2364;
}
};
$ans2257 = cases2259.$app_fields($temp_branch2334,[false]);
break;
case 4: if(cases2259.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1054],false,L[1041]);
}
$step2251 = 6;
$al2258 = L[1055];
var $temp_branch2385 = function($$resumer101) {
var $step2386 = 0;
var $ans2387 = D;
var $al2388 = L[1043];
try {
if(R.isActivationRecord($$resumer101)) {
$step2386 = $$resumer101.step;
$al2388 = $$resumer101.from;
$ans2387 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj2381 = $$resumer101.vars[0];
anf_method_obj2372 = $$resumer101.vars[1];
anf_arg2373 = $$resumer101.vars[2];
anf_arg2374 = $$resumer101.vars[3];
anf_arg2375 = $$resumer101.vars[4];
anf_arg2376 = $$resumer101.vars[5];
anf_arg2382 = $$resumer101.vars[6];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2386) {
case 0: $al2388 = L[1043];
var anf_method_obj2381 = G(ED5,"sequence",L[1043]);
$al2388 = L[1044];
var anf_method_obj2372 = G(ED5,"para",L[1044]);
$step2386 = 1;
$al2388 = L[1045];
$field2389 = R.getColonFieldLoc(ED5,"text",L[1045]);
if(R.isMethod($field2389)) {
$ans2387 = $field2389.full_meth(ED5,("Evaluating an expression failed. It was expected to evaluate to a "));
} else {
if(!(R.isFunction($field2389))) {
R.ffi.throwNonFunApp(L[1045],$field2389);
}
$ans2387 = $field2389.app(("Evaluating an expression failed. It was expected to evaluate to a "));
}
break;
case 1: var anf_arg2373 = $ans2387;
$al2388 = L[1046];
var anf_arg2366 = G(self2253,"typ",L[1046]);
$step2386 = 2;
$al2388 = L[1047];
$field2390 = R.getColonFieldLoc(ED5,"embed",L[1047]);
if(R.isMethod($field2390)) {
$ans2387 = $field2390.full_meth(ED5,anf_arg2366);
} else {
if(!(R.isFunction($field2390))) {
R.ffi.throwNonFunApp(L[1047],$field2390);
}
$ans2387 = $field2390.app(anf_arg2366);
}
break;
case 2: var anf_arg2374 = $ans2387;
$step2386 = 3;
$al2388 = L[1048];
$field2391 = R.getColonFieldLoc(ED5,"text",L[1048]);
if(R.isMethod($field2391)) {
$ans2387 = $field2391.full_meth(ED5,(". It evaluated to the non-"));
} else {
if(!(R.isFunction($field2391))) {
R.ffi.throwNonFunApp(L[1048],$field2391);
}
$ans2387 = $field2391.app((". It evaluated to the non-"));
}
break;
case 3: var anf_arg2375 = $ans2387;
$al2388 = L[1049];
var anf_arg2369 = G(self2253,"typ",L[1049]);
$step2386 = 4;
$al2388 = L[1050];
$field2392 = R.getColonFieldLoc(ED5,"embed",L[1050]);
if(R.isMethod($field2392)) {
$ans2387 = $field2392.full_meth(ED5,anf_arg2369);
} else {
if(!(R.isFunction($field2392))) {
R.ffi.throwNonFunApp(L[1050],$field2392);
}
$ans2387 = $field2392.app(anf_arg2369);
}
break;
case 4: var anf_arg2376 = $ans2387;
$step2386 = 5;
$al2388 = L[1051];
$field2393 = R.getColonFieldLoc(ED5,"text",L[1051]);
if(R.isMethod($field2393)) {
$ans2387 = $field2393.full_meth(ED5,(" value:"));
} else {
if(!(R.isFunction($field2393))) {
R.ffi.throwNonFunApp(L[1051],$field2393);
}
$ans2387 = $field2393.app((" value:"));
}
break;
case 5: var anf_arg2377 = $ans2387;
$step2386 = 6;
$al2388 = L[1044];
$field2394 = R.getColonFieldLoc(anf_method_obj2372,"make5",L[1044]);
if(R.isMethod($field2394)) {
$ans2387 = $field2394.full_meth(anf_method_obj2372,anf_arg2373,anf_arg2374,anf_arg2375,anf_arg2376,anf_arg2377);
} else {
if(!(R.isFunction($field2394))) {
R.ffi.throwNonFunApp(L[1044],$field2394);
}
$ans2387 = $field2394.app(anf_arg2373,anf_arg2374,anf_arg2375,anf_arg2376,anf_arg2377);
}
break;
case 6: var anf_arg2382 = $ans2387;
$al2388 = L[1052];
var anf_arg2379 = G(self2253,"val",L[1052]);
$step2386 = 7;
$al2388 = L[1053];
$field2395 = R.getColonFieldLoc(ED5,"embed",L[1053]);
if(R.isMethod($field2395)) {
$ans2387 = $field2395.full_meth(ED5,anf_arg2379);
} else {
if(!(R.isFunction($field2395))) {
R.ffi.throwNonFunApp(L[1053],$field2395);
}
$ans2387 = $field2395.app(anf_arg2379);
}
break;
case 7: var anf_arg2383 = $ans2387;
$step2386 = 8;
$al2388 = L[1043];
$field2396 = R.getColonFieldLoc(anf_method_obj2381,"make2",L[1043]);
if(R.isMethod($field2396)) {
$ans2387 = $field2396.full_meth(anf_method_obj2381,anf_arg2382,anf_arg2383);
} else {
if(!(R.isFunction($field2396))) {
R.ffi.throwNonFunApp(L[1043],$field2396);
}
$ans2387 = $field2396.app(anf_arg2382,anf_arg2383);
}
break;
case 8: ++R.GAS;
return $ans2387;
default: throw "No case numbered " + $step2386 + " in $temp_branch2385";
}
}
} catch($e2397) {
if(R.isCont($e2397) && ($step2386 !== 8)) {
$e2397.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2388,$temp_branch2385,$step2386,[],[anf_method_obj2381,anf_method_obj2372,anf_arg2373,anf_arg2374,anf_arg2375,anf_arg2376,anf_arg2382]);
}
if(R.isPyretException($e2397)) {
$e2397.pyretStack.push($al2388);
}
throw $e2397;
}
};
$ans2257 = cases2259.$app_fields($temp_branch2385,[]);
break;
case 5: $step2251 = 6;
$al2258 = L[1041];
$ans2257 = R.throwNoCasesMatched(L[1041],cases2259);
break;
case 6: var anf_arg2400 = $ans2257;
$step2251 = 7;
$al2258 = L[1000];
$field2401 = R.getColonFieldLoc(anf_method_obj2399,"make1",L[1000]);
if(R.isMethod($field2401)) {
$ans2257 = $field2401.full_meth(anf_method_obj2399,anf_arg2400);
} else {
if(!(R.isFunction($field2401))) {
R.ffi.throwNonFunApp(L[1000],$field2401);
}
$ans2257 = $field2401.app(anf_arg2400);
}
break;
case 7: ++R.GAS;
return $ans2257;
default: throw "No case numbered " + $step2251 + " in $temp_full2252";
}
}
} catch($e2402) {
if(R.isCont($e2402) && ($step2251 !== 7)) {
$e2402.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2258,$temp_full2252,$step2251,[self2253,maybe$stack$loc2254,src$available2255,maybe$ast2256],[anf_method_obj2399,cases2259]);
}
if(R.isPyretException($e2402)) {
$e2402.pyretStack.push($al2258);
}
throw $e2402;
}
};
var anf_variant_member6322 = R.makeMethod3($temp_full2252,"render-fancy-reason");
var $temp_full2404 = function($self2405) {
var $step2403 = 0;
var $ans2406 = D;
var $al2407 = L[1083];
try {
if(R.isActivationRecord($self2405)) {
$step2403 = $self2405.step;
$al2407 = $self2405.from;
$ans2406 = $self2405.ans;
self2405 = $self2405.args[0];
anf_method_obj2455 = $self2405.vars[0];
anf_arg2450 = $self2405.vars[1];
anf_method_obj2447 = $self2405.vars[2];
anf_method_obj2440 = $self2405.vars[3];
anf_arg2441 = $self2405.vars[4];
anf_arg2442 = $self2405.vars[5];
anf_arg2443 = $self2405.vars[6];
anf_arg2444 = $self2405.vars[7];
anf_arg2456 = $self2405.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1083],1,$t);
}
var self2405 = $self2405;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2403) {
case 0: $al2407 = L[1059];
var anf_method_obj2455 = G(ED5,"error",L[1059]);
var $temp_lam2409 = function($loc2410) {
var $step2408 = 0;
var $ans2411 = D;
var $al2412 = L[1070];
try {
if(R.isActivationRecord($loc2410)) {
$step2408 = $loc2410.step;
$al2412 = $loc2410.from;
$ans2411 = $loc2410.ans;
loc2410 = $loc2410.args[0];
anf_method_obj2428 = $loc2410.vars[0];
anf_arg2429 = $loc2410.vars[1];
anf_method_obj2421 = $loc2410.vars[2];
anf_arg2422 = $loc2410.vars[3];
anf_arg2423 = $loc2410.vars[4];
anf_arg2424 = $loc2410.vars[5];
anf_arg2425 = $loc2410.vars[6];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1070],1,$t);
}
var loc2410 = $loc2410;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2408) {
case 0: $al2412 = L[1060];
var anf_method_obj2428 = G(ED5,"sequence",L[1060]);
var anf_fun2413 = ed$simple$intro95.$var;
$step2408 = 1;
$al2412 = L[1069];
if(!(R.isFunction(anf_fun2413))) {
R.ffi.throwNonFunApp($al2412,anf_fun2413);
}
$ans2411 = anf_fun2413.app(("expression"),loc2410);
break;
case 1: var anf_arg2429 = $ans2411;
$al2412 = L[1061];
var anf_method_obj2421 = G(ED5,"para",L[1061]);
$step2408 = 2;
$al2412 = L[1062];
$field2414 = R.getColonFieldLoc(ED5,"text",L[1062]);
if(R.isMethod($field2414)) {
$ans2411 = $field2414.full_meth(ED5,("It was expected to evaluate to a "));
} else {
if(!(R.isFunction($field2414))) {
R.ffi.throwNonFunApp(L[1062],$field2414);
}
$ans2411 = $field2414.app(("It was expected to evaluate to a "));
}
break;
case 2: var anf_arg2422 = $ans2411;
$al2412 = L[1063];
var anf_arg2415 = G(self2405,"typ",L[1063]);
$step2408 = 3;
$al2412 = L[1064];
$field2416 = R.getColonFieldLoc(ED5,"embed",L[1064]);
if(R.isMethod($field2416)) {
$ans2411 = $field2416.full_meth(ED5,anf_arg2415);
} else {
if(!(R.isFunction($field2416))) {
R.ffi.throwNonFunApp(L[1064],$field2416);
}
$ans2411 = $field2416.app(anf_arg2415);
}
break;
case 3: var anf_arg2423 = $ans2411;
$step2408 = 4;
$al2412 = L[1065];
$field2417 = R.getColonFieldLoc(ED5,"text",L[1065]);
if(R.isMethod($field2417)) {
$ans2411 = $field2417.full_meth(ED5,(". It evaluated to the non-"));
} else {
if(!(R.isFunction($field2417))) {
R.ffi.throwNonFunApp(L[1065],$field2417);
}
$ans2411 = $field2417.app((". It evaluated to the non-"));
}
break;
case 4: var anf_arg2424 = $ans2411;
$al2412 = L[1066];
var anf_arg2418 = G(self2405,"typ",L[1066]);
$step2408 = 5;
$al2412 = L[1067];
$field2419 = R.getColonFieldLoc(ED5,"embed",L[1067]);
if(R.isMethod($field2419)) {
$ans2411 = $field2419.full_meth(ED5,anf_arg2418);
} else {
if(!(R.isFunction($field2419))) {
R.ffi.throwNonFunApp(L[1067],$field2419);
}
$ans2411 = $field2419.app(anf_arg2418);
}
break;
case 5: var anf_arg2425 = $ans2411;
$step2408 = 6;
$al2412 = L[1068];
$field2420 = R.getColonFieldLoc(ED5,"text",L[1068]);
if(R.isMethod($field2420)) {
$ans2411 = $field2420.full_meth(ED5,(" value:"));
} else {
if(!(R.isFunction($field2420))) {
R.ffi.throwNonFunApp(L[1068],$field2420);
}
$ans2411 = $field2420.app((" value:"));
}
break;
case 6: var anf_arg2426 = $ans2411;
$step2408 = 7;
$al2412 = L[1061];
$field2427 = R.getColonFieldLoc(anf_method_obj2421,"make5",L[1061]);
if(R.isMethod($field2427)) {
$ans2411 = $field2427.full_meth(anf_method_obj2421,anf_arg2422,anf_arg2423,anf_arg2424,anf_arg2425,anf_arg2426);
} else {
if(!(R.isFunction($field2427))) {
R.ffi.throwNonFunApp(L[1061],$field2427);
}
$ans2411 = $field2427.app(anf_arg2422,anf_arg2423,anf_arg2424,anf_arg2425,anf_arg2426);
}
break;
case 7: var anf_arg2430 = $ans2411;
$step2408 = 8;
$al2412 = L[1060];
$field2431 = R.getColonFieldLoc(anf_method_obj2428,"make2",L[1060]);
if(R.isMethod($field2431)) {
$ans2411 = $field2431.full_meth(anf_method_obj2428,anf_arg2429,anf_arg2430);
} else {
if(!(R.isFunction($field2431))) {
R.ffi.throwNonFunApp(L[1060],$field2431);
}
$ans2411 = $field2431.app(anf_arg2429,anf_arg2430);
}
break;
case 8: ++R.GAS;
return $ans2411;
default: throw "No case numbered " + $step2408 + " in $temp_lam2409";
}
}
} catch($e2432) {
if(R.isCont($e2432) && ($step2408 !== 8)) {
$e2432.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2412,$temp_lam2409,$step2408,[loc2410],[anf_method_obj2428,anf_arg2429,anf_method_obj2421,anf_arg2422,anf_arg2423,anf_arg2424,anf_arg2425]);
}
if(R.isPyretException($e2432)) {
$e2432.pyretStack.push($al2412);
}
throw $e2432;
}
};
var anf_arg2450 = R.makeFunction($temp_lam2409,"");
$al2407 = L[1071];
var anf_method_obj2447 = G(ED5,"sequence",L[1071]);
$al2407 = L[1072];
var anf_method_obj2440 = G(ED5,"para",L[1072]);
$step2403 = 1;
$al2407 = L[1073];
$field2433 = R.getColonFieldLoc(ED5,"text",L[1073]);
if(R.isMethod($field2433)) {
$ans2406 = $field2433.full_meth(ED5,("Evaluating an expression failed. It was expected to evaluate to a "));
} else {
if(!(R.isFunction($field2433))) {
R.ffi.throwNonFunApp(L[1073],$field2433);
}
$ans2406 = $field2433.app(("Evaluating an expression failed. It was expected to evaluate to a "));
}
break;
case 1: var anf_arg2441 = $ans2406;
$al2407 = L[1074];
var anf_arg2434 = G(self2405,"typ",L[1074]);
$step2403 = 2;
$al2407 = L[1075];
$field2435 = R.getColonFieldLoc(ED5,"embed",L[1075]);
if(R.isMethod($field2435)) {
$ans2406 = $field2435.full_meth(ED5,anf_arg2434);
} else {
if(!(R.isFunction($field2435))) {
R.ffi.throwNonFunApp(L[1075],$field2435);
}
$ans2406 = $field2435.app(anf_arg2434);
}
break;
case 2: var anf_arg2442 = $ans2406;
$step2403 = 3;
$al2407 = L[1076];
$field2436 = R.getColonFieldLoc(ED5,"text",L[1076]);
if(R.isMethod($field2436)) {
$ans2406 = $field2436.full_meth(ED5,(". It evaluated to the non-"));
} else {
if(!(R.isFunction($field2436))) {
R.ffi.throwNonFunApp(L[1076],$field2436);
}
$ans2406 = $field2436.app((". It evaluated to the non-"));
}
break;
case 3: var anf_arg2443 = $ans2406;
$al2407 = L[1077];
var anf_arg2437 = G(self2405,"typ",L[1077]);
$step2403 = 4;
$al2407 = L[1078];
$field2438 = R.getColonFieldLoc(ED5,"embed",L[1078]);
if(R.isMethod($field2438)) {
$ans2406 = $field2438.full_meth(ED5,anf_arg2437);
} else {
if(!(R.isFunction($field2438))) {
R.ffi.throwNonFunApp(L[1078],$field2438);
}
$ans2406 = $field2438.app(anf_arg2437);
}
break;
case 4: var anf_arg2444 = $ans2406;
$step2403 = 5;
$al2407 = L[1079];
$field2439 = R.getColonFieldLoc(ED5,"text",L[1079]);
if(R.isMethod($field2439)) {
$ans2406 = $field2439.full_meth(ED5,(" value:"));
} else {
if(!(R.isFunction($field2439))) {
R.ffi.throwNonFunApp(L[1079],$field2439);
}
$ans2406 = $field2439.app((" value:"));
}
break;
case 5: var anf_arg2445 = $ans2406;
$step2403 = 6;
$al2407 = L[1072];
$field2446 = R.getColonFieldLoc(anf_method_obj2440,"make5",L[1072]);
if(R.isMethod($field2446)) {
$ans2406 = $field2446.full_meth(anf_method_obj2440,anf_arg2441,anf_arg2442,anf_arg2443,anf_arg2444,anf_arg2445);
} else {
if(!(R.isFunction($field2446))) {
R.ffi.throwNonFunApp(L[1072],$field2446);
}
$ans2406 = $field2446.app(anf_arg2441,anf_arg2442,anf_arg2443,anf_arg2444,anf_arg2445);
}
break;
case 6: var anf_arg2448 = $ans2406;
$step2403 = 7;
$al2407 = L[1071];
$field2449 = R.getColonFieldLoc(anf_method_obj2447,"make1",L[1071]);
if(R.isMethod($field2449)) {
$ans2406 = $field2449.full_meth(anf_method_obj2447,anf_arg2448);
} else {
if(!(R.isFunction($field2449))) {
R.ffi.throwNonFunApp(L[1071],$field2449);
}
$ans2406 = $field2449.app(anf_arg2448);
}
break;
case 7: var anf_arg2451 = $ans2406;
$step2403 = 8;
$al2407 = L[1080];
$field2452 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[1080]);
if(R.isMethod($field2452)) {
$ans2406 = $field2452.full_meth(ED5,(0),(true),anf_arg2450,anf_arg2451);
} else {
if(!(R.isFunction($field2452))) {
R.ffi.throwNonFunApp(L[1080],$field2452);
}
$ans2406 = $field2452.app((0),(true),anf_arg2450,anf_arg2451);
}
break;
case 8: var anf_arg2456 = $ans2406;
$al2407 = L[1081];
var anf_arg2453 = G(self2405,"val",L[1081]);
$step2403 = 9;
$al2407 = L[1082];
$field2454 = R.getColonFieldLoc(ED5,"embed",L[1082]);
if(R.isMethod($field2454)) {
$ans2406 = $field2454.full_meth(ED5,anf_arg2453);
} else {
if(!(R.isFunction($field2454))) {
R.ffi.throwNonFunApp(L[1082],$field2454);
}
$ans2406 = $field2454.app(anf_arg2453);
}
break;
case 9: var anf_arg2457 = $ans2406;
$step2403 = 10;
$al2407 = L[1059];
$field2458 = R.getColonFieldLoc(anf_method_obj2455,"make2",L[1059]);
if(R.isMethod($field2458)) {
$ans2406 = $field2458.full_meth(anf_method_obj2455,anf_arg2456,anf_arg2457);
} else {
if(!(R.isFunction($field2458))) {
R.ffi.throwNonFunApp(L[1059],$field2458);
}
$ans2406 = $field2458.app(anf_arg2456,anf_arg2457);
}
break;
case 10: ++R.GAS;
return $ans2406;
default: throw "No case numbered " + $step2403 + " in $temp_full2404";
}
}
} catch($e2459) {
if(R.isCont($e2459) && ($step2403 !== 10)) {
$e2459.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2407,$temp_full2404,$step2403,[self2405],[anf_method_obj2455,anf_arg2450,anf_method_obj2447,anf_method_obj2440,anf_arg2441,anf_arg2442,anf_arg2443,anf_arg2444,anf_arg2456]);
}
if(R.isPyretException($e2459)) {
$e2459.pyretStack.push($al2407);
}
throw $e2459;
}
};
var anf_variant_member6323 = R.makeMethod0($temp_full2404,"render-reason");
var $temp_full2461 = function($self2462,$maybe$stack$loc2463,$src$available2464,$maybe$ast2465) {
var $step2460 = 0;
var $ans2466 = D;
var $al2467 = L[1222];
try {
if(R.isActivationRecord($self2462)) {
$step2460 = $self2462.step;
$al2467 = $self2462.from;
$ans2466 = $self2462.ans;
self2462 = $self2462.args[0];
maybe$stack$loc2463 = $self2462.args[1];
src$available2464 = $self2462.args[2];
maybe$ast2465 = $self2462.args[3];
anf_method_obj2843 = $self2462.vars[0];
cases2468 = $self2462.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1222],4,$t);
}
var self2462 = $self2462;
var maybe$stack$loc2463 = $maybe$stack$loc2463;
var src$available2464 = $src$available2464;
var maybe$ast2465 = $maybe$ast2465;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2460) {
case 0: $al2467 = L[1084];
var anf_method_obj2843 = G(ED5,"error",L[1084]);
$step2460 = 1;
$al2467 = L[1221];
if(!(R.isFunction(maybe$stack$loc2463))) {
R.ffi.throwNonFunApp($al2467,maybe$stack$loc2463);
}
$ans2466 = maybe$stack$loc2463.app((0),(false));
break;
case 1: var cases2468 = $ans2466;
$step2460 = 2;
$al2467 = L[1220];
R._checkAnn(L[1220],R.getDotAnn(L[1220],"O",O13,"Option"),cases2468);
break;
case 2: var $cases_dispatch2842 = {"some":3,
"none":4};
$al2467 = L[1193];
$step2460 = $cases_dispatch2842[cases2468.$name] || 5;
break;
case 3: if(cases2468.$arity !== 1) {
if(cases2468.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1192],1,cases2468.$arity,L[1193]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1192],true,L[1193]);
}
}
$step2460 = 6;
$al2467 = L[1194];
var $temp_branch2674 = function($loc2469) {
var $step2675 = 0;
var $ans2676 = D;
var $al2677 = L[1085];
try {
if(R.isActivationRecord($loc2469)) {
$step2675 = $loc2469.step;
$al2677 = $loc2469.from;
$ans2676 = $loc2469.ans;
loc2469 = $loc2469.args[0];
anf_method_obj2501 = $loc2469.vars[0];
anf_array2502 = $loc2469.vars[1];
anf_fun2473 = $loc2469.vars[2];
anf_method_obj2476 = $loc2469.vars[3];
anf_method_obj2482 = $loc2469.vars[4];
anf_method_obj2497 = $loc2469.vars[5];
anf_arg2498 = $loc2469.vars[6];
anf_method_obj2493 = $loc2469.vars[7];
anf_arg2494 = $loc2469.vars[8];
cases2505 = $loc2469.vars[9];
anf_method_obj2669 = $loc2469.vars[10];
anf_array2670 = $loc2469.vars[11];
anf_fun2641 = $loc2469.vars[12];
anf_method_obj2644 = $loc2469.vars[13];
anf_method_obj2650 = $loc2469.vars[14];
anf_method_obj2665 = $loc2469.vars[15];
anf_arg2666 = $loc2469.vars[16];
anf_method_obj2661 = $loc2469.vars[17];
anf_arg2662 = $loc2469.vars[18];
} else {
var loc2469 = $loc2469;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2675) {
case 0: $step2675 = 1;
$al2677 = L[1085];
$field2678 = R.getColonFieldLoc(loc2469,"is-builtin",L[1085]);
if(R.isMethod($field2678)) {
$ans2676 = $field2678.full_meth(loc2469);
} else {
if(!(R.isFunction($field2678))) {
R.ffi.throwNonFunApp(L[1085],$field2678);
}
$ans2676 = $field2678.app();
}
break;
case 1: var anf_arg2471 = $ans2676;
$al2677 = L[1085];
var anf_if2673 = R.checkWrapBoolean(anf_arg2471);
$step2675 = R.isPyretTrue(anf_if2673)?2:18;
break;
case 2: $al2677 = L[1086];
var anf_method_obj2501 = G(ED5,"sequence",L[1086]);
$al2677 = L[1087];
var anf_array2502 = R.makeArrayN((6));
var anf_fun2473 = ed$simple$intro95.$var;
$al2677 = L[1088];
var anf_arg2472 = G(self2462,"opname",L[1088]);
$step2675 = 3;
$al2677 = L[1106];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2677,_plus1);
}
$ans2676 = _plus1.app(anf_arg2472,(" expression"));
break;
case 3: var anf_arg2474 = $ans2676;
$step2675 = 4;
$al2677 = L[1105];
if(!(R.isFunction(anf_fun2473))) {
R.ffi.throwNonFunApp($al2677,anf_fun2473);
}
$ans2676 = anf_fun2473.app(anf_arg2474,loc2469);
break;
case 4: anf_array2502[0] = $ans2676;
$al2677 = L[1089];
var anf_method_obj2476 = G(ED5,"para",L[1089]);
$step2675 = 5;
$al2677 = L[1090];
$field2679 = R.getColonFieldLoc(ED5,"text",L[1090]);
if(R.isMethod($field2679)) {
$ans2676 = $field2679.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field2679))) {
R.ffi.throwNonFunApp(L[1090],$field2679);
}
$ans2676 = $field2679.app(("The left side was:"));
}
break;
case 5: var anf_arg2477 = $ans2676;
$step2675 = 6;
$al2677 = L[1089];
$field2680 = R.getColonFieldLoc(anf_method_obj2476,"make1",L[1089]);
if(R.isMethod($field2680)) {
$ans2676 = $field2680.full_meth(anf_method_obj2476,anf_arg2477);
} else {
if(!(R.isFunction($field2680))) {
R.ffi.throwNonFunApp(L[1089],$field2680);
}
$ans2676 = $field2680.app(anf_arg2477);
}
break;
case 6: anf_array2502[1] = $ans2676;
$al2677 = L[1091];
var anf_arg2479 = G(self2462,"val1",L[1091]);
$step2675 = 7;
$al2677 = L[1092];
$field2681 = R.getColonFieldLoc(ED5,"embed",L[1092]);
if(R.isMethod($field2681)) {
$ans2676 = $field2681.full_meth(ED5,anf_arg2479);
} else {
if(!(R.isFunction($field2681))) {
R.ffi.throwNonFunApp(L[1092],$field2681);
}
$ans2676 = $field2681.app(anf_arg2479);
}
break;
case 7: anf_array2502[2] = $ans2676;
$al2677 = L[1093];
var anf_method_obj2482 = G(ED5,"para",L[1093]);
$step2675 = 8;
$al2677 = L[1094];
$field2682 = R.getColonFieldLoc(ED5,"text",L[1094]);
if(R.isMethod($field2682)) {
$ans2676 = $field2682.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field2682))) {
R.ffi.throwNonFunApp(L[1094],$field2682);
}
$ans2676 = $field2682.app(("The right side was:"));
}
break;
case 8: var anf_arg2483 = $ans2676;
$step2675 = 9;
$al2677 = L[1093];
$field2683 = R.getColonFieldLoc(anf_method_obj2482,"make1",L[1093]);
if(R.isMethod($field2683)) {
$ans2676 = $field2683.full_meth(anf_method_obj2482,anf_arg2483);
} else {
if(!(R.isFunction($field2683))) {
R.ffi.throwNonFunApp(L[1093],$field2683);
}
$ans2676 = $field2683.app(anf_arg2483);
}
break;
case 9: anf_array2502[3] = $ans2676;
$al2677 = L[1095];
var anf_arg2485 = G(self2462,"val2",L[1095]);
$step2675 = 10;
$al2677 = L[1096];
$field2684 = R.getColonFieldLoc(ED5,"embed",L[1096]);
if(R.isMethod($field2684)) {
$ans2676 = $field2684.full_meth(ED5,anf_arg2485);
} else {
if(!(R.isFunction($field2684))) {
R.ffi.throwNonFunApp(L[1096],$field2684);
}
$ans2676 = $field2684.app(anf_arg2485);
}
break;
case 10: anf_array2502[4] = $ans2676;
$al2677 = L[1097];
var anf_method_obj2497 = G(ED5,"para",L[1097]);
$al2677 = L[1098];
var anf_arg2487 = G(self2462,"opname",L[1098]);
$step2675 = 11;
$al2677 = L[1104];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2677,_plus1);
}
$ans2676 = _plus1.app(("The "),anf_arg2487);
break;
case 11: var anf_arg2488 = $ans2676;
$step2675 = 12;
$al2677 = L[1103];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2677,_plus1);
}
$ans2676 = _plus1.app(anf_arg2488,(" operator expects to be given:"));
break;
case 12: var anf_arg2489 = $ans2676;
$step2675 = 13;
$al2677 = L[1099];
$field2685 = R.getColonFieldLoc(ED5,"text",L[1099]);
if(R.isMethod($field2685)) {
$ans2676 = $field2685.full_meth(ED5,anf_arg2489);
} else {
if(!(R.isFunction($field2685))) {
R.ffi.throwNonFunApp(L[1099],$field2685);
}
$ans2676 = $field2685.app(anf_arg2489);
}
break;
case 13: var anf_arg2498 = $ans2676;
$al2677 = L[1100];
var anf_method_obj2493 = G(ED5,"bulleted",L[1100]);
$step2675 = 14;
$al2677 = L[1101];
$field2686 = R.getColonFieldLoc(ED5,"text",L[1101]);
if(R.isMethod($field2686)) {
$ans2676 = $field2686.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2686))) {
R.ffi.throwNonFunApp(L[1101],$field2686);
}
$ans2676 = $field2686.app(("two Numbers, or"));
}
break;
case 14: var anf_arg2494 = $ans2676;
$step2675 = 15;
$al2677 = L[1102];
$field2687 = R.getColonFieldLoc(ED5,"text",L[1102]);
if(R.isMethod($field2687)) {
$ans2676 = $field2687.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2687))) {
R.ffi.throwNonFunApp(L[1102],$field2687);
}
$ans2676 = $field2687.app(("two Strings"));
}
break;
case 15: var anf_arg2495 = $ans2676;
$step2675 = 16;
$al2677 = L[1100];
$field2688 = R.getColonFieldLoc(anf_method_obj2493,"make2",L[1100]);
if(R.isMethod($field2688)) {
$ans2676 = $field2688.full_meth(anf_method_obj2493,anf_arg2494,anf_arg2495);
} else {
if(!(R.isFunction($field2688))) {
R.ffi.throwNonFunApp(L[1100],$field2688);
}
$ans2676 = $field2688.app(anf_arg2494,anf_arg2495);
}
break;
case 16: var anf_arg2499 = $ans2676;
$step2675 = 17;
$al2677 = L[1097];
$field2689 = R.getColonFieldLoc(anf_method_obj2497,"make2",L[1097]);
if(R.isMethod($field2689)) {
$ans2676 = $field2689.full_meth(anf_method_obj2497,anf_arg2498,anf_arg2499);
} else {
if(!(R.isFunction($field2689))) {
R.ffi.throwNonFunApp(L[1097],$field2689);
}
$ans2676 = $field2689.app(anf_arg2498,anf_arg2499);
}
break;
case 17: anf_array2502[5] = $ans2676;
$step2675 = 42;
$al2677 = L[1086];
$field2690 = R.getColonFieldLoc(anf_method_obj2501,"make",L[1086]);
if(R.isMethod($field2690)) {
$ans2676 = $field2690.full_meth(anf_method_obj2501,anf_array2502);
} else {
if(!(R.isFunction($field2690))) {
R.ffi.throwNonFunApp(L[1086],$field2690);
}
$ans2676 = $field2690.app(anf_array2502);
}
break;
case 18: $step2675 = 19;
$al2677 = L[1107];
if(!(R.isFunction(src$available2464))) {
R.ffi.throwNonFunApp($al2677,src$available2464);
}
$ans2676 = src$available2464.app(loc2469);
break;
case 19: var anf_arg2504 = $ans2676;
$al2677 = L[1107];
var anf_if2672 = R.checkWrapBoolean(anf_arg2504);
$step2675 = R.isPyretTrue(anf_if2672)?20:26;
break;
case 20: $step2675 = 21;
$al2677 = L[1170];
if(!(R.isFunction(maybe$ast2465))) {
R.ffi.throwNonFunApp($al2677,maybe$ast2465);
}
$ans2676 = maybe$ast2465.app(loc2469);
break;
case 21: var cases2505 = $ans2676;
$step2675 = 22;
$al2677 = L[1169];
R._checkAnn(L[1169],R.getDotAnn(L[1169],"O",O13,"Option"),cases2505);
break;
case 22: var $cases_dispatch2769 = {"some":23,
"none":24};
$al2677 = L[1143];
$step2675 = $cases_dispatch2769[cases2505.$name] || 25;
break;
case 23: if(cases2505.$arity !== 1) {
if(cases2505.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1142],1,cases2505.$arity,L[1143]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1142],true,L[1143]);
}
}
$step2675 = 42;
$al2677 = L[1144];
var $temp_branch2712 = function($ast2506) {
var $step2713 = 0;
var $ans2714 = D;
var $al2715 = L[1108];
try {
if(R.isActivationRecord($ast2506)) {
$step2713 = $ast2506.step;
$al2715 = $ast2506.from;
$ans2714 = $ast2506.ans;
ast2506 = $ast2506.args[0];
left$loc2516 = $ast2506.vars[0];
right$loc2532 = $ast2506.vars[1];
anf_method_obj2559 = $ast2506.vars[2];
anf_array2560 = $ast2506.vars[3];
anf_fun2510 = $ast2506.vars[4];
anf_method_obj2522 = $ast2506.vars[5];
anf_arg2523 = $ast2506.vars[6];
anf_arg2518 = $ast2506.vars[7];
anf_arg2524 = $ast2506.vars[8];
anf_method_obj2538 = $ast2506.vars[9];
anf_arg2539 = $ast2506.vars[10];
anf_arg2534 = $ast2506.vars[11];
anf_arg2540 = $ast2506.vars[12];
anf_method_obj2555 = $ast2506.vars[13];
anf_arg2556 = $ast2506.vars[14];
anf_method_obj2551 = $ast2506.vars[15];
anf_arg2552 = $ast2506.vars[16];
} else {
var ast2506 = $ast2506;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2713) {
case 0: $al2715 = L[1108];
var anf_bracket2507 = G(ast2506,"left",L[1108]);
$al2715 = L[1109];
var left$loc2516 = G(anf_bracket2507,"l",L[1109]);
$al2715 = L[1110];
var anf_bracket2508 = G(ast2506,"right",L[1110]);
$al2715 = L[1111];
var right$loc2532 = G(anf_bracket2508,"l",L[1111]);
$al2715 = L[1112];
var anf_method_obj2559 = G(ED5,"sequence",L[1112]);
$al2715 = L[1113];
var anf_array2560 = R.makeArrayN((7));
var anf_fun2510 = ed$intro122.$var;
$al2715 = L[1114];
var anf_arg2509 = G(self2462,"opname",L[1114]);
$step2713 = 1;
$al2715 = L[1141];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2715,_plus1);
}
$ans2714 = _plus1.app(anf_arg2509,(" expression"));
break;
case 1: var anf_arg2511 = $ans2714;
$step2713 = 2;
$al2715 = L[1140];
if(!(R.isFunction(anf_fun2510))) {
R.ffi.throwNonFunApp($al2715,anf_fun2510);
}
$ans2714 = anf_fun2510.app(anf_arg2511,loc2469,(-1),(true));
break;
case 2: anf_array2560[0] = $ans2714;
$step2713 = 3;
$al2715 = L[1115];
$field2716 = R.getColonFieldLoc(ED5,"cmcode",L[1115]);
if(R.isMethod($field2716)) {
$ans2714 = $field2716.full_meth(ED5,loc2469);
} else {
if(!(R.isFunction($field2716))) {
R.ffi.throwNonFunApp(L[1115],$field2716);
}
$ans2714 = $field2716.app(loc2469);
}
break;
case 3: anf_array2560[1] = $ans2714;
$al2715 = L[1116];
var anf_method_obj2522 = G(ED5,"para",L[1116]);
$step2713 = 4;
$al2715 = L[1117];
$field2717 = R.getColonFieldLoc(ED5,"text",L[1117]);
if(R.isMethod($field2717)) {
$ans2714 = $field2717.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field2717))) {
R.ffi.throwNonFunApp(L[1117],$field2717);
}
$ans2714 = $field2717.app(("The "));
}
break;
case 4: var anf_arg2523 = $ans2714;
$step2713 = 5;
$al2715 = L[1118];
$field2718 = R.getColonFieldLoc(ED5,"text",L[1118]);
if(R.isMethod($field2718)) {
$ans2714 = $field2718.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field2718))) {
R.ffi.throwNonFunApp(L[1118],$field2718);
}
$ans2714 = $field2718.app(("left side"));
}
break;
case 5: var anf_arg2518 = $ans2714;
$al2715 = L[1119];
var anf_method_obj2515 = G(ED5,"locs",L[1119]);
$step2713 = 6;
$al2715 = L[1119];
$field2719 = R.getColonFieldLoc(anf_method_obj2515,"make1",L[1119]);
if(R.isMethod($field2719)) {
$ans2714 = $field2719.full_meth(anf_method_obj2515,left$loc2516);
} else {
if(!(R.isFunction($field2719))) {
R.ffi.throwNonFunApp(L[1119],$field2719);
}
$ans2714 = $field2719.app(left$loc2516);
}
break;
case 6: var anf_arg2519 = $ans2714;
$step2713 = 7;
$al2715 = L[1120];
$field2720 = R.getColonFieldLoc(ED5,"highlight",L[1120]);
if(R.isMethod($field2720)) {
$ans2714 = $field2720.full_meth(ED5,anf_arg2518,anf_arg2519,(0));
} else {
if(!(R.isFunction($field2720))) {
R.ffi.throwNonFunApp(L[1120],$field2720);
}
$ans2714 = $field2720.app(anf_arg2518,anf_arg2519,(0));
}
break;
case 7: var anf_arg2524 = $ans2714;
$step2713 = 8;
$al2715 = L[1121];
$field2721 = R.getColonFieldLoc(ED5,"text",L[1121]);
if(R.isMethod($field2721)) {
$ans2714 = $field2721.full_meth(ED5,(" was:"));
} else {
if(!(R.isFunction($field2721))) {
R.ffi.throwNonFunApp(L[1121],$field2721);
}
$ans2714 = $field2721.app((" was:"));
}
break;
case 8: var anf_arg2525 = $ans2714;
$step2713 = 9;
$al2715 = L[1116];
$field2722 = R.getColonFieldLoc(anf_method_obj2522,"make3",L[1116]);
if(R.isMethod($field2722)) {
$ans2714 = $field2722.full_meth(anf_method_obj2522,anf_arg2523,anf_arg2524,anf_arg2525);
} else {
if(!(R.isFunction($field2722))) {
R.ffi.throwNonFunApp(L[1116],$field2722);
}
$ans2714 = $field2722.app(anf_arg2523,anf_arg2524,anf_arg2525);
}
break;
case 9: anf_array2560[2] = $ans2714;
$al2715 = L[1122];
var anf_arg2527 = G(self2462,"val1",L[1122]);
$step2713 = 10;
$al2715 = L[1123];
$field2723 = R.getColonFieldLoc(ED5,"embed",L[1123]);
if(R.isMethod($field2723)) {
$ans2714 = $field2723.full_meth(ED5,anf_arg2527);
} else {
if(!(R.isFunction($field2723))) {
R.ffi.throwNonFunApp(L[1123],$field2723);
}
$ans2714 = $field2723.app(anf_arg2527);
}
break;
case 10: anf_array2560[3] = $ans2714;
$al2715 = L[1124];
var anf_method_obj2538 = G(ED5,"para",L[1124]);
$step2713 = 11;
$al2715 = L[1125];
$field2724 = R.getColonFieldLoc(ED5,"text",L[1125]);
if(R.isMethod($field2724)) {
$ans2714 = $field2724.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field2724))) {
R.ffi.throwNonFunApp(L[1125],$field2724);
}
$ans2714 = $field2724.app(("The "));
}
break;
case 11: var anf_arg2539 = $ans2714;
$step2713 = 12;
$al2715 = L[1126];
$field2725 = R.getColonFieldLoc(ED5,"text",L[1126]);
if(R.isMethod($field2725)) {
$ans2714 = $field2725.full_meth(ED5,("right side"));
} else {
if(!(R.isFunction($field2725))) {
R.ffi.throwNonFunApp(L[1126],$field2725);
}
$ans2714 = $field2725.app(("right side"));
}
break;
case 12: var anf_arg2534 = $ans2714;
$al2715 = L[1127];
var anf_method_obj2531 = G(ED5,"locs",L[1127]);
$step2713 = 13;
$al2715 = L[1127];
$field2726 = R.getColonFieldLoc(anf_method_obj2531,"make1",L[1127]);
if(R.isMethod($field2726)) {
$ans2714 = $field2726.full_meth(anf_method_obj2531,right$loc2532);
} else {
if(!(R.isFunction($field2726))) {
R.ffi.throwNonFunApp(L[1127],$field2726);
}
$ans2714 = $field2726.app(right$loc2532);
}
break;
case 13: var anf_arg2535 = $ans2714;
$step2713 = 14;
$al2715 = L[1128];
$field2727 = R.getColonFieldLoc(ED5,"highlight",L[1128]);
if(R.isMethod($field2727)) {
$ans2714 = $field2727.full_meth(ED5,anf_arg2534,anf_arg2535,(1));
} else {
if(!(R.isFunction($field2727))) {
R.ffi.throwNonFunApp(L[1128],$field2727);
}
$ans2714 = $field2727.app(anf_arg2534,anf_arg2535,(1));
}
break;
case 14: var anf_arg2540 = $ans2714;
$step2713 = 15;
$al2715 = L[1129];
$field2728 = R.getColonFieldLoc(ED5,"text",L[1129]);
if(R.isMethod($field2728)) {
$ans2714 = $field2728.full_meth(ED5,(" was:"));
} else {
if(!(R.isFunction($field2728))) {
R.ffi.throwNonFunApp(L[1129],$field2728);
}
$ans2714 = $field2728.app((" was:"));
}
break;
case 15: var anf_arg2541 = $ans2714;
$step2713 = 16;
$al2715 = L[1124];
$field2729 = R.getColonFieldLoc(anf_method_obj2538,"make3",L[1124]);
if(R.isMethod($field2729)) {
$ans2714 = $field2729.full_meth(anf_method_obj2538,anf_arg2539,anf_arg2540,anf_arg2541);
} else {
if(!(R.isFunction($field2729))) {
R.ffi.throwNonFunApp(L[1124],$field2729);
}
$ans2714 = $field2729.app(anf_arg2539,anf_arg2540,anf_arg2541);
}
break;
case 16: anf_array2560[4] = $ans2714;
$al2715 = L[1130];
var anf_arg2543 = G(self2462,"val2",L[1130]);
$step2713 = 17;
$al2715 = L[1131];
$field2730 = R.getColonFieldLoc(ED5,"embed",L[1131]);
if(R.isMethod($field2730)) {
$ans2714 = $field2730.full_meth(ED5,anf_arg2543);
} else {
if(!(R.isFunction($field2730))) {
R.ffi.throwNonFunApp(L[1131],$field2730);
}
$ans2714 = $field2730.app(anf_arg2543);
}
break;
case 17: anf_array2560[5] = $ans2714;
$al2715 = L[1132];
var anf_method_obj2555 = G(ED5,"para",L[1132]);
$al2715 = L[1133];
var anf_arg2545 = G(self2462,"opname",L[1133]);
$step2713 = 18;
$al2715 = L[1139];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2715,_plus1);
}
$ans2714 = _plus1.app(("The "),anf_arg2545);
break;
case 18: var anf_arg2546 = $ans2714;
$step2713 = 19;
$al2715 = L[1138];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2715,_plus1);
}
$ans2714 = _plus1.app(anf_arg2546,(" operator expects to be given:"));
break;
case 19: var anf_arg2547 = $ans2714;
$step2713 = 20;
$al2715 = L[1134];
$field2731 = R.getColonFieldLoc(ED5,"text",L[1134]);
if(R.isMethod($field2731)) {
$ans2714 = $field2731.full_meth(ED5,anf_arg2547);
} else {
if(!(R.isFunction($field2731))) {
R.ffi.throwNonFunApp(L[1134],$field2731);
}
$ans2714 = $field2731.app(anf_arg2547);
}
break;
case 20: var anf_arg2556 = $ans2714;
$al2715 = L[1135];
var anf_method_obj2551 = G(ED5,"bulleted",L[1135]);
$step2713 = 21;
$al2715 = L[1136];
$field2732 = R.getColonFieldLoc(ED5,"text",L[1136]);
if(R.isMethod($field2732)) {
$ans2714 = $field2732.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2732))) {
R.ffi.throwNonFunApp(L[1136],$field2732);
}
$ans2714 = $field2732.app(("two Numbers, or"));
}
break;
case 21: var anf_arg2552 = $ans2714;
$step2713 = 22;
$al2715 = L[1137];
$field2733 = R.getColonFieldLoc(ED5,"text",L[1137]);
if(R.isMethod($field2733)) {
$ans2714 = $field2733.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2733))) {
R.ffi.throwNonFunApp(L[1137],$field2733);
}
$ans2714 = $field2733.app(("two Strings"));
}
break;
case 22: var anf_arg2553 = $ans2714;
$step2713 = 23;
$al2715 = L[1135];
$field2734 = R.getColonFieldLoc(anf_method_obj2551,"make2",L[1135]);
if(R.isMethod($field2734)) {
$ans2714 = $field2734.full_meth(anf_method_obj2551,anf_arg2552,anf_arg2553);
} else {
if(!(R.isFunction($field2734))) {
R.ffi.throwNonFunApp(L[1135],$field2734);
}
$ans2714 = $field2734.app(anf_arg2552,anf_arg2553);
}
break;
case 23: var anf_arg2557 = $ans2714;
$step2713 = 24;
$al2715 = L[1132];
$field2735 = R.getColonFieldLoc(anf_method_obj2555,"make2",L[1132]);
if(R.isMethod($field2735)) {
$ans2714 = $field2735.full_meth(anf_method_obj2555,anf_arg2556,anf_arg2557);
} else {
if(!(R.isFunction($field2735))) {
R.ffi.throwNonFunApp(L[1132],$field2735);
}
$ans2714 = $field2735.app(anf_arg2556,anf_arg2557);
}
break;
case 24: anf_array2560[6] = $ans2714;
$step2713 = 25;
$al2715 = L[1112];
$field2736 = R.getColonFieldLoc(anf_method_obj2559,"make",L[1112]);
if(R.isMethod($field2736)) {
$ans2714 = $field2736.full_meth(anf_method_obj2559,anf_array2560);
} else {
if(!(R.isFunction($field2736))) {
R.ffi.throwNonFunApp(L[1112],$field2736);
}
$ans2714 = $field2736.app(anf_array2560);
}
break;
case 25: ++R.GAS;
return $ans2714;
default: throw "No case numbered " + $step2713 + " in $temp_branch2712";
}
}
} catch($e2737) {
if(R.isCont($e2737) && ($step2713 !== 25)) {
$e2737.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2715,$temp_branch2712,$step2713,[ast2506],[left$loc2516,right$loc2532,anf_method_obj2559,anf_array2560,anf_fun2510,anf_method_obj2522,anf_arg2523,anf_arg2518,anf_arg2524,anf_method_obj2538,anf_arg2539,anf_arg2534,anf_arg2540,anf_method_obj2555,anf_arg2556,anf_method_obj2551,anf_arg2552]);
}
if(R.isPyretException($e2737)) {
$e2737.pyretStack.push($al2715);
}
throw $e2737;
}
};
$ans2676 = cases2505.$app_fields($temp_branch2712,[false]);
break;
case 24: if(cases2505.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1167],false,L[1143]);
}
$step2675 = 42;
$al2677 = L[1168];
var $temp_branch2751 = function($$resumer101) {
var $step2752 = 0;
var $ans2753 = D;
var $al2754 = L[1145];
try {
if(R.isActivationRecord($$resumer101)) {
$step2752 = $$resumer101.step;
$al2754 = $$resumer101.from;
$ans2753 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj2618 = $$resumer101.vars[0];
anf_array2619 = $$resumer101.vars[1];
anf_fun2589 = $$resumer101.vars[2];
anf_method_obj2593 = $$resumer101.vars[3];
anf_method_obj2599 = $$resumer101.vars[4];
anf_method_obj2614 = $$resumer101.vars[5];
anf_arg2615 = $$resumer101.vars[6];
anf_method_obj2610 = $$resumer101.vars[7];
anf_arg2611 = $$resumer101.vars[8];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2752) {
case 0: $al2754 = L[1145];
var anf_method_obj2618 = G(ED5,"sequence",L[1145]);
$al2754 = L[1146];
var anf_array2619 = R.makeArrayN((7));
var anf_fun2589 = ed$intro122.$var;
$al2754 = L[1147];
var anf_arg2588 = G(self2462,"opname",L[1147]);
$step2752 = 1;
$al2754 = L[1166];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2754,_plus1);
}
$ans2753 = _plus1.app(anf_arg2588,(" expression"));
break;
case 1: var anf_arg2590 = $ans2753;
$step2752 = 2;
$al2754 = L[1165];
if(!(R.isFunction(anf_fun2589))) {
R.ffi.throwNonFunApp($al2754,anf_fun2589);
}
$ans2753 = anf_fun2589.app(anf_arg2590,loc2469,(0),(true));
break;
case 2: anf_array2619[0] = $ans2753;
$step2752 = 3;
$al2754 = L[1148];
$field2755 = R.getColonFieldLoc(ED5,"cmcode",L[1148]);
if(R.isMethod($field2755)) {
$ans2753 = $field2755.full_meth(ED5,loc2469);
} else {
if(!(R.isFunction($field2755))) {
R.ffi.throwNonFunApp(L[1148],$field2755);
}
$ans2753 = $field2755.app(loc2469);
}
break;
case 3: anf_array2619[1] = $ans2753;
$al2754 = L[1149];
var anf_method_obj2593 = G(ED5,"para",L[1149]);
$step2752 = 4;
$al2754 = L[1150];
$field2756 = R.getColonFieldLoc(ED5,"text",L[1150]);
if(R.isMethod($field2756)) {
$ans2753 = $field2756.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field2756))) {
R.ffi.throwNonFunApp(L[1150],$field2756);
}
$ans2753 = $field2756.app(("The left side was:"));
}
break;
case 4: var anf_arg2594 = $ans2753;
$step2752 = 5;
$al2754 = L[1149];
$field2757 = R.getColonFieldLoc(anf_method_obj2593,"make1",L[1149]);
if(R.isMethod($field2757)) {
$ans2753 = $field2757.full_meth(anf_method_obj2593,anf_arg2594);
} else {
if(!(R.isFunction($field2757))) {
R.ffi.throwNonFunApp(L[1149],$field2757);
}
$ans2753 = $field2757.app(anf_arg2594);
}
break;
case 5: anf_array2619[2] = $ans2753;
$al2754 = L[1151];
var anf_arg2596 = G(self2462,"val1",L[1151]);
$step2752 = 6;
$al2754 = L[1152];
$field2758 = R.getColonFieldLoc(ED5,"embed",L[1152]);
if(R.isMethod($field2758)) {
$ans2753 = $field2758.full_meth(ED5,anf_arg2596);
} else {
if(!(R.isFunction($field2758))) {
R.ffi.throwNonFunApp(L[1152],$field2758);
}
$ans2753 = $field2758.app(anf_arg2596);
}
break;
case 6: anf_array2619[3] = $ans2753;
$al2754 = L[1153];
var anf_method_obj2599 = G(ED5,"para",L[1153]);
$step2752 = 7;
$al2754 = L[1154];
$field2759 = R.getColonFieldLoc(ED5,"text",L[1154]);
if(R.isMethod($field2759)) {
$ans2753 = $field2759.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field2759))) {
R.ffi.throwNonFunApp(L[1154],$field2759);
}
$ans2753 = $field2759.app(("The right side was:"));
}
break;
case 7: var anf_arg2600 = $ans2753;
$step2752 = 8;
$al2754 = L[1153];
$field2760 = R.getColonFieldLoc(anf_method_obj2599,"make1",L[1153]);
if(R.isMethod($field2760)) {
$ans2753 = $field2760.full_meth(anf_method_obj2599,anf_arg2600);
} else {
if(!(R.isFunction($field2760))) {
R.ffi.throwNonFunApp(L[1153],$field2760);
}
$ans2753 = $field2760.app(anf_arg2600);
}
break;
case 8: anf_array2619[4] = $ans2753;
$al2754 = L[1155];
var anf_arg2602 = G(self2462,"val2",L[1155]);
$step2752 = 9;
$al2754 = L[1156];
$field2761 = R.getColonFieldLoc(ED5,"embed",L[1156]);
if(R.isMethod($field2761)) {
$ans2753 = $field2761.full_meth(ED5,anf_arg2602);
} else {
if(!(R.isFunction($field2761))) {
R.ffi.throwNonFunApp(L[1156],$field2761);
}
$ans2753 = $field2761.app(anf_arg2602);
}
break;
case 9: anf_array2619[5] = $ans2753;
$al2754 = L[1157];
var anf_method_obj2614 = G(ED5,"para",L[1157]);
$al2754 = L[1158];
var anf_arg2604 = G(self2462,"opname",L[1158]);
$step2752 = 10;
$al2754 = L[1164];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2754,_plus1);
}
$ans2753 = _plus1.app(("The "),anf_arg2604);
break;
case 10: var anf_arg2605 = $ans2753;
$step2752 = 11;
$al2754 = L[1163];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2754,_plus1);
}
$ans2753 = _plus1.app(anf_arg2605,(" operator expects to be given:"));
break;
case 11: var anf_arg2606 = $ans2753;
$step2752 = 12;
$al2754 = L[1159];
$field2762 = R.getColonFieldLoc(ED5,"text",L[1159]);
if(R.isMethod($field2762)) {
$ans2753 = $field2762.full_meth(ED5,anf_arg2606);
} else {
if(!(R.isFunction($field2762))) {
R.ffi.throwNonFunApp(L[1159],$field2762);
}
$ans2753 = $field2762.app(anf_arg2606);
}
break;
case 12: var anf_arg2615 = $ans2753;
$al2754 = L[1160];
var anf_method_obj2610 = G(ED5,"bulleted",L[1160]);
$step2752 = 13;
$al2754 = L[1161];
$field2763 = R.getColonFieldLoc(ED5,"text",L[1161]);
if(R.isMethod($field2763)) {
$ans2753 = $field2763.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2763))) {
R.ffi.throwNonFunApp(L[1161],$field2763);
}
$ans2753 = $field2763.app(("two Numbers, or"));
}
break;
case 13: var anf_arg2611 = $ans2753;
$step2752 = 14;
$al2754 = L[1162];
$field2764 = R.getColonFieldLoc(ED5,"text",L[1162]);
if(R.isMethod($field2764)) {
$ans2753 = $field2764.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2764))) {
R.ffi.throwNonFunApp(L[1162],$field2764);
}
$ans2753 = $field2764.app(("two Strings"));
}
break;
case 14: var anf_arg2612 = $ans2753;
$step2752 = 15;
$al2754 = L[1160];
$field2765 = R.getColonFieldLoc(anf_method_obj2610,"make2",L[1160]);
if(R.isMethod($field2765)) {
$ans2753 = $field2765.full_meth(anf_method_obj2610,anf_arg2611,anf_arg2612);
} else {
if(!(R.isFunction($field2765))) {
R.ffi.throwNonFunApp(L[1160],$field2765);
}
$ans2753 = $field2765.app(anf_arg2611,anf_arg2612);
}
break;
case 15: var anf_arg2616 = $ans2753;
$step2752 = 16;
$al2754 = L[1157];
$field2766 = R.getColonFieldLoc(anf_method_obj2614,"make2",L[1157]);
if(R.isMethod($field2766)) {
$ans2753 = $field2766.full_meth(anf_method_obj2614,anf_arg2615,anf_arg2616);
} else {
if(!(R.isFunction($field2766))) {
R.ffi.throwNonFunApp(L[1157],$field2766);
}
$ans2753 = $field2766.app(anf_arg2615,anf_arg2616);
}
break;
case 16: anf_array2619[6] = $ans2753;
$step2752 = 17;
$al2754 = L[1145];
$field2767 = R.getColonFieldLoc(anf_method_obj2618,"make",L[1145]);
if(R.isMethod($field2767)) {
$ans2753 = $field2767.full_meth(anf_method_obj2618,anf_array2619);
} else {
if(!(R.isFunction($field2767))) {
R.ffi.throwNonFunApp(L[1145],$field2767);
}
$ans2753 = $field2767.app(anf_array2619);
}
break;
case 17: ++R.GAS;
return $ans2753;
default: throw "No case numbered " + $step2752 + " in $temp_branch2751";
}
}
} catch($e2768) {
if(R.isCont($e2768) && ($step2752 !== 17)) {
$e2768.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2754,$temp_branch2751,$step2752,[],[anf_method_obj2618,anf_array2619,anf_fun2589,anf_method_obj2593,anf_method_obj2599,anf_method_obj2614,anf_arg2615,anf_method_obj2610,anf_arg2611]);
}
if(R.isPyretException($e2768)) {
$e2768.pyretStack.push($al2754);
}
throw $e2768;
}
};
$ans2676 = cases2505.$app_fields($temp_branch2751,[]);
break;
case 25: $step2675 = 42;
$al2677 = L[1143];
$ans2676 = R.throwNoCasesMatched(L[1143],cases2505);
break;
case 26: $al2677 = L[1171];
var anf_method_obj2669 = G(ED5,"sequence",L[1171]);
$al2677 = L[1172];
var anf_array2670 = R.makeArrayN((6));
var anf_fun2641 = ed$simple$intro95.$var;
$al2677 = L[1173];
var anf_arg2640 = G(self2462,"opname",L[1173]);
$step2675 = 27;
$al2677 = L[1191];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2677,_plus1);
}
$ans2676 = _plus1.app(anf_arg2640,(" expression"));
break;
case 27: var anf_arg2642 = $ans2676;
$step2675 = 28;
$al2677 = L[1190];
if(!(R.isFunction(anf_fun2641))) {
R.ffi.throwNonFunApp($al2677,anf_fun2641);
}
$ans2676 = anf_fun2641.app(anf_arg2642,loc2469);
break;
case 28: anf_array2670[0] = $ans2676;
$al2677 = L[1174];
var anf_method_obj2644 = G(ED5,"para",L[1174]);
$step2675 = 29;
$al2677 = L[1175];
$field2770 = R.getColonFieldLoc(ED5,"text",L[1175]);
if(R.isMethod($field2770)) {
$ans2676 = $field2770.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field2770))) {
R.ffi.throwNonFunApp(L[1175],$field2770);
}
$ans2676 = $field2770.app(("The left side was:"));
}
break;
case 29: var anf_arg2645 = $ans2676;
$step2675 = 30;
$al2677 = L[1174];
$field2771 = R.getColonFieldLoc(anf_method_obj2644,"make1",L[1174]);
if(R.isMethod($field2771)) {
$ans2676 = $field2771.full_meth(anf_method_obj2644,anf_arg2645);
} else {
if(!(R.isFunction($field2771))) {
R.ffi.throwNonFunApp(L[1174],$field2771);
}
$ans2676 = $field2771.app(anf_arg2645);
}
break;
case 30: anf_array2670[1] = $ans2676;
$al2677 = L[1176];
var anf_arg2647 = G(self2462,"val1",L[1176]);
$step2675 = 31;
$al2677 = L[1177];
$field2772 = R.getColonFieldLoc(ED5,"embed",L[1177]);
if(R.isMethod($field2772)) {
$ans2676 = $field2772.full_meth(ED5,anf_arg2647);
} else {
if(!(R.isFunction($field2772))) {
R.ffi.throwNonFunApp(L[1177],$field2772);
}
$ans2676 = $field2772.app(anf_arg2647);
}
break;
case 31: anf_array2670[2] = $ans2676;
$al2677 = L[1178];
var anf_method_obj2650 = G(ED5,"para",L[1178]);
$step2675 = 32;
$al2677 = L[1179];
$field2773 = R.getColonFieldLoc(ED5,"text",L[1179]);
if(R.isMethod($field2773)) {
$ans2676 = $field2773.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field2773))) {
R.ffi.throwNonFunApp(L[1179],$field2773);
}
$ans2676 = $field2773.app(("The right side was:"));
}
break;
case 32: var anf_arg2651 = $ans2676;
$step2675 = 33;
$al2677 = L[1178];
$field2774 = R.getColonFieldLoc(anf_method_obj2650,"make1",L[1178]);
if(R.isMethod($field2774)) {
$ans2676 = $field2774.full_meth(anf_method_obj2650,anf_arg2651);
} else {
if(!(R.isFunction($field2774))) {
R.ffi.throwNonFunApp(L[1178],$field2774);
}
$ans2676 = $field2774.app(anf_arg2651);
}
break;
case 33: anf_array2670[3] = $ans2676;
$al2677 = L[1180];
var anf_arg2653 = G(self2462,"val2",L[1180]);
$step2675 = 34;
$al2677 = L[1181];
$field2775 = R.getColonFieldLoc(ED5,"embed",L[1181]);
if(R.isMethod($field2775)) {
$ans2676 = $field2775.full_meth(ED5,anf_arg2653);
} else {
if(!(R.isFunction($field2775))) {
R.ffi.throwNonFunApp(L[1181],$field2775);
}
$ans2676 = $field2775.app(anf_arg2653);
}
break;
case 34: anf_array2670[4] = $ans2676;
$al2677 = L[1182];
var anf_method_obj2665 = G(ED5,"para",L[1182]);
$al2677 = L[1183];
var anf_arg2655 = G(self2462,"opname",L[1183]);
$step2675 = 35;
$al2677 = L[1189];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2677,_plus1);
}
$ans2676 = _plus1.app(("The "),anf_arg2655);
break;
case 35: var anf_arg2656 = $ans2676;
$step2675 = 36;
$al2677 = L[1188];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2677,_plus1);
}
$ans2676 = _plus1.app(anf_arg2656,(" operator expects to be given:"));
break;
case 36: var anf_arg2657 = $ans2676;
$step2675 = 37;
$al2677 = L[1184];
$field2776 = R.getColonFieldLoc(ED5,"text",L[1184]);
if(R.isMethod($field2776)) {
$ans2676 = $field2776.full_meth(ED5,anf_arg2657);
} else {
if(!(R.isFunction($field2776))) {
R.ffi.throwNonFunApp(L[1184],$field2776);
}
$ans2676 = $field2776.app(anf_arg2657);
}
break;
case 37: var anf_arg2666 = $ans2676;
$al2677 = L[1185];
var anf_method_obj2661 = G(ED5,"bulleted",L[1185]);
$step2675 = 38;
$al2677 = L[1186];
$field2777 = R.getColonFieldLoc(ED5,"text",L[1186]);
if(R.isMethod($field2777)) {
$ans2676 = $field2777.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2777))) {
R.ffi.throwNonFunApp(L[1186],$field2777);
}
$ans2676 = $field2777.app(("two Numbers, or"));
}
break;
case 38: var anf_arg2662 = $ans2676;
$step2675 = 39;
$al2677 = L[1187];
$field2778 = R.getColonFieldLoc(ED5,"text",L[1187]);
if(R.isMethod($field2778)) {
$ans2676 = $field2778.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2778))) {
R.ffi.throwNonFunApp(L[1187],$field2778);
}
$ans2676 = $field2778.app(("two Strings"));
}
break;
case 39: var anf_arg2663 = $ans2676;
$step2675 = 40;
$al2677 = L[1185];
$field2779 = R.getColonFieldLoc(anf_method_obj2661,"make2",L[1185]);
if(R.isMethod($field2779)) {
$ans2676 = $field2779.full_meth(anf_method_obj2661,anf_arg2662,anf_arg2663);
} else {
if(!(R.isFunction($field2779))) {
R.ffi.throwNonFunApp(L[1185],$field2779);
}
$ans2676 = $field2779.app(anf_arg2662,anf_arg2663);
}
break;
case 40: var anf_arg2667 = $ans2676;
$step2675 = 41;
$al2677 = L[1182];
$field2780 = R.getColonFieldLoc(anf_method_obj2665,"make2",L[1182]);
if(R.isMethod($field2780)) {
$ans2676 = $field2780.full_meth(anf_method_obj2665,anf_arg2666,anf_arg2667);
} else {
if(!(R.isFunction($field2780))) {
R.ffi.throwNonFunApp(L[1182],$field2780);
}
$ans2676 = $field2780.app(anf_arg2666,anf_arg2667);
}
break;
case 41: anf_array2670[5] = $ans2676;
$step2675 = 42;
$al2677 = L[1171];
$field2781 = R.getColonFieldLoc(anf_method_obj2669,"make",L[1171]);
if(R.isMethod($field2781)) {
$ans2676 = $field2781.full_meth(anf_method_obj2669,anf_array2670);
} else {
if(!(R.isFunction($field2781))) {
R.ffi.throwNonFunApp(L[1171],$field2781);
}
$ans2676 = $field2781.app(anf_array2670);
}
break;
case 42: ++R.GAS;
return $ans2676;
default: throw "No case numbered " + $step2675 + " in $temp_branch2674";
}
}
} catch($e2782) {
if(R.isCont($e2782) && ($step2675 !== 42)) {
$e2782.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2677,$temp_branch2674,$step2675,[loc2469],[anf_method_obj2501,anf_array2502,anf_fun2473,anf_method_obj2476,anf_method_obj2482,anf_method_obj2497,anf_arg2498,anf_method_obj2493,anf_arg2494,cases2505,anf_method_obj2669,anf_array2670,anf_fun2641,anf_method_obj2644,anf_method_obj2650,anf_method_obj2665,anf_arg2666,anf_method_obj2661,anf_arg2662]);
}
if(R.isPyretException($e2782)) {
$e2782.pyretStack.push($al2677);
}
throw $e2782;
}
};
$ans2466 = cases2468.$app_fields($temp_branch2674,[false]);
break;
case 4: if(cases2468.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1218],false,L[1193]);
}
$step2460 = 6;
$al2467 = L[1219];
var $temp_branch2821 = function($$resumer101) {
var $step2822 = 0;
var $ans2823 = D;
var $al2824 = L[1195];
try {
if(R.isActivationRecord($$resumer101)) {
$step2822 = $$resumer101.step;
$al2824 = $$resumer101.from;
$ans2823 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj2818 = $$resumer101.vars[0];
anf_array2819 = $$resumer101.vars[1];
anf_method_obj2787 = $$resumer101.vars[2];
anf_arg2788 = $$resumer101.vars[3];
anf_arg2789 = $$resumer101.vars[4];
anf_method_obj2793 = $$resumer101.vars[5];
anf_method_obj2799 = $$resumer101.vars[6];
anf_method_obj2814 = $$resumer101.vars[7];
anf_arg2815 = $$resumer101.vars[8];
anf_method_obj2810 = $$resumer101.vars[9];
anf_arg2811 = $$resumer101.vars[10];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2822) {
case 0: $al2824 = L[1195];
var anf_method_obj2818 = G(ED5,"sequence",L[1195]);
$al2824 = L[1196];
var anf_array2819 = R.makeArrayN((6));
$al2824 = L[1197];
var anf_method_obj2787 = G(ED5,"para",L[1197]);
$step2822 = 1;
$al2824 = L[1198];
$field2825 = R.getColonFieldLoc(ED5,"text",L[1198]);
if(R.isMethod($field2825)) {
$ans2823 = $field2825.full_meth(ED5,("A "));
} else {
if(!(R.isFunction($field2825))) {
R.ffi.throwNonFunApp(L[1198],$field2825);
}
$ans2823 = $field2825.app(("A "));
}
break;
case 1: var anf_arg2788 = $ans2823;
$al2824 = L[1199];
var anf_arg2784 = G(self2462,"opname",L[1199]);
$step2822 = 2;
$al2824 = L[1200];
$field2826 = R.getColonFieldLoc(ED5,"code",L[1200]);
if(R.isMethod($field2826)) {
$ans2823 = $field2826.full_meth(ED5,anf_arg2784);
} else {
if(!(R.isFunction($field2826))) {
R.ffi.throwNonFunApp(L[1200],$field2826);
}
$ans2823 = $field2826.app(anf_arg2784);
}
break;
case 2: var anf_arg2789 = $ans2823;
$step2822 = 3;
$al2824 = L[1201];
$field2827 = R.getColonFieldLoc(ED5,"text",L[1201]);
if(R.isMethod($field2827)) {
$ans2823 = $field2827.full_meth(ED5,(" expression errored."));
} else {
if(!(R.isFunction($field2827))) {
R.ffi.throwNonFunApp(L[1201],$field2827);
}
$ans2823 = $field2827.app((" expression errored."));
}
break;
case 3: var anf_arg2790 = $ans2823;
$step2822 = 4;
$al2824 = L[1197];
$field2828 = R.getColonFieldLoc(anf_method_obj2787,"make3",L[1197]);
if(R.isMethod($field2828)) {
$ans2823 = $field2828.full_meth(anf_method_obj2787,anf_arg2788,anf_arg2789,anf_arg2790);
} else {
if(!(R.isFunction($field2828))) {
R.ffi.throwNonFunApp(L[1197],$field2828);
}
$ans2823 = $field2828.app(anf_arg2788,anf_arg2789,anf_arg2790);
}
break;
case 4: anf_array2819[0] = $ans2823;
$al2824 = L[1202];
var anf_method_obj2793 = G(ED5,"para",L[1202]);
$step2822 = 5;
$al2824 = L[1203];
$field2829 = R.getColonFieldLoc(ED5,"text",L[1203]);
if(R.isMethod($field2829)) {
$ans2823 = $field2829.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field2829))) {
R.ffi.throwNonFunApp(L[1203],$field2829);
}
$ans2823 = $field2829.app(("The left side was:"));
}
break;
case 5: var anf_arg2794 = $ans2823;
$step2822 = 6;
$al2824 = L[1202];
$field2830 = R.getColonFieldLoc(anf_method_obj2793,"make1",L[1202]);
if(R.isMethod($field2830)) {
$ans2823 = $field2830.full_meth(anf_method_obj2793,anf_arg2794);
} else {
if(!(R.isFunction($field2830))) {
R.ffi.throwNonFunApp(L[1202],$field2830);
}
$ans2823 = $field2830.app(anf_arg2794);
}
break;
case 6: anf_array2819[1] = $ans2823;
$al2824 = L[1204];
var anf_arg2796 = G(self2462,"val1",L[1204]);
$step2822 = 7;
$al2824 = L[1205];
$field2831 = R.getColonFieldLoc(ED5,"embed",L[1205]);
if(R.isMethod($field2831)) {
$ans2823 = $field2831.full_meth(ED5,anf_arg2796);
} else {
if(!(R.isFunction($field2831))) {
R.ffi.throwNonFunApp(L[1205],$field2831);
}
$ans2823 = $field2831.app(anf_arg2796);
}
break;
case 7: anf_array2819[2] = $ans2823;
$al2824 = L[1206];
var anf_method_obj2799 = G(ED5,"para",L[1206]);
$step2822 = 8;
$al2824 = L[1207];
$field2832 = R.getColonFieldLoc(ED5,"text",L[1207]);
if(R.isMethod($field2832)) {
$ans2823 = $field2832.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field2832))) {
R.ffi.throwNonFunApp(L[1207],$field2832);
}
$ans2823 = $field2832.app(("The right side was:"));
}
break;
case 8: var anf_arg2800 = $ans2823;
$step2822 = 9;
$al2824 = L[1206];
$field2833 = R.getColonFieldLoc(anf_method_obj2799,"make1",L[1206]);
if(R.isMethod($field2833)) {
$ans2823 = $field2833.full_meth(anf_method_obj2799,anf_arg2800);
} else {
if(!(R.isFunction($field2833))) {
R.ffi.throwNonFunApp(L[1206],$field2833);
}
$ans2823 = $field2833.app(anf_arg2800);
}
break;
case 9: anf_array2819[3] = $ans2823;
$al2824 = L[1208];
var anf_arg2802 = G(self2462,"val2",L[1208]);
$step2822 = 10;
$al2824 = L[1209];
$field2834 = R.getColonFieldLoc(ED5,"embed",L[1209]);
if(R.isMethod($field2834)) {
$ans2823 = $field2834.full_meth(ED5,anf_arg2802);
} else {
if(!(R.isFunction($field2834))) {
R.ffi.throwNonFunApp(L[1209],$field2834);
}
$ans2823 = $field2834.app(anf_arg2802);
}
break;
case 10: anf_array2819[4] = $ans2823;
$al2824 = L[1210];
var anf_method_obj2814 = G(ED5,"para",L[1210]);
$al2824 = L[1211];
var anf_arg2804 = G(self2462,"opname",L[1211]);
$step2822 = 11;
$al2824 = L[1217];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2824,_plus1);
}
$ans2823 = _plus1.app(("The "),anf_arg2804);
break;
case 11: var anf_arg2805 = $ans2823;
$step2822 = 12;
$al2824 = L[1216];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2824,_plus1);
}
$ans2823 = _plus1.app(anf_arg2805,(" operator expects to be given:"));
break;
case 12: var anf_arg2806 = $ans2823;
$step2822 = 13;
$al2824 = L[1212];
$field2835 = R.getColonFieldLoc(ED5,"text",L[1212]);
if(R.isMethod($field2835)) {
$ans2823 = $field2835.full_meth(ED5,anf_arg2806);
} else {
if(!(R.isFunction($field2835))) {
R.ffi.throwNonFunApp(L[1212],$field2835);
}
$ans2823 = $field2835.app(anf_arg2806);
}
break;
case 13: var anf_arg2815 = $ans2823;
$al2824 = L[1213];
var anf_method_obj2810 = G(ED5,"bulleted",L[1213]);
$step2822 = 14;
$al2824 = L[1214];
$field2836 = R.getColonFieldLoc(ED5,"text",L[1214]);
if(R.isMethod($field2836)) {
$ans2823 = $field2836.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2836))) {
R.ffi.throwNonFunApp(L[1214],$field2836);
}
$ans2823 = $field2836.app(("two Numbers, or"));
}
break;
case 14: var anf_arg2811 = $ans2823;
$step2822 = 15;
$al2824 = L[1215];
$field2837 = R.getColonFieldLoc(ED5,"text",L[1215]);
if(R.isMethod($field2837)) {
$ans2823 = $field2837.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2837))) {
R.ffi.throwNonFunApp(L[1215],$field2837);
}
$ans2823 = $field2837.app(("two Strings"));
}
break;
case 15: var anf_arg2812 = $ans2823;
$step2822 = 16;
$al2824 = L[1213];
$field2838 = R.getColonFieldLoc(anf_method_obj2810,"make2",L[1213]);
if(R.isMethod($field2838)) {
$ans2823 = $field2838.full_meth(anf_method_obj2810,anf_arg2811,anf_arg2812);
} else {
if(!(R.isFunction($field2838))) {
R.ffi.throwNonFunApp(L[1213],$field2838);
}
$ans2823 = $field2838.app(anf_arg2811,anf_arg2812);
}
break;
case 16: var anf_arg2816 = $ans2823;
$step2822 = 17;
$al2824 = L[1210];
$field2839 = R.getColonFieldLoc(anf_method_obj2814,"make2",L[1210]);
if(R.isMethod($field2839)) {
$ans2823 = $field2839.full_meth(anf_method_obj2814,anf_arg2815,anf_arg2816);
} else {
if(!(R.isFunction($field2839))) {
R.ffi.throwNonFunApp(L[1210],$field2839);
}
$ans2823 = $field2839.app(anf_arg2815,anf_arg2816);
}
break;
case 17: anf_array2819[5] = $ans2823;
$step2822 = 18;
$al2824 = L[1195];
$field2840 = R.getColonFieldLoc(anf_method_obj2818,"make",L[1195]);
if(R.isMethod($field2840)) {
$ans2823 = $field2840.full_meth(anf_method_obj2818,anf_array2819);
} else {
if(!(R.isFunction($field2840))) {
R.ffi.throwNonFunApp(L[1195],$field2840);
}
$ans2823 = $field2840.app(anf_array2819);
}
break;
case 18: ++R.GAS;
return $ans2823;
default: throw "No case numbered " + $step2822 + " in $temp_branch2821";
}
}
} catch($e2841) {
if(R.isCont($e2841) && ($step2822 !== 18)) {
$e2841.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2824,$temp_branch2821,$step2822,[],[anf_method_obj2818,anf_array2819,anf_method_obj2787,anf_arg2788,anf_arg2789,anf_method_obj2793,anf_method_obj2799,anf_method_obj2814,anf_arg2815,anf_method_obj2810,anf_arg2811]);
}
if(R.isPyretException($e2841)) {
$e2841.pyretStack.push($al2824);
}
throw $e2841;
}
};
$ans2466 = cases2468.$app_fields($temp_branch2821,[]);
break;
case 5: $step2460 = 6;
$al2467 = L[1193];
$ans2466 = R.throwNoCasesMatched(L[1193],cases2468);
break;
case 6: var anf_arg2844 = $ans2466;
$step2460 = 7;
$al2467 = L[1084];
$field2845 = R.getColonFieldLoc(anf_method_obj2843,"make1",L[1084]);
if(R.isMethod($field2845)) {
$ans2466 = $field2845.full_meth(anf_method_obj2843,anf_arg2844);
} else {
if(!(R.isFunction($field2845))) {
R.ffi.throwNonFunApp(L[1084],$field2845);
}
$ans2466 = $field2845.app(anf_arg2844);
}
break;
case 7: ++R.GAS;
return $ans2466;
default: throw "No case numbered " + $step2460 + " in $temp_full2461";
}
}
} catch($e2846) {
if(R.isCont($e2846) && ($step2460 !== 7)) {
$e2846.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2467,$temp_full2461,$step2460,[self2462,maybe$stack$loc2463,src$available2464,maybe$ast2465],[anf_method_obj2843,cases2468]);
}
if(R.isPyretException($e2846)) {
$e2846.pyretStack.push($al2467);
}
throw $e2846;
}
};
var anf_variant_member6333 = R.makeMethod3($temp_full2461,"render-fancy-reason");
var $temp_full2848 = function($self2849) {
var $step2847 = 0;
var $ans2850 = D;
var $al2851 = L[1270];
try {
if(R.isActivationRecord($self2849)) {
$step2847 = $self2849.step;
$al2851 = $self2849.from;
$ans2850 = $self2849.ans;
self2849 = $self2849.args[0];
anf_method_obj2931 = $self2849.vars[0];
anf_arg2928 = $self2849.vars[1];
anf_method_obj2925 = $self2849.vars[2];
anf_array2926 = $self2849.vars[3];
anf_method_obj2894 = $self2849.vars[4];
anf_arg2895 = $self2849.vars[5];
anf_arg2896 = $self2849.vars[6];
anf_method_obj2900 = $self2849.vars[7];
anf_method_obj2906 = $self2849.vars[8];
anf_method_obj2921 = $self2849.vars[9];
anf_arg2922 = $self2849.vars[10];
anf_method_obj2917 = $self2849.vars[11];
anf_arg2918 = $self2849.vars[12];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1270],1,$t);
}
var self2849 = $self2849;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2847) {
case 0: $al2851 = L[1223];
var anf_method_obj2931 = G(ED5,"error",L[1223]);
var $temp_lam2853 = function($loc2854) {
var $step2852 = 0;
var $ans2855 = D;
var $al2856 = L[1245];
try {
if(R.isActivationRecord($loc2854)) {
$step2852 = $loc2854.step;
$al2856 = $loc2854.from;
$ans2855 = $loc2854.ans;
loc2854 = $loc2854.args[0];
anf_method_obj2886 = $loc2854.vars[0];
anf_array2887 = $loc2854.vars[1];
anf_fun2858 = $loc2854.vars[2];
anf_method_obj2861 = $loc2854.vars[3];
anf_method_obj2867 = $loc2854.vars[4];
anf_method_obj2882 = $loc2854.vars[5];
anf_arg2883 = $loc2854.vars[6];
anf_method_obj2878 = $loc2854.vars[7];
anf_arg2879 = $loc2854.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1245],1,$t);
}
var loc2854 = $loc2854;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2852) {
case 0: $al2856 = L[1224];
var anf_method_obj2886 = G(ED5,"sequence",L[1224]);
$al2856 = L[1225];
var anf_array2887 = R.makeArrayN((6));
var anf_fun2858 = ed$simple$intro95.$var;
$al2856 = L[1226];
var anf_arg2857 = G(self2849,"opname",L[1226]);
$step2852 = 1;
$al2856 = L[1244];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2856,_plus1);
}
$ans2855 = _plus1.app(anf_arg2857,(" expression"));
break;
case 1: var anf_arg2859 = $ans2855;
$step2852 = 2;
$al2856 = L[1243];
if(!(R.isFunction(anf_fun2858))) {
R.ffi.throwNonFunApp($al2856,anf_fun2858);
}
$ans2855 = anf_fun2858.app(anf_arg2859,loc2854);
break;
case 2: anf_array2887[0] = $ans2855;
$al2856 = L[1227];
var anf_method_obj2861 = G(ED5,"para",L[1227]);
$step2852 = 3;
$al2856 = L[1228];
$field2860 = R.getColonFieldLoc(ED5,"text",L[1228]);
if(R.isMethod($field2860)) {
$ans2855 = $field2860.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field2860))) {
R.ffi.throwNonFunApp(L[1228],$field2860);
}
$ans2855 = $field2860.app(("The left side was:"));
}
break;
case 3: var anf_arg2862 = $ans2855;
$step2852 = 4;
$al2856 = L[1227];
$field2863 = R.getColonFieldLoc(anf_method_obj2861,"make1",L[1227]);
if(R.isMethod($field2863)) {
$ans2855 = $field2863.full_meth(anf_method_obj2861,anf_arg2862);
} else {
if(!(R.isFunction($field2863))) {
R.ffi.throwNonFunApp(L[1227],$field2863);
}
$ans2855 = $field2863.app(anf_arg2862);
}
break;
case 4: anf_array2887[1] = $ans2855;
$al2856 = L[1229];
var anf_arg2864 = G(self2849,"val1",L[1229]);
$step2852 = 5;
$al2856 = L[1230];
$field2865 = R.getColonFieldLoc(ED5,"embed",L[1230]);
if(R.isMethod($field2865)) {
$ans2855 = $field2865.full_meth(ED5,anf_arg2864);
} else {
if(!(R.isFunction($field2865))) {
R.ffi.throwNonFunApp(L[1230],$field2865);
}
$ans2855 = $field2865.app(anf_arg2864);
}
break;
case 5: anf_array2887[2] = $ans2855;
$al2856 = L[1231];
var anf_method_obj2867 = G(ED5,"para",L[1231]);
$step2852 = 6;
$al2856 = L[1232];
$field2866 = R.getColonFieldLoc(ED5,"text",L[1232]);
if(R.isMethod($field2866)) {
$ans2855 = $field2866.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field2866))) {
R.ffi.throwNonFunApp(L[1232],$field2866);
}
$ans2855 = $field2866.app(("The right side was:"));
}
break;
case 6: var anf_arg2868 = $ans2855;
$step2852 = 7;
$al2856 = L[1231];
$field2869 = R.getColonFieldLoc(anf_method_obj2867,"make1",L[1231]);
if(R.isMethod($field2869)) {
$ans2855 = $field2869.full_meth(anf_method_obj2867,anf_arg2868);
} else {
if(!(R.isFunction($field2869))) {
R.ffi.throwNonFunApp(L[1231],$field2869);
}
$ans2855 = $field2869.app(anf_arg2868);
}
break;
case 7: anf_array2887[3] = $ans2855;
$al2856 = L[1233];
var anf_arg2870 = G(self2849,"val2",L[1233]);
$step2852 = 8;
$al2856 = L[1234];
$field2871 = R.getColonFieldLoc(ED5,"embed",L[1234]);
if(R.isMethod($field2871)) {
$ans2855 = $field2871.full_meth(ED5,anf_arg2870);
} else {
if(!(R.isFunction($field2871))) {
R.ffi.throwNonFunApp(L[1234],$field2871);
}
$ans2855 = $field2871.app(anf_arg2870);
}
break;
case 8: anf_array2887[4] = $ans2855;
$al2856 = L[1235];
var anf_method_obj2882 = G(ED5,"para",L[1235]);
$al2856 = L[1236];
var anf_arg2872 = G(self2849,"opname",L[1236]);
$step2852 = 9;
$al2856 = L[1242];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2856,_plus1);
}
$ans2855 = _plus1.app(("The "),anf_arg2872);
break;
case 9: var anf_arg2873 = $ans2855;
$step2852 = 10;
$al2856 = L[1241];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2856,_plus1);
}
$ans2855 = _plus1.app(anf_arg2873,(" operator expects to be given:"));
break;
case 10: var anf_arg2874 = $ans2855;
$step2852 = 11;
$al2856 = L[1237];
$field2875 = R.getColonFieldLoc(ED5,"text",L[1237]);
if(R.isMethod($field2875)) {
$ans2855 = $field2875.full_meth(ED5,anf_arg2874);
} else {
if(!(R.isFunction($field2875))) {
R.ffi.throwNonFunApp(L[1237],$field2875);
}
$ans2855 = $field2875.app(anf_arg2874);
}
break;
case 11: var anf_arg2883 = $ans2855;
$al2856 = L[1238];
var anf_method_obj2878 = G(ED5,"bulleted",L[1238]);
$step2852 = 12;
$al2856 = L[1239];
$field2876 = R.getColonFieldLoc(ED5,"text",L[1239]);
if(R.isMethod($field2876)) {
$ans2855 = $field2876.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2876))) {
R.ffi.throwNonFunApp(L[1239],$field2876);
}
$ans2855 = $field2876.app(("two Numbers, or"));
}
break;
case 12: var anf_arg2879 = $ans2855;
$step2852 = 13;
$al2856 = L[1240];
$field2877 = R.getColonFieldLoc(ED5,"text",L[1240]);
if(R.isMethod($field2877)) {
$ans2855 = $field2877.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2877))) {
R.ffi.throwNonFunApp(L[1240],$field2877);
}
$ans2855 = $field2877.app(("two Strings"));
}
break;
case 13: var anf_arg2880 = $ans2855;
$step2852 = 14;
$al2856 = L[1238];
$field2881 = R.getColonFieldLoc(anf_method_obj2878,"make2",L[1238]);
if(R.isMethod($field2881)) {
$ans2855 = $field2881.full_meth(anf_method_obj2878,anf_arg2879,anf_arg2880);
} else {
if(!(R.isFunction($field2881))) {
R.ffi.throwNonFunApp(L[1238],$field2881);
}
$ans2855 = $field2881.app(anf_arg2879,anf_arg2880);
}
break;
case 14: var anf_arg2884 = $ans2855;
$step2852 = 15;
$al2856 = L[1235];
$field2885 = R.getColonFieldLoc(anf_method_obj2882,"make2",L[1235]);
if(R.isMethod($field2885)) {
$ans2855 = $field2885.full_meth(anf_method_obj2882,anf_arg2883,anf_arg2884);
} else {
if(!(R.isFunction($field2885))) {
R.ffi.throwNonFunApp(L[1235],$field2885);
}
$ans2855 = $field2885.app(anf_arg2883,anf_arg2884);
}
break;
case 15: anf_array2887[5] = $ans2855;
$step2852 = 16;
$al2856 = L[1224];
$field2888 = R.getColonFieldLoc(anf_method_obj2886,"make",L[1224]);
if(R.isMethod($field2888)) {
$ans2855 = $field2888.full_meth(anf_method_obj2886,anf_array2887);
} else {
if(!(R.isFunction($field2888))) {
R.ffi.throwNonFunApp(L[1224],$field2888);
}
$ans2855 = $field2888.app(anf_array2887);
}
break;
case 16: ++R.GAS;
return $ans2855;
default: throw "No case numbered " + $step2852 + " in $temp_lam2853";
}
}
} catch($e2889) {
if(R.isCont($e2889) && ($step2852 !== 16)) {
$e2889.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2856,$temp_lam2853,$step2852,[loc2854],[anf_method_obj2886,anf_array2887,anf_fun2858,anf_method_obj2861,anf_method_obj2867,anf_method_obj2882,anf_arg2883,anf_method_obj2878,anf_arg2879]);
}
if(R.isPyretException($e2889)) {
$e2889.pyretStack.push($al2856);
}
throw $e2889;
}
};
var anf_arg2928 = R.makeFunction($temp_lam2853,"");
$al2851 = L[1246];
var anf_method_obj2925 = G(ED5,"sequence",L[1246]);
$al2851 = L[1247];
var anf_array2926 = R.makeArrayN((6));
$al2851 = L[1248];
var anf_method_obj2894 = G(ED5,"para",L[1248]);
$step2847 = 1;
$al2851 = L[1249];
$field2890 = R.getColonFieldLoc(ED5,"text",L[1249]);
if(R.isMethod($field2890)) {
$ans2850 = $field2890.full_meth(ED5,("A "));
} else {
if(!(R.isFunction($field2890))) {
R.ffi.throwNonFunApp(L[1249],$field2890);
}
$ans2850 = $field2890.app(("A "));
}
break;
case 1: var anf_arg2895 = $ans2850;
$al2851 = L[1250];
var anf_arg2891 = G(self2849,"opname",L[1250]);
$step2847 = 2;
$al2851 = L[1251];
$field2892 = R.getColonFieldLoc(ED5,"code",L[1251]);
if(R.isMethod($field2892)) {
$ans2850 = $field2892.full_meth(ED5,anf_arg2891);
} else {
if(!(R.isFunction($field2892))) {
R.ffi.throwNonFunApp(L[1251],$field2892);
}
$ans2850 = $field2892.app(anf_arg2891);
}
break;
case 2: var anf_arg2896 = $ans2850;
$step2847 = 3;
$al2851 = L[1252];
$field2893 = R.getColonFieldLoc(ED5,"text",L[1252]);
if(R.isMethod($field2893)) {
$ans2850 = $field2893.full_meth(ED5,(" expression errored."));
} else {
if(!(R.isFunction($field2893))) {
R.ffi.throwNonFunApp(L[1252],$field2893);
}
$ans2850 = $field2893.app((" expression errored."));
}
break;
case 3: var anf_arg2897 = $ans2850;
$step2847 = 4;
$al2851 = L[1248];
$field2898 = R.getColonFieldLoc(anf_method_obj2894,"make3",L[1248]);
if(R.isMethod($field2898)) {
$ans2850 = $field2898.full_meth(anf_method_obj2894,anf_arg2895,anf_arg2896,anf_arg2897);
} else {
if(!(R.isFunction($field2898))) {
R.ffi.throwNonFunApp(L[1248],$field2898);
}
$ans2850 = $field2898.app(anf_arg2895,anf_arg2896,anf_arg2897);
}
break;
case 4: anf_array2926[0] = $ans2850;
$al2851 = L[1253];
var anf_method_obj2900 = G(ED5,"para",L[1253]);
$step2847 = 5;
$al2851 = L[1254];
$field2899 = R.getColonFieldLoc(ED5,"text",L[1254]);
if(R.isMethod($field2899)) {
$ans2850 = $field2899.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field2899))) {
R.ffi.throwNonFunApp(L[1254],$field2899);
}
$ans2850 = $field2899.app(("The left side was:"));
}
break;
case 5: var anf_arg2901 = $ans2850;
$step2847 = 6;
$al2851 = L[1253];
$field2902 = R.getColonFieldLoc(anf_method_obj2900,"make1",L[1253]);
if(R.isMethod($field2902)) {
$ans2850 = $field2902.full_meth(anf_method_obj2900,anf_arg2901);
} else {
if(!(R.isFunction($field2902))) {
R.ffi.throwNonFunApp(L[1253],$field2902);
}
$ans2850 = $field2902.app(anf_arg2901);
}
break;
case 6: anf_array2926[1] = $ans2850;
$al2851 = L[1255];
var anf_arg2903 = G(self2849,"val1",L[1255]);
$step2847 = 7;
$al2851 = L[1256];
$field2904 = R.getColonFieldLoc(ED5,"embed",L[1256]);
if(R.isMethod($field2904)) {
$ans2850 = $field2904.full_meth(ED5,anf_arg2903);
} else {
if(!(R.isFunction($field2904))) {
R.ffi.throwNonFunApp(L[1256],$field2904);
}
$ans2850 = $field2904.app(anf_arg2903);
}
break;
case 7: anf_array2926[2] = $ans2850;
$al2851 = L[1257];
var anf_method_obj2906 = G(ED5,"para",L[1257]);
$step2847 = 8;
$al2851 = L[1258];
$field2905 = R.getColonFieldLoc(ED5,"text",L[1258]);
if(R.isMethod($field2905)) {
$ans2850 = $field2905.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field2905))) {
R.ffi.throwNonFunApp(L[1258],$field2905);
}
$ans2850 = $field2905.app(("The right side was:"));
}
break;
case 8: var anf_arg2907 = $ans2850;
$step2847 = 9;
$al2851 = L[1257];
$field2908 = R.getColonFieldLoc(anf_method_obj2906,"make1",L[1257]);
if(R.isMethod($field2908)) {
$ans2850 = $field2908.full_meth(anf_method_obj2906,anf_arg2907);
} else {
if(!(R.isFunction($field2908))) {
R.ffi.throwNonFunApp(L[1257],$field2908);
}
$ans2850 = $field2908.app(anf_arg2907);
}
break;
case 9: anf_array2926[3] = $ans2850;
$al2851 = L[1259];
var anf_arg2909 = G(self2849,"val2",L[1259]);
$step2847 = 10;
$al2851 = L[1260];
$field2910 = R.getColonFieldLoc(ED5,"embed",L[1260]);
if(R.isMethod($field2910)) {
$ans2850 = $field2910.full_meth(ED5,anf_arg2909);
} else {
if(!(R.isFunction($field2910))) {
R.ffi.throwNonFunApp(L[1260],$field2910);
}
$ans2850 = $field2910.app(anf_arg2909);
}
break;
case 10: anf_array2926[4] = $ans2850;
$al2851 = L[1261];
var anf_method_obj2921 = G(ED5,"para",L[1261]);
$al2851 = L[1262];
var anf_arg2911 = G(self2849,"opname",L[1262]);
$step2847 = 11;
$al2851 = L[1269];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2851,_plus1);
}
$ans2850 = _plus1.app(("The "),anf_arg2911);
break;
case 11: var anf_arg2912 = $ans2850;
$step2847 = 12;
$al2851 = L[1268];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2851,_plus1);
}
$ans2850 = _plus1.app(anf_arg2912,(" operator expects to be given:"));
break;
case 12: var anf_arg2913 = $ans2850;
$step2847 = 13;
$al2851 = L[1263];
$field2914 = R.getColonFieldLoc(ED5,"text",L[1263]);
if(R.isMethod($field2914)) {
$ans2850 = $field2914.full_meth(ED5,anf_arg2913);
} else {
if(!(R.isFunction($field2914))) {
R.ffi.throwNonFunApp(L[1263],$field2914);
}
$ans2850 = $field2914.app(anf_arg2913);
}
break;
case 13: var anf_arg2922 = $ans2850;
$al2851 = L[1264];
var anf_method_obj2917 = G(ED5,"bulleted",L[1264]);
$step2847 = 14;
$al2851 = L[1265];
$field2915 = R.getColonFieldLoc(ED5,"text",L[1265]);
if(R.isMethod($field2915)) {
$ans2850 = $field2915.full_meth(ED5,("two Numbers, or"));
} else {
if(!(R.isFunction($field2915))) {
R.ffi.throwNonFunApp(L[1265],$field2915);
}
$ans2850 = $field2915.app(("two Numbers, or"));
}
break;
case 14: var anf_arg2918 = $ans2850;
$step2847 = 15;
$al2851 = L[1266];
$field2916 = R.getColonFieldLoc(ED5,"text",L[1266]);
if(R.isMethod($field2916)) {
$ans2850 = $field2916.full_meth(ED5,("two Strings"));
} else {
if(!(R.isFunction($field2916))) {
R.ffi.throwNonFunApp(L[1266],$field2916);
}
$ans2850 = $field2916.app(("two Strings"));
}
break;
case 15: var anf_arg2919 = $ans2850;
$step2847 = 16;
$al2851 = L[1264];
$field2920 = R.getColonFieldLoc(anf_method_obj2917,"make2",L[1264]);
if(R.isMethod($field2920)) {
$ans2850 = $field2920.full_meth(anf_method_obj2917,anf_arg2918,anf_arg2919);
} else {
if(!(R.isFunction($field2920))) {
R.ffi.throwNonFunApp(L[1264],$field2920);
}
$ans2850 = $field2920.app(anf_arg2918,anf_arg2919);
}
break;
case 16: var anf_arg2923 = $ans2850;
$step2847 = 17;
$al2851 = L[1261];
$field2924 = R.getColonFieldLoc(anf_method_obj2921,"make2",L[1261]);
if(R.isMethod($field2924)) {
$ans2850 = $field2924.full_meth(anf_method_obj2921,anf_arg2922,anf_arg2923);
} else {
if(!(R.isFunction($field2924))) {
R.ffi.throwNonFunApp(L[1261],$field2924);
}
$ans2850 = $field2924.app(anf_arg2922,anf_arg2923);
}
break;
case 17: anf_array2926[5] = $ans2850;
$step2847 = 18;
$al2851 = L[1246];
$field2927 = R.getColonFieldLoc(anf_method_obj2925,"make",L[1246]);
if(R.isMethod($field2927)) {
$ans2850 = $field2927.full_meth(anf_method_obj2925,anf_array2926);
} else {
if(!(R.isFunction($field2927))) {
R.ffi.throwNonFunApp(L[1246],$field2927);
}
$ans2850 = $field2927.app(anf_array2926);
}
break;
case 18: var anf_arg2929 = $ans2850;
$step2847 = 19;
$al2851 = L[1267];
$field2930 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[1267]);
if(R.isMethod($field2930)) {
$ans2850 = $field2930.full_meth(ED5,(0),(false),anf_arg2928,anf_arg2929);
} else {
if(!(R.isFunction($field2930))) {
R.ffi.throwNonFunApp(L[1267],$field2930);
}
$ans2850 = $field2930.app((0),(false),anf_arg2928,anf_arg2929);
}
break;
case 19: var anf_arg2932 = $ans2850;
$step2847 = 20;
$al2851 = L[1223];
$field2933 = R.getColonFieldLoc(anf_method_obj2931,"make1",L[1223]);
if(R.isMethod($field2933)) {
$ans2850 = $field2933.full_meth(anf_method_obj2931,anf_arg2932);
} else {
if(!(R.isFunction($field2933))) {
R.ffi.throwNonFunApp(L[1223],$field2933);
}
$ans2850 = $field2933.app(anf_arg2932);
}
break;
case 20: ++R.GAS;
return $ans2850;
default: throw "No case numbered " + $step2847 + " in $temp_full2848";
}
}
} catch($e2934) {
if(R.isCont($e2934) && ($step2847 !== 20)) {
$e2934.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2851,$temp_full2848,$step2847,[self2849],[anf_method_obj2931,anf_arg2928,anf_method_obj2925,anf_array2926,anf_method_obj2894,anf_arg2895,anf_arg2896,anf_method_obj2900,anf_method_obj2906,anf_method_obj2921,anf_arg2922,anf_method_obj2917,anf_arg2918]);
}
if(R.isPyretException($e2934)) {
$e2934.pyretStack.push($al2851);
}
throw $e2934;
}
};
var anf_variant_member6334 = R.makeMethod0($temp_full2848,"render-reason");
var $temp_full2936 = function($self2937,$maybe$stack$loc2938,$src$available2939,$maybe$ast2940) {
var $step2935 = 0;
var $ans2941 = D;
var $al2942 = L[1394];
try {
if(R.isActivationRecord($self2937)) {
$step2935 = $self2937.step;
$al2942 = $self2937.from;
$ans2941 = $self2937.ans;
self2937 = $self2937.args[0];
maybe$stack$loc2938 = $self2937.args[1];
src$available2939 = $self2937.args[2];
maybe$ast2940 = $self2937.args[3];
anf_method_obj3256 = $self2937.vars[0];
cases2943 = $self2937.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1394],4,$t);
}
var self2937 = $self2937;
var maybe$stack$loc2938 = $maybe$stack$loc2938;
var src$available2939 = $src$available2939;
var maybe$ast2940 = $maybe$ast2940;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2935) {
case 0: $al2942 = L[1271];
var anf_method_obj3256 = G(ED5,"error",L[1271]);
$step2935 = 1;
$al2942 = L[1393];
if(!(R.isFunction(maybe$stack$loc2938))) {
R.ffi.throwNonFunApp($al2942,maybe$stack$loc2938);
}
$ans2941 = maybe$stack$loc2938.app((0),(false));
break;
case 1: var cases2943 = $ans2941;
$step2935 = 2;
$al2942 = L[1392];
R._checkAnn(L[1392],R.getDotAnn(L[1392],"O",O13,"Option"),cases2943);
break;
case 2: var $cases_dispatch3255 = {"some":3,
"none":4};
$al2942 = L[1368];
$step2935 = $cases_dispatch3255[cases2943.$name] || 5;
break;
case 3: if(cases2943.$arity !== 1) {
if(cases2943.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1367],1,cases2943.$arity,L[1368]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1367],true,L[1368]);
}
}
$step2935 = 6;
$al2942 = L[1369];
var $temp_branch3115 = function($loc2944) {
var $step3116 = 0;
var $ans3117 = D;
var $al3118 = L[1272];
try {
if(R.isActivationRecord($loc2944)) {
$step3116 = $loc2944.step;
$al3118 = $loc2944.from;
$ans3117 = $loc2944.ans;
loc2944 = $loc2944.args[0];
anf_method_obj2969 = $loc2944.vars[0];
anf_array2970 = $loc2944.vars[1];
anf_fun2948 = $loc2944.vars[2];
anf_method_obj2951 = $loc2944.vars[3];
anf_method_obj2957 = $loc2944.vars[4];
anf_method_obj2966 = $loc2944.vars[5];
cases2973 = $loc2944.vars[6];
anf_method_obj3110 = $loc2944.vars[7];
anf_array3111 = $loc2944.vars[8];
anf_fun3089 = $loc2944.vars[9];
anf_method_obj3092 = $loc2944.vars[10];
anf_method_obj3098 = $loc2944.vars[11];
anf_method_obj3107 = $loc2944.vars[12];
} else {
var loc2944 = $loc2944;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3116) {
case 0: $step3116 = 1;
$al3118 = L[1272];
$field3119 = R.getColonFieldLoc(loc2944,"is-builtin",L[1272]);
if(R.isMethod($field3119)) {
$ans3117 = $field3119.full_meth(loc2944);
} else {
if(!(R.isFunction($field3119))) {
R.ffi.throwNonFunApp(L[1272],$field3119);
}
$ans3117 = $field3119.app();
}
break;
case 1: var anf_arg2946 = $ans3117;
$al3118 = L[1272];
var anf_if3114 = R.checkWrapBoolean(anf_arg2946);
$step3116 = R.isPyretTrue(anf_if3114)?2:15;
break;
case 2: $al3118 = L[1273];
var anf_method_obj2969 = G(ED5,"sequence",L[1273]);
$al3118 = L[1274];
var anf_array2970 = R.makeArrayN((6));
var anf_fun2948 = ed$simple$intro95.$var;
$al3118 = L[1275];
var anf_arg2947 = G(self2937,"opname",L[1275]);
$step3116 = 3;
$al3118 = L[1290];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3118,_plus1);
}
$ans3117 = _plus1.app(anf_arg2947,(" expression"));
break;
case 3: var anf_arg2949 = $ans3117;
$step3116 = 4;
$al3118 = L[1289];
if(!(R.isFunction(anf_fun2948))) {
R.ffi.throwNonFunApp($al3118,anf_fun2948);
}
$ans3117 = anf_fun2948.app(anf_arg2949,loc2944);
break;
case 4: anf_array2970[0] = $ans3117;
$al3118 = L[1276];
var anf_method_obj2951 = G(ED5,"para",L[1276]);
$step3116 = 5;
$al3118 = L[1277];
$field3120 = R.getColonFieldLoc(ED5,"text",L[1277]);
if(R.isMethod($field3120)) {
$ans3117 = $field3120.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field3120))) {
R.ffi.throwNonFunApp(L[1277],$field3120);
}
$ans3117 = $field3120.app(("The left side was:"));
}
break;
case 5: var anf_arg2952 = $ans3117;
$step3116 = 6;
$al3118 = L[1276];
$field3121 = R.getColonFieldLoc(anf_method_obj2951,"make1",L[1276]);
if(R.isMethod($field3121)) {
$ans3117 = $field3121.full_meth(anf_method_obj2951,anf_arg2952);
} else {
if(!(R.isFunction($field3121))) {
R.ffi.throwNonFunApp(L[1276],$field3121);
}
$ans3117 = $field3121.app(anf_arg2952);
}
break;
case 6: anf_array2970[1] = $ans3117;
$al3118 = L[1278];
var anf_arg2954 = G(self2937,"val1",L[1278]);
$step3116 = 7;
$al3118 = L[1279];
$field3122 = R.getColonFieldLoc(ED5,"embed",L[1279]);
if(R.isMethod($field3122)) {
$ans3117 = $field3122.full_meth(ED5,anf_arg2954);
} else {
if(!(R.isFunction($field3122))) {
R.ffi.throwNonFunApp(L[1279],$field3122);
}
$ans3117 = $field3122.app(anf_arg2954);
}
break;
case 7: anf_array2970[2] = $ans3117;
$al3118 = L[1280];
var anf_method_obj2957 = G(ED5,"para",L[1280]);
$step3116 = 8;
$al3118 = L[1281];
$field3123 = R.getColonFieldLoc(ED5,"text",L[1281]);
if(R.isMethod($field3123)) {
$ans3117 = $field3123.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field3123))) {
R.ffi.throwNonFunApp(L[1281],$field3123);
}
$ans3117 = $field3123.app(("The right side was:"));
}
break;
case 8: var anf_arg2958 = $ans3117;
$step3116 = 9;
$al3118 = L[1280];
$field3124 = R.getColonFieldLoc(anf_method_obj2957,"make1",L[1280]);
if(R.isMethod($field3124)) {
$ans3117 = $field3124.full_meth(anf_method_obj2957,anf_arg2958);
} else {
if(!(R.isFunction($field3124))) {
R.ffi.throwNonFunApp(L[1280],$field3124);
}
$ans3117 = $field3124.app(anf_arg2958);
}
break;
case 9: anf_array2970[3] = $ans3117;
$al3118 = L[1282];
var anf_arg2960 = G(self2937,"val2",L[1282]);
$step3116 = 10;
$al3118 = L[1283];
$field3125 = R.getColonFieldLoc(ED5,"embed",L[1283]);
if(R.isMethod($field3125)) {
$ans3117 = $field3125.full_meth(ED5,anf_arg2960);
} else {
if(!(R.isFunction($field3125))) {
R.ffi.throwNonFunApp(L[1283],$field3125);
}
$ans3117 = $field3125.app(anf_arg2960);
}
break;
case 10: anf_array2970[4] = $ans3117;
$al3118 = L[1284];
var anf_method_obj2966 = G(ED5,"para",L[1284]);
$al3118 = L[1285];
var anf_arg2962 = G(self2937,"opname",L[1285]);
$step3116 = 11;
$al3118 = L[1288];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3118,_plus1);
}
$ans3117 = _plus1.app(("The "),anf_arg2962);
break;
case 11: var anf_arg2963 = $ans3117;
$step3116 = 12;
$al3118 = L[1287];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3118,_plus1);
}
$ans3117 = _plus1.app(anf_arg2963,(" operator expects to be given two Numbers."));
break;
case 12: var anf_arg2964 = $ans3117;
$step3116 = 13;
$al3118 = L[1286];
$field3126 = R.getColonFieldLoc(ED5,"text",L[1286]);
if(R.isMethod($field3126)) {
$ans3117 = $field3126.full_meth(ED5,anf_arg2964);
} else {
if(!(R.isFunction($field3126))) {
R.ffi.throwNonFunApp(L[1286],$field3126);
}
$ans3117 = $field3126.app(anf_arg2964);
}
break;
case 13: var anf_arg2967 = $ans3117;
$step3116 = 14;
$al3118 = L[1284];
$field3127 = R.getColonFieldLoc(anf_method_obj2966,"make1",L[1284]);
if(R.isMethod($field3127)) {
$ans3117 = $field3127.full_meth(anf_method_obj2966,anf_arg2967);
} else {
if(!(R.isFunction($field3127))) {
R.ffi.throwNonFunApp(L[1284],$field3127);
}
$ans3117 = $field3127.app(anf_arg2967);
}
break;
case 14: anf_array2970[5] = $ans3117;
$step3116 = 36;
$al3118 = L[1273];
$field3128 = R.getColonFieldLoc(anf_method_obj2969,"make",L[1273]);
if(R.isMethod($field3128)) {
$ans3117 = $field3128.full_meth(anf_method_obj2969,anf_array2970);
} else {
if(!(R.isFunction($field3128))) {
R.ffi.throwNonFunApp(L[1273],$field3128);
}
$ans3117 = $field3128.app(anf_array2970);
}
break;
case 15: $step3116 = 16;
$al3118 = L[1291];
if(!(R.isFunction(src$available2939))) {
R.ffi.throwNonFunApp($al3118,src$available2939);
}
$ans3117 = src$available2939.app(loc2944);
break;
case 16: var anf_arg2972 = $ans3117;
$al3118 = L[1291];
var anf_if3113 = R.checkWrapBoolean(anf_arg2972);
$step3116 = R.isPyretTrue(anf_if3113)?17:23;
break;
case 17: $step3116 = 18;
$al3118 = L[1348];
if(!(R.isFunction(maybe$ast2940))) {
R.ffi.throwNonFunApp($al3118,maybe$ast2940);
}
$ans3117 = maybe$ast2940.app(loc2944);
break;
case 18: var cases2973 = $ans3117;
$step3116 = 19;
$al3118 = L[1347];
R._checkAnn(L[1347],R.getDotAnn(L[1347],"O",O13,"Option"),cases2973);
break;
case 19: var $cases_dispatch3195 = {"some":20,
"none":21};
$al3118 = L[1324];
$step3116 = $cases_dispatch3195[cases2973.$name] || 22;
break;
case 20: if(cases2973.$arity !== 1) {
if(cases2973.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1323],1,cases2973.$arity,L[1324]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1323],true,L[1324]);
}
}
$step3116 = 36;
$al3118 = L[1325];
var $temp_branch3147 = function($ast2974) {
var $step3148 = 0;
var $ans3149 = D;
var $al3150 = L[1292];
try {
if(R.isActivationRecord($ast2974)) {
$step3148 = $ast2974.step;
$al3150 = $ast2974.from;
$ans3149 = $ast2974.ans;
ast2974 = $ast2974.args[0];
left$loc2984 = $ast2974.vars[0];
right$loc3000 = $ast2974.vars[1];
anf_method_obj3020 = $ast2974.vars[2];
anf_array3021 = $ast2974.vars[3];
anf_fun2978 = $ast2974.vars[4];
anf_method_obj2990 = $ast2974.vars[5];
anf_arg2991 = $ast2974.vars[6];
anf_arg2986 = $ast2974.vars[7];
anf_arg2992 = $ast2974.vars[8];
anf_method_obj3006 = $ast2974.vars[9];
anf_arg3007 = $ast2974.vars[10];
anf_arg3002 = $ast2974.vars[11];
anf_arg3008 = $ast2974.vars[12];
anf_method_obj3017 = $ast2974.vars[13];
} else {
var ast2974 = $ast2974;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3148) {
case 0: $al3150 = L[1292];
var anf_bracket2975 = G(ast2974,"left",L[1292]);
$al3150 = L[1293];
var left$loc2984 = G(anf_bracket2975,"l",L[1293]);
$al3150 = L[1294];
var anf_bracket2976 = G(ast2974,"right",L[1294]);
$al3150 = L[1295];
var right$loc3000 = G(anf_bracket2976,"l",L[1295]);
$al3150 = L[1296];
var anf_method_obj3020 = G(ED5,"sequence",L[1296]);
$al3150 = L[1297];
var anf_array3021 = R.makeArrayN((7));
var anf_fun2978 = ed$intro122.$var;
$al3150 = L[1298];
var anf_arg2977 = G(self2937,"opname",L[1298]);
$step3148 = 1;
$al3150 = L[1322];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3150,_plus1);
}
$ans3149 = _plus1.app(anf_arg2977,(" expression"));
break;
case 1: var anf_arg2979 = $ans3149;
$step3148 = 2;
$al3150 = L[1321];
if(!(R.isFunction(anf_fun2978))) {
R.ffi.throwNonFunApp($al3150,anf_fun2978);
}
$ans3149 = anf_fun2978.app(anf_arg2979,loc2944,(-1),(true));
break;
case 2: anf_array3021[0] = $ans3149;
$step3148 = 3;
$al3150 = L[1299];
$field3151 = R.getColonFieldLoc(ED5,"cmcode",L[1299]);
if(R.isMethod($field3151)) {
$ans3149 = $field3151.full_meth(ED5,loc2944);
} else {
if(!(R.isFunction($field3151))) {
R.ffi.throwNonFunApp(L[1299],$field3151);
}
$ans3149 = $field3151.app(loc2944);
}
break;
case 3: anf_array3021[1] = $ans3149;
$al3150 = L[1300];
var anf_method_obj2990 = G(ED5,"para",L[1300]);
$step3148 = 4;
$al3150 = L[1301];
$field3152 = R.getColonFieldLoc(ED5,"text",L[1301]);
if(R.isMethod($field3152)) {
$ans3149 = $field3152.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field3152))) {
R.ffi.throwNonFunApp(L[1301],$field3152);
}
$ans3149 = $field3152.app(("The "));
}
break;
case 4: var anf_arg2991 = $ans3149;
$step3148 = 5;
$al3150 = L[1302];
$field3153 = R.getColonFieldLoc(ED5,"text",L[1302]);
if(R.isMethod($field3153)) {
$ans3149 = $field3153.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field3153))) {
R.ffi.throwNonFunApp(L[1302],$field3153);
}
$ans3149 = $field3153.app(("left side"));
}
break;
case 5: var anf_arg2986 = $ans3149;
$al3150 = L[1303];
var anf_method_obj2983 = G(ED5,"locs",L[1303]);
$step3148 = 6;
$al3150 = L[1303];
$field3154 = R.getColonFieldLoc(anf_method_obj2983,"make1",L[1303]);
if(R.isMethod($field3154)) {
$ans3149 = $field3154.full_meth(anf_method_obj2983,left$loc2984);
} else {
if(!(R.isFunction($field3154))) {
R.ffi.throwNonFunApp(L[1303],$field3154);
}
$ans3149 = $field3154.app(left$loc2984);
}
break;
case 6: var anf_arg2987 = $ans3149;
$step3148 = 7;
$al3150 = L[1304];
$field3155 = R.getColonFieldLoc(ED5,"highlight",L[1304]);
if(R.isMethod($field3155)) {
$ans3149 = $field3155.full_meth(ED5,anf_arg2986,anf_arg2987,(0));
} else {
if(!(R.isFunction($field3155))) {
R.ffi.throwNonFunApp(L[1304],$field3155);
}
$ans3149 = $field3155.app(anf_arg2986,anf_arg2987,(0));
}
break;
case 7: var anf_arg2992 = $ans3149;
$step3148 = 8;
$al3150 = L[1305];
$field3156 = R.getColonFieldLoc(ED5,"text",L[1305]);
if(R.isMethod($field3156)) {
$ans3149 = $field3156.full_meth(ED5,(" was:"));
} else {
if(!(R.isFunction($field3156))) {
R.ffi.throwNonFunApp(L[1305],$field3156);
}
$ans3149 = $field3156.app((" was:"));
}
break;
case 8: var anf_arg2993 = $ans3149;
$step3148 = 9;
$al3150 = L[1300];
$field3157 = R.getColonFieldLoc(anf_method_obj2990,"make3",L[1300]);
if(R.isMethod($field3157)) {
$ans3149 = $field3157.full_meth(anf_method_obj2990,anf_arg2991,anf_arg2992,anf_arg2993);
} else {
if(!(R.isFunction($field3157))) {
R.ffi.throwNonFunApp(L[1300],$field3157);
}
$ans3149 = $field3157.app(anf_arg2991,anf_arg2992,anf_arg2993);
}
break;
case 9: anf_array3021[2] = $ans3149;
$al3150 = L[1306];
var anf_arg2995 = G(self2937,"val1",L[1306]);
$step3148 = 10;
$al3150 = L[1307];
$field3158 = R.getColonFieldLoc(ED5,"embed",L[1307]);
if(R.isMethod($field3158)) {
$ans3149 = $field3158.full_meth(ED5,anf_arg2995);
} else {
if(!(R.isFunction($field3158))) {
R.ffi.throwNonFunApp(L[1307],$field3158);
}
$ans3149 = $field3158.app(anf_arg2995);
}
break;
case 10: anf_array3021[3] = $ans3149;
$al3150 = L[1308];
var anf_method_obj3006 = G(ED5,"para",L[1308]);
$step3148 = 11;
$al3150 = L[1309];
$field3159 = R.getColonFieldLoc(ED5,"text",L[1309]);
if(R.isMethod($field3159)) {
$ans3149 = $field3159.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field3159))) {
R.ffi.throwNonFunApp(L[1309],$field3159);
}
$ans3149 = $field3159.app(("The "));
}
break;
case 11: var anf_arg3007 = $ans3149;
$step3148 = 12;
$al3150 = L[1310];
$field3160 = R.getColonFieldLoc(ED5,"text",L[1310]);
if(R.isMethod($field3160)) {
$ans3149 = $field3160.full_meth(ED5,("right side"));
} else {
if(!(R.isFunction($field3160))) {
R.ffi.throwNonFunApp(L[1310],$field3160);
}
$ans3149 = $field3160.app(("right side"));
}
break;
case 12: var anf_arg3002 = $ans3149;
$al3150 = L[1311];
var anf_method_obj2999 = G(ED5,"locs",L[1311]);
$step3148 = 13;
$al3150 = L[1311];
$field3161 = R.getColonFieldLoc(anf_method_obj2999,"make1",L[1311]);
if(R.isMethod($field3161)) {
$ans3149 = $field3161.full_meth(anf_method_obj2999,right$loc3000);
} else {
if(!(R.isFunction($field3161))) {
R.ffi.throwNonFunApp(L[1311],$field3161);
}
$ans3149 = $field3161.app(right$loc3000);
}
break;
case 13: var anf_arg3003 = $ans3149;
$step3148 = 14;
$al3150 = L[1312];
$field3162 = R.getColonFieldLoc(ED5,"highlight",L[1312]);
if(R.isMethod($field3162)) {
$ans3149 = $field3162.full_meth(ED5,anf_arg3002,anf_arg3003,(1));
} else {
if(!(R.isFunction($field3162))) {
R.ffi.throwNonFunApp(L[1312],$field3162);
}
$ans3149 = $field3162.app(anf_arg3002,anf_arg3003,(1));
}
break;
case 14: var anf_arg3008 = $ans3149;
$step3148 = 15;
$al3150 = L[1313];
$field3163 = R.getColonFieldLoc(ED5,"text",L[1313]);
if(R.isMethod($field3163)) {
$ans3149 = $field3163.full_meth(ED5,(" was:"));
} else {
if(!(R.isFunction($field3163))) {
R.ffi.throwNonFunApp(L[1313],$field3163);
}
$ans3149 = $field3163.app((" was:"));
}
break;
case 15: var anf_arg3009 = $ans3149;
$step3148 = 16;
$al3150 = L[1308];
$field3164 = R.getColonFieldLoc(anf_method_obj3006,"make3",L[1308]);
if(R.isMethod($field3164)) {
$ans3149 = $field3164.full_meth(anf_method_obj3006,anf_arg3007,anf_arg3008,anf_arg3009);
} else {
if(!(R.isFunction($field3164))) {
R.ffi.throwNonFunApp(L[1308],$field3164);
}
$ans3149 = $field3164.app(anf_arg3007,anf_arg3008,anf_arg3009);
}
break;
case 16: anf_array3021[4] = $ans3149;
$al3150 = L[1314];
var anf_arg3011 = G(self2937,"val2",L[1314]);
$step3148 = 17;
$al3150 = L[1315];
$field3165 = R.getColonFieldLoc(ED5,"embed",L[1315]);
if(R.isMethod($field3165)) {
$ans3149 = $field3165.full_meth(ED5,anf_arg3011);
} else {
if(!(R.isFunction($field3165))) {
R.ffi.throwNonFunApp(L[1315],$field3165);
}
$ans3149 = $field3165.app(anf_arg3011);
}
break;
case 17: anf_array3021[5] = $ans3149;
$al3150 = L[1316];
var anf_method_obj3017 = G(ED5,"para",L[1316]);
$al3150 = L[1317];
var anf_arg3013 = G(self2937,"opname",L[1317]);
$step3148 = 18;
$al3150 = L[1320];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3150,_plus1);
}
$ans3149 = _plus1.app(("The "),anf_arg3013);
break;
case 18: var anf_arg3014 = $ans3149;
$step3148 = 19;
$al3150 = L[1319];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3150,_plus1);
}
$ans3149 = _plus1.app(anf_arg3014,(" operator expects to be given two Numbers."));
break;
case 19: var anf_arg3015 = $ans3149;
$step3148 = 20;
$al3150 = L[1318];
$field3166 = R.getColonFieldLoc(ED5,"text",L[1318]);
if(R.isMethod($field3166)) {
$ans3149 = $field3166.full_meth(ED5,anf_arg3015);
} else {
if(!(R.isFunction($field3166))) {
R.ffi.throwNonFunApp(L[1318],$field3166);
}
$ans3149 = $field3166.app(anf_arg3015);
}
break;
case 20: var anf_arg3018 = $ans3149;
$step3148 = 21;
$al3150 = L[1316];
$field3167 = R.getColonFieldLoc(anf_method_obj3017,"make1",L[1316]);
if(R.isMethod($field3167)) {
$ans3149 = $field3167.full_meth(anf_method_obj3017,anf_arg3018);
} else {
if(!(R.isFunction($field3167))) {
R.ffi.throwNonFunApp(L[1316],$field3167);
}
$ans3149 = $field3167.app(anf_arg3018);
}
break;
case 21: anf_array3021[6] = $ans3149;
$step3148 = 22;
$al3150 = L[1296];
$field3168 = R.getColonFieldLoc(anf_method_obj3020,"make",L[1296]);
if(R.isMethod($field3168)) {
$ans3149 = $field3168.full_meth(anf_method_obj3020,anf_array3021);
} else {
if(!(R.isFunction($field3168))) {
R.ffi.throwNonFunApp(L[1296],$field3168);
}
$ans3149 = $field3168.app(anf_array3021);
}
break;
case 22: ++R.GAS;
return $ans3149;
default: throw "No case numbered " + $step3148 + " in $temp_branch3147";
}
}
} catch($e3169) {
if(R.isCont($e3169) && ($step3148 !== 22)) {
$e3169.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3150,$temp_branch3147,$step3148,[ast2974],[left$loc2984,right$loc3000,anf_method_obj3020,anf_array3021,anf_fun2978,anf_method_obj2990,anf_arg2991,anf_arg2986,anf_arg2992,anf_method_obj3006,anf_arg3007,anf_arg3002,anf_arg3008,anf_method_obj3017]);
}
if(R.isPyretException($e3169)) {
$e3169.pyretStack.push($al3150);
}
throw $e3169;
}
};
$ans3117 = cases2973.$app_fields($temp_branch3147,[false]);
break;
case 21: if(cases2973.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1345],false,L[1324]);
}
$step3116 = 36;
$al3118 = L[1346];
var $temp_branch3180 = function($$resumer101) {
var $step3181 = 0;
var $ans3182 = D;
var $al3183 = L[1326];
try {
if(R.isActivationRecord($$resumer101)) {
$step3181 = $$resumer101.step;
$al3183 = $$resumer101.from;
$ans3182 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj3069 = $$resumer101.vars[0];
anf_array3070 = $$resumer101.vars[1];
anf_fun3047 = $$resumer101.vars[2];
anf_method_obj3051 = $$resumer101.vars[3];
anf_method_obj3057 = $$resumer101.vars[4];
anf_method_obj3066 = $$resumer101.vars[5];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3181) {
case 0: $al3183 = L[1326];
var anf_method_obj3069 = G(ED5,"sequence",L[1326]);
$al3183 = L[1327];
var anf_array3070 = R.makeArrayN((7));
var anf_fun3047 = ed$intro122.$var;
$al3183 = L[1328];
var anf_arg3046 = G(self2937,"opname",L[1328]);
$step3181 = 1;
$al3183 = L[1344];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3183,_plus1);
}
$ans3182 = _plus1.app(anf_arg3046,(" expression"));
break;
case 1: var anf_arg3048 = $ans3182;
$step3181 = 2;
$al3183 = L[1343];
if(!(R.isFunction(anf_fun3047))) {
R.ffi.throwNonFunApp($al3183,anf_fun3047);
}
$ans3182 = anf_fun3047.app(anf_arg3048,loc2944,(0),(true));
break;
case 2: anf_array3070[0] = $ans3182;
$step3181 = 3;
$al3183 = L[1329];
$field3184 = R.getColonFieldLoc(ED5,"cmcode",L[1329]);
if(R.isMethod($field3184)) {
$ans3182 = $field3184.full_meth(ED5,loc2944);
} else {
if(!(R.isFunction($field3184))) {
R.ffi.throwNonFunApp(L[1329],$field3184);
}
$ans3182 = $field3184.app(loc2944);
}
break;
case 3: anf_array3070[1] = $ans3182;
$al3183 = L[1330];
var anf_method_obj3051 = G(ED5,"para",L[1330]);
$step3181 = 4;
$al3183 = L[1331];
$field3185 = R.getColonFieldLoc(ED5,"text",L[1331]);
if(R.isMethod($field3185)) {
$ans3182 = $field3185.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field3185))) {
R.ffi.throwNonFunApp(L[1331],$field3185);
}
$ans3182 = $field3185.app(("The left side was:"));
}
break;
case 4: var anf_arg3052 = $ans3182;
$step3181 = 5;
$al3183 = L[1330];
$field3186 = R.getColonFieldLoc(anf_method_obj3051,"make1",L[1330]);
if(R.isMethod($field3186)) {
$ans3182 = $field3186.full_meth(anf_method_obj3051,anf_arg3052);
} else {
if(!(R.isFunction($field3186))) {
R.ffi.throwNonFunApp(L[1330],$field3186);
}
$ans3182 = $field3186.app(anf_arg3052);
}
break;
case 5: anf_array3070[2] = $ans3182;
$al3183 = L[1332];
var anf_arg3054 = G(self2937,"val1",L[1332]);
$step3181 = 6;
$al3183 = L[1333];
$field3187 = R.getColonFieldLoc(ED5,"embed",L[1333]);
if(R.isMethod($field3187)) {
$ans3182 = $field3187.full_meth(ED5,anf_arg3054);
} else {
if(!(R.isFunction($field3187))) {
R.ffi.throwNonFunApp(L[1333],$field3187);
}
$ans3182 = $field3187.app(anf_arg3054);
}
break;
case 6: anf_array3070[3] = $ans3182;
$al3183 = L[1334];
var anf_method_obj3057 = G(ED5,"para",L[1334]);
$step3181 = 7;
$al3183 = L[1335];
$field3188 = R.getColonFieldLoc(ED5,"text",L[1335]);
if(R.isMethod($field3188)) {
$ans3182 = $field3188.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field3188))) {
R.ffi.throwNonFunApp(L[1335],$field3188);
}
$ans3182 = $field3188.app(("The right side was:"));
}
break;
case 7: var anf_arg3058 = $ans3182;
$step3181 = 8;
$al3183 = L[1334];
$field3189 = R.getColonFieldLoc(anf_method_obj3057,"make1",L[1334]);
if(R.isMethod($field3189)) {
$ans3182 = $field3189.full_meth(anf_method_obj3057,anf_arg3058);
} else {
if(!(R.isFunction($field3189))) {
R.ffi.throwNonFunApp(L[1334],$field3189);
}
$ans3182 = $field3189.app(anf_arg3058);
}
break;
case 8: anf_array3070[4] = $ans3182;
$al3183 = L[1336];
var anf_arg3060 = G(self2937,"val2",L[1336]);
$step3181 = 9;
$al3183 = L[1337];
$field3190 = R.getColonFieldLoc(ED5,"embed",L[1337]);
if(R.isMethod($field3190)) {
$ans3182 = $field3190.full_meth(ED5,anf_arg3060);
} else {
if(!(R.isFunction($field3190))) {
R.ffi.throwNonFunApp(L[1337],$field3190);
}
$ans3182 = $field3190.app(anf_arg3060);
}
break;
case 9: anf_array3070[5] = $ans3182;
$al3183 = L[1338];
var anf_method_obj3066 = G(ED5,"para",L[1338]);
$al3183 = L[1339];
var anf_arg3062 = G(self2937,"opname",L[1339]);
$step3181 = 10;
$al3183 = L[1342];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3183,_plus1);
}
$ans3182 = _plus1.app(("The "),anf_arg3062);
break;
case 10: var anf_arg3063 = $ans3182;
$step3181 = 11;
$al3183 = L[1341];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3183,_plus1);
}
$ans3182 = _plus1.app(anf_arg3063,(" operator expects to be given two Numbers."));
break;
case 11: var anf_arg3064 = $ans3182;
$step3181 = 12;
$al3183 = L[1340];
$field3191 = R.getColonFieldLoc(ED5,"text",L[1340]);
if(R.isMethod($field3191)) {
$ans3182 = $field3191.full_meth(ED5,anf_arg3064);
} else {
if(!(R.isFunction($field3191))) {
R.ffi.throwNonFunApp(L[1340],$field3191);
}
$ans3182 = $field3191.app(anf_arg3064);
}
break;
case 12: var anf_arg3067 = $ans3182;
$step3181 = 13;
$al3183 = L[1338];
$field3192 = R.getColonFieldLoc(anf_method_obj3066,"make1",L[1338]);
if(R.isMethod($field3192)) {
$ans3182 = $field3192.full_meth(anf_method_obj3066,anf_arg3067);
} else {
if(!(R.isFunction($field3192))) {
R.ffi.throwNonFunApp(L[1338],$field3192);
}
$ans3182 = $field3192.app(anf_arg3067);
}
break;
case 13: anf_array3070[6] = $ans3182;
$step3181 = 14;
$al3183 = L[1326];
$field3193 = R.getColonFieldLoc(anf_method_obj3069,"make",L[1326]);
if(R.isMethod($field3193)) {
$ans3182 = $field3193.full_meth(anf_method_obj3069,anf_array3070);
} else {
if(!(R.isFunction($field3193))) {
R.ffi.throwNonFunApp(L[1326],$field3193);
}
$ans3182 = $field3193.app(anf_array3070);
}
break;
case 14: ++R.GAS;
return $ans3182;
default: throw "No case numbered " + $step3181 + " in $temp_branch3180";
}
}
} catch($e3194) {
if(R.isCont($e3194) && ($step3181 !== 14)) {
$e3194.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3183,$temp_branch3180,$step3181,[],[anf_method_obj3069,anf_array3070,anf_fun3047,anf_method_obj3051,anf_method_obj3057,anf_method_obj3066]);
}
if(R.isPyretException($e3194)) {
$e3194.pyretStack.push($al3183);
}
throw $e3194;
}
};
$ans3117 = cases2973.$app_fields($temp_branch3180,[]);
break;
case 22: $step3116 = 36;
$al3118 = L[1324];
$ans3117 = R.throwNoCasesMatched(L[1324],cases2973);
break;
case 23: $al3118 = L[1349];
var anf_method_obj3110 = G(ED5,"sequence",L[1349]);
$al3118 = L[1350];
var anf_array3111 = R.makeArrayN((6));
var anf_fun3089 = ed$simple$intro95.$var;
$al3118 = L[1351];
var anf_arg3088 = G(self2937,"opname",L[1351]);
$step3116 = 24;
$al3118 = L[1366];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3118,_plus1);
}
$ans3117 = _plus1.app(anf_arg3088,(" expression"));
break;
case 24: var anf_arg3090 = $ans3117;
$step3116 = 25;
$al3118 = L[1365];
if(!(R.isFunction(anf_fun3089))) {
R.ffi.throwNonFunApp($al3118,anf_fun3089);
}
$ans3117 = anf_fun3089.app(anf_arg3090,loc2944);
break;
case 25: anf_array3111[0] = $ans3117;
$al3118 = L[1352];
var anf_method_obj3092 = G(ED5,"para",L[1352]);
$step3116 = 26;
$al3118 = L[1353];
$field3196 = R.getColonFieldLoc(ED5,"text",L[1353]);
if(R.isMethod($field3196)) {
$ans3117 = $field3196.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field3196))) {
R.ffi.throwNonFunApp(L[1353],$field3196);
}
$ans3117 = $field3196.app(("The left side was:"));
}
break;
case 26: var anf_arg3093 = $ans3117;
$step3116 = 27;
$al3118 = L[1352];
$field3197 = R.getColonFieldLoc(anf_method_obj3092,"make1",L[1352]);
if(R.isMethod($field3197)) {
$ans3117 = $field3197.full_meth(anf_method_obj3092,anf_arg3093);
} else {
if(!(R.isFunction($field3197))) {
R.ffi.throwNonFunApp(L[1352],$field3197);
}
$ans3117 = $field3197.app(anf_arg3093);
}
break;
case 27: anf_array3111[1] = $ans3117;
$al3118 = L[1354];
var anf_arg3095 = G(self2937,"val1",L[1354]);
$step3116 = 28;
$al3118 = L[1355];
$field3198 = R.getColonFieldLoc(ED5,"embed",L[1355]);
if(R.isMethod($field3198)) {
$ans3117 = $field3198.full_meth(ED5,anf_arg3095);
} else {
if(!(R.isFunction($field3198))) {
R.ffi.throwNonFunApp(L[1355],$field3198);
}
$ans3117 = $field3198.app(anf_arg3095);
}
break;
case 28: anf_array3111[2] = $ans3117;
$al3118 = L[1356];
var anf_method_obj3098 = G(ED5,"para",L[1356]);
$step3116 = 29;
$al3118 = L[1357];
$field3199 = R.getColonFieldLoc(ED5,"text",L[1357]);
if(R.isMethod($field3199)) {
$ans3117 = $field3199.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field3199))) {
R.ffi.throwNonFunApp(L[1357],$field3199);
}
$ans3117 = $field3199.app(("The right side was:"));
}
break;
case 29: var anf_arg3099 = $ans3117;
$step3116 = 30;
$al3118 = L[1356];
$field3200 = R.getColonFieldLoc(anf_method_obj3098,"make1",L[1356]);
if(R.isMethod($field3200)) {
$ans3117 = $field3200.full_meth(anf_method_obj3098,anf_arg3099);
} else {
if(!(R.isFunction($field3200))) {
R.ffi.throwNonFunApp(L[1356],$field3200);
}
$ans3117 = $field3200.app(anf_arg3099);
}
break;
case 30: anf_array3111[3] = $ans3117;
$al3118 = L[1358];
var anf_arg3101 = G(self2937,"val2",L[1358]);
$step3116 = 31;
$al3118 = L[1359];
$field3201 = R.getColonFieldLoc(ED5,"embed",L[1359]);
if(R.isMethod($field3201)) {
$ans3117 = $field3201.full_meth(ED5,anf_arg3101);
} else {
if(!(R.isFunction($field3201))) {
R.ffi.throwNonFunApp(L[1359],$field3201);
}
$ans3117 = $field3201.app(anf_arg3101);
}
break;
case 31: anf_array3111[4] = $ans3117;
$al3118 = L[1360];
var anf_method_obj3107 = G(ED5,"para",L[1360]);
$al3118 = L[1361];
var anf_arg3103 = G(self2937,"opname",L[1361]);
$step3116 = 32;
$al3118 = L[1364];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3118,_plus1);
}
$ans3117 = _plus1.app(("The "),anf_arg3103);
break;
case 32: var anf_arg3104 = $ans3117;
$step3116 = 33;
$al3118 = L[1363];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3118,_plus1);
}
$ans3117 = _plus1.app(anf_arg3104,(" operator expects to be given two Numbers."));
break;
case 33: var anf_arg3105 = $ans3117;
$step3116 = 34;
$al3118 = L[1362];
$field3202 = R.getColonFieldLoc(ED5,"text",L[1362]);
if(R.isMethod($field3202)) {
$ans3117 = $field3202.full_meth(ED5,anf_arg3105);
} else {
if(!(R.isFunction($field3202))) {
R.ffi.throwNonFunApp(L[1362],$field3202);
}
$ans3117 = $field3202.app(anf_arg3105);
}
break;
case 34: var anf_arg3108 = $ans3117;
$step3116 = 35;
$al3118 = L[1360];
$field3203 = R.getColonFieldLoc(anf_method_obj3107,"make1",L[1360]);
if(R.isMethod($field3203)) {
$ans3117 = $field3203.full_meth(anf_method_obj3107,anf_arg3108);
} else {
if(!(R.isFunction($field3203))) {
R.ffi.throwNonFunApp(L[1360],$field3203);
}
$ans3117 = $field3203.app(anf_arg3108);
}
break;
case 35: anf_array3111[5] = $ans3117;
$step3116 = 36;
$al3118 = L[1349];
$field3204 = R.getColonFieldLoc(anf_method_obj3110,"make",L[1349]);
if(R.isMethod($field3204)) {
$ans3117 = $field3204.full_meth(anf_method_obj3110,anf_array3111);
} else {
if(!(R.isFunction($field3204))) {
R.ffi.throwNonFunApp(L[1349],$field3204);
}
$ans3117 = $field3204.app(anf_array3111);
}
break;
case 36: ++R.GAS;
return $ans3117;
default: throw "No case numbered " + $step3116 + " in $temp_branch3115";
}
}
} catch($e3205) {
if(R.isCont($e3205) && ($step3116 !== 36)) {
$e3205.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3118,$temp_branch3115,$step3116,[loc2944],[anf_method_obj2969,anf_array2970,anf_fun2948,anf_method_obj2951,anf_method_obj2957,anf_method_obj2966,cases2973,anf_method_obj3110,anf_array3111,anf_fun3089,anf_method_obj3092,anf_method_obj3098,anf_method_obj3107]);
}
if(R.isPyretException($e3205)) {
$e3205.pyretStack.push($al3118);
}
throw $e3205;
}
};
$ans2941 = cases2943.$app_fields($temp_branch3115,[false]);
break;
case 4: if(cases2943.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1390],false,L[1368]);
}
$step2935 = 6;
$al2942 = L[1391];
var $temp_branch3237 = function($$resumer101) {
var $step3238 = 0;
var $ans3239 = D;
var $al3240 = L[1370];
try {
if(R.isActivationRecord($$resumer101)) {
$step3238 = $$resumer101.step;
$al3240 = $$resumer101.from;
$ans3239 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj3234 = $$resumer101.vars[0];
anf_array3235 = $$resumer101.vars[1];
anf_method_obj3210 = $$resumer101.vars[2];
anf_arg3211 = $$resumer101.vars[3];
anf_arg3212 = $$resumer101.vars[4];
anf_method_obj3216 = $$resumer101.vars[5];
anf_method_obj3222 = $$resumer101.vars[6];
anf_method_obj3231 = $$resumer101.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3238) {
case 0: $al3240 = L[1370];
var anf_method_obj3234 = G(ED5,"sequence",L[1370]);
$al3240 = L[1371];
var anf_array3235 = R.makeArrayN((6));
$al3240 = L[1372];
var anf_method_obj3210 = G(ED5,"para",L[1372]);
$step3238 = 1;
$al3240 = L[1373];
$field3241 = R.getColonFieldLoc(ED5,"text",L[1373]);
if(R.isMethod($field3241)) {
$ans3239 = $field3241.full_meth(ED5,("A "));
} else {
if(!(R.isFunction($field3241))) {
R.ffi.throwNonFunApp(L[1373],$field3241);
}
$ans3239 = $field3241.app(("A "));
}
break;
case 1: var anf_arg3211 = $ans3239;
$al3240 = L[1374];
var anf_arg3207 = G(self2937,"opname",L[1374]);
$step3238 = 2;
$al3240 = L[1375];
$field3242 = R.getColonFieldLoc(ED5,"code",L[1375]);
if(R.isMethod($field3242)) {
$ans3239 = $field3242.full_meth(ED5,anf_arg3207);
} else {
if(!(R.isFunction($field3242))) {
R.ffi.throwNonFunApp(L[1375],$field3242);
}
$ans3239 = $field3242.app(anf_arg3207);
}
break;
case 2: var anf_arg3212 = $ans3239;
$step3238 = 3;
$al3240 = L[1376];
$field3243 = R.getColonFieldLoc(ED5,"text",L[1376]);
if(R.isMethod($field3243)) {
$ans3239 = $field3243.full_meth(ED5,(" expression errored."));
} else {
if(!(R.isFunction($field3243))) {
R.ffi.throwNonFunApp(L[1376],$field3243);
}
$ans3239 = $field3243.app((" expression errored."));
}
break;
case 3: var anf_arg3213 = $ans3239;
$step3238 = 4;
$al3240 = L[1372];
$field3244 = R.getColonFieldLoc(anf_method_obj3210,"make3",L[1372]);
if(R.isMethod($field3244)) {
$ans3239 = $field3244.full_meth(anf_method_obj3210,anf_arg3211,anf_arg3212,anf_arg3213);
} else {
if(!(R.isFunction($field3244))) {
R.ffi.throwNonFunApp(L[1372],$field3244);
}
$ans3239 = $field3244.app(anf_arg3211,anf_arg3212,anf_arg3213);
}
break;
case 4: anf_array3235[0] = $ans3239;
$al3240 = L[1377];
var anf_method_obj3216 = G(ED5,"para",L[1377]);
$step3238 = 5;
$al3240 = L[1378];
$field3245 = R.getColonFieldLoc(ED5,"text",L[1378]);
if(R.isMethod($field3245)) {
$ans3239 = $field3245.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field3245))) {
R.ffi.throwNonFunApp(L[1378],$field3245);
}
$ans3239 = $field3245.app(("The left side was:"));
}
break;
case 5: var anf_arg3217 = $ans3239;
$step3238 = 6;
$al3240 = L[1377];
$field3246 = R.getColonFieldLoc(anf_method_obj3216,"make1",L[1377]);
if(R.isMethod($field3246)) {
$ans3239 = $field3246.full_meth(anf_method_obj3216,anf_arg3217);
} else {
if(!(R.isFunction($field3246))) {
R.ffi.throwNonFunApp(L[1377],$field3246);
}
$ans3239 = $field3246.app(anf_arg3217);
}
break;
case 6: anf_array3235[1] = $ans3239;
$al3240 = L[1379];
var anf_arg3219 = G(self2937,"val1",L[1379]);
$step3238 = 7;
$al3240 = L[1380];
$field3247 = R.getColonFieldLoc(ED5,"embed",L[1380]);
if(R.isMethod($field3247)) {
$ans3239 = $field3247.full_meth(ED5,anf_arg3219);
} else {
if(!(R.isFunction($field3247))) {
R.ffi.throwNonFunApp(L[1380],$field3247);
}
$ans3239 = $field3247.app(anf_arg3219);
}
break;
case 7: anf_array3235[2] = $ans3239;
$al3240 = L[1381];
var anf_method_obj3222 = G(ED5,"para",L[1381]);
$step3238 = 8;
$al3240 = L[1382];
$field3248 = R.getColonFieldLoc(ED5,"text",L[1382]);
if(R.isMethod($field3248)) {
$ans3239 = $field3248.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field3248))) {
R.ffi.throwNonFunApp(L[1382],$field3248);
}
$ans3239 = $field3248.app(("The right side was:"));
}
break;
case 8: var anf_arg3223 = $ans3239;
$step3238 = 9;
$al3240 = L[1381];
$field3249 = R.getColonFieldLoc(anf_method_obj3222,"make1",L[1381]);
if(R.isMethod($field3249)) {
$ans3239 = $field3249.full_meth(anf_method_obj3222,anf_arg3223);
} else {
if(!(R.isFunction($field3249))) {
R.ffi.throwNonFunApp(L[1381],$field3249);
}
$ans3239 = $field3249.app(anf_arg3223);
}
break;
case 9: anf_array3235[3] = $ans3239;
$al3240 = L[1383];
var anf_arg3225 = G(self2937,"val2",L[1383]);
$step3238 = 10;
$al3240 = L[1384];
$field3250 = R.getColonFieldLoc(ED5,"embed",L[1384]);
if(R.isMethod($field3250)) {
$ans3239 = $field3250.full_meth(ED5,anf_arg3225);
} else {
if(!(R.isFunction($field3250))) {
R.ffi.throwNonFunApp(L[1384],$field3250);
}
$ans3239 = $field3250.app(anf_arg3225);
}
break;
case 10: anf_array3235[4] = $ans3239;
$al3240 = L[1385];
var anf_method_obj3231 = G(ED5,"para",L[1385]);
$al3240 = L[1386];
var anf_arg3227 = G(self2937,"opname",L[1386]);
$step3238 = 11;
$al3240 = L[1389];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3240,_plus1);
}
$ans3239 = _plus1.app(("The "),anf_arg3227);
break;
case 11: var anf_arg3228 = $ans3239;
$step3238 = 12;
$al3240 = L[1388];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3240,_plus1);
}
$ans3239 = _plus1.app(anf_arg3228,(" operator expects to be given two Numbers."));
break;
case 12: var anf_arg3229 = $ans3239;
$step3238 = 13;
$al3240 = L[1387];
$field3251 = R.getColonFieldLoc(ED5,"text",L[1387]);
if(R.isMethod($field3251)) {
$ans3239 = $field3251.full_meth(ED5,anf_arg3229);
} else {
if(!(R.isFunction($field3251))) {
R.ffi.throwNonFunApp(L[1387],$field3251);
}
$ans3239 = $field3251.app(anf_arg3229);
}
break;
case 13: var anf_arg3232 = $ans3239;
$step3238 = 14;
$al3240 = L[1385];
$field3252 = R.getColonFieldLoc(anf_method_obj3231,"make1",L[1385]);
if(R.isMethod($field3252)) {
$ans3239 = $field3252.full_meth(anf_method_obj3231,anf_arg3232);
} else {
if(!(R.isFunction($field3252))) {
R.ffi.throwNonFunApp(L[1385],$field3252);
}
$ans3239 = $field3252.app(anf_arg3232);
}
break;
case 14: anf_array3235[5] = $ans3239;
$step3238 = 15;
$al3240 = L[1370];
$field3253 = R.getColonFieldLoc(anf_method_obj3234,"make",L[1370]);
if(R.isMethod($field3253)) {
$ans3239 = $field3253.full_meth(anf_method_obj3234,anf_array3235);
} else {
if(!(R.isFunction($field3253))) {
R.ffi.throwNonFunApp(L[1370],$field3253);
}
$ans3239 = $field3253.app(anf_array3235);
}
break;
case 15: ++R.GAS;
return $ans3239;
default: throw "No case numbered " + $step3238 + " in $temp_branch3237";
}
}
} catch($e3254) {
if(R.isCont($e3254) && ($step3238 !== 15)) {
$e3254.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3240,$temp_branch3237,$step3238,[],[anf_method_obj3234,anf_array3235,anf_method_obj3210,anf_arg3211,anf_arg3212,anf_method_obj3216,anf_method_obj3222,anf_method_obj3231]);
}
if(R.isPyretException($e3254)) {
$e3254.pyretStack.push($al3240);
}
throw $e3254;
}
};
$ans2941 = cases2943.$app_fields($temp_branch3237,[]);
break;
case 5: $step2935 = 6;
$al2942 = L[1368];
$ans2941 = R.throwNoCasesMatched(L[1368],cases2943);
break;
case 6: var anf_arg3257 = $ans2941;
$step2935 = 7;
$al2942 = L[1271];
$field3258 = R.getColonFieldLoc(anf_method_obj3256,"make1",L[1271]);
if(R.isMethod($field3258)) {
$ans2941 = $field3258.full_meth(anf_method_obj3256,anf_arg3257);
} else {
if(!(R.isFunction($field3258))) {
R.ffi.throwNonFunApp(L[1271],$field3258);
}
$ans2941 = $field3258.app(anf_arg3257);
}
break;
case 7: ++R.GAS;
return $ans2941;
default: throw "No case numbered " + $step2935 + " in $temp_full2936";
}
}
} catch($e3259) {
if(R.isCont($e3259) && ($step2935 !== 7)) {
$e3259.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2942,$temp_full2936,$step2935,[self2937,maybe$stack$loc2938,src$available2939,maybe$ast2940],[anf_method_obj3256,cases2943]);
}
if(R.isPyretException($e3259)) {
$e3259.pyretStack.push($al2942);
}
throw $e3259;
}
};
var anf_variant_member6347 = R.makeMethod3($temp_full2936,"render-fancy-reason");
var $temp_full3261 = function($self3262) {
var $step3260 = 0;
var $ans3263 = D;
var $al3264 = L[1436];
try {
if(R.isActivationRecord($self3262)) {
$step3260 = $self3262.step;
$al3264 = $self3262.from;
$ans3263 = $self3262.ans;
self3262 = $self3262.args[0];
anf_method_obj3330 = $self3262.vars[0];
anf_arg3327 = $self3262.vars[1];
anf_method_obj3324 = $self3262.vars[2];
anf_array3325 = $self3262.vars[3];
anf_method_obj3300 = $self3262.vars[4];
anf_arg3301 = $self3262.vars[5];
anf_arg3302 = $self3262.vars[6];
anf_method_obj3306 = $self3262.vars[7];
anf_method_obj3312 = $self3262.vars[8];
anf_method_obj3321 = $self3262.vars[9];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1436],1,$t);
}
var self3262 = $self3262;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3260) {
case 0: $al3264 = L[1395];
var anf_method_obj3330 = G(ED5,"error",L[1395]);
var $temp_lam3266 = function($loc3267) {
var $step3265 = 0;
var $ans3268 = D;
var $al3269 = L[1414];
try {
if(R.isActivationRecord($loc3267)) {
$step3265 = $loc3267.step;
$al3269 = $loc3267.from;
$ans3268 = $loc3267.ans;
loc3267 = $loc3267.args[0];
anf_method_obj3292 = $loc3267.vars[0];
anf_array3293 = $loc3267.vars[1];
anf_fun3271 = $loc3267.vars[2];
anf_method_obj3274 = $loc3267.vars[3];
anf_method_obj3280 = $loc3267.vars[4];
anf_method_obj3289 = $loc3267.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1414],1,$t);
}
var loc3267 = $loc3267;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3265) {
case 0: $al3269 = L[1396];
var anf_method_obj3292 = G(ED5,"sequence",L[1396]);
$al3269 = L[1397];
var anf_array3293 = R.makeArrayN((6));
var anf_fun3271 = ed$simple$intro95.$var;
$al3269 = L[1398];
var anf_arg3270 = G(self3262,"opname",L[1398]);
$step3265 = 1;
$al3269 = L[1413];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3269,_plus1);
}
$ans3268 = _plus1.app(anf_arg3270,(" expression"));
break;
case 1: var anf_arg3272 = $ans3268;
$step3265 = 2;
$al3269 = L[1412];
if(!(R.isFunction(anf_fun3271))) {
R.ffi.throwNonFunApp($al3269,anf_fun3271);
}
$ans3268 = anf_fun3271.app(anf_arg3272,loc3267);
break;
case 2: anf_array3293[0] = $ans3268;
$al3269 = L[1399];
var anf_method_obj3274 = G(ED5,"para",L[1399]);
$step3265 = 3;
$al3269 = L[1400];
$field3273 = R.getColonFieldLoc(ED5,"text",L[1400]);
if(R.isMethod($field3273)) {
$ans3268 = $field3273.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field3273))) {
R.ffi.throwNonFunApp(L[1400],$field3273);
}
$ans3268 = $field3273.app(("The left side was:"));
}
break;
case 3: var anf_arg3275 = $ans3268;
$step3265 = 4;
$al3269 = L[1399];
$field3276 = R.getColonFieldLoc(anf_method_obj3274,"make1",L[1399]);
if(R.isMethod($field3276)) {
$ans3268 = $field3276.full_meth(anf_method_obj3274,anf_arg3275);
} else {
if(!(R.isFunction($field3276))) {
R.ffi.throwNonFunApp(L[1399],$field3276);
}
$ans3268 = $field3276.app(anf_arg3275);
}
break;
case 4: anf_array3293[1] = $ans3268;
$al3269 = L[1401];
var anf_arg3277 = G(self3262,"val1",L[1401]);
$step3265 = 5;
$al3269 = L[1402];
$field3278 = R.getColonFieldLoc(ED5,"embed",L[1402]);
if(R.isMethod($field3278)) {
$ans3268 = $field3278.full_meth(ED5,anf_arg3277);
} else {
if(!(R.isFunction($field3278))) {
R.ffi.throwNonFunApp(L[1402],$field3278);
}
$ans3268 = $field3278.app(anf_arg3277);
}
break;
case 5: anf_array3293[2] = $ans3268;
$al3269 = L[1403];
var anf_method_obj3280 = G(ED5,"para",L[1403]);
$step3265 = 6;
$al3269 = L[1404];
$field3279 = R.getColonFieldLoc(ED5,"text",L[1404]);
if(R.isMethod($field3279)) {
$ans3268 = $field3279.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field3279))) {
R.ffi.throwNonFunApp(L[1404],$field3279);
}
$ans3268 = $field3279.app(("The right side was:"));
}
break;
case 6: var anf_arg3281 = $ans3268;
$step3265 = 7;
$al3269 = L[1403];
$field3282 = R.getColonFieldLoc(anf_method_obj3280,"make1",L[1403]);
if(R.isMethod($field3282)) {
$ans3268 = $field3282.full_meth(anf_method_obj3280,anf_arg3281);
} else {
if(!(R.isFunction($field3282))) {
R.ffi.throwNonFunApp(L[1403],$field3282);
}
$ans3268 = $field3282.app(anf_arg3281);
}
break;
case 7: anf_array3293[3] = $ans3268;
$al3269 = L[1405];
var anf_arg3283 = G(self3262,"val2",L[1405]);
$step3265 = 8;
$al3269 = L[1406];
$field3284 = R.getColonFieldLoc(ED5,"embed",L[1406]);
if(R.isMethod($field3284)) {
$ans3268 = $field3284.full_meth(ED5,anf_arg3283);
} else {
if(!(R.isFunction($field3284))) {
R.ffi.throwNonFunApp(L[1406],$field3284);
}
$ans3268 = $field3284.app(anf_arg3283);
}
break;
case 8: anf_array3293[4] = $ans3268;
$al3269 = L[1407];
var anf_method_obj3289 = G(ED5,"para",L[1407]);
$al3269 = L[1408];
var anf_arg3285 = G(self3262,"opname",L[1408]);
$step3265 = 9;
$al3269 = L[1411];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3269,_plus1);
}
$ans3268 = _plus1.app(("The "),anf_arg3285);
break;
case 9: var anf_arg3286 = $ans3268;
$step3265 = 10;
$al3269 = L[1410];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3269,_plus1);
}
$ans3268 = _plus1.app(anf_arg3286,(" operator expects to be given two Numbers."));
break;
case 10: var anf_arg3287 = $ans3268;
$step3265 = 11;
$al3269 = L[1409];
$field3288 = R.getColonFieldLoc(ED5,"text",L[1409]);
if(R.isMethod($field3288)) {
$ans3268 = $field3288.full_meth(ED5,anf_arg3287);
} else {
if(!(R.isFunction($field3288))) {
R.ffi.throwNonFunApp(L[1409],$field3288);
}
$ans3268 = $field3288.app(anf_arg3287);
}
break;
case 11: var anf_arg3290 = $ans3268;
$step3265 = 12;
$al3269 = L[1407];
$field3291 = R.getColonFieldLoc(anf_method_obj3289,"make1",L[1407]);
if(R.isMethod($field3291)) {
$ans3268 = $field3291.full_meth(anf_method_obj3289,anf_arg3290);
} else {
if(!(R.isFunction($field3291))) {
R.ffi.throwNonFunApp(L[1407],$field3291);
}
$ans3268 = $field3291.app(anf_arg3290);
}
break;
case 12: anf_array3293[5] = $ans3268;
$step3265 = 13;
$al3269 = L[1396];
$field3294 = R.getColonFieldLoc(anf_method_obj3292,"make",L[1396]);
if(R.isMethod($field3294)) {
$ans3268 = $field3294.full_meth(anf_method_obj3292,anf_array3293);
} else {
if(!(R.isFunction($field3294))) {
R.ffi.throwNonFunApp(L[1396],$field3294);
}
$ans3268 = $field3294.app(anf_array3293);
}
break;
case 13: ++R.GAS;
return $ans3268;
default: throw "No case numbered " + $step3265 + " in $temp_lam3266";
}
}
} catch($e3295) {
if(R.isCont($e3295) && ($step3265 !== 13)) {
$e3295.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3269,$temp_lam3266,$step3265,[loc3267],[anf_method_obj3292,anf_array3293,anf_fun3271,anf_method_obj3274,anf_method_obj3280,anf_method_obj3289]);
}
if(R.isPyretException($e3295)) {
$e3295.pyretStack.push($al3269);
}
throw $e3295;
}
};
var anf_arg3327 = R.makeFunction($temp_lam3266,"");
$al3264 = L[1415];
var anf_method_obj3324 = G(ED5,"sequence",L[1415]);
$al3264 = L[1416];
var anf_array3325 = R.makeArrayN((6));
$al3264 = L[1417];
var anf_method_obj3300 = G(ED5,"para",L[1417]);
$step3260 = 1;
$al3264 = L[1418];
$field3296 = R.getColonFieldLoc(ED5,"text",L[1418]);
if(R.isMethod($field3296)) {
$ans3263 = $field3296.full_meth(ED5,("A "));
} else {
if(!(R.isFunction($field3296))) {
R.ffi.throwNonFunApp(L[1418],$field3296);
}
$ans3263 = $field3296.app(("A "));
}
break;
case 1: var anf_arg3301 = $ans3263;
$al3264 = L[1419];
var anf_arg3297 = G(self3262,"opname",L[1419]);
$step3260 = 2;
$al3264 = L[1420];
$field3298 = R.getColonFieldLoc(ED5,"code",L[1420]);
if(R.isMethod($field3298)) {
$ans3263 = $field3298.full_meth(ED5,anf_arg3297);
} else {
if(!(R.isFunction($field3298))) {
R.ffi.throwNonFunApp(L[1420],$field3298);
}
$ans3263 = $field3298.app(anf_arg3297);
}
break;
case 2: var anf_arg3302 = $ans3263;
$step3260 = 3;
$al3264 = L[1421];
$field3299 = R.getColonFieldLoc(ED5,"text",L[1421]);
if(R.isMethod($field3299)) {
$ans3263 = $field3299.full_meth(ED5,(" expression errored."));
} else {
if(!(R.isFunction($field3299))) {
R.ffi.throwNonFunApp(L[1421],$field3299);
}
$ans3263 = $field3299.app((" expression errored."));
}
break;
case 3: var anf_arg3303 = $ans3263;
$step3260 = 4;
$al3264 = L[1417];
$field3304 = R.getColonFieldLoc(anf_method_obj3300,"make3",L[1417]);
if(R.isMethod($field3304)) {
$ans3263 = $field3304.full_meth(anf_method_obj3300,anf_arg3301,anf_arg3302,anf_arg3303);
} else {
if(!(R.isFunction($field3304))) {
R.ffi.throwNonFunApp(L[1417],$field3304);
}
$ans3263 = $field3304.app(anf_arg3301,anf_arg3302,anf_arg3303);
}
break;
case 4: anf_array3325[0] = $ans3263;
$al3264 = L[1422];
var anf_method_obj3306 = G(ED5,"para",L[1422]);
$step3260 = 5;
$al3264 = L[1423];
$field3305 = R.getColonFieldLoc(ED5,"text",L[1423]);
if(R.isMethod($field3305)) {
$ans3263 = $field3305.full_meth(ED5,("The left side was:"));
} else {
if(!(R.isFunction($field3305))) {
R.ffi.throwNonFunApp(L[1423],$field3305);
}
$ans3263 = $field3305.app(("The left side was:"));
}
break;
case 5: var anf_arg3307 = $ans3263;
$step3260 = 6;
$al3264 = L[1422];
$field3308 = R.getColonFieldLoc(anf_method_obj3306,"make1",L[1422]);
if(R.isMethod($field3308)) {
$ans3263 = $field3308.full_meth(anf_method_obj3306,anf_arg3307);
} else {
if(!(R.isFunction($field3308))) {
R.ffi.throwNonFunApp(L[1422],$field3308);
}
$ans3263 = $field3308.app(anf_arg3307);
}
break;
case 6: anf_array3325[1] = $ans3263;
$al3264 = L[1424];
var anf_arg3309 = G(self3262,"val1",L[1424]);
$step3260 = 7;
$al3264 = L[1425];
$field3310 = R.getColonFieldLoc(ED5,"embed",L[1425]);
if(R.isMethod($field3310)) {
$ans3263 = $field3310.full_meth(ED5,anf_arg3309);
} else {
if(!(R.isFunction($field3310))) {
R.ffi.throwNonFunApp(L[1425],$field3310);
}
$ans3263 = $field3310.app(anf_arg3309);
}
break;
case 7: anf_array3325[2] = $ans3263;
$al3264 = L[1426];
var anf_method_obj3312 = G(ED5,"para",L[1426]);
$step3260 = 8;
$al3264 = L[1427];
$field3311 = R.getColonFieldLoc(ED5,"text",L[1427]);
if(R.isMethod($field3311)) {
$ans3263 = $field3311.full_meth(ED5,("The right side was:"));
} else {
if(!(R.isFunction($field3311))) {
R.ffi.throwNonFunApp(L[1427],$field3311);
}
$ans3263 = $field3311.app(("The right side was:"));
}
break;
case 8: var anf_arg3313 = $ans3263;
$step3260 = 9;
$al3264 = L[1426];
$field3314 = R.getColonFieldLoc(anf_method_obj3312,"make1",L[1426]);
if(R.isMethod($field3314)) {
$ans3263 = $field3314.full_meth(anf_method_obj3312,anf_arg3313);
} else {
if(!(R.isFunction($field3314))) {
R.ffi.throwNonFunApp(L[1426],$field3314);
}
$ans3263 = $field3314.app(anf_arg3313);
}
break;
case 9: anf_array3325[3] = $ans3263;
$al3264 = L[1428];
var anf_arg3315 = G(self3262,"val2",L[1428]);
$step3260 = 10;
$al3264 = L[1429];
$field3316 = R.getColonFieldLoc(ED5,"embed",L[1429]);
if(R.isMethod($field3316)) {
$ans3263 = $field3316.full_meth(ED5,anf_arg3315);
} else {
if(!(R.isFunction($field3316))) {
R.ffi.throwNonFunApp(L[1429],$field3316);
}
$ans3263 = $field3316.app(anf_arg3315);
}
break;
case 10: anf_array3325[4] = $ans3263;
$al3264 = L[1430];
var anf_method_obj3321 = G(ED5,"para",L[1430]);
$al3264 = L[1431];
var anf_arg3317 = G(self3262,"opname",L[1431]);
$step3260 = 11;
$al3264 = L[1435];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3264,_plus1);
}
$ans3263 = _plus1.app(("The "),anf_arg3317);
break;
case 11: var anf_arg3318 = $ans3263;
$step3260 = 12;
$al3264 = L[1434];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al3264,_plus1);
}
$ans3263 = _plus1.app(anf_arg3318,(" operator expects to be given two Numbers."));
break;
case 12: var anf_arg3319 = $ans3263;
$step3260 = 13;
$al3264 = L[1432];
$field3320 = R.getColonFieldLoc(ED5,"text",L[1432]);
if(R.isMethod($field3320)) {
$ans3263 = $field3320.full_meth(ED5,anf_arg3319);
} else {
if(!(R.isFunction($field3320))) {
R.ffi.throwNonFunApp(L[1432],$field3320);
}
$ans3263 = $field3320.app(anf_arg3319);
}
break;
case 13: var anf_arg3322 = $ans3263;
$step3260 = 14;
$al3264 = L[1430];
$field3323 = R.getColonFieldLoc(anf_method_obj3321,"make1",L[1430]);
if(R.isMethod($field3323)) {
$ans3263 = $field3323.full_meth(anf_method_obj3321,anf_arg3322);
} else {
if(!(R.isFunction($field3323))) {
R.ffi.throwNonFunApp(L[1430],$field3323);
}
$ans3263 = $field3323.app(anf_arg3322);
}
break;
case 14: anf_array3325[5] = $ans3263;
$step3260 = 15;
$al3264 = L[1415];
$field3326 = R.getColonFieldLoc(anf_method_obj3324,"make",L[1415]);
if(R.isMethod($field3326)) {
$ans3263 = $field3326.full_meth(anf_method_obj3324,anf_array3325);
} else {
if(!(R.isFunction($field3326))) {
R.ffi.throwNonFunApp(L[1415],$field3326);
}
$ans3263 = $field3326.app(anf_array3325);
}
break;
case 15: var anf_arg3328 = $ans3263;
$step3260 = 16;
$al3264 = L[1433];
$field3329 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[1433]);
if(R.isMethod($field3329)) {
$ans3263 = $field3329.full_meth(ED5,(0),(false),anf_arg3327,anf_arg3328);
} else {
if(!(R.isFunction($field3329))) {
R.ffi.throwNonFunApp(L[1433],$field3329);
}
$ans3263 = $field3329.app((0),(false),anf_arg3327,anf_arg3328);
}
break;
case 16: var anf_arg3331 = $ans3263;
$step3260 = 17;
$al3264 = L[1395];
$field3332 = R.getColonFieldLoc(anf_method_obj3330,"make1",L[1395]);
if(R.isMethod($field3332)) {
$ans3263 = $field3332.full_meth(anf_method_obj3330,anf_arg3331);
} else {
if(!(R.isFunction($field3332))) {
R.ffi.throwNonFunApp(L[1395],$field3332);
}
$ans3263 = $field3332.app(anf_arg3331);
}
break;
case 17: ++R.GAS;
return $ans3263;
default: throw "No case numbered " + $step3260 + " in $temp_full3261";
}
}
} catch($e3333) {
if(R.isCont($e3333) && ($step3260 !== 17)) {
$e3333.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3264,$temp_full3261,$step3260,[self3262],[anf_method_obj3330,anf_arg3327,anf_method_obj3324,anf_array3325,anf_method_obj3300,anf_arg3301,anf_arg3302,anf_method_obj3306,anf_method_obj3312,anf_method_obj3321]);
}
if(R.isPyretException($e3333)) {
$e3333.pyretStack.push($al3264);
}
throw $e3333;
}
};
var anf_variant_member6348 = R.makeMethod0($temp_full3261,"render-reason");
var $temp_full3335 = function($self3336,$maybe$stack$loc3337,$src$available3338,$maybe$ast3339) {
var $step3334 = 0;
var $ans3340 = D;
var $al3341 = L[1518];
try {
if(R.isActivationRecord($self3336)) {
$step3334 = $self3336.step;
$al3341 = $self3336.from;
$ans3340 = $self3336.ans;
self3336 = $self3336.args[0];
maybe$stack$loc3337 = $self3336.args[1];
src$available3338 = $self3336.args[2];
maybe$ast3339 = $self3336.args[3];
anf_method_obj3356 = $self3336.vars[0];
anf_method_obj3351 = $self3336.vars[1];
anf_arg3352 = $self3336.vars[2];
anf_arg3353 = $self3336.vars[3];
cases3363 = $self3336.vars[4];
anf_method_obj3543 = $self3336.vars[5];
anf_method_obj3538 = $self3336.vars[6];
anf_arg3539 = $self3336.vars[7];
anf_arg3540 = $self3336.vars[8];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1518],4,$t);
}
var self3336 = $self3336;
var maybe$stack$loc3337 = $maybe$stack$loc3337;
var src$available3338 = $src$available3338;
var maybe$ast3339 = $maybe$ast3339;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3334) {
case 0: $al3341 = L[1437];
var anf_method_obj3342 = G(self3336,"branch-loc",L[1437]);
$step3334 = 1;
$al3341 = L[1438];
$field3343 = R.getColonFieldLoc(anf_method_obj3342,"is-builtin",L[1438]);
if(R.isMethod($field3343)) {
$ans3340 = $field3343.full_meth(anf_method_obj3342);
} else {
if(!(R.isFunction($field3343))) {
R.ffi.throwNonFunApp(L[1438],$field3343);
}
$ans3340 = $field3343.app();
}
break;
case 1: var anf_arg3344 = $ans3340;
$al3341 = L[1438];
var anf_if3548 = R.checkWrapBoolean(anf_arg3344);
$step3334 = R.isPyretTrue(anf_if3548)?2:9;
break;
case 2: $al3341 = L[1439];
var anf_method_obj3356 = G(ED5,"error",L[1439]);
$al3341 = L[1440];
var anf_method_obj3351 = G(ED5,"para",L[1440]);
$step3334 = 3;
$al3341 = L[1441];
$field3345 = R.getColonFieldLoc(ED5,"text",L[1441]);
if(R.isMethod($field3345)) {
$ans3340 = $field3345.full_meth(ED5,("A cases branch in "));
} else {
if(!(R.isFunction($field3345))) {
R.ffi.throwNonFunApp(L[1441],$field3345);
}
$ans3340 = $field3345.app(("A cases branch in "));
}
break;
case 3: var anf_arg3352 = $ans3340;
$al3341 = L[1442];
var anf_arg3346 = G(self3336,"branch-loc",L[1442]);
$step3334 = 4;
$al3341 = L[1443];
$field3347 = R.getColonFieldLoc(ED5,"loc",L[1443]);
if(R.isMethod($field3347)) {
$ans3340 = $field3347.full_meth(ED5,anf_arg3346);
} else {
if(!(R.isFunction($field3347))) {
R.ffi.throwNonFunApp(L[1443],$field3347);
}
$ans3340 = $field3347.app(anf_arg3346);
}
break;
case 4: var anf_arg3353 = $ans3340;
$al3341 = L[1444];
var anf_arg3348 = G(self3336,"should-be-singleton",L[1444]);
$al3341 = L[1444];
var anf_if3359 = R.checkWrapBoolean(anf_arg3348);
$step3334 = R.isPyretTrue(anf_if3359)?5:6;
break;
case 5: $step3334 = 7;
$al3341 = L[1445];
$field3349 = R.getColonFieldLoc(ED5,"text",L[1445]);
if(R.isMethod($field3349)) {
$ans3340 = $field3349.full_meth(ED5,("errored. The branch has an argument list but the corresponding variant is a singleton."));
} else {
if(!(R.isFunction($field3349))) {
R.ffi.throwNonFunApp(L[1445],$field3349);
}
$ans3340 = $field3349.app(("errored. The branch has an argument list but the corresponding variant is a singleton."));
}
break;
case 6: $step3334 = 7;
$al3341 = L[1446];
$field3350 = R.getColonFieldLoc(ED5,"text",L[1446]);
if(R.isMethod($field3350)) {
$ans3340 = $field3350.full_meth(ED5,("The branch doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
} else {
if(!(R.isFunction($field3350))) {
R.ffi.throwNonFunApp(L[1446],$field3350);
}
$ans3340 = $field3350.app(("The branch doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
}
break;
case 7: var anf_arg3354 = $ans3340;
$step3334 = 8;
$al3341 = L[1440];
$field3355 = R.getColonFieldLoc(anf_method_obj3351,"make3",L[1440]);
if(R.isMethod($field3355)) {
$ans3340 = $field3355.full_meth(anf_method_obj3351,anf_arg3352,anf_arg3353,anf_arg3354);
} else {
if(!(R.isFunction($field3355))) {
R.ffi.throwNonFunApp(L[1440],$field3355);
}
$ans3340 = $field3355.app(anf_arg3352,anf_arg3353,anf_arg3354);
}
break;
case 8: var anf_arg3357 = $ans3340;
$step3334 = 24;
$al3341 = L[1439];
$field3358 = R.getColonFieldLoc(anf_method_obj3356,"make1",L[1439]);
if(R.isMethod($field3358)) {
$ans3340 = $field3358.full_meth(anf_method_obj3356,anf_arg3357);
} else {
if(!(R.isFunction($field3358))) {
R.ffi.throwNonFunApp(L[1439],$field3358);
}
$ans3340 = $field3358.app(anf_arg3357);
}
break;
case 9: $al3341 = L[1447];
var anf_arg3360 = G(self3336,"branch-loc",L[1447]);
$step3334 = 10;
$al3341 = L[1448];
if(!(R.isFunction(src$available3338))) {
R.ffi.throwNonFunApp($al3341,src$available3338);
}
$ans3340 = src$available3338.app(anf_arg3360);
break;
case 10: var anf_arg3361 = $ans3340;
$al3341 = L[1448];
var anf_if3547 = R.checkWrapBoolean(anf_arg3361);
$step3334 = R.isPyretTrue(anf_if3547)?11:17;
break;
case 11: $al3341 = L[1449];
var anf_arg3362 = G(self3336,"cases-loc",L[1449]);
$step3334 = 12;
$al3341 = L[1509];
if(!(R.isFunction(maybe$ast3339))) {
R.ffi.throwNonFunApp($al3341,maybe$ast3339);
}
$ans3340 = maybe$ast3339.app(anf_arg3362);
break;
case 12: var cases3363 = $ans3340;
$step3334 = 13;
$al3341 = L[1508];
R._checkAnn(L[1508],R.getDotAnn(L[1508],"O",O13,"Option"),cases3363);
break;
case 13: var $cases_dispatch3531 = {"some":14,
"none":15};
$al3341 = L[1491];
$step3334 = $cases_dispatch3531[cases3363.$name] || 16;
break;
case 14: if(cases3363.$arity !== 1) {
if(cases3363.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1490],1,cases3363.$arity,L[1491]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1490],true,L[1491]);
}
}
$step3334 = 24;
$al3341 = L[1492];
var $temp_branch3447 = function($ast3364) {
var $step3448 = 0;
var $ans3449 = D;
var $al3450 = L[1450];
try {
if(R.isActivationRecord($ast3364)) {
$step3448 = $ast3364.step;
$al3450 = $ast3364.from;
$ans3449 = $ast3364.ans;
ast3364 = $ast3364.args[0];
branch3406 = $ast3364.vars[0];
anf_method_obj3441 = $ast3364.vars[1];
anf_method_obj3388 = $ast3364.vars[2];
anf_arg3389 = $ast3364.vars[3];
anf_arg3384 = $ast3364.vars[4];
anf_arg3390 = $ast3364.vars[5];
anf_arg3442 = $ast3364.vars[6];
anf_arg3443 = $ast3364.vars[7];
anf_method_obj3420 = $ast3364.vars[8];
anf_arg3421 = $ast3364.vars[9];
anf_arg3401 = $ast3364.vars[10];
anf_arg3422 = $ast3364.vars[11];
anf_arg3423 = $ast3364.vars[12];
anf_arg3416 = $ast3364.vars[13];
anf_arg3424 = $ast3364.vars[14];
anf_method_obj3436 = $ast3364.vars[15];
anf_arg3437 = $ast3364.vars[16];
anf_arg3432 = $ast3364.vars[17];
anf_arg3438 = $ast3364.vars[18];
} else {
var ast3364 = $ast3364;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3448) {
case 0: $al3450 = L[1450];
var anf_method_obj3375 = G(ast3364,"branches",L[1450]);
var $temp_lam3452 = function($b3367) {
var $step3451 = 0;
var $ans3453 = D;
var $al3454 = L[1456];
try {
if(R.isActivationRecord($b3367)) {
$step3451 = $b3367.step;
$al3454 = $b3367.from;
$ans3453 = $b3367.ans;
b3367 = $b3367.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1456],1,$t);
}
var b3367 = $b3367;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3451) {
case 0: $al3454 = L[1451];
var anf_bracket3370 = G(b3367,"l",L[1451]);
$al3454 = L[1452];
var anf_arg3372 = G(anf_bracket3370,"start-line",L[1452]);
$al3454 = L[1453];
var anf_bracket3371 = G(self3336,"branch-loc",L[1453]);
$al3454 = L[1454];
var anf_arg3373 = G(anf_bracket3371,"start-line",L[1454]);
$step3451 = 1;
$al3454 = L[1455];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al3454,equal$always2);
}
$ans3453 = equal$always2.app(anf_arg3372,anf_arg3373);
break;
case 1: ++R.GAS;
return $ans3453;
default: throw "No case numbered " + $step3451 + " in $temp_lam3452";
}
}
} catch($e3455) {
if(R.isCont($e3455) && ($step3451 !== 1)) {
$e3455.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3454,$temp_lam3452,$step3451,[b3367],[]);
}
if(R.isPyretException($e3455)) {
$e3455.pyretStack.push($al3454);
}
throw $e3455;
}
};
var anf_arg3376 = R.makeFunction($temp_lam3452,"");
$step3448 = 1;
$al3450 = L[1457];
$field3456 = R.getColonFieldLoc(anf_method_obj3375,"find",L[1457]);
if(R.isMethod($field3456)) {
$ans3449 = $field3456.full_meth(anf_method_obj3375,anf_arg3376);
} else {
if(!(R.isFunction($field3456))) {
R.ffi.throwNonFunApp(L[1457],$field3456);
}
$ans3449 = $field3456.app(anf_arg3376);
}
break;
case 1: var anf_bracket3378 = $ans3449;
$al3450 = L[1458];
var branch3406 = G(anf_bracket3378,"value",L[1458]);
$al3450 = L[1459];
var anf_method_obj3441 = G(ED5,"error",L[1459]);
$al3450 = L[1460];
var anf_method_obj3388 = G(ED5,"para",L[1460]);
$step3448 = 2;
$al3450 = L[1461];
$field3457 = R.getColonFieldLoc(ED5,"text",L[1461]);
if(R.isMethod($field3457)) {
$ans3449 = $field3457.full_meth(ED5,("Matching the pattern of this "));
} else {
if(!(R.isFunction($field3457))) {
R.ffi.throwNonFunApp(L[1461],$field3457);
}
$ans3449 = $field3457.app(("Matching the pattern of this "));
}
break;
case 2: var anf_arg3389 = $ans3449;
$step3448 = 3;
$al3450 = L[1462];
$field3458 = R.getColonFieldLoc(ED5,"text",L[1462]);
if(R.isMethod($field3458)) {
$ans3449 = $field3458.full_meth(ED5,("cases branch"));
} else {
if(!(R.isFunction($field3458))) {
R.ffi.throwNonFunApp(L[1462],$field3458);
}
$ans3449 = $field3458.app(("cases branch"));
}
break;
case 3: var anf_arg3384 = $ans3449;
$al3450 = L[1463];
var anf_method_obj3381 = G(ED5,"locs",L[1463]);
$al3450 = L[1464];
var anf_arg3382 = G(self3336,"branch-loc",L[1464]);
$step3448 = 4;
$al3450 = L[1463];
$field3459 = R.getColonFieldLoc(anf_method_obj3381,"make1",L[1463]);
if(R.isMethod($field3459)) {
$ans3449 = $field3459.full_meth(anf_method_obj3381,anf_arg3382);
} else {
if(!(R.isFunction($field3459))) {
R.ffi.throwNonFunApp(L[1463],$field3459);
}
$ans3449 = $field3459.app(anf_arg3382);
}
break;
case 4: var anf_arg3385 = $ans3449;
$step3448 = 5;
$al3450 = L[1465];
$field3460 = R.getColonFieldLoc(ED5,"highlight",L[1465]);
if(R.isMethod($field3460)) {
$ans3449 = $field3460.full_meth(ED5,anf_arg3384,anf_arg3385,(-1));
} else {
if(!(R.isFunction($field3460))) {
R.ffi.throwNonFunApp(L[1465],$field3460);
}
$ans3449 = $field3460.app(anf_arg3384,anf_arg3385,(-1));
}
break;
case 5: var anf_arg3390 = $ans3449;
$step3448 = 6;
$al3450 = L[1466];
$field3461 = R.getColonFieldLoc(ED5,"text",L[1466]);
if(R.isMethod($field3461)) {
$ans3449 = $field3461.full_meth(ED5,(" errored:"));
} else {
if(!(R.isFunction($field3461))) {
R.ffi.throwNonFunApp(L[1466],$field3461);
}
$ans3449 = $field3461.app((" errored:"));
}
break;
case 6: var anf_arg3391 = $ans3449;
$step3448 = 7;
$al3450 = L[1460];
$field3462 = R.getColonFieldLoc(anf_method_obj3388,"make3",L[1460]);
if(R.isMethod($field3462)) {
$ans3449 = $field3462.full_meth(anf_method_obj3388,anf_arg3389,anf_arg3390,anf_arg3391);
} else {
if(!(R.isFunction($field3462))) {
R.ffi.throwNonFunApp(L[1460],$field3462);
}
$ans3449 = $field3462.app(anf_arg3389,anf_arg3390,anf_arg3391);
}
break;
case 7: var anf_arg3442 = $ans3449;
$al3450 = L[1467];
var anf_arg3393 = G(self3336,"branch-loc",L[1467]);
$step3448 = 8;
$al3450 = L[1468];
$field3463 = R.getColonFieldLoc(ED5,"cmcode",L[1468]);
if(R.isMethod($field3463)) {
$ans3449 = $field3463.full_meth(ED5,anf_arg3393);
} else {
if(!(R.isFunction($field3463))) {
R.ffi.throwNonFunApp(L[1468],$field3463);
}
$ans3449 = $field3463.app(anf_arg3393);
}
break;
case 8: var anf_arg3443 = $ans3449;
$al3450 = L[1469];
var anf_arg3395 = G(self3336,"should-be-singleton",L[1469]);
$al3450 = L[1469];
var anf_if3446 = R.checkWrapBoolean(anf_arg3395);
$step3448 = R.isPyretTrue(anf_if3446)?9:19;
break;
case 9: $al3450 = L[1470];
var anf_method_obj3420 = G(ED5,"para",L[1470]);
$step3448 = 10;
$al3450 = L[1471];
$field3464 = R.getColonFieldLoc(ED5,"text",L[1471]);
if(R.isMethod($field3464)) {
$ans3449 = $field3464.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field3464))) {
R.ffi.throwNonFunApp(L[1471],$field3464);
}
$ans3449 = $field3464.app(("The "));
}
break;
case 10: var anf_arg3421 = $ans3449;
$step3448 = 11;
$al3450 = L[1472];
$field3465 = R.getColonFieldLoc(ED5,"text",L[1472]);
if(R.isMethod($field3465)) {
$ans3449 = $field3465.full_meth(ED5,("branch"));
} else {
if(!(R.isFunction($field3465))) {
R.ffi.throwNonFunApp(L[1472],$field3465);
}
$ans3449 = $field3465.app(("branch"));
}
break;
case 11: var anf_arg3401 = $ans3449;
$al3450 = L[1473];
var anf_method_obj3398 = G(ED5,"locs",L[1473]);
$al3450 = L[1474];
var anf_arg3399 = G(self3336,"branch-loc",L[1474]);
$step3448 = 12;
$al3450 = L[1473];
$field3466 = R.getColonFieldLoc(anf_method_obj3398,"make1",L[1473]);
if(R.isMethod($field3466)) {
$ans3449 = $field3466.full_meth(anf_method_obj3398,anf_arg3399);
} else {
if(!(R.isFunction($field3466))) {
R.ffi.throwNonFunApp(L[1473],$field3466);
}
$ans3449 = $field3466.app(anf_arg3399);
}
break;
case 12: var anf_arg3402 = $ans3449;
$step3448 = 13;
$al3450 = L[1475];
$field3467 = R.getColonFieldLoc(ED5,"highlight",L[1475]);
if(R.isMethod($field3467)) {
$ans3449 = $field3467.full_meth(ED5,anf_arg3401,anf_arg3402,(-1));
} else {
if(!(R.isFunction($field3467))) {
R.ffi.throwNonFunApp(L[1475],$field3467);
}
$ans3449 = $field3467.app(anf_arg3401,anf_arg3402,(-1));
}
break;
case 13: var anf_arg3422 = $ans3449;
$step3448 = 14;
$al3450 = L[1476];
$field3468 = R.getColonFieldLoc(ED5,"text",L[1476]);
if(R.isMethod($field3468)) {
$ans3449 = $field3468.full_meth(ED5,(" has an "));
} else {
if(!(R.isFunction($field3468))) {
R.ffi.throwNonFunApp(L[1476],$field3468);
}
$ans3449 = $field3468.app((" has an "));
}
break;
case 14: var anf_arg3423 = $ans3449;
$step3448 = 15;
$al3450 = L[1477];
$field3469 = R.getColonFieldLoc(ED5,"text",L[1477]);
if(R.isMethod($field3469)) {
$ans3449 = $field3469.full_meth(ED5,("argument list"));
} else {
if(!(R.isFunction($field3469))) {
R.ffi.throwNonFunApp(L[1477],$field3469);
}
$ans3449 = $field3469.app(("argument list"));
}
break;
case 15: var anf_arg3416 = $ans3449;
$al3450 = L[1478];
var anf_method_obj3413 = G(branch3406,"args",L[1478]);
var $temp_lam3471 = function($recv_3409) {
var $step3470 = 0;
var $ans3472 = D;
var $al3473 = L[1479];
try {
if(R.isActivationRecord($recv_3409)) {
$step3470 = $recv_3409.step;
$al3473 = $recv_3409.from;
$ans3472 = $recv_3409.ans;
recv_3409 = $recv_3409.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1479],1,$t);
}
var recv_3409 = $recv_3409;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3470) {
case 0: $step3470 = 1;
$al3473 = L[1479];
$ans3472 = G(recv_3409,"l",L[1479]);
break;
case 1: ++R.GAS;
return $ans3472;
default: throw "No case numbered " + $step3470 + " in $temp_lam3471";
}
}
} catch($e3474) {
if(R.isCont($e3474) && ($step3470 !== 1)) {
$e3474.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3473,$temp_lam3471,$step3470,[recv_3409],[]);
}
if(R.isPyretException($e3474)) {
$e3474.pyretStack.push($al3473);
}
throw $e3474;
}
};
var anf_arg3414 = R.makeFunction($temp_lam3471,"");
$step3448 = 16;
$al3450 = L[1480];
$field3475 = R.getColonFieldLoc(anf_method_obj3413,"map",L[1480]);
if(R.isMethod($field3475)) {
$ans3449 = $field3475.full_meth(anf_method_obj3413,anf_arg3414);
} else {
if(!(R.isFunction($field3475))) {
R.ffi.throwNonFunApp(L[1480],$field3475);
}
$ans3449 = $field3475.app(anf_arg3414);
}
break;
case 16: var anf_arg3417 = $ans3449;
$step3448 = 17;
$al3450 = L[1481];
$field3476 = R.getColonFieldLoc(ED5,"highlight",L[1481]);
if(R.isMethod($field3476)) {
$ans3449 = $field3476.full_meth(ED5,anf_arg3416,anf_arg3417,(0));
} else {
if(!(R.isFunction($field3476))) {
R.ffi.throwNonFunApp(L[1481],$field3476);
}
$ans3449 = $field3476.app(anf_arg3416,anf_arg3417,(0));
}
break;
case 17: var anf_arg3424 = $ans3449;
$step3448 = 18;
$al3450 = L[1482];
$field3477 = R.getColonFieldLoc(ED5,"text",L[1482]);
if(R.isMethod($field3477)) {
$ans3449 = $field3477.full_meth(ED5,(" but the corresponding variant is a singleton."));
} else {
if(!(R.isFunction($field3477))) {
R.ffi.throwNonFunApp(L[1482],$field3477);
}
$ans3449 = $field3477.app((" but the corresponding variant is a singleton."));
}
break;
case 18: var anf_arg3425 = $ans3449;
$step3448 = 25;
$al3450 = L[1470];
$field3478 = R.getColonFieldLoc(anf_method_obj3420,"make5",L[1470]);
if(R.isMethod($field3478)) {
$ans3449 = $field3478.full_meth(anf_method_obj3420,anf_arg3421,anf_arg3422,anf_arg3423,anf_arg3424,anf_arg3425);
} else {
if(!(R.isFunction($field3478))) {
R.ffi.throwNonFunApp(L[1470],$field3478);
}
$ans3449 = $field3478.app(anf_arg3421,anf_arg3422,anf_arg3423,anf_arg3424,anf_arg3425);
}
break;
case 19: $al3450 = L[1483];
var anf_method_obj3436 = G(ED5,"para",L[1483]);
$step3448 = 20;
$al3450 = L[1484];
$field3479 = R.getColonFieldLoc(ED5,"text",L[1484]);
if(R.isMethod($field3479)) {
$ans3449 = $field3479.full_meth(ED5,("The branch doesn't have an argument list in its "));
} else {
if(!(R.isFunction($field3479))) {
R.ffi.throwNonFunApp(L[1484],$field3479);
}
$ans3449 = $field3479.app(("The branch doesn't have an argument list in its "));
}
break;
case 20: var anf_arg3437 = $ans3449;
$step3448 = 21;
$al3450 = L[1485];
$field3480 = R.getColonFieldLoc(ED5,"text",L[1485]);
if(R.isMethod($field3480)) {
$ans3449 = $field3480.full_meth(ED5,("pattern"));
} else {
if(!(R.isFunction($field3480))) {
R.ffi.throwNonFunApp(L[1485],$field3480);
}
$ans3449 = $field3480.app(("pattern"));
}
break;
case 21: var anf_arg3432 = $ans3449;
$al3450 = L[1486];
var anf_method_obj3429 = G(ED5,"locs",L[1486]);
$al3450 = L[1487];
var anf_arg3430 = G(branch3406,"pat-loc",L[1487]);
$step3448 = 22;
$al3450 = L[1486];
$field3481 = R.getColonFieldLoc(anf_method_obj3429,"make1",L[1486]);
if(R.isMethod($field3481)) {
$ans3449 = $field3481.full_meth(anf_method_obj3429,anf_arg3430);
} else {
if(!(R.isFunction($field3481))) {
R.ffi.throwNonFunApp(L[1486],$field3481);
}
$ans3449 = $field3481.app(anf_arg3430);
}
break;
case 22: var anf_arg3433 = $ans3449;
$step3448 = 23;
$al3450 = L[1488];
$field3482 = R.getColonFieldLoc(ED5,"highlight",L[1488]);
if(R.isMethod($field3482)) {
$ans3449 = $field3482.full_meth(ED5,anf_arg3432,anf_arg3433,(0));
} else {
if(!(R.isFunction($field3482))) {
R.ffi.throwNonFunApp(L[1488],$field3482);
}
$ans3449 = $field3482.app(anf_arg3432,anf_arg3433,(0));
}
break;
case 23: var anf_arg3438 = $ans3449;
$step3448 = 24;
$al3450 = L[1489];
$field3483 = R.getColonFieldLoc(ED5,"text",L[1489]);
if(R.isMethod($field3483)) {
$ans3449 = $field3483.full_meth(ED5,(", but the corresponding variant is not a singleton."));
} else {
if(!(R.isFunction($field3483))) {
R.ffi.throwNonFunApp(L[1489],$field3483);
}
$ans3449 = $field3483.app((", but the corresponding variant is not a singleton."));
}
break;
case 24: var anf_arg3439 = $ans3449;
$step3448 = 25;
$al3450 = L[1483];
$field3484 = R.getColonFieldLoc(anf_method_obj3436,"make3",L[1483]);
if(R.isMethod($field3484)) {
$ans3449 = $field3484.full_meth(anf_method_obj3436,anf_arg3437,anf_arg3438,anf_arg3439);
} else {
if(!(R.isFunction($field3484))) {
R.ffi.throwNonFunApp(L[1483],$field3484);
}
$ans3449 = $field3484.app(anf_arg3437,anf_arg3438,anf_arg3439);
}
break;
case 25: var anf_arg3444 = $ans3449;
$step3448 = 26;
$al3450 = L[1459];
$field3485 = R.getColonFieldLoc(anf_method_obj3441,"make3",L[1459]);
if(R.isMethod($field3485)) {
$ans3449 = $field3485.full_meth(anf_method_obj3441,anf_arg3442,anf_arg3443,anf_arg3444);
} else {
if(!(R.isFunction($field3485))) {
R.ffi.throwNonFunApp(L[1459],$field3485);
}
$ans3449 = $field3485.app(anf_arg3442,anf_arg3443,anf_arg3444);
}
break;
case 26: ++R.GAS;
return $ans3449;
default: throw "No case numbered " + $step3448 + " in $temp_branch3447";
}
}
} catch($e3486) {
if(R.isCont($e3486) && ($step3448 !== 26)) {
$e3486.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3450,$temp_branch3447,$step3448,[ast3364],[branch3406,anf_method_obj3441,anf_method_obj3388,anf_arg3389,anf_arg3384,anf_arg3390,anf_arg3442,anf_arg3443,anf_method_obj3420,anf_arg3421,anf_arg3401,anf_arg3422,anf_arg3423,anf_arg3416,anf_arg3424,anf_method_obj3436,anf_arg3437,anf_arg3432,anf_arg3438]);
}
if(R.isPyretException($e3486)) {
$e3486.pyretStack.push($al3450);
}
throw $e3486;
}
};
$ans3340 = cases3363.$app_fields($temp_branch3447,[false]);
break;
case 15: if(cases3363.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1506],false,L[1491]);
}
$step3334 = 24;
$al3341 = L[1507];
var $temp_branch3515 = function($$resumer101) {
var $step3516 = 0;
var $ans3517 = D;
var $al3518 = L[1493];
try {
if(R.isActivationRecord($$resumer101)) {
$step3516 = $$resumer101.step;
$al3518 = $$resumer101.from;
$ans3517 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj3510 = $$resumer101.vars[0];
anf_method_obj3496 = $$resumer101.vars[1];
anf_arg3497 = $$resumer101.vars[2];
anf_arg3492 = $$resumer101.vars[3];
anf_arg3498 = $$resumer101.vars[4];
anf_arg3511 = $$resumer101.vars[5];
anf_method_obj3503 = $$resumer101.vars[6];
anf_method_obj3507 = $$resumer101.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3516) {
case 0: $al3518 = L[1493];
var anf_method_obj3510 = G(ED5,"error",L[1493]);
$al3518 = L[1494];
var anf_method_obj3496 = G(ED5,"para",L[1494]);
$step3516 = 1;
$al3518 = L[1495];
$field3519 = R.getColonFieldLoc(ED5,"text",L[1495]);
if(R.isMethod($field3519)) {
$ans3517 = $field3519.full_meth(ED5,("Matching a patten of this "));
} else {
if(!(R.isFunction($field3519))) {
R.ffi.throwNonFunApp(L[1495],$field3519);
}
$ans3517 = $field3519.app(("Matching a patten of this "));
}
break;
case 1: var anf_arg3497 = $ans3517;
$step3516 = 2;
$al3518 = L[1496];
$field3520 = R.getColonFieldLoc(ED5,"text",L[1496]);
if(R.isMethod($field3520)) {
$ans3517 = $field3520.full_meth(ED5,("cases branch"));
} else {
if(!(R.isFunction($field3520))) {
R.ffi.throwNonFunApp(L[1496],$field3520);
}
$ans3517 = $field3520.app(("cases branch"));
}
break;
case 2: var anf_arg3492 = $ans3517;
$al3518 = L[1497];
var anf_method_obj3489 = G(ED5,"locs",L[1497]);
$al3518 = L[1498];
var anf_arg3490 = G(self3336,"branch-loc",L[1498]);
$step3516 = 3;
$al3518 = L[1497];
$field3521 = R.getColonFieldLoc(anf_method_obj3489,"make1",L[1497]);
if(R.isMethod($field3521)) {
$ans3517 = $field3521.full_meth(anf_method_obj3489,anf_arg3490);
} else {
if(!(R.isFunction($field3521))) {
R.ffi.throwNonFunApp(L[1497],$field3521);
}
$ans3517 = $field3521.app(anf_arg3490);
}
break;
case 3: var anf_arg3493 = $ans3517;
$step3516 = 4;
$al3518 = L[1499];
$field3522 = R.getColonFieldLoc(ED5,"highlight",L[1499]);
if(R.isMethod($field3522)) {
$ans3517 = $field3522.full_meth(ED5,anf_arg3492,anf_arg3493,(0));
} else {
if(!(R.isFunction($field3522))) {
R.ffi.throwNonFunApp(L[1499],$field3522);
}
$ans3517 = $field3522.app(anf_arg3492,anf_arg3493,(0));
}
break;
case 4: var anf_arg3498 = $ans3517;
$step3516 = 5;
$al3518 = L[1500];
$field3523 = R.getColonFieldLoc(ED5,"text",L[1500]);
if(R.isMethod($field3523)) {
$ans3517 = $field3523.full_meth(ED5,(" errored."));
} else {
if(!(R.isFunction($field3523))) {
R.ffi.throwNonFunApp(L[1500],$field3523);
}
$ans3517 = $field3523.app((" errored."));
}
break;
case 5: var anf_arg3499 = $ans3517;
$step3516 = 6;
$al3518 = L[1494];
$field3524 = R.getColonFieldLoc(anf_method_obj3496,"make3",L[1494]);
if(R.isMethod($field3524)) {
$ans3517 = $field3524.full_meth(anf_method_obj3496,anf_arg3497,anf_arg3498,anf_arg3499);
} else {
if(!(R.isFunction($field3524))) {
R.ffi.throwNonFunApp(L[1494],$field3524);
}
$ans3517 = $field3524.app(anf_arg3497,anf_arg3498,anf_arg3499);
}
break;
case 6: var anf_arg3511 = $ans3517;
$al3518 = L[1501];
var anf_arg3501 = G(self3336,"should-be-singleton",L[1501]);
$al3518 = L[1501];
var anf_if3514 = R.checkWrapBoolean(anf_arg3501);
$step3516 = R.isPyretTrue(anf_if3514)?7:9;
break;
case 7: $al3518 = L[1502];
var anf_method_obj3503 = G(ED5,"para",L[1502]);
$step3516 = 8;
$al3518 = L[1503];
$field3525 = R.getColonFieldLoc(ED5,"text",L[1503]);
if(R.isMethod($field3525)) {
$ans3517 = $field3525.full_meth(ED5,("The branch has an argument list but the corresponding variant is a singleton."));
} else {
if(!(R.isFunction($field3525))) {
R.ffi.throwNonFunApp(L[1503],$field3525);
}
$ans3517 = $field3525.app(("The branch has an argument list but the corresponding variant is a singleton."));
}
break;
case 8: var anf_arg3504 = $ans3517;
$step3516 = 11;
$al3518 = L[1502];
$field3526 = R.getColonFieldLoc(anf_method_obj3503,"make1",L[1502]);
if(R.isMethod($field3526)) {
$ans3517 = $field3526.full_meth(anf_method_obj3503,anf_arg3504);
} else {
if(!(R.isFunction($field3526))) {
R.ffi.throwNonFunApp(L[1502],$field3526);
}
$ans3517 = $field3526.app(anf_arg3504);
}
break;
case 9: $al3518 = L[1504];
var anf_method_obj3507 = G(ED5,"para",L[1504]);
$step3516 = 10;
$al3518 = L[1505];
$field3527 = R.getColonFieldLoc(ED5,"text",L[1505]);
if(R.isMethod($field3527)) {
$ans3517 = $field3527.full_meth(ED5,("The branch doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
} else {
if(!(R.isFunction($field3527))) {
R.ffi.throwNonFunApp(L[1505],$field3527);
}
$ans3517 = $field3527.app(("The branch doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
}
break;
case 10: var anf_arg3508 = $ans3517;
$step3516 = 11;
$al3518 = L[1504];
$field3528 = R.getColonFieldLoc(anf_method_obj3507,"make1",L[1504]);
if(R.isMethod($field3528)) {
$ans3517 = $field3528.full_meth(anf_method_obj3507,anf_arg3508);
} else {
if(!(R.isFunction($field3528))) {
R.ffi.throwNonFunApp(L[1504],$field3528);
}
$ans3517 = $field3528.app(anf_arg3508);
}
break;
case 11: var anf_arg3512 = $ans3517;
$step3516 = 12;
$al3518 = L[1493];
$field3529 = R.getColonFieldLoc(anf_method_obj3510,"make2",L[1493]);
if(R.isMethod($field3529)) {
$ans3517 = $field3529.full_meth(anf_method_obj3510,anf_arg3511,anf_arg3512);
} else {
if(!(R.isFunction($field3529))) {
R.ffi.throwNonFunApp(L[1493],$field3529);
}
$ans3517 = $field3529.app(anf_arg3511,anf_arg3512);
}
break;
case 12: ++R.GAS;
return $ans3517;
default: throw "No case numbered " + $step3516 + " in $temp_branch3515";
}
}
} catch($e3530) {
if(R.isCont($e3530) && ($step3516 !== 12)) {
$e3530.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3518,$temp_branch3515,$step3516,[],[anf_method_obj3510,anf_method_obj3496,anf_arg3497,anf_arg3492,anf_arg3498,anf_arg3511,anf_method_obj3503,anf_method_obj3507]);
}
if(R.isPyretException($e3530)) {
$e3530.pyretStack.push($al3518);
}
throw $e3530;
}
};
$ans3340 = cases3363.$app_fields($temp_branch3515,[]);
break;
case 16: $step3334 = 24;
$al3341 = L[1491];
$ans3340 = R.throwNoCasesMatched(L[1491],cases3363);
break;
case 17: $al3341 = L[1510];
var anf_method_obj3543 = G(ED5,"error",L[1510]);
$al3341 = L[1511];
var anf_method_obj3538 = G(ED5,"para",L[1511]);
$step3334 = 18;
$al3341 = L[1512];
$field3532 = R.getColonFieldLoc(ED5,"text",L[1512]);
if(R.isMethod($field3532)) {
$ans3340 = $field3532.full_meth(ED5,("The cases branch at "));
} else {
if(!(R.isFunction($field3532))) {
R.ffi.throwNonFunApp(L[1512],$field3532);
}
$ans3340 = $field3532.app(("The cases branch at "));
}
break;
case 18: var anf_arg3539 = $ans3340;
$al3341 = L[1513];
var anf_arg3533 = G(self3336,"branch-loc",L[1513]);
$step3334 = 19;
$al3341 = L[1514];
$field3534 = R.getColonFieldLoc(ED5,"loc",L[1514]);
if(R.isMethod($field3534)) {
$ans3340 = $field3534.full_meth(ED5,anf_arg3533);
} else {
if(!(R.isFunction($field3534))) {
R.ffi.throwNonFunApp(L[1514],$field3534);
}
$ans3340 = $field3534.app(anf_arg3533);
}
break;
case 19: var anf_arg3540 = $ans3340;
$al3341 = L[1515];
var anf_arg3535 = G(self3336,"should-be-singleton",L[1515]);
$al3341 = L[1515];
var anf_if3546 = R.checkWrapBoolean(anf_arg3535);
$step3334 = R.isPyretTrue(anf_if3546)?20:21;
break;
case 20: $step3334 = 22;
$al3341 = L[1516];
$field3536 = R.getColonFieldLoc(ED5,"text",L[1516]);
if(R.isMethod($field3536)) {
$ans3340 = $field3536.full_meth(ED5,("errored. The branch has an argument list but the corresponding variant is a singleton."));
} else {
if(!(R.isFunction($field3536))) {
R.ffi.throwNonFunApp(L[1516],$field3536);
}
$ans3340 = $field3536.app(("errored. The branch has an argument list but the corresponding variant is a singleton."));
}
break;
case 21: $step3334 = 22;
$al3341 = L[1517];
$field3537 = R.getColonFieldLoc(ED5,"text",L[1517]);
if(R.isMethod($field3537)) {
$ans3340 = $field3537.full_meth(ED5,("The branch doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
} else {
if(!(R.isFunction($field3537))) {
R.ffi.throwNonFunApp(L[1517],$field3537);
}
$ans3340 = $field3537.app(("The branch doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
}
break;
case 22: var anf_arg3541 = $ans3340;
$step3334 = 23;
$al3341 = L[1511];
$field3542 = R.getColonFieldLoc(anf_method_obj3538,"make3",L[1511]);
if(R.isMethod($field3542)) {
$ans3340 = $field3542.full_meth(anf_method_obj3538,anf_arg3539,anf_arg3540,anf_arg3541);
} else {
if(!(R.isFunction($field3542))) {
R.ffi.throwNonFunApp(L[1511],$field3542);
}
$ans3340 = $field3542.app(anf_arg3539,anf_arg3540,anf_arg3541);
}
break;
case 23: var anf_arg3544 = $ans3340;
$step3334 = 24;
$al3341 = L[1510];
$field3545 = R.getColonFieldLoc(anf_method_obj3543,"make1",L[1510]);
if(R.isMethod($field3545)) {
$ans3340 = $field3545.full_meth(anf_method_obj3543,anf_arg3544);
} else {
if(!(R.isFunction($field3545))) {
R.ffi.throwNonFunApp(L[1510],$field3545);
}
$ans3340 = $field3545.app(anf_arg3544);
}
break;
case 24: ++R.GAS;
return $ans3340;
default: throw "No case numbered " + $step3334 + " in $temp_full3335";
}
}
} catch($e3549) {
if(R.isCont($e3549) && ($step3334 !== 24)) {
$e3549.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3341,$temp_full3335,$step3334,[self3336,maybe$stack$loc3337,src$available3338,maybe$ast3339],[anf_method_obj3356,anf_method_obj3351,anf_arg3352,anf_arg3353,cases3363,anf_method_obj3543,anf_method_obj3538,anf_arg3539,anf_arg3540]);
}
if(R.isPyretException($e3549)) {
$e3549.pyretStack.push($al3341);
}
throw $e3549;
}
};
var anf_variant_member6361 = R.makeMethod3($temp_full3335,"render-fancy-reason");
var $temp_full3551 = function($self3552) {
var $step3550 = 0;
var $ans3553 = D;
var $al3554 = L[1538];
try {
if(R.isActivationRecord($self3552)) {
$step3550 = $self3552.step;
$al3554 = $self3552.from;
$ans3553 = $self3552.ans;
self3552 = $self3552.args[0];
anf_method_obj3570 = $self3552.vars[0];
anf_method_obj3564 = $self3552.vars[1];
anf_arg3565 = $self3552.vars[2];
anf_arg3566 = $self3552.vars[3];
anf_arg3571 = $self3552.vars[4];
anf_method_obj3586 = $self3552.vars[5];
anf_method_obj3581 = $self3552.vars[6];
anf_arg3582 = $self3552.vars[7];
anf_arg3583 = $self3552.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1538],1,$t);
}
var self3552 = $self3552;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3550) {
case 0: $al3554 = L[1519];
var anf_method_obj3555 = G(self3552,"branch-loc",L[1519]);
$step3550 = 1;
$al3554 = L[1520];
$field3556 = R.getColonFieldLoc(anf_method_obj3555,"is-builtin",L[1520]);
if(R.isMethod($field3556)) {
$ans3553 = $field3556.full_meth(anf_method_obj3555);
} else {
if(!(R.isFunction($field3556))) {
R.ffi.throwNonFunApp(L[1520],$field3556);
}
$ans3553 = $field3556.app();
}
break;
case 1: var anf_arg3557 = $ans3553;
$al3554 = L[1520];
var anf_if3590 = R.checkWrapBoolean(anf_arg3557);
$step3550 = R.isPyretTrue(anf_if3590)?2:10;
break;
case 2: $al3554 = L[1521];
var anf_method_obj3570 = G(ED5,"error",L[1521]);
$al3554 = L[1522];
var anf_method_obj3564 = G(ED5,"para",L[1522]);
$step3550 = 3;
$al3554 = L[1523];
$field3558 = R.getColonFieldLoc(ED5,"text",L[1523]);
if(R.isMethod($field3558)) {
$ans3553 = $field3558.full_meth(ED5,("A cases branch in "));
} else {
if(!(R.isFunction($field3558))) {
R.ffi.throwNonFunApp(L[1523],$field3558);
}
$ans3553 = $field3558.app(("A cases branch in "));
}
break;
case 3: var anf_arg3565 = $ans3553;
$al3554 = L[1524];
var anf_arg3559 = G(self3552,"branch-loc",L[1524]);
$step3550 = 4;
$al3554 = L[1525];
$field3560 = R.getColonFieldLoc(ED5,"loc",L[1525]);
if(R.isMethod($field3560)) {
$ans3553 = $field3560.full_meth(ED5,anf_arg3559);
} else {
if(!(R.isFunction($field3560))) {
R.ffi.throwNonFunApp(L[1525],$field3560);
}
$ans3553 = $field3560.app(anf_arg3559);
}
break;
case 4: var anf_arg3566 = $ans3553;
$al3554 = L[1526];
var anf_arg3561 = G(self3552,"should-be-singleton",L[1526]);
$al3554 = L[1526];
var anf_if3574 = R.checkWrapBoolean(anf_arg3561);
$step3550 = R.isPyretTrue(anf_if3574)?5:6;
break;
case 5: $step3550 = 7;
$al3554 = L[1527];
$field3562 = R.getColonFieldLoc(ED5,"text",L[1527]);
if(R.isMethod($field3562)) {
$ans3553 = $field3562.full_meth(ED5,(" has an argument list but the corresponding variant is a singleton."));
} else {
if(!(R.isFunction($field3562))) {
R.ffi.throwNonFunApp(L[1527],$field3562);
}
$ans3553 = $field3562.app((" has an argument list but the corresponding variant is a singleton."));
}
break;
case 6: $step3550 = 7;
$al3554 = L[1528];
$field3563 = R.getColonFieldLoc(ED5,"text",L[1528]);
if(R.isMethod($field3563)) {
$ans3553 = $field3563.full_meth(ED5,(" doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
} else {
if(!(R.isFunction($field3563))) {
R.ffi.throwNonFunApp(L[1528],$field3563);
}
$ans3553 = $field3563.app((" doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
}
break;
case 7: var anf_arg3567 = $ans3553;
$step3550 = 8;
$al3554 = L[1522];
$field3568 = R.getColonFieldLoc(anf_method_obj3564,"make3",L[1522]);
if(R.isMethod($field3568)) {
$ans3553 = $field3568.full_meth(anf_method_obj3564,anf_arg3565,anf_arg3566,anf_arg3567);
} else {
if(!(R.isFunction($field3568))) {
R.ffi.throwNonFunApp(L[1522],$field3568);
}
$ans3553 = $field3568.app(anf_arg3565,anf_arg3566,anf_arg3567);
}
break;
case 8: var anf_arg3571 = $ans3553;
var anf_fun3569 = please$report$bug133.$var;
$step3550 = 9;
$al3554 = L[1529];
if(!(R.isFunction(anf_fun3569))) {
R.ffi.throwNonFunApp($al3554,anf_fun3569);
}
$ans3553 = anf_fun3569.app();
break;
case 9: var anf_arg3572 = $ans3553;
$step3550 = 17;
$al3554 = L[1521];
$field3573 = R.getColonFieldLoc(anf_method_obj3570,"make2",L[1521]);
if(R.isMethod($field3573)) {
$ans3553 = $field3573.full_meth(anf_method_obj3570,anf_arg3571,anf_arg3572);
} else {
if(!(R.isFunction($field3573))) {
R.ffi.throwNonFunApp(L[1521],$field3573);
}
$ans3553 = $field3573.app(anf_arg3571,anf_arg3572);
}
break;
case 10: $al3554 = L[1530];
var anf_method_obj3586 = G(ED5,"error",L[1530]);
$al3554 = L[1531];
var anf_method_obj3581 = G(ED5,"para",L[1531]);
$step3550 = 11;
$al3554 = L[1532];
$field3575 = R.getColonFieldLoc(ED5,"text",L[1532]);
if(R.isMethod($field3575)) {
$ans3553 = $field3575.full_meth(ED5,("The cases branch in "));
} else {
if(!(R.isFunction($field3575))) {
R.ffi.throwNonFunApp(L[1532],$field3575);
}
$ans3553 = $field3575.app(("The cases branch in "));
}
break;
case 11: var anf_arg3582 = $ans3553;
$al3554 = L[1533];
var anf_arg3576 = G(self3552,"branch-loc",L[1533]);
$step3550 = 12;
$al3554 = L[1534];
$field3577 = R.getColonFieldLoc(ED5,"loc",L[1534]);
if(R.isMethod($field3577)) {
$ans3553 = $field3577.full_meth(ED5,anf_arg3576);
} else {
if(!(R.isFunction($field3577))) {
R.ffi.throwNonFunApp(L[1534],$field3577);
}
$ans3553 = $field3577.app(anf_arg3576);
}
break;
case 12: var anf_arg3583 = $ans3553;
$al3554 = L[1535];
var anf_arg3578 = G(self3552,"should-be-singleton",L[1535]);
$al3554 = L[1535];
var anf_if3589 = R.checkWrapBoolean(anf_arg3578);
$step3550 = R.isPyretTrue(anf_if3589)?13:14;
break;
case 13: $step3550 = 15;
$al3554 = L[1536];
$field3579 = R.getColonFieldLoc(ED5,"text",L[1536]);
if(R.isMethod($field3579)) {
$ans3553 = $field3579.full_meth(ED5,(" has an argument list but the corresponding variant is a singleton."));
} else {
if(!(R.isFunction($field3579))) {
R.ffi.throwNonFunApp(L[1536],$field3579);
}
$ans3553 = $field3579.app((" has an argument list but the corresponding variant is a singleton."));
}
break;
case 14: $step3550 = 15;
$al3554 = L[1537];
$field3580 = R.getColonFieldLoc(ED5,"text",L[1537]);
if(R.isMethod($field3580)) {
$ans3553 = $field3580.full_meth(ED5,(" doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
} else {
if(!(R.isFunction($field3580))) {
R.ffi.throwNonFunApp(L[1537],$field3580);
}
$ans3553 = $field3580.app((" doesn't have an argument list in its pattern, but the corresponding variant is not a singleton."));
}
break;
case 15: var anf_arg3584 = $ans3553;
$step3550 = 16;
$al3554 = L[1531];
$field3585 = R.getColonFieldLoc(anf_method_obj3581,"make3",L[1531]);
if(R.isMethod($field3585)) {
$ans3553 = $field3585.full_meth(anf_method_obj3581,anf_arg3582,anf_arg3583,anf_arg3584);
} else {
if(!(R.isFunction($field3585))) {
R.ffi.throwNonFunApp(L[1531],$field3585);
}
$ans3553 = $field3585.app(anf_arg3582,anf_arg3583,anf_arg3584);
}
break;
case 16: var anf_arg3587 = $ans3553;
$step3550 = 17;
$al3554 = L[1530];
$field3588 = R.getColonFieldLoc(anf_method_obj3586,"make1",L[1530]);
if(R.isMethod($field3588)) {
$ans3553 = $field3588.full_meth(anf_method_obj3586,anf_arg3587);
} else {
if(!(R.isFunction($field3588))) {
R.ffi.throwNonFunApp(L[1530],$field3588);
}
$ans3553 = $field3588.app(anf_arg3587);
}
break;
case 17: ++R.GAS;
return $ans3553;
default: throw "No case numbered " + $step3550 + " in $temp_full3551";
}
}
} catch($e3591) {
if(R.isCont($e3591) && ($step3550 !== 17)) {
$e3591.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3554,$temp_full3551,$step3550,[self3552],[anf_method_obj3570,anf_method_obj3564,anf_arg3565,anf_arg3566,anf_arg3571,anf_method_obj3586,anf_method_obj3581,anf_arg3582,anf_arg3583]);
}
if(R.isPyretException($e3591)) {
$e3591.pyretStack.push($al3554);
}
throw $e3591;
}
};
var anf_variant_member6362 = R.makeMethod0($temp_full3551,"render-reason");
var $temp_full3593 = function($self3594,$maybe$stack$loc3595,$src$available3596,$maybe$ast3597) {
var $step3592 = 0;
var $ans3598 = D;
var $al3599 = L[1655];
try {
if(R.isActivationRecord($self3594)) {
$step3592 = $self3594.step;
$al3599 = $self3594.from;
$ans3598 = $self3594.ans;
self3594 = $self3594.args[0];
maybe$stack$loc3595 = $self3594.args[1];
src$available3596 = $self3594.args[2];
maybe$ast3597 = $self3594.args[3];
anf_method_obj3637 = $self3594.vars[0];
anf_method_obj3610 = $self3594.vars[1];
anf_arg3611 = $self3594.vars[2];
anf_arg3612 = $self3594.vars[3];
anf_arg3613 = $self3594.vars[4];
anf_arg3614 = $self3594.vars[5];
anf_arg3638 = $self3594.vars[6];
anf_method_obj3621 = $self3594.vars[7];
anf_arg3622 = $self3594.vars[8];
anf_arg3623 = $self3594.vars[9];
anf_arg3639 = $self3594.vars[10];
anf_method_obj3629 = $self3594.vars[11];
anf_arg3630 = $self3594.vars[12];
anf_arg3640 = $self3594.vars[13];
anf_method_obj3634 = $self3594.vars[14];
cases3646 = $self3594.vars[15];
anf_method_obj3881 = $self3594.vars[16];
anf_method_obj3854 = $self3594.vars[17];
anf_arg3855 = $self3594.vars[18];
anf_arg3856 = $self3594.vars[19];
anf_arg3857 = $self3594.vars[20];
anf_arg3858 = $self3594.vars[21];
anf_arg3882 = $self3594.vars[22];
anf_method_obj3865 = $self3594.vars[23];
anf_arg3866 = $self3594.vars[24];
anf_arg3867 = $self3594.vars[25];
anf_arg3883 = $self3594.vars[26];
anf_method_obj3873 = $self3594.vars[27];
anf_arg3874 = $self3594.vars[28];
anf_arg3884 = $self3594.vars[29];
anf_method_obj3878 = $self3594.vars[30];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1655],4,$t);
}
var self3594 = $self3594;
var maybe$stack$loc3595 = $maybe$stack$loc3595;
var src$available3596 = $src$available3596;
var maybe$ast3597 = $maybe$ast3597;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3592) {
case 0: $al3599 = L[1539];
var anf_method_obj3600 = G(self3594,"branch-loc",L[1539]);
$step3592 = 1;
$al3599 = L[1540];
$field3601 = R.getColonFieldLoc(anf_method_obj3600,"is-builtin",L[1540]);
if(R.isMethod($field3601)) {
$ans3598 = $field3601.full_meth(anf_method_obj3600);
} else {
if(!(R.isFunction($field3601))) {
R.ffi.throwNonFunApp(L[1540],$field3601);
}
$ans3598 = $field3601.app();
}
break;
case 1: var anf_arg3602 = $ans3598;
$al3599 = L[1540];
var anf_if3888 = R.checkWrapBoolean(anf_arg3602);
$step3592 = R.isPyretTrue(anf_if3888)?2:18;
break;
case 2: $al3599 = L[1541];
var anf_method_obj3637 = G(ED5,"error",L[1541]);
$al3599 = L[1542];
var anf_method_obj3610 = G(ED5,"para",L[1542]);
$step3592 = 3;
$al3599 = L[1543];
$field3603 = R.getColonFieldLoc(ED5,"text",L[1543]);
if(R.isMethod($field3603)) {
$ans3598 = $field3603.full_meth(ED5,("Matching a cases branch in "));
} else {
if(!(R.isFunction($field3603))) {
R.ffi.throwNonFunApp(L[1543],$field3603);
}
$ans3598 = $field3603.app(("Matching a cases branch in "));
}
break;
case 3: var anf_arg3611 = $ans3598;
$al3599 = L[1544];
var anf_arg3604 = G(self3594,"cases-loc",L[1544]);
$step3592 = 4;
$al3599 = L[1545];
$field3605 = R.getColonFieldLoc(ED5,"loc",L[1545]);
if(R.isMethod($field3605)) {
$ans3598 = $field3605.full_meth(ED5,anf_arg3604);
} else {
if(!(R.isFunction($field3605))) {
R.ffi.throwNonFunApp(L[1545],$field3605);
}
$ans3598 = $field3605.app(anf_arg3604);
}
break;
case 4: var anf_arg3612 = $ans3598;
$step3592 = 5;
$al3599 = L[1546];
$field3606 = R.getColonFieldLoc(ED5,"text",L[1546]);
if(R.isMethod($field3606)) {
$ans3598 = $field3606.full_meth(ED5,(" errored because of a problem with the branch pattern in "));
} else {
if(!(R.isFunction($field3606))) {
R.ffi.throwNonFunApp(L[1546],$field3606);
}
$ans3598 = $field3606.app((" errored because of a problem with the branch pattern in "));
}
break;
case 5: var anf_arg3613 = $ans3598;
$al3599 = L[1547];
var anf_arg3607 = G(self3594,"branch-loc",L[1547]);
$step3592 = 6;
$al3599 = L[1548];
$field3608 = R.getColonFieldLoc(ED5,"loc",L[1548]);
if(R.isMethod($field3608)) {
$ans3598 = $field3608.full_meth(ED5,anf_arg3607);
} else {
if(!(R.isFunction($field3608))) {
R.ffi.throwNonFunApp(L[1548],$field3608);
}
$ans3598 = $field3608.app(anf_arg3607);
}
break;
case 6: var anf_arg3614 = $ans3598;
$step3592 = 7;
$al3599 = L[1549];
$field3609 = R.getColonFieldLoc(ED5,"text",L[1549]);
if(R.isMethod($field3609)) {
$ans3598 = $field3609.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3609))) {
R.ffi.throwNonFunApp(L[1549],$field3609);
}
$ans3598 = $field3609.app(("."));
}
break;
case 7: var anf_arg3615 = $ans3598;
$step3592 = 8;
$al3599 = L[1542];
$field3616 = R.getColonFieldLoc(anf_method_obj3610,"make5",L[1542]);
if(R.isMethod($field3616)) {
$ans3598 = $field3616.full_meth(anf_method_obj3610,anf_arg3611,anf_arg3612,anf_arg3613,anf_arg3614,anf_arg3615);
} else {
if(!(R.isFunction($field3616))) {
R.ffi.throwNonFunApp(L[1542],$field3616);
}
$ans3598 = $field3616.app(anf_arg3611,anf_arg3612,anf_arg3613,anf_arg3614,anf_arg3615);
}
break;
case 8: var anf_arg3638 = $ans3598;
$al3599 = L[1550];
var anf_method_obj3621 = G(ED5,"para",L[1550]);
$step3592 = 9;
$al3599 = L[1551];
$field3617 = R.getColonFieldLoc(ED5,"text",L[1551]);
if(R.isMethod($field3617)) {
$ans3598 = $field3617.full_meth(ED5,("The cases pattern had "));
} else {
if(!(R.isFunction($field3617))) {
R.ffi.throwNonFunApp(L[1551],$field3617);
}
$ans3598 = $field3617.app(("The cases pattern had "));
}
break;
case 9: var anf_arg3622 = $ans3598;
$al3599 = L[1552];
var anf_arg3618 = G(self3594,"num-args",L[1552]);
$step3592 = 10;
$al3599 = L[1553];
$field3619 = R.getColonFieldLoc(ED5,"ed-field-bindings",L[1553]);
if(R.isMethod($field3619)) {
$ans3598 = $field3619.full_meth(ED5,anf_arg3618);
} else {
if(!(R.isFunction($field3619))) {
R.ffi.throwNonFunApp(L[1553],$field3619);
}
$ans3598 = $field3619.app(anf_arg3618);
}
break;
case 10: var anf_arg3623 = $ans3598;
$step3592 = 11;
$al3599 = L[1554];
$field3620 = R.getColonFieldLoc(ED5,"text",L[1554]);
if(R.isMethod($field3620)) {
$ans3598 = $field3620.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3620))) {
R.ffi.throwNonFunApp(L[1554],$field3620);
}
$ans3598 = $field3620.app(("."));
}
break;
case 11: var anf_arg3624 = $ans3598;
$step3592 = 12;
$al3599 = L[1550];
$field3625 = R.getColonFieldLoc(anf_method_obj3621,"make3",L[1550]);
if(R.isMethod($field3625)) {
$ans3598 = $field3625.full_meth(anf_method_obj3621,anf_arg3622,anf_arg3623,anf_arg3624);
} else {
if(!(R.isFunction($field3625))) {
R.ffi.throwNonFunApp(L[1550],$field3625);
}
$ans3598 = $field3625.app(anf_arg3622,anf_arg3623,anf_arg3624);
}
break;
case 12: var anf_arg3639 = $ans3598;
$al3599 = L[1555];
var anf_method_obj3629 = G(ED5,"para",L[1555]);
$step3592 = 13;
$al3599 = L[1556];
$field3626 = R.getColonFieldLoc(ED5,"text",L[1556]);
if(R.isMethod($field3626)) {
$ans3598 = $field3626.full_meth(ED5,("The corresponding variant of the datatype had "));
} else {
if(!(R.isFunction($field3626))) {
R.ffi.throwNonFunApp(L[1556],$field3626);
}
$ans3598 = $field3626.app(("The corresponding variant of the datatype had "));
}
break;
case 13: var anf_arg3630 = $ans3598;
$al3599 = L[1557];
var anf_arg3627 = G(self3594,"actual-arity",L[1557]);
$step3592 = 14;
$al3599 = L[1558];
$field3628 = R.getColonFieldLoc(ED5,"ed-fields",L[1558]);
if(R.isMethod($field3628)) {
$ans3598 = $field3628.full_meth(ED5,anf_arg3627);
} else {
if(!(R.isFunction($field3628))) {
R.ffi.throwNonFunApp(L[1558],$field3628);
}
$ans3598 = $field3628.app(anf_arg3627);
}
break;
case 14: var anf_arg3631 = $ans3598;
$step3592 = 15;
$al3599 = L[1555];
$field3632 = R.getColonFieldLoc(anf_method_obj3629,"make2",L[1555]);
if(R.isMethod($field3632)) {
$ans3598 = $field3632.full_meth(anf_method_obj3629,anf_arg3630,anf_arg3631);
} else {
if(!(R.isFunction($field3632))) {
R.ffi.throwNonFunApp(L[1555],$field3632);
}
$ans3598 = $field3632.app(anf_arg3630,anf_arg3631);
}
break;
case 15: var anf_arg3640 = $ans3598;
$al3599 = L[1559];
var anf_method_obj3634 = G(ED5,"para",L[1559]);
$step3592 = 16;
$al3599 = L[1560];
$field3633 = R.getColonFieldLoc(ED5,"text",L[1560]);
if(R.isMethod($field3633)) {
$ans3598 = $field3633.full_meth(ED5,("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
} else {
if(!(R.isFunction($field3633))) {
R.ffi.throwNonFunApp(L[1560],$field3633);
}
$ans3598 = $field3633.app(("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
}
break;
case 16: var anf_arg3635 = $ans3598;
$step3592 = 17;
$al3599 = L[1559];
$field3636 = R.getColonFieldLoc(anf_method_obj3634,"make1",L[1559]);
if(R.isMethod($field3636)) {
$ans3598 = $field3636.full_meth(anf_method_obj3634,anf_arg3635);
} else {
if(!(R.isFunction($field3636))) {
R.ffi.throwNonFunApp(L[1559],$field3636);
}
$ans3598 = $field3636.app(anf_arg3635);
}
break;
case 17: var anf_arg3641 = $ans3598;
$step3592 = 42;
$al3599 = L[1541];
$field3642 = R.getColonFieldLoc(anf_method_obj3637,"make4",L[1541]);
if(R.isMethod($field3642)) {
$ans3598 = $field3642.full_meth(anf_method_obj3637,anf_arg3638,anf_arg3639,anf_arg3640,anf_arg3641);
} else {
if(!(R.isFunction($field3642))) {
R.ffi.throwNonFunApp(L[1541],$field3642);
}
$ans3598 = $field3642.app(anf_arg3638,anf_arg3639,anf_arg3640,anf_arg3641);
}
break;
case 18: $al3599 = L[1561];
var anf_arg3643 = G(self3594,"branch-loc",L[1561]);
$step3592 = 19;
$al3599 = L[1562];
if(!(R.isFunction(src$available3596))) {
R.ffi.throwNonFunApp($al3599,src$available3596);
}
$ans3598 = src$available3596.app(anf_arg3643);
break;
case 19: var anf_arg3644 = $ans3598;
$al3599 = L[1562];
var anf_if3887 = R.checkWrapBoolean(anf_arg3644);
$step3592 = R.isPyretTrue(anf_if3887)?20:26;
break;
case 20: $al3599 = L[1563];
var anf_arg3645 = G(self3594,"cases-loc",L[1563]);
$step3592 = 21;
$al3599 = L[1634];
if(!(R.isFunction(maybe$ast3597))) {
R.ffi.throwNonFunApp($al3599,maybe$ast3597);
}
$ans3598 = maybe$ast3597.app(anf_arg3645);
break;
case 21: var cases3646 = $ans3598;
$step3592 = 22;
$al3599 = L[1633];
R._checkAnn(L[1633],R.getDotAnn(L[1633],"O",O13,"Option"),cases3646);
break;
case 22: var $cases_dispatch3846 = {"some":23,
"none":24};
$al3599 = L[1608];
$step3592 = $cases_dispatch3846[cases3646.$name] || 25;
break;
case 23: if(cases3646.$arity !== 1) {
if(cases3646.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1607],1,cases3646.$arity,L[1608]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1607],true,L[1608]);
}
}
$step3592 = 42;
$al3599 = L[1609];
var $temp_branch3740 = function($cases$ast3647) {
var $step3741 = 0;
var $ans3742 = D;
var $al3743 = L[1564];
try {
if(R.isActivationRecord($cases$ast3647)) {
$step3741 = $cases$ast3647.step;
$al3743 = $cases$ast3647.from;
$ans3742 = $cases$ast3647.ans;
cases$ast3647 = $cases$ast3647.args[0];
branch3664 = $cases$ast3647.vars[0];
anf_method_obj3733 = $cases$ast3647.vars[1];
anf_method_obj3680 = $cases$ast3647.vars[2];
anf_arg3681 = $cases$ast3647.vars[3];
anf_arg3668 = $cases$ast3647.vars[4];
anf_arg3682 = $cases$ast3647.vars[5];
anf_arg3683 = $cases$ast3647.vars[6];
anf_arg3676 = $cases$ast3647.vars[7];
anf_arg3684 = $cases$ast3647.vars[8];
anf_arg3734 = $cases$ast3647.vars[9];
anf_arg3735 = $cases$ast3647.vars[10];
anf_method_obj3717 = $cases$ast3647.vars[11];
anf_arg3718 = $cases$ast3647.vars[12];
cases3690 = $cases$ast3647.vars[13];
args3699 = $cases$ast3647.vars[14];
anf_arg3702 = $cases$ast3647.vars[15];
anf_arg3719 = $cases$ast3647.vars[16];
anf_arg3736 = $cases$ast3647.vars[17];
anf_method_obj3725 = $cases$ast3647.vars[18];
anf_arg3726 = $cases$ast3647.vars[19];
anf_arg3737 = $cases$ast3647.vars[20];
anf_method_obj3730 = $cases$ast3647.vars[21];
} else {
var cases$ast3647 = $cases$ast3647;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3741) {
case 0: $al3743 = L[1564];
var anf_method_obj3658 = G(cases$ast3647,"branches",L[1564]);
var $temp_lam3745 = function($b3650) {
var $step3744 = 0;
var $ans3746 = D;
var $al3747 = L[1570];
try {
if(R.isActivationRecord($b3650)) {
$step3744 = $b3650.step;
$al3747 = $b3650.from;
$ans3746 = $b3650.ans;
b3650 = $b3650.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1570],1,$t);
}
var b3650 = $b3650;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3744) {
case 0: $al3747 = L[1565];
var anf_bracket3653 = G(b3650,"l",L[1565]);
$al3747 = L[1566];
var anf_arg3655 = G(anf_bracket3653,"start-line",L[1566]);
$al3747 = L[1567];
var anf_bracket3654 = G(self3594,"branch-loc",L[1567]);
$al3747 = L[1568];
var anf_arg3656 = G(anf_bracket3654,"start-line",L[1568]);
$step3744 = 1;
$al3747 = L[1569];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al3747,equal$always2);
}
$ans3746 = equal$always2.app(anf_arg3655,anf_arg3656);
break;
case 1: ++R.GAS;
return $ans3746;
default: throw "No case numbered " + $step3744 + " in $temp_lam3745";
}
}
} catch($e3748) {
if(R.isCont($e3748) && ($step3744 !== 1)) {
$e3748.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3747,$temp_lam3745,$step3744,[b3650],[]);
}
if(R.isPyretException($e3748)) {
$e3748.pyretStack.push($al3747);
}
throw $e3748;
}
};
var anf_arg3659 = R.makeFunction($temp_lam3745,"");
$step3741 = 1;
$al3743 = L[1571];
$field3749 = R.getColonFieldLoc(anf_method_obj3658,"find",L[1571]);
if(R.isMethod($field3749)) {
$ans3742 = $field3749.full_meth(anf_method_obj3658,anf_arg3659);
} else {
if(!(R.isFunction($field3749))) {
R.ffi.throwNonFunApp(L[1571],$field3749);
}
$ans3742 = $field3749.app(anf_arg3659);
}
break;
case 1: var anf_bracket3661 = $ans3742;
$al3743 = L[1572];
var branch3664 = G(anf_bracket3661,"value",L[1572]);
$al3743 = L[1573];
var anf_method_obj3733 = G(ED5,"error",L[1573]);
$al3743 = L[1574];
var anf_method_obj3680 = G(ED5,"para",L[1574]);
$step3741 = 2;
$al3743 = L[1575];
$field3750 = R.getColonFieldLoc(ED5,"text",L[1575]);
if(R.isMethod($field3750)) {
$ans3742 = $field3750.full_meth(ED5,("Matching the "));
} else {
if(!(R.isFunction($field3750))) {
R.ffi.throwNonFunApp(L[1575],$field3750);
}
$ans3742 = $field3750.app(("Matching the "));
}
break;
case 2: var anf_arg3681 = $ans3742;
$step3741 = 3;
$al3743 = L[1576];
$field3751 = R.getColonFieldLoc(ED5,"text",L[1576]);
if(R.isMethod($field3751)) {
$ans3742 = $field3751.full_meth(ED5,("pattern"));
} else {
if(!(R.isFunction($field3751))) {
R.ffi.throwNonFunApp(L[1576],$field3751);
}
$ans3742 = $field3751.app(("pattern"));
}
break;
case 3: var anf_arg3668 = $ans3742;
$al3743 = L[1577];
var anf_method_obj3665 = G(ED5,"locs",L[1577]);
$al3743 = L[1578];
var anf_arg3666 = G(branch3664,"pat-loc",L[1578]);
$step3741 = 4;
$al3743 = L[1577];
$field3752 = R.getColonFieldLoc(anf_method_obj3665,"make1",L[1577]);
if(R.isMethod($field3752)) {
$ans3742 = $field3752.full_meth(anf_method_obj3665,anf_arg3666);
} else {
if(!(R.isFunction($field3752))) {
R.ffi.throwNonFunApp(L[1577],$field3752);
}
$ans3742 = $field3752.app(anf_arg3666);
}
break;
case 4: var anf_arg3669 = $ans3742;
$step3741 = 5;
$al3743 = L[1579];
$field3753 = R.getColonFieldLoc(ED5,"highlight",L[1579]);
if(R.isMethod($field3753)) {
$ans3742 = $field3753.full_meth(ED5,anf_arg3668,anf_arg3669,(0));
} else {
if(!(R.isFunction($field3753))) {
R.ffi.throwNonFunApp(L[1579],$field3753);
}
$ans3742 = $field3753.app(anf_arg3668,anf_arg3669,(0));
}
break;
case 5: var anf_arg3682 = $ans3742;
$step3741 = 6;
$al3743 = L[1580];
$field3754 = R.getColonFieldLoc(ED5,"text",L[1580]);
if(R.isMethod($field3754)) {
$ans3742 = $field3754.full_meth(ED5,(" of this "));
} else {
if(!(R.isFunction($field3754))) {
R.ffi.throwNonFunApp(L[1580],$field3754);
}
$ans3742 = $field3754.app((" of this "));
}
break;
case 6: var anf_arg3683 = $ans3742;
$step3741 = 7;
$al3743 = L[1581];
$field3755 = R.getColonFieldLoc(ED5,"text",L[1581]);
if(R.isMethod($field3755)) {
$ans3742 = $field3755.full_meth(ED5,("cases branch"));
} else {
if(!(R.isFunction($field3755))) {
R.ffi.throwNonFunApp(L[1581],$field3755);
}
$ans3742 = $field3755.app(("cases branch"));
}
break;
case 7: var anf_arg3676 = $ans3742;
$al3743 = L[1582];
var anf_method_obj3673 = G(ED5,"locs",L[1582]);
$al3743 = L[1583];
var anf_arg3674 = G(self3594,"branch-loc",L[1583]);
$step3741 = 8;
$al3743 = L[1582];
$field3756 = R.getColonFieldLoc(anf_method_obj3673,"make1",L[1582]);
if(R.isMethod($field3756)) {
$ans3742 = $field3756.full_meth(anf_method_obj3673,anf_arg3674);
} else {
if(!(R.isFunction($field3756))) {
R.ffi.throwNonFunApp(L[1582],$field3756);
}
$ans3742 = $field3756.app(anf_arg3674);
}
break;
case 8: var anf_arg3677 = $ans3742;
$step3741 = 9;
$al3743 = L[1584];
$field3757 = R.getColonFieldLoc(ED5,"highlight",L[1584]);
if(R.isMethod($field3757)) {
$ans3742 = $field3757.full_meth(ED5,anf_arg3676,anf_arg3677,(-1));
} else {
if(!(R.isFunction($field3757))) {
R.ffi.throwNonFunApp(L[1584],$field3757);
}
$ans3742 = $field3757.app(anf_arg3676,anf_arg3677,(-1));
}
break;
case 9: var anf_arg3684 = $ans3742;
$step3741 = 10;
$al3743 = L[1585];
$field3758 = R.getColonFieldLoc(ED5,"text",L[1585]);
if(R.isMethod($field3758)) {
$ans3742 = $field3758.full_meth(ED5,(" errored."));
} else {
if(!(R.isFunction($field3758))) {
R.ffi.throwNonFunApp(L[1585],$field3758);
}
$ans3742 = $field3758.app((" errored."));
}
break;
case 10: var anf_arg3685 = $ans3742;
$step3741 = 11;
$al3743 = L[1574];
$field3759 = R.getColonFieldLoc(anf_method_obj3680,"make5",L[1574]);
if(R.isMethod($field3759)) {
$ans3742 = $field3759.full_meth(anf_method_obj3680,anf_arg3681,anf_arg3682,anf_arg3683,anf_arg3684,anf_arg3685);
} else {
if(!(R.isFunction($field3759))) {
R.ffi.throwNonFunApp(L[1574],$field3759);
}
$ans3742 = $field3759.app(anf_arg3681,anf_arg3682,anf_arg3683,anf_arg3684,anf_arg3685);
}
break;
case 11: var anf_arg3734 = $ans3742;
$al3743 = L[1586];
var anf_arg3687 = G(branch3664,"pat-loc",L[1586]);
$step3741 = 12;
$al3743 = L[1587];
$field3760 = R.getColonFieldLoc(ED5,"cmcode",L[1587]);
if(R.isMethod($field3760)) {
$ans3742 = $field3760.full_meth(ED5,anf_arg3687);
} else {
if(!(R.isFunction($field3760))) {
R.ffi.throwNonFunApp(L[1587],$field3760);
}
$ans3742 = $field3760.app(anf_arg3687);
}
break;
case 12: var anf_arg3735 = $ans3742;
$al3743 = L[1588];
var anf_method_obj3717 = G(ED5,"para",L[1588]);
$step3741 = 13;
$al3743 = L[1589];
$field3761 = R.getColonFieldLoc(ED5,"text",L[1589]);
if(R.isMethod($field3761)) {
$ans3742 = $field3761.full_meth(ED5,("The cases pattern had "));
} else {
if(!(R.isFunction($field3761))) {
R.ffi.throwNonFunApp(L[1589],$field3761);
}
$ans3742 = $field3761.app(("The cases pattern had "));
}
break;
case 13: var anf_arg3718 = $ans3742;
var cases3690 = branch3664;
var $cases_dispatch3771 = {"s-cases-branch":14,
"s-singleton-cases-branch":17};
$al3743 = L[1596];
$step3741 = $cases_dispatch3771[cases3690.$name] || 18;
break;
case 14: if(cases3690.$arity !== 5) {
if(cases3690.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1595],5,cases3690.$arity,L[1596]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1595],true,L[1596]);
}
}
var $fn187 = cases3690.$constructor.$fieldNames;
R.derefField(cases3690.dict[$fn187[0]],cases3690.$mut_fields_mask[0],false);
R.derefField(cases3690.dict[$fn187[1]],cases3690.$mut_fields_mask[1],false);
R.derefField(cases3690.dict[$fn187[2]],cases3690.$mut_fields_mask[2],false);
var args3699 = R.derefField(cases3690.dict[$fn187[3]],cases3690.$mut_fields_mask[3],false);
R.derefField(cases3690.dict[$fn187[4]],cases3690.$mut_fields_mask[4],false);
$al3743 = L[1590];
var anf_arg3691 = G(self3594,"num-args",L[1590]);
$step3741 = 15;
$al3743 = L[1591];
$field3762 = R.getColonFieldLoc(ED5,"ed-field-bindings",L[1591]);
if(R.isMethod($field3762)) {
$ans3742 = $field3762.full_meth(ED5,anf_arg3691);
} else {
if(!(R.isFunction($field3762))) {
R.ffi.throwNonFunApp(L[1591],$field3762);
}
$ans3742 = $field3762.app(anf_arg3691);
}
break;
case 15: var anf_arg3702 = $ans3742;
var $temp_lam3764 = function($recv_3695) {
var $step3763 = 0;
var $ans3765 = D;
var $al3766 = L[1592];
try {
if(R.isActivationRecord($recv_3695)) {
$step3763 = $recv_3695.step;
$al3766 = $recv_3695.from;
$ans3765 = $recv_3695.ans;
recv_3695 = $recv_3695.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1592],1,$t);
}
var recv_3695 = $recv_3695;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3763) {
case 0: $step3763 = 1;
$al3766 = L[1592];
$ans3765 = G(recv_3695,"l",L[1592]);
break;
case 1: ++R.GAS;
return $ans3765;
default: throw "No case numbered " + $step3763 + " in $temp_lam3764";
}
}
} catch($e3767) {
if(R.isCont($e3767) && ($step3763 !== 1)) {
$e3767.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3766,$temp_lam3764,$step3763,[recv_3695],[]);
}
if(R.isPyretException($e3767)) {
$e3767.pyretStack.push($al3766);
}
throw $e3767;
}
};
var anf_arg3700 = R.makeFunction($temp_lam3764,"");
$step3741 = 16;
$al3743 = L[1593];
$field3768 = R.getColonFieldLoc(args3699,"map",L[1593]);
if(R.isMethod($field3768)) {
$ans3742 = $field3768.full_meth(args3699,anf_arg3700);
} else {
if(!(R.isFunction($field3768))) {
R.ffi.throwNonFunApp(L[1593],$field3768);
}
$ans3742 = $field3768.app(anf_arg3700);
}
break;
case 16: var anf_arg3703 = $ans3742;
$step3741 = 19;
$al3743 = L[1594];
$field3769 = R.getColonFieldLoc(ED5,"highlight",L[1594]);
if(R.isMethod($field3769)) {
$ans3742 = $field3769.full_meth(ED5,anf_arg3702,anf_arg3703,(1));
} else {
if(!(R.isFunction($field3769))) {
R.ffi.throwNonFunApp(L[1594],$field3769);
}
$ans3742 = $field3769.app(anf_arg3702,anf_arg3703,(1));
}
break;
case 17: if(cases3690.$arity !== 4) {
if(cases3690.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1599],4,cases3690.$arity,L[1596]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1599],true,L[1596]);
}
}
var $fn187 = cases3690.$constructor.$fieldNames;
R.derefField(cases3690.dict[$fn187[0]],cases3690.$mut_fields_mask[0],false);
R.derefField(cases3690.dict[$fn187[1]],cases3690.$mut_fields_mask[1],false);
R.derefField(cases3690.dict[$fn187[2]],cases3690.$mut_fields_mask[2],false);
R.derefField(cases3690.dict[$fn187[3]],cases3690.$mut_fields_mask[3],false);
$al3743 = L[1597];
var anf_arg3709 = G(self3594,"num-args",L[1597]);
$step3741 = 19;
$al3743 = L[1598];
$field3770 = R.getColonFieldLoc(ED5,"ed-field-bindings",L[1598]);
if(R.isMethod($field3770)) {
$ans3742 = $field3770.full_meth(ED5,anf_arg3709);
} else {
if(!(R.isFunction($field3770))) {
R.ffi.throwNonFunApp(L[1598],$field3770);
}
$ans3742 = $field3770.app(anf_arg3709);
}
break;
case 18: $step3741 = 19;
$al3743 = L[1596];
$ans3742 = R.throwNoCasesMatched(L[1596],cases3690);
break;
case 19: var anf_arg3719 = $ans3742;
$step3741 = 20;
$al3743 = L[1600];
$field3772 = R.getColonFieldLoc(ED5,"text",L[1600]);
if(R.isMethod($field3772)) {
$ans3742 = $field3772.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3772))) {
R.ffi.throwNonFunApp(L[1600],$field3772);
}
$ans3742 = $field3772.app(("."));
}
break;
case 20: var anf_arg3720 = $ans3742;
$step3741 = 21;
$al3743 = L[1588];
$field3773 = R.getColonFieldLoc(anf_method_obj3717,"make3",L[1588]);
if(R.isMethod($field3773)) {
$ans3742 = $field3773.full_meth(anf_method_obj3717,anf_arg3718,anf_arg3719,anf_arg3720);
} else {
if(!(R.isFunction($field3773))) {
R.ffi.throwNonFunApp(L[1588],$field3773);
}
$ans3742 = $field3773.app(anf_arg3718,anf_arg3719,anf_arg3720);
}
break;
case 21: var anf_arg3736 = $ans3742;
$al3743 = L[1601];
var anf_method_obj3725 = G(ED5,"para",L[1601]);
$step3741 = 22;
$al3743 = L[1602];
$field3774 = R.getColonFieldLoc(ED5,"text",L[1602]);
if(R.isMethod($field3774)) {
$ans3742 = $field3774.full_meth(ED5,("The corresponding variant is declared with "));
} else {
if(!(R.isFunction($field3774))) {
R.ffi.throwNonFunApp(L[1602],$field3774);
}
$ans3742 = $field3774.app(("The corresponding variant is declared with "));
}
break;
case 22: var anf_arg3726 = $ans3742;
$al3743 = L[1603];
var anf_arg3723 = G(self3594,"actual-arity",L[1603]);
$step3741 = 23;
$al3743 = L[1604];
$field3775 = R.getColonFieldLoc(ED5,"ed-fields",L[1604]);
if(R.isMethod($field3775)) {
$ans3742 = $field3775.full_meth(ED5,anf_arg3723);
} else {
if(!(R.isFunction($field3775))) {
R.ffi.throwNonFunApp(L[1604],$field3775);
}
$ans3742 = $field3775.app(anf_arg3723);
}
break;
case 23: var anf_arg3727 = $ans3742;
$step3741 = 24;
$al3743 = L[1601];
$field3776 = R.getColonFieldLoc(anf_method_obj3725,"make2",L[1601]);
if(R.isMethod($field3776)) {
$ans3742 = $field3776.full_meth(anf_method_obj3725,anf_arg3726,anf_arg3727);
} else {
if(!(R.isFunction($field3776))) {
R.ffi.throwNonFunApp(L[1601],$field3776);
}
$ans3742 = $field3776.app(anf_arg3726,anf_arg3727);
}
break;
case 24: var anf_arg3737 = $ans3742;
$al3743 = L[1605];
var anf_method_obj3730 = G(ED5,"para",L[1605]);
$step3741 = 25;
$al3743 = L[1606];
$field3777 = R.getColonFieldLoc(ED5,"text",L[1606]);
if(R.isMethod($field3777)) {
$ans3742 = $field3777.full_meth(ED5,("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
} else {
if(!(R.isFunction($field3777))) {
R.ffi.throwNonFunApp(L[1606],$field3777);
}
$ans3742 = $field3777.app(("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
}
break;
case 25: var anf_arg3731 = $ans3742;
$step3741 = 26;
$al3743 = L[1605];
$field3778 = R.getColonFieldLoc(anf_method_obj3730,"make1",L[1605]);
if(R.isMethod($field3778)) {
$ans3742 = $field3778.full_meth(anf_method_obj3730,anf_arg3731);
} else {
if(!(R.isFunction($field3778))) {
R.ffi.throwNonFunApp(L[1605],$field3778);
}
$ans3742 = $field3778.app(anf_arg3731);
}
break;
case 26: var anf_arg3738 = $ans3742;
$step3741 = 27;
$al3743 = L[1573];
$field3779 = R.getColonFieldLoc(anf_method_obj3733,"make5",L[1573]);
if(R.isMethod($field3779)) {
$ans3742 = $field3779.full_meth(anf_method_obj3733,anf_arg3734,anf_arg3735,anf_arg3736,anf_arg3737,anf_arg3738);
} else {
if(!(R.isFunction($field3779))) {
R.ffi.throwNonFunApp(L[1573],$field3779);
}
$ans3742 = $field3779.app(anf_arg3734,anf_arg3735,anf_arg3736,anf_arg3737,anf_arg3738);
}
break;
case 27: ++R.GAS;
return $ans3742;
default: throw "No case numbered " + $step3741 + " in $temp_branch3740";
}
}
} catch($e3780) {
if(R.isCont($e3780) && ($step3741 !== 27)) {
$e3780.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3743,$temp_branch3740,$step3741,[cases$ast3647],[branch3664,anf_method_obj3733,anf_method_obj3680,anf_arg3681,anf_arg3668,anf_arg3682,anf_arg3683,anf_arg3676,anf_arg3684,anf_arg3734,anf_arg3735,anf_method_obj3717,anf_arg3718,cases3690,args3699,anf_arg3702,anf_arg3719,anf_arg3736,anf_method_obj3725,anf_arg3726,anf_arg3737,anf_method_obj3730]);
}
if(R.isPyretException($e3780)) {
$e3780.pyretStack.push($al3743);
}
throw $e3780;
}
};
$ans3598 = cases3646.$app_fields($temp_branch3740,[false]);
break;
case 24: if(cases3646.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1631],false,L[1608]);
}
$step3592 = 42;
$al3599 = L[1632];
var $temp_branch3824 = function($$resumer101) {
var $step3825 = 0;
var $ans3826 = D;
var $al3827 = L[1610];
try {
if(R.isActivationRecord($$resumer101)) {
$step3825 = $$resumer101.step;
$al3827 = $$resumer101.from;
$ans3826 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj3817 = $$resumer101.vars[0];
anf_method_obj3790 = $$resumer101.vars[1];
anf_arg3791 = $$resumer101.vars[2];
anf_arg3786 = $$resumer101.vars[3];
anf_arg3792 = $$resumer101.vars[4];
anf_arg3818 = $$resumer101.vars[5];
anf_arg3819 = $$resumer101.vars[6];
anf_method_obj3801 = $$resumer101.vars[7];
anf_arg3802 = $$resumer101.vars[8];
anf_arg3803 = $$resumer101.vars[9];
anf_arg3820 = $$resumer101.vars[10];
anf_method_obj3809 = $$resumer101.vars[11];
anf_arg3810 = $$resumer101.vars[12];
anf_arg3821 = $$resumer101.vars[13];
anf_method_obj3814 = $$resumer101.vars[14];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3825) {
case 0: $al3827 = L[1610];
var anf_method_obj3817 = G(ED5,"error",L[1610]);
$al3827 = L[1611];
var anf_method_obj3790 = G(ED5,"para",L[1611]);
$step3825 = 1;
$al3827 = L[1612];
$field3828 = R.getColonFieldLoc(ED5,"text",L[1612]);
if(R.isMethod($field3828)) {
$ans3826 = $field3828.full_meth(ED5,("Matching the pattern of a "));
} else {
if(!(R.isFunction($field3828))) {
R.ffi.throwNonFunApp(L[1612],$field3828);
}
$ans3826 = $field3828.app(("Matching the pattern of a "));
}
break;
case 1: var anf_arg3791 = $ans3826;
$step3825 = 2;
$al3827 = L[1613];
$field3829 = R.getColonFieldLoc(ED5,"text",L[1613]);
if(R.isMethod($field3829)) {
$ans3826 = $field3829.full_meth(ED5,("cases branch"));
} else {
if(!(R.isFunction($field3829))) {
R.ffi.throwNonFunApp(L[1613],$field3829);
}
$ans3826 = $field3829.app(("cases branch"));
}
break;
case 2: var anf_arg3786 = $ans3826;
$al3827 = L[1614];
var anf_method_obj3783 = G(ED5,"locs",L[1614]);
$al3827 = L[1615];
var anf_arg3784 = G(self3594,"branch-loc",L[1615]);
$step3825 = 3;
$al3827 = L[1614];
$field3830 = R.getColonFieldLoc(anf_method_obj3783,"make1",L[1614]);
if(R.isMethod($field3830)) {
$ans3826 = $field3830.full_meth(anf_method_obj3783,anf_arg3784);
} else {
if(!(R.isFunction($field3830))) {
R.ffi.throwNonFunApp(L[1614],$field3830);
}
$ans3826 = $field3830.app(anf_arg3784);
}
break;
case 3: var anf_arg3787 = $ans3826;
$step3825 = 4;
$al3827 = L[1616];
$field3831 = R.getColonFieldLoc(ED5,"highlight",L[1616]);
if(R.isMethod($field3831)) {
$ans3826 = $field3831.full_meth(ED5,anf_arg3786,anf_arg3787,(-1));
} else {
if(!(R.isFunction($field3831))) {
R.ffi.throwNonFunApp(L[1616],$field3831);
}
$ans3826 = $field3831.app(anf_arg3786,anf_arg3787,(-1));
}
break;
case 4: var anf_arg3792 = $ans3826;
$step3825 = 5;
$al3827 = L[1617];
$field3832 = R.getColonFieldLoc(ED5,"text",L[1617]);
if(R.isMethod($field3832)) {
$ans3826 = $field3832.full_meth(ED5,(" errored."));
} else {
if(!(R.isFunction($field3832))) {
R.ffi.throwNonFunApp(L[1617],$field3832);
}
$ans3826 = $field3832.app((" errored."));
}
break;
case 5: var anf_arg3793 = $ans3826;
$step3825 = 6;
$al3827 = L[1611];
$field3833 = R.getColonFieldLoc(anf_method_obj3790,"make3",L[1611]);
if(R.isMethod($field3833)) {
$ans3826 = $field3833.full_meth(anf_method_obj3790,anf_arg3791,anf_arg3792,anf_arg3793);
} else {
if(!(R.isFunction($field3833))) {
R.ffi.throwNonFunApp(L[1611],$field3833);
}
$ans3826 = $field3833.app(anf_arg3791,anf_arg3792,anf_arg3793);
}
break;
case 6: var anf_arg3818 = $ans3826;
$al3827 = L[1618];
var anf_arg3795 = G(self3594,"pat-loc",L[1618]);
$step3825 = 7;
$al3827 = L[1619];
$field3834 = R.getColonFieldLoc(ED5,"cmcode",L[1619]);
if(R.isMethod($field3834)) {
$ans3826 = $field3834.full_meth(ED5,anf_arg3795);
} else {
if(!(R.isFunction($field3834))) {
R.ffi.throwNonFunApp(L[1619],$field3834);
}
$ans3826 = $field3834.app(anf_arg3795);
}
break;
case 7: var anf_arg3819 = $ans3826;
$al3827 = L[1620];
var anf_method_obj3801 = G(ED5,"para",L[1620]);
$step3825 = 8;
$al3827 = L[1621];
$field3835 = R.getColonFieldLoc(ED5,"text",L[1621]);
if(R.isMethod($field3835)) {
$ans3826 = $field3835.full_meth(ED5,("The cases pattern had "));
} else {
if(!(R.isFunction($field3835))) {
R.ffi.throwNonFunApp(L[1621],$field3835);
}
$ans3826 = $field3835.app(("The cases pattern had "));
}
break;
case 8: var anf_arg3802 = $ans3826;
$al3827 = L[1622];
var anf_arg3798 = G(self3594,"num-args",L[1622]);
$step3825 = 9;
$al3827 = L[1623];
$field3836 = R.getColonFieldLoc(ED5,"ed-field-bindings",L[1623]);
if(R.isMethod($field3836)) {
$ans3826 = $field3836.full_meth(ED5,anf_arg3798);
} else {
if(!(R.isFunction($field3836))) {
R.ffi.throwNonFunApp(L[1623],$field3836);
}
$ans3826 = $field3836.app(anf_arg3798);
}
break;
case 9: var anf_arg3803 = $ans3826;
$step3825 = 10;
$al3827 = L[1624];
$field3837 = R.getColonFieldLoc(ED5,"text",L[1624]);
if(R.isMethod($field3837)) {
$ans3826 = $field3837.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3837))) {
R.ffi.throwNonFunApp(L[1624],$field3837);
}
$ans3826 = $field3837.app(("."));
}
break;
case 10: var anf_arg3804 = $ans3826;
$step3825 = 11;
$al3827 = L[1620];
$field3838 = R.getColonFieldLoc(anf_method_obj3801,"make3",L[1620]);
if(R.isMethod($field3838)) {
$ans3826 = $field3838.full_meth(anf_method_obj3801,anf_arg3802,anf_arg3803,anf_arg3804);
} else {
if(!(R.isFunction($field3838))) {
R.ffi.throwNonFunApp(L[1620],$field3838);
}
$ans3826 = $field3838.app(anf_arg3802,anf_arg3803,anf_arg3804);
}
break;
case 11: var anf_arg3820 = $ans3826;
$al3827 = L[1625];
var anf_method_obj3809 = G(ED5,"para",L[1625]);
$step3825 = 12;
$al3827 = L[1626];
$field3839 = R.getColonFieldLoc(ED5,"text",L[1626]);
if(R.isMethod($field3839)) {
$ans3826 = $field3839.full_meth(ED5,("The corresponding variant is declared with "));
} else {
if(!(R.isFunction($field3839))) {
R.ffi.throwNonFunApp(L[1626],$field3839);
}
$ans3826 = $field3839.app(("The corresponding variant is declared with "));
}
break;
case 12: var anf_arg3810 = $ans3826;
$al3827 = L[1627];
var anf_arg3807 = G(self3594,"actual-arity",L[1627]);
$step3825 = 13;
$al3827 = L[1628];
$field3840 = R.getColonFieldLoc(ED5,"ed-fields",L[1628]);
if(R.isMethod($field3840)) {
$ans3826 = $field3840.full_meth(ED5,anf_arg3807);
} else {
if(!(R.isFunction($field3840))) {
R.ffi.throwNonFunApp(L[1628],$field3840);
}
$ans3826 = $field3840.app(anf_arg3807);
}
break;
case 13: var anf_arg3811 = $ans3826;
$step3825 = 14;
$al3827 = L[1625];
$field3841 = R.getColonFieldLoc(anf_method_obj3809,"make2",L[1625]);
if(R.isMethod($field3841)) {
$ans3826 = $field3841.full_meth(anf_method_obj3809,anf_arg3810,anf_arg3811);
} else {
if(!(R.isFunction($field3841))) {
R.ffi.throwNonFunApp(L[1625],$field3841);
}
$ans3826 = $field3841.app(anf_arg3810,anf_arg3811);
}
break;
case 14: var anf_arg3821 = $ans3826;
$al3827 = L[1629];
var anf_method_obj3814 = G(ED5,"para",L[1629]);
$step3825 = 15;
$al3827 = L[1630];
$field3842 = R.getColonFieldLoc(ED5,"text",L[1630]);
if(R.isMethod($field3842)) {
$ans3826 = $field3842.full_meth(ED5,("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
} else {
if(!(R.isFunction($field3842))) {
R.ffi.throwNonFunApp(L[1630],$field3842);
}
$ans3826 = $field3842.app(("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
}
break;
case 15: var anf_arg3815 = $ans3826;
$step3825 = 16;
$al3827 = L[1629];
$field3843 = R.getColonFieldLoc(anf_method_obj3814,"make1",L[1629]);
if(R.isMethod($field3843)) {
$ans3826 = $field3843.full_meth(anf_method_obj3814,anf_arg3815);
} else {
if(!(R.isFunction($field3843))) {
R.ffi.throwNonFunApp(L[1629],$field3843);
}
$ans3826 = $field3843.app(anf_arg3815);
}
break;
case 16: var anf_arg3822 = $ans3826;
$step3825 = 17;
$al3827 = L[1610];
$field3844 = R.getColonFieldLoc(anf_method_obj3817,"make5",L[1610]);
if(R.isMethod($field3844)) {
$ans3826 = $field3844.full_meth(anf_method_obj3817,anf_arg3818,anf_arg3819,anf_arg3820,anf_arg3821,anf_arg3822);
} else {
if(!(R.isFunction($field3844))) {
R.ffi.throwNonFunApp(L[1610],$field3844);
}
$ans3826 = $field3844.app(anf_arg3818,anf_arg3819,anf_arg3820,anf_arg3821,anf_arg3822);
}
break;
case 17: ++R.GAS;
return $ans3826;
default: throw "No case numbered " + $step3825 + " in $temp_branch3824";
}
}
} catch($e3845) {
if(R.isCont($e3845) && ($step3825 !== 17)) {
$e3845.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3827,$temp_branch3824,$step3825,[],[anf_method_obj3817,anf_method_obj3790,anf_arg3791,anf_arg3786,anf_arg3792,anf_arg3818,anf_arg3819,anf_method_obj3801,anf_arg3802,anf_arg3803,anf_arg3820,anf_method_obj3809,anf_arg3810,anf_arg3821,anf_method_obj3814]);
}
if(R.isPyretException($e3845)) {
$e3845.pyretStack.push($al3827);
}
throw $e3845;
}
};
$ans3598 = cases3646.$app_fields($temp_branch3824,[]);
break;
case 25: $step3592 = 42;
$al3599 = L[1608];
$ans3598 = R.throwNoCasesMatched(L[1608],cases3646);
break;
case 26: $al3599 = L[1635];
var anf_method_obj3881 = G(ED5,"error",L[1635]);
$al3599 = L[1636];
var anf_method_obj3854 = G(ED5,"para",L[1636]);
$step3592 = 27;
$al3599 = L[1637];
$field3847 = R.getColonFieldLoc(ED5,"text",L[1637]);
if(R.isMethod($field3847)) {
$ans3598 = $field3847.full_meth(ED5,("Matching a cases branch in "));
} else {
if(!(R.isFunction($field3847))) {
R.ffi.throwNonFunApp(L[1637],$field3847);
}
$ans3598 = $field3847.app(("Matching a cases branch in "));
}
break;
case 27: var anf_arg3855 = $ans3598;
$al3599 = L[1638];
var anf_arg3848 = G(self3594,"cases-loc",L[1638]);
$step3592 = 28;
$al3599 = L[1639];
$field3849 = R.getColonFieldLoc(ED5,"loc",L[1639]);
if(R.isMethod($field3849)) {
$ans3598 = $field3849.full_meth(ED5,anf_arg3848);
} else {
if(!(R.isFunction($field3849))) {
R.ffi.throwNonFunApp(L[1639],$field3849);
}
$ans3598 = $field3849.app(anf_arg3848);
}
break;
case 28: var anf_arg3856 = $ans3598;
$step3592 = 29;
$al3599 = L[1640];
$field3850 = R.getColonFieldLoc(ED5,"text",L[1640]);
if(R.isMethod($field3850)) {
$ans3598 = $field3850.full_meth(ED5,(" errored because of a problem with the branch pattern in "));
} else {
if(!(R.isFunction($field3850))) {
R.ffi.throwNonFunApp(L[1640],$field3850);
}
$ans3598 = $field3850.app((" errored because of a problem with the branch pattern in "));
}
break;
case 29: var anf_arg3857 = $ans3598;
$al3599 = L[1641];
var anf_arg3851 = G(self3594,"branch-loc",L[1641]);
$step3592 = 30;
$al3599 = L[1642];
$field3852 = R.getColonFieldLoc(ED5,"loc",L[1642]);
if(R.isMethod($field3852)) {
$ans3598 = $field3852.full_meth(ED5,anf_arg3851);
} else {
if(!(R.isFunction($field3852))) {
R.ffi.throwNonFunApp(L[1642],$field3852);
}
$ans3598 = $field3852.app(anf_arg3851);
}
break;
case 30: var anf_arg3858 = $ans3598;
$step3592 = 31;
$al3599 = L[1643];
$field3853 = R.getColonFieldLoc(ED5,"text",L[1643]);
if(R.isMethod($field3853)) {
$ans3598 = $field3853.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3853))) {
R.ffi.throwNonFunApp(L[1643],$field3853);
}
$ans3598 = $field3853.app(("."));
}
break;
case 31: var anf_arg3859 = $ans3598;
$step3592 = 32;
$al3599 = L[1636];
$field3860 = R.getColonFieldLoc(anf_method_obj3854,"make5",L[1636]);
if(R.isMethod($field3860)) {
$ans3598 = $field3860.full_meth(anf_method_obj3854,anf_arg3855,anf_arg3856,anf_arg3857,anf_arg3858,anf_arg3859);
} else {
if(!(R.isFunction($field3860))) {
R.ffi.throwNonFunApp(L[1636],$field3860);
}
$ans3598 = $field3860.app(anf_arg3855,anf_arg3856,anf_arg3857,anf_arg3858,anf_arg3859);
}
break;
case 32: var anf_arg3882 = $ans3598;
$al3599 = L[1644];
var anf_method_obj3865 = G(ED5,"para",L[1644]);
$step3592 = 33;
$al3599 = L[1645];
$field3861 = R.getColonFieldLoc(ED5,"text",L[1645]);
if(R.isMethod($field3861)) {
$ans3598 = $field3861.full_meth(ED5,("The cases pattern had "));
} else {
if(!(R.isFunction($field3861))) {
R.ffi.throwNonFunApp(L[1645],$field3861);
}
$ans3598 = $field3861.app(("The cases pattern had "));
}
break;
case 33: var anf_arg3866 = $ans3598;
$al3599 = L[1646];
var anf_arg3862 = G(self3594,"num-args",L[1646]);
$step3592 = 34;
$al3599 = L[1647];
$field3863 = R.getColonFieldLoc(ED5,"ed-field-bindings",L[1647]);
if(R.isMethod($field3863)) {
$ans3598 = $field3863.full_meth(ED5,anf_arg3862);
} else {
if(!(R.isFunction($field3863))) {
R.ffi.throwNonFunApp(L[1647],$field3863);
}
$ans3598 = $field3863.app(anf_arg3862);
}
break;
case 34: var anf_arg3867 = $ans3598;
$step3592 = 35;
$al3599 = L[1648];
$field3864 = R.getColonFieldLoc(ED5,"text",L[1648]);
if(R.isMethod($field3864)) {
$ans3598 = $field3864.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3864))) {
R.ffi.throwNonFunApp(L[1648],$field3864);
}
$ans3598 = $field3864.app(("."));
}
break;
case 35: var anf_arg3868 = $ans3598;
$step3592 = 36;
$al3599 = L[1644];
$field3869 = R.getColonFieldLoc(anf_method_obj3865,"make3",L[1644]);
if(R.isMethod($field3869)) {
$ans3598 = $field3869.full_meth(anf_method_obj3865,anf_arg3866,anf_arg3867,anf_arg3868);
} else {
if(!(R.isFunction($field3869))) {
R.ffi.throwNonFunApp(L[1644],$field3869);
}
$ans3598 = $field3869.app(anf_arg3866,anf_arg3867,anf_arg3868);
}
break;
case 36: var anf_arg3883 = $ans3598;
$al3599 = L[1649];
var anf_method_obj3873 = G(ED5,"para",L[1649]);
$step3592 = 37;
$al3599 = L[1650];
$field3870 = R.getColonFieldLoc(ED5,"text",L[1650]);
if(R.isMethod($field3870)) {
$ans3598 = $field3870.full_meth(ED5,("The corresponding variant of the datatype had "));
} else {
if(!(R.isFunction($field3870))) {
R.ffi.throwNonFunApp(L[1650],$field3870);
}
$ans3598 = $field3870.app(("The corresponding variant of the datatype had "));
}
break;
case 37: var anf_arg3874 = $ans3598;
$al3599 = L[1651];
var anf_arg3871 = G(self3594,"actual-arity",L[1651]);
$step3592 = 38;
$al3599 = L[1652];
$field3872 = R.getColonFieldLoc(ED5,"ed-fields",L[1652]);
if(R.isMethod($field3872)) {
$ans3598 = $field3872.full_meth(ED5,anf_arg3871);
} else {
if(!(R.isFunction($field3872))) {
R.ffi.throwNonFunApp(L[1652],$field3872);
}
$ans3598 = $field3872.app(anf_arg3871);
}
break;
case 38: var anf_arg3875 = $ans3598;
$step3592 = 39;
$al3599 = L[1649];
$field3876 = R.getColonFieldLoc(anf_method_obj3873,"make2",L[1649]);
if(R.isMethod($field3876)) {
$ans3598 = $field3876.full_meth(anf_method_obj3873,anf_arg3874,anf_arg3875);
} else {
if(!(R.isFunction($field3876))) {
R.ffi.throwNonFunApp(L[1649],$field3876);
}
$ans3598 = $field3876.app(anf_arg3874,anf_arg3875);
}
break;
case 39: var anf_arg3884 = $ans3598;
$al3599 = L[1653];
var anf_method_obj3878 = G(ED5,"para",L[1653]);
$step3592 = 40;
$al3599 = L[1654];
$field3877 = R.getColonFieldLoc(ED5,"text",L[1654]);
if(R.isMethod($field3877)) {
$ans3598 = $field3877.full_meth(ED5,("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
} else {
if(!(R.isFunction($field3877))) {
R.ffi.throwNonFunApp(L[1654],$field3877);
}
$ans3598 = $field3877.app(("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
}
break;
case 40: var anf_arg3879 = $ans3598;
$step3592 = 41;
$al3599 = L[1653];
$field3880 = R.getColonFieldLoc(anf_method_obj3878,"make1",L[1653]);
if(R.isMethod($field3880)) {
$ans3598 = $field3880.full_meth(anf_method_obj3878,anf_arg3879);
} else {
if(!(R.isFunction($field3880))) {
R.ffi.throwNonFunApp(L[1653],$field3880);
}
$ans3598 = $field3880.app(anf_arg3879);
}
break;
case 41: var anf_arg3885 = $ans3598;
$step3592 = 42;
$al3599 = L[1635];
$field3886 = R.getColonFieldLoc(anf_method_obj3881,"make4",L[1635]);
if(R.isMethod($field3886)) {
$ans3598 = $field3886.full_meth(anf_method_obj3881,anf_arg3882,anf_arg3883,anf_arg3884,anf_arg3885);
} else {
if(!(R.isFunction($field3886))) {
R.ffi.throwNonFunApp(L[1635],$field3886);
}
$ans3598 = $field3886.app(anf_arg3882,anf_arg3883,anf_arg3884,anf_arg3885);
}
break;
case 42: ++R.GAS;
return $ans3598;
default: throw "No case numbered " + $step3592 + " in $temp_full3593";
}
}
} catch($e3889) {
if(R.isCont($e3889) && ($step3592 !== 42)) {
$e3889.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3599,$temp_full3593,$step3592,[self3594,maybe$stack$loc3595,src$available3596,maybe$ast3597],[anf_method_obj3637,anf_method_obj3610,anf_arg3611,anf_arg3612,anf_arg3613,anf_arg3614,anf_arg3638,anf_method_obj3621,anf_arg3622,anf_arg3623,anf_arg3639,anf_method_obj3629,anf_arg3630,anf_arg3640,anf_method_obj3634,cases3646,anf_method_obj3881,anf_method_obj3854,anf_arg3855,anf_arg3856,anf_arg3857,anf_arg3858,anf_arg3882,anf_method_obj3865,anf_arg3866,anf_arg3867,anf_arg3883,anf_method_obj3873,anf_arg3874,anf_arg3884,anf_method_obj3878]);
}
if(R.isPyretException($e3889)) {
$e3889.pyretStack.push($al3599);
}
throw $e3889;
}
};
var anf_variant_member6373 = R.makeMethod3($temp_full3593,"render-fancy-reason");
var $temp_full3891 = function($self3892) {
var $step3890 = 0;
var $ans3893 = D;
var $al3894 = L[1676];
try {
if(R.isActivationRecord($self3892)) {
$step3890 = $self3892.step;
$al3894 = $self3892.from;
$ans3893 = $self3892.ans;
self3892 = $self3892.args[0];
anf_method_obj3929 = $self3892.vars[0];
anf_method_obj3902 = $self3892.vars[1];
anf_arg3903 = $self3892.vars[2];
anf_arg3904 = $self3892.vars[3];
anf_arg3905 = $self3892.vars[4];
anf_arg3906 = $self3892.vars[5];
anf_arg3930 = $self3892.vars[6];
anf_method_obj3913 = $self3892.vars[7];
anf_arg3914 = $self3892.vars[8];
anf_arg3915 = $self3892.vars[9];
anf_arg3931 = $self3892.vars[10];
anf_method_obj3921 = $self3892.vars[11];
anf_arg3922 = $self3892.vars[12];
anf_arg3932 = $self3892.vars[13];
anf_method_obj3926 = $self3892.vars[14];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1676],1,$t);
}
var self3892 = $self3892;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3890) {
case 0: $al3894 = L[1656];
var anf_method_obj3929 = G(ED5,"error",L[1656]);
$al3894 = L[1657];
var anf_method_obj3902 = G(ED5,"para",L[1657]);
$step3890 = 1;
$al3894 = L[1658];
$field3895 = R.getColonFieldLoc(ED5,"text",L[1658]);
if(R.isMethod($field3895)) {
$ans3893 = $field3895.full_meth(ED5,("Matching a cases branch in "));
} else {
if(!(R.isFunction($field3895))) {
R.ffi.throwNonFunApp(L[1658],$field3895);
}
$ans3893 = $field3895.app(("Matching a cases branch in "));
}
break;
case 1: var anf_arg3903 = $ans3893;
$al3894 = L[1659];
var anf_arg3896 = G(self3892,"cases-loc",L[1659]);
$step3890 = 2;
$al3894 = L[1660];
$field3897 = R.getColonFieldLoc(ED5,"loc",L[1660]);
if(R.isMethod($field3897)) {
$ans3893 = $field3897.full_meth(ED5,anf_arg3896);
} else {
if(!(R.isFunction($field3897))) {
R.ffi.throwNonFunApp(L[1660],$field3897);
}
$ans3893 = $field3897.app(anf_arg3896);
}
break;
case 2: var anf_arg3904 = $ans3893;
$step3890 = 3;
$al3894 = L[1661];
$field3898 = R.getColonFieldLoc(ED5,"text",L[1661]);
if(R.isMethod($field3898)) {
$ans3893 = $field3898.full_meth(ED5,(" errored because of a problem with the branch pattern in "));
} else {
if(!(R.isFunction($field3898))) {
R.ffi.throwNonFunApp(L[1661],$field3898);
}
$ans3893 = $field3898.app((" errored because of a problem with the branch pattern in "));
}
break;
case 3: var anf_arg3905 = $ans3893;
$al3894 = L[1662];
var anf_arg3899 = G(self3892,"branch-loc",L[1662]);
$step3890 = 4;
$al3894 = L[1663];
$field3900 = R.getColonFieldLoc(ED5,"loc",L[1663]);
if(R.isMethod($field3900)) {
$ans3893 = $field3900.full_meth(ED5,anf_arg3899);
} else {
if(!(R.isFunction($field3900))) {
R.ffi.throwNonFunApp(L[1663],$field3900);
}
$ans3893 = $field3900.app(anf_arg3899);
}
break;
case 4: var anf_arg3906 = $ans3893;
$step3890 = 5;
$al3894 = L[1664];
$field3901 = R.getColonFieldLoc(ED5,"text",L[1664]);
if(R.isMethod($field3901)) {
$ans3893 = $field3901.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3901))) {
R.ffi.throwNonFunApp(L[1664],$field3901);
}
$ans3893 = $field3901.app(("."));
}
break;
case 5: var anf_arg3907 = $ans3893;
$step3890 = 6;
$al3894 = L[1657];
$field3908 = R.getColonFieldLoc(anf_method_obj3902,"make5",L[1657]);
if(R.isMethod($field3908)) {
$ans3893 = $field3908.full_meth(anf_method_obj3902,anf_arg3903,anf_arg3904,anf_arg3905,anf_arg3906,anf_arg3907);
} else {
if(!(R.isFunction($field3908))) {
R.ffi.throwNonFunApp(L[1657],$field3908);
}
$ans3893 = $field3908.app(anf_arg3903,anf_arg3904,anf_arg3905,anf_arg3906,anf_arg3907);
}
break;
case 6: var anf_arg3930 = $ans3893;
$al3894 = L[1665];
var anf_method_obj3913 = G(ED5,"para",L[1665]);
$step3890 = 7;
$al3894 = L[1666];
$field3909 = R.getColonFieldLoc(ED5,"text",L[1666]);
if(R.isMethod($field3909)) {
$ans3893 = $field3909.full_meth(ED5,("The cases pattern had "));
} else {
if(!(R.isFunction($field3909))) {
R.ffi.throwNonFunApp(L[1666],$field3909);
}
$ans3893 = $field3909.app(("The cases pattern had "));
}
break;
case 7: var anf_arg3914 = $ans3893;
$al3894 = L[1667];
var anf_arg3910 = G(self3892,"num-args",L[1667]);
$step3890 = 8;
$al3894 = L[1668];
$field3911 = R.getColonFieldLoc(ED5,"ed-field-bindings",L[1668]);
if(R.isMethod($field3911)) {
$ans3893 = $field3911.full_meth(ED5,anf_arg3910);
} else {
if(!(R.isFunction($field3911))) {
R.ffi.throwNonFunApp(L[1668],$field3911);
}
$ans3893 = $field3911.app(anf_arg3910);
}
break;
case 8: var anf_arg3915 = $ans3893;
$step3890 = 9;
$al3894 = L[1669];
$field3912 = R.getColonFieldLoc(ED5,"text",L[1669]);
if(R.isMethod($field3912)) {
$ans3893 = $field3912.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field3912))) {
R.ffi.throwNonFunApp(L[1669],$field3912);
}
$ans3893 = $field3912.app(("."));
}
break;
case 9: var anf_arg3916 = $ans3893;
$step3890 = 10;
$al3894 = L[1665];
$field3917 = R.getColonFieldLoc(anf_method_obj3913,"make3",L[1665]);
if(R.isMethod($field3917)) {
$ans3893 = $field3917.full_meth(anf_method_obj3913,anf_arg3914,anf_arg3915,anf_arg3916);
} else {
if(!(R.isFunction($field3917))) {
R.ffi.throwNonFunApp(L[1665],$field3917);
}
$ans3893 = $field3917.app(anf_arg3914,anf_arg3915,anf_arg3916);
}
break;
case 10: var anf_arg3931 = $ans3893;
$al3894 = L[1670];
var anf_method_obj3921 = G(ED5,"para",L[1670]);
$step3890 = 11;
$al3894 = L[1671];
$field3918 = R.getColonFieldLoc(ED5,"text",L[1671]);
if(R.isMethod($field3918)) {
$ans3893 = $field3918.full_meth(ED5,("The corresponding variant of the datatype had "));
} else {
if(!(R.isFunction($field3918))) {
R.ffi.throwNonFunApp(L[1671],$field3918);
}
$ans3893 = $field3918.app(("The corresponding variant of the datatype had "));
}
break;
case 11: var anf_arg3922 = $ans3893;
$al3894 = L[1672];
var anf_arg3919 = G(self3892,"actual-arity",L[1672]);
$step3890 = 12;
$al3894 = L[1673];
$field3920 = R.getColonFieldLoc(ED5,"ed-fields",L[1673]);
if(R.isMethod($field3920)) {
$ans3893 = $field3920.full_meth(ED5,anf_arg3919);
} else {
if(!(R.isFunction($field3920))) {
R.ffi.throwNonFunApp(L[1673],$field3920);
}
$ans3893 = $field3920.app(anf_arg3919);
}
break;
case 12: var anf_arg3923 = $ans3893;
$step3890 = 13;
$al3894 = L[1670];
$field3924 = R.getColonFieldLoc(anf_method_obj3921,"make2",L[1670]);
if(R.isMethod($field3924)) {
$ans3893 = $field3924.full_meth(anf_method_obj3921,anf_arg3922,anf_arg3923);
} else {
if(!(R.isFunction($field3924))) {
R.ffi.throwNonFunApp(L[1670],$field3924);
}
$ans3893 = $field3924.app(anf_arg3922,anf_arg3923);
}
break;
case 13: var anf_arg3932 = $ans3893;
$al3894 = L[1674];
var anf_method_obj3926 = G(ED5,"para",L[1674]);
$step3890 = 14;
$al3894 = L[1675];
$field3925 = R.getColonFieldLoc(ED5,"text",L[1675]);
if(R.isMethod($field3925)) {
$ans3893 = $field3925.full_meth(ED5,("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
} else {
if(!(R.isFunction($field3925))) {
R.ffi.throwNonFunApp(L[1675],$field3925);
}
$ans3893 = $field3925.app(("Patterns should have exactly the same number of field bindings as the corresponding variant has fields."));
}
break;
case 14: var anf_arg3927 = $ans3893;
$step3890 = 15;
$al3894 = L[1674];
$field3928 = R.getColonFieldLoc(anf_method_obj3926,"make1",L[1674]);
if(R.isMethod($field3928)) {
$ans3893 = $field3928.full_meth(anf_method_obj3926,anf_arg3927);
} else {
if(!(R.isFunction($field3928))) {
R.ffi.throwNonFunApp(L[1674],$field3928);
}
$ans3893 = $field3928.app(anf_arg3927);
}
break;
case 15: var anf_arg3933 = $ans3893;
$step3890 = 16;
$al3894 = L[1656];
$field3934 = R.getColonFieldLoc(anf_method_obj3929,"make4",L[1656]);
if(R.isMethod($field3934)) {
$ans3893 = $field3934.full_meth(anf_method_obj3929,anf_arg3930,anf_arg3931,anf_arg3932,anf_arg3933);
} else {
if(!(R.isFunction($field3934))) {
R.ffi.throwNonFunApp(L[1656],$field3934);
}
$ans3893 = $field3934.app(anf_arg3930,anf_arg3931,anf_arg3932,anf_arg3933);
}
break;
case 16: ++R.GAS;
return $ans3893;
default: throw "No case numbered " + $step3890 + " in $temp_full3891";
}
}
} catch($e3935) {
if(R.isCont($e3935) && ($step3890 !== 16)) {
$e3935.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3894,$temp_full3891,$step3890,[self3892],[anf_method_obj3929,anf_method_obj3902,anf_arg3903,anf_arg3904,anf_arg3905,anf_arg3906,anf_arg3930,anf_method_obj3913,anf_arg3914,anf_arg3915,anf_arg3931,anf_method_obj3921,anf_arg3922,anf_arg3932,anf_method_obj3926]);
}
if(R.isPyretException($e3935)) {
$e3935.pyretStack.push($al3894);
}
throw $e3935;
}
};
var anf_variant_member6374 = R.makeMethod0($temp_full3891,"render-reason");
var $temp_full3937 = function($self3938,$maybe$stack$loc3939,$src$available3940,$maybe$ast3941) {
var $step3936 = 0;
var $ans3942 = D;
var $al3943 = L[1872];
try {
if(R.isActivationRecord($self3938)) {
$step3936 = $self3938.step;
$al3943 = $self3938.from;
$ans3942 = $self3938.ans;
self3938 = $self3938.args[0];
maybe$stack$loc3939 = $self3938.args[1];
src$available3940 = $self3938.args[2];
maybe$ast3941 = $self3938.args[3];
helper4404 = $self3938.vars[0];
is$underscore4218 = $self3938.vars[1];
cases4220 = $self3938.vars[2];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1872],4,$t);
}
var self3938 = $self3938;
var maybe$stack$loc3939 = $maybe$stack$loc3939;
var src$available3940 = $src$available3940;
var maybe$ast3941 = $maybe$ast3941;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3936) {
case 0: $al3943 = L[1677];
var anf_method_obj3944 = G(self3938,"fun-app-args",L[1677]);
$step3936 = 1;
$al3943 = L[1678];
$field3945 = R.getColonFieldLoc(anf_method_obj3944,"length",L[1678]);
if(R.isMethod($field3945)) {
$ans3942 = $field3945.full_meth(anf_method_obj3944);
} else {
if(!(R.isFunction($field3945))) {
R.ffi.throwNonFunApp(L[1678],$field3945);
}
$ans3942 = $field3945.app();
}
break;
case 1: var fun$app$arity3967 = $ans3942;
var $temp_lam3947 = function($rest3948) {
var $step3946 = 0;
var $ans3949 = D;
var $al3950 = L[1750];
try {
if(R.isActivationRecord($rest3948)) {
$step3946 = $rest3948.step;
$al3950 = $rest3948.from;
$ans3949 = $rest3948.ans;
rest3948 = $rest3948.args[0];
anf_method_obj4197 = $rest3948.vars[0];
cases3955 = $rest3948.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1750],1,$t);
}
var rest3948 = $rest3948;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step3946) {
case 0: $al3950 = L[1679];
var anf_method_obj4197 = G(ED5,"error",L[1679]);
$al3950 = L[1680];
var anf_method_obj3951 = G(self3938,"fun-def-loc",L[1680]);
$step3946 = 1;
$al3950 = L[1681];
$field3952 = R.getColonFieldLoc(anf_method_obj3951,"is-builtin",L[1681]);
if(R.isMethod($field3952)) {
$ans3949 = $field3952.full_meth(anf_method_obj3951);
} else {
if(!(R.isFunction($field3952))) {
R.ffi.throwNonFunApp(L[1681],$field3952);
}
$ans3949 = $field3952.app();
}
break;
case 1: var anf_arg3953 = $ans3949;
$al3950 = L[1681];
var anf_if4200 = R.checkWrapBoolean(anf_arg3953);
$step3946 = R.isPyretTrue(anf_if4200)?2:3;
break;
case 2: $step3946 = 4;
$ans3949 = (0);
break;
case 3: $step3946 = 4;
$ans3949 = (1);
break;
case 4: var anf_arg3954 = $ans3949;
$step3946 = 5;
$al3950 = L[1749];
if(!(R.isFunction(maybe$stack$loc3939))) {
R.ffi.throwNonFunApp($al3950,maybe$stack$loc3939);
}
$ans3949 = maybe$stack$loc3939.app(anf_arg3954,(false));
break;
case 5: var cases3955 = $ans3949;
$step3946 = 6;
$al3950 = L[1748];
R._checkAnn(L[1748],R.getDotAnn(L[1748],"O",O13,"Option"),cases3955);
break;
case 6: var $cases_dispatch4196 = {"some":7,
"none":8};
$al3950 = L[1735];
$step3946 = $cases_dispatch4196[cases3955.$name] || 9;
break;
case 7: if(cases3955.$arity !== 1) {
if(cases3955.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1734],1,cases3955.$arity,L[1735]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1734],true,L[1735]);
}
}
$step3946 = 10;
$al3950 = L[1736];
var $temp_branch4088 = function($fun$app$loc3956) {
var $step4089 = 0;
var $ans4090 = D;
var $al4091 = L[1682];
try {
if(R.isActivationRecord($fun$app$loc3956)) {
$step4089 = $fun$app$loc3956.step;
$al4091 = $fun$app$loc3956.from;
$ans4090 = $fun$app$loc3956.ans;
fun$app$loc3956 = $fun$app$loc3956.args[0];
anf_method_obj3976 = $fun$app$loc3956.vars[0];
anf_method_obj3962 = $fun$app$loc3956.vars[1];
anf_arg3963 = $fun$app$loc3956.vars[2];
anf_arg3964 = $fun$app$loc3956.vars[3];
anf_arg3977 = $fun$app$loc3956.vars[4];
anf_method_obj3970 = $fun$app$loc3956.vars[5];
anf_arg3971 = $fun$app$loc3956.vars[6];
anf_arg3978 = $fun$app$loc3956.vars[7];
cases3982 = $fun$app$loc3956.vars[8];
anf_method_obj4081 = $fun$app$loc3956.vars[9];
anf_arg4082 = $fun$app$loc3956.vars[10];
anf_method_obj4074 = $fun$app$loc3956.vars[11];
anf_arg4075 = $fun$app$loc3956.vars[12];
anf_arg4076 = $fun$app$loc3956.vars[13];
anf_arg4083 = $fun$app$loc3956.vars[14];
} else {
var fun$app$loc3956 = $fun$app$loc3956;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4089) {
case 0: $step4089 = 1;
$al4091 = L[1682];
$field4092 = R.getColonFieldLoc(fun$app$loc3956,"is-builtin",L[1682]);
if(R.isMethod($field4092)) {
$ans4090 = $field4092.full_meth(fun$app$loc3956);
} else {
if(!(R.isFunction($field4092))) {
R.ffi.throwNonFunApp(L[1682],$field4092);
}
$ans4090 = $field4092.app();
}
break;
case 1: var anf_arg3958 = $ans4090;
$al4091 = L[1682];
var anf_if4087 = R.checkWrapBoolean(anf_arg3958);
$step4089 = R.isPyretTrue(anf_if4087)?2:12;
break;
case 2: $al4091 = L[1683];
var anf_method_obj3976 = G(ED5,"sequence",L[1683]);
$al4091 = L[1684];
var anf_method_obj3962 = G(ED5,"para",L[1684]);
$step4089 = 3;
$al4091 = L[1685];
$field4093 = R.getColonFieldLoc(ED5,"text",L[1685]);
if(R.isMethod($field4093)) {
$ans4090 = $field4093.full_meth(ED5,("Evaluating the function application in "));
} else {
if(!(R.isFunction($field4093))) {
R.ffi.throwNonFunApp(L[1685],$field4093);
}
$ans4090 = $field4093.app(("Evaluating the function application in "));
}
break;
case 3: var anf_arg3963 = $ans4090;
$step4089 = 4;
$al4091 = L[1686];
$field4094 = R.getColonFieldLoc(ED5,"loc",L[1686]);
if(R.isMethod($field4094)) {
$ans4090 = $field4094.full_meth(ED5,fun$app$loc3956);
} else {
if(!(R.isFunction($field4094))) {
R.ffi.throwNonFunApp(L[1686],$field4094);
}
$ans4090 = $field4094.app(fun$app$loc3956);
}
break;
case 4: var anf_arg3964 = $ans4090;
$step4089 = 5;
$al4091 = L[1687];
$field4095 = R.getColonFieldLoc(ED5,"text",L[1687]);
if(R.isMethod($field4095)) {
$ans4090 = $field4095.full_meth(ED5,(" errored.  expected the applicant to evaluate to a function that accepts exactly the same number of arguments as are given to it."));
} else {
if(!(R.isFunction($field4095))) {
R.ffi.throwNonFunApp(L[1687],$field4095);
}
$ans4090 = $field4095.app((" errored.  expected the applicant to evaluate to a function that accepts exactly the same number of arguments as are given to it."));
}
break;
case 5: var anf_arg3965 = $ans4090;
$step4089 = 6;
$al4091 = L[1684];
$field4096 = R.getColonFieldLoc(anf_method_obj3962,"make3",L[1684]);
if(R.isMethod($field4096)) {
$ans4090 = $field4096.full_meth(anf_method_obj3962,anf_arg3963,anf_arg3964,anf_arg3965);
} else {
if(!(R.isFunction($field4096))) {
R.ffi.throwNonFunApp(L[1684],$field4096);
}
$ans4090 = $field4096.app(anf_arg3963,anf_arg3964,anf_arg3965);
}
break;
case 6: var anf_arg3977 = $ans4090;
$al4091 = L[1688];
var anf_method_obj3970 = G(ED5,"para",L[1688]);
$step4089 = 7;
$al4091 = L[1689];
$field4097 = R.getColonFieldLoc(ED5,"ed-args",L[1689]);
if(R.isMethod($field4097)) {
$ans4090 = $field4097.full_meth(ED5,fun$app$arity3967);
} else {
if(!(R.isFunction($field4097))) {
R.ffi.throwNonFunApp(L[1689],$field4097);
}
$ans4090 = $field4097.app(fun$app$arity3967);
}
break;
case 7: var anf_arg3971 = $ans4090;
$step4089 = 8;
$al4091 = L[1690];
$field4098 = R.getColonFieldLoc(ED5,"text",L[1690]);
if(R.isMethod($field4098)) {
$ans4090 = $field4098.full_meth(ED5,(" were passed to the left side."));
} else {
if(!(R.isFunction($field4098))) {
R.ffi.throwNonFunApp(L[1690],$field4098);
}
$ans4090 = $field4098.app((" were passed to the left side."));
}
break;
case 8: var anf_arg3972 = $ans4090;
$step4089 = 9;
$al4091 = L[1688];
$field4099 = R.getColonFieldLoc(anf_method_obj3970,"make2",L[1688]);
if(R.isMethod($field4099)) {
$ans4090 = $field4099.full_meth(anf_method_obj3970,anf_arg3971,anf_arg3972);
} else {
if(!(R.isFunction($field4099))) {
R.ffi.throwNonFunApp(L[1688],$field4099);
}
$ans4090 = $field4099.app(anf_arg3971,anf_arg3972);
}
break;
case 9: var anf_arg3978 = $ans4090;
$step4089 = 10;
$al4091 = L[1691];
$field4100 = R.getColonFieldLoc(ED5,"text",L[1691]);
if(R.isMethod($field4100)) {
$ans4090 = $field4100.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4100))) {
R.ffi.throwNonFunApp(L[1691],$field4100);
}
$ans4090 = $field4100.app(("left side"));
}
break;
case 10: var anf_arg3975 = $ans4090;
$step4089 = 11;
$al4091 = L[1692];
if(!(R.isFunction(rest3948))) {
R.ffi.throwNonFunApp($al4091,rest3948);
}
$ans4090 = rest3948.app(anf_arg3975);
break;
case 11: var anf_arg3979 = $ans4090;
$step4089 = 28;
$al4091 = L[1683];
$field4101 = R.getColonFieldLoc(anf_method_obj3976,"make3",L[1683]);
if(R.isMethod($field4101)) {
$ans4090 = $field4101.full_meth(anf_method_obj3976,anf_arg3977,anf_arg3978,anf_arg3979);
} else {
if(!(R.isFunction($field4101))) {
R.ffi.throwNonFunApp(L[1683],$field4101);
}
$ans4090 = $field4101.app(anf_arg3977,anf_arg3978,anf_arg3979);
}
break;
case 12: $step4089 = 13;
$al4091 = L[1693];
if(!(R.isFunction(src$available3940))) {
R.ffi.throwNonFunApp($al4091,src$available3940);
}
$ans4090 = src$available3940.app(fun$app$loc3956);
break;
case 13: var anf_arg3981 = $ans4090;
$al4091 = L[1693];
var anf_if4086 = R.checkWrapBoolean(anf_arg3981);
$step4089 = R.isPyretTrue(anf_if4086)?14:20;
break;
case 14: $step4089 = 15;
$al4091 = L[1725];
if(!(R.isFunction(maybe$ast3941))) {
R.ffi.throwNonFunApp($al4091,maybe$ast3941);
}
$ans4090 = maybe$ast3941.app(fun$app$loc3956);
break;
case 15: var cases3982 = $ans4090;
$step4089 = 16;
$al4091 = L[1724];
R._checkAnn(L[1724],R.getDotAnn(L[1724],"O",O13,"Option"),cases3982);
break;
case 16: var $cases_dispatch4156 = {"some":17,
"none":18};
$al4091 = L[1712];
$step4089 = $cases_dispatch4156[cases3982.$name] || 19;
break;
case 17: if(cases3982.$arity !== 1) {
if(cases3982.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1711],1,cases3982.$arity,L[1712]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1711],true,L[1712]);
}
}
$step4089 = 28;
$al4091 = L[1713];
var $temp_branch4118 = function($ast3984) {
var $step4119 = 0;
var $ans4120 = D;
var $al4121 = L[1694];
try {
if(R.isActivationRecord($ast3984)) {
$step4119 = $ast3984.step;
$al4121 = $ast3984.from;
$ans4120 = $ast3984.ans;
ast3984 = $ast3984.args[0];
anf_arg3989 = $ast3984.vars[0];
applicant4012 = $ast3984.vars[1];
anf_method_obj4015 = $ast3984.vars[2];
anf_arg4016 = $ast3984.vars[3];
anf_arg4017 = $ast3984.vars[4];
anf_method_obj4009 = $ast3984.vars[5];
anf_arg4004 = $ast3984.vars[6];
anf_arg4010 = $ast3984.vars[7];
anf_arg4011 = $ast3984.vars[8];
anf_arg4018 = $ast3984.vars[9];
} else {
var ast3984 = $ast3984;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4119) {
case 0: $step4119 = 1;
$al4121 = L[1694];
$field4122 = R.getColonFieldLoc(ED5,"text",L[1694]);
if(R.isMethod($field4122)) {
$ans4120 = $field4122.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4122))) {
R.ffi.throwNonFunApp(L[1694],$field4122);
}
$ans4120 = $field4122.app(("left side"));
}
break;
case 1: var anf_arg3989 = $ans4120;
$al4121 = L[1695];
var anf_method_obj3986 = G(ED5,"locs",L[1695]);
$al4121 = L[1696];
var anf_bracket3985 = G(ast3984,"_fun",L[1696]);
$al4121 = L[1697];
var anf_arg3987 = G(anf_bracket3985,"l",L[1697]);
$step4119 = 2;
$al4121 = L[1695];
$field4123 = R.getColonFieldLoc(anf_method_obj3986,"make1",L[1695]);
if(R.isMethod($field4123)) {
$ans4120 = $field4123.full_meth(anf_method_obj3986,anf_arg3987);
} else {
if(!(R.isFunction($field4123))) {
R.ffi.throwNonFunApp(L[1695],$field4123);
}
$ans4120 = $field4123.app(anf_arg3987);
}
break;
case 2: var anf_arg3990 = $ans4120;
$step4119 = 3;
$al4121 = L[1698];
$field4124 = R.getColonFieldLoc(ED5,"highlight",L[1698]);
if(R.isMethod($field4124)) {
$ans4120 = $field4124.full_meth(ED5,anf_arg3989,anf_arg3990,(0));
} else {
if(!(R.isFunction($field4124))) {
R.ffi.throwNonFunApp(L[1698],$field4124);
}
$ans4120 = $field4124.app(anf_arg3989,anf_arg3990,(0));
}
break;
case 3: var applicant4012 = $ans4120;
$al4121 = L[1699];
var anf_method_obj4015 = G(ED5,"sequence",L[1699]);
var anf_fun3992 = ed$intro122.$var;
$step4119 = 4;
$al4121 = L[1710];
if(!(R.isFunction(anf_fun3992))) {
R.ffi.throwNonFunApp($al4121,anf_fun3992);
}
$ans4120 = anf_fun3992.app(("function application expression"),fun$app$loc3956,(-1),(true));
break;
case 4: var anf_arg4016 = $ans4120;
$step4119 = 5;
$al4121 = L[1700];
$field4125 = R.getColonFieldLoc(ED5,"cmcode",L[1700]);
if(R.isMethod($field4125)) {
$ans4120 = $field4125.full_meth(ED5,fun$app$loc3956);
} else {
if(!(R.isFunction($field4125))) {
R.ffi.throwNonFunApp(L[1700],$field4125);
}
$ans4120 = $field4125.app(fun$app$loc3956);
}
break;
case 5: var anf_arg4017 = $ans4120;
$al4121 = L[1701];
var anf_method_obj4009 = G(ED5,"para",L[1701]);
$step4119 = 6;
$al4121 = L[1702];
$field4126 = R.getColonFieldLoc(ED5,"ed-args",L[1702]);
if(R.isMethod($field4126)) {
$ans4120 = $field4126.full_meth(ED5,fun$app$arity3967);
} else {
if(!(R.isFunction($field4126))) {
R.ffi.throwNonFunApp(L[1702],$field4126);
}
$ans4120 = $field4126.app(fun$app$arity3967);
}
break;
case 6: var anf_arg4004 = $ans4120;
$al4121 = L[1703];
var anf_method_obj4001 = G(ast3984,"args",L[1703]);
var $temp_lam4128 = function($recv_3997) {
var $step4127 = 0;
var $ans4129 = D;
var $al4130 = L[1704];
try {
if(R.isActivationRecord($recv_3997)) {
$step4127 = $recv_3997.step;
$al4130 = $recv_3997.from;
$ans4129 = $recv_3997.ans;
recv_3997 = $recv_3997.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1704],1,$t);
}
var recv_3997 = $recv_3997;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4127) {
case 0: $step4127 = 1;
$al4130 = L[1704];
$ans4129 = G(recv_3997,"l",L[1704]);
break;
case 1: ++R.GAS;
return $ans4129;
default: throw "No case numbered " + $step4127 + " in $temp_lam4128";
}
}
} catch($e4131) {
if(R.isCont($e4131) && ($step4127 !== 1)) {
$e4131.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4130,$temp_lam4128,$step4127,[recv_3997],[]);
}
if(R.isPyretException($e4131)) {
$e4131.pyretStack.push($al4130);
}
throw $e4131;
}
};
var anf_arg4002 = R.makeFunction($temp_lam4128,"");
$step4119 = 7;
$al4121 = L[1705];
$field4132 = R.getColonFieldLoc(anf_method_obj4001,"map",L[1705]);
if(R.isMethod($field4132)) {
$ans4120 = $field4132.full_meth(anf_method_obj4001,anf_arg4002);
} else {
if(!(R.isFunction($field4132))) {
R.ffi.throwNonFunApp(L[1705],$field4132);
}
$ans4120 = $field4132.app(anf_arg4002);
}
break;
case 7: var anf_arg4005 = $ans4120;
$step4119 = 8;
$al4121 = L[1706];
$field4133 = R.getColonFieldLoc(ED5,"highlight",L[1706]);
if(R.isMethod($field4133)) {
$ans4120 = $field4133.full_meth(ED5,anf_arg4004,anf_arg4005,(1));
} else {
if(!(R.isFunction($field4133))) {
R.ffi.throwNonFunApp(L[1706],$field4133);
}
$ans4120 = $field4133.app(anf_arg4004,anf_arg4005,(1));
}
break;
case 8: var anf_arg4010 = $ans4120;
$step4119 = 9;
$al4121 = L[1707];
$field4134 = R.getColonFieldLoc(ED5,"text",L[1707]);
if(R.isMethod($field4134)) {
$ans4120 = $field4134.full_meth(ED5,(" were passed to the "));
} else {
if(!(R.isFunction($field4134))) {
R.ffi.throwNonFunApp(L[1707],$field4134);
}
$ans4120 = $field4134.app((" were passed to the "));
}
break;
case 9: var anf_arg4011 = $ans4120;
$step4119 = 10;
$al4121 = L[1708];
$field4135 = R.getColonFieldLoc(ED5,"text",L[1708]);
if(R.isMethod($field4135)) {
$ans4120 = $field4135.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field4135))) {
R.ffi.throwNonFunApp(L[1708],$field4135);
}
$ans4120 = $field4135.app(("."));
}
break;
case 10: var anf_arg4013 = $ans4120;
$step4119 = 11;
$al4121 = L[1701];
$field4136 = R.getColonFieldLoc(anf_method_obj4009,"make4",L[1701]);
if(R.isMethod($field4136)) {
$ans4120 = $field4136.full_meth(anf_method_obj4009,anf_arg4010,anf_arg4011,applicant4012,anf_arg4013);
} else {
if(!(R.isFunction($field4136))) {
R.ffi.throwNonFunApp(L[1701],$field4136);
}
$ans4120 = $field4136.app(anf_arg4010,anf_arg4011,applicant4012,anf_arg4013);
}
break;
case 11: var anf_arg4018 = $ans4120;
$step4119 = 12;
$al4121 = L[1709];
if(!(R.isFunction(rest3948))) {
R.ffi.throwNonFunApp($al4121,rest3948);
}
$ans4120 = rest3948.app(applicant4012);
break;
case 12: var anf_arg4019 = $ans4120;
$step4119 = 13;
$al4121 = L[1699];
$field4137 = R.getColonFieldLoc(anf_method_obj4015,"make4",L[1699]);
if(R.isMethod($field4137)) {
$ans4120 = $field4137.full_meth(anf_method_obj4015,anf_arg4016,anf_arg4017,anf_arg4018,anf_arg4019);
} else {
if(!(R.isFunction($field4137))) {
R.ffi.throwNonFunApp(L[1699],$field4137);
}
$ans4120 = $field4137.app(anf_arg4016,anf_arg4017,anf_arg4018,anf_arg4019);
}
break;
case 13: ++R.GAS;
return $ans4120;
default: throw "No case numbered " + $step4119 + " in $temp_branch4118";
}
}
} catch($e4138) {
if(R.isCont($e4138) && ($step4119 !== 13)) {
$e4138.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4121,$temp_branch4118,$step4119,[ast3984],[anf_arg3989,applicant4012,anf_method_obj4015,anf_arg4016,anf_arg4017,anf_method_obj4009,anf_arg4004,anf_arg4010,anf_arg4011,anf_arg4018]);
}
if(R.isPyretException($e4138)) {
$e4138.pyretStack.push($al4121);
}
throw $e4138;
}
};
$ans4090 = cases3982.$app_fields($temp_branch4118,[false]);
break;
case 18: if(cases3982.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1722],false,L[1712]);
}
$step4089 = 28;
$al4091 = L[1723];
var $temp_branch4145 = function($$resumer101) {
var $step4146 = 0;
var $ans4147 = D;
var $al4148 = L[1714];
try {
if(R.isActivationRecord($$resumer101)) {
$step4146 = $$resumer101.step;
$al4148 = $$resumer101.from;
$ans4147 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj4052 = $$resumer101.vars[0];
anf_arg4053 = $$resumer101.vars[1];
anf_arg4054 = $$resumer101.vars[2];
anf_method_obj4046 = $$resumer101.vars[3];
anf_arg4047 = $$resumer101.vars[4];
anf_arg4055 = $$resumer101.vars[5];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4146) {
case 0: $al4148 = L[1714];
var anf_method_obj4052 = G(ED5,"sequence",L[1714]);
var anf_fun4042 = ed$intro122.$var;
$step4146 = 1;
$al4148 = L[1721];
if(!(R.isFunction(anf_fun4042))) {
R.ffi.throwNonFunApp($al4148,anf_fun4042);
}
$ans4147 = anf_fun4042.app(("function application expression"),fun$app$loc3956,(-1),(true));
break;
case 1: var anf_arg4053 = $ans4147;
$step4146 = 2;
$al4148 = L[1715];
$field4149 = R.getColonFieldLoc(ED5,"cmcode",L[1715]);
if(R.isMethod($field4149)) {
$ans4147 = $field4149.full_meth(ED5,fun$app$loc3956);
} else {
if(!(R.isFunction($field4149))) {
R.ffi.throwNonFunApp(L[1715],$field4149);
}
$ans4147 = $field4149.app(fun$app$loc3956);
}
break;
case 2: var anf_arg4054 = $ans4147;
$al4148 = L[1716];
var anf_method_obj4046 = G(ED5,"para",L[1716]);
$step4146 = 3;
$al4148 = L[1717];
$field4150 = R.getColonFieldLoc(ED5,"ed-args",L[1717]);
if(R.isMethod($field4150)) {
$ans4147 = $field4150.full_meth(ED5,fun$app$arity3967);
} else {
if(!(R.isFunction($field4150))) {
R.ffi.throwNonFunApp(L[1717],$field4150);
}
$ans4147 = $field4150.app(fun$app$arity3967);
}
break;
case 3: var anf_arg4047 = $ans4147;
$step4146 = 4;
$al4148 = L[1718];
$field4151 = R.getColonFieldLoc(ED5,"text",L[1718]);
if(R.isMethod($field4151)) {
$ans4147 = $field4151.full_meth(ED5,(" were passed to the left side."));
} else {
if(!(R.isFunction($field4151))) {
R.ffi.throwNonFunApp(L[1718],$field4151);
}
$ans4147 = $field4151.app((" were passed to the left side."));
}
break;
case 4: var anf_arg4048 = $ans4147;
$step4146 = 5;
$al4148 = L[1716];
$field4152 = R.getColonFieldLoc(anf_method_obj4046,"make2",L[1716]);
if(R.isMethod($field4152)) {
$ans4147 = $field4152.full_meth(anf_method_obj4046,anf_arg4047,anf_arg4048);
} else {
if(!(R.isFunction($field4152))) {
R.ffi.throwNonFunApp(L[1716],$field4152);
}
$ans4147 = $field4152.app(anf_arg4047,anf_arg4048);
}
break;
case 5: var anf_arg4055 = $ans4147;
$step4146 = 6;
$al4148 = L[1719];
$field4153 = R.getColonFieldLoc(ED5,"text",L[1719]);
if(R.isMethod($field4153)) {
$ans4147 = $field4153.full_meth(ED5,("applicant"));
} else {
if(!(R.isFunction($field4153))) {
R.ffi.throwNonFunApp(L[1719],$field4153);
}
$ans4147 = $field4153.app(("applicant"));
}
break;
case 6: var anf_arg4051 = $ans4147;
$step4146 = 7;
$al4148 = L[1720];
if(!(R.isFunction(rest3948))) {
R.ffi.throwNonFunApp($al4148,rest3948);
}
$ans4147 = rest3948.app(anf_arg4051);
break;
case 7: var anf_arg4056 = $ans4147;
$step4146 = 8;
$al4148 = L[1714];
$field4154 = R.getColonFieldLoc(anf_method_obj4052,"make4",L[1714]);
if(R.isMethod($field4154)) {
$ans4147 = $field4154.full_meth(anf_method_obj4052,anf_arg4053,anf_arg4054,anf_arg4055,anf_arg4056);
} else {
if(!(R.isFunction($field4154))) {
R.ffi.throwNonFunApp(L[1714],$field4154);
}
$ans4147 = $field4154.app(anf_arg4053,anf_arg4054,anf_arg4055,anf_arg4056);
}
break;
case 8: ++R.GAS;
return $ans4147;
default: throw "No case numbered " + $step4146 + " in $temp_branch4145";
}
}
} catch($e4155) {
if(R.isCont($e4155) && ($step4146 !== 8)) {
$e4155.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4148,$temp_branch4145,$step4146,[],[anf_method_obj4052,anf_arg4053,anf_arg4054,anf_method_obj4046,anf_arg4047,anf_arg4055]);
}
if(R.isPyretException($e4155)) {
$e4155.pyretStack.push($al4148);
}
throw $e4155;
}
};
$ans4090 = cases3982.$app_fields($temp_branch4145,[]);
break;
case 19: $step4089 = 28;
$al4091 = L[1712];
$ans4090 = R.throwNoCasesMatched(L[1712],cases3982);
break;
case 20: $al4091 = L[1726];
var anf_method_obj4081 = G(ED5,"sequence",L[1726]);
var anf_fun4070 = ed$simple$intro95.$var;
$step4089 = 21;
$al4091 = L[1733];
if(!(R.isFunction(anf_fun4070))) {
R.ffi.throwNonFunApp($al4091,anf_fun4070);
}
$ans4090 = anf_fun4070.app(("function application expression"),fun$app$loc3956);
break;
case 21: var anf_arg4082 = $ans4090;
$al4091 = L[1727];
var anf_method_obj4074 = G(ED5,"para",L[1727]);
$step4089 = 22;
$al4091 = L[1728];
$field4157 = R.getColonFieldLoc(ED5,"text",L[1728]);
if(R.isMethod($field4157)) {
$ans4090 = $field4157.full_meth(ED5,("The applicant had "));
} else {
if(!(R.isFunction($field4157))) {
R.ffi.throwNonFunApp(L[1728],$field4157);
}
$ans4090 = $field4157.app(("The applicant had "));
}
break;
case 22: var anf_arg4075 = $ans4090;
$step4089 = 23;
$al4091 = L[1729];
$field4158 = R.getColonFieldLoc(ED5,"ed-args",L[1729]);
if(R.isMethod($field4158)) {
$ans4090 = $field4158.full_meth(ED5,fun$app$arity3967);
} else {
if(!(R.isFunction($field4158))) {
R.ffi.throwNonFunApp(L[1729],$field4158);
}
$ans4090 = $field4158.app(fun$app$arity3967);
}
break;
case 23: var anf_arg4076 = $ans4090;
$step4089 = 24;
$al4091 = L[1730];
$field4159 = R.getColonFieldLoc(ED5,"text",L[1730]);
if(R.isMethod($field4159)) {
$ans4090 = $field4159.full_meth(ED5,(" passed to it."));
} else {
if(!(R.isFunction($field4159))) {
R.ffi.throwNonFunApp(L[1730],$field4159);
}
$ans4090 = $field4159.app((" passed to it."));
}
break;
case 24: var anf_arg4077 = $ans4090;
$step4089 = 25;
$al4091 = L[1727];
$field4160 = R.getColonFieldLoc(anf_method_obj4074,"make3",L[1727]);
if(R.isMethod($field4160)) {
$ans4090 = $field4160.full_meth(anf_method_obj4074,anf_arg4075,anf_arg4076,anf_arg4077);
} else {
if(!(R.isFunction($field4160))) {
R.ffi.throwNonFunApp(L[1727],$field4160);
}
$ans4090 = $field4160.app(anf_arg4075,anf_arg4076,anf_arg4077);
}
break;
case 25: var anf_arg4083 = $ans4090;
$step4089 = 26;
$al4091 = L[1731];
$field4161 = R.getColonFieldLoc(ED5,"text",L[1731]);
if(R.isMethod($field4161)) {
$ans4090 = $field4161.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4161))) {
R.ffi.throwNonFunApp(L[1731],$field4161);
}
$ans4090 = $field4161.app(("left side"));
}
break;
case 26: var anf_arg4080 = $ans4090;
$step4089 = 27;
$al4091 = L[1732];
if(!(R.isFunction(rest3948))) {
R.ffi.throwNonFunApp($al4091,rest3948);
}
$ans4090 = rest3948.app(anf_arg4080);
break;
case 27: var anf_arg4084 = $ans4090;
$step4089 = 28;
$al4091 = L[1726];
$field4162 = R.getColonFieldLoc(anf_method_obj4081,"make3",L[1726]);
if(R.isMethod($field4162)) {
$ans4090 = $field4162.full_meth(anf_method_obj4081,anf_arg4082,anf_arg4083,anf_arg4084);
} else {
if(!(R.isFunction($field4162))) {
R.ffi.throwNonFunApp(L[1726],$field4162);
}
$ans4090 = $field4162.app(anf_arg4082,anf_arg4083,anf_arg4084);
}
break;
case 28: ++R.GAS;
return $ans4090;
default: throw "No case numbered " + $step4089 + " in $temp_branch4088";
}
}
} catch($e4163) {
if(R.isCont($e4163) && ($step4089 !== 28)) {
$e4163.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4091,$temp_branch4088,$step4089,[fun$app$loc3956],[anf_method_obj3976,anf_method_obj3962,anf_arg3963,anf_arg3964,anf_arg3977,anf_method_obj3970,anf_arg3971,anf_arg3978,cases3982,anf_method_obj4081,anf_arg4082,anf_method_obj4074,anf_arg4075,anf_arg4076,anf_arg4083]);
}
if(R.isPyretException($e4163)) {
$e4163.pyretStack.push($al4091);
}
throw $e4163;
}
};
$ans3949 = cases3955.$app_fields($temp_branch4088,[false]);
break;
case 8: if(cases3955.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1746],false,L[1735]);
}
$step3946 = 10;
$al3950 = L[1747];
var $temp_branch4183 = function($$resumer101) {
var $step4184 = 0;
var $ans4185 = D;
var $al4186 = L[1737];
try {
if(R.isActivationRecord($$resumer101)) {
$step4184 = $$resumer101.step;
$al4186 = $$resumer101.from;
$ans4185 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj4178 = $$resumer101.vars[0];
anf_method_obj4165 = $$resumer101.vars[1];
anf_arg4179 = $$resumer101.vars[2];
anf_method_obj4171 = $$resumer101.vars[3];
anf_arg4172 = $$resumer101.vars[4];
anf_arg4173 = $$resumer101.vars[5];
anf_arg4180 = $$resumer101.vars[6];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4184) {
case 0: $al4186 = L[1737];
var anf_method_obj4178 = G(ED5,"sequence",L[1737]);
$al4186 = L[1738];
var anf_method_obj4165 = G(ED5,"para",L[1738]);
$step4184 = 1;
$al4186 = L[1739];
$field4187 = R.getColonFieldLoc(ED5,"text",L[1739]);
if(R.isMethod($field4187)) {
$ans4185 = $field4187.full_meth(ED5,("A function application expression failed."));
} else {
if(!(R.isFunction($field4187))) {
R.ffi.throwNonFunApp(L[1739],$field4187);
}
$ans4185 = $field4187.app(("A function application expression failed."));
}
break;
case 1: var anf_arg4166 = $ans4185;
$step4184 = 2;
$al4186 = L[1738];
$field4188 = R.getColonFieldLoc(anf_method_obj4165,"make1",L[1738]);
if(R.isMethod($field4188)) {
$ans4185 = $field4188.full_meth(anf_method_obj4165,anf_arg4166);
} else {
if(!(R.isFunction($field4188))) {
R.ffi.throwNonFunApp(L[1738],$field4188);
}
$ans4185 = $field4188.app(anf_arg4166);
}
break;
case 2: var anf_arg4179 = $ans4185;
$al4186 = L[1740];
var anf_method_obj4171 = G(ED5,"para",L[1740]);
$step4184 = 3;
$al4186 = L[1741];
$field4189 = R.getColonFieldLoc(ED5,"text",L[1741]);
if(R.isMethod($field4189)) {
$ans4185 = $field4189.full_meth(ED5,("The applicant had "));
} else {
if(!(R.isFunction($field4189))) {
R.ffi.throwNonFunApp(L[1741],$field4189);
}
$ans4185 = $field4189.app(("The applicant had "));
}
break;
case 3: var anf_arg4172 = $ans4185;
$step4184 = 4;
$al4186 = L[1742];
$field4190 = R.getColonFieldLoc(ED5,"ed-args",L[1742]);
if(R.isMethod($field4190)) {
$ans4185 = $field4190.full_meth(ED5,fun$app$arity3967);
} else {
if(!(R.isFunction($field4190))) {
R.ffi.throwNonFunApp(L[1742],$field4190);
}
$ans4185 = $field4190.app(fun$app$arity3967);
}
break;
case 4: var anf_arg4173 = $ans4185;
$step4184 = 5;
$al4186 = L[1743];
$field4191 = R.getColonFieldLoc(ED5,"text",L[1743]);
if(R.isMethod($field4191)) {
$ans4185 = $field4191.full_meth(ED5,(" passed to it."));
} else {
if(!(R.isFunction($field4191))) {
R.ffi.throwNonFunApp(L[1743],$field4191);
}
$ans4185 = $field4191.app((" passed to it."));
}
break;
case 5: var anf_arg4174 = $ans4185;
$step4184 = 6;
$al4186 = L[1740];
$field4192 = R.getColonFieldLoc(anf_method_obj4171,"make3",L[1740]);
if(R.isMethod($field4192)) {
$ans4185 = $field4192.full_meth(anf_method_obj4171,anf_arg4172,anf_arg4173,anf_arg4174);
} else {
if(!(R.isFunction($field4192))) {
R.ffi.throwNonFunApp(L[1740],$field4192);
}
$ans4185 = $field4192.app(anf_arg4172,anf_arg4173,anf_arg4174);
}
break;
case 6: var anf_arg4180 = $ans4185;
$step4184 = 7;
$al4186 = L[1744];
$field4193 = R.getColonFieldLoc(ED5,"text",L[1744]);
if(R.isMethod($field4193)) {
$ans4185 = $field4193.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4193))) {
R.ffi.throwNonFunApp(L[1744],$field4193);
}
$ans4185 = $field4193.app(("left side"));
}
break;
case 7: var anf_arg4177 = $ans4185;
$step4184 = 8;
$al4186 = L[1745];
if(!(R.isFunction(rest3948))) {
R.ffi.throwNonFunApp($al4186,rest3948);
}
$ans4185 = rest3948.app(anf_arg4177);
break;
case 8: var anf_arg4181 = $ans4185;
$step4184 = 9;
$al4186 = L[1737];
$field4194 = R.getColonFieldLoc(anf_method_obj4178,"make3",L[1737]);
if(R.isMethod($field4194)) {
$ans4185 = $field4194.full_meth(anf_method_obj4178,anf_arg4179,anf_arg4180,anf_arg4181);
} else {
if(!(R.isFunction($field4194))) {
R.ffi.throwNonFunApp(L[1737],$field4194);
}
$ans4185 = $field4194.app(anf_arg4179,anf_arg4180,anf_arg4181);
}
break;
case 9: ++R.GAS;
return $ans4185;
default: throw "No case numbered " + $step4184 + " in $temp_branch4183";
}
}
} catch($e4195) {
if(R.isCont($e4195) && ($step4184 !== 9)) {
$e4195.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4186,$temp_branch4183,$step4184,[],[anf_method_obj4178,anf_method_obj4165,anf_arg4179,anf_method_obj4171,anf_arg4172,anf_arg4173,anf_arg4180]);
}
if(R.isPyretException($e4195)) {
$e4195.pyretStack.push($al4186);
}
throw $e4195;
}
};
$ans3949 = cases3955.$app_fields($temp_branch4183,[]);
break;
case 9: $step3946 = 10;
$al3950 = L[1735];
$ans3949 = R.throwNoCasesMatched(L[1735],cases3955);
break;
case 10: var anf_arg4198 = $ans3949;
$step3946 = 11;
$al3950 = L[1679];
$field4199 = R.getColonFieldLoc(anf_method_obj4197,"make1",L[1679]);
if(R.isMethod($field4199)) {
$ans3949 = $field4199.full_meth(anf_method_obj4197,anf_arg4198);
} else {
if(!(R.isFunction($field4199))) {
R.ffi.throwNonFunApp(L[1679],$field4199);
}
$ans3949 = $field4199.app(anf_arg4198);
}
break;
case 11: ++R.GAS;
return $ans3949;
default: throw "No case numbered " + $step3946 + " in $temp_lam3947";
}
}
} catch($e4201) {
if(R.isCont($e4201) && ($step3946 !== 11)) {
$e4201.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3950,$temp_lam3947,$step3946,[rest3948],[anf_method_obj4197,cases3955]);
}
if(R.isPyretException($e4201)) {
$e4201.pyretStack.push($al3950);
}
throw $e4201;
}
};
var helper4404 = R.makeFunction($temp_lam3947,"");
$al3943 = L[1751];
var anf_arg4202 = G(self3938,"fun-def-loc",L[1751]);
$step3936 = 2;
$al3943 = L[1752];
if(!(R.isFunction(src$available3940))) {
R.ffi.throwNonFunApp($al3943,src$available3940);
}
$ans3942 = src$available3940.app(anf_arg4202);
break;
case 2: var anf_arg4203 = $ans3942;
$al3943 = L[1752];
var anf_if4513 = R.checkWrapBoolean(anf_arg4203);
$step3936 = R.isPyretTrue(anf_if4513)?3:9;
break;
case 3: var is$underscore4218 = {"$var":D};
var $temp_lam4205 = function($arg4206) {
var $step4204 = 0;
var $ans4207 = D;
var $al4208 = L[1757];
try {
if(R.isActivationRecord($arg4206)) {
$step4204 = $arg4206.step;
$al4208 = $arg4206.from;
$ans4207 = $arg4206.ans;
arg4206 = $arg4206.args[0];
cases4209 = $arg4206.vars[0];
cases4211 = $arg4206.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1757],1,$t);
}
var arg4206 = $arg4206;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4204) {
case 0: var cases4209 = arg4206;
var $cases_dispatch4215 = {"s-id":1};
$al4208 = L[1756];
$step4204 = $cases_dispatch4215[cases4209.$name] || 4;
break;
case 1: if(cases4209.$arity !== 2) {
if(cases4209.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1755],2,cases4209.$arity,L[1756]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1755],true,L[1756]);
}
}
var $fn187 = cases4209.$constructor.$fieldNames;
R.derefField(cases4209.dict[$fn187[0]],cases4209.$mut_fields_mask[0],false);
var id4210 = R.derefField(cases4209.dict[$fn187[1]],cases4209.$mut_fields_mask[1],false);
var cases4211 = id4210;
var $cases_dispatch4213 = {"s-underscore":2};
$al4208 = L[1754];
$step4204 = $cases_dispatch4213[cases4211.$name] || 3;
break;
case 2: if(cases4211.$arity !== 1) {
if(cases4211.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1753],1,cases4211.$arity,L[1754]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1753],true,L[1754]);
}
}
var $fn187 = cases4211.$constructor.$fieldNames;
R.derefField(cases4211.dict[$fn187[0]],cases4211.$mut_fields_mask[0],false);
$step4204 = 5;
$ans4207 = (true);
break;
case 3: $step4204 = 5;
$ans4207 = (false);
break;
case 4: $step4204 = 5;
$ans4207 = (false);
break;
case 5: ++R.GAS;
return $ans4207;
default: throw "No case numbered " + $step4204 + " in $temp_lam4205";
}
}
} catch($e4216) {
if(R.isCont($e4216) && ($step4204 !== 5)) {
$e4216.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4208,$temp_lam4205,$step4204,[arg4206],[cases4209,cases4211]);
}
if(R.isPyretException($e4216)) {
$e4216.pyretStack.push($al4208);
}
throw $e4216;
}
};
var anf_assign4217 = R.makeFunction($temp_lam4205,"is-underscore");
is$underscore4218.$var = anf_assign4217;
$al3943 = L[1758];
var anf_arg4219 = G(self3938,"fun-def-loc",L[1758]);
$step3936 = 4;
$al3943 = L[1859];
if(!(R.isFunction(maybe$ast3941))) {
R.ffi.throwNonFunApp($al3943,maybe$ast3941);
}
$ans3942 = maybe$ast3941.app(anf_arg4219);
break;
case 4: var cases4220 = $ans3942;
$step3936 = 5;
$al3943 = L[1858];
R._checkAnn(L[1858],R.getDotAnn(L[1858],"O",O13,"Option"),cases4220);
break;
case 5: var $cases_dispatch4494 = {"some":6,
"none":7};
$al3943 = L[1844];
$step3936 = $cases_dispatch4494[cases4220.$name] || 8;
break;
case 6: if(cases4220.$arity !== 1) {
if(cases4220.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1843],1,cases4220.$arity,L[1844]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1843],true,L[1844]);
}
}
$step3936 = 10;
$al3943 = L[1845];
var $temp_branch4406 = function($ast4221) {
var $step4407 = 0;
var $ans4408 = D;
var $al4409 = L[1782];
try {
if(R.isActivationRecord($ast4221)) {
$step4407 = $ast4221.step;
$al4409 = $ast4221.from;
$ans4408 = $ast4221.ans;
ast4221 = $ast4221.args[0];
cases4222 = $ast4221.vars[0];
l4287 = $ast4221.vars[1];
b4286 = $ast4221.vars[2];
anf_tuple_fields4290 = $ast4221.vars[3];
l4308 = $ast4221.vars[4];
b4307 = $ast4221.vars[5];
anf_tuple_fields4311 = $ast4221.vars[6];
l4329 = $ast4221.vars[7];
b4328 = $ast4221.vars[8];
anf_tuple_fields4332 = $ast4221.vars[9];
tup4377 = $ast4221.vars[10];
} else {
var ast4221 = $ast4221;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4407) {
case 0: var cases4222 = ast4221;
var $cases_dispatch4455 = {"s-op":1,
"s-app":2,
"s-fun":5,
"s-lam":8,
"s-method":11,
"s-dot":14,
"s-extend":17,
"s-update":20,
"s-get-bang":23};
$al4409 = L[1782];
$step4407 = $cases_dispatch4455[cases4222.$name] || 26;
break;
case 1: if(cases4222.$arity !== 5) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1781],5,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1781],true,L[1782]);
}
}
$step4407 = 27;
$al4409 = L[1783];
var $temp_branch4414 = function($$underscore4257,$$underscore4258,$$underscore4259,$l4224,$r4226) {
var $step4415 = 0;
var $ans4416 = D;
var $al4417 = L[1780];
try {
if(R.isActivationRecord($$underscore4257)) {
$step4415 = $$underscore4257.step;
$al4417 = $$underscore4257.from;
$ans4416 = $$underscore4257.ans;
$underscore4257 = $$underscore4257.args[0];
$underscore4258 = $$underscore4257.args[1];
$underscore4259 = $$underscore4257.args[2];
l4224 = $$underscore4257.args[3];
r4226 = $$underscore4257.args[4];
l$underscore4227 = $$underscore4257.vars[0];
r$underscore4228 = $$underscore4257.vars[1];
} else {
var $underscore4257 = $$underscore4257;
var $underscore4258 = $$underscore4258;
var $underscore4259 = $$underscore4259;
var l4224 = $l4224;
var r4226 = $r4226;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4415) {
case 0: var anf_fun4223 = is$underscore4218.$var;
$step4415 = 1;
$al4417 = L[1779];
if(!(R.isFunction(anf_fun4223))) {
R.ffi.throwNonFunApp($al4417,anf_fun4223);
}
$ans4416 = anf_fun4223.app(l4224);
break;
case 1: var l$underscore4227 = $ans4416;
var anf_fun4225 = is$underscore4218.$var;
$step4415 = 2;
$al4417 = L[1778];
if(!(R.isFunction(anf_fun4225))) {
R.ffi.throwNonFunApp($al4417,anf_fun4225);
}
$ans4416 = anf_fun4225.app(r4226);
break;
case 2: var r$underscore4228 = $ans4416;
$al4417 = L[1759];
var anf_if4248 = R.checkWrapBoolean(l$underscore4227);
$step4415 = R.isPyretTrue(anf_if4248)?3:4;
break;
case 3: $step4415 = 5;
$al4417 = L[1760];
$ans4416 = R.checkWrapBoolean(r$underscore4228);
break;
case 4: $step4415 = 5;
$ans4416 = (false);
break;
case 5: var anf_arg4229 = $ans4416;
$al4417 = L[1761];
var anf_if4247 = R.checkWrapBoolean(anf_arg4229);
$step4415 = R.isPyretTrue(anf_if4247)?6:7;
break;
case 6: $al4417 = L[1762];
var anf_bracket4230 = G(l4224,"id",L[1762]);
$al4417 = L[1763];
var anf_arg4232 = G(anf_bracket4230,"l",L[1763]);
$al4417 = L[1764];
var anf_bracket4231 = G(r4226,"id",L[1764]);
$al4417 = L[1765];
var anf_arg4233 = G(anf_bracket4231,"l",L[1765]);
$step4415 = 12;
$al4417 = L[1766];
$field4418 = R.getColonFieldLoc(raw$array6,"make2",L[1766]);
if(R.isMethod($field4418)) {
$ans4416 = $field4418.full_meth(raw$array6,anf_arg4232,anf_arg4233);
} else {
if(!(R.isFunction($field4418))) {
R.ffi.throwNonFunApp(L[1766],$field4418);
}
$ans4416 = $field4418.app(anf_arg4232,anf_arg4233);
}
break;
case 7: $al4417 = L[1767];
var anf_if4243 = R.checkWrapBoolean(l$underscore4227);
$step4415 = R.isPyretTrue(anf_if4243)?8:9;
break;
case 8: $al4417 = L[1768];
var anf_bracket4235 = G(l4224,"id",L[1768]);
$al4417 = L[1769];
var anf_arg4236 = G(anf_bracket4235,"l",L[1769]);
$step4415 = 12;
$al4417 = L[1770];
$field4419 = R.getColonFieldLoc(raw$array6,"make1",L[1770]);
if(R.isMethod($field4419)) {
$ans4416 = $field4419.full_meth(raw$array6,anf_arg4236);
} else {
if(!(R.isFunction($field4419))) {
R.ffi.throwNonFunApp(L[1770],$field4419);
}
$ans4416 = $field4419.app(anf_arg4236);
}
break;
case 9: $al4417 = L[1771];
var anf_if4242 = R.checkWrapBoolean(r$underscore4228);
$step4415 = R.isPyretTrue(anf_if4242)?10:11;
break;
case 10: $al4417 = L[1772];
var anf_bracket4238 = G(r4226,"id",L[1772]);
$al4417 = L[1773];
var anf_arg4239 = G(anf_bracket4238,"l",L[1773]);
$step4415 = 12;
$al4417 = L[1774];
$field4420 = R.getColonFieldLoc(raw$array6,"make1",L[1774]);
if(R.isMethod($field4420)) {
$ans4416 = $field4420.full_meth(raw$array6,anf_arg4239);
} else {
if(!(R.isFunction($field4420))) {
R.ffi.throwNonFunApp(L[1774],$field4420);
}
$ans4416 = $field4420.app(anf_arg4239);
}
break;
case 11: $step4415 = 12;
$al4417 = L[1775];
$field4421 = R.getColonFieldLoc(raw$array6,"make0",L[1775]);
if(R.isMethod($field4421)) {
$ans4416 = $field4421.full_meth(raw$array6);
} else {
if(!(R.isFunction($field4421))) {
R.ffi.throwNonFunApp(L[1775],$field4421);
}
$ans4416 = $field4421.app();
}
break;
case 12: var anf_arg4244 = $ans4416;
$step4415 = 13;
$al4417 = L[1777];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al4417,raw$array$to$list5);
}
$ans4416 = raw$array$to$list5.app(anf_arg4244);
break;
case 13: var anf_tuple_fields4245 = $ans4416;
$al4417 = L[1776];
var anf_tuple_fields4246 = G(self3938,"fun-def-loc",L[1776]);
$step4415 = 14;
$ans4416 = R.makeTuple([anf_tuple_fields4245,anf_tuple_fields4246]);
break;
case 14: ++R.GAS;
return $ans4416;
default: throw "No case numbered " + $step4415 + " in $temp_branch4414";
}
}
} catch($e4422) {
if(R.isCont($e4422) && ($step4415 !== 14)) {
$e4422.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4417,$temp_branch4414,$step4415,[$underscore4257,$underscore4258,$underscore4259,l4224,r4226],[l$underscore4227,r$underscore4228]);
}
if(R.isPyretException($e4422)) {
$e4422.pyretStack.push($al4417);
}
throw $e4422;
}
};
$ans4408 = cases4222.$app_fields($temp_branch4414,[false,false,false,false,false]);
break;
case 2: if(cases4222.$arity !== 3) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1788],3,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1788],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
var args4261 = R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
var anf_arg4262 = is$underscore4218.$var;
$step4407 = 3;
$al4409 = L[1784];
$field4423 = R.getColonFieldLoc(args4261,"filter",L[1784]);
if(R.isMethod($field4423)) {
$ans4408 = $field4423.full_meth(args4261,anf_arg4262);
} else {
if(!(R.isFunction($field4423))) {
R.ffi.throwNonFunApp(L[1784],$field4423);
}
$ans4408 = $field4423.app(anf_arg4262);
}
break;
case 3: var anf_method_obj4270 = $ans4408;
var $temp_lam4425 = function($recv_4266) {
var $step4424 = 0;
var $ans4426 = D;
var $al4427 = L[1785];
try {
if(R.isActivationRecord($recv_4266)) {
$step4424 = $recv_4266.step;
$al4427 = $recv_4266.from;
$ans4426 = $recv_4266.ans;
recv_4266 = $recv_4266.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1785],1,$t);
}
var recv_4266 = $recv_4266;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4424) {
case 0: $step4424 = 1;
$al4427 = L[1785];
$ans4426 = G(recv_4266,"l",L[1785]);
break;
case 1: ++R.GAS;
return $ans4426;
default: throw "No case numbered " + $step4424 + " in $temp_lam4425";
}
}
} catch($e4428) {
if(R.isCont($e4428) && ($step4424 !== 1)) {
$e4428.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4427,$temp_lam4425,$step4424,[recv_4266],[]);
}
if(R.isPyretException($e4428)) {
$e4428.pyretStack.push($al4427);
}
throw $e4428;
}
};
var anf_arg4271 = R.makeFunction($temp_lam4425,"");
$step4407 = 4;
$al4409 = L[1786];
$field4429 = R.getColonFieldLoc(anf_method_obj4270,"map",L[1786]);
if(R.isMethod($field4429)) {
$ans4408 = $field4429.full_meth(anf_method_obj4270,anf_arg4271);
} else {
if(!(R.isFunction($field4429))) {
R.ffi.throwNonFunApp(L[1786],$field4429);
}
$ans4408 = $field4429.app(anf_arg4271);
}
break;
case 4: var anf_tuple_fields4273 = $ans4408;
$al4409 = L[1787];
var anf_tuple_fields4274 = G(self3938,"fun-def-loc",L[1787]);
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4273,anf_tuple_fields4274]);
break;
case 5: if(cases4222.$arity !== 9) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1793],9,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1793],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
var l4287 = R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
var args4283 = R.derefField(cases4222.dict[$fn187[3]],cases4222.$mut_fields_mask[3],false);
R.derefField(cases4222.dict[$fn187[4]],cases4222.$mut_fields_mask[4],false);
R.derefField(cases4222.dict[$fn187[5]],cases4222.$mut_fields_mask[5],false);
var b4286 = R.derefField(cases4222.dict[$fn187[6]],cases4222.$mut_fields_mask[6],false);
R.derefField(cases4222.dict[$fn187[7]],cases4222.$mut_fields_mask[7],false);
R.derefField(cases4222.dict[$fn187[8]],cases4222.$mut_fields_mask[8],false);
var $temp_lam4431 = function($recv_4279) {
var $step4430 = 0;
var $ans4432 = D;
var $al4433 = L[1789];
try {
if(R.isActivationRecord($recv_4279)) {
$step4430 = $recv_4279.step;
$al4433 = $recv_4279.from;
$ans4432 = $recv_4279.ans;
recv_4279 = $recv_4279.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1789],1,$t);
}
var recv_4279 = $recv_4279;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4430) {
case 0: $step4430 = 1;
$al4433 = L[1789];
$ans4432 = G(recv_4279,"l",L[1789]);
break;
case 1: ++R.GAS;
return $ans4432;
default: throw "No case numbered " + $step4430 + " in $temp_lam4431";
}
}
} catch($e4434) {
if(R.isCont($e4434) && ($step4430 !== 1)) {
$e4434.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4433,$temp_lam4431,$step4430,[recv_4279],[]);
}
if(R.isPyretException($e4434)) {
$e4434.pyretStack.push($al4433);
}
throw $e4434;
}
};
var anf_arg4284 = R.makeFunction($temp_lam4431,"");
$step4407 = 6;
$al4409 = L[1790];
$field4435 = R.getColonFieldLoc(args4283,"map",L[1790]);
if(R.isMethod($field4435)) {
$ans4408 = $field4435.full_meth(args4283,anf_arg4284);
} else {
if(!(R.isFunction($field4435))) {
R.ffi.throwNonFunApp(L[1790],$field4435);
}
$ans4408 = $field4435.app(anf_arg4284);
}
break;
case 6: var anf_tuple_fields4290 = $ans4408;
$al4409 = L[1791];
var anf_arg4288 = G(b4286,"l",L[1791]);
$step4407 = 7;
$al4409 = L[1792];
$field4436 = R.getColonFieldLoc(l4287,"upto",L[1792]);
if(R.isMethod($field4436)) {
$ans4408 = $field4436.full_meth(l4287,anf_arg4288);
} else {
if(!(R.isFunction($field4436))) {
R.ffi.throwNonFunApp(L[1792],$field4436);
}
$ans4408 = $field4436.app(anf_arg4288);
}
break;
case 7: var anf_tuple_fields4291 = $ans4408;
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4290,anf_tuple_fields4291]);
break;
case 8: if(cases4222.$arity !== 9) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1798],9,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1798],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
var l4308 = R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
var args4304 = R.derefField(cases4222.dict[$fn187[3]],cases4222.$mut_fields_mask[3],false);
R.derefField(cases4222.dict[$fn187[4]],cases4222.$mut_fields_mask[4],false);
R.derefField(cases4222.dict[$fn187[5]],cases4222.$mut_fields_mask[5],false);
var b4307 = R.derefField(cases4222.dict[$fn187[6]],cases4222.$mut_fields_mask[6],false);
R.derefField(cases4222.dict[$fn187[7]],cases4222.$mut_fields_mask[7],false);
R.derefField(cases4222.dict[$fn187[8]],cases4222.$mut_fields_mask[8],false);
var $temp_lam4438 = function($recv_4300) {
var $step4437 = 0;
var $ans4439 = D;
var $al4440 = L[1794];
try {
if(R.isActivationRecord($recv_4300)) {
$step4437 = $recv_4300.step;
$al4440 = $recv_4300.from;
$ans4439 = $recv_4300.ans;
recv_4300 = $recv_4300.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1794],1,$t);
}
var recv_4300 = $recv_4300;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4437) {
case 0: $step4437 = 1;
$al4440 = L[1794];
$ans4439 = G(recv_4300,"l",L[1794]);
break;
case 1: ++R.GAS;
return $ans4439;
default: throw "No case numbered " + $step4437 + " in $temp_lam4438";
}
}
} catch($e4441) {
if(R.isCont($e4441) && ($step4437 !== 1)) {
$e4441.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4440,$temp_lam4438,$step4437,[recv_4300],[]);
}
if(R.isPyretException($e4441)) {
$e4441.pyretStack.push($al4440);
}
throw $e4441;
}
};
var anf_arg4305 = R.makeFunction($temp_lam4438,"");
$step4407 = 9;
$al4409 = L[1795];
$field4442 = R.getColonFieldLoc(args4304,"map",L[1795]);
if(R.isMethod($field4442)) {
$ans4408 = $field4442.full_meth(args4304,anf_arg4305);
} else {
if(!(R.isFunction($field4442))) {
R.ffi.throwNonFunApp(L[1795],$field4442);
}
$ans4408 = $field4442.app(anf_arg4305);
}
break;
case 9: var anf_tuple_fields4311 = $ans4408;
$al4409 = L[1796];
var anf_arg4309 = G(b4307,"l",L[1796]);
$step4407 = 10;
$al4409 = L[1797];
$field4443 = R.getColonFieldLoc(l4308,"upto",L[1797]);
if(R.isMethod($field4443)) {
$ans4408 = $field4443.full_meth(l4308,anf_arg4309);
} else {
if(!(R.isFunction($field4443))) {
R.ffi.throwNonFunApp(L[1797],$field4443);
}
$ans4408 = $field4443.app(anf_arg4309);
}
break;
case 10: var anf_tuple_fields4312 = $ans4408;
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4311,anf_tuple_fields4312]);
break;
case 11: if(cases4222.$arity !== 9) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1803],9,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1803],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
var l4329 = R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
var args4325 = R.derefField(cases4222.dict[$fn187[3]],cases4222.$mut_fields_mask[3],false);
R.derefField(cases4222.dict[$fn187[4]],cases4222.$mut_fields_mask[4],false);
R.derefField(cases4222.dict[$fn187[5]],cases4222.$mut_fields_mask[5],false);
var b4328 = R.derefField(cases4222.dict[$fn187[6]],cases4222.$mut_fields_mask[6],false);
R.derefField(cases4222.dict[$fn187[7]],cases4222.$mut_fields_mask[7],false);
R.derefField(cases4222.dict[$fn187[8]],cases4222.$mut_fields_mask[8],false);
var $temp_lam4445 = function($recv_4321) {
var $step4444 = 0;
var $ans4446 = D;
var $al4447 = L[1799];
try {
if(R.isActivationRecord($recv_4321)) {
$step4444 = $recv_4321.step;
$al4447 = $recv_4321.from;
$ans4446 = $recv_4321.ans;
recv_4321 = $recv_4321.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1799],1,$t);
}
var recv_4321 = $recv_4321;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4444) {
case 0: $step4444 = 1;
$al4447 = L[1799];
$ans4446 = G(recv_4321,"l",L[1799]);
break;
case 1: ++R.GAS;
return $ans4446;
default: throw "No case numbered " + $step4444 + " in $temp_lam4445";
}
}
} catch($e4448) {
if(R.isCont($e4448) && ($step4444 !== 1)) {
$e4448.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4447,$temp_lam4445,$step4444,[recv_4321],[]);
}
if(R.isPyretException($e4448)) {
$e4448.pyretStack.push($al4447);
}
throw $e4448;
}
};
var anf_arg4326 = R.makeFunction($temp_lam4445,"");
$step4407 = 12;
$al4409 = L[1800];
$field4449 = R.getColonFieldLoc(args4325,"map",L[1800]);
if(R.isMethod($field4449)) {
$ans4408 = $field4449.full_meth(args4325,anf_arg4326);
} else {
if(!(R.isFunction($field4449))) {
R.ffi.throwNonFunApp(L[1800],$field4449);
}
$ans4408 = $field4449.app(anf_arg4326);
}
break;
case 12: var anf_tuple_fields4332 = $ans4408;
$al4409 = L[1801];
var anf_arg4330 = G(b4328,"l",L[1801]);
$step4407 = 13;
$al4409 = L[1802];
$field4450 = R.getColonFieldLoc(l4329,"upto",L[1802]);
if(R.isMethod($field4450)) {
$ans4408 = $field4450.full_meth(l4329,anf_arg4330);
} else {
if(!(R.isFunction($field4450))) {
R.ffi.throwNonFunApp(L[1802],$field4450);
}
$ans4408 = $field4450.app(anf_arg4330);
}
break;
case 13: var anf_tuple_fields4333 = $ans4408;
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4332,anf_tuple_fields4333]);
break;
case 14: if(cases4222.$arity !== 3) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1809],3,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1809],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
var obj4340 = R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
$al4409 = L[1804];
var anf_bracket4341 = G(obj4340,"id",L[1804]);
$al4409 = L[1805];
var anf_arg4342 = G(anf_bracket4341,"l",L[1805]);
$step4407 = 15;
$al4409 = L[1806];
$field4451 = R.getColonFieldLoc(raw$array6,"make1",L[1806]);
if(R.isMethod($field4451)) {
$ans4408 = $field4451.full_meth(raw$array6,anf_arg4342);
} else {
if(!(R.isFunction($field4451))) {
R.ffi.throwNonFunApp(L[1806],$field4451);
}
$ans4408 = $field4451.app(anf_arg4342);
}
break;
case 15: var anf_arg4344 = $ans4408;
$step4407 = 16;
$al4409 = L[1808];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al4409,raw$array$to$list5);
}
$ans4408 = raw$array$to$list5.app(anf_arg4344);
break;
case 16: var anf_tuple_fields4345 = $ans4408;
$al4409 = L[1807];
var anf_tuple_fields4346 = G(self3938,"fun-def-loc",L[1807]);
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4345,anf_tuple_fields4346]);
break;
case 17: if(cases4222.$arity !== 3) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1815],3,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1815],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
var obj4349 = R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
$al4409 = L[1810];
var anf_bracket4350 = G(obj4349,"id",L[1810]);
$al4409 = L[1811];
var anf_arg4351 = G(anf_bracket4350,"l",L[1811]);
$step4407 = 18;
$al4409 = L[1812];
$field4452 = R.getColonFieldLoc(raw$array6,"make1",L[1812]);
if(R.isMethod($field4452)) {
$ans4408 = $field4452.full_meth(raw$array6,anf_arg4351);
} else {
if(!(R.isFunction($field4452))) {
R.ffi.throwNonFunApp(L[1812],$field4452);
}
$ans4408 = $field4452.app(anf_arg4351);
}
break;
case 18: var anf_arg4353 = $ans4408;
$step4407 = 19;
$al4409 = L[1814];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al4409,raw$array$to$list5);
}
$ans4408 = raw$array$to$list5.app(anf_arg4353);
break;
case 19: var anf_tuple_fields4354 = $ans4408;
$al4409 = L[1813];
var anf_tuple_fields4355 = G(self3938,"fun-def-loc",L[1813]);
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4354,anf_tuple_fields4355]);
break;
case 20: if(cases4222.$arity !== 3) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1821],3,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1821],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
var obj4358 = R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
$al4409 = L[1816];
var anf_bracket4359 = G(obj4358,"id",L[1816]);
$al4409 = L[1817];
var anf_arg4360 = G(anf_bracket4359,"l",L[1817]);
$step4407 = 21;
$al4409 = L[1818];
$field4453 = R.getColonFieldLoc(raw$array6,"make1",L[1818]);
if(R.isMethod($field4453)) {
$ans4408 = $field4453.full_meth(raw$array6,anf_arg4360);
} else {
if(!(R.isFunction($field4453))) {
R.ffi.throwNonFunApp(L[1818],$field4453);
}
$ans4408 = $field4453.app(anf_arg4360);
}
break;
case 21: var anf_arg4362 = $ans4408;
$step4407 = 22;
$al4409 = L[1820];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al4409,raw$array$to$list5);
}
$ans4408 = raw$array$to$list5.app(anf_arg4362);
break;
case 22: var anf_tuple_fields4363 = $ans4408;
$al4409 = L[1819];
var anf_tuple_fields4364 = G(self3938,"fun-def-loc",L[1819]);
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4363,anf_tuple_fields4364]);
break;
case 23: if(cases4222.$arity !== 3) {
if(cases4222.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1827],3,cases4222.$arity,L[1782]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1827],true,L[1782]);
}
}
var $fn187 = cases4222.$constructor.$fieldNames;
R.derefField(cases4222.dict[$fn187[0]],cases4222.$mut_fields_mask[0],false);
var obj4367 = R.derefField(cases4222.dict[$fn187[1]],cases4222.$mut_fields_mask[1],false);
R.derefField(cases4222.dict[$fn187[2]],cases4222.$mut_fields_mask[2],false);
$al4409 = L[1822];
var anf_bracket4368 = G(obj4367,"id",L[1822]);
$al4409 = L[1823];
var anf_arg4369 = G(anf_bracket4368,"l",L[1823]);
$step4407 = 24;
$al4409 = L[1824];
$field4454 = R.getColonFieldLoc(raw$array6,"make1",L[1824]);
if(R.isMethod($field4454)) {
$ans4408 = $field4454.full_meth(raw$array6,anf_arg4369);
} else {
if(!(R.isFunction($field4454))) {
R.ffi.throwNonFunApp(L[1824],$field4454);
}
$ans4408 = $field4454.app(anf_arg4369);
}
break;
case 24: var anf_arg4371 = $ans4408;
$step4407 = 25;
$al4409 = L[1826];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al4409,raw$array$to$list5);
}
$ans4408 = raw$array$to$list5.app(anf_arg4371);
break;
case 25: var anf_tuple_fields4372 = $ans4408;
$al4409 = L[1825];
var anf_tuple_fields4373 = G(self3938,"fun-def-loc",L[1825]);
$step4407 = 27;
$ans4408 = R.makeTuple([anf_tuple_fields4372,anf_tuple_fields4373]);
break;
case 26: $step4407 = 27;
$al4409 = L[1782];
$ans4408 = R.throwNoCasesMatched(L[1782],cases4222);
break;
case 27: var tup4377 = $ans4408;
$step4407 = 28;
$al4409 = L[1842];
R._checkAnn(L[1842],R.makeTupleAnn([L[1841],L[1841]],[R.Any,R.Any]),tup4377);
break;
case 28: var args4388 = R.getTuple(tup4377,0,L[1828]);
var fun$def$snippet$loc4397 = R.getTuple(tup4377,1,L[1829]);
var $temp_lam4457 = function($applicant4380) {
var $step4456 = 0;
var $ans4458 = D;
var $al4459 = L[1839];
try {
if(R.isActivationRecord($applicant4380)) {
$step4456 = $applicant4380.step;
$al4459 = $applicant4380.from;
$ans4458 = $applicant4380.ans;
applicant4380 = $applicant4380.args[0];
anf_method_obj4399 = $applicant4380.vars[0];
anf_method_obj4391 = $applicant4380.vars[1];
anf_arg4392 = $applicant4380.vars[2];
anf_arg4393 = $applicant4380.vars[3];
anf_arg4394 = $applicant4380.vars[4];
anf_arg4400 = $applicant4380.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1839],1,$t);
}
var applicant4380 = $applicant4380;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4456) {
case 0: $al4459 = L[1830];
var anf_method_obj4399 = G(ED5,"sequence",L[1830]);
$al4459 = L[1831];
var anf_method_obj4391 = G(ED5,"para",L[1831]);
$step4456 = 1;
$al4459 = L[1832];
$field4460 = R.getColonFieldLoc(ED5,"text",L[1832]);
if(R.isMethod($field4460)) {
$ans4458 = $field4460.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field4460))) {
R.ffi.throwNonFunApp(L[1832],$field4460);
}
$ans4458 = $field4460.app(("The "));
}
break;
case 1: var anf_arg4392 = $ans4458;
$step4456 = 2;
$al4459 = L[1833];
$field4461 = R.getColonFieldLoc(ED5,"text",L[1833]);
if(R.isMethod($field4461)) {
$ans4458 = $field4461.full_meth(ED5,(" was a constructor accepting "));
} else {
if(!(R.isFunction($field4461))) {
R.ffi.throwNonFunApp(L[1833],$field4461);
}
$ans4458 = $field4461.app((" was a constructor accepting "));
}
break;
case 2: var anf_arg4393 = $ans4458;
$al4459 = L[1834];
var anf_arg4385 = G(self3938,"fun-def-arity",L[1834]);
$step4456 = 3;
$al4459 = L[1835];
$field4462 = R.getColonFieldLoc(ED5,"ed-args",L[1835]);
if(R.isMethod($field4462)) {
$ans4458 = $field4462.full_meth(ED5,anf_arg4385);
} else {
if(!(R.isFunction($field4462))) {
R.ffi.throwNonFunApp(L[1835],$field4462);
}
$ans4458 = $field4462.app(anf_arg4385);
}
break;
case 3: var anf_arg4387 = $ans4458;
$step4456 = 4;
$al4459 = L[1836];
$field4463 = R.getColonFieldLoc(ED5,"highlight",L[1836]);
if(R.isMethod($field4463)) {
$ans4458 = $field4463.full_meth(ED5,anf_arg4387,args4388,(2));
} else {
if(!(R.isFunction($field4463))) {
R.ffi.throwNonFunApp(L[1836],$field4463);
}
$ans4458 = $field4463.app(anf_arg4387,args4388,(2));
}
break;
case 4: var anf_arg4394 = $ans4458;
$step4456 = 5;
$al4459 = L[1837];
$field4464 = R.getColonFieldLoc(ED5,"text",L[1837]);
if(R.isMethod($field4464)) {
$ans4458 = $field4464.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field4464))) {
R.ffi.throwNonFunApp(L[1837],$field4464);
}
$ans4458 = $field4464.app((":"));
}
break;
case 5: var anf_arg4395 = $ans4458;
$step4456 = 6;
$al4459 = L[1831];
$field4465 = R.getColonFieldLoc(anf_method_obj4391,"make5",L[1831]);
if(R.isMethod($field4465)) {
$ans4458 = $field4465.full_meth(anf_method_obj4391,anf_arg4392,applicant4380,anf_arg4393,anf_arg4394,anf_arg4395);
} else {
if(!(R.isFunction($field4465))) {
R.ffi.throwNonFunApp(L[1831],$field4465);
}
$ans4458 = $field4465.app(anf_arg4392,applicant4380,anf_arg4393,anf_arg4394,anf_arg4395);
}
break;
case 6: var anf_arg4400 = $ans4458;
$step4456 = 7;
$al4459 = L[1838];
$field4466 = R.getColonFieldLoc(ED5,"cmcode",L[1838]);
if(R.isMethod($field4466)) {
$ans4458 = $field4466.full_meth(ED5,fun$def$snippet$loc4397);
} else {
if(!(R.isFunction($field4466))) {
R.ffi.throwNonFunApp(L[1838],$field4466);
}
$ans4458 = $field4466.app(fun$def$snippet$loc4397);
}
break;
case 7: var anf_arg4401 = $ans4458;
$step4456 = 8;
$al4459 = L[1830];
$field4467 = R.getColonFieldLoc(anf_method_obj4399,"make2",L[1830]);
if(R.isMethod($field4467)) {
$ans4458 = $field4467.full_meth(anf_method_obj4399,anf_arg4400,anf_arg4401);
} else {
if(!(R.isFunction($field4467))) {
R.ffi.throwNonFunApp(L[1830],$field4467);
}
$ans4458 = $field4467.app(anf_arg4400,anf_arg4401);
}
break;
case 8: ++R.GAS;
return $ans4458;
default: throw "No case numbered " + $step4456 + " in $temp_lam4457";
}
}
} catch($e4468) {
if(R.isCont($e4468) && ($step4456 !== 8)) {
$e4468.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4459,$temp_lam4457,$step4456,[applicant4380],[anf_method_obj4399,anf_method_obj4391,anf_arg4392,anf_arg4393,anf_arg4394,anf_arg4400]);
}
if(R.isPyretException($e4468)) {
$e4468.pyretStack.push($al4459);
}
throw $e4468;
}
};
var anf_arg4405 = R.makeFunction($temp_lam4457,"");
$step4407 = 29;
$al4409 = L[1840];
if(!(R.isFunction(helper4404))) {
R.ffi.throwNonFunApp($al4409,helper4404);
}
$ans4408 = helper4404.app(anf_arg4405);
break;
case 29: ++R.GAS;
return $ans4408;
default: throw "No case numbered " + $step4407 + " in $temp_branch4406";
}
}
} catch($e4469) {
if(R.isCont($e4469) && ($step4407 !== 29)) {
$e4469.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4409,$temp_branch4406,$step4407,[ast4221],[cases4222,l4287,b4286,anf_tuple_fields4290,l4308,b4307,anf_tuple_fields4311,l4329,b4328,anf_tuple_fields4332,tup4377]);
}
if(R.isPyretException($e4469)) {
$e4469.pyretStack.push($al4409);
}
throw $e4469;
}
};
$ans3942 = cases4220.$app_fields($temp_branch4406,[false]);
break;
case 7: if(cases4220.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1857],false,L[1844]);
}
var $temp_lam4471 = function($applicant4472) {
var $step4470 = 0;
var $ans4473 = D;
var $al4474 = L[1855];
try {
if(R.isActivationRecord($applicant4472)) {
$step4470 = $applicant4472.step;
$al4474 = $applicant4472.from;
$ans4473 = $applicant4472.ans;
applicant4472 = $applicant4472.args[0];
anf_method_obj4488 = $applicant4472.vars[0];
anf_method_obj4480 = $applicant4472.vars[1];
anf_arg4481 = $applicant4472.vars[2];
anf_arg4482 = $applicant4472.vars[3];
anf_arg4483 = $applicant4472.vars[4];
anf_arg4489 = $applicant4472.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1855],1,$t);
}
var applicant4472 = $applicant4472;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4470) {
case 0: $al4474 = L[1846];
var anf_method_obj4488 = G(ED5,"sequence",L[1846]);
$al4474 = L[1847];
var anf_method_obj4480 = G(ED5,"para",L[1847]);
$step4470 = 1;
$al4474 = L[1848];
$field4475 = R.getColonFieldLoc(ED5,"text",L[1848]);
if(R.isMethod($field4475)) {
$ans4473 = $field4475.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field4475))) {
R.ffi.throwNonFunApp(L[1848],$field4475);
}
$ans4473 = $field4475.app(("The "));
}
break;
case 1: var anf_arg4481 = $ans4473;
$step4470 = 2;
$al4474 = L[1849];
$field4476 = R.getColonFieldLoc(ED5,"text",L[1849]);
if(R.isMethod($field4476)) {
$ans4473 = $field4476.full_meth(ED5,(" was a constructor defined accepting "));
} else {
if(!(R.isFunction($field4476))) {
R.ffi.throwNonFunApp(L[1849],$field4476);
}
$ans4473 = $field4476.app((" was a constructor defined accepting "));
}
break;
case 2: var anf_arg4482 = $ans4473;
$al4474 = L[1850];
var anf_arg4477 = G(self3938,"fun-def-arity",L[1850]);
$step4470 = 3;
$al4474 = L[1851];
$field4478 = R.getColonFieldLoc(ED5,"ed-args",L[1851]);
if(R.isMethod($field4478)) {
$ans4473 = $field4478.full_meth(ED5,anf_arg4477);
} else {
if(!(R.isFunction($field4478))) {
R.ffi.throwNonFunApp(L[1851],$field4478);
}
$ans4473 = $field4478.app(anf_arg4477);
}
break;
case 3: var anf_arg4483 = $ans4473;
$step4470 = 4;
$al4474 = L[1852];
$field4479 = R.getColonFieldLoc(ED5,"text",L[1852]);
if(R.isMethod($field4479)) {
$ans4473 = $field4479.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field4479))) {
R.ffi.throwNonFunApp(L[1852],$field4479);
}
$ans4473 = $field4479.app((":"));
}
break;
case 4: var anf_arg4484 = $ans4473;
$step4470 = 5;
$al4474 = L[1847];
$field4485 = R.getColonFieldLoc(anf_method_obj4480,"make5",L[1847]);
if(R.isMethod($field4485)) {
$ans4473 = $field4485.full_meth(anf_method_obj4480,anf_arg4481,applicant4472,anf_arg4482,anf_arg4483,anf_arg4484);
} else {
if(!(R.isFunction($field4485))) {
R.ffi.throwNonFunApp(L[1847],$field4485);
}
$ans4473 = $field4485.app(anf_arg4481,applicant4472,anf_arg4482,anf_arg4483,anf_arg4484);
}
break;
case 5: var anf_arg4489 = $ans4473;
$al4474 = L[1853];
var anf_arg4486 = G(self3938,"fun-def-loc",L[1853]);
$step4470 = 6;
$al4474 = L[1854];
$field4487 = R.getColonFieldLoc(ED5,"cmcode",L[1854]);
if(R.isMethod($field4487)) {
$ans4473 = $field4487.full_meth(ED5,anf_arg4486);
} else {
if(!(R.isFunction($field4487))) {
R.ffi.throwNonFunApp(L[1854],$field4487);
}
$ans4473 = $field4487.app(anf_arg4486);
}
break;
case 6: var anf_arg4490 = $ans4473;
$step4470 = 7;
$al4474 = L[1846];
$field4491 = R.getColonFieldLoc(anf_method_obj4488,"make2",L[1846]);
if(R.isMethod($field4491)) {
$ans4473 = $field4491.full_meth(anf_method_obj4488,anf_arg4489,anf_arg4490);
} else {
if(!(R.isFunction($field4491))) {
R.ffi.throwNonFunApp(L[1846],$field4491);
}
$ans4473 = $field4491.app(anf_arg4489,anf_arg4490);
}
break;
case 7: ++R.GAS;
return $ans4473;
default: throw "No case numbered " + $step4470 + " in $temp_lam4471";
}
}
} catch($e4492) {
if(R.isCont($e4492) && ($step4470 !== 7)) {
$e4492.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4474,$temp_lam4471,$step4470,[applicant4472],[anf_method_obj4488,anf_method_obj4480,anf_arg4481,anf_arg4482,anf_arg4483,anf_arg4489]);
}
if(R.isPyretException($e4492)) {
$e4492.pyretStack.push($al4474);
}
throw $e4492;
}
};
var anf_arg4493 = R.makeFunction($temp_lam4471,"");
$step3936 = 10;
$al3943 = L[1856];
if(!(R.isFunction(helper4404))) {
R.ffi.throwNonFunApp($al3943,helper4404);
}
$ans3942 = helper4404.app(anf_arg4493);
break;
case 8: $step3936 = 10;
$al3943 = L[1844];
$ans3942 = R.throwNoCasesMatched(L[1844],cases4220);
break;
case 9: var $temp_lam4496 = function($applicant4497) {
var $step4495 = 0;
var $ans4498 = D;
var $al4499 = L[1870];
try {
if(R.isActivationRecord($applicant4497)) {
$step4495 = $applicant4497.step;
$al4499 = $applicant4497.from;
$ans4498 = $applicant4497.ans;
applicant4497 = $applicant4497.args[0];
anf_method_obj4508 = $applicant4497.vars[0];
anf_array4509 = $applicant4497.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1870],1,$t);
}
var applicant4497 = $applicant4497;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4495) {
case 0: $al4499 = L[1860];
var anf_method_obj4508 = G(ED5,"para",L[1860]);
$al4499 = L[1861];
var anf_array4509 = R.makeArrayN((7));
$step4495 = 1;
$al4499 = L[1862];
$field4500 = R.getColonFieldLoc(ED5,"text",L[1862]);
if(R.isMethod($field4500)) {
$ans4498 = $field4500.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field4500))) {
R.ffi.throwNonFunApp(L[1862],$field4500);
}
$ans4498 = $field4500.app(("The "));
}
break;
case 1: anf_array4509[0] = $ans4498;
anf_array4509[1] = applicant4497;
$step4495 = 2;
$al4499 = L[1863];
$field4501 = R.getColonFieldLoc(ED5,"text",L[1863]);
if(R.isMethod($field4501)) {
$ans4498 = $field4501.full_meth(ED5,(" was a constructor defined in "));
} else {
if(!(R.isFunction($field4501))) {
R.ffi.throwNonFunApp(L[1863],$field4501);
}
$ans4498 = $field4501.app((" was a constructor defined in "));
}
break;
case 2: anf_array4509[2] = $ans4498;
$al4499 = L[1864];
var anf_arg4502 = G(self3938,"fun-def-loc",L[1864]);
$step4495 = 3;
$al4499 = L[1865];
$field4503 = R.getColonFieldLoc(ED5,"loc",L[1865]);
if(R.isMethod($field4503)) {
$ans4498 = $field4503.full_meth(ED5,anf_arg4502);
} else {
if(!(R.isFunction($field4503))) {
R.ffi.throwNonFunApp(L[1865],$field4503);
}
$ans4498 = $field4503.app(anf_arg4502);
}
break;
case 3: anf_array4509[3] = $ans4498;
$step4495 = 4;
$al4499 = L[1866];
$field4504 = R.getColonFieldLoc(ED5,"text",L[1866]);
if(R.isMethod($field4504)) {
$ans4498 = $field4504.full_meth(ED5,(" accepting "));
} else {
if(!(R.isFunction($field4504))) {
R.ffi.throwNonFunApp(L[1866],$field4504);
}
$ans4498 = $field4504.app((" accepting "));
}
break;
case 4: anf_array4509[4] = $ans4498;
$al4499 = L[1867];
var anf_arg4505 = G(self3938,"fun-def-arity",L[1867]);
$step4495 = 5;
$al4499 = L[1868];
$field4506 = R.getColonFieldLoc(ED5,"ed-args",L[1868]);
if(R.isMethod($field4506)) {
$ans4498 = $field4506.full_meth(ED5,anf_arg4505);
} else {
if(!(R.isFunction($field4506))) {
R.ffi.throwNonFunApp(L[1868],$field4506);
}
$ans4498 = $field4506.app(anf_arg4505);
}
break;
case 5: anf_array4509[5] = $ans4498;
$step4495 = 6;
$al4499 = L[1869];
$field4507 = R.getColonFieldLoc(ED5,"text",L[1869]);
if(R.isMethod($field4507)) {
$ans4498 = $field4507.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field4507))) {
R.ffi.throwNonFunApp(L[1869],$field4507);
}
$ans4498 = $field4507.app(("."));
}
break;
case 6: anf_array4509[6] = $ans4498;
$step4495 = 7;
$al4499 = L[1860];
$field4510 = R.getColonFieldLoc(anf_method_obj4508,"make",L[1860]);
if(R.isMethod($field4510)) {
$ans4498 = $field4510.full_meth(anf_method_obj4508,anf_array4509);
} else {
if(!(R.isFunction($field4510))) {
R.ffi.throwNonFunApp(L[1860],$field4510);
}
$ans4498 = $field4510.app(anf_array4509);
}
break;
case 7: ++R.GAS;
return $ans4498;
default: throw "No case numbered " + $step4495 + " in $temp_lam4496";
}
}
} catch($e4511) {
if(R.isCont($e4511) && ($step4495 !== 7)) {
$e4511.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4499,$temp_lam4496,$step4495,[applicant4497],[anf_method_obj4508,anf_array4509]);
}
if(R.isPyretException($e4511)) {
$e4511.pyretStack.push($al4499);
}
throw $e4511;
}
};
var anf_arg4512 = R.makeFunction($temp_lam4496,"");
$step3936 = 10;
$al3943 = L[1871];
if(!(R.isFunction(helper4404))) {
R.ffi.throwNonFunApp($al3943,helper4404);
}
$ans3942 = helper4404.app(anf_arg4512);
break;
case 10: ++R.GAS;
return $ans3942;
default: throw "No case numbered " + $step3936 + " in $temp_full3937";
}
}
} catch($e4514) {
if(R.isCont($e4514) && ($step3936 !== 10)) {
$e4514.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al3943,$temp_full3937,$step3936,[self3938,maybe$stack$loc3939,src$available3940,maybe$ast3941],[helper4404,is$underscore4218,cases4220]);
}
if(R.isPyretException($e4514)) {
$e4514.pyretStack.push($al3943);
}
throw $e4514;
}
};
var anf_variant_member6386 = R.makeMethod3($temp_full3937,"render-fancy-reason");
var $temp_full4516 = function($self4517) {
var $step4515 = 0;
var $ans4518 = D;
var $al4519 = L[1936];
try {
if(R.isActivationRecord($self4517)) {
$step4515 = $self4517.step;
$al4519 = $self4517.from;
$ans4518 = $self4517.ans;
self4517 = $self4517.args[0];
num$args4522 = $self4517.vars[0];
this$str4550 = $self4517.vars[1];
arg$str4554 = $self4517.vars[2];
exp$arg$str4541 = $self4517.vars[3];
anf_arg4631 = $self4517.vars[4];
anf_arg4632 = $self4517.vars[5];
anf_method_obj4625 = $self4517.vars[6];
anf_method_obj4607 = $self4517.vars[7];
anf_arg4608 = $self4517.vars[8];
anf_arg4609 = $self4517.vars[9];
anf_arg4626 = $self4517.vars[10];
anf_arg4627 = $self4517.vars[11];
anf_method_obj4618 = $self4517.vars[12];
anf_arg4619 = $self4517.vars[13];
anf_arg4620 = $self4517.vars[14];
anf_arg4628 = $self4517.vars[15];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1936],1,$t);
}
var self4517 = $self4517;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4515) {
case 0: $al4519 = L[1873];
var anf_method_obj4520 = G(self4517,"fun-app-args",L[1873]);
$step4515 = 1;
$al4519 = L[1874];
$field4521 = R.getColonFieldLoc(anf_method_obj4520,"length",L[1874]);
if(R.isMethod($field4521)) {
$ans4518 = $field4521.full_meth(anf_method_obj4520);
} else {
if(!(R.isFunction($field4521))) {
R.ffi.throwNonFunApp(L[1874],$field4521);
}
$ans4518 = $field4521.app();
}
break;
case 1: var num$args4522 = $ans4518;
$step4515 = 2;
$al4519 = L[1875];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al4519,equal$always2);
}
$ans4518 = equal$always2.app(num$args4522,(1));
break;
case 2: var anf_arg4523 = $ans4518;
$al4519 = L[1875];
var anf_if4638 = R.checkWrapBoolean(anf_arg4523);
$step4515 = R.isPyretTrue(anf_if4638)?3:4;
break;
case 3: $step4515 = 5;
$ans4518 = ("this ");
break;
case 4: $step4515 = 5;
$ans4518 = ("these ");
break;
case 5: var this$str4550 = $ans4518;
$step4515 = 6;
$al4519 = L[1876];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al4519,equal$always2);
}
$ans4518 = equal$always2.app(num$args4522,(1));
break;
case 6: var anf_arg4524 = $ans4518;
$al4519 = L[1876];
var anf_if4637 = R.checkWrapBoolean(anf_arg4524);
$step4515 = R.isPyretTrue(anf_if4637)?7:8;
break;
case 7: $step4515 = 9;
$ans4518 = (" argument:");
break;
case 8: $step4515 = 9;
$ans4518 = (" arguments:");
break;
case 9: var arg$str4554 = $ans4518;
$al4519 = L[1877];
var anf_arg4525 = G(self4517,"fun-def-arity",L[1877]);
$step4515 = 10;
$al4519 = L[1878];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al4519,equal$always2);
}
$ans4518 = equal$always2.app(anf_arg4525,(1));
break;
case 10: var anf_arg4526 = $ans4518;
$al4519 = L[1878];
var anf_if4636 = R.checkWrapBoolean(anf_arg4526);
$step4515 = R.isPyretTrue(anf_if4636)?11:12;
break;
case 11: $step4515 = 13;
$ans4518 = (" argument");
break;
case 12: $step4515 = 13;
$ans4518 = (" arguments");
break;
case 13: var exp$arg$str4541 = $ans4518;
$al4519 = L[1879];
var anf_method_obj4527 = G(self4517,"fun-def-loc",L[1879]);
$step4515 = 14;
$al4519 = L[1880];
$field4528 = R.getColonFieldLoc(anf_method_obj4527,"is-builtin",L[1880]);
if(R.isMethod($field4528)) {
$ans4518 = $field4528.full_meth(anf_method_obj4527);
} else {
if(!(R.isFunction($field4528))) {
R.ffi.throwNonFunApp(L[1880],$field4528);
}
$ans4518 = $field4528.app();
}
break;
case 14: var anf_arg4529 = $ans4518;
$al4519 = L[1880];
var anf_if4635 = R.checkWrapBoolean(anf_arg4529);
$step4515 = R.isPyretTrue(anf_if4635)?15:16;
break;
case 15: $step4515 = 17;
$ans4518 = (0);
break;
case 16: $step4515 = 17;
$ans4518 = (1);
break;
case 17: var anf_arg4631 = $ans4518;
var $temp_lam4531 = function($caller$loc4532) {
var $step4530 = 0;
var $ans4533 = D;
var $al4534 = L[1918];
try {
if(R.isActivationRecord($caller$loc4532)) {
$step4530 = $caller$loc4532.step;
$al4534 = $caller$loc4532.from;
$ans4533 = $caller$loc4532.ans;
caller$loc4532 = $caller$loc4532.args[0];
anf_method_obj4563 = $caller$loc4532.vars[0];
anf_method_obj4544 = $caller$loc4532.vars[1];
anf_arg4545 = $caller$loc4532.vars[2];
anf_arg4546 = $caller$loc4532.vars[3];
anf_arg4564 = $caller$loc4532.vars[4];
anf_arg4565 = $caller$loc4532.vars[5];
anf_method_obj4556 = $caller$loc4532.vars[6];
anf_arg4557 = $caller$loc4532.vars[7];
anf_arg4558 = $caller$loc4532.vars[8];
anf_arg4566 = $caller$loc4532.vars[9];
anf_method_obj4597 = $caller$loc4532.vars[10];
anf_array4598 = $caller$loc4532.vars[11];
anf_method_obj4574 = $caller$loc4532.vars[12];
anf_arg4575 = $caller$loc4532.vars[13];
anf_arg4576 = $caller$loc4532.vars[14];
anf_method_obj4582 = $caller$loc4532.vars[15];
anf_method_obj4590 = $caller$loc4532.vars[16];
anf_arg4591 = $caller$loc4532.vars[17];
anf_arg4592 = $caller$loc4532.vars[18];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1918],1,$t);
}
var caller$loc4532 = $caller$loc4532;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4530) {
case 0: $al4534 = L[1881];
var anf_method_obj4535 = G(self4517,"fun-def-loc",L[1881]);
$step4530 = 1;
$al4534 = L[1882];
$field4536 = R.getColonFieldLoc(anf_method_obj4535,"is-builtin",L[1882]);
if(R.isMethod($field4536)) {
$ans4533 = $field4536.full_meth(anf_method_obj4535);
} else {
if(!(R.isFunction($field4536))) {
R.ffi.throwNonFunApp(L[1882],$field4536);
}
$ans4533 = $field4536.app();
}
break;
case 1: var anf_arg4537 = $ans4533;
$al4534 = L[1882];
var anf_if4600 = R.checkWrapBoolean(anf_arg4537);
$step4530 = R.isPyretTrue(anf_if4600)?2:15;
break;
case 2: $al4534 = L[1883];
var anf_method_obj4563 = G(ED5,"error",L[1883]);
$al4534 = L[1884];
var anf_method_obj4544 = G(ED5,"para",L[1884]);
$step4530 = 3;
$al4534 = L[1885];
$field4538 = R.getColonFieldLoc(ED5,"text",L[1885]);
if(R.isMethod($field4538)) {
$ans4533 = $field4538.full_meth(ED5,("Expected to get "));
} else {
if(!(R.isFunction($field4538))) {
R.ffi.throwNonFunApp(L[1885],$field4538);
}
$ans4533 = $field4538.app(("Expected to get "));
}
break;
case 3: var anf_arg4545 = $ans4533;
$al4534 = L[1886];
var anf_arg4539 = G(self4517,"fun-def-arity",L[1886]);
$step4530 = 4;
$al4534 = L[1887];
$field4540 = R.getColonFieldLoc(ED5,"embed",L[1887]);
if(R.isMethod($field4540)) {
$ans4533 = $field4540.full_meth(ED5,anf_arg4539);
} else {
if(!(R.isFunction($field4540))) {
R.ffi.throwNonFunApp(L[1887],$field4540);
}
$ans4533 = $field4540.app(anf_arg4539);
}
break;
case 4: var anf_arg4546 = $ans4533;
$step4530 = 5;
$al4534 = L[1897];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al4534,_plus1);
}
$ans4533 = _plus1.app(exp$arg$str4541,(" at"));
break;
case 5: var anf_arg4542 = $ans4533;
$step4530 = 6;
$al4534 = L[1888];
$field4543 = R.getColonFieldLoc(ED5,"text",L[1888]);
if(R.isMethod($field4543)) {
$ans4533 = $field4543.full_meth(ED5,anf_arg4542);
} else {
if(!(R.isFunction($field4543))) {
R.ffi.throwNonFunApp(L[1888],$field4543);
}
$ans4533 = $field4543.app(anf_arg4542);
}
break;
case 6: var anf_arg4547 = $ans4533;
$step4530 = 7;
$al4534 = L[1884];
$field4548 = R.getColonFieldLoc(anf_method_obj4544,"make3",L[1884]);
if(R.isMethod($field4548)) {
$ans4533 = $field4548.full_meth(anf_method_obj4544,anf_arg4545,anf_arg4546,anf_arg4547);
} else {
if(!(R.isFunction($field4548))) {
R.ffi.throwNonFunApp(L[1884],$field4548);
}
$ans4533 = $field4548.app(anf_arg4545,anf_arg4546,anf_arg4547);
}
break;
case 7: var anf_arg4564 = $ans4533;
var anf_fun4549 = draw$and$highlight38.$var;
$step4530 = 8;
$al4534 = L[1896];
if(!(R.isFunction(anf_fun4549))) {
R.ffi.throwNonFunApp($al4534,anf_fun4549);
}
$ans4533 = anf_fun4549.app(caller$loc4532);
break;
case 8: var anf_arg4565 = $ans4533;
$al4534 = L[1889];
var anf_method_obj4556 = G(ED5,"para",L[1889]);
$step4530 = 9;
$al4534 = L[1895];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al4534,_plus1);
}
$ans4533 = _plus1.app((" but got "),this$str4550);
break;
case 9: var anf_arg4551 = $ans4533;
$step4530 = 10;
$al4534 = L[1890];
$field4552 = R.getColonFieldLoc(ED5,"text",L[1890]);
if(R.isMethod($field4552)) {
$ans4533 = $field4552.full_meth(ED5,anf_arg4551);
} else {
if(!(R.isFunction($field4552))) {
R.ffi.throwNonFunApp(L[1890],$field4552);
}
$ans4533 = $field4552.app(anf_arg4551);
}
break;
case 10: var anf_arg4557 = $ans4533;
$step4530 = 11;
$al4534 = L[1891];
$field4553 = R.getColonFieldLoc(ED5,"embed",L[1891]);
if(R.isMethod($field4553)) {
$ans4533 = $field4553.full_meth(ED5,num$args4522);
} else {
if(!(R.isFunction($field4553))) {
R.ffi.throwNonFunApp(L[1891],$field4553);
}
$ans4533 = $field4553.app(num$args4522);
}
break;
case 11: var anf_arg4558 = $ans4533;
$step4530 = 12;
$al4534 = L[1892];
$field4555 = R.getColonFieldLoc(ED5,"text",L[1892]);
if(R.isMethod($field4555)) {
$ans4533 = $field4555.full_meth(ED5,arg$str4554);
} else {
if(!(R.isFunction($field4555))) {
R.ffi.throwNonFunApp(L[1892],$field4555);
}
$ans4533 = $field4555.app(arg$str4554);
}
break;
case 12: var anf_arg4559 = $ans4533;
$step4530 = 13;
$al4534 = L[1889];
$field4560 = R.getColonFieldLoc(anf_method_obj4556,"make3",L[1889]);
if(R.isMethod($field4560)) {
$ans4533 = $field4560.full_meth(anf_method_obj4556,anf_arg4557,anf_arg4558,anf_arg4559);
} else {
if(!(R.isFunction($field4560))) {
R.ffi.throwNonFunApp(L[1889],$field4560);
}
$ans4533 = $field4560.app(anf_arg4557,anf_arg4558,anf_arg4559);
}
break;
case 13: var anf_arg4566 = $ans4533;
var anf_fun4561 = vert$list$values62.$var;
$al4534 = L[1893];
var anf_arg4562 = G(self4517,"fun-app-args",L[1893]);
$step4530 = 14;
$al4534 = L[1894];
if(!(R.isFunction(anf_fun4561))) {
R.ffi.throwNonFunApp($al4534,anf_fun4561);
}
$ans4533 = anf_fun4561.app(anf_arg4562);
break;
case 14: var anf_arg4567 = $ans4533;
$step4530 = 31;
$al4534 = L[1883];
$field4568 = R.getColonFieldLoc(anf_method_obj4563,"make4",L[1883]);
if(R.isMethod($field4568)) {
$ans4533 = $field4568.full_meth(anf_method_obj4563,anf_arg4564,anf_arg4565,anf_arg4566,anf_arg4567);
} else {
if(!(R.isFunction($field4568))) {
R.ffi.throwNonFunApp(L[1883],$field4568);
}
$ans4533 = $field4568.app(anf_arg4564,anf_arg4565,anf_arg4566,anf_arg4567);
}
break;
case 15: $al4534 = L[1898];
var anf_method_obj4597 = G(ED5,"error",L[1898]);
$al4534 = L[1899];
var anf_array4598 = R.makeArrayN((6));
$al4534 = L[1900];
var anf_method_obj4574 = G(ED5,"para",L[1900]);
$step4530 = 16;
$al4534 = L[1901];
$field4569 = R.getColonFieldLoc(ED5,"text",L[1901]);
if(R.isMethod($field4569)) {
$ans4533 = $field4569.full_meth(ED5,("Expected to get "));
} else {
if(!(R.isFunction($field4569))) {
R.ffi.throwNonFunApp(L[1901],$field4569);
}
$ans4533 = $field4569.app(("Expected to get "));
}
break;
case 16: var anf_arg4575 = $ans4533;
$al4534 = L[1902];
var anf_arg4570 = G(self4517,"fun-def-arity",L[1902]);
$step4530 = 17;
$al4534 = L[1903];
$field4571 = R.getColonFieldLoc(ED5,"embed",L[1903]);
if(R.isMethod($field4571)) {
$ans4533 = $field4571.full_meth(ED5,anf_arg4570);
} else {
if(!(R.isFunction($field4571))) {
R.ffi.throwNonFunApp(L[1903],$field4571);
}
$ans4533 = $field4571.app(anf_arg4570);
}
break;
case 17: var anf_arg4576 = $ans4533;
$step4530 = 18;
$al4534 = L[1917];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al4534,_plus1);
}
$ans4533 = _plus1.app(exp$arg$str4541,(" when calling the function at "));
break;
case 18: var anf_arg4572 = $ans4533;
$step4530 = 19;
$al4534 = L[1904];
$field4573 = R.getColonFieldLoc(ED5,"text",L[1904]);
if(R.isMethod($field4573)) {
$ans4533 = $field4573.full_meth(ED5,anf_arg4572);
} else {
if(!(R.isFunction($field4573))) {
R.ffi.throwNonFunApp(L[1904],$field4573);
}
$ans4533 = $field4573.app(anf_arg4572);
}
break;
case 19: var anf_arg4577 = $ans4533;
$step4530 = 20;
$al4534 = L[1900];
$field4578 = R.getColonFieldLoc(anf_method_obj4574,"make3",L[1900]);
if(R.isMethod($field4578)) {
$ans4533 = $field4578.full_meth(anf_method_obj4574,anf_arg4575,anf_arg4576,anf_arg4577);
} else {
if(!(R.isFunction($field4578))) {
R.ffi.throwNonFunApp(L[1900],$field4578);
}
$ans4533 = $field4578.app(anf_arg4575,anf_arg4576,anf_arg4577);
}
break;
case 20: anf_array4598[0] = $ans4533;
var anf_fun4579 = draw$and$highlight38.$var;
$al4534 = L[1905];
var anf_arg4580 = G(self4517,"fun-def-loc",L[1905]);
$step4530 = 21;
$al4534 = L[1916];
if(!(R.isFunction(anf_fun4579))) {
R.ffi.throwNonFunApp($al4534,anf_fun4579);
}
$ans4533 = anf_fun4579.app(anf_arg4580);
break;
case 21: anf_array4598[1] = $ans4533;
$al4534 = L[1906];
var anf_method_obj4582 = G(ED5,"para",L[1906]);
$step4530 = 22;
$al4534 = L[1907];
$field4581 = R.getColonFieldLoc(ED5,"text",L[1907]);
if(R.isMethod($field4581)) {
$ans4533 = $field4581.full_meth(ED5,("from"));
} else {
if(!(R.isFunction($field4581))) {
R.ffi.throwNonFunApp(L[1907],$field4581);
}
$ans4533 = $field4581.app(("from"));
}
break;
case 22: var anf_arg4583 = $ans4533;
$step4530 = 23;
$al4534 = L[1906];
$field4584 = R.getColonFieldLoc(anf_method_obj4582,"make1",L[1906]);
if(R.isMethod($field4584)) {
$ans4533 = $field4584.full_meth(anf_method_obj4582,anf_arg4583);
} else {
if(!(R.isFunction($field4584))) {
R.ffi.throwNonFunApp(L[1906],$field4584);
}
$ans4533 = $field4584.app(anf_arg4583);
}
break;
case 23: anf_array4598[2] = $ans4533;
var anf_fun4585 = draw$and$highlight38.$var;
$step4530 = 24;
$al4534 = L[1915];
if(!(R.isFunction(anf_fun4585))) {
R.ffi.throwNonFunApp($al4534,anf_fun4585);
}
$ans4533 = anf_fun4585.app(caller$loc4532);
break;
case 24: anf_array4598[3] = $ans4533;
$al4534 = L[1908];
var anf_method_obj4590 = G(ED5,"para",L[1908]);
$step4530 = 25;
$al4534 = L[1914];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al4534,_plus1);
}
$ans4533 = _plus1.app((" but got "),this$str4550);
break;
case 25: var anf_arg4586 = $ans4533;
$step4530 = 26;
$al4534 = L[1909];
$field4587 = R.getColonFieldLoc(ED5,"text",L[1909]);
if(R.isMethod($field4587)) {
$ans4533 = $field4587.full_meth(ED5,anf_arg4586);
} else {
if(!(R.isFunction($field4587))) {
R.ffi.throwNonFunApp(L[1909],$field4587);
}
$ans4533 = $field4587.app(anf_arg4586);
}
break;
case 26: var anf_arg4591 = $ans4533;
$step4530 = 27;
$al4534 = L[1910];
$field4588 = R.getColonFieldLoc(ED5,"embed",L[1910]);
if(R.isMethod($field4588)) {
$ans4533 = $field4588.full_meth(ED5,num$args4522);
} else {
if(!(R.isFunction($field4588))) {
R.ffi.throwNonFunApp(L[1910],$field4588);
}
$ans4533 = $field4588.app(num$args4522);
}
break;
case 27: var anf_arg4592 = $ans4533;
$step4530 = 28;
$al4534 = L[1911];
$field4589 = R.getColonFieldLoc(ED5,"text",L[1911]);
if(R.isMethod($field4589)) {
$ans4533 = $field4589.full_meth(ED5,arg$str4554);
} else {
if(!(R.isFunction($field4589))) {
R.ffi.throwNonFunApp(L[1911],$field4589);
}
$ans4533 = $field4589.app(arg$str4554);
}
break;
case 28: var anf_arg4593 = $ans4533;
$step4530 = 29;
$al4534 = L[1908];
$field4594 = R.getColonFieldLoc(anf_method_obj4590,"make3",L[1908]);
if(R.isMethod($field4594)) {
$ans4533 = $field4594.full_meth(anf_method_obj4590,anf_arg4591,anf_arg4592,anf_arg4593);
} else {
if(!(R.isFunction($field4594))) {
R.ffi.throwNonFunApp(L[1908],$field4594);
}
$ans4533 = $field4594.app(anf_arg4591,anf_arg4592,anf_arg4593);
}
break;
case 29: anf_array4598[4] = $ans4533;
var anf_fun4595 = vert$list$values62.$var;
$al4534 = L[1912];
var anf_arg4596 = G(self4517,"fun-app-args",L[1912]);
$step4530 = 30;
$al4534 = L[1913];
if(!(R.isFunction(anf_fun4595))) {
R.ffi.throwNonFunApp($al4534,anf_fun4595);
}
$ans4533 = anf_fun4595.app(anf_arg4596);
break;
case 30: anf_array4598[5] = $ans4533;
$step4530 = 31;
$al4534 = L[1898];
$field4599 = R.getColonFieldLoc(anf_method_obj4597,"make",L[1898]);
if(R.isMethod($field4599)) {
$ans4533 = $field4599.full_meth(anf_method_obj4597,anf_array4598);
} else {
if(!(R.isFunction($field4599))) {
R.ffi.throwNonFunApp(L[1898],$field4599);
}
$ans4533 = $field4599.app(anf_array4598);
}
break;
case 31: ++R.GAS;
return $ans4533;
default: throw "No case numbered " + $step4530 + " in $temp_lam4531";
}
}
} catch($e4601) {
if(R.isCont($e4601) && ($step4530 !== 31)) {
$e4601.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4534,$temp_lam4531,$step4530,[caller$loc4532],[anf_method_obj4563,anf_method_obj4544,anf_arg4545,anf_arg4546,anf_arg4564,anf_arg4565,anf_method_obj4556,anf_arg4557,anf_arg4558,anf_arg4566,anf_method_obj4597,anf_array4598,anf_method_obj4574,anf_arg4575,anf_arg4576,anf_method_obj4582,anf_method_obj4590,anf_arg4591,anf_arg4592]);
}
if(R.isPyretException($e4601)) {
$e4601.pyretStack.push($al4534);
}
throw $e4601;
}
};
var anf_arg4632 = R.makeFunction($temp_lam4531,"");
$al4519 = L[1919];
var anf_method_obj4625 = G(ED5,"error",L[1919]);
$al4519 = L[1920];
var anf_method_obj4607 = G(ED5,"para",L[1920]);
$step4515 = 18;
$al4519 = L[1921];
$field4602 = R.getColonFieldLoc(ED5,"text",L[1921]);
if(R.isMethod($field4602)) {
$ans4518 = $field4602.full_meth(ED5,("Expected to get "));
} else {
if(!(R.isFunction($field4602))) {
R.ffi.throwNonFunApp(L[1921],$field4602);
}
$ans4518 = $field4602.app(("Expected to get "));
}
break;
case 18: var anf_arg4608 = $ans4518;
$al4519 = L[1922];
var anf_arg4603 = G(self4517,"fun-def-arity",L[1922]);
$step4515 = 19;
$al4519 = L[1923];
$field4604 = R.getColonFieldLoc(ED5,"embed",L[1923]);
if(R.isMethod($field4604)) {
$ans4518 = $field4604.full_meth(ED5,anf_arg4603);
} else {
if(!(R.isFunction($field4604))) {
R.ffi.throwNonFunApp(L[1923],$field4604);
}
$ans4518 = $field4604.app(anf_arg4603);
}
break;
case 19: var anf_arg4609 = $ans4518;
$step4515 = 20;
$al4519 = L[1935];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al4519,_plus1);
}
$ans4518 = _plus1.app(exp$arg$str4541,(" at "));
break;
case 20: var anf_arg4605 = $ans4518;
$step4515 = 21;
$al4519 = L[1924];
$field4606 = R.getColonFieldLoc(ED5,"text",L[1924]);
if(R.isMethod($field4606)) {
$ans4518 = $field4606.full_meth(ED5,anf_arg4605);
} else {
if(!(R.isFunction($field4606))) {
R.ffi.throwNonFunApp(L[1924],$field4606);
}
$ans4518 = $field4606.app(anf_arg4605);
}
break;
case 21: var anf_arg4610 = $ans4518;
$step4515 = 22;
$al4519 = L[1920];
$field4611 = R.getColonFieldLoc(anf_method_obj4607,"make3",L[1920]);
if(R.isMethod($field4611)) {
$ans4518 = $field4611.full_meth(anf_method_obj4607,anf_arg4608,anf_arg4609,anf_arg4610);
} else {
if(!(R.isFunction($field4611))) {
R.ffi.throwNonFunApp(L[1920],$field4611);
}
$ans4518 = $field4611.app(anf_arg4608,anf_arg4609,anf_arg4610);
}
break;
case 22: var anf_arg4626 = $ans4518;
var anf_fun4612 = draw$and$highlight38.$var;
$al4519 = L[1925];
var anf_arg4613 = G(self4517,"fun-def-loc",L[1925]);
$step4515 = 23;
$al4519 = L[1934];
if(!(R.isFunction(anf_fun4612))) {
R.ffi.throwNonFunApp($al4519,anf_fun4612);
}
$ans4518 = anf_fun4612.app(anf_arg4613);
break;
case 23: var anf_arg4627 = $ans4518;
$al4519 = L[1926];
var anf_method_obj4618 = G(ED5,"para",L[1926]);
$step4515 = 24;
$al4519 = L[1933];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al4519,_plus1);
}
$ans4518 = _plus1.app((" but got "),this$str4550);
break;
case 24: var anf_arg4614 = $ans4518;
$step4515 = 25;
$al4519 = L[1927];
$field4615 = R.getColonFieldLoc(ED5,"text",L[1927]);
if(R.isMethod($field4615)) {
$ans4518 = $field4615.full_meth(ED5,anf_arg4614);
} else {
if(!(R.isFunction($field4615))) {
R.ffi.throwNonFunApp(L[1927],$field4615);
}
$ans4518 = $field4615.app(anf_arg4614);
}
break;
case 25: var anf_arg4619 = $ans4518;
$step4515 = 26;
$al4519 = L[1928];
$field4616 = R.getColonFieldLoc(ED5,"embed",L[1928]);
if(R.isMethod($field4616)) {
$ans4518 = $field4616.full_meth(ED5,num$args4522);
} else {
if(!(R.isFunction($field4616))) {
R.ffi.throwNonFunApp(L[1928],$field4616);
}
$ans4518 = $field4616.app(num$args4522);
}
break;
case 26: var anf_arg4620 = $ans4518;
$step4515 = 27;
$al4519 = L[1929];
$field4617 = R.getColonFieldLoc(ED5,"text",L[1929]);
if(R.isMethod($field4617)) {
$ans4518 = $field4617.full_meth(ED5,arg$str4554);
} else {
if(!(R.isFunction($field4617))) {
R.ffi.throwNonFunApp(L[1929],$field4617);
}
$ans4518 = $field4617.app(arg$str4554);
}
break;
case 27: var anf_arg4621 = $ans4518;
$step4515 = 28;
$al4519 = L[1926];
$field4622 = R.getColonFieldLoc(anf_method_obj4618,"make3",L[1926]);
if(R.isMethod($field4622)) {
$ans4518 = $field4622.full_meth(anf_method_obj4618,anf_arg4619,anf_arg4620,anf_arg4621);
} else {
if(!(R.isFunction($field4622))) {
R.ffi.throwNonFunApp(L[1926],$field4622);
}
$ans4518 = $field4622.app(anf_arg4619,anf_arg4620,anf_arg4621);
}
break;
case 28: var anf_arg4628 = $ans4518;
var anf_fun4623 = vert$list$values62.$var;
$al4519 = L[1930];
var anf_arg4624 = G(self4517,"fun-app-args",L[1930]);
$step4515 = 29;
$al4519 = L[1932];
if(!(R.isFunction(anf_fun4623))) {
R.ffi.throwNonFunApp($al4519,anf_fun4623);
}
$ans4518 = anf_fun4623.app(anf_arg4624);
break;
case 29: var anf_arg4629 = $ans4518;
$step4515 = 30;
$al4519 = L[1919];
$field4630 = R.getColonFieldLoc(anf_method_obj4625,"make4",L[1919]);
if(R.isMethod($field4630)) {
$ans4518 = $field4630.full_meth(anf_method_obj4625,anf_arg4626,anf_arg4627,anf_arg4628,anf_arg4629);
} else {
if(!(R.isFunction($field4630))) {
R.ffi.throwNonFunApp(L[1919],$field4630);
}
$ans4518 = $field4630.app(anf_arg4626,anf_arg4627,anf_arg4628,anf_arg4629);
}
break;
case 30: var anf_arg4633 = $ans4518;
$step4515 = 31;
$al4519 = L[1931];
$field4634 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[1931]);
if(R.isMethod($field4634)) {
$ans4518 = $field4634.full_meth(ED5,anf_arg4631,(false),anf_arg4632,anf_arg4633);
} else {
if(!(R.isFunction($field4634))) {
R.ffi.throwNonFunApp(L[1931],$field4634);
}
$ans4518 = $field4634.app(anf_arg4631,(false),anf_arg4632,anf_arg4633);
}
break;
case 31: ++R.GAS;
return $ans4518;
default: throw "No case numbered " + $step4515 + " in $temp_full4516";
}
}
} catch($e4639) {
if(R.isCont($e4639) && ($step4515 !== 31)) {
$e4639.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4519,$temp_full4516,$step4515,[self4517],[num$args4522,this$str4550,arg$str4554,exp$arg$str4541,anf_arg4631,anf_arg4632,anf_method_obj4625,anf_method_obj4607,anf_arg4608,anf_arg4609,anf_arg4626,anf_arg4627,anf_method_obj4618,anf_arg4619,anf_arg4620,anf_arg4628]);
}
if(R.isPyretException($e4639)) {
$e4639.pyretStack.push($al4519);
}
throw $e4639;
}
};
var anf_variant_member6387 = R.makeMethod0($temp_full4516,"render-reason");
var $temp_full4641 = function($self4642,$maybe$stack$loc4643,$src$available4644,$maybe$ast4645) {
var $step4640 = 0;
var $ans4646 = D;
var $al4647 = L[2131];
try {
if(R.isActivationRecord($self4642)) {
$step4640 = $self4642.step;
$al4647 = $self4642.from;
$ans4646 = $self4642.ans;
self4642 = $self4642.args[0];
maybe$stack$loc4643 = $self4642.args[1];
src$available4644 = $self4642.args[2];
maybe$ast4645 = $self4642.args[3];
helper5108 = $self4642.vars[0];
is$underscore4922 = $self4642.vars[1];
cases4924 = $self4642.vars[2];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2131],4,$t);
}
var self4642 = $self4642;
var maybe$stack$loc4643 = $maybe$stack$loc4643;
var src$available4644 = $src$available4644;
var maybe$ast4645 = $maybe$ast4645;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4640) {
case 0: $al4647 = L[1937];
var anf_method_obj4648 = G(self4642,"fun-app-args",L[1937]);
$step4640 = 1;
$al4647 = L[1938];
$field4649 = R.getColonFieldLoc(anf_method_obj4648,"length",L[1938]);
if(R.isMethod($field4649)) {
$ans4646 = $field4649.full_meth(anf_method_obj4648);
} else {
if(!(R.isFunction($field4649))) {
R.ffi.throwNonFunApp(L[1938],$field4649);
}
$ans4646 = $field4649.app();
}
break;
case 1: var fun$app$arity4671 = $ans4646;
var $temp_lam4651 = function($rest4652) {
var $step4650 = 0;
var $ans4653 = D;
var $al4654 = L[2010];
try {
if(R.isActivationRecord($rest4652)) {
$step4650 = $rest4652.step;
$al4654 = $rest4652.from;
$ans4653 = $rest4652.ans;
rest4652 = $rest4652.args[0];
anf_method_obj4901 = $rest4652.vars[0];
cases4659 = $rest4652.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2010],1,$t);
}
var rest4652 = $rest4652;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4650) {
case 0: $al4654 = L[1939];
var anf_method_obj4901 = G(ED5,"error",L[1939]);
$al4654 = L[1940];
var anf_method_obj4655 = G(self4642,"fun-def-loc",L[1940]);
$step4650 = 1;
$al4654 = L[1941];
$field4656 = R.getColonFieldLoc(anf_method_obj4655,"is-builtin",L[1941]);
if(R.isMethod($field4656)) {
$ans4653 = $field4656.full_meth(anf_method_obj4655);
} else {
if(!(R.isFunction($field4656))) {
R.ffi.throwNonFunApp(L[1941],$field4656);
}
$ans4653 = $field4656.app();
}
break;
case 1: var anf_arg4657 = $ans4653;
$al4654 = L[1941];
var anf_if4904 = R.checkWrapBoolean(anf_arg4657);
$step4650 = R.isPyretTrue(anf_if4904)?2:3;
break;
case 2: $step4650 = 4;
$ans4653 = (0);
break;
case 3: $step4650 = 4;
$ans4653 = (1);
break;
case 4: var anf_arg4658 = $ans4653;
$step4650 = 5;
$al4654 = L[2009];
if(!(R.isFunction(maybe$stack$loc4643))) {
R.ffi.throwNonFunApp($al4654,maybe$stack$loc4643);
}
$ans4653 = maybe$stack$loc4643.app(anf_arg4658,(false));
break;
case 5: var cases4659 = $ans4653;
$step4650 = 6;
$al4654 = L[2008];
R._checkAnn(L[2008],R.getDotAnn(L[2008],"O",O13,"Option"),cases4659);
break;
case 6: var $cases_dispatch4900 = {"some":7,
"none":8};
$al4654 = L[1995];
$step4650 = $cases_dispatch4900[cases4659.$name] || 9;
break;
case 7: if(cases4659.$arity !== 1) {
if(cases4659.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1994],1,cases4659.$arity,L[1995]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1994],true,L[1995]);
}
}
$step4650 = 10;
$al4654 = L[1996];
var $temp_branch4792 = function($fun$app$loc4660) {
var $step4793 = 0;
var $ans4794 = D;
var $al4795 = L[1942];
try {
if(R.isActivationRecord($fun$app$loc4660)) {
$step4793 = $fun$app$loc4660.step;
$al4795 = $fun$app$loc4660.from;
$ans4794 = $fun$app$loc4660.ans;
fun$app$loc4660 = $fun$app$loc4660.args[0];
anf_method_obj4680 = $fun$app$loc4660.vars[0];
anf_method_obj4666 = $fun$app$loc4660.vars[1];
anf_arg4667 = $fun$app$loc4660.vars[2];
anf_arg4668 = $fun$app$loc4660.vars[3];
anf_arg4681 = $fun$app$loc4660.vars[4];
anf_method_obj4674 = $fun$app$loc4660.vars[5];
anf_arg4675 = $fun$app$loc4660.vars[6];
anf_arg4682 = $fun$app$loc4660.vars[7];
cases4686 = $fun$app$loc4660.vars[8];
anf_method_obj4785 = $fun$app$loc4660.vars[9];
anf_arg4786 = $fun$app$loc4660.vars[10];
anf_method_obj4778 = $fun$app$loc4660.vars[11];
anf_arg4779 = $fun$app$loc4660.vars[12];
anf_arg4780 = $fun$app$loc4660.vars[13];
anf_arg4787 = $fun$app$loc4660.vars[14];
} else {
var fun$app$loc4660 = $fun$app$loc4660;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4793) {
case 0: $step4793 = 1;
$al4795 = L[1942];
$field4796 = R.getColonFieldLoc(fun$app$loc4660,"is-builtin",L[1942]);
if(R.isMethod($field4796)) {
$ans4794 = $field4796.full_meth(fun$app$loc4660);
} else {
if(!(R.isFunction($field4796))) {
R.ffi.throwNonFunApp(L[1942],$field4796);
}
$ans4794 = $field4796.app();
}
break;
case 1: var anf_arg4662 = $ans4794;
$al4795 = L[1942];
var anf_if4791 = R.checkWrapBoolean(anf_arg4662);
$step4793 = R.isPyretTrue(anf_if4791)?2:12;
break;
case 2: $al4795 = L[1943];
var anf_method_obj4680 = G(ED5,"sequence",L[1943]);
$al4795 = L[1944];
var anf_method_obj4666 = G(ED5,"para",L[1944]);
$step4793 = 3;
$al4795 = L[1945];
$field4797 = R.getColonFieldLoc(ED5,"text",L[1945]);
if(R.isMethod($field4797)) {
$ans4794 = $field4797.full_meth(ED5,("Evaluating the function application in "));
} else {
if(!(R.isFunction($field4797))) {
R.ffi.throwNonFunApp(L[1945],$field4797);
}
$ans4794 = $field4797.app(("Evaluating the function application in "));
}
break;
case 3: var anf_arg4667 = $ans4794;
$step4793 = 4;
$al4795 = L[1946];
$field4798 = R.getColonFieldLoc(ED5,"loc",L[1946]);
if(R.isMethod($field4798)) {
$ans4794 = $field4798.full_meth(ED5,fun$app$loc4660);
} else {
if(!(R.isFunction($field4798))) {
R.ffi.throwNonFunApp(L[1946],$field4798);
}
$ans4794 = $field4798.app(fun$app$loc4660);
}
break;
case 4: var anf_arg4668 = $ans4794;
$step4793 = 5;
$al4795 = L[1947];
$field4799 = R.getColonFieldLoc(ED5,"text",L[1947]);
if(R.isMethod($field4799)) {
$ans4794 = $field4799.full_meth(ED5,(" errored.  expected the applicant to evaluate to a function that accepts exactly the same number of arguments as are given to it."));
} else {
if(!(R.isFunction($field4799))) {
R.ffi.throwNonFunApp(L[1947],$field4799);
}
$ans4794 = $field4799.app((" errored.  expected the applicant to evaluate to a function that accepts exactly the same number of arguments as are given to it."));
}
break;
case 5: var anf_arg4669 = $ans4794;
$step4793 = 6;
$al4795 = L[1944];
$field4800 = R.getColonFieldLoc(anf_method_obj4666,"make3",L[1944]);
if(R.isMethod($field4800)) {
$ans4794 = $field4800.full_meth(anf_method_obj4666,anf_arg4667,anf_arg4668,anf_arg4669);
} else {
if(!(R.isFunction($field4800))) {
R.ffi.throwNonFunApp(L[1944],$field4800);
}
$ans4794 = $field4800.app(anf_arg4667,anf_arg4668,anf_arg4669);
}
break;
case 6: var anf_arg4681 = $ans4794;
$al4795 = L[1948];
var anf_method_obj4674 = G(ED5,"para",L[1948]);
$step4793 = 7;
$al4795 = L[1949];
$field4801 = R.getColonFieldLoc(ED5,"ed-args",L[1949]);
if(R.isMethod($field4801)) {
$ans4794 = $field4801.full_meth(ED5,fun$app$arity4671);
} else {
if(!(R.isFunction($field4801))) {
R.ffi.throwNonFunApp(L[1949],$field4801);
}
$ans4794 = $field4801.app(fun$app$arity4671);
}
break;
case 7: var anf_arg4675 = $ans4794;
$step4793 = 8;
$al4795 = L[1950];
$field4802 = R.getColonFieldLoc(ED5,"text",L[1950]);
if(R.isMethod($field4802)) {
$ans4794 = $field4802.full_meth(ED5,(" were passed to the left side."));
} else {
if(!(R.isFunction($field4802))) {
R.ffi.throwNonFunApp(L[1950],$field4802);
}
$ans4794 = $field4802.app((" were passed to the left side."));
}
break;
case 8: var anf_arg4676 = $ans4794;
$step4793 = 9;
$al4795 = L[1948];
$field4803 = R.getColonFieldLoc(anf_method_obj4674,"make2",L[1948]);
if(R.isMethod($field4803)) {
$ans4794 = $field4803.full_meth(anf_method_obj4674,anf_arg4675,anf_arg4676);
} else {
if(!(R.isFunction($field4803))) {
R.ffi.throwNonFunApp(L[1948],$field4803);
}
$ans4794 = $field4803.app(anf_arg4675,anf_arg4676);
}
break;
case 9: var anf_arg4682 = $ans4794;
$step4793 = 10;
$al4795 = L[1951];
$field4804 = R.getColonFieldLoc(ED5,"text",L[1951]);
if(R.isMethod($field4804)) {
$ans4794 = $field4804.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4804))) {
R.ffi.throwNonFunApp(L[1951],$field4804);
}
$ans4794 = $field4804.app(("left side"));
}
break;
case 10: var anf_arg4679 = $ans4794;
$step4793 = 11;
$al4795 = L[1952];
if(!(R.isFunction(rest4652))) {
R.ffi.throwNonFunApp($al4795,rest4652);
}
$ans4794 = rest4652.app(anf_arg4679);
break;
case 11: var anf_arg4683 = $ans4794;
$step4793 = 28;
$al4795 = L[1943];
$field4805 = R.getColonFieldLoc(anf_method_obj4680,"make3",L[1943]);
if(R.isMethod($field4805)) {
$ans4794 = $field4805.full_meth(anf_method_obj4680,anf_arg4681,anf_arg4682,anf_arg4683);
} else {
if(!(R.isFunction($field4805))) {
R.ffi.throwNonFunApp(L[1943],$field4805);
}
$ans4794 = $field4805.app(anf_arg4681,anf_arg4682,anf_arg4683);
}
break;
case 12: $step4793 = 13;
$al4795 = L[1953];
if(!(R.isFunction(src$available4644))) {
R.ffi.throwNonFunApp($al4795,src$available4644);
}
$ans4794 = src$available4644.app(fun$app$loc4660);
break;
case 13: var anf_arg4685 = $ans4794;
$al4795 = L[1953];
var anf_if4790 = R.checkWrapBoolean(anf_arg4685);
$step4793 = R.isPyretTrue(anf_if4790)?14:20;
break;
case 14: $step4793 = 15;
$al4795 = L[1985];
if(!(R.isFunction(maybe$ast4645))) {
R.ffi.throwNonFunApp($al4795,maybe$ast4645);
}
$ans4794 = maybe$ast4645.app(fun$app$loc4660);
break;
case 15: var cases4686 = $ans4794;
$step4793 = 16;
$al4795 = L[1984];
R._checkAnn(L[1984],R.getDotAnn(L[1984],"O",O13,"Option"),cases4686);
break;
case 16: var $cases_dispatch4860 = {"some":17,
"none":18};
$al4795 = L[1972];
$step4793 = $cases_dispatch4860[cases4686.$name] || 19;
break;
case 17: if(cases4686.$arity !== 1) {
if(cases4686.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1971],1,cases4686.$arity,L[1972]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1971],true,L[1972]);
}
}
$step4793 = 28;
$al4795 = L[1973];
var $temp_branch4822 = function($ast4688) {
var $step4823 = 0;
var $ans4824 = D;
var $al4825 = L[1954];
try {
if(R.isActivationRecord($ast4688)) {
$step4823 = $ast4688.step;
$al4825 = $ast4688.from;
$ans4824 = $ast4688.ans;
ast4688 = $ast4688.args[0];
anf_arg4693 = $ast4688.vars[0];
applicant4716 = $ast4688.vars[1];
anf_method_obj4719 = $ast4688.vars[2];
anf_arg4720 = $ast4688.vars[3];
anf_arg4721 = $ast4688.vars[4];
anf_method_obj4713 = $ast4688.vars[5];
anf_arg4708 = $ast4688.vars[6];
anf_arg4714 = $ast4688.vars[7];
anf_arg4715 = $ast4688.vars[8];
anf_arg4722 = $ast4688.vars[9];
} else {
var ast4688 = $ast4688;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4823) {
case 0: $step4823 = 1;
$al4825 = L[1954];
$field4826 = R.getColonFieldLoc(ED5,"text",L[1954]);
if(R.isMethod($field4826)) {
$ans4824 = $field4826.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4826))) {
R.ffi.throwNonFunApp(L[1954],$field4826);
}
$ans4824 = $field4826.app(("left side"));
}
break;
case 1: var anf_arg4693 = $ans4824;
$al4825 = L[1955];
var anf_method_obj4690 = G(ED5,"locs",L[1955]);
$al4825 = L[1956];
var anf_bracket4689 = G(ast4688,"_fun",L[1956]);
$al4825 = L[1957];
var anf_arg4691 = G(anf_bracket4689,"l",L[1957]);
$step4823 = 2;
$al4825 = L[1955];
$field4827 = R.getColonFieldLoc(anf_method_obj4690,"make1",L[1955]);
if(R.isMethod($field4827)) {
$ans4824 = $field4827.full_meth(anf_method_obj4690,anf_arg4691);
} else {
if(!(R.isFunction($field4827))) {
R.ffi.throwNonFunApp(L[1955],$field4827);
}
$ans4824 = $field4827.app(anf_arg4691);
}
break;
case 2: var anf_arg4694 = $ans4824;
$step4823 = 3;
$al4825 = L[1958];
$field4828 = R.getColonFieldLoc(ED5,"highlight",L[1958]);
if(R.isMethod($field4828)) {
$ans4824 = $field4828.full_meth(ED5,anf_arg4693,anf_arg4694,(0));
} else {
if(!(R.isFunction($field4828))) {
R.ffi.throwNonFunApp(L[1958],$field4828);
}
$ans4824 = $field4828.app(anf_arg4693,anf_arg4694,(0));
}
break;
case 3: var applicant4716 = $ans4824;
$al4825 = L[1959];
var anf_method_obj4719 = G(ED5,"sequence",L[1959]);
var anf_fun4696 = ed$intro122.$var;
$step4823 = 4;
$al4825 = L[1970];
if(!(R.isFunction(anf_fun4696))) {
R.ffi.throwNonFunApp($al4825,anf_fun4696);
}
$ans4824 = anf_fun4696.app(("function application expression"),fun$app$loc4660,(-1),(true));
break;
case 4: var anf_arg4720 = $ans4824;
$step4823 = 5;
$al4825 = L[1960];
$field4829 = R.getColonFieldLoc(ED5,"cmcode",L[1960]);
if(R.isMethod($field4829)) {
$ans4824 = $field4829.full_meth(ED5,fun$app$loc4660);
} else {
if(!(R.isFunction($field4829))) {
R.ffi.throwNonFunApp(L[1960],$field4829);
}
$ans4824 = $field4829.app(fun$app$loc4660);
}
break;
case 5: var anf_arg4721 = $ans4824;
$al4825 = L[1961];
var anf_method_obj4713 = G(ED5,"para",L[1961]);
$step4823 = 6;
$al4825 = L[1962];
$field4830 = R.getColonFieldLoc(ED5,"ed-args",L[1962]);
if(R.isMethod($field4830)) {
$ans4824 = $field4830.full_meth(ED5,fun$app$arity4671);
} else {
if(!(R.isFunction($field4830))) {
R.ffi.throwNonFunApp(L[1962],$field4830);
}
$ans4824 = $field4830.app(fun$app$arity4671);
}
break;
case 6: var anf_arg4708 = $ans4824;
$al4825 = L[1963];
var anf_method_obj4705 = G(ast4688,"args",L[1963]);
var $temp_lam4832 = function($recv_4701) {
var $step4831 = 0;
var $ans4833 = D;
var $al4834 = L[1964];
try {
if(R.isActivationRecord($recv_4701)) {
$step4831 = $recv_4701.step;
$al4834 = $recv_4701.from;
$ans4833 = $recv_4701.ans;
recv_4701 = $recv_4701.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1964],1,$t);
}
var recv_4701 = $recv_4701;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4831) {
case 0: $step4831 = 1;
$al4834 = L[1964];
$ans4833 = G(recv_4701,"l",L[1964]);
break;
case 1: ++R.GAS;
return $ans4833;
default: throw "No case numbered " + $step4831 + " in $temp_lam4832";
}
}
} catch($e4835) {
if(R.isCont($e4835) && ($step4831 !== 1)) {
$e4835.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4834,$temp_lam4832,$step4831,[recv_4701],[]);
}
if(R.isPyretException($e4835)) {
$e4835.pyretStack.push($al4834);
}
throw $e4835;
}
};
var anf_arg4706 = R.makeFunction($temp_lam4832,"");
$step4823 = 7;
$al4825 = L[1965];
$field4836 = R.getColonFieldLoc(anf_method_obj4705,"map",L[1965]);
if(R.isMethod($field4836)) {
$ans4824 = $field4836.full_meth(anf_method_obj4705,anf_arg4706);
} else {
if(!(R.isFunction($field4836))) {
R.ffi.throwNonFunApp(L[1965],$field4836);
}
$ans4824 = $field4836.app(anf_arg4706);
}
break;
case 7: var anf_arg4709 = $ans4824;
$step4823 = 8;
$al4825 = L[1966];
$field4837 = R.getColonFieldLoc(ED5,"highlight",L[1966]);
if(R.isMethod($field4837)) {
$ans4824 = $field4837.full_meth(ED5,anf_arg4708,anf_arg4709,(1));
} else {
if(!(R.isFunction($field4837))) {
R.ffi.throwNonFunApp(L[1966],$field4837);
}
$ans4824 = $field4837.app(anf_arg4708,anf_arg4709,(1));
}
break;
case 8: var anf_arg4714 = $ans4824;
$step4823 = 9;
$al4825 = L[1967];
$field4838 = R.getColonFieldLoc(ED5,"text",L[1967]);
if(R.isMethod($field4838)) {
$ans4824 = $field4838.full_meth(ED5,(" were passed to the "));
} else {
if(!(R.isFunction($field4838))) {
R.ffi.throwNonFunApp(L[1967],$field4838);
}
$ans4824 = $field4838.app((" were passed to the "));
}
break;
case 9: var anf_arg4715 = $ans4824;
$step4823 = 10;
$al4825 = L[1968];
$field4839 = R.getColonFieldLoc(ED5,"text",L[1968]);
if(R.isMethod($field4839)) {
$ans4824 = $field4839.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field4839))) {
R.ffi.throwNonFunApp(L[1968],$field4839);
}
$ans4824 = $field4839.app(("."));
}
break;
case 10: var anf_arg4717 = $ans4824;
$step4823 = 11;
$al4825 = L[1961];
$field4840 = R.getColonFieldLoc(anf_method_obj4713,"make4",L[1961]);
if(R.isMethod($field4840)) {
$ans4824 = $field4840.full_meth(anf_method_obj4713,anf_arg4714,anf_arg4715,applicant4716,anf_arg4717);
} else {
if(!(R.isFunction($field4840))) {
R.ffi.throwNonFunApp(L[1961],$field4840);
}
$ans4824 = $field4840.app(anf_arg4714,anf_arg4715,applicant4716,anf_arg4717);
}
break;
case 11: var anf_arg4722 = $ans4824;
$step4823 = 12;
$al4825 = L[1969];
if(!(R.isFunction(rest4652))) {
R.ffi.throwNonFunApp($al4825,rest4652);
}
$ans4824 = rest4652.app(applicant4716);
break;
case 12: var anf_arg4723 = $ans4824;
$step4823 = 13;
$al4825 = L[1959];
$field4841 = R.getColonFieldLoc(anf_method_obj4719,"make4",L[1959]);
if(R.isMethod($field4841)) {
$ans4824 = $field4841.full_meth(anf_method_obj4719,anf_arg4720,anf_arg4721,anf_arg4722,anf_arg4723);
} else {
if(!(R.isFunction($field4841))) {
R.ffi.throwNonFunApp(L[1959],$field4841);
}
$ans4824 = $field4841.app(anf_arg4720,anf_arg4721,anf_arg4722,anf_arg4723);
}
break;
case 13: ++R.GAS;
return $ans4824;
default: throw "No case numbered " + $step4823 + " in $temp_branch4822";
}
}
} catch($e4842) {
if(R.isCont($e4842) && ($step4823 !== 13)) {
$e4842.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4825,$temp_branch4822,$step4823,[ast4688],[anf_arg4693,applicant4716,anf_method_obj4719,anf_arg4720,anf_arg4721,anf_method_obj4713,anf_arg4708,anf_arg4714,anf_arg4715,anf_arg4722]);
}
if(R.isPyretException($e4842)) {
$e4842.pyretStack.push($al4825);
}
throw $e4842;
}
};
$ans4794 = cases4686.$app_fields($temp_branch4822,[false]);
break;
case 18: if(cases4686.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1982],false,L[1972]);
}
$step4793 = 28;
$al4795 = L[1983];
var $temp_branch4849 = function($$resumer101) {
var $step4850 = 0;
var $ans4851 = D;
var $al4852 = L[1974];
try {
if(R.isActivationRecord($$resumer101)) {
$step4850 = $$resumer101.step;
$al4852 = $$resumer101.from;
$ans4851 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj4756 = $$resumer101.vars[0];
anf_arg4757 = $$resumer101.vars[1];
anf_arg4758 = $$resumer101.vars[2];
anf_method_obj4750 = $$resumer101.vars[3];
anf_arg4751 = $$resumer101.vars[4];
anf_arg4759 = $$resumer101.vars[5];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4850) {
case 0: $al4852 = L[1974];
var anf_method_obj4756 = G(ED5,"sequence",L[1974]);
var anf_fun4746 = ed$intro122.$var;
$step4850 = 1;
$al4852 = L[1981];
if(!(R.isFunction(anf_fun4746))) {
R.ffi.throwNonFunApp($al4852,anf_fun4746);
}
$ans4851 = anf_fun4746.app(("function application expression"),fun$app$loc4660,(-1),(true));
break;
case 1: var anf_arg4757 = $ans4851;
$step4850 = 2;
$al4852 = L[1975];
$field4853 = R.getColonFieldLoc(ED5,"cmcode",L[1975]);
if(R.isMethod($field4853)) {
$ans4851 = $field4853.full_meth(ED5,fun$app$loc4660);
} else {
if(!(R.isFunction($field4853))) {
R.ffi.throwNonFunApp(L[1975],$field4853);
}
$ans4851 = $field4853.app(fun$app$loc4660);
}
break;
case 2: var anf_arg4758 = $ans4851;
$al4852 = L[1976];
var anf_method_obj4750 = G(ED5,"para",L[1976]);
$step4850 = 3;
$al4852 = L[1977];
$field4854 = R.getColonFieldLoc(ED5,"ed-args",L[1977]);
if(R.isMethod($field4854)) {
$ans4851 = $field4854.full_meth(ED5,fun$app$arity4671);
} else {
if(!(R.isFunction($field4854))) {
R.ffi.throwNonFunApp(L[1977],$field4854);
}
$ans4851 = $field4854.app(fun$app$arity4671);
}
break;
case 3: var anf_arg4751 = $ans4851;
$step4850 = 4;
$al4852 = L[1978];
$field4855 = R.getColonFieldLoc(ED5,"text",L[1978]);
if(R.isMethod($field4855)) {
$ans4851 = $field4855.full_meth(ED5,(" were passed to the left side."));
} else {
if(!(R.isFunction($field4855))) {
R.ffi.throwNonFunApp(L[1978],$field4855);
}
$ans4851 = $field4855.app((" were passed to the left side."));
}
break;
case 4: var anf_arg4752 = $ans4851;
$step4850 = 5;
$al4852 = L[1976];
$field4856 = R.getColonFieldLoc(anf_method_obj4750,"make2",L[1976]);
if(R.isMethod($field4856)) {
$ans4851 = $field4856.full_meth(anf_method_obj4750,anf_arg4751,anf_arg4752);
} else {
if(!(R.isFunction($field4856))) {
R.ffi.throwNonFunApp(L[1976],$field4856);
}
$ans4851 = $field4856.app(anf_arg4751,anf_arg4752);
}
break;
case 5: var anf_arg4759 = $ans4851;
$step4850 = 6;
$al4852 = L[1979];
$field4857 = R.getColonFieldLoc(ED5,"text",L[1979]);
if(R.isMethod($field4857)) {
$ans4851 = $field4857.full_meth(ED5,("applicant"));
} else {
if(!(R.isFunction($field4857))) {
R.ffi.throwNonFunApp(L[1979],$field4857);
}
$ans4851 = $field4857.app(("applicant"));
}
break;
case 6: var anf_arg4755 = $ans4851;
$step4850 = 7;
$al4852 = L[1980];
if(!(R.isFunction(rest4652))) {
R.ffi.throwNonFunApp($al4852,rest4652);
}
$ans4851 = rest4652.app(anf_arg4755);
break;
case 7: var anf_arg4760 = $ans4851;
$step4850 = 8;
$al4852 = L[1974];
$field4858 = R.getColonFieldLoc(anf_method_obj4756,"make4",L[1974]);
if(R.isMethod($field4858)) {
$ans4851 = $field4858.full_meth(anf_method_obj4756,anf_arg4757,anf_arg4758,anf_arg4759,anf_arg4760);
} else {
if(!(R.isFunction($field4858))) {
R.ffi.throwNonFunApp(L[1974],$field4858);
}
$ans4851 = $field4858.app(anf_arg4757,anf_arg4758,anf_arg4759,anf_arg4760);
}
break;
case 8: ++R.GAS;
return $ans4851;
default: throw "No case numbered " + $step4850 + " in $temp_branch4849";
}
}
} catch($e4859) {
if(R.isCont($e4859) && ($step4850 !== 8)) {
$e4859.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4852,$temp_branch4849,$step4850,[],[anf_method_obj4756,anf_arg4757,anf_arg4758,anf_method_obj4750,anf_arg4751,anf_arg4759]);
}
if(R.isPyretException($e4859)) {
$e4859.pyretStack.push($al4852);
}
throw $e4859;
}
};
$ans4794 = cases4686.$app_fields($temp_branch4849,[]);
break;
case 19: $step4793 = 28;
$al4795 = L[1972];
$ans4794 = R.throwNoCasesMatched(L[1972],cases4686);
break;
case 20: $al4795 = L[1986];
var anf_method_obj4785 = G(ED5,"sequence",L[1986]);
var anf_fun4774 = ed$simple$intro95.$var;
$step4793 = 21;
$al4795 = L[1993];
if(!(R.isFunction(anf_fun4774))) {
R.ffi.throwNonFunApp($al4795,anf_fun4774);
}
$ans4794 = anf_fun4774.app(("function application expression"),fun$app$loc4660);
break;
case 21: var anf_arg4786 = $ans4794;
$al4795 = L[1987];
var anf_method_obj4778 = G(ED5,"para",L[1987]);
$step4793 = 22;
$al4795 = L[1988];
$field4861 = R.getColonFieldLoc(ED5,"text",L[1988]);
if(R.isMethod($field4861)) {
$ans4794 = $field4861.full_meth(ED5,("The applicant had "));
} else {
if(!(R.isFunction($field4861))) {
R.ffi.throwNonFunApp(L[1988],$field4861);
}
$ans4794 = $field4861.app(("The applicant had "));
}
break;
case 22: var anf_arg4779 = $ans4794;
$step4793 = 23;
$al4795 = L[1989];
$field4862 = R.getColonFieldLoc(ED5,"ed-args",L[1989]);
if(R.isMethod($field4862)) {
$ans4794 = $field4862.full_meth(ED5,fun$app$arity4671);
} else {
if(!(R.isFunction($field4862))) {
R.ffi.throwNonFunApp(L[1989],$field4862);
}
$ans4794 = $field4862.app(fun$app$arity4671);
}
break;
case 23: var anf_arg4780 = $ans4794;
$step4793 = 24;
$al4795 = L[1990];
$field4863 = R.getColonFieldLoc(ED5,"text",L[1990]);
if(R.isMethod($field4863)) {
$ans4794 = $field4863.full_meth(ED5,(" passed to it."));
} else {
if(!(R.isFunction($field4863))) {
R.ffi.throwNonFunApp(L[1990],$field4863);
}
$ans4794 = $field4863.app((" passed to it."));
}
break;
case 24: var anf_arg4781 = $ans4794;
$step4793 = 25;
$al4795 = L[1987];
$field4864 = R.getColonFieldLoc(anf_method_obj4778,"make3",L[1987]);
if(R.isMethod($field4864)) {
$ans4794 = $field4864.full_meth(anf_method_obj4778,anf_arg4779,anf_arg4780,anf_arg4781);
} else {
if(!(R.isFunction($field4864))) {
R.ffi.throwNonFunApp(L[1987],$field4864);
}
$ans4794 = $field4864.app(anf_arg4779,anf_arg4780,anf_arg4781);
}
break;
case 25: var anf_arg4787 = $ans4794;
$step4793 = 26;
$al4795 = L[1991];
$field4865 = R.getColonFieldLoc(ED5,"text",L[1991]);
if(R.isMethod($field4865)) {
$ans4794 = $field4865.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4865))) {
R.ffi.throwNonFunApp(L[1991],$field4865);
}
$ans4794 = $field4865.app(("left side"));
}
break;
case 26: var anf_arg4784 = $ans4794;
$step4793 = 27;
$al4795 = L[1992];
if(!(R.isFunction(rest4652))) {
R.ffi.throwNonFunApp($al4795,rest4652);
}
$ans4794 = rest4652.app(anf_arg4784);
break;
case 27: var anf_arg4788 = $ans4794;
$step4793 = 28;
$al4795 = L[1986];
$field4866 = R.getColonFieldLoc(anf_method_obj4785,"make3",L[1986]);
if(R.isMethod($field4866)) {
$ans4794 = $field4866.full_meth(anf_method_obj4785,anf_arg4786,anf_arg4787,anf_arg4788);
} else {
if(!(R.isFunction($field4866))) {
R.ffi.throwNonFunApp(L[1986],$field4866);
}
$ans4794 = $field4866.app(anf_arg4786,anf_arg4787,anf_arg4788);
}
break;
case 28: ++R.GAS;
return $ans4794;
default: throw "No case numbered " + $step4793 + " in $temp_branch4792";
}
}
} catch($e4867) {
if(R.isCont($e4867) && ($step4793 !== 28)) {
$e4867.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4795,$temp_branch4792,$step4793,[fun$app$loc4660],[anf_method_obj4680,anf_method_obj4666,anf_arg4667,anf_arg4668,anf_arg4681,anf_method_obj4674,anf_arg4675,anf_arg4682,cases4686,anf_method_obj4785,anf_arg4786,anf_method_obj4778,anf_arg4779,anf_arg4780,anf_arg4787]);
}
if(R.isPyretException($e4867)) {
$e4867.pyretStack.push($al4795);
}
throw $e4867;
}
};
$ans4653 = cases4659.$app_fields($temp_branch4792,[false]);
break;
case 8: if(cases4659.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[2006],false,L[1995]);
}
$step4650 = 10;
$al4654 = L[2007];
var $temp_branch4887 = function($$resumer101) {
var $step4888 = 0;
var $ans4889 = D;
var $al4890 = L[1997];
try {
if(R.isActivationRecord($$resumer101)) {
$step4888 = $$resumer101.step;
$al4890 = $$resumer101.from;
$ans4889 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj4882 = $$resumer101.vars[0];
anf_method_obj4869 = $$resumer101.vars[1];
anf_arg4883 = $$resumer101.vars[2];
anf_method_obj4875 = $$resumer101.vars[3];
anf_arg4876 = $$resumer101.vars[4];
anf_arg4877 = $$resumer101.vars[5];
anf_arg4884 = $$resumer101.vars[6];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4888) {
case 0: $al4890 = L[1997];
var anf_method_obj4882 = G(ED5,"sequence",L[1997]);
$al4890 = L[1998];
var anf_method_obj4869 = G(ED5,"para",L[1998]);
$step4888 = 1;
$al4890 = L[1999];
$field4891 = R.getColonFieldLoc(ED5,"text",L[1999]);
if(R.isMethod($field4891)) {
$ans4889 = $field4891.full_meth(ED5,("A function application expression failed."));
} else {
if(!(R.isFunction($field4891))) {
R.ffi.throwNonFunApp(L[1999],$field4891);
}
$ans4889 = $field4891.app(("A function application expression failed."));
}
break;
case 1: var anf_arg4870 = $ans4889;
$step4888 = 2;
$al4890 = L[1998];
$field4892 = R.getColonFieldLoc(anf_method_obj4869,"make1",L[1998]);
if(R.isMethod($field4892)) {
$ans4889 = $field4892.full_meth(anf_method_obj4869,anf_arg4870);
} else {
if(!(R.isFunction($field4892))) {
R.ffi.throwNonFunApp(L[1998],$field4892);
}
$ans4889 = $field4892.app(anf_arg4870);
}
break;
case 2: var anf_arg4883 = $ans4889;
$al4890 = L[2000];
var anf_method_obj4875 = G(ED5,"para",L[2000]);
$step4888 = 3;
$al4890 = L[2001];
$field4893 = R.getColonFieldLoc(ED5,"text",L[2001]);
if(R.isMethod($field4893)) {
$ans4889 = $field4893.full_meth(ED5,("The applicant had "));
} else {
if(!(R.isFunction($field4893))) {
R.ffi.throwNonFunApp(L[2001],$field4893);
}
$ans4889 = $field4893.app(("The applicant had "));
}
break;
case 3: var anf_arg4876 = $ans4889;
$step4888 = 4;
$al4890 = L[2002];
$field4894 = R.getColonFieldLoc(ED5,"ed-args",L[2002]);
if(R.isMethod($field4894)) {
$ans4889 = $field4894.full_meth(ED5,fun$app$arity4671);
} else {
if(!(R.isFunction($field4894))) {
R.ffi.throwNonFunApp(L[2002],$field4894);
}
$ans4889 = $field4894.app(fun$app$arity4671);
}
break;
case 4: var anf_arg4877 = $ans4889;
$step4888 = 5;
$al4890 = L[2003];
$field4895 = R.getColonFieldLoc(ED5,"text",L[2003]);
if(R.isMethod($field4895)) {
$ans4889 = $field4895.full_meth(ED5,(" passed to it."));
} else {
if(!(R.isFunction($field4895))) {
R.ffi.throwNonFunApp(L[2003],$field4895);
}
$ans4889 = $field4895.app((" passed to it."));
}
break;
case 5: var anf_arg4878 = $ans4889;
$step4888 = 6;
$al4890 = L[2000];
$field4896 = R.getColonFieldLoc(anf_method_obj4875,"make3",L[2000]);
if(R.isMethod($field4896)) {
$ans4889 = $field4896.full_meth(anf_method_obj4875,anf_arg4876,anf_arg4877,anf_arg4878);
} else {
if(!(R.isFunction($field4896))) {
R.ffi.throwNonFunApp(L[2000],$field4896);
}
$ans4889 = $field4896.app(anf_arg4876,anf_arg4877,anf_arg4878);
}
break;
case 6: var anf_arg4884 = $ans4889;
$step4888 = 7;
$al4890 = L[2004];
$field4897 = R.getColonFieldLoc(ED5,"text",L[2004]);
if(R.isMethod($field4897)) {
$ans4889 = $field4897.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field4897))) {
R.ffi.throwNonFunApp(L[2004],$field4897);
}
$ans4889 = $field4897.app(("left side"));
}
break;
case 7: var anf_arg4881 = $ans4889;
$step4888 = 8;
$al4890 = L[2005];
if(!(R.isFunction(rest4652))) {
R.ffi.throwNonFunApp($al4890,rest4652);
}
$ans4889 = rest4652.app(anf_arg4881);
break;
case 8: var anf_arg4885 = $ans4889;
$step4888 = 9;
$al4890 = L[1997];
$field4898 = R.getColonFieldLoc(anf_method_obj4882,"make3",L[1997]);
if(R.isMethod($field4898)) {
$ans4889 = $field4898.full_meth(anf_method_obj4882,anf_arg4883,anf_arg4884,anf_arg4885);
} else {
if(!(R.isFunction($field4898))) {
R.ffi.throwNonFunApp(L[1997],$field4898);
}
$ans4889 = $field4898.app(anf_arg4883,anf_arg4884,anf_arg4885);
}
break;
case 9: ++R.GAS;
return $ans4889;
default: throw "No case numbered " + $step4888 + " in $temp_branch4887";
}
}
} catch($e4899) {
if(R.isCont($e4899) && ($step4888 !== 9)) {
$e4899.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4890,$temp_branch4887,$step4888,[],[anf_method_obj4882,anf_method_obj4869,anf_arg4883,anf_method_obj4875,anf_arg4876,anf_arg4877,anf_arg4884]);
}
if(R.isPyretException($e4899)) {
$e4899.pyretStack.push($al4890);
}
throw $e4899;
}
};
$ans4653 = cases4659.$app_fields($temp_branch4887,[]);
break;
case 9: $step4650 = 10;
$al4654 = L[1995];
$ans4653 = R.throwNoCasesMatched(L[1995],cases4659);
break;
case 10: var anf_arg4902 = $ans4653;
$step4650 = 11;
$al4654 = L[1939];
$field4903 = R.getColonFieldLoc(anf_method_obj4901,"make1",L[1939]);
if(R.isMethod($field4903)) {
$ans4653 = $field4903.full_meth(anf_method_obj4901,anf_arg4902);
} else {
if(!(R.isFunction($field4903))) {
R.ffi.throwNonFunApp(L[1939],$field4903);
}
$ans4653 = $field4903.app(anf_arg4902);
}
break;
case 11: ++R.GAS;
return $ans4653;
default: throw "No case numbered " + $step4650 + " in $temp_lam4651";
}
}
} catch($e4905) {
if(R.isCont($e4905) && ($step4650 !== 11)) {
$e4905.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4654,$temp_lam4651,$step4650,[rest4652],[anf_method_obj4901,cases4659]);
}
if(R.isPyretException($e4905)) {
$e4905.pyretStack.push($al4654);
}
throw $e4905;
}
};
var helper5108 = R.makeFunction($temp_lam4651,"");
$al4647 = L[2011];
var anf_arg4906 = G(self4642,"fun-def-loc",L[2011]);
$step4640 = 2;
$al4647 = L[2012];
if(!(R.isFunction(src$available4644))) {
R.ffi.throwNonFunApp($al4647,src$available4644);
}
$ans4646 = src$available4644.app(anf_arg4906);
break;
case 2: var anf_arg4907 = $ans4646;
$al4647 = L[2012];
var anf_if5217 = R.checkWrapBoolean(anf_arg4907);
$step4640 = R.isPyretTrue(anf_if5217)?3:9;
break;
case 3: var is$underscore4922 = {"$var":D};
var $temp_lam4909 = function($arg4910) {
var $step4908 = 0;
var $ans4911 = D;
var $al4912 = L[2017];
try {
if(R.isActivationRecord($arg4910)) {
$step4908 = $arg4910.step;
$al4912 = $arg4910.from;
$ans4911 = $arg4910.ans;
arg4910 = $arg4910.args[0];
cases4913 = $arg4910.vars[0];
cases4915 = $arg4910.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2017],1,$t);
}
var arg4910 = $arg4910;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step4908) {
case 0: var cases4913 = arg4910;
var $cases_dispatch4919 = {"s-id":1};
$al4912 = L[2016];
$step4908 = $cases_dispatch4919[cases4913.$name] || 4;
break;
case 1: if(cases4913.$arity !== 2) {
if(cases4913.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2015],2,cases4913.$arity,L[2016]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2015],true,L[2016]);
}
}
var $fn187 = cases4913.$constructor.$fieldNames;
R.derefField(cases4913.dict[$fn187[0]],cases4913.$mut_fields_mask[0],false);
var id4914 = R.derefField(cases4913.dict[$fn187[1]],cases4913.$mut_fields_mask[1],false);
var cases4915 = id4914;
var $cases_dispatch4917 = {"s-underscore":2};
$al4912 = L[2014];
$step4908 = $cases_dispatch4917[cases4915.$name] || 3;
break;
case 2: if(cases4915.$arity !== 1) {
if(cases4915.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2013],1,cases4915.$arity,L[2014]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2013],true,L[2014]);
}
}
var $fn187 = cases4915.$constructor.$fieldNames;
R.derefField(cases4915.dict[$fn187[0]],cases4915.$mut_fields_mask[0],false);
$step4908 = 5;
$ans4911 = (true);
break;
case 3: $step4908 = 5;
$ans4911 = (false);
break;
case 4: $step4908 = 5;
$ans4911 = (false);
break;
case 5: ++R.GAS;
return $ans4911;
default: throw "No case numbered " + $step4908 + " in $temp_lam4909";
}
}
} catch($e4920) {
if(R.isCont($e4920) && ($step4908 !== 5)) {
$e4920.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4912,$temp_lam4909,$step4908,[arg4910],[cases4913,cases4915]);
}
if(R.isPyretException($e4920)) {
$e4920.pyretStack.push($al4912);
}
throw $e4920;
}
};
var anf_assign4921 = R.makeFunction($temp_lam4909,"is-underscore");
is$underscore4922.$var = anf_assign4921;
$al4647 = L[2018];
var anf_arg4923 = G(self4642,"fun-def-loc",L[2018]);
$step4640 = 4;
$al4647 = L[2118];
if(!(R.isFunction(maybe$ast4645))) {
R.ffi.throwNonFunApp($al4647,maybe$ast4645);
}
$ans4646 = maybe$ast4645.app(anf_arg4923);
break;
case 4: var cases4924 = $ans4646;
$step4640 = 5;
$al4647 = L[2117];
R._checkAnn(L[2117],R.getDotAnn(L[2117],"O",O13,"Option"),cases4924);
break;
case 5: var $cases_dispatch5198 = {"some":6,
"none":7};
$al4647 = L[2103];
$step4640 = $cases_dispatch5198[cases4924.$name] || 8;
break;
case 6: if(cases4924.$arity !== 1) {
if(cases4924.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2102],1,cases4924.$arity,L[2103]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2102],true,L[2103]);
}
}
$step4640 = 10;
$al4647 = L[2104];
var $temp_branch5110 = function($ast4925) {
var $step5111 = 0;
var $ans5112 = D;
var $al5113 = L[2042];
try {
if(R.isActivationRecord($ast4925)) {
$step5111 = $ast4925.step;
$al5113 = $ast4925.from;
$ans5112 = $ast4925.ans;
ast4925 = $ast4925.args[0];
cases4926 = $ast4925.vars[0];
l4991 = $ast4925.vars[1];
b4990 = $ast4925.vars[2];
anf_tuple_fields4994 = $ast4925.vars[3];
l5012 = $ast4925.vars[4];
b5011 = $ast4925.vars[5];
anf_tuple_fields5015 = $ast4925.vars[6];
l5033 = $ast4925.vars[7];
b5032 = $ast4925.vars[8];
anf_tuple_fields5036 = $ast4925.vars[9];
tup5081 = $ast4925.vars[10];
} else {
var ast4925 = $ast4925;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5111) {
case 0: var cases4926 = ast4925;
var $cases_dispatch5159 = {"s-op":1,
"s-app":2,
"s-fun":5,
"s-lam":8,
"s-method":11,
"s-dot":14,
"s-extend":17,
"s-update":20,
"s-get-bang":23};
$al5113 = L[2042];
$step5111 = $cases_dispatch5159[cases4926.$name] || 26;
break;
case 1: if(cases4926.$arity !== 5) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2041],5,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2041],true,L[2042]);
}
}
$step5111 = 27;
$al5113 = L[2043];
var $temp_branch5118 = function($$underscore4961,$$underscore4962,$$underscore4963,$l4928,$r4930) {
var $step5119 = 0;
var $ans5120 = D;
var $al5121 = L[2040];
try {
if(R.isActivationRecord($$underscore4961)) {
$step5119 = $$underscore4961.step;
$al5121 = $$underscore4961.from;
$ans5120 = $$underscore4961.ans;
$underscore4961 = $$underscore4961.args[0];
$underscore4962 = $$underscore4961.args[1];
$underscore4963 = $$underscore4961.args[2];
l4928 = $$underscore4961.args[3];
r4930 = $$underscore4961.args[4];
l$underscore4931 = $$underscore4961.vars[0];
r$underscore4932 = $$underscore4961.vars[1];
} else {
var $underscore4961 = $$underscore4961;
var $underscore4962 = $$underscore4962;
var $underscore4963 = $$underscore4963;
var l4928 = $l4928;
var r4930 = $r4930;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5119) {
case 0: var anf_fun4927 = is$underscore4922.$var;
$step5119 = 1;
$al5121 = L[2039];
if(!(R.isFunction(anf_fun4927))) {
R.ffi.throwNonFunApp($al5121,anf_fun4927);
}
$ans5120 = anf_fun4927.app(l4928);
break;
case 1: var l$underscore4931 = $ans5120;
var anf_fun4929 = is$underscore4922.$var;
$step5119 = 2;
$al5121 = L[2038];
if(!(R.isFunction(anf_fun4929))) {
R.ffi.throwNonFunApp($al5121,anf_fun4929);
}
$ans5120 = anf_fun4929.app(r4930);
break;
case 2: var r$underscore4932 = $ans5120;
$al5121 = L[2019];
var anf_if4952 = R.checkWrapBoolean(l$underscore4931);
$step5119 = R.isPyretTrue(anf_if4952)?3:4;
break;
case 3: $step5119 = 5;
$al5121 = L[2020];
$ans5120 = R.checkWrapBoolean(r$underscore4932);
break;
case 4: $step5119 = 5;
$ans5120 = (false);
break;
case 5: var anf_arg4933 = $ans5120;
$al5121 = L[2021];
var anf_if4951 = R.checkWrapBoolean(anf_arg4933);
$step5119 = R.isPyretTrue(anf_if4951)?6:7;
break;
case 6: $al5121 = L[2022];
var anf_bracket4934 = G(l4928,"id",L[2022]);
$al5121 = L[2023];
var anf_arg4936 = G(anf_bracket4934,"l",L[2023]);
$al5121 = L[2024];
var anf_bracket4935 = G(r4930,"id",L[2024]);
$al5121 = L[2025];
var anf_arg4937 = G(anf_bracket4935,"l",L[2025]);
$step5119 = 12;
$al5121 = L[2026];
$field5122 = R.getColonFieldLoc(raw$array6,"make2",L[2026]);
if(R.isMethod($field5122)) {
$ans5120 = $field5122.full_meth(raw$array6,anf_arg4936,anf_arg4937);
} else {
if(!(R.isFunction($field5122))) {
R.ffi.throwNonFunApp(L[2026],$field5122);
}
$ans5120 = $field5122.app(anf_arg4936,anf_arg4937);
}
break;
case 7: $al5121 = L[2027];
var anf_if4947 = R.checkWrapBoolean(l$underscore4931);
$step5119 = R.isPyretTrue(anf_if4947)?8:9;
break;
case 8: $al5121 = L[2028];
var anf_bracket4939 = G(l4928,"id",L[2028]);
$al5121 = L[2029];
var anf_arg4940 = G(anf_bracket4939,"l",L[2029]);
$step5119 = 12;
$al5121 = L[2030];
$field5123 = R.getColonFieldLoc(raw$array6,"make1",L[2030]);
if(R.isMethod($field5123)) {
$ans5120 = $field5123.full_meth(raw$array6,anf_arg4940);
} else {
if(!(R.isFunction($field5123))) {
R.ffi.throwNonFunApp(L[2030],$field5123);
}
$ans5120 = $field5123.app(anf_arg4940);
}
break;
case 9: $al5121 = L[2031];
var anf_if4946 = R.checkWrapBoolean(r$underscore4932);
$step5119 = R.isPyretTrue(anf_if4946)?10:11;
break;
case 10: $al5121 = L[2032];
var anf_bracket4942 = G(r4930,"id",L[2032]);
$al5121 = L[2033];
var anf_arg4943 = G(anf_bracket4942,"l",L[2033]);
$step5119 = 12;
$al5121 = L[2034];
$field5124 = R.getColonFieldLoc(raw$array6,"make1",L[2034]);
if(R.isMethod($field5124)) {
$ans5120 = $field5124.full_meth(raw$array6,anf_arg4943);
} else {
if(!(R.isFunction($field5124))) {
R.ffi.throwNonFunApp(L[2034],$field5124);
}
$ans5120 = $field5124.app(anf_arg4943);
}
break;
case 11: $step5119 = 12;
$al5121 = L[2035];
$field5125 = R.getColonFieldLoc(raw$array6,"make0",L[2035]);
if(R.isMethod($field5125)) {
$ans5120 = $field5125.full_meth(raw$array6);
} else {
if(!(R.isFunction($field5125))) {
R.ffi.throwNonFunApp(L[2035],$field5125);
}
$ans5120 = $field5125.app();
}
break;
case 12: var anf_arg4948 = $ans5120;
$step5119 = 13;
$al5121 = L[2037];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al5121,raw$array$to$list5);
}
$ans5120 = raw$array$to$list5.app(anf_arg4948);
break;
case 13: var anf_tuple_fields4949 = $ans5120;
$al5121 = L[2036];
var anf_tuple_fields4950 = G(self4642,"fun-def-loc",L[2036]);
$step5119 = 14;
$ans5120 = R.makeTuple([anf_tuple_fields4949,anf_tuple_fields4950]);
break;
case 14: ++R.GAS;
return $ans5120;
default: throw "No case numbered " + $step5119 + " in $temp_branch5118";
}
}
} catch($e5126) {
if(R.isCont($e5126) && ($step5119 !== 14)) {
$e5126.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5121,$temp_branch5118,$step5119,[$underscore4961,$underscore4962,$underscore4963,l4928,r4930],[l$underscore4931,r$underscore4932]);
}
if(R.isPyretException($e5126)) {
$e5126.pyretStack.push($al5121);
}
throw $e5126;
}
};
$ans5112 = cases4926.$app_fields($temp_branch5118,[false,false,false,false,false]);
break;
case 2: if(cases4926.$arity !== 3) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2048],3,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2048],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
var args4965 = R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
var anf_arg4966 = is$underscore4922.$var;
$step5111 = 3;
$al5113 = L[2044];
$field5127 = R.getColonFieldLoc(args4965,"filter",L[2044]);
if(R.isMethod($field5127)) {
$ans5112 = $field5127.full_meth(args4965,anf_arg4966);
} else {
if(!(R.isFunction($field5127))) {
R.ffi.throwNonFunApp(L[2044],$field5127);
}
$ans5112 = $field5127.app(anf_arg4966);
}
break;
case 3: var anf_method_obj4974 = $ans5112;
var $temp_lam5129 = function($recv_4970) {
var $step5128 = 0;
var $ans5130 = D;
var $al5131 = L[2045];
try {
if(R.isActivationRecord($recv_4970)) {
$step5128 = $recv_4970.step;
$al5131 = $recv_4970.from;
$ans5130 = $recv_4970.ans;
recv_4970 = $recv_4970.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2045],1,$t);
}
var recv_4970 = $recv_4970;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5128) {
case 0: $step5128 = 1;
$al5131 = L[2045];
$ans5130 = G(recv_4970,"l",L[2045]);
break;
case 1: ++R.GAS;
return $ans5130;
default: throw "No case numbered " + $step5128 + " in $temp_lam5129";
}
}
} catch($e5132) {
if(R.isCont($e5132) && ($step5128 !== 1)) {
$e5132.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5131,$temp_lam5129,$step5128,[recv_4970],[]);
}
if(R.isPyretException($e5132)) {
$e5132.pyretStack.push($al5131);
}
throw $e5132;
}
};
var anf_arg4975 = R.makeFunction($temp_lam5129,"");
$step5111 = 4;
$al5113 = L[2046];
$field5133 = R.getColonFieldLoc(anf_method_obj4974,"map",L[2046]);
if(R.isMethod($field5133)) {
$ans5112 = $field5133.full_meth(anf_method_obj4974,anf_arg4975);
} else {
if(!(R.isFunction($field5133))) {
R.ffi.throwNonFunApp(L[2046],$field5133);
}
$ans5112 = $field5133.app(anf_arg4975);
}
break;
case 4: var anf_tuple_fields4977 = $ans5112;
$al5113 = L[2047];
var anf_tuple_fields4978 = G(self4642,"fun-def-loc",L[2047]);
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields4977,anf_tuple_fields4978]);
break;
case 5: if(cases4926.$arity !== 9) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2053],9,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2053],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
var l4991 = R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
var args4987 = R.derefField(cases4926.dict[$fn187[3]],cases4926.$mut_fields_mask[3],false);
R.derefField(cases4926.dict[$fn187[4]],cases4926.$mut_fields_mask[4],false);
R.derefField(cases4926.dict[$fn187[5]],cases4926.$mut_fields_mask[5],false);
var b4990 = R.derefField(cases4926.dict[$fn187[6]],cases4926.$mut_fields_mask[6],false);
R.derefField(cases4926.dict[$fn187[7]],cases4926.$mut_fields_mask[7],false);
R.derefField(cases4926.dict[$fn187[8]],cases4926.$mut_fields_mask[8],false);
var $temp_lam5135 = function($recv_4983) {
var $step5134 = 0;
var $ans5136 = D;
var $al5137 = L[2049];
try {
if(R.isActivationRecord($recv_4983)) {
$step5134 = $recv_4983.step;
$al5137 = $recv_4983.from;
$ans5136 = $recv_4983.ans;
recv_4983 = $recv_4983.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2049],1,$t);
}
var recv_4983 = $recv_4983;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5134) {
case 0: $step5134 = 1;
$al5137 = L[2049];
$ans5136 = G(recv_4983,"l",L[2049]);
break;
case 1: ++R.GAS;
return $ans5136;
default: throw "No case numbered " + $step5134 + " in $temp_lam5135";
}
}
} catch($e5138) {
if(R.isCont($e5138) && ($step5134 !== 1)) {
$e5138.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5137,$temp_lam5135,$step5134,[recv_4983],[]);
}
if(R.isPyretException($e5138)) {
$e5138.pyretStack.push($al5137);
}
throw $e5138;
}
};
var anf_arg4988 = R.makeFunction($temp_lam5135,"");
$step5111 = 6;
$al5113 = L[2050];
$field5139 = R.getColonFieldLoc(args4987,"map",L[2050]);
if(R.isMethod($field5139)) {
$ans5112 = $field5139.full_meth(args4987,anf_arg4988);
} else {
if(!(R.isFunction($field5139))) {
R.ffi.throwNonFunApp(L[2050],$field5139);
}
$ans5112 = $field5139.app(anf_arg4988);
}
break;
case 6: var anf_tuple_fields4994 = $ans5112;
$al5113 = L[2051];
var anf_arg4992 = G(b4990,"l",L[2051]);
$step5111 = 7;
$al5113 = L[2052];
$field5140 = R.getColonFieldLoc(l4991,"upto",L[2052]);
if(R.isMethod($field5140)) {
$ans5112 = $field5140.full_meth(l4991,anf_arg4992);
} else {
if(!(R.isFunction($field5140))) {
R.ffi.throwNonFunApp(L[2052],$field5140);
}
$ans5112 = $field5140.app(anf_arg4992);
}
break;
case 7: var anf_tuple_fields4995 = $ans5112;
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields4994,anf_tuple_fields4995]);
break;
case 8: if(cases4926.$arity !== 9) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2058],9,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2058],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
var l5012 = R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
var args5008 = R.derefField(cases4926.dict[$fn187[3]],cases4926.$mut_fields_mask[3],false);
R.derefField(cases4926.dict[$fn187[4]],cases4926.$mut_fields_mask[4],false);
R.derefField(cases4926.dict[$fn187[5]],cases4926.$mut_fields_mask[5],false);
var b5011 = R.derefField(cases4926.dict[$fn187[6]],cases4926.$mut_fields_mask[6],false);
R.derefField(cases4926.dict[$fn187[7]],cases4926.$mut_fields_mask[7],false);
R.derefField(cases4926.dict[$fn187[8]],cases4926.$mut_fields_mask[8],false);
var $temp_lam5142 = function($recv_5004) {
var $step5141 = 0;
var $ans5143 = D;
var $al5144 = L[2054];
try {
if(R.isActivationRecord($recv_5004)) {
$step5141 = $recv_5004.step;
$al5144 = $recv_5004.from;
$ans5143 = $recv_5004.ans;
recv_5004 = $recv_5004.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2054],1,$t);
}
var recv_5004 = $recv_5004;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5141) {
case 0: $step5141 = 1;
$al5144 = L[2054];
$ans5143 = G(recv_5004,"l",L[2054]);
break;
case 1: ++R.GAS;
return $ans5143;
default: throw "No case numbered " + $step5141 + " in $temp_lam5142";
}
}
} catch($e5145) {
if(R.isCont($e5145) && ($step5141 !== 1)) {
$e5145.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5144,$temp_lam5142,$step5141,[recv_5004],[]);
}
if(R.isPyretException($e5145)) {
$e5145.pyretStack.push($al5144);
}
throw $e5145;
}
};
var anf_arg5009 = R.makeFunction($temp_lam5142,"");
$step5111 = 9;
$al5113 = L[2055];
$field5146 = R.getColonFieldLoc(args5008,"map",L[2055]);
if(R.isMethod($field5146)) {
$ans5112 = $field5146.full_meth(args5008,anf_arg5009);
} else {
if(!(R.isFunction($field5146))) {
R.ffi.throwNonFunApp(L[2055],$field5146);
}
$ans5112 = $field5146.app(anf_arg5009);
}
break;
case 9: var anf_tuple_fields5015 = $ans5112;
$al5113 = L[2056];
var anf_arg5013 = G(b5011,"l",L[2056]);
$step5111 = 10;
$al5113 = L[2057];
$field5147 = R.getColonFieldLoc(l5012,"upto",L[2057]);
if(R.isMethod($field5147)) {
$ans5112 = $field5147.full_meth(l5012,anf_arg5013);
} else {
if(!(R.isFunction($field5147))) {
R.ffi.throwNonFunApp(L[2057],$field5147);
}
$ans5112 = $field5147.app(anf_arg5013);
}
break;
case 10: var anf_tuple_fields5016 = $ans5112;
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields5015,anf_tuple_fields5016]);
break;
case 11: if(cases4926.$arity !== 9) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2063],9,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2063],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
var l5033 = R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
var args5029 = R.derefField(cases4926.dict[$fn187[3]],cases4926.$mut_fields_mask[3],false);
R.derefField(cases4926.dict[$fn187[4]],cases4926.$mut_fields_mask[4],false);
R.derefField(cases4926.dict[$fn187[5]],cases4926.$mut_fields_mask[5],false);
var b5032 = R.derefField(cases4926.dict[$fn187[6]],cases4926.$mut_fields_mask[6],false);
R.derefField(cases4926.dict[$fn187[7]],cases4926.$mut_fields_mask[7],false);
R.derefField(cases4926.dict[$fn187[8]],cases4926.$mut_fields_mask[8],false);
var $temp_lam5149 = function($recv_5025) {
var $step5148 = 0;
var $ans5150 = D;
var $al5151 = L[2059];
try {
if(R.isActivationRecord($recv_5025)) {
$step5148 = $recv_5025.step;
$al5151 = $recv_5025.from;
$ans5150 = $recv_5025.ans;
recv_5025 = $recv_5025.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2059],1,$t);
}
var recv_5025 = $recv_5025;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5148) {
case 0: $step5148 = 1;
$al5151 = L[2059];
$ans5150 = G(recv_5025,"l",L[2059]);
break;
case 1: ++R.GAS;
return $ans5150;
default: throw "No case numbered " + $step5148 + " in $temp_lam5149";
}
}
} catch($e5152) {
if(R.isCont($e5152) && ($step5148 !== 1)) {
$e5152.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5151,$temp_lam5149,$step5148,[recv_5025],[]);
}
if(R.isPyretException($e5152)) {
$e5152.pyretStack.push($al5151);
}
throw $e5152;
}
};
var anf_arg5030 = R.makeFunction($temp_lam5149,"");
$step5111 = 12;
$al5113 = L[2060];
$field5153 = R.getColonFieldLoc(args5029,"map",L[2060]);
if(R.isMethod($field5153)) {
$ans5112 = $field5153.full_meth(args5029,anf_arg5030);
} else {
if(!(R.isFunction($field5153))) {
R.ffi.throwNonFunApp(L[2060],$field5153);
}
$ans5112 = $field5153.app(anf_arg5030);
}
break;
case 12: var anf_tuple_fields5036 = $ans5112;
$al5113 = L[2061];
var anf_arg5034 = G(b5032,"l",L[2061]);
$step5111 = 13;
$al5113 = L[2062];
$field5154 = R.getColonFieldLoc(l5033,"upto",L[2062]);
if(R.isMethod($field5154)) {
$ans5112 = $field5154.full_meth(l5033,anf_arg5034);
} else {
if(!(R.isFunction($field5154))) {
R.ffi.throwNonFunApp(L[2062],$field5154);
}
$ans5112 = $field5154.app(anf_arg5034);
}
break;
case 13: var anf_tuple_fields5037 = $ans5112;
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields5036,anf_tuple_fields5037]);
break;
case 14: if(cases4926.$arity !== 3) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2069],3,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2069],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
var obj5044 = R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
$al5113 = L[2064];
var anf_bracket5045 = G(obj5044,"id",L[2064]);
$al5113 = L[2065];
var anf_arg5046 = G(anf_bracket5045,"l",L[2065]);
$step5111 = 15;
$al5113 = L[2066];
$field5155 = R.getColonFieldLoc(raw$array6,"make1",L[2066]);
if(R.isMethod($field5155)) {
$ans5112 = $field5155.full_meth(raw$array6,anf_arg5046);
} else {
if(!(R.isFunction($field5155))) {
R.ffi.throwNonFunApp(L[2066],$field5155);
}
$ans5112 = $field5155.app(anf_arg5046);
}
break;
case 15: var anf_arg5048 = $ans5112;
$step5111 = 16;
$al5113 = L[2068];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al5113,raw$array$to$list5);
}
$ans5112 = raw$array$to$list5.app(anf_arg5048);
break;
case 16: var anf_tuple_fields5049 = $ans5112;
$al5113 = L[2067];
var anf_tuple_fields5050 = G(self4642,"fun-def-loc",L[2067]);
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields5049,anf_tuple_fields5050]);
break;
case 17: if(cases4926.$arity !== 3) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2075],3,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2075],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
var obj5053 = R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
$al5113 = L[2070];
var anf_bracket5054 = G(obj5053,"id",L[2070]);
$al5113 = L[2071];
var anf_arg5055 = G(anf_bracket5054,"l",L[2071]);
$step5111 = 18;
$al5113 = L[2072];
$field5156 = R.getColonFieldLoc(raw$array6,"make1",L[2072]);
if(R.isMethod($field5156)) {
$ans5112 = $field5156.full_meth(raw$array6,anf_arg5055);
} else {
if(!(R.isFunction($field5156))) {
R.ffi.throwNonFunApp(L[2072],$field5156);
}
$ans5112 = $field5156.app(anf_arg5055);
}
break;
case 18: var anf_arg5057 = $ans5112;
$step5111 = 19;
$al5113 = L[2074];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al5113,raw$array$to$list5);
}
$ans5112 = raw$array$to$list5.app(anf_arg5057);
break;
case 19: var anf_tuple_fields5058 = $ans5112;
$al5113 = L[2073];
var anf_tuple_fields5059 = G(self4642,"fun-def-loc",L[2073]);
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields5058,anf_tuple_fields5059]);
break;
case 20: if(cases4926.$arity !== 3) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2081],3,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2081],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
var obj5062 = R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
$al5113 = L[2076];
var anf_bracket5063 = G(obj5062,"id",L[2076]);
$al5113 = L[2077];
var anf_arg5064 = G(anf_bracket5063,"l",L[2077]);
$step5111 = 21;
$al5113 = L[2078];
$field5157 = R.getColonFieldLoc(raw$array6,"make1",L[2078]);
if(R.isMethod($field5157)) {
$ans5112 = $field5157.full_meth(raw$array6,anf_arg5064);
} else {
if(!(R.isFunction($field5157))) {
R.ffi.throwNonFunApp(L[2078],$field5157);
}
$ans5112 = $field5157.app(anf_arg5064);
}
break;
case 21: var anf_arg5066 = $ans5112;
$step5111 = 22;
$al5113 = L[2080];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al5113,raw$array$to$list5);
}
$ans5112 = raw$array$to$list5.app(anf_arg5066);
break;
case 22: var anf_tuple_fields5067 = $ans5112;
$al5113 = L[2079];
var anf_tuple_fields5068 = G(self4642,"fun-def-loc",L[2079]);
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields5067,anf_tuple_fields5068]);
break;
case 23: if(cases4926.$arity !== 3) {
if(cases4926.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2087],3,cases4926.$arity,L[2042]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2087],true,L[2042]);
}
}
var $fn187 = cases4926.$constructor.$fieldNames;
R.derefField(cases4926.dict[$fn187[0]],cases4926.$mut_fields_mask[0],false);
var obj5071 = R.derefField(cases4926.dict[$fn187[1]],cases4926.$mut_fields_mask[1],false);
R.derefField(cases4926.dict[$fn187[2]],cases4926.$mut_fields_mask[2],false);
$al5113 = L[2082];
var anf_bracket5072 = G(obj5071,"id",L[2082]);
$al5113 = L[2083];
var anf_arg5073 = G(anf_bracket5072,"l",L[2083]);
$step5111 = 24;
$al5113 = L[2084];
$field5158 = R.getColonFieldLoc(raw$array6,"make1",L[2084]);
if(R.isMethod($field5158)) {
$ans5112 = $field5158.full_meth(raw$array6,anf_arg5073);
} else {
if(!(R.isFunction($field5158))) {
R.ffi.throwNonFunApp(L[2084],$field5158);
}
$ans5112 = $field5158.app(anf_arg5073);
}
break;
case 24: var anf_arg5075 = $ans5112;
$step5111 = 25;
$al5113 = L[2086];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al5113,raw$array$to$list5);
}
$ans5112 = raw$array$to$list5.app(anf_arg5075);
break;
case 25: var anf_tuple_fields5076 = $ans5112;
$al5113 = L[2085];
var anf_tuple_fields5077 = G(self4642,"fun-def-loc",L[2085]);
$step5111 = 27;
$ans5112 = R.makeTuple([anf_tuple_fields5076,anf_tuple_fields5077]);
break;
case 26: $step5111 = 27;
$al5113 = L[2042];
$ans5112 = R.throwNoCasesMatched(L[2042],cases4926);
break;
case 27: var tup5081 = $ans5112;
$step5111 = 28;
$al5113 = L[2101];
R._checkAnn(L[2101],R.makeTupleAnn([L[1841],L[1841]],[R.Any,R.Any]),tup5081);
break;
case 28: var args5092 = R.getTuple(tup5081,0,L[2088]);
var fun$def$snippet$loc5101 = R.getTuple(tup5081,1,L[2089]);
var $temp_lam5161 = function($applicant5084) {
var $step5160 = 0;
var $ans5162 = D;
var $al5163 = L[2099];
try {
if(R.isActivationRecord($applicant5084)) {
$step5160 = $applicant5084.step;
$al5163 = $applicant5084.from;
$ans5162 = $applicant5084.ans;
applicant5084 = $applicant5084.args[0];
anf_method_obj5103 = $applicant5084.vars[0];
anf_method_obj5095 = $applicant5084.vars[1];
anf_arg5096 = $applicant5084.vars[2];
anf_arg5097 = $applicant5084.vars[3];
anf_arg5098 = $applicant5084.vars[4];
anf_arg5104 = $applicant5084.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2099],1,$t);
}
var applicant5084 = $applicant5084;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5160) {
case 0: $al5163 = L[2090];
var anf_method_obj5103 = G(ED5,"sequence",L[2090]);
$al5163 = L[2091];
var anf_method_obj5095 = G(ED5,"para",L[2091]);
$step5160 = 1;
$al5163 = L[2092];
$field5164 = R.getColonFieldLoc(ED5,"text",L[2092]);
if(R.isMethod($field5164)) {
$ans5162 = $field5164.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field5164))) {
R.ffi.throwNonFunApp(L[2092],$field5164);
}
$ans5162 = $field5164.app(("The "));
}
break;
case 1: var anf_arg5096 = $ans5162;
$step5160 = 2;
$al5163 = L[2093];
$field5165 = R.getColonFieldLoc(ED5,"text",L[2093]);
if(R.isMethod($field5165)) {
$ans5162 = $field5165.full_meth(ED5,(" was a function accepting "));
} else {
if(!(R.isFunction($field5165))) {
R.ffi.throwNonFunApp(L[2093],$field5165);
}
$ans5162 = $field5165.app((" was a function accepting "));
}
break;
case 2: var anf_arg5097 = $ans5162;
$al5163 = L[2094];
var anf_arg5089 = G(self4642,"fun-def-arity",L[2094]);
$step5160 = 3;
$al5163 = L[2095];
$field5166 = R.getColonFieldLoc(ED5,"ed-args",L[2095]);
if(R.isMethod($field5166)) {
$ans5162 = $field5166.full_meth(ED5,anf_arg5089);
} else {
if(!(R.isFunction($field5166))) {
R.ffi.throwNonFunApp(L[2095],$field5166);
}
$ans5162 = $field5166.app(anf_arg5089);
}
break;
case 3: var anf_arg5091 = $ans5162;
$step5160 = 4;
$al5163 = L[2096];
$field5167 = R.getColonFieldLoc(ED5,"highlight",L[2096]);
if(R.isMethod($field5167)) {
$ans5162 = $field5167.full_meth(ED5,anf_arg5091,args5092,(2));
} else {
if(!(R.isFunction($field5167))) {
R.ffi.throwNonFunApp(L[2096],$field5167);
}
$ans5162 = $field5167.app(anf_arg5091,args5092,(2));
}
break;
case 4: var anf_arg5098 = $ans5162;
$step5160 = 5;
$al5163 = L[2097];
$field5168 = R.getColonFieldLoc(ED5,"text",L[2097]);
if(R.isMethod($field5168)) {
$ans5162 = $field5168.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field5168))) {
R.ffi.throwNonFunApp(L[2097],$field5168);
}
$ans5162 = $field5168.app((":"));
}
break;
case 5: var anf_arg5099 = $ans5162;
$step5160 = 6;
$al5163 = L[2091];
$field5169 = R.getColonFieldLoc(anf_method_obj5095,"make5",L[2091]);
if(R.isMethod($field5169)) {
$ans5162 = $field5169.full_meth(anf_method_obj5095,anf_arg5096,applicant5084,anf_arg5097,anf_arg5098,anf_arg5099);
} else {
if(!(R.isFunction($field5169))) {
R.ffi.throwNonFunApp(L[2091],$field5169);
}
$ans5162 = $field5169.app(anf_arg5096,applicant5084,anf_arg5097,anf_arg5098,anf_arg5099);
}
break;
case 6: var anf_arg5104 = $ans5162;
$step5160 = 7;
$al5163 = L[2098];
$field5170 = R.getColonFieldLoc(ED5,"cmcode",L[2098]);
if(R.isMethod($field5170)) {
$ans5162 = $field5170.full_meth(ED5,fun$def$snippet$loc5101);
} else {
if(!(R.isFunction($field5170))) {
R.ffi.throwNonFunApp(L[2098],$field5170);
}
$ans5162 = $field5170.app(fun$def$snippet$loc5101);
}
break;
case 7: var anf_arg5105 = $ans5162;
$step5160 = 8;
$al5163 = L[2090];
$field5171 = R.getColonFieldLoc(anf_method_obj5103,"make2",L[2090]);
if(R.isMethod($field5171)) {
$ans5162 = $field5171.full_meth(anf_method_obj5103,anf_arg5104,anf_arg5105);
} else {
if(!(R.isFunction($field5171))) {
R.ffi.throwNonFunApp(L[2090],$field5171);
}
$ans5162 = $field5171.app(anf_arg5104,anf_arg5105);
}
break;
case 8: ++R.GAS;
return $ans5162;
default: throw "No case numbered " + $step5160 + " in $temp_lam5161";
}
}
} catch($e5172) {
if(R.isCont($e5172) && ($step5160 !== 8)) {
$e5172.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5163,$temp_lam5161,$step5160,[applicant5084],[anf_method_obj5103,anf_method_obj5095,anf_arg5096,anf_arg5097,anf_arg5098,anf_arg5104]);
}
if(R.isPyretException($e5172)) {
$e5172.pyretStack.push($al5163);
}
throw $e5172;
}
};
var anf_arg5109 = R.makeFunction($temp_lam5161,"");
$step5111 = 29;
$al5113 = L[2100];
if(!(R.isFunction(helper5108))) {
R.ffi.throwNonFunApp($al5113,helper5108);
}
$ans5112 = helper5108.app(anf_arg5109);
break;
case 29: ++R.GAS;
return $ans5112;
default: throw "No case numbered " + $step5111 + " in $temp_branch5110";
}
}
} catch($e5173) {
if(R.isCont($e5173) && ($step5111 !== 29)) {
$e5173.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5113,$temp_branch5110,$step5111,[ast4925],[cases4926,l4991,b4990,anf_tuple_fields4994,l5012,b5011,anf_tuple_fields5015,l5033,b5032,anf_tuple_fields5036,tup5081]);
}
if(R.isPyretException($e5173)) {
$e5173.pyretStack.push($al5113);
}
throw $e5173;
}
};
$ans4646 = cases4924.$app_fields($temp_branch5110,[false]);
break;
case 7: if(cases4924.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[2116],false,L[2103]);
}
var $temp_lam5175 = function($applicant5176) {
var $step5174 = 0;
var $ans5177 = D;
var $al5178 = L[2114];
try {
if(R.isActivationRecord($applicant5176)) {
$step5174 = $applicant5176.step;
$al5178 = $applicant5176.from;
$ans5177 = $applicant5176.ans;
applicant5176 = $applicant5176.args[0];
anf_method_obj5192 = $applicant5176.vars[0];
anf_method_obj5184 = $applicant5176.vars[1];
anf_arg5185 = $applicant5176.vars[2];
anf_arg5186 = $applicant5176.vars[3];
anf_arg5187 = $applicant5176.vars[4];
anf_arg5193 = $applicant5176.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2114],1,$t);
}
var applicant5176 = $applicant5176;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5174) {
case 0: $al5178 = L[2105];
var anf_method_obj5192 = G(ED5,"sequence",L[2105]);
$al5178 = L[2106];
var anf_method_obj5184 = G(ED5,"para",L[2106]);
$step5174 = 1;
$al5178 = L[2107];
$field5179 = R.getColonFieldLoc(ED5,"text",L[2107]);
if(R.isMethod($field5179)) {
$ans5177 = $field5179.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field5179))) {
R.ffi.throwNonFunApp(L[2107],$field5179);
}
$ans5177 = $field5179.app(("The "));
}
break;
case 1: var anf_arg5185 = $ans5177;
$step5174 = 2;
$al5178 = L[2108];
$field5180 = R.getColonFieldLoc(ED5,"text",L[2108]);
if(R.isMethod($field5180)) {
$ans5177 = $field5180.full_meth(ED5,(" was a function defined accepting "));
} else {
if(!(R.isFunction($field5180))) {
R.ffi.throwNonFunApp(L[2108],$field5180);
}
$ans5177 = $field5180.app((" was a function defined accepting "));
}
break;
case 2: var anf_arg5186 = $ans5177;
$al5178 = L[2109];
var anf_arg5181 = G(self4642,"fun-def-arity",L[2109]);
$step5174 = 3;
$al5178 = L[2110];
$field5182 = R.getColonFieldLoc(ED5,"ed-args",L[2110]);
if(R.isMethod($field5182)) {
$ans5177 = $field5182.full_meth(ED5,anf_arg5181);
} else {
if(!(R.isFunction($field5182))) {
R.ffi.throwNonFunApp(L[2110],$field5182);
}
$ans5177 = $field5182.app(anf_arg5181);
}
break;
case 3: var anf_arg5187 = $ans5177;
$step5174 = 4;
$al5178 = L[2111];
$field5183 = R.getColonFieldLoc(ED5,"text",L[2111]);
if(R.isMethod($field5183)) {
$ans5177 = $field5183.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field5183))) {
R.ffi.throwNonFunApp(L[2111],$field5183);
}
$ans5177 = $field5183.app((":"));
}
break;
case 4: var anf_arg5188 = $ans5177;
$step5174 = 5;
$al5178 = L[2106];
$field5189 = R.getColonFieldLoc(anf_method_obj5184,"make5",L[2106]);
if(R.isMethod($field5189)) {
$ans5177 = $field5189.full_meth(anf_method_obj5184,anf_arg5185,applicant5176,anf_arg5186,anf_arg5187,anf_arg5188);
} else {
if(!(R.isFunction($field5189))) {
R.ffi.throwNonFunApp(L[2106],$field5189);
}
$ans5177 = $field5189.app(anf_arg5185,applicant5176,anf_arg5186,anf_arg5187,anf_arg5188);
}
break;
case 5: var anf_arg5193 = $ans5177;
$al5178 = L[2112];
var anf_arg5190 = G(self4642,"fun-def-loc",L[2112]);
$step5174 = 6;
$al5178 = L[2113];
$field5191 = R.getColonFieldLoc(ED5,"cmcode",L[2113]);
if(R.isMethod($field5191)) {
$ans5177 = $field5191.full_meth(ED5,anf_arg5190);
} else {
if(!(R.isFunction($field5191))) {
R.ffi.throwNonFunApp(L[2113],$field5191);
}
$ans5177 = $field5191.app(anf_arg5190);
}
break;
case 6: var anf_arg5194 = $ans5177;
$step5174 = 7;
$al5178 = L[2105];
$field5195 = R.getColonFieldLoc(anf_method_obj5192,"make2",L[2105]);
if(R.isMethod($field5195)) {
$ans5177 = $field5195.full_meth(anf_method_obj5192,anf_arg5193,anf_arg5194);
} else {
if(!(R.isFunction($field5195))) {
R.ffi.throwNonFunApp(L[2105],$field5195);
}
$ans5177 = $field5195.app(anf_arg5193,anf_arg5194);
}
break;
case 7: ++R.GAS;
return $ans5177;
default: throw "No case numbered " + $step5174 + " in $temp_lam5175";
}
}
} catch($e5196) {
if(R.isCont($e5196) && ($step5174 !== 7)) {
$e5196.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5178,$temp_lam5175,$step5174,[applicant5176],[anf_method_obj5192,anf_method_obj5184,anf_arg5185,anf_arg5186,anf_arg5187,anf_arg5193]);
}
if(R.isPyretException($e5196)) {
$e5196.pyretStack.push($al5178);
}
throw $e5196;
}
};
var anf_arg5197 = R.makeFunction($temp_lam5175,"");
$step4640 = 10;
$al4647 = L[2115];
if(!(R.isFunction(helper5108))) {
R.ffi.throwNonFunApp($al4647,helper5108);
}
$ans4646 = helper5108.app(anf_arg5197);
break;
case 8: $step4640 = 10;
$al4647 = L[2103];
$ans4646 = R.throwNoCasesMatched(L[2103],cases4924);
break;
case 9: var $temp_lam5200 = function($applicant5201) {
var $step5199 = 0;
var $ans5202 = D;
var $al5203 = L[2129];
try {
if(R.isActivationRecord($applicant5201)) {
$step5199 = $applicant5201.step;
$al5203 = $applicant5201.from;
$ans5202 = $applicant5201.ans;
applicant5201 = $applicant5201.args[0];
anf_method_obj5212 = $applicant5201.vars[0];
anf_array5213 = $applicant5201.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2129],1,$t);
}
var applicant5201 = $applicant5201;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5199) {
case 0: $al5203 = L[2119];
var anf_method_obj5212 = G(ED5,"para",L[2119]);
$al5203 = L[2120];
var anf_array5213 = R.makeArrayN((7));
$step5199 = 1;
$al5203 = L[2121];
$field5204 = R.getColonFieldLoc(ED5,"text",L[2121]);
if(R.isMethod($field5204)) {
$ans5202 = $field5204.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field5204))) {
R.ffi.throwNonFunApp(L[2121],$field5204);
}
$ans5202 = $field5204.app(("The "));
}
break;
case 1: anf_array5213[0] = $ans5202;
anf_array5213[1] = applicant5201;
$step5199 = 2;
$al5203 = L[2122];
$field5205 = R.getColonFieldLoc(ED5,"text",L[2122]);
if(R.isMethod($field5205)) {
$ans5202 = $field5205.full_meth(ED5,(" was a function defined in "));
} else {
if(!(R.isFunction($field5205))) {
R.ffi.throwNonFunApp(L[2122],$field5205);
}
$ans5202 = $field5205.app((" was a function defined in "));
}
break;
case 2: anf_array5213[2] = $ans5202;
$al5203 = L[2123];
var anf_arg5206 = G(self4642,"fun-def-loc",L[2123]);
$step5199 = 3;
$al5203 = L[2124];
$field5207 = R.getColonFieldLoc(ED5,"loc",L[2124]);
if(R.isMethod($field5207)) {
$ans5202 = $field5207.full_meth(ED5,anf_arg5206);
} else {
if(!(R.isFunction($field5207))) {
R.ffi.throwNonFunApp(L[2124],$field5207);
}
$ans5202 = $field5207.app(anf_arg5206);
}
break;
case 3: anf_array5213[3] = $ans5202;
$step5199 = 4;
$al5203 = L[2125];
$field5208 = R.getColonFieldLoc(ED5,"text",L[2125]);
if(R.isMethod($field5208)) {
$ans5202 = $field5208.full_meth(ED5,(" accepting "));
} else {
if(!(R.isFunction($field5208))) {
R.ffi.throwNonFunApp(L[2125],$field5208);
}
$ans5202 = $field5208.app((" accepting "));
}
break;
case 4: anf_array5213[4] = $ans5202;
$al5203 = L[2126];
var anf_arg5209 = G(self4642,"fun-def-arity",L[2126]);
$step5199 = 5;
$al5203 = L[2127];
$field5210 = R.getColonFieldLoc(ED5,"ed-args",L[2127]);
if(R.isMethod($field5210)) {
$ans5202 = $field5210.full_meth(ED5,anf_arg5209);
} else {
if(!(R.isFunction($field5210))) {
R.ffi.throwNonFunApp(L[2127],$field5210);
}
$ans5202 = $field5210.app(anf_arg5209);
}
break;
case 5: anf_array5213[5] = $ans5202;
$step5199 = 6;
$al5203 = L[2128];
$field5211 = R.getColonFieldLoc(ED5,"text",L[2128]);
if(R.isMethod($field5211)) {
$ans5202 = $field5211.full_meth(ED5,("."));
} else {
if(!(R.isFunction($field5211))) {
R.ffi.throwNonFunApp(L[2128],$field5211);
}
$ans5202 = $field5211.app(("."));
}
break;
case 6: anf_array5213[6] = $ans5202;
$step5199 = 7;
$al5203 = L[2119];
$field5214 = R.getColonFieldLoc(anf_method_obj5212,"make",L[2119]);
if(R.isMethod($field5214)) {
$ans5202 = $field5214.full_meth(anf_method_obj5212,anf_array5213);
} else {
if(!(R.isFunction($field5214))) {
R.ffi.throwNonFunApp(L[2119],$field5214);
}
$ans5202 = $field5214.app(anf_array5213);
}
break;
case 7: ++R.GAS;
return $ans5202;
default: throw "No case numbered " + $step5199 + " in $temp_lam5200";
}
}
} catch($e5215) {
if(R.isCont($e5215) && ($step5199 !== 7)) {
$e5215.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5203,$temp_lam5200,$step5199,[applicant5201],[anf_method_obj5212,anf_array5213]);
}
if(R.isPyretException($e5215)) {
$e5215.pyretStack.push($al5203);
}
throw $e5215;
}
};
var anf_arg5216 = R.makeFunction($temp_lam5200,"");
$step4640 = 10;
$al4647 = L[2130];
if(!(R.isFunction(helper5108))) {
R.ffi.throwNonFunApp($al4647,helper5108);
}
$ans4646 = helper5108.app(anf_arg5216);
break;
case 10: ++R.GAS;
return $ans4646;
default: throw "No case numbered " + $step4640 + " in $temp_full4641";
}
}
} catch($e5218) {
if(R.isCont($e5218) && ($step4640 !== 10)) {
$e5218.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al4647,$temp_full4641,$step4640,[self4642,maybe$stack$loc4643,src$available4644,maybe$ast4645],[helper5108,is$underscore4922,cases4924]);
}
if(R.isPyretException($e5218)) {
$e5218.pyretStack.push($al4647);
}
throw $e5218;
}
};
var anf_variant_member6399 = R.makeMethod3($temp_full4641,"render-fancy-reason");
var $temp_full5220 = function($self5221) {
var $step5219 = 0;
var $ans5222 = D;
var $al5223 = L[2195];
try {
if(R.isActivationRecord($self5221)) {
$step5219 = $self5221.step;
$al5223 = $self5221.from;
$ans5222 = $self5221.ans;
self5221 = $self5221.args[0];
num$args5226 = $self5221.vars[0];
this$str5254 = $self5221.vars[1];
arg$str5258 = $self5221.vars[2];
exp$arg$str5245 = $self5221.vars[3];
anf_arg5335 = $self5221.vars[4];
anf_arg5336 = $self5221.vars[5];
anf_method_obj5329 = $self5221.vars[6];
anf_method_obj5311 = $self5221.vars[7];
anf_arg5312 = $self5221.vars[8];
anf_arg5313 = $self5221.vars[9];
anf_arg5330 = $self5221.vars[10];
anf_arg5331 = $self5221.vars[11];
anf_method_obj5322 = $self5221.vars[12];
anf_arg5323 = $self5221.vars[13];
anf_arg5324 = $self5221.vars[14];
anf_arg5332 = $self5221.vars[15];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2195],1,$t);
}
var self5221 = $self5221;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5219) {
case 0: $al5223 = L[2132];
var anf_method_obj5224 = G(self5221,"fun-app-args",L[2132]);
$step5219 = 1;
$al5223 = L[2133];
$field5225 = R.getColonFieldLoc(anf_method_obj5224,"length",L[2133]);
if(R.isMethod($field5225)) {
$ans5222 = $field5225.full_meth(anf_method_obj5224);
} else {
if(!(R.isFunction($field5225))) {
R.ffi.throwNonFunApp(L[2133],$field5225);
}
$ans5222 = $field5225.app();
}
break;
case 1: var num$args5226 = $ans5222;
$step5219 = 2;
$al5223 = L[2134];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al5223,equal$always2);
}
$ans5222 = equal$always2.app(num$args5226,(1));
break;
case 2: var anf_arg5227 = $ans5222;
$al5223 = L[2134];
var anf_if5342 = R.checkWrapBoolean(anf_arg5227);
$step5219 = R.isPyretTrue(anf_if5342)?3:4;
break;
case 3: $step5219 = 5;
$ans5222 = ("this ");
break;
case 4: $step5219 = 5;
$ans5222 = ("these ");
break;
case 5: var this$str5254 = $ans5222;
$step5219 = 6;
$al5223 = L[2135];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al5223,equal$always2);
}
$ans5222 = equal$always2.app(num$args5226,(1));
break;
case 6: var anf_arg5228 = $ans5222;
$al5223 = L[2135];
var anf_if5341 = R.checkWrapBoolean(anf_arg5228);
$step5219 = R.isPyretTrue(anf_if5341)?7:8;
break;
case 7: $step5219 = 9;
$ans5222 = (" argument:");
break;
case 8: $step5219 = 9;
$ans5222 = (" arguments:");
break;
case 9: var arg$str5258 = $ans5222;
$al5223 = L[2136];
var anf_arg5229 = G(self5221,"fun-def-arity",L[2136]);
$step5219 = 10;
$al5223 = L[2137];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al5223,equal$always2);
}
$ans5222 = equal$always2.app(anf_arg5229,(1));
break;
case 10: var anf_arg5230 = $ans5222;
$al5223 = L[2137];
var anf_if5340 = R.checkWrapBoolean(anf_arg5230);
$step5219 = R.isPyretTrue(anf_if5340)?11:12;
break;
case 11: $step5219 = 13;
$ans5222 = (" argument");
break;
case 12: $step5219 = 13;
$ans5222 = (" arguments");
break;
case 13: var exp$arg$str5245 = $ans5222;
$al5223 = L[2138];
var anf_method_obj5231 = G(self5221,"fun-def-loc",L[2138]);
$step5219 = 14;
$al5223 = L[2139];
$field5232 = R.getColonFieldLoc(anf_method_obj5231,"is-builtin",L[2139]);
if(R.isMethod($field5232)) {
$ans5222 = $field5232.full_meth(anf_method_obj5231);
} else {
if(!(R.isFunction($field5232))) {
R.ffi.throwNonFunApp(L[2139],$field5232);
}
$ans5222 = $field5232.app();
}
break;
case 14: var anf_arg5233 = $ans5222;
$al5223 = L[2139];
var anf_if5339 = R.checkWrapBoolean(anf_arg5233);
$step5219 = R.isPyretTrue(anf_if5339)?15:16;
break;
case 15: $step5219 = 17;
$ans5222 = (0);
break;
case 16: $step5219 = 17;
$ans5222 = (1);
break;
case 17: var anf_arg5335 = $ans5222;
var $temp_lam5235 = function($caller$loc5236) {
var $step5234 = 0;
var $ans5237 = D;
var $al5238 = L[2177];
try {
if(R.isActivationRecord($caller$loc5236)) {
$step5234 = $caller$loc5236.step;
$al5238 = $caller$loc5236.from;
$ans5237 = $caller$loc5236.ans;
caller$loc5236 = $caller$loc5236.args[0];
anf_method_obj5267 = $caller$loc5236.vars[0];
anf_method_obj5248 = $caller$loc5236.vars[1];
anf_arg5249 = $caller$loc5236.vars[2];
anf_arg5250 = $caller$loc5236.vars[3];
anf_arg5268 = $caller$loc5236.vars[4];
anf_arg5269 = $caller$loc5236.vars[5];
anf_method_obj5260 = $caller$loc5236.vars[6];
anf_arg5261 = $caller$loc5236.vars[7];
anf_arg5262 = $caller$loc5236.vars[8];
anf_arg5270 = $caller$loc5236.vars[9];
anf_method_obj5301 = $caller$loc5236.vars[10];
anf_array5302 = $caller$loc5236.vars[11];
anf_method_obj5278 = $caller$loc5236.vars[12];
anf_arg5279 = $caller$loc5236.vars[13];
anf_arg5280 = $caller$loc5236.vars[14];
anf_method_obj5286 = $caller$loc5236.vars[15];
anf_method_obj5294 = $caller$loc5236.vars[16];
anf_arg5295 = $caller$loc5236.vars[17];
anf_arg5296 = $caller$loc5236.vars[18];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2177],1,$t);
}
var caller$loc5236 = $caller$loc5236;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5234) {
case 0: $al5238 = L[2140];
var anf_method_obj5239 = G(self5221,"fun-def-loc",L[2140]);
$step5234 = 1;
$al5238 = L[2141];
$field5240 = R.getColonFieldLoc(anf_method_obj5239,"is-builtin",L[2141]);
if(R.isMethod($field5240)) {
$ans5237 = $field5240.full_meth(anf_method_obj5239);
} else {
if(!(R.isFunction($field5240))) {
R.ffi.throwNonFunApp(L[2141],$field5240);
}
$ans5237 = $field5240.app();
}
break;
case 1: var anf_arg5241 = $ans5237;
$al5238 = L[2141];
var anf_if5304 = R.checkWrapBoolean(anf_arg5241);
$step5234 = R.isPyretTrue(anf_if5304)?2:15;
break;
case 2: $al5238 = L[2142];
var anf_method_obj5267 = G(ED5,"error",L[2142]);
$al5238 = L[2143];
var anf_method_obj5248 = G(ED5,"para",L[2143]);
$step5234 = 3;
$al5238 = L[2144];
$field5242 = R.getColonFieldLoc(ED5,"text",L[2144]);
if(R.isMethod($field5242)) {
$ans5237 = $field5242.full_meth(ED5,("Expected to get "));
} else {
if(!(R.isFunction($field5242))) {
R.ffi.throwNonFunApp(L[2144],$field5242);
}
$ans5237 = $field5242.app(("Expected to get "));
}
break;
case 3: var anf_arg5249 = $ans5237;
$al5238 = L[2145];
var anf_arg5243 = G(self5221,"fun-def-arity",L[2145]);
$step5234 = 4;
$al5238 = L[2146];
$field5244 = R.getColonFieldLoc(ED5,"embed",L[2146]);
if(R.isMethod($field5244)) {
$ans5237 = $field5244.full_meth(ED5,anf_arg5243);
} else {
if(!(R.isFunction($field5244))) {
R.ffi.throwNonFunApp(L[2146],$field5244);
}
$ans5237 = $field5244.app(anf_arg5243);
}
break;
case 4: var anf_arg5250 = $ans5237;
$step5234 = 5;
$al5238 = L[2156];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al5238,_plus1);
}
$ans5237 = _plus1.app(exp$arg$str5245,(" at"));
break;
case 5: var anf_arg5246 = $ans5237;
$step5234 = 6;
$al5238 = L[2147];
$field5247 = R.getColonFieldLoc(ED5,"text",L[2147]);
if(R.isMethod($field5247)) {
$ans5237 = $field5247.full_meth(ED5,anf_arg5246);
} else {
if(!(R.isFunction($field5247))) {
R.ffi.throwNonFunApp(L[2147],$field5247);
}
$ans5237 = $field5247.app(anf_arg5246);
}
break;
case 6: var anf_arg5251 = $ans5237;
$step5234 = 7;
$al5238 = L[2143];
$field5252 = R.getColonFieldLoc(anf_method_obj5248,"make3",L[2143]);
if(R.isMethod($field5252)) {
$ans5237 = $field5252.full_meth(anf_method_obj5248,anf_arg5249,anf_arg5250,anf_arg5251);
} else {
if(!(R.isFunction($field5252))) {
R.ffi.throwNonFunApp(L[2143],$field5252);
}
$ans5237 = $field5252.app(anf_arg5249,anf_arg5250,anf_arg5251);
}
break;
case 7: var anf_arg5268 = $ans5237;
var anf_fun5253 = draw$and$highlight38.$var;
$step5234 = 8;
$al5238 = L[2155];
if(!(R.isFunction(anf_fun5253))) {
R.ffi.throwNonFunApp($al5238,anf_fun5253);
}
$ans5237 = anf_fun5253.app(caller$loc5236);
break;
case 8: var anf_arg5269 = $ans5237;
$al5238 = L[2148];
var anf_method_obj5260 = G(ED5,"para",L[2148]);
$step5234 = 9;
$al5238 = L[2154];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al5238,_plus1);
}
$ans5237 = _plus1.app((" but got "),this$str5254);
break;
case 9: var anf_arg5255 = $ans5237;
$step5234 = 10;
$al5238 = L[2149];
$field5256 = R.getColonFieldLoc(ED5,"text",L[2149]);
if(R.isMethod($field5256)) {
$ans5237 = $field5256.full_meth(ED5,anf_arg5255);
} else {
if(!(R.isFunction($field5256))) {
R.ffi.throwNonFunApp(L[2149],$field5256);
}
$ans5237 = $field5256.app(anf_arg5255);
}
break;
case 10: var anf_arg5261 = $ans5237;
$step5234 = 11;
$al5238 = L[2150];
$field5257 = R.getColonFieldLoc(ED5,"embed",L[2150]);
if(R.isMethod($field5257)) {
$ans5237 = $field5257.full_meth(ED5,num$args5226);
} else {
if(!(R.isFunction($field5257))) {
R.ffi.throwNonFunApp(L[2150],$field5257);
}
$ans5237 = $field5257.app(num$args5226);
}
break;
case 11: var anf_arg5262 = $ans5237;
$step5234 = 12;
$al5238 = L[2151];
$field5259 = R.getColonFieldLoc(ED5,"text",L[2151]);
if(R.isMethod($field5259)) {
$ans5237 = $field5259.full_meth(ED5,arg$str5258);
} else {
if(!(R.isFunction($field5259))) {
R.ffi.throwNonFunApp(L[2151],$field5259);
}
$ans5237 = $field5259.app(arg$str5258);
}
break;
case 12: var anf_arg5263 = $ans5237;
$step5234 = 13;
$al5238 = L[2148];
$field5264 = R.getColonFieldLoc(anf_method_obj5260,"make3",L[2148]);
if(R.isMethod($field5264)) {
$ans5237 = $field5264.full_meth(anf_method_obj5260,anf_arg5261,anf_arg5262,anf_arg5263);
} else {
if(!(R.isFunction($field5264))) {
R.ffi.throwNonFunApp(L[2148],$field5264);
}
$ans5237 = $field5264.app(anf_arg5261,anf_arg5262,anf_arg5263);
}
break;
case 13: var anf_arg5270 = $ans5237;
var anf_fun5265 = vert$list$values62.$var;
$al5238 = L[2152];
var anf_arg5266 = G(self5221,"fun-app-args",L[2152]);
$step5234 = 14;
$al5238 = L[2153];
if(!(R.isFunction(anf_fun5265))) {
R.ffi.throwNonFunApp($al5238,anf_fun5265);
}
$ans5237 = anf_fun5265.app(anf_arg5266);
break;
case 14: var anf_arg5271 = $ans5237;
$step5234 = 31;
$al5238 = L[2142];
$field5272 = R.getColonFieldLoc(anf_method_obj5267,"make4",L[2142]);
if(R.isMethod($field5272)) {
$ans5237 = $field5272.full_meth(anf_method_obj5267,anf_arg5268,anf_arg5269,anf_arg5270,anf_arg5271);
} else {
if(!(R.isFunction($field5272))) {
R.ffi.throwNonFunApp(L[2142],$field5272);
}
$ans5237 = $field5272.app(anf_arg5268,anf_arg5269,anf_arg5270,anf_arg5271);
}
break;
case 15: $al5238 = L[2157];
var anf_method_obj5301 = G(ED5,"error",L[2157]);
$al5238 = L[2158];
var anf_array5302 = R.makeArrayN((6));
$al5238 = L[2159];
var anf_method_obj5278 = G(ED5,"para",L[2159]);
$step5234 = 16;
$al5238 = L[2160];
$field5273 = R.getColonFieldLoc(ED5,"text",L[2160]);
if(R.isMethod($field5273)) {
$ans5237 = $field5273.full_meth(ED5,("Expected to get "));
} else {
if(!(R.isFunction($field5273))) {
R.ffi.throwNonFunApp(L[2160],$field5273);
}
$ans5237 = $field5273.app(("Expected to get "));
}
break;
case 16: var anf_arg5279 = $ans5237;
$al5238 = L[2161];
var anf_arg5274 = G(self5221,"fun-def-arity",L[2161]);
$step5234 = 17;
$al5238 = L[2162];
$field5275 = R.getColonFieldLoc(ED5,"embed",L[2162]);
if(R.isMethod($field5275)) {
$ans5237 = $field5275.full_meth(ED5,anf_arg5274);
} else {
if(!(R.isFunction($field5275))) {
R.ffi.throwNonFunApp(L[2162],$field5275);
}
$ans5237 = $field5275.app(anf_arg5274);
}
break;
case 17: var anf_arg5280 = $ans5237;
$step5234 = 18;
$al5238 = L[2176];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al5238,_plus1);
}
$ans5237 = _plus1.app(exp$arg$str5245,(" when calling the function at "));
break;
case 18: var anf_arg5276 = $ans5237;
$step5234 = 19;
$al5238 = L[2163];
$field5277 = R.getColonFieldLoc(ED5,"text",L[2163]);
if(R.isMethod($field5277)) {
$ans5237 = $field5277.full_meth(ED5,anf_arg5276);
} else {
if(!(R.isFunction($field5277))) {
R.ffi.throwNonFunApp(L[2163],$field5277);
}
$ans5237 = $field5277.app(anf_arg5276);
}
break;
case 19: var anf_arg5281 = $ans5237;
$step5234 = 20;
$al5238 = L[2159];
$field5282 = R.getColonFieldLoc(anf_method_obj5278,"make3",L[2159]);
if(R.isMethod($field5282)) {
$ans5237 = $field5282.full_meth(anf_method_obj5278,anf_arg5279,anf_arg5280,anf_arg5281);
} else {
if(!(R.isFunction($field5282))) {
R.ffi.throwNonFunApp(L[2159],$field5282);
}
$ans5237 = $field5282.app(anf_arg5279,anf_arg5280,anf_arg5281);
}
break;
case 20: anf_array5302[0] = $ans5237;
var anf_fun5283 = draw$and$highlight38.$var;
$al5238 = L[2164];
var anf_arg5284 = G(self5221,"fun-def-loc",L[2164]);
$step5234 = 21;
$al5238 = L[2175];
if(!(R.isFunction(anf_fun5283))) {
R.ffi.throwNonFunApp($al5238,anf_fun5283);
}
$ans5237 = anf_fun5283.app(anf_arg5284);
break;
case 21: anf_array5302[1] = $ans5237;
$al5238 = L[2165];
var anf_method_obj5286 = G(ED5,"para",L[2165]);
$step5234 = 22;
$al5238 = L[2166];
$field5285 = R.getColonFieldLoc(ED5,"text",L[2166]);
if(R.isMethod($field5285)) {
$ans5237 = $field5285.full_meth(ED5,("from"));
} else {
if(!(R.isFunction($field5285))) {
R.ffi.throwNonFunApp(L[2166],$field5285);
}
$ans5237 = $field5285.app(("from"));
}
break;
case 22: var anf_arg5287 = $ans5237;
$step5234 = 23;
$al5238 = L[2165];
$field5288 = R.getColonFieldLoc(anf_method_obj5286,"make1",L[2165]);
if(R.isMethod($field5288)) {
$ans5237 = $field5288.full_meth(anf_method_obj5286,anf_arg5287);
} else {
if(!(R.isFunction($field5288))) {
R.ffi.throwNonFunApp(L[2165],$field5288);
}
$ans5237 = $field5288.app(anf_arg5287);
}
break;
case 23: anf_array5302[2] = $ans5237;
var anf_fun5289 = draw$and$highlight38.$var;
$step5234 = 24;
$al5238 = L[2174];
if(!(R.isFunction(anf_fun5289))) {
R.ffi.throwNonFunApp($al5238,anf_fun5289);
}
$ans5237 = anf_fun5289.app(caller$loc5236);
break;
case 24: anf_array5302[3] = $ans5237;
$al5238 = L[2167];
var anf_method_obj5294 = G(ED5,"para",L[2167]);
$step5234 = 25;
$al5238 = L[2173];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al5238,_plus1);
}
$ans5237 = _plus1.app((" but got "),this$str5254);
break;
case 25: var anf_arg5290 = $ans5237;
$step5234 = 26;
$al5238 = L[2168];
$field5291 = R.getColonFieldLoc(ED5,"text",L[2168]);
if(R.isMethod($field5291)) {
$ans5237 = $field5291.full_meth(ED5,anf_arg5290);
} else {
if(!(R.isFunction($field5291))) {
R.ffi.throwNonFunApp(L[2168],$field5291);
}
$ans5237 = $field5291.app(anf_arg5290);
}
break;
case 26: var anf_arg5295 = $ans5237;
$step5234 = 27;
$al5238 = L[2169];
$field5292 = R.getColonFieldLoc(ED5,"embed",L[2169]);
if(R.isMethod($field5292)) {
$ans5237 = $field5292.full_meth(ED5,num$args5226);
} else {
if(!(R.isFunction($field5292))) {
R.ffi.throwNonFunApp(L[2169],$field5292);
}
$ans5237 = $field5292.app(num$args5226);
}
break;
case 27: var anf_arg5296 = $ans5237;
$step5234 = 28;
$al5238 = L[2170];
$field5293 = R.getColonFieldLoc(ED5,"text",L[2170]);
if(R.isMethod($field5293)) {
$ans5237 = $field5293.full_meth(ED5,arg$str5258);
} else {
if(!(R.isFunction($field5293))) {
R.ffi.throwNonFunApp(L[2170],$field5293);
}
$ans5237 = $field5293.app(arg$str5258);
}
break;
case 28: var anf_arg5297 = $ans5237;
$step5234 = 29;
$al5238 = L[2167];
$field5298 = R.getColonFieldLoc(anf_method_obj5294,"make3",L[2167]);
if(R.isMethod($field5298)) {
$ans5237 = $field5298.full_meth(anf_method_obj5294,anf_arg5295,anf_arg5296,anf_arg5297);
} else {
if(!(R.isFunction($field5298))) {
R.ffi.throwNonFunApp(L[2167],$field5298);
}
$ans5237 = $field5298.app(anf_arg5295,anf_arg5296,anf_arg5297);
}
break;
case 29: anf_array5302[4] = $ans5237;
var anf_fun5299 = vert$list$values62.$var;
$al5238 = L[2171];
var anf_arg5300 = G(self5221,"fun-app-args",L[2171]);
$step5234 = 30;
$al5238 = L[2172];
if(!(R.isFunction(anf_fun5299))) {
R.ffi.throwNonFunApp($al5238,anf_fun5299);
}
$ans5237 = anf_fun5299.app(anf_arg5300);
break;
case 30: anf_array5302[5] = $ans5237;
$step5234 = 31;
$al5238 = L[2157];
$field5303 = R.getColonFieldLoc(anf_method_obj5301,"make",L[2157]);
if(R.isMethod($field5303)) {
$ans5237 = $field5303.full_meth(anf_method_obj5301,anf_array5302);
} else {
if(!(R.isFunction($field5303))) {
R.ffi.throwNonFunApp(L[2157],$field5303);
}
$ans5237 = $field5303.app(anf_array5302);
}
break;
case 31: ++R.GAS;
return $ans5237;
default: throw "No case numbered " + $step5234 + " in $temp_lam5235";
}
}
} catch($e5305) {
if(R.isCont($e5305) && ($step5234 !== 31)) {
$e5305.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5238,$temp_lam5235,$step5234,[caller$loc5236],[anf_method_obj5267,anf_method_obj5248,anf_arg5249,anf_arg5250,anf_arg5268,anf_arg5269,anf_method_obj5260,anf_arg5261,anf_arg5262,anf_arg5270,anf_method_obj5301,anf_array5302,anf_method_obj5278,anf_arg5279,anf_arg5280,anf_method_obj5286,anf_method_obj5294,anf_arg5295,anf_arg5296]);
}
if(R.isPyretException($e5305)) {
$e5305.pyretStack.push($al5238);
}
throw $e5305;
}
};
var anf_arg5336 = R.makeFunction($temp_lam5235,"");
$al5223 = L[2178];
var anf_method_obj5329 = G(ED5,"error",L[2178]);
$al5223 = L[2179];
var anf_method_obj5311 = G(ED5,"para",L[2179]);
$step5219 = 18;
$al5223 = L[2180];
$field5306 = R.getColonFieldLoc(ED5,"text",L[2180]);
if(R.isMethod($field5306)) {
$ans5222 = $field5306.full_meth(ED5,("Expected to get "));
} else {
if(!(R.isFunction($field5306))) {
R.ffi.throwNonFunApp(L[2180],$field5306);
}
$ans5222 = $field5306.app(("Expected to get "));
}
break;
case 18: var anf_arg5312 = $ans5222;
$al5223 = L[2181];
var anf_arg5307 = G(self5221,"fun-def-arity",L[2181]);
$step5219 = 19;
$al5223 = L[2182];
$field5308 = R.getColonFieldLoc(ED5,"embed",L[2182]);
if(R.isMethod($field5308)) {
$ans5222 = $field5308.full_meth(ED5,anf_arg5307);
} else {
if(!(R.isFunction($field5308))) {
R.ffi.throwNonFunApp(L[2182],$field5308);
}
$ans5222 = $field5308.app(anf_arg5307);
}
break;
case 19: var anf_arg5313 = $ans5222;
$step5219 = 20;
$al5223 = L[2194];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al5223,_plus1);
}
$ans5222 = _plus1.app(exp$arg$str5245,(" at "));
break;
case 20: var anf_arg5309 = $ans5222;
$step5219 = 21;
$al5223 = L[2183];
$field5310 = R.getColonFieldLoc(ED5,"text",L[2183]);
if(R.isMethod($field5310)) {
$ans5222 = $field5310.full_meth(ED5,anf_arg5309);
} else {
if(!(R.isFunction($field5310))) {
R.ffi.throwNonFunApp(L[2183],$field5310);
}
$ans5222 = $field5310.app(anf_arg5309);
}
break;
case 21: var anf_arg5314 = $ans5222;
$step5219 = 22;
$al5223 = L[2179];
$field5315 = R.getColonFieldLoc(anf_method_obj5311,"make3",L[2179]);
if(R.isMethod($field5315)) {
$ans5222 = $field5315.full_meth(anf_method_obj5311,anf_arg5312,anf_arg5313,anf_arg5314);
} else {
if(!(R.isFunction($field5315))) {
R.ffi.throwNonFunApp(L[2179],$field5315);
}
$ans5222 = $field5315.app(anf_arg5312,anf_arg5313,anf_arg5314);
}
break;
case 22: var anf_arg5330 = $ans5222;
var anf_fun5316 = draw$and$highlight38.$var;
$al5223 = L[2184];
var anf_arg5317 = G(self5221,"fun-def-loc",L[2184]);
$step5219 = 23;
$al5223 = L[2193];
if(!(R.isFunction(anf_fun5316))) {
R.ffi.throwNonFunApp($al5223,anf_fun5316);
}
$ans5222 = anf_fun5316.app(anf_arg5317);
break;
case 23: var anf_arg5331 = $ans5222;
$al5223 = L[2185];
var anf_method_obj5322 = G(ED5,"para",L[2185]);
$step5219 = 24;
$al5223 = L[2192];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al5223,_plus1);
}
$ans5222 = _plus1.app((" but got "),this$str5254);
break;
case 24: var anf_arg5318 = $ans5222;
$step5219 = 25;
$al5223 = L[2186];
$field5319 = R.getColonFieldLoc(ED5,"text",L[2186]);
if(R.isMethod($field5319)) {
$ans5222 = $field5319.full_meth(ED5,anf_arg5318);
} else {
if(!(R.isFunction($field5319))) {
R.ffi.throwNonFunApp(L[2186],$field5319);
}
$ans5222 = $field5319.app(anf_arg5318);
}
break;
case 25: var anf_arg5323 = $ans5222;
$step5219 = 26;
$al5223 = L[2187];
$field5320 = R.getColonFieldLoc(ED5,"embed",L[2187]);
if(R.isMethod($field5320)) {
$ans5222 = $field5320.full_meth(ED5,num$args5226);
} else {
if(!(R.isFunction($field5320))) {
R.ffi.throwNonFunApp(L[2187],$field5320);
}
$ans5222 = $field5320.app(num$args5226);
}
break;
case 26: var anf_arg5324 = $ans5222;
$step5219 = 27;
$al5223 = L[2188];
$field5321 = R.getColonFieldLoc(ED5,"text",L[2188]);
if(R.isMethod($field5321)) {
$ans5222 = $field5321.full_meth(ED5,arg$str5258);
} else {
if(!(R.isFunction($field5321))) {
R.ffi.throwNonFunApp(L[2188],$field5321);
}
$ans5222 = $field5321.app(arg$str5258);
}
break;
case 27: var anf_arg5325 = $ans5222;
$step5219 = 28;
$al5223 = L[2185];
$field5326 = R.getColonFieldLoc(anf_method_obj5322,"make3",L[2185]);
if(R.isMethod($field5326)) {
$ans5222 = $field5326.full_meth(anf_method_obj5322,anf_arg5323,anf_arg5324,anf_arg5325);
} else {
if(!(R.isFunction($field5326))) {
R.ffi.throwNonFunApp(L[2185],$field5326);
}
$ans5222 = $field5326.app(anf_arg5323,anf_arg5324,anf_arg5325);
}
break;
case 28: var anf_arg5332 = $ans5222;
var anf_fun5327 = vert$list$values62.$var;
$al5223 = L[2189];
var anf_arg5328 = G(self5221,"fun-app-args",L[2189]);
$step5219 = 29;
$al5223 = L[2191];
if(!(R.isFunction(anf_fun5327))) {
R.ffi.throwNonFunApp($al5223,anf_fun5327);
}
$ans5222 = anf_fun5327.app(anf_arg5328);
break;
case 29: var anf_arg5333 = $ans5222;
$step5219 = 30;
$al5223 = L[2178];
$field5334 = R.getColonFieldLoc(anf_method_obj5329,"make4",L[2178]);
if(R.isMethod($field5334)) {
$ans5222 = $field5334.full_meth(anf_method_obj5329,anf_arg5330,anf_arg5331,anf_arg5332,anf_arg5333);
} else {
if(!(R.isFunction($field5334))) {
R.ffi.throwNonFunApp(L[2178],$field5334);
}
$ans5222 = $field5334.app(anf_arg5330,anf_arg5331,anf_arg5332,anf_arg5333);
}
break;
case 30: var anf_arg5337 = $ans5222;
$step5219 = 31;
$al5223 = L[2190];
$field5338 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[2190]);
if(R.isMethod($field5338)) {
$ans5222 = $field5338.full_meth(ED5,anf_arg5335,(false),anf_arg5336,anf_arg5337);
} else {
if(!(R.isFunction($field5338))) {
R.ffi.throwNonFunApp(L[2190],$field5338);
}
$ans5222 = $field5338.app(anf_arg5335,(false),anf_arg5336,anf_arg5337);
}
break;
case 31: ++R.GAS;
return $ans5222;
default: throw "No case numbered " + $step5219 + " in $temp_full5220";
}
}
} catch($e5343) {
if(R.isCont($e5343) && ($step5219 !== 31)) {
$e5343.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5223,$temp_full5220,$step5219,[self5221],[num$args5226,this$str5254,arg$str5258,exp$arg$str5245,anf_arg5335,anf_arg5336,anf_method_obj5329,anf_method_obj5311,anf_arg5312,anf_arg5313,anf_arg5330,anf_arg5331,anf_method_obj5322,anf_arg5323,anf_arg5324,anf_arg5332]);
}
if(R.isPyretException($e5343)) {
$e5343.pyretStack.push($al5223);
}
throw $e5343;
}
};
var anf_variant_member6400 = R.makeMethod0($temp_full5220,"render-reason");
var $temp_full5345 = function($self5346,$maybe$stack$loc5347,$src$available5348,$maybe$ast5349) {
var $step5344 = 0;
var $ans5350 = D;
var $al5351 = L[2248];
try {
if(R.isActivationRecord($self5346)) {
$step5344 = $self5346.step;
$al5351 = $self5346.from;
$ans5350 = $self5346.ans;
self5346 = $self5346.args[0];
maybe$stack$loc5347 = $self5346.args[1];
src$available5348 = $self5346.args[2];
maybe$ast5349 = $self5346.args[3];
anf_method_obj5363 = $self5346.vars[0];
anf_arg5364 = $self5346.vars[1];
anf_method_obj5358 = $self5346.vars[2];
anf_arg5365 = $self5346.vars[3];
cases5371 = $self5346.vars[4];
anf_method_obj5454 = $self5346.vars[5];
anf_arg5455 = $self5346.vars[6];
anf_method_obj5449 = $self5346.vars[7];
anf_arg5456 = $self5346.vars[8];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2248],4,$t);
}
var self5346 = $self5346;
var maybe$stack$loc5347 = $maybe$stack$loc5347;
var src$available5348 = $src$available5348;
var maybe$ast5349 = $maybe$ast5349;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5344) {
case 0: $al5351 = L[2196];
var anf_method_obj5352 = G(self5346,"loc",L[2196]);
$step5344 = 1;
$al5351 = L[2197];
$field5353 = R.getColonFieldLoc(anf_method_obj5352,"is-builtin",L[2197]);
if(R.isMethod($field5353)) {
$ans5350 = $field5353.full_meth(anf_method_obj5352);
} else {
if(!(R.isFunction($field5353))) {
R.ffi.throwNonFunApp(L[2197],$field5353);
}
$ans5350 = $field5353.app();
}
break;
case 1: var anf_arg5354 = $ans5350;
$al5351 = L[2197];
var anf_if5460 = R.checkWrapBoolean(anf_arg5354);
$step5344 = R.isPyretTrue(anf_if5460)?2:7;
break;
case 2: $al5351 = L[2198];
var anf_method_obj5363 = G(ED5,"error",L[2198]);
var anf_fun5355 = ed$simple$intro95.$var;
$al5351 = L[2199];
var anf_arg5356 = G(self5346,"loc",L[2199]);
$step5344 = 3;
$al5351 = L[2204];
if(!(R.isFunction(anf_fun5355))) {
R.ffi.throwNonFunApp($al5351,anf_fun5355);
}
$ans5350 = anf_fun5355.app(("function application expression"),anf_arg5356);
break;
case 3: var anf_arg5364 = $ans5350;
$al5351 = L[2200];
var anf_method_obj5358 = G(ED5,"para",L[2200]);
$step5344 = 4;
$al5351 = L[2201];
$field5357 = R.getColonFieldLoc(ED5,"text",L[2201]);
if(R.isMethod($field5357)) {
$ans5350 = $field5357.full_meth(ED5,("The left side was not a function value:"));
} else {
if(!(R.isFunction($field5357))) {
R.ffi.throwNonFunApp(L[2201],$field5357);
}
$ans5350 = $field5357.app(("The left side was not a function value:"));
}
break;
case 4: var anf_arg5359 = $ans5350;
$step5344 = 5;
$al5351 = L[2200];
$field5360 = R.getColonFieldLoc(anf_method_obj5358,"make1",L[2200]);
if(R.isMethod($field5360)) {
$ans5350 = $field5360.full_meth(anf_method_obj5358,anf_arg5359);
} else {
if(!(R.isFunction($field5360))) {
R.ffi.throwNonFunApp(L[2200],$field5360);
}
$ans5350 = $field5360.app(anf_arg5359);
}
break;
case 5: var anf_arg5365 = $ans5350;
$al5351 = L[2202];
var anf_arg5361 = G(self5346,"non-fun-val",L[2202]);
$step5344 = 6;
$al5351 = L[2203];
$field5362 = R.getColonFieldLoc(ED5,"embed",L[2203]);
if(R.isMethod($field5362)) {
$ans5350 = $field5362.full_meth(ED5,anf_arg5361);
} else {
if(!(R.isFunction($field5362))) {
R.ffi.throwNonFunApp(L[2203],$field5362);
}
$ans5350 = $field5362.app(anf_arg5361);
}
break;
case 6: var anf_arg5366 = $ans5350;
$step5344 = 20;
$al5351 = L[2198];
$field5367 = R.getColonFieldLoc(anf_method_obj5363,"make3",L[2198]);
if(R.isMethod($field5367)) {
$ans5350 = $field5367.full_meth(anf_method_obj5363,anf_arg5364,anf_arg5365,anf_arg5366);
} else {
if(!(R.isFunction($field5367))) {
R.ffi.throwNonFunApp(L[2198],$field5367);
}
$ans5350 = $field5367.app(anf_arg5364,anf_arg5365,anf_arg5366);
}
break;
case 7: $al5351 = L[2205];
var anf_arg5368 = G(self5346,"loc",L[2205]);
$step5344 = 8;
$al5351 = L[2206];
if(!(R.isFunction(src$available5348))) {
R.ffi.throwNonFunApp($al5351,src$available5348);
}
$ans5350 = src$available5348.app(anf_arg5368);
break;
case 8: var anf_arg5369 = $ans5350;
$al5351 = L[2206];
var anf_if5459 = R.checkWrapBoolean(anf_arg5369);
$step5344 = R.isPyretTrue(anf_if5459)?9:15;
break;
case 9: $al5351 = L[2207];
var anf_arg5370 = G(self5346,"loc",L[2207]);
$step5344 = 10;
$al5351 = L[2240];
if(!(R.isFunction(maybe$ast5349))) {
R.ffi.throwNonFunApp($al5351,maybe$ast5349);
}
$ans5350 = maybe$ast5349.app(anf_arg5370);
break;
case 10: var cases5371 = $ans5350;
$step5344 = 11;
$al5351 = L[2239];
R._checkAnn(L[2239],R.getDotAnn(L[2239],"O",O13,"Option"),cases5371);
break;
case 11: var $cases_dispatch5445 = {"some":12,
"none":13};
$al5351 = L[2226];
$step5344 = $cases_dispatch5445[cases5371.$name] || 14;
break;
case 12: if(cases5371.$arity !== 1) {
if(cases5371.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2225],1,cases5371.$arity,L[2226]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2225],true,L[2226]);
}
}
$step5344 = 20;
$al5351 = L[2227];
var $temp_branch5404 = function($ast5378) {
var $step5405 = 0;
var $ans5406 = D;
var $al5407 = L[2208];
try {
if(R.isActivationRecord($ast5378)) {
$step5405 = $ast5378.step;
$al5407 = $ast5378.from;
$ans5406 = $ast5378.ans;
ast5378 = $ast5378.args[0];
anf_method_obj5398 = $ast5378.vars[0];
anf_arg5399 = $ast5378.vars[1];
anf_arg5400 = $ast5378.vars[2];
anf_method_obj5391 = $ast5378.vars[3];
anf_arg5392 = $ast5378.vars[4];
anf_arg5387 = $ast5378.vars[5];
anf_method_obj5384 = $ast5378.vars[6];
cases5379 = $ast5378.vars[7];
anf_arg5393 = $ast5378.vars[8];
anf_arg5401 = $ast5378.vars[9];
} else {
var ast5378 = $ast5378;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5405) {
case 0: $al5407 = L[2208];
var anf_method_obj5398 = G(ED5,"error",L[2208]);
var anf_fun5372 = ed$intro122.$var;
$al5407 = L[2209];
var anf_arg5373 = G(self5346,"loc",L[2209]);
$step5405 = 1;
$al5407 = L[2224];
if(!(R.isFunction(anf_fun5372))) {
R.ffi.throwNonFunApp($al5407,anf_fun5372);
}
$ans5406 = anf_fun5372.app(("function application expression"),anf_arg5373,(-1),(true));
break;
case 1: var anf_arg5399 = $ans5406;
$al5407 = L[2210];
var anf_arg5374 = G(self5346,"loc",L[2210]);
$step5405 = 2;
$al5407 = L[2211];
$field5408 = R.getColonFieldLoc(ED5,"cmcode",L[2211]);
if(R.isMethod($field5408)) {
$ans5406 = $field5408.full_meth(ED5,anf_arg5374);
} else {
if(!(R.isFunction($field5408))) {
R.ffi.throwNonFunApp(L[2211],$field5408);
}
$ans5406 = $field5408.app(anf_arg5374);
}
break;
case 2: var anf_arg5400 = $ans5406;
$al5407 = L[2212];
var anf_method_obj5391 = G(ED5,"para",L[2212]);
$step5405 = 3;
$al5407 = L[2213];
$field5409 = R.getColonFieldLoc(ED5,"text",L[2213]);
if(R.isMethod($field5409)) {
$ans5406 = $field5409.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field5409))) {
R.ffi.throwNonFunApp(L[2213],$field5409);
}
$ans5406 = $field5409.app(("The "));
}
break;
case 3: var anf_arg5392 = $ans5406;
$step5405 = 4;
$al5407 = L[2214];
$field5410 = R.getColonFieldLoc(ED5,"text",L[2214]);
if(R.isMethod($field5410)) {
$ans5406 = $field5410.full_meth(ED5,("left side"));
} else {
if(!(R.isFunction($field5410))) {
R.ffi.throwNonFunApp(L[2214],$field5410);
}
$ans5406 = $field5410.app(("left side"));
}
break;
case 4: var anf_arg5387 = $ans5406;
$al5407 = L[2215];
var anf_method_obj5384 = G(ED5,"locs",L[2215]);
var cases5379 = ast5378;
var $cases_dispatch5411 = {"s-app":5};
$al5407 = L[2218];
$step5405 = $cases_dispatch5411[cases5379.$name] || 6;
break;
case 5: if(cases5379.$arity !== 3) {
if(cases5379.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2217],3,cases5379.$arity,L[2218]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2217],true,L[2218]);
}
}
var $fn187 = cases5379.$constructor.$fieldNames;
R.derefField(cases5379.dict[$fn187[0]],cases5379.$mut_fields_mask[0],false);
var _fun5380 = R.derefField(cases5379.dict[$fn187[1]],cases5379.$mut_fields_mask[1],false);
R.derefField(cases5379.dict[$fn187[2]],cases5379.$mut_fields_mask[2],false);
$step5405 = 7;
$al5407 = L[2216];
$ans5406 = G(_fun5380,"l",L[2216]);
break;
case 6: $step5405 = 7;
$al5407 = L[2219];
$ans5406 = G(ast5378,"l",L[2219]);
break;
case 7: var anf_arg5385 = $ans5406;
$step5405 = 8;
$al5407 = L[2215];
$field5412 = R.getColonFieldLoc(anf_method_obj5384,"make1",L[2215]);
if(R.isMethod($field5412)) {
$ans5406 = $field5412.full_meth(anf_method_obj5384,anf_arg5385);
} else {
if(!(R.isFunction($field5412))) {
R.ffi.throwNonFunApp(L[2215],$field5412);
}
$ans5406 = $field5412.app(anf_arg5385);
}
break;
case 8: var anf_arg5388 = $ans5406;
$step5405 = 9;
$al5407 = L[2220];
$field5413 = R.getColonFieldLoc(ED5,"highlight",L[2220]);
if(R.isMethod($field5413)) {
$ans5406 = $field5413.full_meth(ED5,anf_arg5387,anf_arg5388,(0));
} else {
if(!(R.isFunction($field5413))) {
R.ffi.throwNonFunApp(L[2220],$field5413);
}
$ans5406 = $field5413.app(anf_arg5387,anf_arg5388,(0));
}
break;
case 9: var anf_arg5393 = $ans5406;
$step5405 = 10;
$al5407 = L[2221];
$field5414 = R.getColonFieldLoc(ED5,"text",L[2221]);
if(R.isMethod($field5414)) {
$ans5406 = $field5414.full_meth(ED5,(" was not a function value:"));
} else {
if(!(R.isFunction($field5414))) {
R.ffi.throwNonFunApp(L[2221],$field5414);
}
$ans5406 = $field5414.app((" was not a function value:"));
}
break;
case 10: var anf_arg5394 = $ans5406;
$step5405 = 11;
$al5407 = L[2212];
$field5415 = R.getColonFieldLoc(anf_method_obj5391,"make3",L[2212]);
if(R.isMethod($field5415)) {
$ans5406 = $field5415.full_meth(anf_method_obj5391,anf_arg5392,anf_arg5393,anf_arg5394);
} else {
if(!(R.isFunction($field5415))) {
R.ffi.throwNonFunApp(L[2212],$field5415);
}
$ans5406 = $field5415.app(anf_arg5392,anf_arg5393,anf_arg5394);
}
break;
case 11: var anf_arg5401 = $ans5406;
$al5407 = L[2222];
var anf_arg5396 = G(self5346,"non-fun-val",L[2222]);
$step5405 = 12;
$al5407 = L[2223];
$field5416 = R.getColonFieldLoc(ED5,"embed",L[2223]);
if(R.isMethod($field5416)) {
$ans5406 = $field5416.full_meth(ED5,anf_arg5396);
} else {
if(!(R.isFunction($field5416))) {
R.ffi.throwNonFunApp(L[2223],$field5416);
}
$ans5406 = $field5416.app(anf_arg5396);
}
break;
case 12: var anf_arg5402 = $ans5406;
$step5405 = 13;
$al5407 = L[2208];
$field5417 = R.getColonFieldLoc(anf_method_obj5398,"make4",L[2208]);
if(R.isMethod($field5417)) {
$ans5406 = $field5417.full_meth(anf_method_obj5398,anf_arg5399,anf_arg5400,anf_arg5401,anf_arg5402);
} else {
if(!(R.isFunction($field5417))) {
R.ffi.throwNonFunApp(L[2208],$field5417);
}
$ans5406 = $field5417.app(anf_arg5399,anf_arg5400,anf_arg5401,anf_arg5402);
}
break;
case 13: ++R.GAS;
return $ans5406;
default: throw "No case numbered " + $step5405 + " in $temp_branch5404";
}
}
} catch($e5418) {
if(R.isCont($e5418) && ($step5405 !== 13)) {
$e5418.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5407,$temp_branch5404,$step5405,[ast5378],[anf_method_obj5398,anf_arg5399,anf_arg5400,anf_method_obj5391,anf_arg5392,anf_arg5387,anf_method_obj5384,cases5379,anf_arg5393,anf_arg5401]);
}
if(R.isPyretException($e5418)) {
$e5418.pyretStack.push($al5407);
}
throw $e5418;
}
};
$ans5350 = cases5371.$app_fields($temp_branch5404,[false]);
break;
case 13: if(cases5371.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[2237],false,L[2226]);
}
$step5344 = 20;
$al5351 = L[2238];
var $temp_branch5435 = function($$resumer101) {
var $step5436 = 0;
var $ans5437 = D;
var $al5438 = L[2228];
try {
if(R.isActivationRecord($$resumer101)) {
$step5436 = $$resumer101.step;
$al5438 = $$resumer101.from;
$ans5437 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj5429 = $$resumer101.vars[0];
anf_arg5430 = $$resumer101.vars[1];
anf_arg5431 = $$resumer101.vars[2];
anf_method_obj5424 = $$resumer101.vars[3];
anf_arg5432 = $$resumer101.vars[4];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5436) {
case 0: $al5438 = L[2228];
var anf_method_obj5429 = G(ED5,"error",L[2228]);
var anf_fun5419 = ed$intro122.$var;
$al5438 = L[2229];
var anf_arg5420 = G(self5346,"loc",L[2229]);
$step5436 = 1;
$al5438 = L[2236];
if(!(R.isFunction(anf_fun5419))) {
R.ffi.throwNonFunApp($al5438,anf_fun5419);
}
$ans5437 = anf_fun5419.app(("function application expression"),anf_arg5420,(0),(true));
break;
case 1: var anf_arg5430 = $ans5437;
$al5438 = L[2230];
var anf_arg5421 = G(self5346,"loc",L[2230]);
$step5436 = 2;
$al5438 = L[2231];
$field5439 = R.getColonFieldLoc(ED5,"cmcode",L[2231]);
if(R.isMethod($field5439)) {
$ans5437 = $field5439.full_meth(ED5,anf_arg5421);
} else {
if(!(R.isFunction($field5439))) {
R.ffi.throwNonFunApp(L[2231],$field5439);
}
$ans5437 = $field5439.app(anf_arg5421);
}
break;
case 2: var anf_arg5431 = $ans5437;
$al5438 = L[2232];
var anf_method_obj5424 = G(ED5,"para",L[2232]);
$step5436 = 3;
$al5438 = L[2233];
$field5440 = R.getColonFieldLoc(ED5,"text",L[2233]);
if(R.isMethod($field5440)) {
$ans5437 = $field5440.full_meth(ED5,("The left side was not a function value:"));
} else {
if(!(R.isFunction($field5440))) {
R.ffi.throwNonFunApp(L[2233],$field5440);
}
$ans5437 = $field5440.app(("The left side was not a function value:"));
}
break;
case 3: var anf_arg5425 = $ans5437;
$step5436 = 4;
$al5438 = L[2232];
$field5441 = R.getColonFieldLoc(anf_method_obj5424,"make1",L[2232]);
if(R.isMethod($field5441)) {
$ans5437 = $field5441.full_meth(anf_method_obj5424,anf_arg5425);
} else {
if(!(R.isFunction($field5441))) {
R.ffi.throwNonFunApp(L[2232],$field5441);
}
$ans5437 = $field5441.app(anf_arg5425);
}
break;
case 4: var anf_arg5432 = $ans5437;
$al5438 = L[2234];
var anf_arg5427 = G(self5346,"non-fun-val",L[2234]);
$step5436 = 5;
$al5438 = L[2235];
$field5442 = R.getColonFieldLoc(ED5,"embed",L[2235]);
if(R.isMethod($field5442)) {
$ans5437 = $field5442.full_meth(ED5,anf_arg5427);
} else {
if(!(R.isFunction($field5442))) {
R.ffi.throwNonFunApp(L[2235],$field5442);
}
$ans5437 = $field5442.app(anf_arg5427);
}
break;
case 5: var anf_arg5433 = $ans5437;
$step5436 = 6;
$al5438 = L[2228];
$field5443 = R.getColonFieldLoc(anf_method_obj5429,"make4",L[2228]);
if(R.isMethod($field5443)) {
$ans5437 = $field5443.full_meth(anf_method_obj5429,anf_arg5430,anf_arg5431,anf_arg5432,anf_arg5433);
} else {
if(!(R.isFunction($field5443))) {
R.ffi.throwNonFunApp(L[2228],$field5443);
}
$ans5437 = $field5443.app(anf_arg5430,anf_arg5431,anf_arg5432,anf_arg5433);
}
break;
case 6: ++R.GAS;
return $ans5437;
default: throw "No case numbered " + $step5436 + " in $temp_branch5435";
}
}
} catch($e5444) {
if(R.isCont($e5444) && ($step5436 !== 6)) {
$e5444.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5438,$temp_branch5435,$step5436,[],[anf_method_obj5429,anf_arg5430,anf_arg5431,anf_method_obj5424,anf_arg5432]);
}
if(R.isPyretException($e5444)) {
$e5444.pyretStack.push($al5438);
}
throw $e5444;
}
};
$ans5350 = cases5371.$app_fields($temp_branch5435,[]);
break;
case 14: $step5344 = 20;
$al5351 = L[2226];
$ans5350 = R.throwNoCasesMatched(L[2226],cases5371);
break;
case 15: $al5351 = L[2241];
var anf_method_obj5454 = G(ED5,"error",L[2241]);
var anf_fun5446 = ed$simple$intro95.$var;
$al5351 = L[2242];
var anf_arg5447 = G(self5346,"loc",L[2242]);
$step5344 = 16;
$al5351 = L[2247];
if(!(R.isFunction(anf_fun5446))) {
R.ffi.throwNonFunApp($al5351,anf_fun5446);
}
$ans5350 = anf_fun5446.app(("function application expression"),anf_arg5447);
break;
case 16: var anf_arg5455 = $ans5350;
$al5351 = L[2243];
var anf_method_obj5449 = G(ED5,"para",L[2243]);
$step5344 = 17;
$al5351 = L[2244];
$field5448 = R.getColonFieldLoc(ED5,"text",L[2244]);
if(R.isMethod($field5448)) {
$ans5350 = $field5448.full_meth(ED5,("The left side was not a function value:"));
} else {
if(!(R.isFunction($field5448))) {
R.ffi.throwNonFunApp(L[2244],$field5448);
}
$ans5350 = $field5448.app(("The left side was not a function value:"));
}
break;
case 17: var anf_arg5450 = $ans5350;
$step5344 = 18;
$al5351 = L[2243];
$field5451 = R.getColonFieldLoc(anf_method_obj5449,"make1",L[2243]);
if(R.isMethod($field5451)) {
$ans5350 = $field5451.full_meth(anf_method_obj5449,anf_arg5450);
} else {
if(!(R.isFunction($field5451))) {
R.ffi.throwNonFunApp(L[2243],$field5451);
}
$ans5350 = $field5451.app(anf_arg5450);
}
break;
case 18: var anf_arg5456 = $ans5350;
$al5351 = L[2245];
var anf_arg5452 = G(self5346,"non-fun-val",L[2245]);
$step5344 = 19;
$al5351 = L[2246];
$field5453 = R.getColonFieldLoc(ED5,"embed",L[2246]);
if(R.isMethod($field5453)) {
$ans5350 = $field5453.full_meth(ED5,anf_arg5452);
} else {
if(!(R.isFunction($field5453))) {
R.ffi.throwNonFunApp(L[2246],$field5453);
}
$ans5350 = $field5453.app(anf_arg5452);
}
break;
case 19: var anf_arg5457 = $ans5350;
$step5344 = 20;
$al5351 = L[2241];
$field5458 = R.getColonFieldLoc(anf_method_obj5454,"make3",L[2241]);
if(R.isMethod($field5458)) {
$ans5350 = $field5458.full_meth(anf_method_obj5454,anf_arg5455,anf_arg5456,anf_arg5457);
} else {
if(!(R.isFunction($field5458))) {
R.ffi.throwNonFunApp(L[2241],$field5458);
}
$ans5350 = $field5458.app(anf_arg5455,anf_arg5456,anf_arg5457);
}
break;
case 20: ++R.GAS;
return $ans5350;
default: throw "No case numbered " + $step5344 + " in $temp_full5345";
}
}
} catch($e5461) {
if(R.isCont($e5461) && ($step5344 !== 20)) {
$e5461.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5351,$temp_full5345,$step5344,[self5346,maybe$stack$loc5347,src$available5348,maybe$ast5349],[anf_method_obj5363,anf_arg5364,anf_method_obj5358,anf_arg5365,cases5371,anf_method_obj5454,anf_arg5455,anf_method_obj5449,anf_arg5456]);
}
if(R.isPyretException($e5461)) {
$e5461.pyretStack.push($al5351);
}
throw $e5461;
}
};
var anf_variant_member6411 = R.makeMethod3($temp_full5345,"render-fancy-reason");
var $temp_full5463 = function($self5464) {
var $step5462 = 0;
var $ans5465 = D;
var $al5466 = L[2256];
try {
if(R.isActivationRecord($self5464)) {
$step5462 = $self5464.step;
$al5466 = $self5464.from;
$ans5465 = $self5464.ans;
self5464 = $self5464.args[0];
anf_method_obj5475 = $self5464.vars[0];
anf_arg5476 = $self5464.vars[1];
anf_method_obj5470 = $self5464.vars[2];
anf_arg5477 = $self5464.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2256],1,$t);
}
var self5464 = $self5464;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5462) {
case 0: $al5466 = L[2249];
var anf_method_obj5475 = G(ED5,"error",L[2249]);
var anf_fun5467 = ed$simple$intro95.$var;
$al5466 = L[2250];
var anf_arg5468 = G(self5464,"loc",L[2250]);
$step5462 = 1;
$al5466 = L[2255];
if(!(R.isFunction(anf_fun5467))) {
R.ffi.throwNonFunApp($al5466,anf_fun5467);
}
$ans5465 = anf_fun5467.app(("function application expression"),anf_arg5468);
break;
case 1: var anf_arg5476 = $ans5465;
$al5466 = L[2251];
var anf_method_obj5470 = G(ED5,"para",L[2251]);
$step5462 = 2;
$al5466 = L[2252];
$field5469 = R.getColonFieldLoc(ED5,"text",L[2252]);
if(R.isMethod($field5469)) {
$ans5465 = $field5469.full_meth(ED5,("The left side was not a function value:"));
} else {
if(!(R.isFunction($field5469))) {
R.ffi.throwNonFunApp(L[2252],$field5469);
}
$ans5465 = $field5469.app(("The left side was not a function value:"));
}
break;
case 2: var anf_arg5471 = $ans5465;
$step5462 = 3;
$al5466 = L[2251];
$field5472 = R.getColonFieldLoc(anf_method_obj5470,"make1",L[2251]);
if(R.isMethod($field5472)) {
$ans5465 = $field5472.full_meth(anf_method_obj5470,anf_arg5471);
} else {
if(!(R.isFunction($field5472))) {
R.ffi.throwNonFunApp(L[2251],$field5472);
}
$ans5465 = $field5472.app(anf_arg5471);
}
break;
case 3: var anf_arg5477 = $ans5465;
$al5466 = L[2253];
var anf_arg5473 = G(self5464,"non-fun-val",L[2253]);
$step5462 = 4;
$al5466 = L[2254];
$field5474 = R.getColonFieldLoc(ED5,"embed",L[2254]);
if(R.isMethod($field5474)) {
$ans5465 = $field5474.full_meth(ED5,anf_arg5473);
} else {
if(!(R.isFunction($field5474))) {
R.ffi.throwNonFunApp(L[2254],$field5474);
}
$ans5465 = $field5474.app(anf_arg5473);
}
break;
case 4: var anf_arg5478 = $ans5465;
$step5462 = 5;
$al5466 = L[2249];
$field5479 = R.getColonFieldLoc(anf_method_obj5475,"make3",L[2249]);
if(R.isMethod($field5479)) {
$ans5465 = $field5479.full_meth(anf_method_obj5475,anf_arg5476,anf_arg5477,anf_arg5478);
} else {
if(!(R.isFunction($field5479))) {
R.ffi.throwNonFunApp(L[2249],$field5479);
}
$ans5465 = $field5479.app(anf_arg5476,anf_arg5477,anf_arg5478);
}
break;
case 5: ++R.GAS;
return $ans5465;
default: throw "No case numbered " + $step5462 + " in $temp_full5463";
}
}
} catch($e5480) {
if(R.isCont($e5480) && ($step5462 !== 5)) {
$e5480.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5466,$temp_full5463,$step5462,[self5464],[anf_method_obj5475,anf_arg5476,anf_method_obj5470,anf_arg5477]);
}
if(R.isPyretException($e5480)) {
$e5480.pyretStack.push($al5466);
}
throw $e5480;
}
};
var anf_variant_member6412 = R.makeMethod0($temp_full5463,"render-reason");
var $temp_full5482 = function($self5483,$maybe$stack$loc5484,$src$available5485,$maybe$ast5486) {
var $step5481 = 0;
var $ans5487 = D;
var $al5488 = L[2297];
try {
if(R.isActivationRecord($self5483)) {
$step5481 = $self5483.step;
$al5488 = $self5483.from;
$ans5487 = $self5483.ans;
self5483 = $self5483.args[0];
maybe$stack$loc5484 = $self5483.args[1];
src$available5485 = $self5483.args[2];
maybe$ast5486 = $self5483.args[3];
anf_method_obj5507 = $self5483.vars[0];
anf_method_obj5500 = $self5483.vars[1];
anf_arg5501 = $self5483.vars[2];
anf_arg5502 = $self5483.vars[3];
anf_arg5503 = $self5483.vars[4];
anf_arg5508 = $self5483.vars[5];
anf_method_obj5541 = $self5483.vars[6];
anf_method_obj5521 = $self5483.vars[7];
anf_arg5522 = $self5483.vars[8];
anf_arg5518 = $self5483.vars[9];
anf_arg5542 = $self5483.vars[10];
anf_arg5543 = $self5483.vars[11];
anf_method_obj5536 = $self5483.vars[12];
anf_arg5537 = $self5483.vars[13];
anf_arg5532 = $self5483.vars[14];
anf_arg5538 = $self5483.vars[15];
anf_method_obj5562 = $self5483.vars[16];
anf_method_obj5555 = $self5483.vars[17];
anf_arg5556 = $self5483.vars[18];
anf_arg5557 = $self5483.vars[19];
anf_arg5558 = $self5483.vars[20];
anf_arg5559 = $self5483.vars[21];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2297],4,$t);
}
var self5483 = $self5483;
var maybe$stack$loc5484 = $maybe$stack$loc5484;
var src$available5485 = $src$available5485;
var maybe$ast5486 = $maybe$ast5486;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5481) {
case 0: $al5488 = L[2257];
var anf_method_obj5489 = G(self5483,"loc",L[2257]);
$step5481 = 1;
$al5488 = L[2258];
$field5490 = R.getColonFieldLoc(anf_method_obj5489,"is-builtin",L[2258]);
if(R.isMethod($field5490)) {
$ans5487 = $field5490.full_meth(anf_method_obj5489);
} else {
if(!(R.isFunction($field5490))) {
R.ffi.throwNonFunApp(L[2258],$field5490);
}
$ans5487 = $field5490.app();
}
break;
case 1: var anf_arg5491 = $ans5487;
$al5488 = L[2258];
var anf_if5566 = R.checkWrapBoolean(anf_arg5491);
$step5481 = R.isPyretTrue(anf_if5566)?2:10;
break;
case 2: $al5488 = L[2259];
var anf_method_obj5507 = G(ED5,"error",L[2259]);
$al5488 = L[2260];
var anf_method_obj5500 = G(ED5,"para",L[2260]);
$step5481 = 3;
$al5488 = L[2261];
$field5492 = R.getColonFieldLoc(ED5,"text",L[2261]);
if(R.isMethod($field5492)) {
$ans5487 = $field5492.full_meth(ED5,("The identifier "));
} else {
if(!(R.isFunction($field5492))) {
R.ffi.throwNonFunApp(L[2261],$field5492);
}
$ans5487 = $field5492.app(("The identifier "));
}
break;
case 3: var anf_arg5501 = $ans5487;
$al5488 = L[2262];
var anf_arg5493 = G(self5483,"name",L[2262]);
$step5481 = 4;
$al5488 = L[2263];
$field5494 = R.getColonFieldLoc(ED5,"text",L[2263]);
if(R.isMethod($field5494)) {
$ans5487 = $field5494.full_meth(ED5,anf_arg5493);
} else {
if(!(R.isFunction($field5494))) {
R.ffi.throwNonFunApp(L[2263],$field5494);
}
$ans5487 = $field5494.app(anf_arg5493);
}
break;
case 4: var anf_arg5495 = $ans5487;
$step5481 = 5;
$al5488 = L[2264];
$field5496 = R.getColonFieldLoc(ED5,"code",L[2264]);
if(R.isMethod($field5496)) {
$ans5487 = $field5496.full_meth(ED5,anf_arg5495);
} else {
if(!(R.isFunction($field5496))) {
R.ffi.throwNonFunApp(L[2264],$field5496);
}
$ans5487 = $field5496.app(anf_arg5495);
}
break;
case 5: var anf_arg5502 = $ans5487;
$step5481 = 6;
$al5488 = L[2265];
$field5497 = R.getColonFieldLoc(ED5,"text",L[2265]);
if(R.isMethod($field5497)) {
$ans5487 = $field5497.full_meth(ED5,(" is unbound in "));
} else {
if(!(R.isFunction($field5497))) {
R.ffi.throwNonFunApp(L[2265],$field5497);
}
$ans5487 = $field5497.app((" is unbound in "));
}
break;
case 6: var anf_arg5503 = $ans5487;
$al5488 = L[2266];
var anf_arg5498 = G(self5483,"loc",L[2266]);
$step5481 = 7;
$al5488 = L[2267];
$field5499 = R.getColonFieldLoc(ED5,"loc",L[2267]);
if(R.isMethod($field5499)) {
$ans5487 = $field5499.full_meth(ED5,anf_arg5498);
} else {
if(!(R.isFunction($field5499))) {
R.ffi.throwNonFunApp(L[2267],$field5499);
}
$ans5487 = $field5499.app(anf_arg5498);
}
break;
case 7: var anf_arg5504 = $ans5487;
$step5481 = 8;
$al5488 = L[2260];
$field5505 = R.getColonFieldLoc(anf_method_obj5500,"make4",L[2260]);
if(R.isMethod($field5505)) {
$ans5487 = $field5505.full_meth(anf_method_obj5500,anf_arg5501,anf_arg5502,anf_arg5503,anf_arg5504);
} else {
if(!(R.isFunction($field5505))) {
R.ffi.throwNonFunApp(L[2260],$field5505);
}
$ans5487 = $field5505.app(anf_arg5501,anf_arg5502,anf_arg5503,anf_arg5504);
}
break;
case 8: var anf_arg5508 = $ans5487;
var anf_fun5506 = please$report$bug133.$var;
$step5481 = 9;
$al5488 = L[2268];
if(!(R.isFunction(anf_fun5506))) {
R.ffi.throwNonFunApp($al5488,anf_fun5506);
}
$ans5487 = anf_fun5506.app();
break;
case 9: var anf_arg5509 = $ans5487;
$step5481 = 33;
$al5488 = L[2259];
$field5510 = R.getColonFieldLoc(anf_method_obj5507,"make2",L[2259]);
if(R.isMethod($field5510)) {
$ans5487 = $field5510.full_meth(anf_method_obj5507,anf_arg5508,anf_arg5509);
} else {
if(!(R.isFunction($field5510))) {
R.ffi.throwNonFunApp(L[2259],$field5510);
}
$ans5487 = $field5510.app(anf_arg5508,anf_arg5509);
}
break;
case 10: $al5488 = L[2269];
var anf_arg5511 = G(self5483,"loc",L[2269]);
$step5481 = 11;
$al5488 = L[2270];
if(!(R.isFunction(src$available5485))) {
R.ffi.throwNonFunApp($al5488,src$available5485);
}
$ans5487 = src$available5485.app(anf_arg5511);
break;
case 11: var anf_arg5512 = $ans5487;
$al5488 = L[2270];
var anf_if5565 = R.checkWrapBoolean(anf_arg5512);
$step5481 = R.isPyretTrue(anf_if5565)?12:25;
break;
case 12: $al5488 = L[2271];
var anf_method_obj5541 = G(ED5,"error",L[2271]);
$al5488 = L[2272];
var anf_method_obj5521 = G(ED5,"para",L[2272]);
$step5481 = 13;
$al5488 = L[2273];
$field5513 = R.getColonFieldLoc(ED5,"text",L[2273]);
if(R.isMethod($field5513)) {
$ans5487 = $field5513.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field5513))) {
R.ffi.throwNonFunApp(L[2273],$field5513);
}
$ans5487 = $field5513.app(("The "));
}
break;
case 13: var anf_arg5522 = $ans5487;
$step5481 = 14;
$al5488 = L[2274];
$field5514 = R.getColonFieldLoc(ED5,"text",L[2274]);
if(R.isMethod($field5514)) {
$ans5487 = $field5514.full_meth(ED5,("identifier"));
} else {
if(!(R.isFunction($field5514))) {
R.ffi.throwNonFunApp(L[2274],$field5514);
}
$ans5487 = $field5514.app(("identifier"));
}
break;
case 14: var anf_arg5518 = $ans5487;
$al5488 = L[2275];
var anf_method_obj5515 = G(ED5,"locs",L[2275]);
$al5488 = L[2276];
var anf_arg5516 = G(self5483,"loc",L[2276]);
$step5481 = 15;
$al5488 = L[2275];
$field5517 = R.getColonFieldLoc(anf_method_obj5515,"make1",L[2275]);
if(R.isMethod($field5517)) {
$ans5487 = $field5517.full_meth(anf_method_obj5515,anf_arg5516);
} else {
if(!(R.isFunction($field5517))) {
R.ffi.throwNonFunApp(L[2275],$field5517);
}
$ans5487 = $field5517.app(anf_arg5516);
}
break;
case 15: var anf_arg5519 = $ans5487;
$step5481 = 16;
$al5488 = L[2277];
$field5520 = R.getColonFieldLoc(ED5,"highlight",L[2277]);
if(R.isMethod($field5520)) {
$ans5487 = $field5520.full_meth(ED5,anf_arg5518,anf_arg5519,(0));
} else {
if(!(R.isFunction($field5520))) {
R.ffi.throwNonFunApp(L[2277],$field5520);
}
$ans5487 = $field5520.app(anf_arg5518,anf_arg5519,(0));
}
break;
case 16: var anf_arg5523 = $ans5487;
$step5481 = 17;
$al5488 = L[2272];
$field5524 = R.getColonFieldLoc(anf_method_obj5521,"make2",L[2272]);
if(R.isMethod($field5524)) {
$ans5487 = $field5524.full_meth(anf_method_obj5521,anf_arg5522,anf_arg5523);
} else {
if(!(R.isFunction($field5524))) {
R.ffi.throwNonFunApp(L[2272],$field5524);
}
$ans5487 = $field5524.app(anf_arg5522,anf_arg5523);
}
break;
case 17: var anf_arg5542 = $ans5487;
$al5488 = L[2278];
var anf_arg5525 = G(self5483,"loc",L[2278]);
$step5481 = 18;
$al5488 = L[2279];
$field5526 = R.getColonFieldLoc(ED5,"cmcode",L[2279]);
if(R.isMethod($field5526)) {
$ans5487 = $field5526.full_meth(ED5,anf_arg5525);
} else {
if(!(R.isFunction($field5526))) {
R.ffi.throwNonFunApp(L[2279],$field5526);
}
$ans5487 = $field5526.app(anf_arg5525);
}
break;
case 18: var anf_arg5543 = $ans5487;
$al5488 = L[2280];
var anf_method_obj5536 = G(ED5,"para",L[2280]);
$step5481 = 19;
$al5488 = L[2281];
$field5527 = R.getColonFieldLoc(ED5,"text",L[2281]);
if(R.isMethod($field5527)) {
$ans5487 = $field5527.full_meth(ED5,(" is unbound. Although it has been previously defined, it is being "));
} else {
if(!(R.isFunction($field5527))) {
R.ffi.throwNonFunApp(L[2281],$field5527);
}
$ans5487 = $field5527.app((" is unbound. Although it has been previously defined, it is being "));
}
break;
case 19: var anf_arg5537 = $ans5487;
$step5481 = 20;
$al5488 = L[2282];
$field5528 = R.getColonFieldLoc(ED5,"text",L[2282]);
if(R.isMethod($field5528)) {
$ans5487 = $field5528.full_meth(ED5,("used"));
} else {
if(!(R.isFunction($field5528))) {
R.ffi.throwNonFunApp(L[2282],$field5528);
}
$ans5487 = $field5528.app(("used"));
}
break;
case 20: var anf_arg5532 = $ans5487;
$al5488 = L[2283];
var anf_method_obj5529 = G(ED5,"locs",L[2283]);
$al5488 = L[2284];
var anf_arg5530 = G(self5483,"loc",L[2284]);
$step5481 = 21;
$al5488 = L[2283];
$field5531 = R.getColonFieldLoc(anf_method_obj5529,"make1",L[2283]);
if(R.isMethod($field5531)) {
$ans5487 = $field5531.full_meth(anf_method_obj5529,anf_arg5530);
} else {
if(!(R.isFunction($field5531))) {
R.ffi.throwNonFunApp(L[2283],$field5531);
}
$ans5487 = $field5531.app(anf_arg5530);
}
break;
case 21: var anf_arg5533 = $ans5487;
$step5481 = 22;
$al5488 = L[2285];
$field5534 = R.getColonFieldLoc(ED5,"highlight",L[2285]);
if(R.isMethod($field5534)) {
$ans5487 = $field5534.full_meth(ED5,anf_arg5532,anf_arg5533,(0));
} else {
if(!(R.isFunction($field5534))) {
R.ffi.throwNonFunApp(L[2285],$field5534);
}
$ans5487 = $field5534.app(anf_arg5532,anf_arg5533,(0));
}
break;
case 22: var anf_arg5538 = $ans5487;
$step5481 = 23;
$al5488 = L[2286];
$field5535 = R.getColonFieldLoc(ED5,"text",L[2286]);
if(R.isMethod($field5535)) {
$ans5487 = $field5535.full_meth(ED5,(" before it has been is initialized to a value."));
} else {
if(!(R.isFunction($field5535))) {
R.ffi.throwNonFunApp(L[2286],$field5535);
}
$ans5487 = $field5535.app((" before it has been is initialized to a value."));
}
break;
case 23: var anf_arg5539 = $ans5487;
$step5481 = 24;
$al5488 = L[2280];
$field5540 = R.getColonFieldLoc(anf_method_obj5536,"make3",L[2280]);
if(R.isMethod($field5540)) {
$ans5487 = $field5540.full_meth(anf_method_obj5536,anf_arg5537,anf_arg5538,anf_arg5539);
} else {
if(!(R.isFunction($field5540))) {
R.ffi.throwNonFunApp(L[2280],$field5540);
}
$ans5487 = $field5540.app(anf_arg5537,anf_arg5538,anf_arg5539);
}
break;
case 24: var anf_arg5544 = $ans5487;
$step5481 = 33;
$al5488 = L[2271];
$field5545 = R.getColonFieldLoc(anf_method_obj5541,"make3",L[2271]);
if(R.isMethod($field5545)) {
$ans5487 = $field5545.full_meth(anf_method_obj5541,anf_arg5542,anf_arg5543,anf_arg5544);
} else {
if(!(R.isFunction($field5545))) {
R.ffi.throwNonFunApp(L[2271],$field5545);
}
$ans5487 = $field5545.app(anf_arg5542,anf_arg5543,anf_arg5544);
}
break;
case 25: $al5488 = L[2287];
var anf_method_obj5562 = G(ED5,"error",L[2287]);
$al5488 = L[2288];
var anf_method_obj5555 = G(ED5,"para",L[2288]);
$step5481 = 26;
$al5488 = L[2289];
$field5546 = R.getColonFieldLoc(ED5,"text",L[2289]);
if(R.isMethod($field5546)) {
$ans5487 = $field5546.full_meth(ED5,("The identifier "));
} else {
if(!(R.isFunction($field5546))) {
R.ffi.throwNonFunApp(L[2289],$field5546);
}
$ans5487 = $field5546.app(("The identifier "));
}
break;
case 26: var anf_arg5556 = $ans5487;
$al5488 = L[2290];
var anf_arg5547 = G(self5483,"name",L[2290]);
$step5481 = 27;
$al5488 = L[2291];
$field5548 = R.getColonFieldLoc(ED5,"text",L[2291]);
if(R.isMethod($field5548)) {
$ans5487 = $field5548.full_meth(ED5,anf_arg5547);
} else {
if(!(R.isFunction($field5548))) {
R.ffi.throwNonFunApp(L[2291],$field5548);
}
$ans5487 = $field5548.app(anf_arg5547);
}
break;
case 27: var anf_arg5549 = $ans5487;
$step5481 = 28;
$al5488 = L[2292];
$field5550 = R.getColonFieldLoc(ED5,"code",L[2292]);
if(R.isMethod($field5550)) {
$ans5487 = $field5550.full_meth(ED5,anf_arg5549);
} else {
if(!(R.isFunction($field5550))) {
R.ffi.throwNonFunApp(L[2292],$field5550);
}
$ans5487 = $field5550.app(anf_arg5549);
}
break;
case 28: var anf_arg5557 = $ans5487;
$step5481 = 29;
$al5488 = L[2293];
$field5551 = R.getColonFieldLoc(ED5,"text",L[2293]);
if(R.isMethod($field5551)) {
$ans5487 = $field5551.full_meth(ED5,(" in "));
} else {
if(!(R.isFunction($field5551))) {
R.ffi.throwNonFunApp(L[2293],$field5551);
}
$ans5487 = $field5551.app((" in "));
}
break;
case 29: var anf_arg5558 = $ans5487;
$al5488 = L[2294];
var anf_arg5552 = G(self5483,"loc",L[2294]);
$step5481 = 30;
$al5488 = L[2295];
$field5553 = R.getColonFieldLoc(ED5,"loc",L[2295]);
if(R.isMethod($field5553)) {
$ans5487 = $field5553.full_meth(ED5,anf_arg5552);
} else {
if(!(R.isFunction($field5553))) {
R.ffi.throwNonFunApp(L[2295],$field5553);
}
$ans5487 = $field5553.app(anf_arg5552);
}
break;
case 30: var anf_arg5559 = $ans5487;
$step5481 = 31;
$al5488 = L[2296];
$field5554 = R.getColonFieldLoc(ED5,"text",L[2296]);
if(R.isMethod($field5554)) {
$ans5487 = $field5554.full_meth(ED5,(" is unbound. Although it has been previously defined, it is being used before it has been is initialized to a value."));
} else {
if(!(R.isFunction($field5554))) {
R.ffi.throwNonFunApp(L[2296],$field5554);
}
$ans5487 = $field5554.app((" is unbound. Although it has been previously defined, it is being used before it has been is initialized to a value."));
}
break;
case 31: var anf_arg5560 = $ans5487;
$step5481 = 32;
$al5488 = L[2288];
$field5561 = R.getColonFieldLoc(anf_method_obj5555,"make5",L[2288]);
if(R.isMethod($field5561)) {
$ans5487 = $field5561.full_meth(anf_method_obj5555,anf_arg5556,anf_arg5557,anf_arg5558,anf_arg5559,anf_arg5560);
} else {
if(!(R.isFunction($field5561))) {
R.ffi.throwNonFunApp(L[2288],$field5561);
}
$ans5487 = $field5561.app(anf_arg5556,anf_arg5557,anf_arg5558,anf_arg5559,anf_arg5560);
}
break;
case 32: var anf_arg5563 = $ans5487;
$step5481 = 33;
$al5488 = L[2287];
$field5564 = R.getColonFieldLoc(anf_method_obj5562,"make1",L[2287]);
if(R.isMethod($field5564)) {
$ans5487 = $field5564.full_meth(anf_method_obj5562,anf_arg5563);
} else {
if(!(R.isFunction($field5564))) {
R.ffi.throwNonFunApp(L[2287],$field5564);
}
$ans5487 = $field5564.app(anf_arg5563);
}
break;
case 33: ++R.GAS;
return $ans5487;
default: throw "No case numbered " + $step5481 + " in $temp_full5482";
}
}
} catch($e5567) {
if(R.isCont($e5567) && ($step5481 !== 33)) {
$e5567.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5488,$temp_full5482,$step5481,[self5483,maybe$stack$loc5484,src$available5485,maybe$ast5486],[anf_method_obj5507,anf_method_obj5500,anf_arg5501,anf_arg5502,anf_arg5503,anf_arg5508,anf_method_obj5541,anf_method_obj5521,anf_arg5522,anf_arg5518,anf_arg5542,anf_arg5543,anf_method_obj5536,anf_arg5537,anf_arg5532,anf_arg5538,anf_method_obj5562,anf_method_obj5555,anf_arg5556,anf_arg5557,anf_arg5558,anf_arg5559]);
}
if(R.isPyretException($e5567)) {
$e5567.pyretStack.push($al5488);
}
throw $e5567;
}
};
var anf_variant_member6422 = R.makeMethod3($temp_full5482,"render-fancy-reason");
var $temp_full5569 = function($self5570) {
var $step5568 = 0;
var $ans5571 = D;
var $al5572 = L[2320];
try {
if(R.isActivationRecord($self5570)) {
$step5568 = $self5570.step;
$al5572 = $self5570.from;
$ans5571 = $self5570.ans;
self5570 = $self5570.args[0];
anf_method_obj5591 = $self5570.vars[0];
anf_method_obj5584 = $self5570.vars[1];
anf_arg5585 = $self5570.vars[2];
anf_arg5586 = $self5570.vars[3];
anf_arg5587 = $self5570.vars[4];
anf_arg5592 = $self5570.vars[5];
anf_method_obj5611 = $self5570.vars[6];
anf_method_obj5604 = $self5570.vars[7];
anf_arg5605 = $self5570.vars[8];
anf_arg5606 = $self5570.vars[9];
anf_arg5607 = $self5570.vars[10];
anf_arg5608 = $self5570.vars[11];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2320],1,$t);
}
var self5570 = $self5570;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5568) {
case 0: $al5572 = L[2298];
var anf_method_obj5573 = G(self5570,"loc",L[2298]);
$step5568 = 1;
$al5572 = L[2299];
$field5574 = R.getColonFieldLoc(anf_method_obj5573,"is-builtin",L[2299]);
if(R.isMethod($field5574)) {
$ans5571 = $field5574.full_meth(anf_method_obj5573);
} else {
if(!(R.isFunction($field5574))) {
R.ffi.throwNonFunApp(L[2299],$field5574);
}
$ans5571 = $field5574.app();
}
break;
case 1: var anf_arg5575 = $ans5571;
$al5572 = L[2299];
var anf_if5614 = R.checkWrapBoolean(anf_arg5575);
$step5568 = R.isPyretTrue(anf_if5614)?2:10;
break;
case 2: $al5572 = L[2300];
var anf_method_obj5591 = G(ED5,"error",L[2300]);
$al5572 = L[2301];
var anf_method_obj5584 = G(ED5,"para",L[2301]);
$step5568 = 3;
$al5572 = L[2302];
$field5576 = R.getColonFieldLoc(ED5,"text",L[2302]);
if(R.isMethod($field5576)) {
$ans5571 = $field5576.full_meth(ED5,("The identifier "));
} else {
if(!(R.isFunction($field5576))) {
R.ffi.throwNonFunApp(L[2302],$field5576);
}
$ans5571 = $field5576.app(("The identifier "));
}
break;
case 3: var anf_arg5585 = $ans5571;
$al5572 = L[2303];
var anf_arg5577 = G(self5570,"name",L[2303]);
$step5568 = 4;
$al5572 = L[2304];
$field5578 = R.getColonFieldLoc(ED5,"text",L[2304]);
if(R.isMethod($field5578)) {
$ans5571 = $field5578.full_meth(ED5,anf_arg5577);
} else {
if(!(R.isFunction($field5578))) {
R.ffi.throwNonFunApp(L[2304],$field5578);
}
$ans5571 = $field5578.app(anf_arg5577);
}
break;
case 4: var anf_arg5579 = $ans5571;
$step5568 = 5;
$al5572 = L[2305];
$field5580 = R.getColonFieldLoc(ED5,"code",L[2305]);
if(R.isMethod($field5580)) {
$ans5571 = $field5580.full_meth(ED5,anf_arg5579);
} else {
if(!(R.isFunction($field5580))) {
R.ffi.throwNonFunApp(L[2305],$field5580);
}
$ans5571 = $field5580.app(anf_arg5579);
}
break;
case 5: var anf_arg5586 = $ans5571;
$step5568 = 6;
$al5572 = L[2306];
$field5581 = R.getColonFieldLoc(ED5,"text",L[2306]);
if(R.isMethod($field5581)) {
$ans5571 = $field5581.full_meth(ED5,(" is unbound in "));
} else {
if(!(R.isFunction($field5581))) {
R.ffi.throwNonFunApp(L[2306],$field5581);
}
$ans5571 = $field5581.app((" is unbound in "));
}
break;
case 6: var anf_arg5587 = $ans5571;
$al5572 = L[2307];
var anf_arg5582 = G(self5570,"loc",L[2307]);
$step5568 = 7;
$al5572 = L[2308];
$field5583 = R.getColonFieldLoc(ED5,"loc",L[2308]);
if(R.isMethod($field5583)) {
$ans5571 = $field5583.full_meth(ED5,anf_arg5582);
} else {
if(!(R.isFunction($field5583))) {
R.ffi.throwNonFunApp(L[2308],$field5583);
}
$ans5571 = $field5583.app(anf_arg5582);
}
break;
case 7: var anf_arg5588 = $ans5571;
$step5568 = 8;
$al5572 = L[2301];
$field5589 = R.getColonFieldLoc(anf_method_obj5584,"make4",L[2301]);
if(R.isMethod($field5589)) {
$ans5571 = $field5589.full_meth(anf_method_obj5584,anf_arg5585,anf_arg5586,anf_arg5587,anf_arg5588);
} else {
if(!(R.isFunction($field5589))) {
R.ffi.throwNonFunApp(L[2301],$field5589);
}
$ans5571 = $field5589.app(anf_arg5585,anf_arg5586,anf_arg5587,anf_arg5588);
}
break;
case 8: var anf_arg5592 = $ans5571;
var anf_fun5590 = please$report$bug133.$var;
$step5568 = 9;
$al5572 = L[2309];
if(!(R.isFunction(anf_fun5590))) {
R.ffi.throwNonFunApp($al5572,anf_fun5590);
}
$ans5571 = anf_fun5590.app();
break;
case 9: var anf_arg5593 = $ans5571;
$step5568 = 18;
$al5572 = L[2300];
$field5594 = R.getColonFieldLoc(anf_method_obj5591,"make2",L[2300]);
if(R.isMethod($field5594)) {
$ans5571 = $field5594.full_meth(anf_method_obj5591,anf_arg5592,anf_arg5593);
} else {
if(!(R.isFunction($field5594))) {
R.ffi.throwNonFunApp(L[2300],$field5594);
}
$ans5571 = $field5594.app(anf_arg5592,anf_arg5593);
}
break;
case 10: $al5572 = L[2310];
var anf_method_obj5611 = G(ED5,"error",L[2310]);
$al5572 = L[2311];
var anf_method_obj5604 = G(ED5,"para",L[2311]);
$step5568 = 11;
$al5572 = L[2312];
$field5595 = R.getColonFieldLoc(ED5,"text",L[2312]);
if(R.isMethod($field5595)) {
$ans5571 = $field5595.full_meth(ED5,("The identifier "));
} else {
if(!(R.isFunction($field5595))) {
R.ffi.throwNonFunApp(L[2312],$field5595);
}
$ans5571 = $field5595.app(("The identifier "));
}
break;
case 11: var anf_arg5605 = $ans5571;
$al5572 = L[2313];
var anf_arg5596 = G(self5570,"name",L[2313]);
$step5568 = 12;
$al5572 = L[2314];
$field5597 = R.getColonFieldLoc(ED5,"text",L[2314]);
if(R.isMethod($field5597)) {
$ans5571 = $field5597.full_meth(ED5,anf_arg5596);
} else {
if(!(R.isFunction($field5597))) {
R.ffi.throwNonFunApp(L[2314],$field5597);
}
$ans5571 = $field5597.app(anf_arg5596);
}
break;
case 12: var anf_arg5598 = $ans5571;
$step5568 = 13;
$al5572 = L[2315];
$field5599 = R.getColonFieldLoc(ED5,"code",L[2315]);
if(R.isMethod($field5599)) {
$ans5571 = $field5599.full_meth(ED5,anf_arg5598);
} else {
if(!(R.isFunction($field5599))) {
R.ffi.throwNonFunApp(L[2315],$field5599);
}
$ans5571 = $field5599.app(anf_arg5598);
}
break;
case 13: var anf_arg5606 = $ans5571;
$step5568 = 14;
$al5572 = L[2316];
$field5600 = R.getColonFieldLoc(ED5,"text",L[2316]);
if(R.isMethod($field5600)) {
$ans5571 = $field5600.full_meth(ED5,(" in "));
} else {
if(!(R.isFunction($field5600))) {
R.ffi.throwNonFunApp(L[2316],$field5600);
}
$ans5571 = $field5600.app((" in "));
}
break;
case 14: var anf_arg5607 = $ans5571;
$al5572 = L[2317];
var anf_arg5601 = G(self5570,"loc",L[2317]);
$step5568 = 15;
$al5572 = L[2318];
$field5602 = R.getColonFieldLoc(ED5,"loc",L[2318]);
if(R.isMethod($field5602)) {
$ans5571 = $field5602.full_meth(ED5,anf_arg5601);
} else {
if(!(R.isFunction($field5602))) {
R.ffi.throwNonFunApp(L[2318],$field5602);
}
$ans5571 = $field5602.app(anf_arg5601);
}
break;
case 15: var anf_arg5608 = $ans5571;
$step5568 = 16;
$al5572 = L[2319];
$field5603 = R.getColonFieldLoc(ED5,"text",L[2319]);
if(R.isMethod($field5603)) {
$ans5571 = $field5603.full_meth(ED5,(" is unbound. Although it has been previously defined, it is being used before it has been is initialized to a value."));
} else {
if(!(R.isFunction($field5603))) {
R.ffi.throwNonFunApp(L[2319],$field5603);
}
$ans5571 = $field5603.app((" is unbound. Although it has been previously defined, it is being used before it has been is initialized to a value."));
}
break;
case 16: var anf_arg5609 = $ans5571;
$step5568 = 17;
$al5572 = L[2311];
$field5610 = R.getColonFieldLoc(anf_method_obj5604,"make5",L[2311]);
if(R.isMethod($field5610)) {
$ans5571 = $field5610.full_meth(anf_method_obj5604,anf_arg5605,anf_arg5606,anf_arg5607,anf_arg5608,anf_arg5609);
} else {
if(!(R.isFunction($field5610))) {
R.ffi.throwNonFunApp(L[2311],$field5610);
}
$ans5571 = $field5610.app(anf_arg5605,anf_arg5606,anf_arg5607,anf_arg5608,anf_arg5609);
}
break;
case 17: var anf_arg5612 = $ans5571;
$step5568 = 18;
$al5572 = L[2310];
$field5613 = R.getColonFieldLoc(anf_method_obj5611,"make1",L[2310]);
if(R.isMethod($field5613)) {
$ans5571 = $field5613.full_meth(anf_method_obj5611,anf_arg5612);
} else {
if(!(R.isFunction($field5613))) {
R.ffi.throwNonFunApp(L[2310],$field5613);
}
$ans5571 = $field5613.app(anf_arg5612);
}
break;
case 18: ++R.GAS;
return $ans5571;
default: throw "No case numbered " + $step5568 + " in $temp_full5569";
}
}
} catch($e5615) {
if(R.isCont($e5615) && ($step5568 !== 18)) {
$e5615.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5572,$temp_full5569,$step5568,[self5570],[anf_method_obj5591,anf_method_obj5584,anf_arg5585,anf_arg5586,anf_arg5587,anf_arg5592,anf_method_obj5611,anf_method_obj5604,anf_arg5605,anf_arg5606,anf_arg5607,anf_arg5608]);
}
if(R.isPyretException($e5615)) {
$e5615.pyretStack.push($al5572);
}
throw $e5615;
}
};
var anf_variant_member6423 = R.makeMethod0($temp_full5569,"render-reason");
var $temp_full5617 = function($self5618,$loc$to$ast5619,$loc$to$src5620) {
var $step5616 = 0;
var $ans5621 = D;
var $al5622 = L[2322];
try {
if(R.isActivationRecord($self5618)) {
$step5616 = $self5618.step;
$al5622 = $self5618.from;
$ans5621 = $self5618.ans;
self5618 = $self5618.args[0];
loc$to$ast5619 = $self5618.args[1];
loc$to$src5620 = $self5618.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2322],3,$t);
}
var self5618 = $self5618;
var loc$to$ast5619 = $loc$to$ast5619;
var loc$to$src5620 = $loc$to$src5620;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5616) {
case 0: $step5616 = 1;
$al5622 = L[2321];
$field5623 = R.getColonFieldLoc(self5618,"render-reason",L[2321]);
if(R.isMethod($field5623)) {
$ans5621 = $field5623.full_meth(self5618);
} else {
if(!(R.isFunction($field5623))) {
R.ffi.throwNonFunApp(L[2321],$field5623);
}
$ans5621 = $field5623.app();
}
break;
case 1: ++R.GAS;
return $ans5621;
default: throw "No case numbered " + $step5616 + " in $temp_full5617";
}
}
} catch($e5624) {
if(R.isCont($e5624) && ($step5616 !== 1)) {
$e5624.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5622,$temp_full5617,$step5616,[self5618,loc$to$ast5619,loc$to$src5620],[]);
}
if(R.isPyretException($e5624)) {
$e5624.pyretStack.push($al5622);
}
throw $e5624;
}
};
var anf_variant_member6433 = R.makeMethod2($temp_full5617,"render-fancy-reason");
var $temp_full5626 = function($self5627) {
var $step5625 = 0;
var $ans5628 = D;
var $al5629 = L[2334];
try {
if(R.isActivationRecord($self5627)) {
$step5625 = $self5627.step;
$al5629 = $self5627.from;
$ans5628 = $self5627.ans;
self5627 = $self5627.args[0];
anf_method_obj5644 = $self5627.vars[0];
anf_method_obj5636 = $self5627.vars[1];
anf_arg5645 = $self5627.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2334],1,$t);
}
var self5627 = $self5627;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5625) {
case 0: $al5629 = L[2323];
var anf_method_obj5644 = G(ED5,"error",L[2323]);
$al5629 = L[2324];
var anf_method_obj5636 = G(ED5,"para",L[2324]);
$al5629 = L[2325];
var anf_method_obj5630 = G(self5627,"names",L[2325]);
$step5625 = 1;
$al5629 = L[2326];
$field5631 = R.getColonFieldLoc(anf_method_obj5630,"length",L[2326]);
if(R.isMethod($field5631)) {
$ans5628 = $field5631.full_meth(anf_method_obj5630);
} else {
if(!(R.isFunction($field5631))) {
R.ffi.throwNonFunApp(L[2326],$field5631);
}
$ans5628 = $field5631.app();
}
break;
case 1: var anf_arg5632 = $ans5628;
$step5625 = 2;
$al5629 = L[2327];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al5629,equal$always2);
}
$ans5628 = equal$always2.app(anf_arg5632,(1));
break;
case 2: var anf_arg5633 = $ans5628;
$al5629 = L[2327];
var anf_if5648 = R.checkWrapBoolean(anf_arg5633);
$step5625 = R.isPyretTrue(anf_if5648)?3:4;
break;
case 3: $step5625 = 5;
$al5629 = L[2328];
$field5634 = R.getColonFieldLoc(ED5,"text",L[2328]);
if(R.isMethod($field5634)) {
$ans5628 = $field5634.full_meth(ED5,("The following module failed to load:"));
} else {
if(!(R.isFunction($field5634))) {
R.ffi.throwNonFunApp(L[2328],$field5634);
}
$ans5628 = $field5634.app(("The following module failed to load:"));
}
break;
case 4: $step5625 = 5;
$al5629 = L[2329];
$field5635 = R.getColonFieldLoc(ED5,"text",L[2329]);
if(R.isMethod($field5635)) {
$ans5628 = $field5635.full_meth(ED5,("The following modules failed to load:"));
} else {
if(!(R.isFunction($field5635))) {
R.ffi.throwNonFunApp(L[2329],$field5635);
}
$ans5628 = $field5635.app(("The following modules failed to load:"));
}
break;
case 5: var anf_arg5637 = $ans5628;
$step5625 = 6;
$al5629 = L[2324];
$field5638 = R.getColonFieldLoc(anf_method_obj5636,"make1",L[2324]);
if(R.isMethod($field5638)) {
$ans5628 = $field5638.full_meth(anf_method_obj5636,anf_arg5637);
} else {
if(!(R.isFunction($field5638))) {
R.ffi.throwNonFunApp(L[2324],$field5638);
}
$ans5628 = $field5638.app(anf_arg5637);
}
break;
case 6: var anf_arg5645 = $ans5628;
$al5629 = L[2330];
var anf_method_obj5639 = G(self5627,"names",L[2330]);
$al5629 = L[2331];
var anf_arg5640 = G(ED5,"text",L[2331]);
$step5625 = 7;
$al5629 = L[2332];
$field5641 = R.getColonFieldLoc(anf_method_obj5639,"map",L[2332]);
if(R.isMethod($field5641)) {
$ans5628 = $field5641.full_meth(anf_method_obj5639,anf_arg5640);
} else {
if(!(R.isFunction($field5641))) {
R.ffi.throwNonFunApp(L[2332],$field5641);
}
$ans5628 = $field5641.app(anf_arg5640);
}
break;
case 7: var anf_arg5642 = $ans5628;
$step5625 = 8;
$al5629 = L[2333];
$field5643 = R.getColonFieldLoc(ED5,"h-sequence",L[2333]);
if(R.isMethod($field5643)) {
$ans5628 = $field5643.full_meth(ED5,anf_arg5642,(", "));
} else {
if(!(R.isFunction($field5643))) {
R.ffi.throwNonFunApp(L[2333],$field5643);
}
$ans5628 = $field5643.app(anf_arg5642,(", "));
}
break;
case 8: var anf_arg5646 = $ans5628;
$step5625 = 9;
$al5629 = L[2323];
$field5647 = R.getColonFieldLoc(anf_method_obj5644,"make2",L[2323]);
if(R.isMethod($field5647)) {
$ans5628 = $field5647.full_meth(anf_method_obj5644,anf_arg5645,anf_arg5646);
} else {
if(!(R.isFunction($field5647))) {
R.ffi.throwNonFunApp(L[2323],$field5647);
}
$ans5628 = $field5647.app(anf_arg5645,anf_arg5646);
}
break;
case 9: ++R.GAS;
return $ans5628;
default: throw "No case numbered " + $step5625 + " in $temp_full5626";
}
}
} catch($e5649) {
if(R.isCont($e5649) && ($step5625 !== 9)) {
$e5649.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5629,$temp_full5626,$step5625,[self5627],[anf_method_obj5644,anf_method_obj5636,anf_arg5645]);
}
if(R.isPyretException($e5649)) {
$e5649.pyretStack.push($al5629);
}
throw $e5649;
}
};
var anf_variant_member6434 = R.makeMethod0($temp_full5626,"render-reason");
var $temp_full5651 = function($self5652,$maybe$stack$loc5653,$src$available5654,$maybe$ast5655) {
var $step5650 = 0;
var $ans5656 = D;
var $al5657 = L[2400];
try {
if(R.isActivationRecord($self5652)) {
$step5650 = $self5652.step;
$al5657 = $self5652.from;
$ans5656 = $self5652.ans;
self5652 = $self5652.args[0];
maybe$stack$loc5653 = $self5652.args[1];
src$available5654 = $self5652.args[2];
maybe$ast5655 = $self5652.args[3];
anf_method_obj5823 = $self5652.vars[0];
cases5658 = $self5652.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2400],4,$t);
}
var self5652 = $self5652;
var maybe$stack$loc5653 = $maybe$stack$loc5653;
var src$available5654 = $src$available5654;
var maybe$ast5655 = $maybe$ast5655;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5650) {
case 0: $al5657 = L[2335];
var anf_method_obj5823 = G(ED5,"error",L[2335]);
$step5650 = 1;
$al5657 = L[2399];
if(!(R.isFunction(maybe$stack$loc5653))) {
R.ffi.throwNonFunApp($al5657,maybe$stack$loc5653);
}
$ans5656 = maybe$stack$loc5653.app((0),(true));
break;
case 1: var cases5658 = $ans5656;
$step5650 = 2;
$al5657 = L[2398];
R._checkAnn(L[2398],R.getDotAnn(L[2398],"O",O13,"Option"),cases5658);
break;
case 2: var $cases_dispatch5822 = {"some":3,
"none":4};
$al5657 = L[2381];
$step5650 = $cases_dispatch5822[cases5658.$name] || 5;
break;
case 3: if(cases5658.$arity !== 1) {
if(cases5658.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[2380],1,cases5658.$arity,L[2381]);
} else {
R.ffi.throwCasesSingletonErrorC(L[2380],true,L[2381]);
}
}
$step5650 = 6;
$al5657 = L[2382];
var $temp_branch5745 = function($loc5659) {
var $step5746 = 0;
var $ans5747 = D;
var $al5748 = L[2336];
try {
if(R.isActivationRecord($loc5659)) {
$step5746 = $loc5659.step;
$al5748 = $loc5659.from;
$ans5747 = $loc5659.ans;
loc5659 = $loc5659.args[0];
anf_method_obj5688 = $loc5659.vars[0];
anf_method_obj5670 = $loc5659.vars[1];
anf_arg5671 = $loc5659.vars[2];
anf_arg5672 = $loc5659.vars[3];
anf_arg5673 = $loc5659.vars[4];
anf_arg5674 = $loc5659.vars[5];
anf_arg5689 = $loc5659.vars[6];
anf_method_obj5682 = $loc5659.vars[7];
anf_arg5683 = $loc5659.vars[8];
anf_arg5684 = $loc5659.vars[9];
anf_arg5690 = $loc5659.vars[10];
anf_method_obj5709 = $loc5659.vars[11];
anf_arg5710 = $loc5659.vars[12];
anf_arg5711 = $loc5659.vars[13];
anf_method_obj5703 = $loc5659.vars[14];
anf_arg5704 = $loc5659.vars[15];
anf_arg5705 = $loc5659.vars[16];
anf_arg5706 = $loc5659.vars[17];
anf_method_obj5739 = $loc5659.vars[18];
anf_method_obj5722 = $loc5659.vars[19];
anf_arg5723 = $loc5659.vars[20];
anf_arg5724 = $loc5659.vars[21];
anf_arg5725 = $loc5659.vars[22];
anf_arg5726 = $loc5659.vars[23];
anf_arg5740 = $loc5659.vars[24];
anf_method_obj5734 = $loc5659.vars[25];
anf_arg5735 = $loc5659.vars[26];
anf_arg5736 = $loc5659.vars[27];
} else {
var loc5659 = $loc5659;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5746) {
case 0: $step5746 = 1;
$al5748 = L[2336];
$field5749 = R.getColonFieldLoc(loc5659,"is-builtin",L[2336]);
if(R.isMethod($field5749)) {
$ans5747 = $field5749.full_meth(loc5659);
} else {
if(!(R.isFunction($field5749))) {
R.ffi.throwNonFunApp(L[2336],$field5749);
}
$ans5747 = $field5749.app();
}
break;
case 1: var anf_arg5661 = $ans5747;
$al5748 = L[2336];
var anf_if5744 = R.checkWrapBoolean(anf_arg5661);
$step5746 = R.isPyretTrue(anf_if5744)?2:15;
break;
case 2: $al5748 = L[2337];
var anf_method_obj5688 = G(ED5,"sequence",L[2337]);
$al5748 = L[2338];
var anf_method_obj5670 = G(ED5,"para",L[2338]);
$step5746 = 3;
$al5748 = L[2339];
$field5750 = R.getColonFieldLoc(ED5,"text",L[2339]);
if(R.isMethod($field5750)) {
$ans5747 = $field5750.full_meth(ED5,("An array interaction, "));
} else {
if(!(R.isFunction($field5750))) {
R.ffi.throwNonFunApp(L[2339],$field5750);
}
$ans5747 = $field5750.app(("An array interaction, "));
}
break;
case 3: var anf_arg5671 = $ans5747;
$al5748 = L[2340];
var anf_arg5663 = G(self5652,"method-name",L[2340]);
$step5746 = 4;
$al5748 = L[2341];
$field5751 = R.getColonFieldLoc(ED5,"text",L[2341]);
if(R.isMethod($field5751)) {
$ans5747 = $field5751.full_meth(ED5,anf_arg5663);
} else {
if(!(R.isFunction($field5751))) {
R.ffi.throwNonFunApp(L[2341],$field5751);
}
$ans5747 = $field5751.app(anf_arg5663);
}
break;
case 4: var anf_arg5665 = $ans5747;
$step5746 = 5;
$al5748 = L[2342];
$field5752 = R.getColonFieldLoc(ED5,"code",L[2342]);
if(R.isMethod($field5752)) {
$ans5747 = $field5752.full_meth(ED5,anf_arg5665);
} else {
if(!(R.isFunction($field5752))) {
R.ffi.throwNonFunApp(L[2342],$field5752);
}
$ans5747 = $field5752.app(anf_arg5665);
}
break;
case 5: var anf_arg5672 = $ans5747;
$step5746 = 6;
$al5748 = L[2343];
$field5753 = R.getColonFieldLoc(ED5,"text",L[2343]);
if(R.isMethod($field5753)) {
$ans5747 = $field5753.full_meth(ED5,(", in "));
} else {
if(!(R.isFunction($field5753))) {
R.ffi.throwNonFunApp(L[2343],$field5753);
}
$ans5747 = $field5753.app((", in "));
}
break;
case 6: var anf_arg5673 = $ans5747;
$step5746 = 7;
$al5748 = L[2344];
$field5754 = R.getColonFieldLoc(ED5,"loc",L[2344]);
if(R.isMethod($field5754)) {
$ans5747 = $field5754.full_meth(ED5,loc5659);
} else {
if(!(R.isFunction($field5754))) {
R.ffi.throwNonFunApp(L[2344],$field5754);
}
$ans5747 = $field5754.app(loc5659);
}
break;
case 7: var anf_arg5674 = $ans5747;
$step5746 = 8;
$al5748 = L[2345];
$field5755 = R.getColonFieldLoc(ED5,"text",L[2345]);
if(R.isMethod($field5755)) {
$ans5747 = $field5755.full_meth(ED5,(" expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5755))) {
R.ffi.throwNonFunApp(L[2345],$field5755);
}
$ans5747 = $field5755.app((" expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 8: var anf_arg5675 = $ans5747;
$step5746 = 9;
$al5748 = L[2338];
$field5756 = R.getColonFieldLoc(anf_method_obj5670,"make5",L[2338]);
if(R.isMethod($field5756)) {
$ans5747 = $field5756.full_meth(anf_method_obj5670,anf_arg5671,anf_arg5672,anf_arg5673,anf_arg5674,anf_arg5675);
} else {
if(!(R.isFunction($field5756))) {
R.ffi.throwNonFunApp(L[2338],$field5756);
}
$ans5747 = $field5756.app(anf_arg5671,anf_arg5672,anf_arg5673,anf_arg5674,anf_arg5675);
}
break;
case 9: var anf_arg5689 = $ans5747;
$al5748 = L[2346];
var anf_method_obj5682 = G(ED5,"para",L[2346]);
$al5748 = L[2347];
var anf_arg5677 = G(self5652,"index",L[2347]);
$step5746 = 10;
$al5748 = L[2348];
$field5757 = R.getColonFieldLoc(ED5,"embed",L[2348]);
if(R.isMethod($field5757)) {
$ans5747 = $field5757.full_meth(ED5,anf_arg5677);
} else {
if(!(R.isFunction($field5757))) {
R.ffi.throwNonFunApp(L[2348],$field5757);
}
$ans5747 = $field5757.app(anf_arg5677);
}
break;
case 10: var anf_arg5683 = $ans5747;
$step5746 = 11;
$al5748 = L[2349];
$field5758 = R.getColonFieldLoc(ED5,"text",L[2349]);
if(R.isMethod($field5758)) {
$ans5747 = $field5758.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5758))) {
R.ffi.throwNonFunApp(L[2349],$field5758);
}
$ans5747 = $field5758.app((" is an invalid array index because "));
}
break;
case 11: var anf_arg5684 = $ans5747;
$al5748 = L[2350];
var anf_arg5680 = G(self5652,"reason",L[2350]);
$step5746 = 12;
$al5748 = L[2351];
$field5759 = R.getColonFieldLoc(ED5,"text",L[2351]);
if(R.isMethod($field5759)) {
$ans5747 = $field5759.full_meth(ED5,anf_arg5680);
} else {
if(!(R.isFunction($field5759))) {
R.ffi.throwNonFunApp(L[2351],$field5759);
}
$ans5747 = $field5759.app(anf_arg5680);
}
break;
case 12: var anf_arg5685 = $ans5747;
$step5746 = 13;
$al5748 = L[2346];
$field5760 = R.getColonFieldLoc(anf_method_obj5682,"make3",L[2346]);
if(R.isMethod($field5760)) {
$ans5747 = $field5760.full_meth(anf_method_obj5682,anf_arg5683,anf_arg5684,anf_arg5685);
} else {
if(!(R.isFunction($field5760))) {
R.ffi.throwNonFunApp(L[2346],$field5760);
}
$ans5747 = $field5760.app(anf_arg5683,anf_arg5684,anf_arg5685);
}
break;
case 13: var anf_arg5690 = $ans5747;
var anf_fun5687 = please$report$bug133.$var;
$step5746 = 14;
$al5748 = L[2352];
if(!(R.isFunction(anf_fun5687))) {
R.ffi.throwNonFunApp($al5748,anf_fun5687);
}
$ans5747 = anf_fun5687.app();
break;
case 14: var anf_arg5691 = $ans5747;
$step5746 = 37;
$al5748 = L[2337];
$field5761 = R.getColonFieldLoc(anf_method_obj5688,"make3",L[2337]);
if(R.isMethod($field5761)) {
$ans5747 = $field5761.full_meth(anf_method_obj5688,anf_arg5689,anf_arg5690,anf_arg5691);
} else {
if(!(R.isFunction($field5761))) {
R.ffi.throwNonFunApp(L[2337],$field5761);
}
$ans5747 = $field5761.app(anf_arg5689,anf_arg5690,anf_arg5691);
}
break;
case 15: $step5746 = 16;
$al5748 = L[2353];
if(!(R.isFunction(src$available5654))) {
R.ffi.throwNonFunApp($al5748,src$available5654);
}
$ans5747 = src$available5654.app(loc5659);
break;
case 16: var anf_arg5693 = $ans5747;
$al5748 = L[2353];
var anf_if5743 = R.checkWrapBoolean(anf_arg5693);
$step5746 = R.isPyretTrue(anf_if5743)?17:25;
break;
case 17: $al5748 = L[2354];
var anf_method_obj5709 = G(ED5,"sequence",L[2354]);
var anf_fun5694 = ed$intro122.$var;
$al5748 = L[2355];
var anf_arg5695 = G(self5652,"method-name",L[2355]);
$step5746 = 18;
$al5748 = L[2364];
if(!(R.isFunction(anf_fun5694))) {
R.ffi.throwNonFunApp($al5748,anf_fun5694);
}
$ans5747 = anf_fun5694.app(anf_arg5695,loc5659,(0),(true));
break;
case 18: var anf_arg5710 = $ans5747;
$step5746 = 19;
$al5748 = L[2356];
$field5762 = R.getColonFieldLoc(ED5,"cmcode",L[2356]);
if(R.isMethod($field5762)) {
$ans5747 = $field5762.full_meth(ED5,loc5659);
} else {
if(!(R.isFunction($field5762))) {
R.ffi.throwNonFunApp(L[2356],$field5762);
}
$ans5747 = $field5762.app(loc5659);
}
break;
case 19: var anf_arg5711 = $ans5747;
$al5748 = L[2357];
var anf_method_obj5703 = G(ED5,"para",L[2357]);
$step5746 = 20;
$al5748 = L[2358];
$field5763 = R.getColonFieldLoc(ED5,"text",L[2358]);
if(R.isMethod($field5763)) {
$ans5747 = $field5763.full_meth(ED5,("It. expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5763))) {
R.ffi.throwNonFunApp(L[2358],$field5763);
}
$ans5747 = $field5763.app(("It. expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 20: var anf_arg5704 = $ans5747;
$al5748 = L[2359];
var anf_arg5698 = G(self5652,"index",L[2359]);
$step5746 = 21;
$al5748 = L[2360];
$field5764 = R.getColonFieldLoc(ED5,"embed",L[2360]);
if(R.isMethod($field5764)) {
$ans5747 = $field5764.full_meth(ED5,anf_arg5698);
} else {
if(!(R.isFunction($field5764))) {
R.ffi.throwNonFunApp(L[2360],$field5764);
}
$ans5747 = $field5764.app(anf_arg5698);
}
break;
case 21: var anf_arg5705 = $ans5747;
$step5746 = 22;
$al5748 = L[2361];
$field5765 = R.getColonFieldLoc(ED5,"text",L[2361]);
if(R.isMethod($field5765)) {
$ans5747 = $field5765.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5765))) {
R.ffi.throwNonFunApp(L[2361],$field5765);
}
$ans5747 = $field5765.app((" is an invalid array index because "));
}
break;
case 22: var anf_arg5706 = $ans5747;
$al5748 = L[2362];
var anf_arg5701 = G(self5652,"reason",L[2362]);
$step5746 = 23;
$al5748 = L[2363];
$field5766 = R.getColonFieldLoc(ED5,"text",L[2363]);
if(R.isMethod($field5766)) {
$ans5747 = $field5766.full_meth(ED5,anf_arg5701);
} else {
if(!(R.isFunction($field5766))) {
R.ffi.throwNonFunApp(L[2363],$field5766);
}
$ans5747 = $field5766.app(anf_arg5701);
}
break;
case 23: var anf_arg5707 = $ans5747;
$step5746 = 24;
$al5748 = L[2357];
$field5767 = R.getColonFieldLoc(anf_method_obj5703,"make4",L[2357]);
if(R.isMethod($field5767)) {
$ans5747 = $field5767.full_meth(anf_method_obj5703,anf_arg5704,anf_arg5705,anf_arg5706,anf_arg5707);
} else {
if(!(R.isFunction($field5767))) {
R.ffi.throwNonFunApp(L[2357],$field5767);
}
$ans5747 = $field5767.app(anf_arg5704,anf_arg5705,anf_arg5706,anf_arg5707);
}
break;
case 24: var anf_arg5712 = $ans5747;
$step5746 = 37;
$al5748 = L[2354];
$field5768 = R.getColonFieldLoc(anf_method_obj5709,"make3",L[2354]);
if(R.isMethod($field5768)) {
$ans5747 = $field5768.full_meth(anf_method_obj5709,anf_arg5710,anf_arg5711,anf_arg5712);
} else {
if(!(R.isFunction($field5768))) {
R.ffi.throwNonFunApp(L[2354],$field5768);
}
$ans5747 = $field5768.app(anf_arg5710,anf_arg5711,anf_arg5712);
}
break;
case 25: $al5748 = L[2365];
var anf_method_obj5739 = G(ED5,"sequence",L[2365]);
$al5748 = L[2366];
var anf_method_obj5722 = G(ED5,"para",L[2366]);
$step5746 = 26;
$al5748 = L[2367];
$field5769 = R.getColonFieldLoc(ED5,"text",L[2367]);
if(R.isMethod($field5769)) {
$ans5747 = $field5769.full_meth(ED5,("An array interaction, "));
} else {
if(!(R.isFunction($field5769))) {
R.ffi.throwNonFunApp(L[2367],$field5769);
}
$ans5747 = $field5769.app(("An array interaction, "));
}
break;
case 26: var anf_arg5723 = $ans5747;
$al5748 = L[2368];
var anf_arg5715 = G(self5652,"method-name",L[2368]);
$step5746 = 27;
$al5748 = L[2369];
$field5770 = R.getColonFieldLoc(ED5,"text",L[2369]);
if(R.isMethod($field5770)) {
$ans5747 = $field5770.full_meth(ED5,anf_arg5715);
} else {
if(!(R.isFunction($field5770))) {
R.ffi.throwNonFunApp(L[2369],$field5770);
}
$ans5747 = $field5770.app(anf_arg5715);
}
break;
case 27: var anf_arg5717 = $ans5747;
$step5746 = 28;
$al5748 = L[2370];
$field5771 = R.getColonFieldLoc(ED5,"code",L[2370]);
if(R.isMethod($field5771)) {
$ans5747 = $field5771.full_meth(ED5,anf_arg5717);
} else {
if(!(R.isFunction($field5771))) {
R.ffi.throwNonFunApp(L[2370],$field5771);
}
$ans5747 = $field5771.app(anf_arg5717);
}
break;
case 28: var anf_arg5724 = $ans5747;
$step5746 = 29;
$al5748 = L[2371];
$field5772 = R.getColonFieldLoc(ED5,"text",L[2371]);
if(R.isMethod($field5772)) {
$ans5747 = $field5772.full_meth(ED5,(", in "));
} else {
if(!(R.isFunction($field5772))) {
R.ffi.throwNonFunApp(L[2371],$field5772);
}
$ans5747 = $field5772.app((", in "));
}
break;
case 29: var anf_arg5725 = $ans5747;
$step5746 = 30;
$al5748 = L[2372];
$field5773 = R.getColonFieldLoc(ED5,"loc",L[2372]);
if(R.isMethod($field5773)) {
$ans5747 = $field5773.full_meth(ED5,loc5659);
} else {
if(!(R.isFunction($field5773))) {
R.ffi.throwNonFunApp(L[2372],$field5773);
}
$ans5747 = $field5773.app(loc5659);
}
break;
case 30: var anf_arg5726 = $ans5747;
$step5746 = 31;
$al5748 = L[2373];
$field5774 = R.getColonFieldLoc(ED5,"text",L[2373]);
if(R.isMethod($field5774)) {
$ans5747 = $field5774.full_meth(ED5,("It expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5774))) {
R.ffi.throwNonFunApp(L[2373],$field5774);
}
$ans5747 = $field5774.app(("It expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 31: var anf_arg5727 = $ans5747;
$step5746 = 32;
$al5748 = L[2366];
$field5775 = R.getColonFieldLoc(anf_method_obj5722,"make5",L[2366]);
if(R.isMethod($field5775)) {
$ans5747 = $field5775.full_meth(anf_method_obj5722,anf_arg5723,anf_arg5724,anf_arg5725,anf_arg5726,anf_arg5727);
} else {
if(!(R.isFunction($field5775))) {
R.ffi.throwNonFunApp(L[2366],$field5775);
}
$ans5747 = $field5775.app(anf_arg5723,anf_arg5724,anf_arg5725,anf_arg5726,anf_arg5727);
}
break;
case 32: var anf_arg5740 = $ans5747;
$al5748 = L[2374];
var anf_method_obj5734 = G(ED5,"para",L[2374]);
$al5748 = L[2375];
var anf_arg5729 = G(self5652,"index",L[2375]);
$step5746 = 33;
$al5748 = L[2376];
$field5776 = R.getColonFieldLoc(ED5,"embed",L[2376]);
if(R.isMethod($field5776)) {
$ans5747 = $field5776.full_meth(ED5,anf_arg5729);
} else {
if(!(R.isFunction($field5776))) {
R.ffi.throwNonFunApp(L[2376],$field5776);
}
$ans5747 = $field5776.app(anf_arg5729);
}
break;
case 33: var anf_arg5735 = $ans5747;
$step5746 = 34;
$al5748 = L[2377];
$field5777 = R.getColonFieldLoc(ED5,"text",L[2377]);
if(R.isMethod($field5777)) {
$ans5747 = $field5777.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5777))) {
R.ffi.throwNonFunApp(L[2377],$field5777);
}
$ans5747 = $field5777.app((" is an invalid array index because "));
}
break;
case 34: var anf_arg5736 = $ans5747;
$al5748 = L[2378];
var anf_arg5732 = G(self5652,"reason",L[2378]);
$step5746 = 35;
$al5748 = L[2379];
$field5778 = R.getColonFieldLoc(ED5,"text",L[2379]);
if(R.isMethod($field5778)) {
$ans5747 = $field5778.full_meth(ED5,anf_arg5732);
} else {
if(!(R.isFunction($field5778))) {
R.ffi.throwNonFunApp(L[2379],$field5778);
}
$ans5747 = $field5778.app(anf_arg5732);
}
break;
case 35: var anf_arg5737 = $ans5747;
$step5746 = 36;
$al5748 = L[2374];
$field5779 = R.getColonFieldLoc(anf_method_obj5734,"make3",L[2374]);
if(R.isMethod($field5779)) {
$ans5747 = $field5779.full_meth(anf_method_obj5734,anf_arg5735,anf_arg5736,anf_arg5737);
} else {
if(!(R.isFunction($field5779))) {
R.ffi.throwNonFunApp(L[2374],$field5779);
}
$ans5747 = $field5779.app(anf_arg5735,anf_arg5736,anf_arg5737);
}
break;
case 36: var anf_arg5741 = $ans5747;
$step5746 = 37;
$al5748 = L[2365];
$field5780 = R.getColonFieldLoc(anf_method_obj5739,"make2",L[2365]);
if(R.isMethod($field5780)) {
$ans5747 = $field5780.full_meth(anf_method_obj5739,anf_arg5740,anf_arg5741);
} else {
if(!(R.isFunction($field5780))) {
R.ffi.throwNonFunApp(L[2365],$field5780);
}
$ans5747 = $field5780.app(anf_arg5740,anf_arg5741);
}
break;
case 37: ++R.GAS;
return $ans5747;
default: throw "No case numbered " + $step5746 + " in $temp_branch5745";
}
}
} catch($e5781) {
if(R.isCont($e5781) && ($step5746 !== 37)) {
$e5781.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5748,$temp_branch5745,$step5746,[loc5659],[anf_method_obj5688,anf_method_obj5670,anf_arg5671,anf_arg5672,anf_arg5673,anf_arg5674,anf_arg5689,anf_method_obj5682,anf_arg5683,anf_arg5684,anf_arg5690,anf_method_obj5709,anf_arg5710,anf_arg5711,anf_method_obj5703,anf_arg5704,anf_arg5705,anf_arg5706,anf_method_obj5739,anf_method_obj5722,anf_arg5723,anf_arg5724,anf_arg5725,anf_arg5726,anf_arg5740,anf_method_obj5734,anf_arg5735,anf_arg5736]);
}
if(R.isPyretException($e5781)) {
$e5781.pyretStack.push($al5748);
}
throw $e5781;
}
};
$ans5656 = cases5658.$app_fields($temp_branch5745,[false]);
break;
case 4: if(cases5658.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[2396],false,L[2381]);
}
$step5650 = 6;
$al5657 = L[2397];
var $temp_branch5807 = function($$resumer101) {
var $step5808 = 0;
var $ans5809 = D;
var $al5810 = L[2383];
try {
if(R.isActivationRecord($$resumer101)) {
$step5808 = $$resumer101.step;
$al5810 = $$resumer101.from;
$ans5809 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj5803 = $$resumer101.vars[0];
anf_method_obj5788 = $$resumer101.vars[1];
anf_arg5789 = $$resumer101.vars[2];
anf_arg5790 = $$resumer101.vars[3];
anf_arg5804 = $$resumer101.vars[4];
anf_method_obj5798 = $$resumer101.vars[5];
anf_arg5799 = $$resumer101.vars[6];
anf_arg5800 = $$resumer101.vars[7];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5808) {
case 0: $al5810 = L[2383];
var anf_method_obj5803 = G(ED5,"sequence",L[2383]);
$al5810 = L[2384];
var anf_method_obj5788 = G(ED5,"para",L[2384]);
$step5808 = 1;
$al5810 = L[2385];
$field5811 = R.getColonFieldLoc(ED5,"text",L[2385]);
if(R.isMethod($field5811)) {
$ans5809 = $field5811.full_meth(ED5,("An array interaction, "));
} else {
if(!(R.isFunction($field5811))) {
R.ffi.throwNonFunApp(L[2385],$field5811);
}
$ans5809 = $field5811.app(("An array interaction, "));
}
break;
case 1: var anf_arg5789 = $ans5809;
$al5810 = L[2386];
var anf_arg5783 = G(self5652,"method-name",L[2386]);
$step5808 = 2;
$al5810 = L[2387];
$field5812 = R.getColonFieldLoc(ED5,"text",L[2387]);
if(R.isMethod($field5812)) {
$ans5809 = $field5812.full_meth(ED5,anf_arg5783);
} else {
if(!(R.isFunction($field5812))) {
R.ffi.throwNonFunApp(L[2387],$field5812);
}
$ans5809 = $field5812.app(anf_arg5783);
}
break;
case 2: var anf_arg5785 = $ans5809;
$step5808 = 3;
$al5810 = L[2388];
$field5813 = R.getColonFieldLoc(ED5,"code",L[2388]);
if(R.isMethod($field5813)) {
$ans5809 = $field5813.full_meth(ED5,anf_arg5785);
} else {
if(!(R.isFunction($field5813))) {
R.ffi.throwNonFunApp(L[2388],$field5813);
}
$ans5809 = $field5813.app(anf_arg5785);
}
break;
case 3: var anf_arg5790 = $ans5809;
$step5808 = 4;
$al5810 = L[2389];
$field5814 = R.getColonFieldLoc(ED5,"text",L[2389]);
if(R.isMethod($field5814)) {
$ans5809 = $field5814.full_meth(ED5,("It expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5814))) {
R.ffi.throwNonFunApp(L[2389],$field5814);
}
$ans5809 = $field5814.app(("It expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 4: var anf_arg5791 = $ans5809;
$step5808 = 5;
$al5810 = L[2384];
$field5815 = R.getColonFieldLoc(anf_method_obj5788,"make3",L[2384]);
if(R.isMethod($field5815)) {
$ans5809 = $field5815.full_meth(anf_method_obj5788,anf_arg5789,anf_arg5790,anf_arg5791);
} else {
if(!(R.isFunction($field5815))) {
R.ffi.throwNonFunApp(L[2384],$field5815);
}
$ans5809 = $field5815.app(anf_arg5789,anf_arg5790,anf_arg5791);
}
break;
case 5: var anf_arg5804 = $ans5809;
$al5810 = L[2390];
var anf_method_obj5798 = G(ED5,"para",L[2390]);
$al5810 = L[2391];
var anf_arg5793 = G(self5652,"index",L[2391]);
$step5808 = 6;
$al5810 = L[2392];
$field5816 = R.getColonFieldLoc(ED5,"embed",L[2392]);
if(R.isMethod($field5816)) {
$ans5809 = $field5816.full_meth(ED5,anf_arg5793);
} else {
if(!(R.isFunction($field5816))) {
R.ffi.throwNonFunApp(L[2392],$field5816);
}
$ans5809 = $field5816.app(anf_arg5793);
}
break;
case 6: var anf_arg5799 = $ans5809;
$step5808 = 7;
$al5810 = L[2393];
$field5817 = R.getColonFieldLoc(ED5,"text",L[2393]);
if(R.isMethod($field5817)) {
$ans5809 = $field5817.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5817))) {
R.ffi.throwNonFunApp(L[2393],$field5817);
}
$ans5809 = $field5817.app((" is an invalid array index because "));
}
break;
case 7: var anf_arg5800 = $ans5809;
$al5810 = L[2394];
var anf_arg5796 = G(self5652,"reason",L[2394]);
$step5808 = 8;
$al5810 = L[2395];
$field5818 = R.getColonFieldLoc(ED5,"text",L[2395]);
if(R.isMethod($field5818)) {
$ans5809 = $field5818.full_meth(ED5,anf_arg5796);
} else {
if(!(R.isFunction($field5818))) {
R.ffi.throwNonFunApp(L[2395],$field5818);
}
$ans5809 = $field5818.app(anf_arg5796);
}
break;
case 8: var anf_arg5801 = $ans5809;
$step5808 = 9;
$al5810 = L[2390];
$field5819 = R.getColonFieldLoc(anf_method_obj5798,"make3",L[2390]);
if(R.isMethod($field5819)) {
$ans5809 = $field5819.full_meth(anf_method_obj5798,anf_arg5799,anf_arg5800,anf_arg5801);
} else {
if(!(R.isFunction($field5819))) {
R.ffi.throwNonFunApp(L[2390],$field5819);
}
$ans5809 = $field5819.app(anf_arg5799,anf_arg5800,anf_arg5801);
}
break;
case 9: var anf_arg5805 = $ans5809;
$step5808 = 10;
$al5810 = L[2383];
$field5820 = R.getColonFieldLoc(anf_method_obj5803,"make2",L[2383]);
if(R.isMethod($field5820)) {
$ans5809 = $field5820.full_meth(anf_method_obj5803,anf_arg5804,anf_arg5805);
} else {
if(!(R.isFunction($field5820))) {
R.ffi.throwNonFunApp(L[2383],$field5820);
}
$ans5809 = $field5820.app(anf_arg5804,anf_arg5805);
}
break;
case 10: ++R.GAS;
return $ans5809;
default: throw "No case numbered " + $step5808 + " in $temp_branch5807";
}
}
} catch($e5821) {
if(R.isCont($e5821) && ($step5808 !== 10)) {
$e5821.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5810,$temp_branch5807,$step5808,[],[anf_method_obj5803,anf_method_obj5788,anf_arg5789,anf_arg5790,anf_arg5804,anf_method_obj5798,anf_arg5799,anf_arg5800]);
}
if(R.isPyretException($e5821)) {
$e5821.pyretStack.push($al5810);
}
throw $e5821;
}
};
$ans5656 = cases5658.$app_fields($temp_branch5807,[]);
break;
case 5: $step5650 = 6;
$al5657 = L[2381];
$ans5656 = R.throwNoCasesMatched(L[2381],cases5658);
break;
case 6: var anf_arg5824 = $ans5656;
$step5650 = 7;
$al5657 = L[2335];
$field5825 = R.getColonFieldLoc(anf_method_obj5823,"make1",L[2335]);
if(R.isMethod($field5825)) {
$ans5656 = $field5825.full_meth(anf_method_obj5823,anf_arg5824);
} else {
if(!(R.isFunction($field5825))) {
R.ffi.throwNonFunApp(L[2335],$field5825);
}
$ans5656 = $field5825.app(anf_arg5824);
}
break;
case 7: ++R.GAS;
return $ans5656;
default: throw "No case numbered " + $step5650 + " in $temp_full5651";
}
}
} catch($e5826) {
if(R.isCont($e5826) && ($step5650 !== 7)) {
$e5826.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5657,$temp_full5651,$step5650,[self5652,maybe$stack$loc5653,src$available5654,maybe$ast5655],[anf_method_obj5823,cases5658]);
}
if(R.isPyretException($e5826)) {
$e5826.pyretStack.push($al5657);
}
throw $e5826;
}
};
var anf_variant_member6443 = R.makeMethod3($temp_full5651,"render-fancy-reason");
var $temp_full5828 = function($self5829) {
var $step5827 = 0;
var $ans5830 = D;
var $al5831 = L[2448];
try {
if(R.isActivationRecord($self5829)) {
$step5827 = $self5829.step;
$al5831 = $self5829.from;
$ans5830 = $self5829.ans;
self5829 = $self5829.args[0];
anf_arg5926 = $self5829.vars[0];
anf_method_obj5922 = $self5829.vars[1];
anf_method_obj5907 = $self5829.vars[2];
anf_arg5908 = $self5829.vars[3];
anf_arg5909 = $self5829.vars[4];
anf_arg5923 = $self5829.vars[5];
anf_method_obj5917 = $self5829.vars[6];
anf_arg5918 = $self5829.vars[7];
anf_arg5919 = $self5829.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2448],1,$t);
}
var self5829 = $self5829;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5827) {
case 0: var $temp_lam5833 = function($loc5834) {
var $step5832 = 0;
var $ans5835 = D;
var $al5836 = L[2433];
try {
if(R.isActivationRecord($loc5834)) {
$step5832 = $loc5834.step;
$al5836 = $loc5834.from;
$ans5835 = $loc5834.ans;
loc5834 = $loc5834.args[0];
anf_method_obj5865 = $loc5834.vars[0];
anf_method_obj5847 = $loc5834.vars[1];
anf_arg5848 = $loc5834.vars[2];
anf_arg5849 = $loc5834.vars[3];
anf_arg5850 = $loc5834.vars[4];
anf_arg5851 = $loc5834.vars[5];
anf_arg5866 = $loc5834.vars[6];
anf_method_obj5859 = $loc5834.vars[7];
anf_arg5860 = $loc5834.vars[8];
anf_arg5861 = $loc5834.vars[9];
anf_arg5867 = $loc5834.vars[10];
anf_method_obj5895 = $loc5834.vars[11];
anf_method_obj5878 = $loc5834.vars[12];
anf_arg5879 = $loc5834.vars[13];
anf_arg5880 = $loc5834.vars[14];
anf_arg5881 = $loc5834.vars[15];
anf_arg5882 = $loc5834.vars[16];
anf_arg5896 = $loc5834.vars[17];
anf_method_obj5890 = $loc5834.vars[18];
anf_arg5891 = $loc5834.vars[19];
anf_arg5892 = $loc5834.vars[20];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2433],1,$t);
}
var loc5834 = $loc5834;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5832) {
case 0: $step5832 = 1;
$al5836 = L[2401];
$field5837 = R.getColonFieldLoc(loc5834,"is-builtin",L[2401]);
if(R.isMethod($field5837)) {
$ans5835 = $field5837.full_meth(loc5834);
} else {
if(!(R.isFunction($field5837))) {
R.ffi.throwNonFunApp(L[2401],$field5837);
}
$ans5835 = $field5837.app();
}
break;
case 1: var anf_arg5838 = $ans5835;
$al5836 = L[2401];
var anf_if5899 = R.checkWrapBoolean(anf_arg5838);
$step5832 = R.isPyretTrue(anf_if5899)?2:15;
break;
case 2: $al5836 = L[2402];
var anf_method_obj5865 = G(ED5,"error",L[2402]);
$al5836 = L[2403];
var anf_method_obj5847 = G(ED5,"para",L[2403]);
$step5832 = 3;
$al5836 = L[2404];
$field5839 = R.getColonFieldLoc(ED5,"text",L[2404]);
if(R.isMethod($field5839)) {
$ans5835 = $field5839.full_meth(ED5,("An array interaction, "));
} else {
if(!(R.isFunction($field5839))) {
R.ffi.throwNonFunApp(L[2404],$field5839);
}
$ans5835 = $field5839.app(("An array interaction, "));
}
break;
case 3: var anf_arg5848 = $ans5835;
$al5836 = L[2405];
var anf_arg5840 = G(self5829,"method-name",L[2405]);
$step5832 = 4;
$al5836 = L[2406];
$field5841 = R.getColonFieldLoc(ED5,"text",L[2406]);
if(R.isMethod($field5841)) {
$ans5835 = $field5841.full_meth(ED5,anf_arg5840);
} else {
if(!(R.isFunction($field5841))) {
R.ffi.throwNonFunApp(L[2406],$field5841);
}
$ans5835 = $field5841.app(anf_arg5840);
}
break;
case 4: var anf_arg5842 = $ans5835;
$step5832 = 5;
$al5836 = L[2407];
$field5843 = R.getColonFieldLoc(ED5,"code",L[2407]);
if(R.isMethod($field5843)) {
$ans5835 = $field5843.full_meth(ED5,anf_arg5842);
} else {
if(!(R.isFunction($field5843))) {
R.ffi.throwNonFunApp(L[2407],$field5843);
}
$ans5835 = $field5843.app(anf_arg5842);
}
break;
case 5: var anf_arg5849 = $ans5835;
$step5832 = 6;
$al5836 = L[2408];
$field5844 = R.getColonFieldLoc(ED5,"text",L[2408]);
if(R.isMethod($field5844)) {
$ans5835 = $field5844.full_meth(ED5,(", in "));
} else {
if(!(R.isFunction($field5844))) {
R.ffi.throwNonFunApp(L[2408],$field5844);
}
$ans5835 = $field5844.app((", in "));
}
break;
case 6: var anf_arg5850 = $ans5835;
$step5832 = 7;
$al5836 = L[2409];
$field5845 = R.getColonFieldLoc(ED5,"loc",L[2409]);
if(R.isMethod($field5845)) {
$ans5835 = $field5845.full_meth(ED5,loc5834);
} else {
if(!(R.isFunction($field5845))) {
R.ffi.throwNonFunApp(L[2409],$field5845);
}
$ans5835 = $field5845.app(loc5834);
}
break;
case 7: var anf_arg5851 = $ans5835;
$step5832 = 8;
$al5836 = L[2410];
$field5846 = R.getColonFieldLoc(ED5,"text",L[2410]);
if(R.isMethod($field5846)) {
$ans5835 = $field5846.full_meth(ED5,(" expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5846))) {
R.ffi.throwNonFunApp(L[2410],$field5846);
}
$ans5835 = $field5846.app((" expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 8: var anf_arg5852 = $ans5835;
$step5832 = 9;
$al5836 = L[2403];
$field5853 = R.getColonFieldLoc(anf_method_obj5847,"make5",L[2403]);
if(R.isMethod($field5853)) {
$ans5835 = $field5853.full_meth(anf_method_obj5847,anf_arg5848,anf_arg5849,anf_arg5850,anf_arg5851,anf_arg5852);
} else {
if(!(R.isFunction($field5853))) {
R.ffi.throwNonFunApp(L[2403],$field5853);
}
$ans5835 = $field5853.app(anf_arg5848,anf_arg5849,anf_arg5850,anf_arg5851,anf_arg5852);
}
break;
case 9: var anf_arg5866 = $ans5835;
$al5836 = L[2411];
var anf_method_obj5859 = G(ED5,"para",L[2411]);
$al5836 = L[2412];
var anf_arg5854 = G(self5829,"index",L[2412]);
$step5832 = 10;
$al5836 = L[2413];
$field5855 = R.getColonFieldLoc(ED5,"embed",L[2413]);
if(R.isMethod($field5855)) {
$ans5835 = $field5855.full_meth(ED5,anf_arg5854);
} else {
if(!(R.isFunction($field5855))) {
R.ffi.throwNonFunApp(L[2413],$field5855);
}
$ans5835 = $field5855.app(anf_arg5854);
}
break;
case 10: var anf_arg5860 = $ans5835;
$step5832 = 11;
$al5836 = L[2414];
$field5856 = R.getColonFieldLoc(ED5,"text",L[2414]);
if(R.isMethod($field5856)) {
$ans5835 = $field5856.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5856))) {
R.ffi.throwNonFunApp(L[2414],$field5856);
}
$ans5835 = $field5856.app((" is an invalid array index because "));
}
break;
case 11: var anf_arg5861 = $ans5835;
$al5836 = L[2415];
var anf_arg5857 = G(self5829,"reason",L[2415]);
$step5832 = 12;
$al5836 = L[2416];
$field5858 = R.getColonFieldLoc(ED5,"text",L[2416]);
if(R.isMethod($field5858)) {
$ans5835 = $field5858.full_meth(ED5,anf_arg5857);
} else {
if(!(R.isFunction($field5858))) {
R.ffi.throwNonFunApp(L[2416],$field5858);
}
$ans5835 = $field5858.app(anf_arg5857);
}
break;
case 12: var anf_arg5862 = $ans5835;
$step5832 = 13;
$al5836 = L[2411];
$field5863 = R.getColonFieldLoc(anf_method_obj5859,"make3",L[2411]);
if(R.isMethod($field5863)) {
$ans5835 = $field5863.full_meth(anf_method_obj5859,anf_arg5860,anf_arg5861,anf_arg5862);
} else {
if(!(R.isFunction($field5863))) {
R.ffi.throwNonFunApp(L[2411],$field5863);
}
$ans5835 = $field5863.app(anf_arg5860,anf_arg5861,anf_arg5862);
}
break;
case 13: var anf_arg5867 = $ans5835;
var anf_fun5864 = please$report$bug133.$var;
$step5832 = 14;
$al5836 = L[2417];
if(!(R.isFunction(anf_fun5864))) {
R.ffi.throwNonFunApp($al5836,anf_fun5864);
}
$ans5835 = anf_fun5864.app();
break;
case 14: var anf_arg5868 = $ans5835;
$step5832 = 27;
$al5836 = L[2402];
$field5869 = R.getColonFieldLoc(anf_method_obj5865,"make3",L[2402]);
if(R.isMethod($field5869)) {
$ans5835 = $field5869.full_meth(anf_method_obj5865,anf_arg5866,anf_arg5867,anf_arg5868);
} else {
if(!(R.isFunction($field5869))) {
R.ffi.throwNonFunApp(L[2402],$field5869);
}
$ans5835 = $field5869.app(anf_arg5866,anf_arg5867,anf_arg5868);
}
break;
case 15: $al5836 = L[2418];
var anf_method_obj5895 = G(ED5,"error",L[2418]);
$al5836 = L[2419];
var anf_method_obj5878 = G(ED5,"para",L[2419]);
$step5832 = 16;
$al5836 = L[2420];
$field5870 = R.getColonFieldLoc(ED5,"text",L[2420]);
if(R.isMethod($field5870)) {
$ans5835 = $field5870.full_meth(ED5,("An array interaction, "));
} else {
if(!(R.isFunction($field5870))) {
R.ffi.throwNonFunApp(L[2420],$field5870);
}
$ans5835 = $field5870.app(("An array interaction, "));
}
break;
case 16: var anf_arg5879 = $ans5835;
$al5836 = L[2421];
var anf_arg5871 = G(self5829,"method-name",L[2421]);
$step5832 = 17;
$al5836 = L[2422];
$field5872 = R.getColonFieldLoc(ED5,"text",L[2422]);
if(R.isMethod($field5872)) {
$ans5835 = $field5872.full_meth(ED5,anf_arg5871);
} else {
if(!(R.isFunction($field5872))) {
R.ffi.throwNonFunApp(L[2422],$field5872);
}
$ans5835 = $field5872.app(anf_arg5871);
}
break;
case 17: var anf_arg5873 = $ans5835;
$step5832 = 18;
$al5836 = L[2423];
$field5874 = R.getColonFieldLoc(ED5,"code",L[2423]);
if(R.isMethod($field5874)) {
$ans5835 = $field5874.full_meth(ED5,anf_arg5873);
} else {
if(!(R.isFunction($field5874))) {
R.ffi.throwNonFunApp(L[2423],$field5874);
}
$ans5835 = $field5874.app(anf_arg5873);
}
break;
case 18: var anf_arg5880 = $ans5835;
$step5832 = 19;
$al5836 = L[2424];
$field5875 = R.getColonFieldLoc(ED5,"text",L[2424]);
if(R.isMethod($field5875)) {
$ans5835 = $field5875.full_meth(ED5,(", in "));
} else {
if(!(R.isFunction($field5875))) {
R.ffi.throwNonFunApp(L[2424],$field5875);
}
$ans5835 = $field5875.app((", in "));
}
break;
case 19: var anf_arg5881 = $ans5835;
$step5832 = 20;
$al5836 = L[2425];
$field5876 = R.getColonFieldLoc(ED5,"loc",L[2425]);
if(R.isMethod($field5876)) {
$ans5835 = $field5876.full_meth(ED5,loc5834);
} else {
if(!(R.isFunction($field5876))) {
R.ffi.throwNonFunApp(L[2425],$field5876);
}
$ans5835 = $field5876.app(loc5834);
}
break;
case 20: var anf_arg5882 = $ans5835;
$step5832 = 21;
$al5836 = L[2426];
$field5877 = R.getColonFieldLoc(ED5,"text",L[2426]);
if(R.isMethod($field5877)) {
$ans5835 = $field5877.full_meth(ED5,(" expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5877))) {
R.ffi.throwNonFunApp(L[2426],$field5877);
}
$ans5835 = $field5877.app((" expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 21: var anf_arg5883 = $ans5835;
$step5832 = 22;
$al5836 = L[2419];
$field5884 = R.getColonFieldLoc(anf_method_obj5878,"make5",L[2419]);
if(R.isMethod($field5884)) {
$ans5835 = $field5884.full_meth(anf_method_obj5878,anf_arg5879,anf_arg5880,anf_arg5881,anf_arg5882,anf_arg5883);
} else {
if(!(R.isFunction($field5884))) {
R.ffi.throwNonFunApp(L[2419],$field5884);
}
$ans5835 = $field5884.app(anf_arg5879,anf_arg5880,anf_arg5881,anf_arg5882,anf_arg5883);
}
break;
case 22: var anf_arg5896 = $ans5835;
$al5836 = L[2427];
var anf_method_obj5890 = G(ED5,"para",L[2427]);
$al5836 = L[2428];
var anf_arg5885 = G(self5829,"index",L[2428]);
$step5832 = 23;
$al5836 = L[2429];
$field5886 = R.getColonFieldLoc(ED5,"embed",L[2429]);
if(R.isMethod($field5886)) {
$ans5835 = $field5886.full_meth(ED5,anf_arg5885);
} else {
if(!(R.isFunction($field5886))) {
R.ffi.throwNonFunApp(L[2429],$field5886);
}
$ans5835 = $field5886.app(anf_arg5885);
}
break;
case 23: var anf_arg5891 = $ans5835;
$step5832 = 24;
$al5836 = L[2430];
$field5887 = R.getColonFieldLoc(ED5,"text",L[2430]);
if(R.isMethod($field5887)) {
$ans5835 = $field5887.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5887))) {
R.ffi.throwNonFunApp(L[2430],$field5887);
}
$ans5835 = $field5887.app((" is an invalid array index because "));
}
break;
case 24: var anf_arg5892 = $ans5835;
$al5836 = L[2431];
var anf_arg5888 = G(self5829,"reason",L[2431]);
$step5832 = 25;
$al5836 = L[2432];
$field5889 = R.getColonFieldLoc(ED5,"text",L[2432]);
if(R.isMethod($field5889)) {
$ans5835 = $field5889.full_meth(ED5,anf_arg5888);
} else {
if(!(R.isFunction($field5889))) {
R.ffi.throwNonFunApp(L[2432],$field5889);
}
$ans5835 = $field5889.app(anf_arg5888);
}
break;
case 25: var anf_arg5893 = $ans5835;
$step5832 = 26;
$al5836 = L[2427];
$field5894 = R.getColonFieldLoc(anf_method_obj5890,"make3",L[2427]);
if(R.isMethod($field5894)) {
$ans5835 = $field5894.full_meth(anf_method_obj5890,anf_arg5891,anf_arg5892,anf_arg5893);
} else {
if(!(R.isFunction($field5894))) {
R.ffi.throwNonFunApp(L[2427],$field5894);
}
$ans5835 = $field5894.app(anf_arg5891,anf_arg5892,anf_arg5893);
}
break;
case 26: var anf_arg5897 = $ans5835;
$step5832 = 27;
$al5836 = L[2418];
$field5898 = R.getColonFieldLoc(anf_method_obj5895,"make2",L[2418]);
if(R.isMethod($field5898)) {
$ans5835 = $field5898.full_meth(anf_method_obj5895,anf_arg5896,anf_arg5897);
} else {
if(!(R.isFunction($field5898))) {
R.ffi.throwNonFunApp(L[2418],$field5898);
}
$ans5835 = $field5898.app(anf_arg5896,anf_arg5897);
}
break;
case 27: ++R.GAS;
return $ans5835;
default: throw "No case numbered " + $step5832 + " in $temp_lam5833";
}
}
} catch($e5900) {
if(R.isCont($e5900) && ($step5832 !== 27)) {
$e5900.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5836,$temp_lam5833,$step5832,[loc5834],[anf_method_obj5865,anf_method_obj5847,anf_arg5848,anf_arg5849,anf_arg5850,anf_arg5851,anf_arg5866,anf_method_obj5859,anf_arg5860,anf_arg5861,anf_arg5867,anf_method_obj5895,anf_method_obj5878,anf_arg5879,anf_arg5880,anf_arg5881,anf_arg5882,anf_arg5896,anf_method_obj5890,anf_arg5891,anf_arg5892]);
}
if(R.isPyretException($e5900)) {
$e5900.pyretStack.push($al5836);
}
throw $e5900;
}
};
var anf_arg5926 = R.makeFunction($temp_lam5833,"");
$al5831 = L[2434];
var anf_method_obj5922 = G(ED5,"error",L[2434]);
$al5831 = L[2435];
var anf_method_obj5907 = G(ED5,"para",L[2435]);
$step5827 = 1;
$al5831 = L[2436];
$field5901 = R.getColonFieldLoc(ED5,"text",L[2436]);
if(R.isMethod($field5901)) {
$ans5830 = $field5901.full_meth(ED5,("An array interaction, "));
} else {
if(!(R.isFunction($field5901))) {
R.ffi.throwNonFunApp(L[2436],$field5901);
}
$ans5830 = $field5901.app(("An array interaction, "));
}
break;
case 1: var anf_arg5908 = $ans5830;
$al5831 = L[2437];
var anf_arg5902 = G(self5829,"method-name",L[2437]);
$step5827 = 2;
$al5831 = L[2438];
$field5903 = R.getColonFieldLoc(ED5,"text",L[2438]);
if(R.isMethod($field5903)) {
$ans5830 = $field5903.full_meth(ED5,anf_arg5902);
} else {
if(!(R.isFunction($field5903))) {
R.ffi.throwNonFunApp(L[2438],$field5903);
}
$ans5830 = $field5903.app(anf_arg5902);
}
break;
case 2: var anf_arg5904 = $ans5830;
$step5827 = 3;
$al5831 = L[2439];
$field5905 = R.getColonFieldLoc(ED5,"code",L[2439]);
if(R.isMethod($field5905)) {
$ans5830 = $field5905.full_meth(ED5,anf_arg5904);
} else {
if(!(R.isFunction($field5905))) {
R.ffi.throwNonFunApp(L[2439],$field5905);
}
$ans5830 = $field5905.app(anf_arg5904);
}
break;
case 3: var anf_arg5909 = $ans5830;
$step5827 = 4;
$al5831 = L[2440];
$field5906 = R.getColonFieldLoc(ED5,"text",L[2440]);
if(R.isMethod($field5906)) {
$ans5830 = $field5906.full_meth(ED5,(" expects that the index passed to it is an integer within the bounds of the array. "));
} else {
if(!(R.isFunction($field5906))) {
R.ffi.throwNonFunApp(L[2440],$field5906);
}
$ans5830 = $field5906.app((" expects that the index passed to it is an integer within the bounds of the array. "));
}
break;
case 4: var anf_arg5910 = $ans5830;
$step5827 = 5;
$al5831 = L[2435];
$field5911 = R.getColonFieldLoc(anf_method_obj5907,"make3",L[2435]);
if(R.isMethod($field5911)) {
$ans5830 = $field5911.full_meth(anf_method_obj5907,anf_arg5908,anf_arg5909,anf_arg5910);
} else {
if(!(R.isFunction($field5911))) {
R.ffi.throwNonFunApp(L[2435],$field5911);
}
$ans5830 = $field5911.app(anf_arg5908,anf_arg5909,anf_arg5910);
}
break;
case 5: var anf_arg5923 = $ans5830;
$al5831 = L[2441];
var anf_method_obj5917 = G(ED5,"para",L[2441]);
$al5831 = L[2442];
var anf_arg5912 = G(self5829,"index",L[2442]);
$step5827 = 6;
$al5831 = L[2443];
$field5913 = R.getColonFieldLoc(ED5,"embed",L[2443]);
if(R.isMethod($field5913)) {
$ans5830 = $field5913.full_meth(ED5,anf_arg5912);
} else {
if(!(R.isFunction($field5913))) {
R.ffi.throwNonFunApp(L[2443],$field5913);
}
$ans5830 = $field5913.app(anf_arg5912);
}
break;
case 6: var anf_arg5918 = $ans5830;
$step5827 = 7;
$al5831 = L[2444];
$field5914 = R.getColonFieldLoc(ED5,"text",L[2444]);
if(R.isMethod($field5914)) {
$ans5830 = $field5914.full_meth(ED5,(" is an invalid array index because "));
} else {
if(!(R.isFunction($field5914))) {
R.ffi.throwNonFunApp(L[2444],$field5914);
}
$ans5830 = $field5914.app((" is an invalid array index because "));
}
break;
case 7: var anf_arg5919 = $ans5830;
$al5831 = L[2445];
var anf_arg5915 = G(self5829,"reason",L[2445]);
$step5827 = 8;
$al5831 = L[2446];
$field5916 = R.getColonFieldLoc(ED5,"text",L[2446]);
if(R.isMethod($field5916)) {
$ans5830 = $field5916.full_meth(ED5,anf_arg5915);
} else {
if(!(R.isFunction($field5916))) {
R.ffi.throwNonFunApp(L[2446],$field5916);
}
$ans5830 = $field5916.app(anf_arg5915);
}
break;
case 8: var anf_arg5920 = $ans5830;
$step5827 = 9;
$al5831 = L[2441];
$field5921 = R.getColonFieldLoc(anf_method_obj5917,"make3",L[2441]);
if(R.isMethod($field5921)) {
$ans5830 = $field5921.full_meth(anf_method_obj5917,anf_arg5918,anf_arg5919,anf_arg5920);
} else {
if(!(R.isFunction($field5921))) {
R.ffi.throwNonFunApp(L[2441],$field5921);
}
$ans5830 = $field5921.app(anf_arg5918,anf_arg5919,anf_arg5920);
}
break;
case 9: var anf_arg5924 = $ans5830;
$step5827 = 10;
$al5831 = L[2434];
$field5925 = R.getColonFieldLoc(anf_method_obj5922,"make2",L[2434]);
if(R.isMethod($field5925)) {
$ans5830 = $field5925.full_meth(anf_method_obj5922,anf_arg5923,anf_arg5924);
} else {
if(!(R.isFunction($field5925))) {
R.ffi.throwNonFunApp(L[2434],$field5925);
}
$ans5830 = $field5925.app(anf_arg5923,anf_arg5924);
}
break;
case 10: var anf_arg5927 = $ans5830;
$step5827 = 11;
$al5831 = L[2447];
$field5928 = R.getColonFieldLoc(ED5,"maybe-stack-loc",L[2447]);
if(R.isMethod($field5928)) {
$ans5830 = $field5928.full_meth(ED5,(0),(true),anf_arg5926,anf_arg5927);
} else {
if(!(R.isFunction($field5928))) {
R.ffi.throwNonFunApp(L[2447],$field5928);
}
$ans5830 = $field5928.app((0),(true),anf_arg5926,anf_arg5927);
}
break;
case 11: ++R.GAS;
return $ans5830;
default: throw "No case numbered " + $step5827 + " in $temp_full5828";
}
}
} catch($e5929) {
if(R.isCont($e5929) && ($step5827 !== 11)) {
$e5929.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5831,$temp_full5828,$step5827,[self5829],[anf_arg5926,anf_method_obj5922,anf_method_obj5907,anf_arg5908,anf_arg5909,anf_arg5923,anf_method_obj5917,anf_arg5918,anf_arg5919]);
}
if(R.isPyretException($e5929)) {
$e5929.pyretStack.push($al5831);
}
throw $e5929;
}
};
var anf_variant_member6444 = R.makeMethod0($temp_full5828,"render-reason");
var $temp_full5931 = function($self5932,$$underscore5933,$$underscore5934) {
var $step5930 = 0;
var $ans5935 = D;
var $al5936 = L[2450];
try {
if(R.isActivationRecord($self5932)) {
$step5930 = $self5932.step;
$al5936 = $self5932.from;
$ans5935 = $self5932.ans;
self5932 = $self5932.args[0];
$underscore5933 = $self5932.args[1];
$underscore5934 = $self5932.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2450],3,$t);
}
var self5932 = $self5932;
var $underscore5933 = $$underscore5933;
var $underscore5934 = $$underscore5934;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5930) {
case 0: $step5930 = 1;
$al5936 = L[2449];
$field5937 = R.getColonFieldLoc(self5932,"render-reason",L[2449]);
if(R.isMethod($field5937)) {
$ans5935 = $field5937.full_meth(self5932);
} else {
if(!(R.isFunction($field5937))) {
R.ffi.throwNonFunApp(L[2449],$field5937);
}
$ans5935 = $field5937.app();
}
break;
case 1: ++R.GAS;
return $ans5935;
default: throw "No case numbered " + $step5930 + " in $temp_full5931";
}
}
} catch($e5938) {
if(R.isCont($e5938) && ($step5930 !== 1)) {
$e5938.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5936,$temp_full5931,$step5930,[self5932,$underscore5933,$underscore5934],[]);
}
if(R.isPyretException($e5938)) {
$e5938.pyretStack.push($al5936);
}
throw $e5938;
}
};
var anf_variant_member6456 = R.makeMethod2($temp_full5931,"render-fancy-reason");
var $temp_full5940 = function($self5941) {
var $step5939 = 0;
var $ans5942 = D;
var $al5943 = L[2487];
try {
if(R.isActivationRecord($self5941)) {
$step5939 = $self5941.step;
$al5943 = $self5941.from;
$ans5942 = $self5941.ans;
self5941 = $self5941.args[0];
value15944 = $self5941.vars[0];
value25946 = $self5941.vars[1];
within$error5984 = $self5941.vars[2];
anf_method_obj6011 = $self5941.vars[3];
anf_method_obj5998 = $self5941.vars[4];
anf_arg6012 = $self5941.vars[5];
anf_method_obj6003 = $self5941.vars[6];
anf_arg6013 = $self5941.vars[7];
anf_method_obj6008 = $self5941.vars[8];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2487],1,$t);
}
var self5941 = $self5941;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5939) {
case 0: $al5943 = L[2451];
var value15944 = G(self5941,"value1",L[2451]);
$al5943 = L[2452];
var value25946 = G(self5941,"value2",L[2452]);
$step5939 = 1;
$al5943 = L[2453];
if(!(R.isFunction(is$number3))) {
R.ffi.throwNonFunApp($al5943,is$number3);
}
$ans5942 = is$number3.app(value15944);
break;
case 1: var anf_arg5945 = $ans5942;
$al5943 = L[2453];
var anf_if6017 = R.checkWrapBoolean(anf_arg5945);
$step5939 = R.isPyretTrue(anf_if6017)?2:4;
break;
case 2: $step5939 = 3;
$al5943 = L[2454];
if(!(R.isFunction(is$number3))) {
R.ffi.throwNonFunApp($al5943,is$number3);
}
$ans5942 = is$number3.app(value25946);
break;
case 3: var anf_arg5947 = $ans5942;
$step5939 = 5;
$al5943 = L[2454];
$ans5942 = R.checkWrapBoolean(anf_arg5947);
break;
case 4: $step5939 = 5;
$ans5942 = (false);
break;
case 5: var anf_arg5948 = $ans5942;
$al5943 = L[2455];
var anf_if6016 = R.checkWrapBoolean(anf_arg5948);
$step5939 = R.isPyretTrue(anf_if6016)?6:20;
break;
case 6: var within$error5984 = {"$var":D};
var $temp_lam5950 = function($message5951) {
var $step5949 = 0;
var $ans5952 = D;
var $al5953 = L[2468];
try {
if(R.isActivationRecord($message5951)) {
$step5949 = $message5951.step;
$al5953 = $message5951.from;
$ans5952 = $message5951.ans;
message5951 = $message5951.args[0];
anf_method_obj5976 = $message5951.vars[0];
anf_method_obj5955 = $message5951.vars[1];
anf_arg5977 = $message5951.vars[2];
anf_method_obj5959 = $message5951.vars[3];
anf_arg5978 = $message5951.vars[4];
anf_method_obj5963 = $message5951.vars[5];
anf_arg5979 = $message5951.vars[6];
anf_method_obj5971 = $message5951.vars[7];
anf_arg5972 = $message5951.vars[8];
anf_arg5973 = $message5951.vars[9];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2468],1,$t);
}
var message5951 = $message5951;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5949) {
case 0: $al5953 = L[2456];
var anf_method_obj5976 = G(ED5,"error",L[2456]);
$al5953 = L[2457];
var anf_method_obj5955 = G(ED5,"para",L[2457]);
$step5949 = 1;
$al5953 = L[2458];
$field5954 = R.getColonFieldLoc(ED5,"text",L[2458]);
if(R.isMethod($field5954)) {
$ans5952 = $field5954.full_meth(ED5,message5951);
} else {
if(!(R.isFunction($field5954))) {
R.ffi.throwNonFunApp(L[2458],$field5954);
}
$ans5952 = $field5954.app(message5951);
}
break;
case 1: var anf_arg5956 = $ans5952;
$step5949 = 2;
$al5953 = L[2457];
$field5957 = R.getColonFieldLoc(anf_method_obj5955,"make1",L[2457]);
if(R.isMethod($field5957)) {
$ans5952 = $field5957.full_meth(anf_method_obj5955,anf_arg5956);
} else {
if(!(R.isFunction($field5957))) {
R.ffi.throwNonFunApp(L[2457],$field5957);
}
$ans5952 = $field5957.app(anf_arg5956);
}
break;
case 2: var anf_arg5977 = $ans5952;
$al5953 = L[2459];
var anf_method_obj5959 = G(ED5,"para",L[2459]);
$step5949 = 3;
$al5953 = L[2460];
$field5958 = R.getColonFieldLoc(ED5,"embed",L[2460]);
if(R.isMethod($field5958)) {
$ans5952 = $field5958.full_meth(ED5,value15944);
} else {
if(!(R.isFunction($field5958))) {
R.ffi.throwNonFunApp(L[2460],$field5958);
}
$ans5952 = $field5958.app(value15944);
}
break;
case 3: var anf_arg5960 = $ans5952;
$step5949 = 4;
$al5953 = L[2459];
$field5961 = R.getColonFieldLoc(anf_method_obj5959,"make1",L[2459]);
if(R.isMethod($field5961)) {
$ans5952 = $field5961.full_meth(anf_method_obj5959,anf_arg5960);
} else {
if(!(R.isFunction($field5961))) {
R.ffi.throwNonFunApp(L[2459],$field5961);
}
$ans5952 = $field5961.app(anf_arg5960);
}
break;
case 4: var anf_arg5978 = $ans5952;
$al5953 = L[2461];
var anf_method_obj5963 = G(ED5,"para",L[2461]);
$step5949 = 5;
$al5953 = L[2462];
$field5962 = R.getColonFieldLoc(ED5,"embed",L[2462]);
if(R.isMethod($field5962)) {
$ans5952 = $field5962.full_meth(ED5,value25946);
} else {
if(!(R.isFunction($field5962))) {
R.ffi.throwNonFunApp(L[2462],$field5962);
}
$ans5952 = $field5962.app(value25946);
}
break;
case 5: var anf_arg5964 = $ans5952;
$step5949 = 6;
$al5953 = L[2461];
$field5965 = R.getColonFieldLoc(anf_method_obj5963,"make1",L[2461]);
if(R.isMethod($field5965)) {
$ans5952 = $field5965.full_meth(anf_method_obj5963,anf_arg5964);
} else {
if(!(R.isFunction($field5965))) {
R.ffi.throwNonFunApp(L[2461],$field5965);
}
$ans5952 = $field5965.app(anf_arg5964);
}
break;
case 6: var anf_arg5979 = $ans5952;
$al5953 = L[2463];
var anf_method_obj5971 = G(ED5,"para",L[2463]);
$step5949 = 7;
$al5953 = L[2464];
$field5966 = R.getColonFieldLoc(ED5,"text",L[2464]);
if(R.isMethod($field5966)) {
$ans5952 = $field5966.full_meth(ED5,("Consider using the "));
} else {
if(!(R.isFunction($field5966))) {
R.ffi.throwNonFunApp(L[2464],$field5966);
}
$ans5952 = $field5966.app(("Consider using the "));
}
break;
case 7: var anf_arg5972 = $ans5952;
$step5949 = 8;
$al5953 = L[2465];
$field5967 = R.getColonFieldLoc(ED5,"text",L[2465]);
if(R.isMethod($field5967)) {
$ans5952 = $field5967.full_meth(ED5,("within"));
} else {
if(!(R.isFunction($field5967))) {
R.ffi.throwNonFunApp(L[2465],$field5967);
}
$ans5952 = $field5967.app(("within"));
}
break;
case 8: var anf_arg5968 = $ans5952;
$step5949 = 9;
$al5953 = L[2466];
$field5969 = R.getColonFieldLoc(ED5,"code",L[2466]);
if(R.isMethod($field5969)) {
$ans5952 = $field5969.full_meth(ED5,anf_arg5968);
} else {
if(!(R.isFunction($field5969))) {
R.ffi.throwNonFunApp(L[2466],$field5969);
}
$ans5952 = $field5969.app(anf_arg5968);
}
break;
case 9: var anf_arg5973 = $ans5952;
$step5949 = 10;
$al5953 = L[2467];
$field5970 = R.getColonFieldLoc(ED5,"text",L[2467]);
if(R.isMethod($field5970)) {
$ans5952 = $field5970.full_meth(ED5,(" function to compare them instead."));
} else {
if(!(R.isFunction($field5970))) {
R.ffi.throwNonFunApp(L[2467],$field5970);
}
$ans5952 = $field5970.app((" function to compare them instead."));
}
break;
case 10: var anf_arg5974 = $ans5952;
$step5949 = 11;
$al5953 = L[2463];
$field5975 = R.getColonFieldLoc(anf_method_obj5971,"make3",L[2463]);
if(R.isMethod($field5975)) {
$ans5952 = $field5975.full_meth(anf_method_obj5971,anf_arg5972,anf_arg5973,anf_arg5974);
} else {
if(!(R.isFunction($field5975))) {
R.ffi.throwNonFunApp(L[2463],$field5975);
}
$ans5952 = $field5975.app(anf_arg5972,anf_arg5973,anf_arg5974);
}
break;
case 11: var anf_arg5980 = $ans5952;
$step5949 = 12;
$al5953 = L[2456];
$field5981 = R.getColonFieldLoc(anf_method_obj5976,"make4",L[2456]);
if(R.isMethod($field5981)) {
$ans5952 = $field5981.full_meth(anf_method_obj5976,anf_arg5977,anf_arg5978,anf_arg5979,anf_arg5980);
} else {
if(!(R.isFunction($field5981))) {
R.ffi.throwNonFunApp(L[2456],$field5981);
}
$ans5952 = $field5981.app(anf_arg5977,anf_arg5978,anf_arg5979,anf_arg5980);
}
break;
case 12: ++R.GAS;
return $ans5952;
default: throw "No case numbered " + $step5949 + " in $temp_lam5950";
}
}
} catch($e5982) {
if(R.isCont($e5982) && ($step5949 !== 12)) {
$e5982.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5953,$temp_lam5950,$step5949,[message5951],[anf_method_obj5976,anf_method_obj5955,anf_arg5977,anf_method_obj5959,anf_arg5978,anf_method_obj5963,anf_arg5979,anf_method_obj5971,anf_arg5972,anf_arg5973]);
}
if(R.isPyretException($e5982)) {
$e5982.pyretStack.push($al5953);
}
throw $e5982;
}
};
var anf_assign5983 = R.makeFunction($temp_lam5950,"within-error");
within$error5984.$var = anf_assign5983;
$step5939 = 7;
$al5943 = L[2469];
if(!(R.isFunction(num$is$roughnum2))) {
R.ffi.throwNonFunApp($al5943,num$is$roughnum2);
}
$ans5942 = num$is$roughnum2.app(value15944);
break;
case 7: var anf_arg5985 = $ans5942;
$al5943 = L[2469];
var anf_if5996 = R.checkWrapBoolean(anf_arg5985);
$step5939 = R.isPyretTrue(anf_if5996)?8:10;
break;
case 8: $step5939 = 9;
$al5943 = L[2470];
if(!(R.isFunction(num$is$roughnum2))) {
R.ffi.throwNonFunApp($al5943,num$is$roughnum2);
}
$ans5942 = num$is$roughnum2.app(value25946);
break;
case 9: var anf_arg5986 = $ans5942;
$step5939 = 11;
$al5943 = L[2470];
$ans5942 = R.checkWrapBoolean(anf_arg5986);
break;
case 10: $step5939 = 11;
$ans5942 = (false);
break;
case 11: var anf_arg5987 = $ans5942;
$al5943 = L[2471];
var anf_if5995 = R.checkWrapBoolean(anf_arg5987);
$step5939 = R.isPyretTrue(anf_if5995)?12:13;
break;
case 12: var anf_fun5988 = within$error5984.$var;
$step5939 = 27;
$al5943 = L[2472];
if(!(R.isFunction(anf_fun5988))) {
R.ffi.throwNonFunApp($al5943,anf_fun5988);
}
$ans5942 = anf_fun5988.app(("Attempted to compare two Roughnums for equality, which is not allowed:"));
break;
case 13: $step5939 = 14;
$al5943 = L[2473];
if(!(R.isFunction(num$is$roughnum2))) {
R.ffi.throwNonFunApp($al5943,num$is$roughnum2);
}
$ans5942 = num$is$roughnum2.app(value15944);
break;
case 14: var anf_arg5989 = $ans5942;
$al5943 = L[2473];
var anf_if5994 = R.checkWrapBoolean(anf_arg5989);
$step5939 = R.isPyretTrue(anf_if5994)?15:16;
break;
case 15: var anf_fun5990 = within$error5984.$var;
$step5939 = 27;
$al5943 = L[2474];
if(!(R.isFunction(anf_fun5990))) {
R.ffi.throwNonFunApp($al5943,anf_fun5990);
}
$ans5942 = anf_fun5990.app(("Attempted to compare a Roughnum to an Exactnum for equality, which is not allowed:"));
break;
case 16: $step5939 = 17;
$al5943 = L[2475];
if(!(R.isFunction(num$is$roughnum2))) {
R.ffi.throwNonFunApp($al5943,num$is$roughnum2);
}
$ans5942 = num$is$roughnum2.app(value25946);
break;
case 17: var anf_arg5991 = $ans5942;
$al5943 = L[2475];
var anf_if5993 = R.checkWrapBoolean(anf_arg5991);
$step5939 = R.isPyretTrue(anf_if5993)?18:19;
break;
case 18: var anf_fun5992 = within$error5984.$var;
$step5939 = 27;
$al5943 = L[2476];
if(!(R.isFunction(anf_fun5992))) {
R.ffi.throwNonFunApp($al5943,anf_fun5992);
}
$ans5942 = anf_fun5992.app(("Attempted to compare an Exactnum to a Roughnum for equality, which is not allowed:"));
break;
case 19: $step5939 = 27;
$al5943 = L[2477];
$ans5942 = R.throwNoBranchesMatched(L[2477],("if"));
break;
case 20: $al5943 = L[2478];
var anf_method_obj6011 = G(ED5,"error",L[2478]);
$al5943 = L[2479];
var anf_method_obj5998 = G(ED5,"para",L[2479]);
$step5939 = 21;
$al5943 = L[2480];
$field5997 = R.getColonFieldLoc(ED5,"text",L[2480]);
if(R.isMethod($field5997)) {
$ans5942 = $field5997.full_meth(ED5,("Attempted to compare two incomparable values: "));
} else {
if(!(R.isFunction($field5997))) {
R.ffi.throwNonFunApp(L[2480],$field5997);
}
$ans5942 = $field5997.app(("Attempted to compare two incomparable values: "));
}
break;
case 21: var anf_arg5999 = $ans5942;
$step5939 = 22;
$al5943 = L[2479];
$field6000 = R.getColonFieldLoc(anf_method_obj5998,"make1",L[2479]);
if(R.isMethod($field6000)) {
$ans5942 = $field6000.full_meth(anf_method_obj5998,anf_arg5999);
} else {
if(!(R.isFunction($field6000))) {
R.ffi.throwNonFunApp(L[2479],$field6000);
}
$ans5942 = $field6000.app(anf_arg5999);
}
break;
case 22: var anf_arg6012 = $ans5942;
$al5943 = L[2481];
var anf_method_obj6003 = G(ED5,"para",L[2481]);
$al5943 = L[2482];
var anf_arg6001 = G(self5941,"value1",L[2482]);
$step5939 = 23;
$al5943 = L[2483];
$field6002 = R.getColonFieldLoc(ED5,"embed",L[2483]);
if(R.isMethod($field6002)) {
$ans5942 = $field6002.full_meth(ED5,anf_arg6001);
} else {
if(!(R.isFunction($field6002))) {
R.ffi.throwNonFunApp(L[2483],$field6002);
}
$ans5942 = $field6002.app(anf_arg6001);
}
break;
case 23: var anf_arg6004 = $ans5942;
$step5939 = 24;
$al5943 = L[2481];
$field6005 = R.getColonFieldLoc(anf_method_obj6003,"make1",L[2481]);
if(R.isMethod($field6005)) {
$ans5942 = $field6005.full_meth(anf_method_obj6003,anf_arg6004);
} else {
if(!(R.isFunction($field6005))) {
R.ffi.throwNonFunApp(L[2481],$field6005);
}
$ans5942 = $field6005.app(anf_arg6004);
}
break;
case 24: var anf_arg6013 = $ans5942;
$al5943 = L[2484];
var anf_method_obj6008 = G(ED5,"para",L[2484]);
$al5943 = L[2485];
var anf_arg6006 = G(self5941,"value2",L[2485]);
$step5939 = 25;
$al5943 = L[2486];
$field6007 = R.getColonFieldLoc(ED5,"embed",L[2486]);
if(R.isMethod($field6007)) {
$ans5942 = $field6007.full_meth(ED5,anf_arg6006);
} else {
if(!(R.isFunction($field6007))) {
R.ffi.throwNonFunApp(L[2486],$field6007);
}
$ans5942 = $field6007.app(anf_arg6006);
}
break;
case 25: var anf_arg6009 = $ans5942;
$step5939 = 26;
$al5943 = L[2484];
$field6010 = R.getColonFieldLoc(anf_method_obj6008,"make1",L[2484]);
if(R.isMethod($field6010)) {
$ans5942 = $field6010.full_meth(anf_method_obj6008,anf_arg6009);
} else {
if(!(R.isFunction($field6010))) {
R.ffi.throwNonFunApp(L[2484],$field6010);
}
$ans5942 = $field6010.app(anf_arg6009);
}
break;
case 26: var anf_arg6014 = $ans5942;
$step5939 = 27;
$al5943 = L[2478];
$field6015 = R.getColonFieldLoc(anf_method_obj6011,"make3",L[2478]);
if(R.isMethod($field6015)) {
$ans5942 = $field6015.full_meth(anf_method_obj6011,anf_arg6012,anf_arg6013,anf_arg6014);
} else {
if(!(R.isFunction($field6015))) {
R.ffi.throwNonFunApp(L[2478],$field6015);
}
$ans5942 = $field6015.app(anf_arg6012,anf_arg6013,anf_arg6014);
}
break;
case 27: ++R.GAS;
return $ans5942;
default: throw "No case numbered " + $step5939 + " in $temp_full5940";
}
}
} catch($e6018) {
if(R.isCont($e6018) && ($step5939 !== 27)) {
$e6018.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al5943,$temp_full5940,$step5939,[self5941],[value15944,value25946,within$error5984,anf_method_obj6011,anf_method_obj5998,anf_arg6012,anf_method_obj6003,anf_arg6013,anf_method_obj6008]);
}
if(R.isPyretException($e6018)) {
$e6018.pyretStack.push($al5943);
}
throw $e6018;
}
};
var anf_variant_member6457 = R.makeMethod0($temp_full5940,"render-reason");
var $temp_full6020 = function($self6021,$$underscore6022,$$underscore6023) {
var $step6019 = 0;
var $ans6024 = D;
var $al6025 = L[2489];
try {
if(R.isActivationRecord($self6021)) {
$step6019 = $self6021.step;
$al6025 = $self6021.from;
$ans6024 = $self6021.ans;
self6021 = $self6021.args[0];
$underscore6022 = $self6021.args[1];
$underscore6023 = $self6021.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2489],3,$t);
}
var self6021 = $self6021;
var $underscore6022 = $$underscore6022;
var $underscore6023 = $$underscore6023;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6019) {
case 0: $step6019 = 1;
$al6025 = L[2488];
$field6026 = R.getColonFieldLoc(self6021,"render-reason",L[2488]);
if(R.isMethod($field6026)) {
$ans6024 = $field6026.full_meth(self6021);
} else {
if(!(R.isFunction($field6026))) {
R.ffi.throwNonFunApp(L[2488],$field6026);
}
$ans6024 = $field6026.app();
}
break;
case 1: ++R.GAS;
return $ans6024;
default: throw "No case numbered " + $step6019 + " in $temp_full6020";
}
}
} catch($e6027) {
if(R.isCont($e6027) && ($step6019 !== 1)) {
$e6027.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6025,$temp_full6020,$step6019,[self6021,$underscore6022,$underscore6023],[]);
}
if(R.isPyretException($e6027)) {
$e6027.pyretStack.push($al6025);
}
throw $e6027;
}
};
var anf_singleton_variant_member6468 = R.makeMethod2($temp_full6020,"render-fancy-reason");
var $temp_full6029 = function($self6030) {
var $step6028 = 0;
var $ans6031 = D;
var $al6032 = L[2492];
try {
if(R.isActivationRecord($self6030)) {
$step6028 = $self6030.step;
$al6032 = $self6030.from;
$ans6031 = $self6030.ans;
self6030 = $self6030.args[0];
anf_method_obj6034 = $self6030.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2492],1,$t);
}
var self6030 = $self6030;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6028) {
case 0: $al6032 = L[2490];
var anf_method_obj6034 = G(ED5,"error",L[2490]);
$step6028 = 1;
$al6032 = L[2491];
$field6033 = R.getColonFieldLoc(ED5,"text",L[2491]);
if(R.isMethod($field6033)) {
$ans6031 = $field6033.full_meth(ED5,("Program stopped by user"));
} else {
if(!(R.isFunction($field6033))) {
R.ffi.throwNonFunApp(L[2491],$field6033);
}
$ans6031 = $field6033.app(("Program stopped by user"));
}
break;
case 1: var anf_arg6035 = $ans6031;
$step6028 = 2;
$al6032 = L[2490];
$field6036 = R.getColonFieldLoc(anf_method_obj6034,"make1",L[2490]);
if(R.isMethod($field6036)) {
$ans6031 = $field6036.full_meth(anf_method_obj6034,anf_arg6035);
} else {
if(!(R.isFunction($field6036))) {
R.ffi.throwNonFunApp(L[2490],$field6036);
}
$ans6031 = $field6036.app(anf_arg6035);
}
break;
case 2: ++R.GAS;
return $ans6031;
default: throw "No case numbered " + $step6028 + " in $temp_full6029";
}
}
} catch($e6037) {
if(R.isCont($e6037) && ($step6028 !== 2)) {
$e6037.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6032,$temp_full6029,$step6028,[self6030],[anf_method_obj6034]);
}
if(R.isPyretException($e6037)) {
$e6037.pyretStack.push($al6032);
}
throw $e6037;
}
};
var anf_singleton_variant_member6469 = R.makeMethod0($temp_full6029,"render-reason");
var $temp_full6039 = function($self6040,$$underscore6041,$$underscore6042) {
var $step6038 = 0;
var $ans6043 = D;
var $al6044 = L[2494];
try {
if(R.isActivationRecord($self6040)) {
$step6038 = $self6040.step;
$al6044 = $self6040.from;
$ans6043 = $self6040.ans;
self6040 = $self6040.args[0];
$underscore6041 = $self6040.args[1];
$underscore6042 = $self6040.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2494],3,$t);
}
var self6040 = $self6040;
var $underscore6041 = $$underscore6041;
var $underscore6042 = $$underscore6042;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6038) {
case 0: $step6038 = 1;
$al6044 = L[2493];
$field6045 = R.getColonFieldLoc(self6040,"render-reason",L[2493]);
if(R.isMethod($field6045)) {
$ans6043 = $field6045.full_meth(self6040);
} else {
if(!(R.isFunction($field6045))) {
R.ffi.throwNonFunApp(L[2493],$field6045);
}
$ans6043 = $field6045.app();
}
break;
case 1: ++R.GAS;
return $ans6043;
default: throw "No case numbered " + $step6038 + " in $temp_full6039";
}
}
} catch($e6046) {
if(R.isCont($e6046) && ($step6038 !== 1)) {
$e6046.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6044,$temp_full6039,$step6038,[self6040,$underscore6041,$underscore6042],[]);
}
if(R.isPyretException($e6046)) {
$e6046.pyretStack.push($al6044);
}
throw $e6046;
}
};
var anf_variant_member6476 = R.makeMethod2($temp_full6039,"render-fancy-reason");
var $temp_full6048 = function($self6049) {
var $step6047 = 0;
var $ans6050 = D;
var $al6051 = L[2499];
try {
if(R.isActivationRecord($self6049)) {
$step6047 = $self6049.step;
$al6051 = $self6049.from;
$ans6050 = $self6049.ans;
self6049 = $self6049.args[0];
anf_method_obj6057 = $self6049.vars[0];
anf_method_obj6054 = $self6049.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2499],1,$t);
}
var self6049 = $self6049;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6047) {
case 0: $al6051 = L[2495];
var anf_method_obj6057 = G(ED5,"error",L[2495]);
$al6051 = L[2496];
var anf_method_obj6054 = G(ED5,"para",L[2496]);
$al6051 = L[2497];
var anf_arg6052 = G(self6049,"value",L[2497]);
$step6047 = 1;
$al6051 = L[2498];
$field6053 = R.getColonFieldLoc(ED5,"embed",L[2498]);
if(R.isMethod($field6053)) {
$ans6050 = $field6053.full_meth(ED5,anf_arg6052);
} else {
if(!(R.isFunction($field6053))) {
R.ffi.throwNonFunApp(L[2498],$field6053);
}
$ans6050 = $field6053.app(anf_arg6052);
}
break;
case 1: var anf_arg6055 = $ans6050;
$step6047 = 2;
$al6051 = L[2496];
$field6056 = R.getColonFieldLoc(anf_method_obj6054,"make1",L[2496]);
if(R.isMethod($field6056)) {
$ans6050 = $field6056.full_meth(anf_method_obj6054,anf_arg6055);
} else {
if(!(R.isFunction($field6056))) {
R.ffi.throwNonFunApp(L[2496],$field6056);
}
$ans6050 = $field6056.app(anf_arg6055);
}
break;
case 2: var anf_arg6058 = $ans6050;
$step6047 = 3;
$al6051 = L[2495];
$field6059 = R.getColonFieldLoc(anf_method_obj6057,"make1",L[2495]);
if(R.isMethod($field6059)) {
$ans6050 = $field6059.full_meth(anf_method_obj6057,anf_arg6058);
} else {
if(!(R.isFunction($field6059))) {
R.ffi.throwNonFunApp(L[2495],$field6059);
}
$ans6050 = $field6059.app(anf_arg6058);
}
break;
case 3: ++R.GAS;
return $ans6050;
default: throw "No case numbered " + $step6047 + " in $temp_full6048";
}
}
} catch($e6060) {
if(R.isCont($e6060) && ($step6047 !== 3)) {
$e6060.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6051,$temp_full6048,$step6047,[self6049],[anf_method_obj6057,anf_method_obj6054]);
}
if(R.isPyretException($e6060)) {
$e6060.pyretStack.push($al6051);
}
throw $e6060;
}
};
var anf_variant_member6477 = R.makeMethod0($temp_full6048,"render-reason");
var $temp_full6062 = function($self6063) {
var $step6061 = 0;
var $ans6064 = D;
var $al6065 = L[2502];
try {
if(R.isActivationRecord($self6063)) {
$step6061 = $self6063.step;
$al6065 = $self6063.from;
$ans6064 = $self6063.ans;
self6063 = $self6063.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2502],1,$t);
}
var self6063 = $self6063;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6061) {
case 0: $al6065 = L[2500];
var anf_arg6066 = G(self6063,"value",L[2500]);
$step6061 = 1;
$al6065 = L[2501];
$field6067 = R.getColonFieldLoc(VS9,"vs-value",L[2501]);
if(R.isMethod($field6067)) {
$ans6064 = $field6067.full_meth(VS9,anf_arg6066);
} else {
if(!(R.isFunction($field6067))) {
R.ffi.throwNonFunApp(L[2501],$field6067);
}
$ans6064 = $field6067.app(anf_arg6066);
}
break;
case 1: ++R.GAS;
return $ans6064;
default: throw "No case numbered " + $step6061 + " in $temp_full6062";
}
}
} catch($e6068) {
if(R.isCont($e6068) && ($step6061 !== 1)) {
$e6068.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6065,$temp_full6062,$step6061,[self6063],[]);
}
if(R.isPyretException($e6068)) {
$e6068.pyretStack.push($al6065);
}
throw $e6068;
}
};
var anf_variant_member6478 = R.makeMethod0($temp_full6062,"_output");
var $multi$error_getfields6076 = function(f) {
return f(this.dict["errors"]);
};
var $multi$error_getfieldsref6074 = function(f,refmask) {
return f(R.derefField(this.dict["errors"],false,refmask[0]));
};
var $multi$error_mutablemask6075 = [false];
var $multi$error$base6069 = {"$fieldNames":["errors"],
"render-fancy-reason":anf_variant_member6072,
"render-reason":anf_variant_member6073,
"_match":R.makeMatch("multi-error",1)};
var $multi$error$brander6070 = R.namedBrander("multi-error",L[2503]);
var $multi$error$brands6071 = {};
$multi$error$brands6071[RuntimeError25._brand] = true;
$multi$error$brands6071[$multi$error$brander6070._brand] = true;
var multi$error6077 = R.makeVariantConstructor(L[2504],function() {
return [];
},[],[],[false],["errors6078"],$multi$error_mutablemask6075,$multi$error$base6069,$multi$error$brands6071,"multi-error",$multi$error_getfieldsref6074,$multi$error_getfields6076,$multi$error$base6069);
var $sample$error_getfields6086 = function(f) {
return f(this.dict["loc"],this.dict["some-info"]);
};
var $sample$error_getfieldsref6084 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["some-info"],false,refmask[1]));
};
var $sample$error_mutablemask6085 = [false,false];
var $sample$error$base6079 = {"$fieldNames":["loc","some-info"],
"render-fancy-reason":anf_variant_member6082,
"render-reason":anf_variant_member6083,
"_match":R.makeMatch("sample-error",2)};
var $sample$error$brander6080 = R.namedBrander("sample-error",L[2505]);
var $sample$error$brands6081 = {};
$sample$error$brands6081[RuntimeError25._brand] = true;
$sample$error$brands6081[$sample$error$brander6080._brand] = true;
var sample$error6087 = R.makeVariantConstructor(L[2506],function() {
return [];
},[],[],[false,false],["loc6088","some$info6089"],$sample$error_mutablemask6085,$sample$error$base6079,$sample$error$brands6081,"sample-error",$sample$error_getfieldsref6084,$sample$error_getfields6086,$sample$error$base6079);
var $message$exception_getfields6098 = function(f) {
return f(this.dict["message"]);
};
var $message$exception_getfieldsref6096 = function(f,refmask) {
return f(R.derefField(this.dict["message"],false,refmask[0]));
};
var $message$exception_mutablemask6097 = [false];
var $message$exception$base6090 = {"$fieldNames":["message"],
"render-fancy-reason":anf_variant_member6093,
"render-reason":anf_variant_member6094,
"_output":anf_variant_member6095,
"_match":R.makeMatch("message-exception",1)};
var $message$exception$brander6091 = R.namedBrander("message-exception",L[2507]);
var $message$exception$brands6092 = {};
$message$exception$brands6092[RuntimeError25._brand] = true;
$message$exception$brands6092[$message$exception$brander6091._brand] = true;
var message$exception6099 = R.makeVariantConstructor(L[2509],function() {
return [$type$String7];
},["message6100"],[L[2508]],[false],["message6100"],$message$exception_mutablemask6097,$message$exception$base6090,$message$exception$brands6092,"message-exception",$message$exception_getfieldsref6096,$message$exception_getfields6098,$message$exception$base6090);
var $update$non$obj_getfields6108 = function(f) {
return f(this.dict["loc"],this.dict["obj"],this.dict["objloc"]);
};
var $update$non$obj_getfieldsref6106 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["obj"],false,refmask[1]),R.derefField(this.dict["objloc"],false,refmask[2]));
};
var $update$non$obj_mutablemask6107 = [false,false,false];
var $update$non$obj$base6101 = {"$fieldNames":["loc","obj","objloc"],
"render-fancy-reason":anf_variant_member6104,
"render-reason":anf_variant_member6105,
"_match":R.makeMatch("update-non-obj",3)};
var $update$non$obj$brander6102 = R.namedBrander("update-non-obj",L[2510]);
var $update$non$obj$brands6103 = {};
$update$non$obj$brands6103[RuntimeError25._brand] = true;
$update$non$obj$brands6103[$update$non$obj$brander6102._brand] = true;
var update$non$obj6109 = R.makeVariantConstructor(L[2511],function() {
return [];
},[],[],[false,false,false],["loc6110","obj6111","objloc6112"],$update$non$obj_mutablemask6107,$update$non$obj$base6101,$update$non$obj$brands6103,"update-non-obj",$update$non$obj_getfieldsref6106,$update$non$obj_getfields6108,$update$non$obj$base6101);
var $update$frozen$ref_getfields6120 = function(f) {
return f(this.dict["loc"],this.dict["obj"],this.dict["objloc"],this.dict["field"],this.dict["fieldloc"]);
};
var $update$frozen$ref_getfieldsref6118 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["obj"],false,refmask[1]),R.derefField(this.dict["objloc"],false,refmask[2]),R.derefField(this.dict["field"],false,refmask[3]),R.derefField(this.dict["fieldloc"],false,refmask[4]));
};
var $update$frozen$ref_mutablemask6119 = [false,false,false,false,false];
var $update$frozen$ref$base6113 = {"$fieldNames":["loc","obj","objloc","field","fieldloc"],
"render-fancy-reason":anf_variant_member6116,
"render-reason":anf_variant_member6117,
"_match":R.makeMatch("update-frozen-ref",5)};
var $update$frozen$ref$brander6114 = R.namedBrander("update-frozen-ref",L[2512]);
var $update$frozen$ref$brands6115 = {};
$update$frozen$ref$brands6115[RuntimeError25._brand] = true;
$update$frozen$ref$brands6115[$update$frozen$ref$brander6114._brand] = true;
var update$frozen$ref6121 = R.makeVariantConstructor(L[2513],function() {
return [];
},[],[],[false,false,false,false,false],["loc6122","obj6123","objloc6124","field6125","fieldloc6126"],$update$frozen$ref_mutablemask6119,$update$frozen$ref$base6113,$update$frozen$ref$brands6115,"update-frozen-ref",$update$frozen$ref_getfieldsref6118,$update$frozen$ref_getfields6120,$update$frozen$ref$base6113);
var $update$non$ref_getfields6134 = function(f) {
return f(this.dict["loc"],this.dict["obj"],this.dict["objloc"],this.dict["field"],this.dict["fieldloc"]);
};
var $update$non$ref_getfieldsref6132 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["obj"],false,refmask[1]),R.derefField(this.dict["objloc"],false,refmask[2]),R.derefField(this.dict["field"],false,refmask[3]),R.derefField(this.dict["fieldloc"],false,refmask[4]));
};
var $update$non$ref_mutablemask6133 = [false,false,false,false,false];
var $update$non$ref$base6127 = {"$fieldNames":["loc","obj","objloc","field","fieldloc"],
"render-fancy-reason":anf_variant_member6130,
"render-reason":anf_variant_member6131,
"_match":R.makeMatch("update-non-ref",5)};
var $update$non$ref$brander6128 = R.namedBrander("update-non-ref",L[2514]);
var $update$non$ref$brands6129 = {};
$update$non$ref$brands6129[RuntimeError25._brand] = true;
$update$non$ref$brands6129[$update$non$ref$brander6128._brand] = true;
var update$non$ref6135 = R.makeVariantConstructor(L[2515],function() {
return [];
},[],[],[false,false,false,false,false],["loc6136","obj6137","objloc6138","field6139","fieldloc6140"],$update$non$ref_mutablemask6133,$update$non$ref$base6127,$update$non$ref$brands6129,"update-non-ref",$update$non$ref_getfieldsref6132,$update$non$ref_getfields6134,$update$non$ref$base6127);
var $update$non$existent$field_getfields6148 = function(f) {
return f(this.dict["loc"],this.dict["obj"],this.dict["objloc"],this.dict["field"],this.dict["fieldloc"]);
};
var $update$non$existent$field_getfieldsref6146 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["obj"],false,refmask[1]),R.derefField(this.dict["objloc"],false,refmask[2]),R.derefField(this.dict["field"],false,refmask[3]),R.derefField(this.dict["fieldloc"],false,refmask[4]));
};
var $update$non$existent$field_mutablemask6147 = [false,false,false,false,false];
var $update$non$existent$field$base6141 = {"$fieldNames":["loc","obj","objloc","field","fieldloc"],
"render-fancy-reason":anf_variant_member6144,
"render-reason":anf_variant_member6145,
"_match":R.makeMatch("update-non-existent-field",5)};
var $update$non$existent$field$brander6142 = R.namedBrander("update-non-existent-field",L[2516]);
var $update$non$existent$field$brands6143 = {};
$update$non$existent$field$brands6143[RuntimeError25._brand] = true;
$update$non$existent$field$brands6143[$update$non$existent$field$brander6142._brand] = true;
var update$non$existent$field6149 = R.makeVariantConstructor(L[2517],function() {
return [];
},[],[],[false,false,false,false,false],["loc6150","obj6151","objloc6152","field6153","fieldloc6154"],$update$non$existent$field_mutablemask6147,$update$non$existent$field$base6141,$update$non$existent$field$brands6143,"update-non-existent-field",$update$non$existent$field_getfieldsref6146,$update$non$existent$field_getfields6148,$update$non$existent$field$base6141);
var $no$cases$matched_getfields6162 = function(f) {
return f(this.dict["loc"],this.dict["val"]);
};
var $no$cases$matched_getfieldsref6160 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["val"],false,refmask[1]));
};
var $no$cases$matched_mutablemask6161 = [false,false];
var $no$cases$matched$base6155 = {"$fieldNames":["loc","val"],
"render-fancy-reason":anf_variant_member6158,
"render-reason":anf_variant_member6159,
"_match":R.makeMatch("no-cases-matched",2)};
var $no$cases$matched$brander6156 = R.namedBrander("no-cases-matched",L[2518]);
var $no$cases$matched$brands6157 = {};
$no$cases$matched$brands6157[RuntimeError25._brand] = true;
$no$cases$matched$brands6157[$no$cases$matched$brander6156._brand] = true;
var no$cases$matched6163 = R.makeVariantConstructor(L[2519],function() {
return [];
},[],[],[false,false],["loc6164","val6165"],$no$cases$matched_mutablemask6161,$no$cases$matched$base6155,$no$cases$matched$brands6157,"no-cases-matched",$no$cases$matched_getfieldsref6160,$no$cases$matched_getfields6162,$no$cases$matched$base6155);
var $no$branches$matched_getfields6173 = function(f) {
return f(this.dict["loc"],this.dict["expression"]);
};
var $no$branches$matched_getfieldsref6171 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["expression"],false,refmask[1]));
};
var $no$branches$matched_mutablemask6172 = [false,false];
var $no$branches$matched$base6166 = {"$fieldNames":["loc","expression"],
"render-fancy-reason":anf_variant_member6169,
"render-reason":anf_variant_member6170,
"_match":R.makeMatch("no-branches-matched",2)};
var $no$branches$matched$brander6167 = R.namedBrander("no-branches-matched",L[2520]);
var $no$branches$matched$brands6168 = {};
$no$branches$matched$brands6168[RuntimeError25._brand] = true;
$no$branches$matched$brands6168[$no$branches$matched$brander6167._brand] = true;
var no$branches$matched6174 = R.makeVariantConstructor(L[2522],function() {
return [$type$String7];
},["expression6175"],[L[2521]],[false,false],["loc6176","expression6175"],$no$branches$matched_mutablemask6172,$no$branches$matched$base6166,$no$branches$matched$brands6168,"no-branches-matched",$no$branches$matched_getfieldsref6171,$no$branches$matched_getfields6173,$no$branches$matched$base6166);
var $internal$error_getfields6184 = function(f) {
return f(this.dict["message"],this.dict["info-args"]);
};
var $internal$error_getfieldsref6182 = function(f,refmask) {
return f(R.derefField(this.dict["message"],false,refmask[0]),R.derefField(this.dict["info-args"],false,refmask[1]));
};
var $internal$error_mutablemask6183 = [false,false];
var $internal$error$base6177 = {"$fieldNames":["message","info-args"],
"render-fancy-reason":anf_variant_member6180,
"render-reason":anf_variant_member6181,
"_match":R.makeMatch("internal-error",2)};
var $internal$error$brander6178 = R.namedBrander("internal-error",L[2523]);
var $internal$error$brands6179 = {};
$internal$error$brands6179[RuntimeError25._brand] = true;
$internal$error$brands6179[$internal$error$brander6178._brand] = true;
var internal$error6185 = R.makeVariantConstructor(L[2524],function() {
return [];
},[],[],[false,false],["message6186","info$args6187"],$internal$error_mutablemask6183,$internal$error$base6177,$internal$error$brands6179,"internal-error",$internal$error_getfieldsref6182,$internal$error_getfields6184,$internal$error$base6177);
var $template$not$finished_getfields6195 = function(f) {
return f(this.dict["loc"]);
};
var $template$not$finished_getfieldsref6193 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $template$not$finished_mutablemask6194 = [false];
var $template$not$finished$base6188 = {"$fieldNames":["loc"],
"render-fancy-reason":anf_variant_member6191,
"render-reason":anf_variant_member6192,
"_match":R.makeMatch("template-not-finished",1)};
var $template$not$finished$brander6189 = R.namedBrander("template-not-finished",L[2525]);
var $template$not$finished$brands6190 = {};
$template$not$finished$brands6190[RuntimeError25._brand] = true;
$template$not$finished$brands6190[$template$not$finished$brander6189._brand] = true;
var template$not$finished6196 = R.makeVariantConstructor(L[2526],function() {
return [];
},[],[],[false],["loc6197"],$template$not$finished_mutablemask6194,$template$not$finished$base6188,$template$not$finished$brands6190,"template-not-finished",$template$not$finished_getfieldsref6193,$template$not$finished_getfields6195,$template$not$finished$base6188);
var $field$not$found_getfields6205 = function(f) {
return f(this.dict["loc"],this.dict["obj"],this.dict["field"]);
};
var $field$not$found_getfieldsref6203 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["obj"],false,refmask[1]),R.derefField(this.dict["field"],false,refmask[2]));
};
var $field$not$found_mutablemask6204 = [false,false,false];
var $field$not$found$base6198 = {"$fieldNames":["loc","obj","field"],
"render-fancy-reason":anf_variant_member6201,
"render-reason":anf_variant_member6202,
"_match":R.makeMatch("field-not-found",3)};
var $field$not$found$brander6199 = R.namedBrander("field-not-found",L[2527]);
var $field$not$found$brands6200 = {};
$field$not$found$brands6200[RuntimeError25._brand] = true;
$field$not$found$brands6200[$field$not$found$brander6199._brand] = true;
var field$not$found6206 = R.makeVariantConstructor(L[2529],function() {
return [$type$String7];
},["field6207"],[L[2528]],[false,false,false],["loc6208","obj6209","field6207"],$field$not$found_mutablemask6204,$field$not$found$base6198,$field$not$found$brands6200,"field-not-found",$field$not$found_getfieldsref6203,$field$not$found_getfields6205,$field$not$found$base6198);
var $lookup$constructor$not$object_getfields6217 = function(f) {
return f(this.dict["loc"],this.dict["constr-name"],this.dict["field"]);
};
var $lookup$constructor$not$object_getfieldsref6215 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["constr-name"],false,refmask[1]),R.derefField(this.dict["field"],false,refmask[2]));
};
var $lookup$constructor$not$object_mutablemask6216 = [false,false,false];
var $lookup$constructor$not$object$base6210 = {"$fieldNames":["loc","constr-name","field"],
"render-fancy-reason":anf_variant_member6213,
"render-reason":anf_variant_member6214,
"_match":R.makeMatch("lookup-constructor-not-object",3)};
var $lookup$constructor$not$object$brander6211 = R.namedBrander("lookup-constructor-not-object",L[2530]);
var $lookup$constructor$not$object$brands6212 = {};
$lookup$constructor$not$object$brands6212[RuntimeError25._brand] = true;
$lookup$constructor$not$object$brands6212[$lookup$constructor$not$object$brander6211._brand] = true;
var lookup$constructor$not$object6218 = R.makeVariantConstructor(L[2533],function() {
return [$type$String7,$type$String7];
},["constr$name6219","field6220"],[L[2531],L[2532]],[false,false,false],["loc6221","constr$name6219","field6220"],$lookup$constructor$not$object_mutablemask6216,$lookup$constructor$not$object$base6210,$lookup$constructor$not$object$brands6212,"lookup-constructor-not-object",$lookup$constructor$not$object_getfieldsref6215,$lookup$constructor$not$object_getfields6217,$lookup$constructor$not$object$base6210);
var $lookup$non$tuple_getfields6229 = function(f) {
return f(this.dict["loc"],this.dict["non-tup"],this.dict["index"]);
};
var $lookup$non$tuple_getfieldsref6227 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-tup"],false,refmask[1]),R.derefField(this.dict["index"],false,refmask[2]));
};
var $lookup$non$tuple_mutablemask6228 = [false,false,false];
var $lookup$non$tuple$base6222 = {"$fieldNames":["loc","non-tup","index"],
"render-fancy-reason":anf_variant_member6225,
"render-reason":anf_variant_member6226,
"_match":R.makeMatch("lookup-non-tuple",3)};
var $lookup$non$tuple$brander6223 = R.namedBrander("lookup-non-tuple",L[2534]);
var $lookup$non$tuple$brands6224 = {};
$lookup$non$tuple$brands6224[RuntimeError25._brand] = true;
$lookup$non$tuple$brands6224[$lookup$non$tuple$brander6223._brand] = true;
var lookup$non$tuple6230 = R.makeVariantConstructor(L[2536],function() {
return [$type$Number8];
},["index6231"],[L[2535]],[false,false,false],["loc6232","non$tup6233","index6231"],$lookup$non$tuple_mutablemask6228,$lookup$non$tuple$base6222,$lookup$non$tuple$brands6224,"lookup-non-tuple",$lookup$non$tuple_getfieldsref6227,$lookup$non$tuple_getfields6229,$lookup$non$tuple$base6222);
var $lookup$large$index_getfields6241 = function(f) {
return f(this.dict["loc"],this.dict["tup"],this.dict["len"],this.dict["index"]);
};
var $lookup$large$index_getfieldsref6239 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["tup"],false,refmask[1]),R.derefField(this.dict["len"],false,refmask[2]),R.derefField(this.dict["index"],false,refmask[3]));
};
var $lookup$large$index_mutablemask6240 = [false,false,false,false];
var $lookup$large$index$base6234 = {"$fieldNames":["loc","tup","len","index"],
"render-fancy-reason":anf_variant_member6237,
"render-reason":anf_variant_member6238,
"_match":R.makeMatch("lookup-large-index",4)};
var $lookup$large$index$brander6235 = R.namedBrander("lookup-large-index",L[2537]);
var $lookup$large$index$brands6236 = {};
$lookup$large$index$brands6236[RuntimeError25._brand] = true;
$lookup$large$index$brands6236[$lookup$large$index$brander6235._brand] = true;
var lookup$large$index6242 = R.makeVariantConstructor(L[2539],function() {
return [$type$Number8];
},["index6243"],[L[2538]],[false,false,false,false],["loc6244","tup6245","len6246","index6243"],$lookup$large$index_mutablemask6240,$lookup$large$index$base6234,$lookup$large$index$brands6236,"lookup-large-index",$lookup$large$index_getfieldsref6239,$lookup$large$index_getfields6241,$lookup$large$index$base6234);
var $non$tuple$bind_getfields6254 = function(f) {
return f(this.dict["loc"],this.dict["non-tup"]);
};
var $non$tuple$bind_getfieldsref6252 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-tup"],false,refmask[1]));
};
var $non$tuple$bind_mutablemask6253 = [false,false];
var $non$tuple$bind$base6247 = {"$fieldNames":["loc","non-tup"],
"render-fancy-reason":anf_variant_member6250,
"render-reason":anf_variant_member6251,
"_match":R.makeMatch("non-tuple-bind",2)};
var $non$tuple$bind$brander6248 = R.namedBrander("non-tuple-bind",L[2540]);
var $non$tuple$bind$brands6249 = {};
$non$tuple$bind$brands6249[RuntimeError25._brand] = true;
$non$tuple$bind$brands6249[$non$tuple$bind$brander6248._brand] = true;
var non$tuple$bind6255 = R.makeVariantConstructor(L[2541],function() {
return [];
},[],[],[false,false],["loc6256","non$tup6257"],$non$tuple$bind_mutablemask6253,$non$tuple$bind$base6247,$non$tuple$bind$brands6249,"non-tuple-bind",$non$tuple$bind_getfieldsref6252,$non$tuple$bind_getfields6254,$non$tuple$bind$base6247);
var $bad$tuple$bind_getfields6265 = function(f) {
return f(this.dict["loc"],this.dict["tup"],this.dict["length"],this.dict["desiredLength"]);
};
var $bad$tuple$bind_getfieldsref6263 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["tup"],false,refmask[1]),R.derefField(this.dict["length"],false,refmask[2]),R.derefField(this.dict["desiredLength"],false,refmask[3]));
};
var $bad$tuple$bind_mutablemask6264 = [false,false,false,false];
var $bad$tuple$bind$base6258 = {"$fieldNames":["loc","tup","length","desiredLength"],
"render-fancy-reason":anf_variant_member6261,
"render-reason":anf_variant_member6262,
"_match":R.makeMatch("bad-tuple-bind",4)};
var $bad$tuple$bind$brander6259 = R.namedBrander("bad-tuple-bind",L[2542]);
var $bad$tuple$bind$brands6260 = {};
$bad$tuple$bind$brands6260[RuntimeError25._brand] = true;
$bad$tuple$bind$brands6260[$bad$tuple$bind$brander6259._brand] = true;
var bad$tuple$bind6266 = R.makeVariantConstructor(L[2543],function() {
return [];
},[],[],[false,false,false,false],["loc6267","tup6268","length6269","desiredLength6270"],$bad$tuple$bind_mutablemask6264,$bad$tuple$bind$base6258,$bad$tuple$bind$brands6260,"bad-tuple-bind",$bad$tuple$bind_getfieldsref6263,$bad$tuple$bind_getfields6265,$bad$tuple$bind$base6258);
var $lookup$non$object_getfields6278 = function(f) {
return f(this.dict["loc"],this.dict["non-obj"],this.dict["field"]);
};
var $lookup$non$object_getfieldsref6276 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-obj"],false,refmask[1]),R.derefField(this.dict["field"],false,refmask[2]));
};
var $lookup$non$object_mutablemask6277 = [false,false,false];
var $lookup$non$object$base6271 = {"$fieldNames":["loc","non-obj","field"],
"render-fancy-reason":anf_variant_member6274,
"render-reason":anf_variant_member6275,
"_match":R.makeMatch("lookup-non-object",3)};
var $lookup$non$object$brander6272 = R.namedBrander("lookup-non-object",L[2544]);
var $lookup$non$object$brands6273 = {};
$lookup$non$object$brands6273[RuntimeError25._brand] = true;
$lookup$non$object$brands6273[$lookup$non$object$brander6272._brand] = true;
var lookup$non$object6279 = R.makeVariantConstructor(L[2546],function() {
return [$type$String7];
},["field6280"],[L[2545]],[false,false,false],["loc6281","non$obj6282","field6280"],$lookup$non$object_mutablemask6277,$lookup$non$object$base6271,$lookup$non$object$brands6273,"lookup-non-object",$lookup$non$object_getfieldsref6276,$lookup$non$object_getfields6278,$lookup$non$object$base6271);
var $extend$non$object_getfields6290 = function(f) {
return f(this.dict["loc"],this.dict["non-obj"]);
};
var $extend$non$object_getfieldsref6288 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-obj"],false,refmask[1]));
};
var $extend$non$object_mutablemask6289 = [false,false];
var $extend$non$object$base6283 = {"$fieldNames":["loc","non-obj"],
"render-fancy-reason":anf_variant_member6286,
"render-reason":anf_variant_member6287,
"_match":R.makeMatch("extend-non-object",2)};
var $extend$non$object$brander6284 = R.namedBrander("extend-non-object",L[2547]);
var $extend$non$object$brands6285 = {};
$extend$non$object$brands6285[RuntimeError25._brand] = true;
$extend$non$object$brands6285[$extend$non$object$brander6284._brand] = true;
var extend$non$object6291 = R.makeVariantConstructor(L[2548],function() {
return [];
},[],[],[false,false],["loc6292","non$obj6293"],$extend$non$object_mutablemask6289,$extend$non$object$base6283,$extend$non$object$brands6285,"extend-non-object",$extend$non$object_getfieldsref6288,$extend$non$object_getfields6290,$extend$non$object$base6283);
var $non$boolean$condition_getfields6301 = function(f) {
return f(this.dict["loc"],this.dict["typ"],this.dict["value"]);
};
var $non$boolean$condition_getfieldsref6299 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["typ"],false,refmask[1]),R.derefField(this.dict["value"],false,refmask[2]));
};
var $non$boolean$condition_mutablemask6300 = [false,false,false];
var $non$boolean$condition$base6294 = {"$fieldNames":["loc","typ","value"],
"render-fancy-reason":anf_variant_member6297,
"render-reason":anf_variant_member6298,
"_match":R.makeMatch("non-boolean-condition",3)};
var $non$boolean$condition$brander6295 = R.namedBrander("non-boolean-condition",L[2549]);
var $non$boolean$condition$brands6296 = {};
$non$boolean$condition$brands6296[RuntimeError25._brand] = true;
$non$boolean$condition$brands6296[$non$boolean$condition$brander6295._brand] = true;
var non$boolean$condition6302 = R.makeVariantConstructor(L[2550],function() {
return [];
},[],[],[false,false,false],["loc6303","typ6304","value6305"],$non$boolean$condition_mutablemask6300,$non$boolean$condition$base6294,$non$boolean$condition$brands6296,"non-boolean-condition",$non$boolean$condition_getfieldsref6299,$non$boolean$condition_getfields6301,$non$boolean$condition$base6294);
var $non$boolean$op_getfields6313 = function(f) {
return f(this.dict["loc"],this.dict["position"],this.dict["typ"],this.dict["value"]);
};
var $non$boolean$op_getfieldsref6311 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["position"],false,refmask[1]),R.derefField(this.dict["typ"],false,refmask[2]),R.derefField(this.dict["value"],false,refmask[3]));
};
var $non$boolean$op_mutablemask6312 = [false,false,false,false];
var $non$boolean$op$base6306 = {"$fieldNames":["loc","position","typ","value"],
"render-fancy-reason":anf_variant_member6309,
"render-reason":anf_variant_member6310,
"_match":R.makeMatch("non-boolean-op",4)};
var $non$boolean$op$brander6307 = R.namedBrander("non-boolean-op",L[2551]);
var $non$boolean$op$brands6308 = {};
$non$boolean$op$brands6308[RuntimeError25._brand] = true;
$non$boolean$op$brands6308[$non$boolean$op$brander6307._brand] = true;
var non$boolean$op6314 = R.makeVariantConstructor(L[2552],function() {
return [];
},[],[],[false,false,false,false],["loc6315","position6316","typ6317","value6318"],$non$boolean$op_mutablemask6312,$non$boolean$op$base6306,$non$boolean$op$brands6308,"non-boolean-op",$non$boolean$op_getfieldsref6311,$non$boolean$op_getfields6313,$non$boolean$op$base6306);
var $generic$type$mismatch_getfields6326 = function(f) {
return f(this.dict["val"],this.dict["typ"]);
};
var $generic$type$mismatch_getfieldsref6324 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["typ"],false,refmask[1]));
};
var $generic$type$mismatch_mutablemask6325 = [false,false];
var $generic$type$mismatch$base6319 = {"$fieldNames":["val","typ"],
"render-fancy-reason":anf_variant_member6322,
"render-reason":anf_variant_member6323,
"_match":R.makeMatch("generic-type-mismatch",2)};
var $generic$type$mismatch$brander6320 = R.namedBrander("generic-type-mismatch",L[2553]);
var $generic$type$mismatch$brands6321 = {};
$generic$type$mismatch$brands6321[RuntimeError25._brand] = true;
$generic$type$mismatch$brands6321[$generic$type$mismatch$brander6320._brand] = true;
var generic$type$mismatch6327 = R.makeVariantConstructor(L[2555],function() {
return [$type$String7];
},["typ6328"],[L[2554]],[false,false],["val6329","typ6328"],$generic$type$mismatch_mutablemask6325,$generic$type$mismatch$base6319,$generic$type$mismatch$brands6321,"generic-type-mismatch",$generic$type$mismatch_getfieldsref6324,$generic$type$mismatch_getfields6326,$generic$type$mismatch$base6319);
var $num$string$binop$error_getfields6337 = function(f) {
return f(this.dict["val1"],this.dict["val2"],this.dict["opname"],this.dict["opdesc"],this.dict["methodname"]);
};
var $num$string$binop$error_getfieldsref6335 = function(f,refmask) {
return f(R.derefField(this.dict["val1"],false,refmask[0]),R.derefField(this.dict["val2"],false,refmask[1]),R.derefField(this.dict["opname"],false,refmask[2]),R.derefField(this.dict["opdesc"],false,refmask[3]),R.derefField(this.dict["methodname"],false,refmask[4]));
};
var $num$string$binop$error_mutablemask6336 = [false,false,false,false,false];
var $num$string$binop$error$base6330 = {"$fieldNames":["val1","val2","opname","opdesc","methodname"],
"render-fancy-reason":anf_variant_member6333,
"render-reason":anf_variant_member6334,
"_match":R.makeMatch("num-string-binop-error",5)};
var $num$string$binop$error$brander6331 = R.namedBrander("num-string-binop-error",L[2556]);
var $num$string$binop$error$brands6332 = {};
$num$string$binop$error$brands6332[RuntimeError25._brand] = true;
$num$string$binop$error$brands6332[$num$string$binop$error$brander6331._brand] = true;
var num$string$binop$error6338 = R.makeVariantConstructor(L[2557],function() {
return [];
},[],[],[false,false,false,false,false],["val16339","val26340","opname6341","opdesc6342","methodname6343"],$num$string$binop$error_mutablemask6336,$num$string$binop$error$base6330,$num$string$binop$error$brands6332,"num-string-binop-error",$num$string$binop$error_getfieldsref6335,$num$string$binop$error_getfields6337,$num$string$binop$error$base6330);
var $numeric$binop$error_getfields6351 = function(f) {
return f(this.dict["val1"],this.dict["val2"],this.dict["opname"],this.dict["opdesc"],this.dict["methodname"]);
};
var $numeric$binop$error_getfieldsref6349 = function(f,refmask) {
return f(R.derefField(this.dict["val1"],false,refmask[0]),R.derefField(this.dict["val2"],false,refmask[1]),R.derefField(this.dict["opname"],false,refmask[2]),R.derefField(this.dict["opdesc"],false,refmask[3]),R.derefField(this.dict["methodname"],false,refmask[4]));
};
var $numeric$binop$error_mutablemask6350 = [false,false,false,false,false];
var $numeric$binop$error$base6344 = {"$fieldNames":["val1","val2","opname","opdesc","methodname"],
"render-fancy-reason":anf_variant_member6347,
"render-reason":anf_variant_member6348,
"_match":R.makeMatch("numeric-binop-error",5)};
var $numeric$binop$error$brander6345 = R.namedBrander("numeric-binop-error",L[2558]);
var $numeric$binop$error$brands6346 = {};
$numeric$binop$error$brands6346[RuntimeError25._brand] = true;
$numeric$binop$error$brands6346[$numeric$binop$error$brander6345._brand] = true;
var numeric$binop$error6352 = R.makeVariantConstructor(L[2559],function() {
return [];
},[],[],[false,false,false,false,false],["val16353","val26354","opname6355","opdesc6356","methodname6357"],$numeric$binop$error_mutablemask6350,$numeric$binop$error$base6344,$numeric$binop$error$brands6346,"numeric-binop-error",$numeric$binop$error_getfieldsref6349,$numeric$binop$error_getfields6351,$numeric$binop$error$base6344);
var $cases$singleton$mismatch_getfields6365 = function(f) {
return f(this.dict["branch-loc"],this.dict["should-be-singleton"],this.dict["cases-loc"]);
};
var $cases$singleton$mismatch_getfieldsref6363 = function(f,refmask) {
return f(R.derefField(this.dict["branch-loc"],false,refmask[0]),R.derefField(this.dict["should-be-singleton"],false,refmask[1]),R.derefField(this.dict["cases-loc"],false,refmask[2]));
};
var $cases$singleton$mismatch_mutablemask6364 = [false,false,false];
var $cases$singleton$mismatch$base6358 = {"$fieldNames":["branch-loc","should-be-singleton","cases-loc"],
"render-fancy-reason":anf_variant_member6361,
"render-reason":anf_variant_member6362,
"_match":R.makeMatch("cases-singleton-mismatch",3)};
var $cases$singleton$mismatch$brander6359 = R.namedBrander("cases-singleton-mismatch",L[2560]);
var $cases$singleton$mismatch$brands6360 = {};
$cases$singleton$mismatch$brands6360[RuntimeError25._brand] = true;
$cases$singleton$mismatch$brands6360[$cases$singleton$mismatch$brander6359._brand] = true;
var cases$singleton$mismatch6366 = R.makeVariantConstructor(L[2562],function() {
return [$type$Boolean9];
},["should$be$singleton6367"],[L[2561]],[false,false,false],["branch$loc6368","should$be$singleton6367","cases$loc6369"],$cases$singleton$mismatch_mutablemask6364,$cases$singleton$mismatch$base6358,$cases$singleton$mismatch$brands6360,"cases-singleton-mismatch",$cases$singleton$mismatch_getfieldsref6363,$cases$singleton$mismatch_getfields6365,$cases$singleton$mismatch$base6358);
var $cases$arity$mismatch_getfields6377 = function(f) {
return f(this.dict["branch-loc"],this.dict["num-args"],this.dict["actual-arity"],this.dict["cases-loc"]);
};
var $cases$arity$mismatch_getfieldsref6375 = function(f,refmask) {
return f(R.derefField(this.dict["branch-loc"],false,refmask[0]),R.derefField(this.dict["num-args"],false,refmask[1]),R.derefField(this.dict["actual-arity"],false,refmask[2]),R.derefField(this.dict["cases-loc"],false,refmask[3]));
};
var $cases$arity$mismatch_mutablemask6376 = [false,false,false,false];
var $cases$arity$mismatch$base6370 = {"$fieldNames":["branch-loc","num-args","actual-arity","cases-loc"],
"render-fancy-reason":anf_variant_member6373,
"render-reason":anf_variant_member6374,
"_match":R.makeMatch("cases-arity-mismatch",4)};
var $cases$arity$mismatch$brander6371 = R.namedBrander("cases-arity-mismatch",L[2563]);
var $cases$arity$mismatch$brands6372 = {};
$cases$arity$mismatch$brands6372[RuntimeError25._brand] = true;
$cases$arity$mismatch$brands6372[$cases$arity$mismatch$brander6371._brand] = true;
var cases$arity$mismatch6378 = R.makeVariantConstructor(L[2564],function() {
return [];
},[],[],[false,false,false,false],["branch$loc6379","num$args6380","actual$arity6381","cases$loc6382"],$cases$arity$mismatch_mutablemask6376,$cases$arity$mismatch$base6370,$cases$arity$mismatch$brands6372,"cases-arity-mismatch",$cases$arity$mismatch_getfieldsref6375,$cases$arity$mismatch_getfields6377,$cases$arity$mismatch$base6370);
var $constructor$arity$mismatch_getfields6390 = function(f) {
return f(this.dict["fun-def-loc"],this.dict["constructor-name"],this.dict["fun-def-arity"],this.dict["fun-app-args"]);
};
var $constructor$arity$mismatch_getfieldsref6388 = function(f,refmask) {
return f(R.derefField(this.dict["fun-def-loc"],false,refmask[0]),R.derefField(this.dict["constructor-name"],false,refmask[1]),R.derefField(this.dict["fun-def-arity"],false,refmask[2]),R.derefField(this.dict["fun-app-args"],false,refmask[3]));
};
var $constructor$arity$mismatch_mutablemask6389 = [false,false,false,false];
var $constructor$arity$mismatch$base6383 = {"$fieldNames":["fun-def-loc","constructor-name","fun-def-arity","fun-app-args"],
"render-fancy-reason":anf_variant_member6386,
"render-reason":anf_variant_member6387,
"_match":R.makeMatch("constructor-arity-mismatch",4)};
var $constructor$arity$mismatch$brander6384 = R.namedBrander("constructor-arity-mismatch",L[2565]);
var $constructor$arity$mismatch$brands6385 = {};
$constructor$arity$mismatch$brands6385[RuntimeError25._brand] = true;
$constructor$arity$mismatch$brands6385[$constructor$arity$mismatch$brander6384._brand] = true;
var constructor$arity$mismatch6391 = R.makeVariantConstructor(L[2566],function() {
return [];
},[],[],[false,false,false,false],["fun$def$loc6392","constructor$name6393","fun$def$arity6394","fun$app$args6395"],$constructor$arity$mismatch_mutablemask6389,$constructor$arity$mismatch$base6383,$constructor$arity$mismatch$brands6385,"constructor-arity-mismatch",$constructor$arity$mismatch_getfieldsref6388,$constructor$arity$mismatch_getfields6390,$constructor$arity$mismatch$base6383);
var $arity$mismatch_getfields6403 = function(f) {
return f(this.dict["fun-def-loc"],this.dict["fun-def-arity"],this.dict["fun-app-args"]);
};
var $arity$mismatch_getfieldsref6401 = function(f,refmask) {
return f(R.derefField(this.dict["fun-def-loc"],false,refmask[0]),R.derefField(this.dict["fun-def-arity"],false,refmask[1]),R.derefField(this.dict["fun-app-args"],false,refmask[2]));
};
var $arity$mismatch_mutablemask6402 = [false,false,false];
var $arity$mismatch$base6396 = {"$fieldNames":["fun-def-loc","fun-def-arity","fun-app-args"],
"render-fancy-reason":anf_variant_member6399,
"render-reason":anf_variant_member6400,
"_match":R.makeMatch("arity-mismatch",3)};
var $arity$mismatch$brander6397 = R.namedBrander("arity-mismatch",L[2567]);
var $arity$mismatch$brands6398 = {};
$arity$mismatch$brands6398[RuntimeError25._brand] = true;
$arity$mismatch$brands6398[$arity$mismatch$brander6397._brand] = true;
var arity$mismatch6404 = R.makeVariantConstructor(L[2568],function() {
return [];
},[],[],[false,false,false],["fun$def$loc6405","fun$def$arity6406","fun$app$args6407"],$arity$mismatch_mutablemask6402,$arity$mismatch$base6396,$arity$mismatch$brands6398,"arity-mismatch",$arity$mismatch_getfieldsref6401,$arity$mismatch_getfields6403,$arity$mismatch$base6396);
var $non$function$app_getfields6415 = function(f) {
return f(this.dict["loc"],this.dict["non-fun-val"]);
};
var $non$function$app_getfieldsref6413 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["non-fun-val"],false,refmask[1]));
};
var $non$function$app_mutablemask6414 = [false,false];
var $non$function$app$base6408 = {"$fieldNames":["loc","non-fun-val"],
"render-fancy-reason":anf_variant_member6411,
"render-reason":anf_variant_member6412,
"_match":R.makeMatch("non-function-app",2)};
var $non$function$app$brander6409 = R.namedBrander("non-function-app",L[2569]);
var $non$function$app$brands6410 = {};
$non$function$app$brands6410[RuntimeError25._brand] = true;
$non$function$app$brands6410[$non$function$app$brander6409._brand] = true;
var non$function$app6416 = R.makeVariantConstructor(L[2570],function() {
return [];
},[],[],[false,false],["loc6417","non$fun$val6418"],$non$function$app_mutablemask6414,$non$function$app$base6408,$non$function$app$brands6410,"non-function-app",$non$function$app_getfieldsref6413,$non$function$app_getfields6415,$non$function$app$base6408);
var $uninitialized$id_getfields6426 = function(f) {
return f(this.dict["loc"],this.dict["name"]);
};
var $uninitialized$id_getfieldsref6424 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["name"],false,refmask[1]));
};
var $uninitialized$id_mutablemask6425 = [false,false];
var $uninitialized$id$base6419 = {"$fieldNames":["loc","name"],
"render-fancy-reason":anf_variant_member6422,
"render-reason":anf_variant_member6423,
"_match":R.makeMatch("uninitialized-id",2)};
var $uninitialized$id$brander6420 = R.namedBrander("uninitialized-id",L[2571]);
var $uninitialized$id$brands6421 = {};
$uninitialized$id$brands6421[RuntimeError25._brand] = true;
$uninitialized$id$brands6421[$uninitialized$id$brander6420._brand] = true;
var uninitialized$id6427 = R.makeVariantConstructor(L[2572],function() {
return [];
},[],[],[false,false],["loc6428","name6429"],$uninitialized$id_mutablemask6425,$uninitialized$id$base6419,$uninitialized$id$brands6421,"uninitialized-id",$uninitialized$id_getfieldsref6424,$uninitialized$id_getfields6426,$uninitialized$id$base6419);
var $module$load$failure_getfields6437 = function(f) {
return f(this.dict["names"]);
};
var $module$load$failure_getfieldsref6435 = function(f,refmask) {
return f(R.derefField(this.dict["names"],false,refmask[0]));
};
var $module$load$failure_mutablemask6436 = [false];
var $module$load$failure$base6430 = {"$fieldNames":["names"],
"render-fancy-reason":anf_variant_member6433,
"render-reason":anf_variant_member6434,
"_match":R.makeMatch("module-load-failure",1)};
var $module$load$failure$brander6431 = R.namedBrander("module-load-failure",L[2573]);
var $module$load$failure$brands6432 = {};
$module$load$failure$brands6432[RuntimeError25._brand] = true;
$module$load$failure$brands6432[$module$load$failure$brander6431._brand] = true;
var module$load$failure6438 = R.makeVariantConstructor(L[2574],function() {
return [];
},[],[],[false],["names6439"],$module$load$failure_mutablemask6436,$module$load$failure$base6430,$module$load$failure$brands6432,"module-load-failure",$module$load$failure_getfieldsref6435,$module$load$failure_getfields6437,$module$load$failure$base6430);
var $invalid$array$index_getfields6447 = function(f) {
return f(this.dict["method-name"],this.dict["array"],this.dict["index"],this.dict["reason"]);
};
var $invalid$array$index_getfieldsref6445 = function(f,refmask) {
return f(R.derefField(this.dict["method-name"],false,refmask[0]),R.derefField(this.dict["array"],false,refmask[1]),R.derefField(this.dict["index"],false,refmask[2]),R.derefField(this.dict["reason"],false,refmask[3]));
};
var $invalid$array$index_mutablemask6446 = [false,false,false,false];
var $invalid$array$index$base6440 = {"$fieldNames":["method-name","array","index","reason"],
"render-fancy-reason":anf_variant_member6443,
"render-reason":anf_variant_member6444,
"_match":R.makeMatch("invalid-array-index",4)};
var $invalid$array$index$brander6441 = R.namedBrander("invalid-array-index",L[2575]);
var $invalid$array$index$brands6442 = {};
$invalid$array$index$brands6442[RuntimeError25._brand] = true;
$invalid$array$index$brands6442[$invalid$array$index$brander6441._brand] = true;
var invalid$array$index6448 = R.makeVariantConstructor(L[2579],function() {
return [$type$String7,$type$Number8,$type$String7];
},["method$name6449","index6450","reason6451"],[L[2576],L[2577],L[2578]],[false,false,false,false],["method$name6449","array6452","index6450","reason6451"],$invalid$array$index_mutablemask6446,$invalid$array$index$base6440,$invalid$array$index$brands6442,"invalid-array-index",$invalid$array$index_getfieldsref6445,$invalid$array$index_getfields6447,$invalid$array$index$base6440);
var $equality$failure_getfields6460 = function(f) {
return f(this.dict["reason"],this.dict["value1"],this.dict["value2"]);
};
var $equality$failure_getfieldsref6458 = function(f,refmask) {
return f(R.derefField(this.dict["reason"],false,refmask[0]),R.derefField(this.dict["value1"],false,refmask[1]),R.derefField(this.dict["value2"],false,refmask[2]));
};
var $equality$failure_mutablemask6459 = [false,false,false];
var $equality$failure$base6453 = {"$fieldNames":["reason","value1","value2"],
"render-fancy-reason":anf_variant_member6456,
"render-reason":anf_variant_member6457,
"_match":R.makeMatch("equality-failure",3)};
var $equality$failure$brander6454 = R.namedBrander("equality-failure",L[2580]);
var $equality$failure$brands6455 = {};
$equality$failure$brands6455[RuntimeError25._brand] = true;
$equality$failure$brands6455[$equality$failure$brander6454._brand] = true;
var equality$failure6461 = R.makeVariantConstructor(L[2582],function() {
return [$type$String7];
},["reason6462"],[L[2581]],[false,false,false],["reason6462","value16463","value26464"],$equality$failure_mutablemask6459,$equality$failure$base6453,$equality$failure$brands6455,"equality-failure",$equality$failure_getfieldsref6458,$equality$failure_getfields6460,$equality$failure$base6453);
var $user$break_getfields6472 = function(f) {
return f();
};
var $user$break_getfieldsref6470 = function(f) {
return f();
};
var $user$break_mutablemask6471 = [];
var $user$break$base6465 = {"render-fancy-reason":anf_singleton_variant_member6468,
"render-reason":anf_singleton_variant_member6469,
"_match":R.makeMatch("user-break",0)};
var $user$break$brander6466 = R.namedBrander("user-break",L[2583]);
var $user$break$brands6467 = {};
$user$break$brands6467[RuntimeError25._brand] = true;
$user$break$brands6467[$user$break$brander6466._brand] = true;
var $user$exception_getfields6481 = function(f) {
return f(this.dict["value"]);
};
var $user$exception_getfieldsref6479 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]));
};
var $user$exception_mutablemask6480 = [false];
var $user$exception$base6473 = {"$fieldNames":["value"],
"render-fancy-reason":anf_variant_member6476,
"render-reason":anf_variant_member6477,
"_output":anf_variant_member6478,
"_match":R.makeMatch("user-exception",1)};
var $user$exception$brander6474 = R.namedBrander("user-exception",L[2584]);
var $user$exception$brands6475 = {};
$user$exception$brands6475[RuntimeError25._brand] = true;
$user$exception$brands6475[$user$exception$brander6474._brand] = true;
var user$exception6482 = R.makeVariantConstructor(L[2585],function() {
return [];
},[],[],[false],["value6483"],$user$exception_mutablemask6480,$user$exception$base6473,$user$exception$brands6475,"user-exception",$user$exception_getfieldsref6479,$user$exception_getfields6481,$user$exception$base6473);
var anf_assign6484 = R.makeObject({"RuntimeError":G(RuntimeError25,"test",L[2586]),
"is-multi-error":G($multi$error$brander6070,"test",L[2503]),
"multi-error":multi$error6077,
"is-sample-error":G($sample$error$brander6080,"test",L[2505]),
"sample-error":sample$error6087,
"is-message-exception":G($message$exception$brander6091,"test",L[2507]),
"message-exception":message$exception6099,
"is-update-non-obj":G($update$non$obj$brander6102,"test",L[2510]),
"update-non-obj":update$non$obj6109,
"is-update-frozen-ref":G($update$frozen$ref$brander6114,"test",L[2512]),
"update-frozen-ref":update$frozen$ref6121,
"is-update-non-ref":G($update$non$ref$brander6128,"test",L[2514]),
"update-non-ref":update$non$ref6135,
"is-update-non-existent-field":G($update$non$existent$field$brander6142,"test",L[2516]),
"update-non-existent-field":update$non$existent$field6149,
"is-no-cases-matched":G($no$cases$matched$brander6156,"test",L[2518]),
"no-cases-matched":no$cases$matched6163,
"is-no-branches-matched":G($no$branches$matched$brander6167,"test",L[2520]),
"no-branches-matched":no$branches$matched6174,
"is-internal-error":G($internal$error$brander6178,"test",L[2523]),
"internal-error":internal$error6185,
"is-template-not-finished":G($template$not$finished$brander6189,"test",L[2525]),
"template-not-finished":template$not$finished6196,
"is-field-not-found":G($field$not$found$brander6199,"test",L[2527]),
"field-not-found":field$not$found6206,
"is-lookup-constructor-not-object":G($lookup$constructor$not$object$brander6211,"test",L[2530]),
"lookup-constructor-not-object":lookup$constructor$not$object6218,
"is-lookup-non-tuple":G($lookup$non$tuple$brander6223,"test",L[2534]),
"lookup-non-tuple":lookup$non$tuple6230,
"is-lookup-large-index":G($lookup$large$index$brander6235,"test",L[2537]),
"lookup-large-index":lookup$large$index6242,
"is-non-tuple-bind":G($non$tuple$bind$brander6248,"test",L[2540]),
"non-tuple-bind":non$tuple$bind6255,
"is-bad-tuple-bind":G($bad$tuple$bind$brander6259,"test",L[2542]),
"bad-tuple-bind":bad$tuple$bind6266,
"is-lookup-non-object":G($lookup$non$object$brander6272,"test",L[2544]),
"lookup-non-object":lookup$non$object6279,
"is-extend-non-object":G($extend$non$object$brander6284,"test",L[2547]),
"extend-non-object":extend$non$object6291,
"is-non-boolean-condition":G($non$boolean$condition$brander6295,"test",L[2549]),
"non-boolean-condition":non$boolean$condition6302,
"is-non-boolean-op":G($non$boolean$op$brander6307,"test",L[2551]),
"non-boolean-op":non$boolean$op6314,
"is-generic-type-mismatch":G($generic$type$mismatch$brander6320,"test",L[2553]),
"generic-type-mismatch":generic$type$mismatch6327,
"is-num-string-binop-error":G($num$string$binop$error$brander6331,"test",L[2556]),
"num-string-binop-error":num$string$binop$error6338,
"is-numeric-binop-error":G($numeric$binop$error$brander6345,"test",L[2558]),
"numeric-binop-error":numeric$binop$error6352,
"is-cases-singleton-mismatch":G($cases$singleton$mismatch$brander6359,"test",L[2560]),
"cases-singleton-mismatch":cases$singleton$mismatch6366,
"is-cases-arity-mismatch":G($cases$arity$mismatch$brander6371,"test",L[2563]),
"cases-arity-mismatch":cases$arity$mismatch6378,
"is-constructor-arity-mismatch":G($constructor$arity$mismatch$brander6384,"test",L[2565]),
"constructor-arity-mismatch":constructor$arity$mismatch6391,
"is-arity-mismatch":G($arity$mismatch$brander6397,"test",L[2567]),
"arity-mismatch":arity$mismatch6404,
"is-non-function-app":G($non$function$app$brander6409,"test",L[2569]),
"non-function-app":non$function$app6416,
"is-uninitialized-id":G($uninitialized$id$brander6420,"test",L[2571]),
"uninitialized-id":uninitialized$id6427,
"is-module-load-failure":G($module$load$failure$brander6431,"test",L[2573]),
"module-load-failure":module$load$failure6438,
"is-invalid-array-index":G($invalid$array$index$brander6441,"test",L[2575]),
"invalid-array-index":invalid$array$index6448,
"is-equality-failure":G($equality$failure$brander6454,"test",L[2580]),
"equality-failure":equality$failure6461,
"is-user-break":G($user$break$brander6466,"test",L[2583]),
"user-break":R.makeDataValue($user$break$base6465,$user$break$brands6467,"user-break",$user$break_getfieldsref6470,$user$break_getfields6472,-1,$user$break_mutablemask6471,$user$break$base6465),
"is-user-exception":G($user$exception$brander6474,"test",L[2584]),
"user-exception":user$exception6482});
RuntimeError6485.$var = anf_assign6484;
var anf_bracket6486 = RuntimeError6485.$var;
$al24 = L[2586];
var anf_assign6487 = G(anf_bracket6486,"RuntimeError",L[2586]);
is$RuntimeError6488.$var = anf_assign6487;
var anf_bracket6489 = RuntimeError6485.$var;
$al24 = L[2503];
var anf_assign6490 = G(anf_bracket6489,"is-multi-error",L[2503]);
is$multi$error6491.$var = anf_assign6490;
var anf_bracket6492 = RuntimeError6485.$var;
$al24 = L[2503];
var anf_assign6493 = G(anf_bracket6492,"multi-error",L[2503]);
multi$error6494.$var = anf_assign6493;
var anf_bracket6495 = RuntimeError6485.$var;
$al24 = L[2505];
var anf_assign6496 = G(anf_bracket6495,"is-sample-error",L[2505]);
is$sample$error6497.$var = anf_assign6496;
var anf_bracket6498 = RuntimeError6485.$var;
$al24 = L[2505];
var anf_assign6499 = G(anf_bracket6498,"sample-error",L[2505]);
sample$error6500.$var = anf_assign6499;
var anf_bracket6501 = RuntimeError6485.$var;
$al24 = L[2507];
var anf_assign6502 = G(anf_bracket6501,"is-message-exception",L[2507]);
is$message$exception6503.$var = anf_assign6502;
var anf_bracket6504 = RuntimeError6485.$var;
$al24 = L[2507];
var anf_assign6505 = G(anf_bracket6504,"message-exception",L[2507]);
message$exception6506.$var = anf_assign6505;
var anf_bracket6507 = RuntimeError6485.$var;
$al24 = L[2510];
var anf_assign6508 = G(anf_bracket6507,"is-update-non-obj",L[2510]);
is$update$non$obj6509.$var = anf_assign6508;
var anf_bracket6510 = RuntimeError6485.$var;
$al24 = L[2510];
var anf_assign6511 = G(anf_bracket6510,"update-non-obj",L[2510]);
update$non$obj6512.$var = anf_assign6511;
var anf_bracket6513 = RuntimeError6485.$var;
$al24 = L[2512];
var anf_assign6514 = G(anf_bracket6513,"is-update-frozen-ref",L[2512]);
is$update$frozen$ref6515.$var = anf_assign6514;
var anf_bracket6516 = RuntimeError6485.$var;
$al24 = L[2512];
var anf_assign6517 = G(anf_bracket6516,"update-frozen-ref",L[2512]);
update$frozen$ref6518.$var = anf_assign6517;
var anf_bracket6519 = RuntimeError6485.$var;
$al24 = L[2514];
var anf_assign6520 = G(anf_bracket6519,"is-update-non-ref",L[2514]);
is$update$non$ref6521.$var = anf_assign6520;
var anf_bracket6522 = RuntimeError6485.$var;
$al24 = L[2514];
var anf_assign6523 = G(anf_bracket6522,"update-non-ref",L[2514]);
update$non$ref6524.$var = anf_assign6523;
var anf_bracket6525 = RuntimeError6485.$var;
$al24 = L[2516];
var anf_assign6526 = G(anf_bracket6525,"is-update-non-existent-field",L[2516]);
is$update$non$existent$field6527.$var = anf_assign6526;
var anf_bracket6528 = RuntimeError6485.$var;
$al24 = L[2516];
var anf_assign6529 = G(anf_bracket6528,"update-non-existent-field",L[2516]);
update$non$existent$field6530.$var = anf_assign6529;
var anf_bracket6531 = RuntimeError6485.$var;
$al24 = L[2518];
var anf_assign6532 = G(anf_bracket6531,"is-no-cases-matched",L[2518]);
is$no$cases$matched6533.$var = anf_assign6532;
var anf_bracket6534 = RuntimeError6485.$var;
$al24 = L[2518];
var anf_assign6535 = G(anf_bracket6534,"no-cases-matched",L[2518]);
no$cases$matched6536.$var = anf_assign6535;
var anf_bracket6537 = RuntimeError6485.$var;
$al24 = L[2520];
var anf_assign6538 = G(anf_bracket6537,"is-no-branches-matched",L[2520]);
is$no$branches$matched6539.$var = anf_assign6538;
var anf_bracket6540 = RuntimeError6485.$var;
$al24 = L[2520];
var anf_assign6541 = G(anf_bracket6540,"no-branches-matched",L[2520]);
no$branches$matched6542.$var = anf_assign6541;
var anf_bracket6543 = RuntimeError6485.$var;
$al24 = L[2523];
var anf_assign6544 = G(anf_bracket6543,"is-internal-error",L[2523]);
is$internal$error6545.$var = anf_assign6544;
var anf_bracket6546 = RuntimeError6485.$var;
$al24 = L[2523];
var anf_assign6547 = G(anf_bracket6546,"internal-error",L[2523]);
internal$error6548.$var = anf_assign6547;
var anf_bracket6549 = RuntimeError6485.$var;
$al24 = L[2525];
var anf_assign6550 = G(anf_bracket6549,"is-template-not-finished",L[2525]);
is$template$not$finished6551.$var = anf_assign6550;
var anf_bracket6552 = RuntimeError6485.$var;
$al24 = L[2525];
var anf_assign6553 = G(anf_bracket6552,"template-not-finished",L[2525]);
template$not$finished6554.$var = anf_assign6553;
var anf_bracket6555 = RuntimeError6485.$var;
$al24 = L[2527];
var anf_assign6556 = G(anf_bracket6555,"is-field-not-found",L[2527]);
is$field$not$found6557.$var = anf_assign6556;
var anf_bracket6558 = RuntimeError6485.$var;
$al24 = L[2527];
var anf_assign6559 = G(anf_bracket6558,"field-not-found",L[2527]);
field$not$found6560.$var = anf_assign6559;
var anf_bracket6561 = RuntimeError6485.$var;
$al24 = L[2530];
var anf_assign6562 = G(anf_bracket6561,"is-lookup-constructor-not-object",L[2530]);
is$lookup$constructor$not$object6563.$var = anf_assign6562;
var anf_bracket6564 = RuntimeError6485.$var;
$al24 = L[2530];
var anf_assign6565 = G(anf_bracket6564,"lookup-constructor-not-object",L[2530]);
lookup$constructor$not$object6566.$var = anf_assign6565;
var anf_bracket6567 = RuntimeError6485.$var;
$al24 = L[2534];
var anf_assign6568 = G(anf_bracket6567,"is-lookup-non-tuple",L[2534]);
is$lookup$non$tuple6569.$var = anf_assign6568;
var anf_bracket6570 = RuntimeError6485.$var;
$al24 = L[2534];
var anf_assign6571 = G(anf_bracket6570,"lookup-non-tuple",L[2534]);
lookup$non$tuple6572.$var = anf_assign6571;
var anf_bracket6573 = RuntimeError6485.$var;
$al24 = L[2537];
var anf_assign6574 = G(anf_bracket6573,"is-lookup-large-index",L[2537]);
is$lookup$large$index6575.$var = anf_assign6574;
var anf_bracket6576 = RuntimeError6485.$var;
$al24 = L[2537];
var anf_assign6577 = G(anf_bracket6576,"lookup-large-index",L[2537]);
lookup$large$index6578.$var = anf_assign6577;
var anf_bracket6579 = RuntimeError6485.$var;
$al24 = L[2540];
var anf_assign6580 = G(anf_bracket6579,"is-non-tuple-bind",L[2540]);
is$non$tuple$bind6581.$var = anf_assign6580;
var anf_bracket6582 = RuntimeError6485.$var;
$al24 = L[2540];
var anf_assign6583 = G(anf_bracket6582,"non-tuple-bind",L[2540]);
non$tuple$bind6584.$var = anf_assign6583;
var anf_bracket6585 = RuntimeError6485.$var;
$al24 = L[2542];
var anf_assign6586 = G(anf_bracket6585,"is-bad-tuple-bind",L[2542]);
is$bad$tuple$bind6587.$var = anf_assign6586;
var anf_bracket6588 = RuntimeError6485.$var;
$al24 = L[2542];
var anf_assign6589 = G(anf_bracket6588,"bad-tuple-bind",L[2542]);
bad$tuple$bind6590.$var = anf_assign6589;
var anf_bracket6591 = RuntimeError6485.$var;
$al24 = L[2544];
var anf_assign6592 = G(anf_bracket6591,"is-lookup-non-object",L[2544]);
is$lookup$non$object6593.$var = anf_assign6592;
var anf_bracket6594 = RuntimeError6485.$var;
$al24 = L[2544];
var anf_assign6595 = G(anf_bracket6594,"lookup-non-object",L[2544]);
lookup$non$object6596.$var = anf_assign6595;
var anf_bracket6597 = RuntimeError6485.$var;
$al24 = L[2547];
var anf_assign6598 = G(anf_bracket6597,"is-extend-non-object",L[2547]);
is$extend$non$object6599.$var = anf_assign6598;
var anf_bracket6600 = RuntimeError6485.$var;
$al24 = L[2547];
var anf_assign6601 = G(anf_bracket6600,"extend-non-object",L[2547]);
extend$non$object6602.$var = anf_assign6601;
var anf_bracket6603 = RuntimeError6485.$var;
$al24 = L[2549];
var anf_assign6604 = G(anf_bracket6603,"is-non-boolean-condition",L[2549]);
is$non$boolean$condition6605.$var = anf_assign6604;
var anf_bracket6606 = RuntimeError6485.$var;
$al24 = L[2549];
var anf_assign6607 = G(anf_bracket6606,"non-boolean-condition",L[2549]);
non$boolean$condition6608.$var = anf_assign6607;
var anf_bracket6609 = RuntimeError6485.$var;
$al24 = L[2551];
var anf_assign6610 = G(anf_bracket6609,"is-non-boolean-op",L[2551]);
is$non$boolean$op6611.$var = anf_assign6610;
var anf_bracket6612 = RuntimeError6485.$var;
$al24 = L[2551];
var anf_assign6613 = G(anf_bracket6612,"non-boolean-op",L[2551]);
non$boolean$op6614.$var = anf_assign6613;
var anf_bracket6615 = RuntimeError6485.$var;
$al24 = L[2553];
var anf_assign6616 = G(anf_bracket6615,"is-generic-type-mismatch",L[2553]);
is$generic$type$mismatch6617.$var = anf_assign6616;
var anf_bracket6618 = RuntimeError6485.$var;
$al24 = L[2553];
var anf_assign6619 = G(anf_bracket6618,"generic-type-mismatch",L[2553]);
generic$type$mismatch6620.$var = anf_assign6619;
var anf_bracket6621 = RuntimeError6485.$var;
$al24 = L[2556];
var anf_assign6622 = G(anf_bracket6621,"is-num-string-binop-error",L[2556]);
is$num$string$binop$error6623.$var = anf_assign6622;
var anf_bracket6624 = RuntimeError6485.$var;
$al24 = L[2556];
var anf_assign6625 = G(anf_bracket6624,"num-string-binop-error",L[2556]);
num$string$binop$error6626.$var = anf_assign6625;
var anf_bracket6627 = RuntimeError6485.$var;
$al24 = L[2558];
var anf_assign6628 = G(anf_bracket6627,"is-numeric-binop-error",L[2558]);
is$numeric$binop$error6629.$var = anf_assign6628;
var anf_bracket6630 = RuntimeError6485.$var;
$al24 = L[2558];
var anf_assign6631 = G(anf_bracket6630,"numeric-binop-error",L[2558]);
numeric$binop$error6632.$var = anf_assign6631;
var anf_bracket6633 = RuntimeError6485.$var;
$al24 = L[2560];
var anf_assign6634 = G(anf_bracket6633,"is-cases-singleton-mismatch",L[2560]);
is$cases$singleton$mismatch6635.$var = anf_assign6634;
var anf_bracket6636 = RuntimeError6485.$var;
$al24 = L[2560];
var anf_assign6637 = G(anf_bracket6636,"cases-singleton-mismatch",L[2560]);
cases$singleton$mismatch6638.$var = anf_assign6637;
var anf_bracket6639 = RuntimeError6485.$var;
$al24 = L[2563];
var anf_assign6640 = G(anf_bracket6639,"is-cases-arity-mismatch",L[2563]);
is$cases$arity$mismatch6641.$var = anf_assign6640;
var anf_bracket6642 = RuntimeError6485.$var;
$al24 = L[2563];
var anf_assign6643 = G(anf_bracket6642,"cases-arity-mismatch",L[2563]);
cases$arity$mismatch6644.$var = anf_assign6643;
var anf_bracket6645 = RuntimeError6485.$var;
$al24 = L[2565];
var anf_assign6646 = G(anf_bracket6645,"is-constructor-arity-mismatch",L[2565]);
is$constructor$arity$mismatch6647.$var = anf_assign6646;
var anf_bracket6648 = RuntimeError6485.$var;
$al24 = L[2565];
var anf_assign6649 = G(anf_bracket6648,"constructor-arity-mismatch",L[2565]);
constructor$arity$mismatch6650.$var = anf_assign6649;
var anf_bracket6651 = RuntimeError6485.$var;
$al24 = L[2567];
var anf_assign6652 = G(anf_bracket6651,"is-arity-mismatch",L[2567]);
is$arity$mismatch6653.$var = anf_assign6652;
var anf_bracket6654 = RuntimeError6485.$var;
$al24 = L[2567];
var anf_assign6655 = G(anf_bracket6654,"arity-mismatch",L[2567]);
arity$mismatch6656.$var = anf_assign6655;
var anf_bracket6657 = RuntimeError6485.$var;
$al24 = L[2569];
var anf_assign6658 = G(anf_bracket6657,"is-non-function-app",L[2569]);
is$non$function$app6659.$var = anf_assign6658;
var anf_bracket6660 = RuntimeError6485.$var;
$al24 = L[2569];
var anf_assign6661 = G(anf_bracket6660,"non-function-app",L[2569]);
non$function$app6662.$var = anf_assign6661;
var anf_bracket6663 = RuntimeError6485.$var;
$al24 = L[2571];
var anf_assign6664 = G(anf_bracket6663,"is-uninitialized-id",L[2571]);
is$uninitialized$id6665.$var = anf_assign6664;
var anf_bracket6666 = RuntimeError6485.$var;
$al24 = L[2571];
var anf_assign6667 = G(anf_bracket6666,"uninitialized-id",L[2571]);
uninitialized$id6668.$var = anf_assign6667;
var anf_bracket6669 = RuntimeError6485.$var;
$al24 = L[2573];
var anf_assign6670 = G(anf_bracket6669,"is-module-load-failure",L[2573]);
is$module$load$failure6671.$var = anf_assign6670;
var anf_bracket6672 = RuntimeError6485.$var;
$al24 = L[2573];
var anf_assign6673 = G(anf_bracket6672,"module-load-failure",L[2573]);
module$load$failure6674.$var = anf_assign6673;
var anf_bracket6675 = RuntimeError6485.$var;
$al24 = L[2575];
var anf_assign6676 = G(anf_bracket6675,"is-invalid-array-index",L[2575]);
is$invalid$array$index6677.$var = anf_assign6676;
var anf_bracket6678 = RuntimeError6485.$var;
$al24 = L[2575];
var anf_assign6679 = G(anf_bracket6678,"invalid-array-index",L[2575]);
invalid$array$index6680.$var = anf_assign6679;
var anf_bracket6681 = RuntimeError6485.$var;
$al24 = L[2580];
var anf_assign6682 = G(anf_bracket6681,"is-equality-failure",L[2580]);
is$equality$failure6683.$var = anf_assign6682;
var anf_bracket6684 = RuntimeError6485.$var;
$al24 = L[2580];
var anf_assign6685 = G(anf_bracket6684,"equality-failure",L[2580]);
equality$failure6686.$var = anf_assign6685;
var anf_bracket6687 = RuntimeError6485.$var;
$al24 = L[2583];
var anf_assign6688 = G(anf_bracket6687,"is-user-break",L[2583]);
is$user$break6689.$var = anf_assign6688;
var anf_bracket6690 = RuntimeError6485.$var;
$al24 = L[2583];
var anf_assign6691 = G(anf_bracket6690,"user-break",L[2583]);
user$break6692.$var = anf_assign6691;
var anf_bracket6693 = RuntimeError6485.$var;
$al24 = L[2584];
var anf_assign6694 = G(anf_bracket6693,"is-user-exception",L[2584]);
is$user$exception6695.$var = anf_assign6694;
var anf_bracket6696 = RuntimeError6485.$var;
$al24 = L[2584];
var anf_assign6697 = G(anf_bracket6696,"user-exception",L[2584]);
user$exception6698.$var = anf_assign6697;
var $temp_full6700 = function($self6701) {
var $step6699 = 0;
var $ans6702 = D;
var $al6703 = L[2589];
try {
if(R.isActivationRecord($self6701)) {
$step6699 = $self6701.step;
$al6703 = $self6701.from;
$ans6702 = $self6701.ans;
self6701 = $self6701.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2589],1,$t);
}
var self6701 = $self6701;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6699) {
case 0: $step6699 = 1;
$al6703 = L[2587];
$field6704 = R.getColonFieldLoc(self6701,"_tostring",L[2587]);
if(R.isMethod($field6704)) {
$ans6702 = $field6704.full_meth(self6701,tostring1);
} else {
if(!(R.isFunction($field6704))) {
R.ffi.throwNonFunApp(L[2587],$field6704);
}
$ans6702 = $field6704.app(tostring1);
}
break;
case 1: var anf_arg6705 = $ans6702;
$step6699 = 2;
$al6703 = L[2588];
$field6706 = R.getColonFieldLoc(ED5,"text",L[2588]);
if(R.isMethod($field6706)) {
$ans6702 = $field6706.full_meth(ED5,anf_arg6705);
} else {
if(!(R.isFunction($field6706))) {
R.ffi.throwNonFunApp(L[2588],$field6706);
}
$ans6702 = $field6706.app(anf_arg6705);
}
break;
case 2: ++R.GAS;
return $ans6702;
default: throw "No case numbered " + $step6699 + " in $temp_full6700";
}
}
} catch($e6707) {
if(R.isCont($e6707) && ($step6699 !== 2)) {
$e6707.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6703,$temp_full6700,$step6699,[self6701],[]);
}
if(R.isPyretException($e6707)) {
$e6707.pyretStack.push($al6703);
}
throw $e6707;
}
};
var anf_shared7147 = R.makeMethod0($temp_full6700,"render-reason");
var $temp_full6709 = function($self6710,$src$available6711) {
var $step6708 = 0;
var $ans6712 = D;
var $al6713 = L[2638];
try {
if(R.isActivationRecord($self6710)) {
$step6708 = $self6710.step;
$al6713 = $self6710.from;
$ans6712 = $self6710.ans;
self6710 = $self6710.args[0];
src$available6711 = $self6710.args[1];
anf_method_obj6747 = $self6710.vars[0];
anf_method_obj6717 = $self6710.vars[1];
anf_arg6748 = $self6710.vars[2];
anf_arg6749 = $self6710.vars[3];
anf_method_obj6744 = $self6710.vars[4];
anf_array6745 = $self6710.vars[5];
anf_arg6728 = $self6710.vars[6];
anf_method_obj6784 = $self6710.vars[7];
anf_method_obj6755 = $self6710.vars[8];
anf_arg6756 = $self6710.vars[9];
anf_arg6785 = $self6710.vars[10];
anf_method_obj6781 = $self6710.vars[11];
anf_array6782 = $self6710.vars[12];
anf_arg6765 = $self6710.vars[13];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2638],2,$t);
}
var self6710 = $self6710;
var src$available6711 = $src$available6711;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6708) {
case 0: $al6713 = L[2590];
var anf_arg6714 = G(self6710,"loc",L[2590]);
$step6708 = 1;
$al6713 = L[2591];
if(!(R.isFunction(src$available6711))) {
R.ffi.throwNonFunApp($al6713,src$available6711);
}
$ans6712 = src$available6711.app(anf_arg6714);
break;
case 1: var anf_arg6715 = $ans6712;
$al6713 = L[2591];
var anf_if6788 = R.checkWrapBoolean(anf_arg6715);
$step6708 = R.isPyretTrue(anf_if6788)?2:22;
break;
case 2: $al6713 = L[2592];
var anf_method_obj6747 = G(ED5,"error",L[2592]);
$al6713 = L[2593];
var anf_method_obj6717 = G(ED5,"para",L[2593]);
$step6708 = 3;
$al6713 = L[2594];
$field6716 = R.getColonFieldLoc(ED5,"text",L[2594]);
if(R.isMethod($field6716)) {
$ans6712 = $field6716.full_meth(ED5,("Pyret didn't understand your program around "));
} else {
if(!(R.isFunction($field6716))) {
R.ffi.throwNonFunApp(L[2594],$field6716);
}
$ans6712 = $field6716.app(("Pyret didn't understand your program around "));
}
break;
case 3: var anf_arg6718 = $ans6712;
$step6708 = 4;
$al6713 = L[2593];
$field6719 = R.getColonFieldLoc(anf_method_obj6717,"make1",L[2593]);
if(R.isMethod($field6719)) {
$ans6712 = $field6719.full_meth(anf_method_obj6717,anf_arg6718);
} else {
if(!(R.isFunction($field6719))) {
R.ffi.throwNonFunApp(L[2593],$field6719);
}
$ans6712 = $field6719.app(anf_arg6718);
}
break;
case 4: var anf_arg6748 = $ans6712;
$al6713 = L[2595];
var anf_arg6720 = G(self6710,"loc",L[2595]);
$step6708 = 5;
$al6713 = L[2596];
$field6721 = R.getColonFieldLoc(ED5,"cmcode",L[2596]);
if(R.isMethod($field6721)) {
$ans6712 = $field6721.full_meth(ED5,anf_arg6720);
} else {
if(!(R.isFunction($field6721))) {
R.ffi.throwNonFunApp(L[2596],$field6721);
}
$ans6712 = $field6721.app(anf_arg6720);
}
break;
case 5: var anf_arg6749 = $ans6712;
$al6713 = L[2597];
var anf_method_obj6744 = G(ED5,"para",L[2597]);
$al6713 = L[2598];
var anf_array6745 = R.makeArrayN((10));
$step6708 = 6;
$al6713 = L[2599];
$field6722 = R.getColonFieldLoc(ED5,"text",L[2599]);
if(R.isMethod($field6722)) {
$ans6712 = $field6722.full_meth(ED5,(" You may need to add or remove some text to fix your program. "));
} else {
if(!(R.isFunction($field6722))) {
R.ffi.throwNonFunApp(L[2599],$field6722);
}
$ans6712 = $field6722.app((" You may need to add or remove some text to fix your program. "));
}
break;
case 6: anf_array6745[0] = $ans6712;
$step6708 = 7;
$al6713 = L[2600];
$field6723 = R.getColonFieldLoc(ED5,"text",L[2600]);
if(R.isMethod($field6723)) {
$ans6712 = $field6723.full_meth(ED5,("Look carefully before the "));
} else {
if(!(R.isFunction($field6723))) {
R.ffi.throwNonFunApp(L[2600],$field6723);
}
$ans6712 = $field6723.app(("Look carefully before the "));
}
break;
case 7: anf_array6745[1] = $ans6712;
$step6708 = 8;
$al6713 = L[2601];
$field6724 = R.getColonFieldLoc(ED5,"text",L[2601]);
if(R.isMethod($field6724)) {
$ans6712 = $field6724.full_meth(ED5,("highlighted text"));
} else {
if(!(R.isFunction($field6724))) {
R.ffi.throwNonFunApp(L[2601],$field6724);
}
$ans6712 = $field6724.app(("highlighted text"));
}
break;
case 8: var anf_arg6728 = $ans6712;
$al6713 = L[2602];
var anf_method_obj6725 = G(ED5,"locs",L[2602]);
$al6713 = L[2603];
var anf_arg6726 = G(self6710,"loc",L[2603]);
$step6708 = 9;
$al6713 = L[2602];
$field6727 = R.getColonFieldLoc(anf_method_obj6725,"make1",L[2602]);
if(R.isMethod($field6727)) {
$ans6712 = $field6727.full_meth(anf_method_obj6725,anf_arg6726);
} else {
if(!(R.isFunction($field6727))) {
R.ffi.throwNonFunApp(L[2602],$field6727);
}
$ans6712 = $field6727.app(anf_arg6726);
}
break;
case 9: var anf_arg6729 = $ans6712;
$step6708 = 10;
$al6713 = L[2604];
$field6730 = R.getColonFieldLoc(ED5,"highlight",L[2604]);
if(R.isMethod($field6730)) {
$ans6712 = $field6730.full_meth(ED5,anf_arg6728,anf_arg6729,(0));
} else {
if(!(R.isFunction($field6730))) {
R.ffi.throwNonFunApp(L[2604],$field6730);
}
$ans6712 = $field6730.app(anf_arg6728,anf_arg6729,(0));
}
break;
case 10: anf_array6745[2] = $ans6712;
$step6708 = 11;
$al6713 = L[2605];
$field6731 = R.getColonFieldLoc(ED5,"text",L[2605]);
if(R.isMethod($field6731)) {
$ans6712 = $field6731.full_meth(ED5,(". Is there a missing colon ("));
} else {
if(!(R.isFunction($field6731))) {
R.ffi.throwNonFunApp(L[2605],$field6731);
}
$ans6712 = $field6731.app((". Is there a missing colon ("));
}
break;
case 11: anf_array6745[3] = $ans6712;
$step6708 = 12;
$al6713 = L[2606];
$field6732 = R.getColonFieldLoc(ED5,"text",L[2606]);
if(R.isMethod($field6732)) {
$ans6712 = $field6732.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field6732))) {
R.ffi.throwNonFunApp(L[2606],$field6732);
}
$ans6712 = $field6732.app((":"));
}
break;
case 12: var anf_arg6733 = $ans6712;
$step6708 = 13;
$al6713 = L[2607];
$field6734 = R.getColonFieldLoc(ED5,"code",L[2607]);
if(R.isMethod($field6734)) {
$ans6712 = $field6734.full_meth(ED5,anf_arg6733);
} else {
if(!(R.isFunction($field6734))) {
R.ffi.throwNonFunApp(L[2607],$field6734);
}
$ans6712 = $field6734.app(anf_arg6733);
}
break;
case 13: anf_array6745[4] = $ans6712;
$step6708 = 14;
$al6713 = L[2608];
$field6735 = R.getColonFieldLoc(ED5,"text",L[2608]);
if(R.isMethod($field6735)) {
$ans6712 = $field6735.full_meth(ED5,("), comma ("));
} else {
if(!(R.isFunction($field6735))) {
R.ffi.throwNonFunApp(L[2608],$field6735);
}
$ans6712 = $field6735.app(("), comma ("));
}
break;
case 14: anf_array6745[5] = $ans6712;
$step6708 = 15;
$al6713 = L[2609];
$field6736 = R.getColonFieldLoc(ED5,"text",L[2609]);
if(R.isMethod($field6736)) {
$ans6712 = $field6736.full_meth(ED5,(","));
} else {
if(!(R.isFunction($field6736))) {
R.ffi.throwNonFunApp(L[2609],$field6736);
}
$ans6712 = $field6736.app((","));
}
break;
case 15: var anf_arg6737 = $ans6712;
$step6708 = 16;
$al6713 = L[2610];
$field6738 = R.getColonFieldLoc(ED5,"code",L[2610]);
if(R.isMethod($field6738)) {
$ans6712 = $field6738.full_meth(ED5,anf_arg6737);
} else {
if(!(R.isFunction($field6738))) {
R.ffi.throwNonFunApp(L[2610],$field6738);
}
$ans6712 = $field6738.app(anf_arg6737);
}
break;
case 16: anf_array6745[6] = $ans6712;
$step6708 = 17;
$al6713 = L[2611];
$field6739 = R.getColonFieldLoc(ED5,"text",L[2611]);
if(R.isMethod($field6739)) {
$ans6712 = $field6739.full_meth(ED5,("), string marker ("));
} else {
if(!(R.isFunction($field6739))) {
R.ffi.throwNonFunApp(L[2611],$field6739);
}
$ans6712 = $field6739.app(("), string marker ("));
}
break;
case 17: anf_array6745[7] = $ans6712;
$step6708 = 18;
$al6713 = L[2612];
$field6740 = R.getColonFieldLoc(ED5,"text",L[2612]);
if(R.isMethod($field6740)) {
$ans6712 = $field6740.full_meth(ED5,("\""));
} else {
if(!(R.isFunction($field6740))) {
R.ffi.throwNonFunApp(L[2612],$field6740);
}
$ans6712 = $field6740.app(("\""));
}
break;
case 18: var anf_arg6741 = $ans6712;
$step6708 = 19;
$al6713 = L[2613];
$field6742 = R.getColonFieldLoc(ED5,"code",L[2613]);
if(R.isMethod($field6742)) {
$ans6712 = $field6742.full_meth(ED5,anf_arg6741);
} else {
if(!(R.isFunction($field6742))) {
R.ffi.throwNonFunApp(L[2613],$field6742);
}
$ans6712 = $field6742.app(anf_arg6741);
}
break;
case 19: anf_array6745[8] = $ans6712;
$step6708 = 20;
$al6713 = L[2614];
$field6743 = R.getColonFieldLoc(ED5,"text",L[2614]);
if(R.isMethod($field6743)) {
$ans6712 = $field6743.full_meth(ED5,("), or keyword? Is there something there that shouldn\u2019t be?"));
} else {
if(!(R.isFunction($field6743))) {
R.ffi.throwNonFunApp(L[2614],$field6743);
}
$ans6712 = $field6743.app(("), or keyword? Is there something there that shouldn\u2019t be?"));
}
break;
case 20: anf_array6745[9] = $ans6712;
$step6708 = 21;
$al6713 = L[2597];
$field6746 = R.getColonFieldLoc(anf_method_obj6744,"make",L[2597]);
if(R.isMethod($field6746)) {
$ans6712 = $field6746.full_meth(anf_method_obj6744,anf_array6745);
} else {
if(!(R.isFunction($field6746))) {
R.ffi.throwNonFunApp(L[2597],$field6746);
}
$ans6712 = $field6746.app(anf_array6745);
}
break;
case 21: var anf_arg6750 = $ans6712;
$step6708 = 42;
$al6713 = L[2592];
$field6751 = R.getColonFieldLoc(anf_method_obj6747,"make3",L[2592]);
if(R.isMethod($field6751)) {
$ans6712 = $field6751.full_meth(anf_method_obj6747,anf_arg6748,anf_arg6749,anf_arg6750);
} else {
if(!(R.isFunction($field6751))) {
R.ffi.throwNonFunApp(L[2592],$field6751);
}
$ans6712 = $field6751.app(anf_arg6748,anf_arg6749,anf_arg6750);
}
break;
case 22: $al6713 = L[2615];
var anf_method_obj6784 = G(ED5,"error",L[2615]);
$al6713 = L[2616];
var anf_method_obj6755 = G(ED5,"para",L[2616]);
$step6708 = 23;
$al6713 = L[2617];
$field6752 = R.getColonFieldLoc(ED5,"text",L[2617]);
if(R.isMethod($field6752)) {
$ans6712 = $field6752.full_meth(ED5,("Pyret didn't understand your program around "));
} else {
if(!(R.isFunction($field6752))) {
R.ffi.throwNonFunApp(L[2617],$field6752);
}
$ans6712 = $field6752.app(("Pyret didn't understand your program around "));
}
break;
case 23: var anf_arg6756 = $ans6712;
$al6713 = L[2618];
var anf_arg6753 = G(self6710,"loc",L[2618]);
$step6708 = 24;
$al6713 = L[2619];
$field6754 = R.getColonFieldLoc(ED5,"loc",L[2619]);
if(R.isMethod($field6754)) {
$ans6712 = $field6754.full_meth(ED5,anf_arg6753);
} else {
if(!(R.isFunction($field6754))) {
R.ffi.throwNonFunApp(L[2619],$field6754);
}
$ans6712 = $field6754.app(anf_arg6753);
}
break;
case 24: var anf_arg6757 = $ans6712;
$step6708 = 25;
$al6713 = L[2616];
$field6758 = R.getColonFieldLoc(anf_method_obj6755,"make2",L[2616]);
if(R.isMethod($field6758)) {
$ans6712 = $field6758.full_meth(anf_method_obj6755,anf_arg6756,anf_arg6757);
} else {
if(!(R.isFunction($field6758))) {
R.ffi.throwNonFunApp(L[2616],$field6758);
}
$ans6712 = $field6758.app(anf_arg6756,anf_arg6757);
}
break;
case 25: var anf_arg6785 = $ans6712;
$al6713 = L[2620];
var anf_method_obj6781 = G(ED5,"para",L[2620]);
$al6713 = L[2621];
var anf_array6782 = R.makeArrayN((10));
$step6708 = 26;
$al6713 = L[2622];
$field6759 = R.getColonFieldLoc(ED5,"text",L[2622]);
if(R.isMethod($field6759)) {
$ans6712 = $field6759.full_meth(ED5,(" You may need to add or remove some text to fix your program. "));
} else {
if(!(R.isFunction($field6759))) {
R.ffi.throwNonFunApp(L[2622],$field6759);
}
$ans6712 = $field6759.app((" You may need to add or remove some text to fix your program. "));
}
break;
case 26: anf_array6782[0] = $ans6712;
$step6708 = 27;
$al6713 = L[2623];
$field6760 = R.getColonFieldLoc(ED5,"text",L[2623]);
if(R.isMethod($field6760)) {
$ans6712 = $field6760.full_meth(ED5,("Look carefully before the "));
} else {
if(!(R.isFunction($field6760))) {
R.ffi.throwNonFunApp(L[2623],$field6760);
}
$ans6712 = $field6760.app(("Look carefully before the "));
}
break;
case 27: anf_array6782[1] = $ans6712;
$step6708 = 28;
$al6713 = L[2624];
$field6761 = R.getColonFieldLoc(ED5,"text",L[2624]);
if(R.isMethod($field6761)) {
$ans6712 = $field6761.full_meth(ED5,("highlighted text"));
} else {
if(!(R.isFunction($field6761))) {
R.ffi.throwNonFunApp(L[2624],$field6761);
}
$ans6712 = $field6761.app(("highlighted text"));
}
break;
case 28: var anf_arg6765 = $ans6712;
$al6713 = L[2625];
var anf_method_obj6762 = G(ED5,"locs",L[2625]);
$al6713 = L[2626];
var anf_arg6763 = G(self6710,"loc",L[2626]);
$step6708 = 29;
$al6713 = L[2625];
$field6764 = R.getColonFieldLoc(anf_method_obj6762,"make1",L[2625]);
if(R.isMethod($field6764)) {
$ans6712 = $field6764.full_meth(anf_method_obj6762,anf_arg6763);
} else {
if(!(R.isFunction($field6764))) {
R.ffi.throwNonFunApp(L[2625],$field6764);
}
$ans6712 = $field6764.app(anf_arg6763);
}
break;
case 29: var anf_arg6766 = $ans6712;
$step6708 = 30;
$al6713 = L[2627];
$field6767 = R.getColonFieldLoc(ED5,"highlight",L[2627]);
if(R.isMethod($field6767)) {
$ans6712 = $field6767.full_meth(ED5,anf_arg6765,anf_arg6766,(0));
} else {
if(!(R.isFunction($field6767))) {
R.ffi.throwNonFunApp(L[2627],$field6767);
}
$ans6712 = $field6767.app(anf_arg6765,anf_arg6766,(0));
}
break;
case 30: anf_array6782[2] = $ans6712;
$step6708 = 31;
$al6713 = L[2628];
$field6768 = R.getColonFieldLoc(ED5,"text",L[2628]);
if(R.isMethod($field6768)) {
$ans6712 = $field6768.full_meth(ED5,(". Is there a missing colon ("));
} else {
if(!(R.isFunction($field6768))) {
R.ffi.throwNonFunApp(L[2628],$field6768);
}
$ans6712 = $field6768.app((". Is there a missing colon ("));
}
break;
case 31: anf_array6782[3] = $ans6712;
$step6708 = 32;
$al6713 = L[2629];
$field6769 = R.getColonFieldLoc(ED5,"text",L[2629]);
if(R.isMethod($field6769)) {
$ans6712 = $field6769.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field6769))) {
R.ffi.throwNonFunApp(L[2629],$field6769);
}
$ans6712 = $field6769.app((":"));
}
break;
case 32: var anf_arg6770 = $ans6712;
$step6708 = 33;
$al6713 = L[2630];
$field6771 = R.getColonFieldLoc(ED5,"code",L[2630]);
if(R.isMethod($field6771)) {
$ans6712 = $field6771.full_meth(ED5,anf_arg6770);
} else {
if(!(R.isFunction($field6771))) {
R.ffi.throwNonFunApp(L[2630],$field6771);
}
$ans6712 = $field6771.app(anf_arg6770);
}
break;
case 33: anf_array6782[4] = $ans6712;
$step6708 = 34;
$al6713 = L[2631];
$field6772 = R.getColonFieldLoc(ED5,"text",L[2631]);
if(R.isMethod($field6772)) {
$ans6712 = $field6772.full_meth(ED5,("), comma ("));
} else {
if(!(R.isFunction($field6772))) {
R.ffi.throwNonFunApp(L[2631],$field6772);
}
$ans6712 = $field6772.app(("), comma ("));
}
break;
case 34: anf_array6782[5] = $ans6712;
$step6708 = 35;
$al6713 = L[2632];
$field6773 = R.getColonFieldLoc(ED5,"text",L[2632]);
if(R.isMethod($field6773)) {
$ans6712 = $field6773.full_meth(ED5,(","));
} else {
if(!(R.isFunction($field6773))) {
R.ffi.throwNonFunApp(L[2632],$field6773);
}
$ans6712 = $field6773.app((","));
}
break;
case 35: var anf_arg6774 = $ans6712;
$step6708 = 36;
$al6713 = L[2633];
$field6775 = R.getColonFieldLoc(ED5,"code",L[2633]);
if(R.isMethod($field6775)) {
$ans6712 = $field6775.full_meth(ED5,anf_arg6774);
} else {
if(!(R.isFunction($field6775))) {
R.ffi.throwNonFunApp(L[2633],$field6775);
}
$ans6712 = $field6775.app(anf_arg6774);
}
break;
case 36: anf_array6782[6] = $ans6712;
$step6708 = 37;
$al6713 = L[2634];
$field6776 = R.getColonFieldLoc(ED5,"text",L[2634]);
if(R.isMethod($field6776)) {
$ans6712 = $field6776.full_meth(ED5,("), string marker ("));
} else {
if(!(R.isFunction($field6776))) {
R.ffi.throwNonFunApp(L[2634],$field6776);
}
$ans6712 = $field6776.app(("), string marker ("));
}
break;
case 37: anf_array6782[7] = $ans6712;
$step6708 = 38;
$al6713 = L[2635];
$field6777 = R.getColonFieldLoc(ED5,"text",L[2635]);
if(R.isMethod($field6777)) {
$ans6712 = $field6777.full_meth(ED5,("\""));
} else {
if(!(R.isFunction($field6777))) {
R.ffi.throwNonFunApp(L[2635],$field6777);
}
$ans6712 = $field6777.app(("\""));
}
break;
case 38: var anf_arg6778 = $ans6712;
$step6708 = 39;
$al6713 = L[2636];
$field6779 = R.getColonFieldLoc(ED5,"code",L[2636]);
if(R.isMethod($field6779)) {
$ans6712 = $field6779.full_meth(ED5,anf_arg6778);
} else {
if(!(R.isFunction($field6779))) {
R.ffi.throwNonFunApp(L[2636],$field6779);
}
$ans6712 = $field6779.app(anf_arg6778);
}
break;
case 39: anf_array6782[8] = $ans6712;
$step6708 = 40;
$al6713 = L[2637];
$field6780 = R.getColonFieldLoc(ED5,"text",L[2637]);
if(R.isMethod($field6780)) {
$ans6712 = $field6780.full_meth(ED5,("), or keyword? Is there something there that shouldn\u2019t be?"));
} else {
if(!(R.isFunction($field6780))) {
R.ffi.throwNonFunApp(L[2637],$field6780);
}
$ans6712 = $field6780.app(("), or keyword? Is there something there that shouldn\u2019t be?"));
}
break;
case 40: anf_array6782[9] = $ans6712;
$step6708 = 41;
$al6713 = L[2620];
$field6783 = R.getColonFieldLoc(anf_method_obj6781,"make",L[2620]);
if(R.isMethod($field6783)) {
$ans6712 = $field6783.full_meth(anf_method_obj6781,anf_array6782);
} else {
if(!(R.isFunction($field6783))) {
R.ffi.throwNonFunApp(L[2620],$field6783);
}
$ans6712 = $field6783.app(anf_array6782);
}
break;
case 41: var anf_arg6786 = $ans6712;
$step6708 = 42;
$al6713 = L[2615];
$field6787 = R.getColonFieldLoc(anf_method_obj6784,"make2",L[2615]);
if(R.isMethod($field6787)) {
$ans6712 = $field6787.full_meth(anf_method_obj6784,anf_arg6785,anf_arg6786);
} else {
if(!(R.isFunction($field6787))) {
R.ffi.throwNonFunApp(L[2615],$field6787);
}
$ans6712 = $field6787.app(anf_arg6785,anf_arg6786);
}
break;
case 42: ++R.GAS;
return $ans6712;
default: throw "No case numbered " + $step6708 + " in $temp_full6709";
}
}
} catch($e6789) {
if(R.isCont($e6789) && ($step6708 !== 42)) {
$e6789.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6713,$temp_full6709,$step6708,[self6710,src$available6711],[anf_method_obj6747,anf_method_obj6717,anf_arg6748,anf_arg6749,anf_method_obj6744,anf_array6745,anf_arg6728,anf_method_obj6784,anf_method_obj6755,anf_arg6756,anf_arg6785,anf_method_obj6781,anf_array6782,anf_arg6765]);
}
if(R.isPyretException($e6789)) {
$e6789.pyretStack.push($al6713);
}
throw $e6789;
}
};
var anf_variant_member7151 = R.makeMethod1($temp_full6709,"render-fancy-reason");
var $temp_full6791 = function($self6792) {
var $step6790 = 0;
var $ans6793 = D;
var $al6794 = L[2662];
try {
if(R.isActivationRecord($self6792)) {
$step6790 = $self6792.step;
$al6794 = $self6792.from;
$ans6793 = $self6792.ans;
self6792 = $self6792.args[0];
anf_method_obj6830 = $self6792.vars[0];
anf_method_obj6798 = $self6792.vars[1];
anf_arg6799 = $self6792.vars[2];
anf_arg6831 = $self6792.vars[3];
anf_method_obj6803 = $self6792.vars[4];
anf_arg6832 = $self6792.vars[5];
anf_method_obj6807 = $self6792.vars[6];
anf_arg6833 = $self6792.vars[7];
anf_method_obj6823 = $self6792.vars[8];
anf_array6824 = $self6792.vars[9];
anf_arg6834 = $self6792.vars[10];
anf_method_obj6827 = $self6792.vars[11];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2662],1,$t);
}
var self6792 = $self6792;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6790) {
case 0: $al6794 = L[2639];
var anf_method_obj6830 = G(ED5,"error",L[2639]);
$al6794 = L[2640];
var anf_method_obj6798 = G(ED5,"para",L[2640]);
$step6790 = 1;
$al6794 = L[2641];
$field6795 = R.getColonFieldLoc(ED5,"text",L[2641]);
if(R.isMethod($field6795)) {
$ans6793 = $field6795.full_meth(ED5,("Pyret didn't understand your program around "));
} else {
if(!(R.isFunction($field6795))) {
R.ffi.throwNonFunApp(L[2641],$field6795);
}
$ans6793 = $field6795.app(("Pyret didn't understand your program around "));
}
break;
case 1: var anf_arg6799 = $ans6793;
var anf_fun6796 = draw$and$highlight38.$var;
$al6794 = L[2642];
var anf_arg6797 = G(self6792,"loc",L[2642]);
$step6790 = 2;
$al6794 = L[2661];
if(!(R.isFunction(anf_fun6796))) {
R.ffi.throwNonFunApp($al6794,anf_fun6796);
}
$ans6793 = anf_fun6796.app(anf_arg6797);
break;
case 2: var anf_arg6800 = $ans6793;
$step6790 = 3;
$al6794 = L[2640];
$field6801 = R.getColonFieldLoc(anf_method_obj6798,"make2",L[2640]);
if(R.isMethod($field6801)) {
$ans6793 = $field6801.full_meth(anf_method_obj6798,anf_arg6799,anf_arg6800);
} else {
if(!(R.isFunction($field6801))) {
R.ffi.throwNonFunApp(L[2640],$field6801);
}
$ans6793 = $field6801.app(anf_arg6799,anf_arg6800);
}
break;
case 3: var anf_arg6831 = $ans6793;
$al6794 = L[2643];
var anf_method_obj6803 = G(ED5,"para",L[2643]);
$step6790 = 4;
$al6794 = L[2644];
$field6802 = R.getColonFieldLoc(ED5,"text",L[2644]);
if(R.isMethod($field6802)) {
$ans6793 = $field6802.full_meth(ED5,("You may need to add or remove some text to fix your program."));
} else {
if(!(R.isFunction($field6802))) {
R.ffi.throwNonFunApp(L[2644],$field6802);
}
$ans6793 = $field6802.app(("You may need to add or remove some text to fix your program."));
}
break;
case 4: var anf_arg6804 = $ans6793;
$step6790 = 5;
$al6794 = L[2643];
$field6805 = R.getColonFieldLoc(anf_method_obj6803,"make1",L[2643]);
if(R.isMethod($field6805)) {
$ans6793 = $field6805.full_meth(anf_method_obj6803,anf_arg6804);
} else {
if(!(R.isFunction($field6805))) {
R.ffi.throwNonFunApp(L[2643],$field6805);
}
$ans6793 = $field6805.app(anf_arg6804);
}
break;
case 5: var anf_arg6832 = $ans6793;
$al6794 = L[2645];
var anf_method_obj6807 = G(ED5,"para",L[2645]);
$step6790 = 6;
$al6794 = L[2646];
$field6806 = R.getColonFieldLoc(ED5,"text",L[2646]);
if(R.isMethod($field6806)) {
$ans6793 = $field6806.full_meth(ED5,("Look carefully before the highlighted text."));
} else {
if(!(R.isFunction($field6806))) {
R.ffi.throwNonFunApp(L[2646],$field6806);
}
$ans6793 = $field6806.app(("Look carefully before the highlighted text."));
}
break;
case 6: var anf_arg6808 = $ans6793;
$step6790 = 7;
$al6794 = L[2645];
$field6809 = R.getColonFieldLoc(anf_method_obj6807,"make1",L[2645]);
if(R.isMethod($field6809)) {
$ans6793 = $field6809.full_meth(anf_method_obj6807,anf_arg6808);
} else {
if(!(R.isFunction($field6809))) {
R.ffi.throwNonFunApp(L[2645],$field6809);
}
$ans6793 = $field6809.app(anf_arg6808);
}
break;
case 7: var anf_arg6833 = $ans6793;
$al6794 = L[2647];
var anf_method_obj6823 = G(ED5,"para",L[2647]);
$al6794 = L[2648];
var anf_array6824 = R.makeArrayN((7));
$step6790 = 8;
$al6794 = L[2649];
$field6810 = R.getColonFieldLoc(ED5,"text",L[2649]);
if(R.isMethod($field6810)) {
$ans6793 = $field6810.full_meth(ED5,("Is there a missing colon ("));
} else {
if(!(R.isFunction($field6810))) {
R.ffi.throwNonFunApp(L[2649],$field6810);
}
$ans6793 = $field6810.app(("Is there a missing colon ("));
}
break;
case 8: anf_array6824[0] = $ans6793;
$step6790 = 9;
$al6794 = L[2650];
$field6811 = R.getColonFieldLoc(ED5,"text",L[2650]);
if(R.isMethod($field6811)) {
$ans6793 = $field6811.full_meth(ED5,(":"));
} else {
if(!(R.isFunction($field6811))) {
R.ffi.throwNonFunApp(L[2650],$field6811);
}
$ans6793 = $field6811.app((":"));
}
break;
case 9: var anf_arg6812 = $ans6793;
$step6790 = 10;
$al6794 = L[2651];
$field6813 = R.getColonFieldLoc(ED5,"code",L[2651]);
if(R.isMethod($field6813)) {
$ans6793 = $field6813.full_meth(ED5,anf_arg6812);
} else {
if(!(R.isFunction($field6813))) {
R.ffi.throwNonFunApp(L[2651],$field6813);
}
$ans6793 = $field6813.app(anf_arg6812);
}
break;
case 10: anf_array6824[1] = $ans6793;
$step6790 = 11;
$al6794 = L[2652];
$field6814 = R.getColonFieldLoc(ED5,"text",L[2652]);
if(R.isMethod($field6814)) {
$ans6793 = $field6814.full_meth(ED5,("), comma ("));
} else {
if(!(R.isFunction($field6814))) {
R.ffi.throwNonFunApp(L[2652],$field6814);
}
$ans6793 = $field6814.app(("), comma ("));
}
break;
case 11: anf_array6824[2] = $ans6793;
$step6790 = 12;
$al6794 = L[2653];
$field6815 = R.getColonFieldLoc(ED5,"text",L[2653]);
if(R.isMethod($field6815)) {
$ans6793 = $field6815.full_meth(ED5,(","));
} else {
if(!(R.isFunction($field6815))) {
R.ffi.throwNonFunApp(L[2653],$field6815);
}
$ans6793 = $field6815.app((","));
}
break;
case 12: var anf_arg6816 = $ans6793;
$step6790 = 13;
$al6794 = L[2654];
$field6817 = R.getColonFieldLoc(ED5,"code",L[2654]);
if(R.isMethod($field6817)) {
$ans6793 = $field6817.full_meth(ED5,anf_arg6816);
} else {
if(!(R.isFunction($field6817))) {
R.ffi.throwNonFunApp(L[2654],$field6817);
}
$ans6793 = $field6817.app(anf_arg6816);
}
break;
case 13: anf_array6824[3] = $ans6793;
$step6790 = 14;
$al6794 = L[2655];
$field6818 = R.getColonFieldLoc(ED5,"text",L[2655]);
if(R.isMethod($field6818)) {
$ans6793 = $field6818.full_meth(ED5,("), string marker ("));
} else {
if(!(R.isFunction($field6818))) {
R.ffi.throwNonFunApp(L[2655],$field6818);
}
$ans6793 = $field6818.app(("), string marker ("));
}
break;
case 14: anf_array6824[4] = $ans6793;
$step6790 = 15;
$al6794 = L[2656];
$field6819 = R.getColonFieldLoc(ED5,"text",L[2656]);
if(R.isMethod($field6819)) {
$ans6793 = $field6819.full_meth(ED5,("\""));
} else {
if(!(R.isFunction($field6819))) {
R.ffi.throwNonFunApp(L[2656],$field6819);
}
$ans6793 = $field6819.app(("\""));
}
break;
case 15: var anf_arg6820 = $ans6793;
$step6790 = 16;
$al6794 = L[2657];
$field6821 = R.getColonFieldLoc(ED5,"code",L[2657]);
if(R.isMethod($field6821)) {
$ans6793 = $field6821.full_meth(ED5,anf_arg6820);
} else {
if(!(R.isFunction($field6821))) {
R.ffi.throwNonFunApp(L[2657],$field6821);
}
$ans6793 = $field6821.app(anf_arg6820);
}
break;
case 16: anf_array6824[5] = $ans6793;
$step6790 = 17;
$al6794 = L[2658];
$field6822 = R.getColonFieldLoc(ED5,"text",L[2658]);
if(R.isMethod($field6822)) {
$ans6793 = $field6822.full_meth(ED5,("), or keyword?"));
} else {
if(!(R.isFunction($field6822))) {
R.ffi.throwNonFunApp(L[2658],$field6822);
}
$ans6793 = $field6822.app(("), or keyword?"));
}
break;
case 17: anf_array6824[6] = $ans6793;
$step6790 = 18;
$al6794 = L[2647];
$field6825 = R.getColonFieldLoc(anf_method_obj6823,"make",L[2647]);
if(R.isMethod($field6825)) {
$ans6793 = $field6825.full_meth(anf_method_obj6823,anf_array6824);
} else {
if(!(R.isFunction($field6825))) {
R.ffi.throwNonFunApp(L[2647],$field6825);
}
$ans6793 = $field6825.app(anf_array6824);
}
break;
case 18: var anf_arg6834 = $ans6793;
$al6794 = L[2659];
var anf_method_obj6827 = G(ED5,"para",L[2659]);
$step6790 = 19;
$al6794 = L[2660];
$field6826 = R.getColonFieldLoc(ED5,"text",L[2660]);
if(R.isMethod($field6826)) {
$ans6793 = $field6826.full_meth(ED5,("Is there something there that shouldn\u2019t be?"));
} else {
if(!(R.isFunction($field6826))) {
R.ffi.throwNonFunApp(L[2660],$field6826);
}
$ans6793 = $field6826.app(("Is there something there that shouldn\u2019t be?"));
}
break;
case 19: var anf_arg6828 = $ans6793;
$step6790 = 20;
$al6794 = L[2659];
$field6829 = R.getColonFieldLoc(anf_method_obj6827,"make1",L[2659]);
if(R.isMethod($field6829)) {
$ans6793 = $field6829.full_meth(anf_method_obj6827,anf_arg6828);
} else {
if(!(R.isFunction($field6829))) {
R.ffi.throwNonFunApp(L[2659],$field6829);
}
$ans6793 = $field6829.app(anf_arg6828);
}
break;
case 20: var anf_arg6835 = $ans6793;
$step6790 = 21;
$al6794 = L[2639];
$field6836 = R.getColonFieldLoc(anf_method_obj6830,"make5",L[2639]);
if(R.isMethod($field6836)) {
$ans6793 = $field6836.full_meth(anf_method_obj6830,anf_arg6831,anf_arg6832,anf_arg6833,anf_arg6834,anf_arg6835);
} else {
if(!(R.isFunction($field6836))) {
R.ffi.throwNonFunApp(L[2639],$field6836);
}
$ans6793 = $field6836.app(anf_arg6831,anf_arg6832,anf_arg6833,anf_arg6834,anf_arg6835);
}
break;
case 21: ++R.GAS;
return $ans6793;
default: throw "No case numbered " + $step6790 + " in $temp_full6791";
}
}
} catch($e6837) {
if(R.isCont($e6837) && ($step6790 !== 21)) {
$e6837.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6794,$temp_full6791,$step6790,[self6792],[anf_method_obj6830,anf_method_obj6798,anf_arg6799,anf_arg6831,anf_method_obj6803,anf_arg6832,anf_method_obj6807,anf_arg6833,anf_method_obj6823,anf_array6824,anf_arg6834,anf_method_obj6827]);
}
if(R.isPyretException($e6837)) {
$e6837.pyretStack.push($al6794);
}
throw $e6837;
}
};
var anf_variant_member7152 = R.makeMethod0($temp_full6791,"render-reason");
var $temp_full6839 = function($self6840,$src$available6841) {
var $step6838 = 0;
var $ans6842 = D;
var $al6843 = L[2679];
try {
if(R.isActivationRecord($self6840)) {
$step6838 = $self6840.step;
$al6843 = $self6840.from;
$ans6842 = $self6840.ans;
self6840 = $self6840.args[0];
src$available6841 = $self6840.args[1];
anf_method_obj6860 = $self6840.vars[0];
anf_method_obj6855 = $self6840.vars[1];
anf_arg6856 = $self6840.vars[2];
anf_arg6851 = $self6840.vars[3];
anf_arg6857 = $self6840.vars[4];
anf_method_obj6872 = $self6840.vars[5];
anf_method_obj6867 = $self6840.vars[6];
anf_arg6868 = $self6840.vars[7];
anf_arg6869 = $self6840.vars[8];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2679],2,$t);
}
var self6840 = $self6840;
var src$available6841 = $src$available6841;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6838) {
case 0: $al6843 = L[2663];
var anf_arg6844 = G(self6840,"loc",L[2663]);
$step6838 = 1;
$al6843 = L[2664];
if(!(R.isFunction(src$available6841))) {
R.ffi.throwNonFunApp($al6843,src$available6841);
}
$ans6842 = src$available6841.app(anf_arg6844);
break;
case 1: var anf_arg6845 = $ans6842;
$al6843 = L[2664];
var anf_if6875 = R.checkWrapBoolean(anf_arg6845);
$step6838 = R.isPyretTrue(anf_if6875)?2:9;
break;
case 2: $al6843 = L[2665];
var anf_method_obj6860 = G(ED5,"error",L[2665]);
$al6843 = L[2666];
var anf_method_obj6855 = G(ED5,"para",L[2666]);
$step6838 = 3;
$al6843 = L[2667];
$field6846 = R.getColonFieldLoc(ED5,"text",L[2667]);
if(R.isMethod($field6846)) {
$ans6842 = $field6846.full_meth(ED5,("Pyret didn't expect your program to "));
} else {
if(!(R.isFunction($field6846))) {
R.ffi.throwNonFunApp(L[2667],$field6846);
}
$ans6842 = $field6846.app(("Pyret didn't expect your program to "));
}
break;
case 3: var anf_arg6856 = $ans6842;
$step6838 = 4;
$al6843 = L[2668];
$field6847 = R.getColonFieldLoc(ED5,"text",L[2668]);
if(R.isMethod($field6847)) {
$ans6842 = $field6847.full_meth(ED5,("end"));
} else {
if(!(R.isFunction($field6847))) {
R.ffi.throwNonFunApp(L[2668],$field6847);
}
$ans6842 = $field6847.app(("end"));
}
break;
case 4: var anf_arg6851 = $ans6842;
$al6843 = L[2669];
var anf_method_obj6848 = G(ED5,"locs",L[2669]);
$al6843 = L[2670];
var anf_arg6849 = G(self6840,"loc",L[2670]);
$step6838 = 5;
$al6843 = L[2669];
$field6850 = R.getColonFieldLoc(anf_method_obj6848,"make1",L[2669]);
if(R.isMethod($field6850)) {
$ans6842 = $field6850.full_meth(anf_method_obj6848,anf_arg6849);
} else {
if(!(R.isFunction($field6850))) {
R.ffi.throwNonFunApp(L[2669],$field6850);
}
$ans6842 = $field6850.app(anf_arg6849);
}
break;
case 5: var anf_arg6852 = $ans6842;
$step6838 = 6;
$al6843 = L[2671];
$field6853 = R.getColonFieldLoc(ED5,"highlight",L[2671]);
if(R.isMethod($field6853)) {
$ans6842 = $field6853.full_meth(ED5,anf_arg6851,anf_arg6852,(-1));
} else {
if(!(R.isFunction($field6853))) {
R.ffi.throwNonFunApp(L[2671],$field6853);
}
$ans6842 = $field6853.app(anf_arg6851,anf_arg6852,(-1));
}
break;
case 6: var anf_arg6857 = $ans6842;
$step6838 = 7;
$al6843 = L[2672];
$field6854 = R.getColonFieldLoc(ED5,"text",L[2672]);
if(R.isMethod($field6854)) {
$ans6842 = $field6854.full_meth(ED5,(" as soon as it did. You may be missing an \"end\", or closing punctuation like \")\" or \"]\" somewhere in your program."));
} else {
if(!(R.isFunction($field6854))) {
R.ffi.throwNonFunApp(L[2672],$field6854);
}
$ans6842 = $field6854.app((" as soon as it did. You may be missing an \"end\", or closing punctuation like \")\" or \"]\" somewhere in your program."));
}
break;
case 7: var anf_arg6858 = $ans6842;
$step6838 = 8;
$al6843 = L[2666];
$field6859 = R.getColonFieldLoc(anf_method_obj6855,"make3",L[2666]);
if(R.isMethod($field6859)) {
$ans6842 = $field6859.full_meth(anf_method_obj6855,anf_arg6856,anf_arg6857,anf_arg6858);
} else {
if(!(R.isFunction($field6859))) {
R.ffi.throwNonFunApp(L[2666],$field6859);
}
$ans6842 = $field6859.app(anf_arg6856,anf_arg6857,anf_arg6858);
}
break;
case 8: var anf_arg6861 = $ans6842;
$step6838 = 14;
$al6843 = L[2665];
$field6862 = R.getColonFieldLoc(anf_method_obj6860,"make1",L[2665]);
if(R.isMethod($field6862)) {
$ans6842 = $field6862.full_meth(anf_method_obj6860,anf_arg6861);
} else {
if(!(R.isFunction($field6862))) {
R.ffi.throwNonFunApp(L[2665],$field6862);
}
$ans6842 = $field6862.app(anf_arg6861);
}
break;
case 9: $al6843 = L[2673];
var anf_method_obj6872 = G(ED5,"error",L[2673]);
$al6843 = L[2674];
var anf_method_obj6867 = G(ED5,"para",L[2674]);
$step6838 = 10;
$al6843 = L[2675];
$field6863 = R.getColonFieldLoc(ED5,"text",L[2675]);
if(R.isMethod($field6863)) {
$ans6842 = $field6863.full_meth(ED5,("Pyret didn't expect your program to end (at "));
} else {
if(!(R.isFunction($field6863))) {
R.ffi.throwNonFunApp(L[2675],$field6863);
}
$ans6842 = $field6863.app(("Pyret didn't expect your program to end (at "));
}
break;
case 10: var anf_arg6868 = $ans6842;
$al6843 = L[2676];
var anf_arg6864 = G(self6840,"loc",L[2676]);
$step6838 = 11;
$al6843 = L[2677];
$field6865 = R.getColonFieldLoc(ED5,"loc",L[2677]);
if(R.isMethod($field6865)) {
$ans6842 = $field6865.full_meth(ED5,anf_arg6864);
} else {
if(!(R.isFunction($field6865))) {
R.ffi.throwNonFunApp(L[2677],$field6865);
}
$ans6842 = $field6865.app(anf_arg6864);
}
break;
case 11: var anf_arg6869 = $ans6842;
$step6838 = 12;
$al6843 = L[2678];
$field6866 = R.getColonFieldLoc(ED5,"text",L[2678]);
if(R.isMethod($field6866)) {
$ans6842 = $field6866.full_meth(ED5,(") as soon as it did. You may be missing an \"end\", or closing punctuation like \")\" or \"]\" somewhere in your program."));
} else {
if(!(R.isFunction($field6866))) {
R.ffi.throwNonFunApp(L[2678],$field6866);
}
$ans6842 = $field6866.app((") as soon as it did. You may be missing an \"end\", or closing punctuation like \")\" or \"]\" somewhere in your program."));
}
break;
case 12: var anf_arg6870 = $ans6842;
$step6838 = 13;
$al6843 = L[2674];
$field6871 = R.getColonFieldLoc(anf_method_obj6867,"make3",L[2674]);
if(R.isMethod($field6871)) {
$ans6842 = $field6871.full_meth(anf_method_obj6867,anf_arg6868,anf_arg6869,anf_arg6870);
} else {
if(!(R.isFunction($field6871))) {
R.ffi.throwNonFunApp(L[2674],$field6871);
}
$ans6842 = $field6871.app(anf_arg6868,anf_arg6869,anf_arg6870);
}
break;
case 13: var anf_arg6873 = $ans6842;
$step6838 = 14;
$al6843 = L[2673];
$field6874 = R.getColonFieldLoc(anf_method_obj6872,"make1",L[2673]);
if(R.isMethod($field6874)) {
$ans6842 = $field6874.full_meth(anf_method_obj6872,anf_arg6873);
} else {
if(!(R.isFunction($field6874))) {
R.ffi.throwNonFunApp(L[2673],$field6874);
}
$ans6842 = $field6874.app(anf_arg6873);
}
break;
case 14: ++R.GAS;
return $ans6842;
default: throw "No case numbered " + $step6838 + " in $temp_full6839";
}
}
} catch($e6876) {
if(R.isCont($e6876) && ($step6838 !== 14)) {
$e6876.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6843,$temp_full6839,$step6838,[self6840,src$available6841],[anf_method_obj6860,anf_method_obj6855,anf_arg6856,anf_arg6851,anf_arg6857,anf_method_obj6872,anf_method_obj6867,anf_arg6868,anf_arg6869]);
}
if(R.isPyretException($e6876)) {
$e6876.pyretStack.push($al6843);
}
throw $e6876;
}
};
var anf_variant_member7162 = R.makeMethod1($temp_full6839,"render-fancy-reason");
var $temp_full6878 = function($self6879) {
var $step6877 = 0;
var $ans6880 = D;
var $al6881 = L[2684];
try {
if(R.isActivationRecord($self6879)) {
$step6877 = $self6879.step;
$al6881 = $self6879.from;
$ans6880 = $self6879.ans;
self6879 = $self6879.args[0];
anf_method_obj6888 = $self6879.vars[0];
anf_method_obj6884 = $self6879.vars[1];
anf_arg6885 = $self6879.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2684],1,$t);
}
var self6879 = $self6879;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6877) {
case 0: $al6881 = L[2680];
var anf_method_obj6888 = G(ED5,"error",L[2680]);
$al6881 = L[2681];
var anf_method_obj6884 = G(ED5,"para",L[2681]);
$step6877 = 1;
$al6881 = L[2682];
$field6882 = R.getColonFieldLoc(ED5,"text",L[2682]);
if(R.isMethod($field6882)) {
$ans6880 = $field6882.full_meth(ED5,("Pyret didn't understand the very end of your program."));
} else {
if(!(R.isFunction($field6882))) {
R.ffi.throwNonFunApp(L[2682],$field6882);
}
$ans6880 = $field6882.app(("Pyret didn't understand the very end of your program."));
}
break;
case 1: var anf_arg6885 = $ans6880;
$step6877 = 2;
$al6881 = L[2683];
$field6883 = R.getColonFieldLoc(ED5,"text",L[2683]);
if(R.isMethod($field6883)) {
$ans6880 = $field6883.full_meth(ED5,("You may be missing an \"end\", or closing punctuation like \")\" or \"]\" right at the end."));
} else {
if(!(R.isFunction($field6883))) {
R.ffi.throwNonFunApp(L[2683],$field6883);
}
$ans6880 = $field6883.app(("You may be missing an \"end\", or closing punctuation like \")\" or \"]\" right at the end."));
}
break;
case 2: var anf_arg6886 = $ans6880;
$step6877 = 3;
$al6881 = L[2681];
$field6887 = R.getColonFieldLoc(anf_method_obj6884,"make2",L[2681]);
if(R.isMethod($field6887)) {
$ans6880 = $field6887.full_meth(anf_method_obj6884,anf_arg6885,anf_arg6886);
} else {
if(!(R.isFunction($field6887))) {
R.ffi.throwNonFunApp(L[2681],$field6887);
}
$ans6880 = $field6887.app(anf_arg6885,anf_arg6886);
}
break;
case 3: var anf_arg6889 = $ans6880;
$step6877 = 4;
$al6881 = L[2680];
$field6890 = R.getColonFieldLoc(anf_method_obj6888,"make1",L[2680]);
if(R.isMethod($field6890)) {
$ans6880 = $field6890.full_meth(anf_method_obj6888,anf_arg6889);
} else {
if(!(R.isFunction($field6890))) {
R.ffi.throwNonFunApp(L[2680],$field6890);
}
$ans6880 = $field6890.app(anf_arg6889);
}
break;
case 4: ++R.GAS;
return $ans6880;
default: throw "No case numbered " + $step6877 + " in $temp_full6878";
}
}
} catch($e6891) {
if(R.isCont($e6891) && ($step6877 !== 4)) {
$e6891.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6881,$temp_full6878,$step6877,[self6879],[anf_method_obj6888,anf_method_obj6884,anf_arg6885]);
}
if(R.isPyretException($e6891)) {
$e6891.pyretStack.push($al6881);
}
throw $e6891;
}
};
var anf_variant_member7163 = R.makeMethod0($temp_full6878,"render-reason");
var $temp_full6893 = function($self6894,$src$available6895) {
var $step6892 = 0;
var $ans6896 = D;
var $al6897 = L[2706];
try {
if(R.isActivationRecord($self6894)) {
$step6892 = $self6894.step;
$al6897 = $self6894.from;
$ans6896 = $self6894.ans;
self6894 = $self6894.args[0];
src$available6895 = $self6894.args[1];
anf_method_obj6916 = $self6894.vars[0];
anf_method_obj6901 = $self6894.vars[1];
anf_arg6917 = $self6894.vars[2];
anf_arg6918 = $self6894.vars[3];
anf_method_obj6911 = $self6894.vars[4];
anf_arg6912 = $self6894.vars[5];
anf_arg6913 = $self6894.vars[6];
anf_method_obj6936 = $self6894.vars[7];
anf_method_obj6929 = $self6894.vars[8];
anf_arg6930 = $self6894.vars[9];
anf_arg6931 = $self6894.vars[10];
anf_arg6932 = $self6894.vars[11];
anf_arg6933 = $self6894.vars[12];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2706],2,$t);
}
var self6894 = $self6894;
var src$available6895 = $src$available6895;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6892) {
case 0: $al6897 = L[2685];
var anf_arg6898 = G(self6894,"loc",L[2685]);
$step6892 = 1;
$al6897 = L[2686];
if(!(R.isFunction(src$available6895))) {
R.ffi.throwNonFunApp($al6897,src$available6895);
}
$ans6896 = src$available6895.app(anf_arg6898);
break;
case 1: var anf_arg6899 = $ans6896;
$al6897 = L[2686];
var anf_if6939 = R.checkWrapBoolean(anf_arg6899);
$step6892 = R.isPyretTrue(anf_if6939)?2:11;
break;
case 2: $al6897 = L[2687];
var anf_method_obj6916 = G(ED5,"error",L[2687]);
$al6897 = L[2688];
var anf_method_obj6901 = G(ED5,"para",L[2688]);
$step6892 = 3;
$al6897 = L[2689];
$field6900 = R.getColonFieldLoc(ED5,"text",L[2689]);
if(R.isMethod($field6900)) {
$ans6896 = $field6900.full_meth(ED5,("Pyret thinks the string "));
} else {
if(!(R.isFunction($field6900))) {
R.ffi.throwNonFunApp(L[2689],$field6900);
}
$ans6896 = $field6900.app(("Pyret thinks the string "));
}
break;
case 3: var anf_arg6902 = $ans6896;
$step6892 = 4;
$al6897 = L[2688];
$field6903 = R.getColonFieldLoc(anf_method_obj6901,"make1",L[2688]);
if(R.isMethod($field6903)) {
$ans6896 = $field6903.full_meth(anf_method_obj6901,anf_arg6902);
} else {
if(!(R.isFunction($field6903))) {
R.ffi.throwNonFunApp(L[2688],$field6903);
}
$ans6896 = $field6903.app(anf_arg6902);
}
break;
case 4: var anf_arg6917 = $ans6896;
$al6897 = L[2690];
var anf_arg6904 = G(self6894,"loc",L[2690]);
$step6892 = 5;
$al6897 = L[2691];
$field6905 = R.getColonFieldLoc(ED5,"cmcode",L[2691]);
if(R.isMethod($field6905)) {
$ans6896 = $field6905.full_meth(ED5,anf_arg6904);
} else {
if(!(R.isFunction($field6905))) {
R.ffi.throwNonFunApp(L[2691],$field6905);
}
$ans6896 = $field6905.app(anf_arg6904);
}
break;
case 5: var anf_arg6918 = $ans6896;
$al6897 = L[2692];
var anf_method_obj6911 = G(ED5,"para",L[2692]);
$step6892 = 6;
$al6897 = L[2693];
$field6906 = R.getColonFieldLoc(ED5,"text",L[2693]);
if(R.isMethod($field6906)) {
$ans6896 = $field6906.full_meth(ED5,("is unterminated; you may be missing closing punctuation. If you intended to write a multi-line string, use "));
} else {
if(!(R.isFunction($field6906))) {
R.ffi.throwNonFunApp(L[2693],$field6906);
}
$ans6896 = $field6906.app(("is unterminated; you may be missing closing punctuation. If you intended to write a multi-line string, use "));
}
break;
case 6: var anf_arg6912 = $ans6896;
$step6892 = 7;
$al6897 = L[2694];
$field6907 = R.getColonFieldLoc(ED5,"text",L[2694]);
if(R.isMethod($field6907)) {
$ans6896 = $field6907.full_meth(ED5,("```"));
} else {
if(!(R.isFunction($field6907))) {
R.ffi.throwNonFunApp(L[2694],$field6907);
}
$ans6896 = $field6907.app(("```"));
}
break;
case 7: var anf_arg6908 = $ans6896;
$step6892 = 8;
$al6897 = L[2695];
$field6909 = R.getColonFieldLoc(ED5,"code",L[2695]);
if(R.isMethod($field6909)) {
$ans6896 = $field6909.full_meth(ED5,anf_arg6908);
} else {
if(!(R.isFunction($field6909))) {
R.ffi.throwNonFunApp(L[2695],$field6909);
}
$ans6896 = $field6909.app(anf_arg6908);
}
break;
case 8: var anf_arg6913 = $ans6896;
$step6892 = 9;
$al6897 = L[2696];
$field6910 = R.getColonFieldLoc(ED5,"text",L[2696]);
if(R.isMethod($field6910)) {
$ans6896 = $field6910.full_meth(ED5,(" instead of quotation marks."));
} else {
if(!(R.isFunction($field6910))) {
R.ffi.throwNonFunApp(L[2696],$field6910);
}
$ans6896 = $field6910.app((" instead of quotation marks."));
}
break;
case 9: var anf_arg6914 = $ans6896;
$step6892 = 10;
$al6897 = L[2692];
$field6915 = R.getColonFieldLoc(anf_method_obj6911,"make3",L[2692]);
if(R.isMethod($field6915)) {
$ans6896 = $field6915.full_meth(anf_method_obj6911,anf_arg6912,anf_arg6913,anf_arg6914);
} else {
if(!(R.isFunction($field6915))) {
R.ffi.throwNonFunApp(L[2692],$field6915);
}
$ans6896 = $field6915.app(anf_arg6912,anf_arg6913,anf_arg6914);
}
break;
case 10: var anf_arg6919 = $ans6896;
$step6892 = 19;
$al6897 = L[2687];
$field6920 = R.getColonFieldLoc(anf_method_obj6916,"make3",L[2687]);
if(R.isMethod($field6920)) {
$ans6896 = $field6920.full_meth(anf_method_obj6916,anf_arg6917,anf_arg6918,anf_arg6919);
} else {
if(!(R.isFunction($field6920))) {
R.ffi.throwNonFunApp(L[2687],$field6920);
}
$ans6896 = $field6920.app(anf_arg6917,anf_arg6918,anf_arg6919);
}
break;
case 11: $al6897 = L[2697];
var anf_method_obj6936 = G(ED5,"error",L[2697]);
$al6897 = L[2698];
var anf_method_obj6929 = G(ED5,"para",L[2698]);
$step6892 = 12;
$al6897 = L[2699];
$field6921 = R.getColonFieldLoc(ED5,"text",L[2699]);
if(R.isMethod($field6921)) {
$ans6896 = $field6921.full_meth(ED5,("Pyret thinks the string at "));
} else {
if(!(R.isFunction($field6921))) {
R.ffi.throwNonFunApp(L[2699],$field6921);
}
$ans6896 = $field6921.app(("Pyret thinks the string at "));
}
break;
case 12: var anf_arg6930 = $ans6896;
$al6897 = L[2700];
var anf_arg6922 = G(self6894,"loc",L[2700]);
$step6892 = 13;
$al6897 = L[2701];
$field6923 = R.getColonFieldLoc(ED5,"loc",L[2701]);
if(R.isMethod($field6923)) {
$ans6896 = $field6923.full_meth(ED5,anf_arg6922);
} else {
if(!(R.isFunction($field6923))) {
R.ffi.throwNonFunApp(L[2701],$field6923);
}
$ans6896 = $field6923.app(anf_arg6922);
}
break;
case 13: var anf_arg6931 = $ans6896;
$step6892 = 14;
$al6897 = L[2702];
$field6924 = R.getColonFieldLoc(ED5,"text",L[2702]);
if(R.isMethod($field6924)) {
$ans6896 = $field6924.full_meth(ED5,("is unterminated; you may be missing closing punctuation. If you intended to write a multi-line string, use "));
} else {
if(!(R.isFunction($field6924))) {
R.ffi.throwNonFunApp(L[2702],$field6924);
}
$ans6896 = $field6924.app(("is unterminated; you may be missing closing punctuation. If you intended to write a multi-line string, use "));
}
break;
case 14: var anf_arg6932 = $ans6896;
$step6892 = 15;
$al6897 = L[2703];
$field6925 = R.getColonFieldLoc(ED5,"text",L[2703]);
if(R.isMethod($field6925)) {
$ans6896 = $field6925.full_meth(ED5,("```"));
} else {
if(!(R.isFunction($field6925))) {
R.ffi.throwNonFunApp(L[2703],$field6925);
}
$ans6896 = $field6925.app(("```"));
}
break;
case 15: var anf_arg6926 = $ans6896;
$step6892 = 16;
$al6897 = L[2704];
$field6927 = R.getColonFieldLoc(ED5,"code",L[2704]);
if(R.isMethod($field6927)) {
$ans6896 = $field6927.full_meth(ED5,anf_arg6926);
} else {
if(!(R.isFunction($field6927))) {
R.ffi.throwNonFunApp(L[2704],$field6927);
}
$ans6896 = $field6927.app(anf_arg6926);
}
break;
case 16: var anf_arg6933 = $ans6896;
$step6892 = 17;
$al6897 = L[2705];
$field6928 = R.getColonFieldLoc(ED5,"text",L[2705]);
if(R.isMethod($field6928)) {
$ans6896 = $field6928.full_meth(ED5,(" instead of quotation marks."));
} else {
if(!(R.isFunction($field6928))) {
R.ffi.throwNonFunApp(L[2705],$field6928);
}
$ans6896 = $field6928.app((" instead of quotation marks."));
}
break;
case 17: var anf_arg6934 = $ans6896;
$step6892 = 18;
$al6897 = L[2698];
$field6935 = R.getColonFieldLoc(anf_method_obj6929,"make5",L[2698]);
if(R.isMethod($field6935)) {
$ans6896 = $field6935.full_meth(anf_method_obj6929,anf_arg6930,anf_arg6931,anf_arg6932,anf_arg6933,anf_arg6934);
} else {
if(!(R.isFunction($field6935))) {
R.ffi.throwNonFunApp(L[2698],$field6935);
}
$ans6896 = $field6935.app(anf_arg6930,anf_arg6931,anf_arg6932,anf_arg6933,anf_arg6934);
}
break;
case 18: var anf_arg6937 = $ans6896;
$step6892 = 19;
$al6897 = L[2697];
$field6938 = R.getColonFieldLoc(anf_method_obj6936,"make1",L[2697]);
if(R.isMethod($field6938)) {
$ans6896 = $field6938.full_meth(anf_method_obj6936,anf_arg6937);
} else {
if(!(R.isFunction($field6938))) {
R.ffi.throwNonFunApp(L[2697],$field6938);
}
$ans6896 = $field6938.app(anf_arg6937);
}
break;
case 19: ++R.GAS;
return $ans6896;
default: throw "No case numbered " + $step6892 + " in $temp_full6893";
}
}
} catch($e6940) {
if(R.isCont($e6940) && ($step6892 !== 19)) {
$e6940.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6897,$temp_full6893,$step6892,[self6894,src$available6895],[anf_method_obj6916,anf_method_obj6901,anf_arg6917,anf_arg6918,anf_method_obj6911,anf_arg6912,anf_arg6913,anf_method_obj6936,anf_method_obj6929,anf_arg6930,anf_arg6931,anf_arg6932,anf_arg6933]);
}
if(R.isPyretException($e6940)) {
$e6940.pyretStack.push($al6897);
}
throw $e6940;
}
};
var anf_variant_member7172 = R.makeMethod1($temp_full6893,"render-fancy-reason");
var $temp_full6942 = function($self6943) {
var $step6941 = 0;
var $ans6944 = D;
var $al6945 = L[2713];
try {
if(R.isActivationRecord($self6943)) {
$step6941 = $self6943.step;
$al6945 = $self6943.from;
$ans6944 = $self6943.ans;
self6943 = $self6943.args[0];
anf_method_obj6955 = $self6943.vars[0];
anf_method_obj6950 = $self6943.vars[1];
anf_arg6951 = $self6943.vars[2];
anf_arg6952 = $self6943.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2713],1,$t);
}
var self6943 = $self6943;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6941) {
case 0: $al6945 = L[2707];
var anf_method_obj6955 = G(ED5,"error",L[2707]);
$al6945 = L[2708];
var anf_method_obj6950 = G(ED5,"para-nospace",L[2708]);
$step6941 = 1;
$al6945 = L[2709];
$field6946 = R.getColonFieldLoc(ED5,"text",L[2709]);
if(R.isMethod($field6946)) {
$ans6944 = $field6946.full_meth(ED5,("Pyret thinks your program has an incomplete string literal around "));
} else {
if(!(R.isFunction($field6946))) {
R.ffi.throwNonFunApp(L[2709],$field6946);
}
$ans6944 = $field6946.app(("Pyret thinks your program has an incomplete string literal around "));
}
break;
case 1: var anf_arg6951 = $ans6944;
var anf_fun6947 = draw$and$highlight38.$var;
$al6945 = L[2710];
var anf_arg6948 = G(self6943,"loc",L[2710]);
$step6941 = 2;
$al6945 = L[2712];
if(!(R.isFunction(anf_fun6947))) {
R.ffi.throwNonFunApp($al6945,anf_fun6947);
}
$ans6944 = anf_fun6947.app(anf_arg6948);
break;
case 2: var anf_arg6952 = $ans6944;
$step6941 = 3;
$al6945 = L[2711];
$field6949 = R.getColonFieldLoc(ED5,"text",L[2711]);
if(R.isMethod($field6949)) {
$ans6944 = $field6949.full_meth(ED5,("; you may be missing closing punctuation."));
} else {
if(!(R.isFunction($field6949))) {
R.ffi.throwNonFunApp(L[2711],$field6949);
}
$ans6944 = $field6949.app(("; you may be missing closing punctuation."));
}
break;
case 3: var anf_arg6953 = $ans6944;
$step6941 = 4;
$al6945 = L[2708];
$field6954 = R.getColonFieldLoc(anf_method_obj6950,"make3",L[2708]);
if(R.isMethod($field6954)) {
$ans6944 = $field6954.full_meth(anf_method_obj6950,anf_arg6951,anf_arg6952,anf_arg6953);
} else {
if(!(R.isFunction($field6954))) {
R.ffi.throwNonFunApp(L[2708],$field6954);
}
$ans6944 = $field6954.app(anf_arg6951,anf_arg6952,anf_arg6953);
}
break;
case 4: var anf_arg6956 = $ans6944;
$step6941 = 5;
$al6945 = L[2707];
$field6957 = R.getColonFieldLoc(anf_method_obj6955,"make1",L[2707]);
if(R.isMethod($field6957)) {
$ans6944 = $field6957.full_meth(anf_method_obj6955,anf_arg6956);
} else {
if(!(R.isFunction($field6957))) {
R.ffi.throwNonFunApp(L[2707],$field6957);
}
$ans6944 = $field6957.app(anf_arg6956);
}
break;
case 5: ++R.GAS;
return $ans6944;
default: throw "No case numbered " + $step6941 + " in $temp_full6942";
}
}
} catch($e6958) {
if(R.isCont($e6958) && ($step6941 !== 5)) {
$e6958.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6945,$temp_full6942,$step6941,[self6943],[anf_method_obj6955,anf_method_obj6950,anf_arg6951,anf_arg6952]);
}
if(R.isPyretException($e6958)) {
$e6958.pyretStack.push($al6945);
}
throw $e6958;
}
};
var anf_variant_member7173 = R.makeMethod0($temp_full6942,"render-reason");
var $temp_full6960 = function($self6961,$src$available6962) {
var $step6959 = 0;
var $ans6963 = D;
var $al6964 = L[2733];
try {
if(R.isActivationRecord($self6961)) {
$step6959 = $self6961.step;
$al6964 = $self6961.from;
$ans6963 = $self6961.ans;
self6961 = $self6961.args[0];
src$available6962 = $self6961.args[1];
anf_method_obj6985 = $self6961.vars[0];
anf_method_obj6975 = $self6961.vars[1];
anf_arg6976 = $self6961.vars[2];
anf_arg6972 = $self6961.vars[3];
anf_arg6986 = $self6961.vars[4];
anf_arg6987 = $self6961.vars[5];
anf_method_obj6982 = $self6961.vars[6];
anf_method_obj6999 = $self6961.vars[7];
anf_method_obj6994 = $self6961.vars[8];
anf_arg6995 = $self6961.vars[9];
anf_arg6996 = $self6961.vars[10];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2733],2,$t);
}
var self6961 = $self6961;
var src$available6962 = $src$available6962;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step6959) {
case 0: $al6964 = L[2714];
var anf_arg6965 = G(self6961,"loc",L[2714]);
$step6959 = 1;
$al6964 = L[2715];
if(!(R.isFunction(src$available6962))) {
R.ffi.throwNonFunApp($al6964,src$available6962);
}
$ans6963 = src$available6962.app(anf_arg6965);
break;
case 1: var anf_arg6966 = $ans6963;
$al6964 = L[2715];
var anf_if7002 = R.checkWrapBoolean(anf_arg6966);
$step6959 = R.isPyretTrue(anf_if7002)?2:11;
break;
case 2: $al6964 = L[2716];
var anf_method_obj6985 = G(ED5,"error",L[2716]);
$al6964 = L[2717];
var anf_method_obj6975 = G(ED5,"para",L[2717]);
$step6959 = 3;
$al6964 = L[2718];
$field6967 = R.getColonFieldLoc(ED5,"text",L[2718]);
if(R.isMethod($field6967)) {
$ans6963 = $field6967.full_meth(ED5,("The "));
} else {
if(!(R.isFunction($field6967))) {
R.ffi.throwNonFunApp(L[2718],$field6967);
}
$ans6963 = $field6967.app(("The "));
}
break;
case 3: var anf_arg6976 = $ans6963;
$step6959 = 4;
$al6964 = L[2719];
$field6968 = R.getColonFieldLoc(ED5,"text",L[2719]);
if(R.isMethod($field6968)) {
$ans6963 = $field6968.full_meth(ED5,("operator"));
} else {
if(!(R.isFunction($field6968))) {
R.ffi.throwNonFunApp(L[2719],$field6968);
}
$ans6963 = $field6968.app(("operator"));
}
break;
case 4: var anf_arg6972 = $ans6963;
$al6964 = L[2720];
var anf_method_obj6969 = G(ED5,"locs",L[2720]);
$al6964 = L[2721];
var anf_arg6970 = G(self6961,"loc",L[2721]);
$step6959 = 5;
$al6964 = L[2720];
$field6971 = R.getColonFieldLoc(anf_method_obj6969,"make1",L[2720]);
if(R.isMethod($field6971)) {
$ans6963 = $field6971.full_meth(anf_method_obj6969,anf_arg6970);
} else {
if(!(R.isFunction($field6971))) {
R.ffi.throwNonFunApp(L[2720],$field6971);
}
$ans6963 = $field6971.app(anf_arg6970);
}
break;
case 5: var anf_arg6973 = $ans6963;
$step6959 = 6;
$al6964 = L[2722];
$field6974 = R.getColonFieldLoc(ED5,"highlight",L[2722]);
if(R.isMethod($field6974)) {
$ans6963 = $field6974.full_meth(ED5,anf_arg6972,anf_arg6973,(0));
} else {
if(!(R.isFunction($field6974))) {
R.ffi.throwNonFunApp(L[2722],$field6974);
}
$ans6963 = $field6974.app(anf_arg6972,anf_arg6973,(0));
}
break;
case 6: var anf_arg6977 = $ans6963;
$step6959 = 7;
$al6964 = L[2717];
$field6978 = R.getColonFieldLoc(anf_method_obj6975,"make2",L[2717]);
if(R.isMethod($field6978)) {
$ans6963 = $field6978.full_meth(anf_method_obj6975,anf_arg6976,anf_arg6977);
} else {
if(!(R.isFunction($field6978))) {
R.ffi.throwNonFunApp(L[2717],$field6978);
}
$ans6963 = $field6978.app(anf_arg6976,anf_arg6977);
}
break;
case 7: var anf_arg6986 = $ans6963;
$al6964 = L[2723];
var anf_arg6979 = G(self6961,"loc",L[2723]);
$step6959 = 8;
$al6964 = L[2724];
$field6980 = R.getColonFieldLoc(ED5,"cmcode",L[2724]);
if(R.isMethod($field6980)) {
$ans6963 = $field6980.full_meth(ED5,anf_arg6979);
} else {
if(!(R.isFunction($field6980))) {
R.ffi.throwNonFunApp(L[2724],$field6980);
}
$ans6963 = $field6980.app(anf_arg6979);
}
break;
case 8: var anf_arg6987 = $ans6963;
$al6964 = L[2725];
var anf_method_obj6982 = G(ED5,"para",L[2725]);
$step6959 = 9;
$al6964 = L[2726];
$field6981 = R.getColonFieldLoc(ED5,"text",L[2726]);
if(R.isMethod($field6981)) {
$ans6963 = $field6981.full_meth(ED5,(" must have whitespace separating it from its operands."));
} else {
if(!(R.isFunction($field6981))) {
R.ffi.throwNonFunApp(L[2726],$field6981);
}
$ans6963 = $field6981.app((" must have whitespace separating it from its operands."));
}
break;
case 9: var anf_arg6983 = $ans6963;
$step6959 = 10;
$al6964 = L[2725];
$field6984 = R.getColonFieldLoc(anf_method_obj6982,"make1",L[2725]);
if(R.isMethod($field6984)) {
$ans6963 = $field6984.full_meth(anf_method_obj6982,anf_arg6983);
} else {
if(!(R.isFunction($field6984))) {
R.ffi.throwNonFunApp(L[2725],$field6984);
}
$ans6963 = $field6984.app(anf_arg6983);
}
break;
case 10: var anf_arg6988 = $ans6963;
$step6959 = 16;
$al6964 = L[2716];
$field6989 = R.getColonFieldLoc(anf_method_obj6985,"make3",L[2716]);
if(R.isMethod($field6989)) {
$ans6963 = $field6989.full_meth(anf_method_obj6985,anf_arg6986,anf_arg6987,anf_arg6988);
} else {
if(!(R.isFunction($field6989))) {
R.ffi.throwNonFunApp(L[2716],$field6989);
}
$ans6963 = $field6989.app(anf_arg6986,anf_arg6987,anf_arg6988);
}
break;
case 11: $al6964 = L[2727];
var anf_method_obj6999 = G(ED5,"error",L[2727]);
$al6964 = L[2728];
var anf_method_obj6994 = G(ED5,"para",L[2728]);
$step6959 = 12;
$al6964 = L[2729];
$field6990 = R.getColonFieldLoc(ED5,"text",L[2729]);
if(R.isMethod($field6990)) {
$ans6963 = $field6990.full_meth(ED5,("The operator at "));
} else {
if(!(R.isFunction($field6990))) {
R.ffi.throwNonFunApp(L[2729],$field6990);
}
$ans6963 = $field6990.app(("The operator at "));
}
break;
case 12: var anf_arg6995 = $ans6963;
$al6964 = L[2730];
var anf_arg6991 = G(self6961,"loc",L[2730]);
$step6959 = 13;
$al6964 = L[2731];
$field6992 = R.getColonFieldLoc(ED5,"loc",L[2731]);
if(R.isMethod($field6992)) {
$ans6963 = $field6992.full_meth(ED5,anf_arg6991);
} else {
if(!(R.isFunction($field6992))) {
R.ffi.throwNonFunApp(L[2731],$field6992);
}
$ans6963 = $field6992.app(anf_arg6991);
}
break;
case 13: var anf_arg6996 = $ans6963;
$step6959 = 14;
$al6964 = L[2732];
$field6993 = R.getColonFieldLoc(ED5,"text",L[2732]);
if(R.isMethod($field6993)) {
$ans6963 = $field6993.full_meth(ED5,(" must have whitespace separating it from its operands."));
} else {
if(!(R.isFunction($field6993))) {
R.ffi.throwNonFunApp(L[2732],$field6993);
}
$ans6963 = $field6993.app((" must have whitespace separating it from its operands."));
}
break;
case 14: var anf_arg6997 = $ans6963;
$step6959 = 15;
$al6964 = L[2728];
$field6998 = R.getColonFieldLoc(anf_method_obj6994,"make3",L[2728]);
if(R.isMethod($field6998)) {
$ans6963 = $field6998.full_meth(anf_method_obj6994,anf_arg6995,anf_arg6996,anf_arg6997);
} else {
if(!(R.isFunction($field6998))) {
R.ffi.throwNonFunApp(L[2728],$field6998);
}
$ans6963 = $field6998.app(anf_arg6995,anf_arg6996,anf_arg6997);
}
break;
case 15: var anf_arg7000 = $ans6963;
$step6959 = 16;
$al6964 = L[2727];
$field7001 = R.getColonFieldLoc(anf_method_obj6999,"make1",L[2727]);
if(R.isMethod($field7001)) {
$ans6963 = $field7001.full_meth(anf_method_obj6999,anf_arg7000);
} else {
if(!(R.isFunction($field7001))) {
R.ffi.throwNonFunApp(L[2727],$field7001);
}
$ans6963 = $field7001.app(anf_arg7000);
}
break;
case 16: ++R.GAS;
return $ans6963;
default: throw "No case numbered " + $step6959 + " in $temp_full6960";
}
}
} catch($e7003) {
if(R.isCont($e7003) && ($step6959 !== 16)) {
$e7003.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al6964,$temp_full6960,$step6959,[self6961,src$available6962],[anf_method_obj6985,anf_method_obj6975,anf_arg6976,anf_arg6972,anf_arg6986,anf_arg6987,anf_method_obj6982,anf_method_obj6999,anf_method_obj6994,anf_arg6995,anf_arg6996]);
}
if(R.isPyretException($e7003)) {
$e7003.pyretStack.push($al6964);
}
throw $e7003;
}
};
var anf_variant_member7182 = R.makeMethod1($temp_full6960,"render-fancy-reason");
var $temp_full7005 = function($self7006) {
var $step7004 = 0;
var $ans7007 = D;
var $al7008 = L[2740];
try {
if(R.isActivationRecord($self7006)) {
$step7004 = $self7006.step;
$al7008 = $self7006.from;
$ans7007 = $self7006.ans;
self7006 = $self7006.args[0];
anf_method_obj7018 = $self7006.vars[0];
anf_method_obj7013 = $self7006.vars[1];
anf_arg7014 = $self7006.vars[2];
anf_arg7015 = $self7006.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2740],1,$t);
}
var self7006 = $self7006;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7004) {
case 0: $al7008 = L[2734];
var anf_method_obj7018 = G(ED5,"error",L[2734]);
$al7008 = L[2735];
var anf_method_obj7013 = G(ED5,"para-nospace",L[2735]);
$step7004 = 1;
$al7008 = L[2736];
$field7009 = R.getColonFieldLoc(ED5,"text",L[2736]);
if(R.isMethod($field7009)) {
$ans7007 = $field7009.full_meth(ED5,("The operator at "));
} else {
if(!(R.isFunction($field7009))) {
R.ffi.throwNonFunApp(L[2736],$field7009);
}
$ans7007 = $field7009.app(("The operator at "));
}
break;
case 1: var anf_arg7014 = $ans7007;
var anf_fun7010 = draw$and$highlight38.$var;
$al7008 = L[2737];
var anf_arg7011 = G(self7006,"loc",L[2737]);
$step7004 = 2;
$al7008 = L[2739];
if(!(R.isFunction(anf_fun7010))) {
R.ffi.throwNonFunApp($al7008,anf_fun7010);
}
$ans7007 = anf_fun7010.app(anf_arg7011);
break;
case 2: var anf_arg7015 = $ans7007;
$step7004 = 3;
$al7008 = L[2738];
$field7012 = R.getColonFieldLoc(ED5,"text",L[2738]);
if(R.isMethod($field7012)) {
$ans7007 = $field7012.full_meth(ED5,(" has no surrounding whitespace."));
} else {
if(!(R.isFunction($field7012))) {
R.ffi.throwNonFunApp(L[2738],$field7012);
}
$ans7007 = $field7012.app((" has no surrounding whitespace."));
}
break;
case 3: var anf_arg7016 = $ans7007;
$step7004 = 4;
$al7008 = L[2735];
$field7017 = R.getColonFieldLoc(anf_method_obj7013,"make3",L[2735]);
if(R.isMethod($field7017)) {
$ans7007 = $field7017.full_meth(anf_method_obj7013,anf_arg7014,anf_arg7015,anf_arg7016);
} else {
if(!(R.isFunction($field7017))) {
R.ffi.throwNonFunApp(L[2735],$field7017);
}
$ans7007 = $field7017.app(anf_arg7014,anf_arg7015,anf_arg7016);
}
break;
case 4: var anf_arg7019 = $ans7007;
$step7004 = 5;
$al7008 = L[2734];
$field7020 = R.getColonFieldLoc(anf_method_obj7018,"make1",L[2734]);
if(R.isMethod($field7020)) {
$ans7007 = $field7020.full_meth(anf_method_obj7018,anf_arg7019);
} else {
if(!(R.isFunction($field7020))) {
R.ffi.throwNonFunApp(L[2734],$field7020);
}
$ans7007 = $field7020.app(anf_arg7019);
}
break;
case 5: ++R.GAS;
return $ans7007;
default: throw "No case numbered " + $step7004 + " in $temp_full7005";
}
}
} catch($e7021) {
if(R.isCont($e7021) && ($step7004 !== 5)) {
$e7021.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7008,$temp_full7005,$step7004,[self7006],[anf_method_obj7018,anf_method_obj7013,anf_arg7014,anf_arg7015]);
}
if(R.isPyretException($e7021)) {
$e7021.pyretStack.push($al7008);
}
throw $e7021;
}
};
var anf_variant_member7183 = R.makeMethod0($temp_full7005,"render-reason");
var $temp_full7023 = function($self7024,$src$available7025) {
var $step7022 = 0;
var $ans7026 = D;
var $al7027 = L[2756];
try {
if(R.isActivationRecord($self7024)) {
$step7022 = $self7024.step;
$al7027 = $self7024.from;
$ans7026 = $self7024.ans;
self7024 = $self7024.args[0];
src$available7025 = $self7024.args[1];
anf_method_obj7040 = $self7024.vars[0];
anf_method_obj7031 = $self7024.vars[1];
anf_arg7041 = $self7024.vars[2];
anf_arg7042 = $self7024.vars[3];
anf_method_obj7037 = $self7024.vars[4];
anf_method_obj7054 = $self7024.vars[5];
anf_method_obj7049 = $self7024.vars[6];
anf_arg7050 = $self7024.vars[7];
anf_arg7051 = $self7024.vars[8];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2756],2,$t);
}
var self7024 = $self7024;
var src$available7025 = $src$available7025;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7022) {
case 0: $al7027 = L[2741];
var anf_arg7028 = G(self7024,"loc",L[2741]);
$step7022 = 1;
$al7027 = L[2742];
if(!(R.isFunction(src$available7025))) {
R.ffi.throwNonFunApp($al7027,src$available7025);
}
$ans7026 = src$available7025.app(anf_arg7028);
break;
case 1: var anf_arg7029 = $ans7026;
$al7027 = L[2742];
var anf_if7057 = R.checkWrapBoolean(anf_arg7029);
$step7022 = R.isPyretTrue(anf_if7057)?2:8;
break;
case 2: $al7027 = L[2743];
var anf_method_obj7040 = G(ED5,"error",L[2743]);
$al7027 = L[2744];
var anf_method_obj7031 = G(ED5,"para",L[2744]);
$step7022 = 3;
$al7027 = L[2745];
$field7030 = R.getColonFieldLoc(ED5,"text",L[2745]);
if(R.isMethod($field7030)) {
$ans7026 = $field7030.full_meth(ED5,("Pyret thinks "));
} else {
if(!(R.isFunction($field7030))) {
R.ffi.throwNonFunApp(L[2745],$field7030);
}
$ans7026 = $field7030.app(("Pyret thinks "));
}
break;
case 3: var anf_arg7032 = $ans7026;
$step7022 = 4;
$al7027 = L[2744];
$field7033 = R.getColonFieldLoc(anf_method_obj7031,"make1",L[2744]);
if(R.isMethod($field7033)) {
$ans7026 = $field7033.full_meth(anf_method_obj7031,anf_arg7032);
} else {
if(!(R.isFunction($field7033))) {
R.ffi.throwNonFunApp(L[2744],$field7033);
}
$ans7026 = $field7033.app(anf_arg7032);
}
break;
case 4: var anf_arg7041 = $ans7026;
$al7027 = L[2746];
var anf_arg7034 = G(self7024,"loc",L[2746]);
$step7022 = 5;
$al7027 = L[2747];
$field7035 = R.getColonFieldLoc(ED5,"cmcode",L[2747]);
if(R.isMethod($field7035)) {
$ans7026 = $field7035.full_meth(ED5,anf_arg7034);
} else {
if(!(R.isFunction($field7035))) {
R.ffi.throwNonFunApp(L[2747],$field7035);
}
$ans7026 = $field7035.app(anf_arg7034);
}
break;
case 5: var anf_arg7042 = $ans7026;
$al7027 = L[2748];
var anf_method_obj7037 = G(ED5,"para",L[2748]);
$step7022 = 6;
$al7027 = L[2749];
$field7036 = R.getColonFieldLoc(ED5,"text",L[2749]);
if(R.isMethod($field7036)) {
$ans7026 = $field7036.full_meth(ED5,(" is probably a number, but number literals in Pyret require at least one digit before the decimal point."));
} else {
if(!(R.isFunction($field7036))) {
R.ffi.throwNonFunApp(L[2749],$field7036);
}
$ans7026 = $field7036.app((" is probably a number, but number literals in Pyret require at least one digit before the decimal point."));
}
break;
case 6: var anf_arg7038 = $ans7026;
$step7022 = 7;
$al7027 = L[2748];
$field7039 = R.getColonFieldLoc(anf_method_obj7037,"make1",L[2748]);
if(R.isMethod($field7039)) {
$ans7026 = $field7039.full_meth(anf_method_obj7037,anf_arg7038);
} else {
if(!(R.isFunction($field7039))) {
R.ffi.throwNonFunApp(L[2748],$field7039);
}
$ans7026 = $field7039.app(anf_arg7038);
}
break;
case 7: var anf_arg7043 = $ans7026;
$step7022 = 13;
$al7027 = L[2743];
$field7044 = R.getColonFieldLoc(anf_method_obj7040,"make3",L[2743]);
if(R.isMethod($field7044)) {
$ans7026 = $field7044.full_meth(anf_method_obj7040,anf_arg7041,anf_arg7042,anf_arg7043);
} else {
if(!(R.isFunction($field7044))) {
R.ffi.throwNonFunApp(L[2743],$field7044);
}
$ans7026 = $field7044.app(anf_arg7041,anf_arg7042,anf_arg7043);
}
break;
case 8: $al7027 = L[2750];
var anf_method_obj7054 = G(ED5,"error",L[2750]);
$al7027 = L[2751];
var anf_method_obj7049 = G(ED5,"para",L[2751]);
$step7022 = 9;
$al7027 = L[2752];
$field7045 = R.getColonFieldLoc(ED5,"text",L[2752]);
if(R.isMethod($field7045)) {
$ans7026 = $field7045.full_meth(ED5,("Pyret thinks your program has a number at "));
} else {
if(!(R.isFunction($field7045))) {
R.ffi.throwNonFunApp(L[2752],$field7045);
}
$ans7026 = $field7045.app(("Pyret thinks your program has a number at "));
}
break;
case 9: var anf_arg7050 = $ans7026;
$al7027 = L[2753];
var anf_arg7046 = G(self7024,"loc",L[2753]);
$step7022 = 10;
$al7027 = L[2754];
$field7047 = R.getColonFieldLoc(ED5,"loc",L[2754]);
if(R.isMethod($field7047)) {
$ans7026 = $field7047.full_meth(ED5,anf_arg7046);
} else {
if(!(R.isFunction($field7047))) {
R.ffi.throwNonFunApp(L[2754],$field7047);
}
$ans7026 = $field7047.app(anf_arg7046);
}
break;
case 10: var anf_arg7051 = $ans7026;
$step7022 = 11;
$al7027 = L[2755];
$field7048 = R.getColonFieldLoc(ED5,"text",L[2755]);
if(R.isMethod($field7048)) {
$ans7026 = $field7048.full_meth(ED5,(", but number literals in Pyret require at least one digit before the decimal point."));
} else {
if(!(R.isFunction($field7048))) {
R.ffi.throwNonFunApp(L[2755],$field7048);
}
$ans7026 = $field7048.app((", but number literals in Pyret require at least one digit before the decimal point."));
}
break;
case 11: var anf_arg7052 = $ans7026;
$step7022 = 12;
$al7027 = L[2751];
$field7053 = R.getColonFieldLoc(anf_method_obj7049,"make3",L[2751]);
if(R.isMethod($field7053)) {
$ans7026 = $field7053.full_meth(anf_method_obj7049,anf_arg7050,anf_arg7051,anf_arg7052);
} else {
if(!(R.isFunction($field7053))) {
R.ffi.throwNonFunApp(L[2751],$field7053);
}
$ans7026 = $field7053.app(anf_arg7050,anf_arg7051,anf_arg7052);
}
break;
case 12: var anf_arg7055 = $ans7026;
$step7022 = 13;
$al7027 = L[2750];
$field7056 = R.getColonFieldLoc(anf_method_obj7054,"make1",L[2750]);
if(R.isMethod($field7056)) {
$ans7026 = $field7056.full_meth(anf_method_obj7054,anf_arg7055);
} else {
if(!(R.isFunction($field7056))) {
R.ffi.throwNonFunApp(L[2750],$field7056);
}
$ans7026 = $field7056.app(anf_arg7055);
}
break;
case 13: ++R.GAS;
return $ans7026;
default: throw "No case numbered " + $step7022 + " in $temp_full7023";
}
}
} catch($e7058) {
if(R.isCont($e7058) && ($step7022 !== 13)) {
$e7058.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7027,$temp_full7023,$step7022,[self7024,src$available7025],[anf_method_obj7040,anf_method_obj7031,anf_arg7041,anf_arg7042,anf_method_obj7037,anf_method_obj7054,anf_method_obj7049,anf_arg7050,anf_arg7051]);
}
if(R.isPyretException($e7058)) {
$e7058.pyretStack.push($al7027);
}
throw $e7058;
}
};
var anf_variant_member7192 = R.makeMethod1($temp_full7023,"render-fancy-reason");
var $temp_full7060 = function($self7061) {
var $step7059 = 0;
var $ans7062 = D;
var $al7063 = L[2763];
try {
if(R.isActivationRecord($self7061)) {
$step7059 = $self7061.step;
$al7063 = $self7061.from;
$ans7062 = $self7061.ans;
self7061 = $self7061.args[0];
anf_method_obj7073 = $self7061.vars[0];
anf_method_obj7068 = $self7061.vars[1];
anf_arg7069 = $self7061.vars[2];
anf_arg7070 = $self7061.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2763],1,$t);
}
var self7061 = $self7061;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7059) {
case 0: $al7063 = L[2757];
var anf_method_obj7073 = G(ED5,"error",L[2757]);
$al7063 = L[2758];
var anf_method_obj7068 = G(ED5,"para-nospace",L[2758]);
$step7059 = 1;
$al7063 = L[2759];
$field7064 = R.getColonFieldLoc(ED5,"text",L[2759]);
if(R.isMethod($field7064)) {
$ans7062 = $field7064.full_meth(ED5,("Pyret thinks your program probably has a number at "));
} else {
if(!(R.isFunction($field7064))) {
R.ffi.throwNonFunApp(L[2759],$field7064);
}
$ans7062 = $field7064.app(("Pyret thinks your program probably has a number at "));
}
break;
case 1: var anf_arg7069 = $ans7062;
var anf_fun7065 = draw$and$highlight38.$var;
$al7063 = L[2760];
var anf_arg7066 = G(self7061,"loc",L[2760]);
$step7059 = 2;
$al7063 = L[2762];
if(!(R.isFunction(anf_fun7065))) {
R.ffi.throwNonFunApp($al7063,anf_fun7065);
}
$ans7062 = anf_fun7065.app(anf_arg7066);
break;
case 2: var anf_arg7070 = $ans7062;
$step7059 = 3;
$al7063 = L[2761];
$field7067 = R.getColonFieldLoc(ED5,"text",L[2761]);
if(R.isMethod($field7067)) {
$ans7062 = $field7067.full_meth(ED5,("; number literals in Pyret require at least one digit before the decimal point."));
} else {
if(!(R.isFunction($field7067))) {
R.ffi.throwNonFunApp(L[2761],$field7067);
}
$ans7062 = $field7067.app(("; number literals in Pyret require at least one digit before the decimal point."));
}
break;
case 3: var anf_arg7071 = $ans7062;
$step7059 = 4;
$al7063 = L[2758];
$field7072 = R.getColonFieldLoc(anf_method_obj7068,"make3",L[2758]);
if(R.isMethod($field7072)) {
$ans7062 = $field7072.full_meth(anf_method_obj7068,anf_arg7069,anf_arg7070,anf_arg7071);
} else {
if(!(R.isFunction($field7072))) {
R.ffi.throwNonFunApp(L[2758],$field7072);
}
$ans7062 = $field7072.app(anf_arg7069,anf_arg7070,anf_arg7071);
}
break;
case 4: var anf_arg7074 = $ans7062;
$step7059 = 5;
$al7063 = L[2757];
$field7075 = R.getColonFieldLoc(anf_method_obj7073,"make1",L[2757]);
if(R.isMethod($field7075)) {
$ans7062 = $field7075.full_meth(anf_method_obj7073,anf_arg7074);
} else {
if(!(R.isFunction($field7075))) {
R.ffi.throwNonFunApp(L[2757],$field7075);
}
$ans7062 = $field7075.app(anf_arg7074);
}
break;
case 5: ++R.GAS;
return $ans7062;
default: throw "No case numbered " + $step7059 + " in $temp_full7060";
}
}
} catch($e7076) {
if(R.isCont($e7076) && ($step7059 !== 5)) {
$e7076.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7063,$temp_full7060,$step7059,[self7061],[anf_method_obj7073,anf_method_obj7068,anf_arg7069,anf_arg7070]);
}
if(R.isPyretException($e7076)) {
$e7076.pyretStack.push($al7063);
}
throw $e7076;
}
};
var anf_variant_member7193 = R.makeMethod0($temp_full7060,"render-reason");
var $temp_full7078 = function($self7079,$tostring7080) {
var $step7077 = 0;
var $ans7081 = D;
var $al7082 = L[2767];
try {
if(R.isActivationRecord($self7079)) {
$step7077 = $self7079.step;
$al7082 = $self7079.from;
$ans7081 = $self7079.ans;
self7079 = $self7079.args[0];
tostring7080 = $self7079.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2767],2,$t);
}
var self7079 = $self7079;
var tostring7080 = $tostring7080;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7077) {
case 0: $al7082 = L[2764];
var anf_method_obj7083 = G(self7079,"loc",L[2764]);
$step7077 = 1;
$al7082 = L[2765];
$field7084 = R.getColonFieldLoc(anf_method_obj7083,"format",L[2765]);
if(R.isMethod($field7084)) {
$ans7081 = $field7084.full_meth(anf_method_obj7083,(true));
} else {
if(!(R.isFunction($field7084))) {
R.ffi.throwNonFunApp(L[2765],$field7084);
}
$ans7081 = $field7084.app((true));
}
break;
case 1: var anf_arg7085 = $ans7081;
$step7077 = 2;
$al7082 = L[2766];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7082,_plus1);
}
$ans7081 = _plus1.app(("Empty block at "),anf_arg7085);
break;
case 2: ++R.GAS;
return $ans7081;
default: throw "No case numbered " + $step7077 + " in $temp_full7078";
}
}
} catch($e7086) {
if(R.isCont($e7086) && ($step7077 !== 2)) {
$e7086.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7082,$temp_full7078,$step7077,[self7079,tostring7080],[]);
}
if(R.isPyretException($e7086)) {
$e7086.pyretStack.push($al7082);
}
throw $e7086;
}
};
var anf_variant_member7202 = R.makeMethod1($temp_full7078,"_tostring");
var $temp_full7088 = function($self7089,$tostring7090) {
var $step7087 = 0;
var $ans7091 = D;
var $al7092 = L[2771];
try {
if(R.isActivationRecord($self7089)) {
$step7087 = $self7089.step;
$al7092 = $self7089.from;
$ans7091 = $self7089.ans;
self7089 = $self7089.args[0];
tostring7090 = $self7089.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2771],2,$t);
}
var self7089 = $self7089;
var tostring7090 = $tostring7090;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7087) {
case 0: $al7092 = L[2768];
var anf_method_obj7093 = G(self7089,"loc",L[2768]);
$step7087 = 1;
$al7092 = L[2769];
$field7094 = R.getColonFieldLoc(anf_method_obj7093,"format",L[2769]);
if(R.isMethod($field7094)) {
$ans7091 = $field7094.full_meth(anf_method_obj7093,(true));
} else {
if(!(R.isFunction($field7094))) {
R.ffi.throwNonFunApp(L[2769],$field7094);
}
$ans7091 = $field7094.app((true));
}
break;
case 1: var anf_arg7095 = $ans7091;
$step7087 = 2;
$al7092 = L[2770];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7092,_plus1);
}
$ans7091 = _plus1.app(("Expected a val binding or an expression, but got something else "),anf_arg7095);
break;
case 2: ++R.GAS;
return $ans7091;
default: throw "No case numbered " + $step7087 + " in $temp_full7088";
}
}
} catch($e7096) {
if(R.isCont($e7096) && ($step7087 !== 2)) {
$e7096.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7092,$temp_full7088,$step7087,[self7089,tostring7090],[]);
}
if(R.isPyretException($e7096)) {
$e7096.pyretStack.push($al7092);
}
throw $e7096;
}
};
var anf_variant_member7211 = R.makeMethod1($temp_full7088,"_tostring");
var $temp_full7098 = function($self7099,$tostring7100) {
var $step7097 = 0;
var $ans7101 = D;
var $al7102 = L[2775];
try {
if(R.isActivationRecord($self7099)) {
$step7097 = $self7099.step;
$al7102 = $self7099.from;
$ans7101 = $self7099.ans;
self7099 = $self7099.args[0];
tostring7100 = $self7099.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2775],2,$t);
}
var self7099 = $self7099;
var tostring7100 = $tostring7100;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7097) {
case 0: $al7102 = L[2772];
var anf_method_obj7103 = G(self7099,"loc",L[2772]);
$step7097 = 1;
$al7102 = L[2773];
$field7104 = R.getColonFieldLoc(anf_method_obj7103,"format",L[2773]);
if(R.isMethod($field7104)) {
$ans7101 = $field7104.full_meth(anf_method_obj7103,(true));
} else {
if(!(R.isFunction($field7104))) {
R.ffi.throwNonFunApp(L[2773],$field7104);
}
$ans7101 = $field7104.app((true));
}
break;
case 1: var anf_arg7105 = $ans7101;
$step7097 = 2;
$al7102 = L[2774];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7102,_plus1);
}
$ans7101 = _plus1.app(("Expected a val binding or an expression, but got something else "),anf_arg7105);
break;
case 2: ++R.GAS;
return $ans7101;
default: throw "No case numbered " + $step7097 + " in $temp_full7098";
}
}
} catch($e7106) {
if(R.isCont($e7106) && ($step7097 !== 2)) {
$e7106.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7102,$temp_full7098,$step7097,[self7099,tostring7100],[]);
}
if(R.isPyretException($e7106)) {
$e7106.pyretStack.push($al7102);
}
throw $e7106;
}
};
var anf_variant_member7220 = R.makeMethod1($temp_full7098,"_tostring");
var $temp_full7108 = function($self7109,$tostring7110) {
var $step7107 = 0;
var $ans7111 = D;
var $al7112 = L[2779];
try {
if(R.isActivationRecord($self7109)) {
$step7107 = $self7109.step;
$al7112 = $self7109.from;
$ans7111 = $self7109.ans;
self7109 = $self7109.args[0];
tostring7110 = $self7109.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2779],2,$t);
}
var self7109 = $self7109;
var tostring7110 = $tostring7110;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7107) {
case 0: $al7112 = L[2776];
var anf_method_obj7113 = G(self7109,"loc",L[2776]);
$step7107 = 1;
$al7112 = L[2777];
$field7114 = R.getColonFieldLoc(anf_method_obj7113,"format",L[2777]);
if(R.isMethod($field7114)) {
$ans7111 = $field7114.full_meth(anf_method_obj7113,(true));
} else {
if(!(R.isFunction($field7114))) {
R.ffi.throwNonFunApp(L[2777],$field7114);
}
$ans7111 = $field7114.app((true));
}
break;
case 1: var anf_arg7115 = $ans7111;
$step7107 = 2;
$al7112 = L[2778];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7112,_plus1);
}
$ans7111 = _plus1.app(("fun-missing-colon: "),anf_arg7115);
break;
case 2: ++R.GAS;
return $ans7111;
default: throw "No case numbered " + $step7107 + " in $temp_full7108";
}
}
} catch($e7116) {
if(R.isCont($e7116) && ($step7107 !== 2)) {
$e7116.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7112,$temp_full7108,$step7107,[self7109,tostring7110],[]);
}
if(R.isPyretException($e7116)) {
$e7116.pyretStack.push($al7112);
}
throw $e7116;
}
};
var anf_variant_member7229 = R.makeMethod1($temp_full7108,"_tostring");
var $temp_full7118 = function($self7119,$tostring7120) {
var $step7117 = 0;
var $ans7121 = D;
var $al7122 = L[2783];
try {
if(R.isActivationRecord($self7119)) {
$step7117 = $self7119.step;
$al7122 = $self7119.from;
$ans7121 = $self7119.ans;
self7119 = $self7119.args[0];
tostring7120 = $self7119.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2783],2,$t);
}
var self7119 = $self7119;
var tostring7120 = $tostring7120;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7117) {
case 0: $al7122 = L[2780];
var anf_method_obj7123 = G(self7119,"loc",L[2780]);
$step7117 = 1;
$al7122 = L[2781];
$field7124 = R.getColonFieldLoc(anf_method_obj7123,"format",L[2781]);
if(R.isMethod($field7124)) {
$ans7121 = $field7124.full_meth(anf_method_obj7123,(true));
} else {
if(!(R.isFunction($field7124))) {
R.ffi.throwNonFunApp(L[2781],$field7124);
}
$ans7121 = $field7124.app((true));
}
break;
case 1: var anf_arg7125 = $ans7121;
$step7117 = 2;
$al7122 = L[2782];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7122,_plus1);
}
$ans7121 = _plus1.app(("fun-missing-end: "),anf_arg7125);
break;
case 2: ++R.GAS;
return $ans7121;
default: throw "No case numbered " + $step7117 + " in $temp_full7118";
}
}
} catch($e7126) {
if(R.isCont($e7126) && ($step7117 !== 2)) {
$e7126.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7122,$temp_full7118,$step7117,[self7119,tostring7120],[]);
}
if(R.isPyretException($e7126)) {
$e7126.pyretStack.push($al7122);
}
throw $e7126;
}
};
var anf_variant_member7238 = R.makeMethod1($temp_full7118,"_tostring");
var $temp_full7128 = function($self7129,$tostring7130) {
var $step7127 = 0;
var $ans7131 = D;
var $al7132 = L[2787];
try {
if(R.isActivationRecord($self7129)) {
$step7127 = $self7129.step;
$al7132 = $self7129.from;
$ans7131 = $self7129.ans;
self7129 = $self7129.args[0];
tostring7130 = $self7129.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2787],2,$t);
}
var self7129 = $self7129;
var tostring7130 = $tostring7130;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7127) {
case 0: $al7132 = L[2784];
var anf_method_obj7133 = G(self7129,"loc",L[2784]);
$step7127 = 1;
$al7132 = L[2785];
$field7134 = R.getColonFieldLoc(anf_method_obj7133,"format",L[2785]);
if(R.isMethod($field7134)) {
$ans7131 = $field7134.full_meth(anf_method_obj7133,(true));
} else {
if(!(R.isFunction($field7134))) {
R.ffi.throwNonFunApp(L[2785],$field7134);
}
$ans7131 = $field7134.app((true));
}
break;
case 1: var anf_arg7135 = $ans7131;
$step7127 = 2;
$al7132 = L[2786];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7132,_plus1);
}
$ans7131 = _plus1.app(("args-missing-comma: "),anf_arg7135);
break;
case 2: ++R.GAS;
return $ans7131;
default: throw "No case numbered " + $step7127 + " in $temp_full7128";
}
}
} catch($e7136) {
if(R.isCont($e7136) && ($step7127 !== 2)) {
$e7136.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7132,$temp_full7128,$step7127,[self7129,tostring7130],[]);
}
if(R.isPyretException($e7136)) {
$e7136.pyretStack.push($al7132);
}
throw $e7136;
}
};
var anf_variant_member7247 = R.makeMethod1($temp_full7128,"_tostring");
var $temp_full7138 = function($self7139,$tostring7140) {
var $step7137 = 0;
var $ans7141 = D;
var $al7142 = L[2791];
try {
if(R.isActivationRecord($self7139)) {
$step7137 = $self7139.step;
$al7142 = $self7139.from;
$ans7141 = $self7139.ans;
self7139 = $self7139.args[0];
tostring7140 = $self7139.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2791],2,$t);
}
var self7139 = $self7139;
var tostring7140 = $tostring7140;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step7137) {
case 0: $al7142 = L[2788];
var anf_method_obj7143 = G(self7139,"loc",L[2788]);
$step7137 = 1;
$al7142 = L[2789];
$field7144 = R.getColonFieldLoc(anf_method_obj7143,"format",L[2789]);
if(R.isMethod($field7144)) {
$ans7141 = $field7144.full_meth(anf_method_obj7143,(true));
} else {
if(!(R.isFunction($field7144))) {
R.ffi.throwNonFunApp(L[2789],$field7144);
}
$ans7141 = $field7144.app((true));
}
break;
case 1: var anf_arg7145 = $ans7141;
$step7137 = 2;
$al7142 = L[2790];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al7142,_plus1);
}
$ans7141 = _plus1.app(("app-args-missing-comma: "),anf_arg7145);
break;
case 2: ++R.GAS;
return $ans7141;
default: throw "No case numbered " + $step7137 + " in $temp_full7138";
}
}
} catch($e7146) {
if(R.isCont($e7146) && ($step7137 !== 2)) {
$e7146.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al7142,$temp_full7138,$step7137,[self7139,tostring7140],[]);
}
if(R.isPyretException($e7146)) {
$e7146.pyretStack.push($al7142);
}
throw $e7146;
}
};
var anf_variant_member7256 = R.makeMethod1($temp_full7138,"_tostring");
var $parse$error$next$token_getfields7155 = function(f) {
return f(this.dict["loc"],this.dict["next-token"]);
};
var $parse$error$next$token_getfieldsref7153 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["next-token"],false,refmask[1]));
};
var $parse$error$next$token_mutablemask7154 = [false,false];
var $parse$error$next$token$base7148 = {"$fieldNames":["loc","next-token"],
"render-reason":anf_shared7147,
"render-fancy-reason":anf_variant_member7151,
"render-reason":anf_variant_member7152,
"_match":R.makeMatch("parse-error-next-token",2)};
var $parse$error$next$token$brander7149 = R.namedBrander("parse-error-next-token",L[2792]);
var $parse$error$next$token$brands7150 = {};
$parse$error$next$token$brands7150[ParseError26._brand] = true;
$parse$error$next$token$brands7150[$parse$error$next$token$brander7149._brand] = true;
var parse$error$next$token7156 = R.makeVariantConstructor(L[2794],function() {
return [$type$String7];
},["next$token7157"],[L[2793]],[false,false],["loc7158","next$token7157"],$parse$error$next$token_mutablemask7154,$parse$error$next$token$base7148,$parse$error$next$token$brands7150,"parse-error-next-token",$parse$error$next$token_getfieldsref7153,$parse$error$next$token_getfields7155,$parse$error$next$token$base7148);
var $parse$error$eof_getfields7166 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$eof_getfieldsref7164 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$eof_mutablemask7165 = [false];
var $parse$error$eof$base7159 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"render-fancy-reason":anf_variant_member7162,
"render-reason":anf_variant_member7163,
"_match":R.makeMatch("parse-error-eof",1)};
var $parse$error$eof$brander7160 = R.namedBrander("parse-error-eof",L[2795]);
var $parse$error$eof$brands7161 = {};
$parse$error$eof$brands7161[ParseError26._brand] = true;
$parse$error$eof$brands7161[$parse$error$eof$brander7160._brand] = true;
var parse$error$eof7167 = R.makeVariantConstructor(L[2796],function() {
return [];
},[],[],[false],["loc7168"],$parse$error$eof_mutablemask7165,$parse$error$eof$base7159,$parse$error$eof$brands7161,"parse-error-eof",$parse$error$eof_getfieldsref7164,$parse$error$eof_getfields7166,$parse$error$eof$base7159);
var $parse$error$unterminated$string_getfields7176 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$unterminated$string_getfieldsref7174 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$unterminated$string_mutablemask7175 = [false];
var $parse$error$unterminated$string$base7169 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"render-fancy-reason":anf_variant_member7172,
"render-reason":anf_variant_member7173,
"_match":R.makeMatch("parse-error-unterminated-string",1)};
var $parse$error$unterminated$string$brander7170 = R.namedBrander("parse-error-unterminated-string",L[2797]);
var $parse$error$unterminated$string$brands7171 = {};
$parse$error$unterminated$string$brands7171[ParseError26._brand] = true;
$parse$error$unterminated$string$brands7171[$parse$error$unterminated$string$brander7170._brand] = true;
var parse$error$unterminated$string7177 = R.makeVariantConstructor(L[2798],function() {
return [];
},[],[],[false],["loc7178"],$parse$error$unterminated$string_mutablemask7175,$parse$error$unterminated$string$base7169,$parse$error$unterminated$string$brands7171,"parse-error-unterminated-string",$parse$error$unterminated$string_getfieldsref7174,$parse$error$unterminated$string_getfields7176,$parse$error$unterminated$string$base7169);
var $parse$error$bad$operator_getfields7186 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$bad$operator_getfieldsref7184 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$bad$operator_mutablemask7185 = [false];
var $parse$error$bad$operator$base7179 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"render-fancy-reason":anf_variant_member7182,
"render-reason":anf_variant_member7183,
"_match":R.makeMatch("parse-error-bad-operator",1)};
var $parse$error$bad$operator$brander7180 = R.namedBrander("parse-error-bad-operator",L[2799]);
var $parse$error$bad$operator$brands7181 = {};
$parse$error$bad$operator$brands7181[ParseError26._brand] = true;
$parse$error$bad$operator$brands7181[$parse$error$bad$operator$brander7180._brand] = true;
var parse$error$bad$operator7187 = R.makeVariantConstructor(L[2800],function() {
return [];
},[],[],[false],["loc7188"],$parse$error$bad$operator_mutablemask7185,$parse$error$bad$operator$base7179,$parse$error$bad$operator$brands7181,"parse-error-bad-operator",$parse$error$bad$operator_getfieldsref7184,$parse$error$bad$operator_getfields7186,$parse$error$bad$operator$base7179);
var $parse$error$bad$number_getfields7196 = function(f) {
return f(this.dict["loc"]);
};
var $parse$error$bad$number_getfieldsref7194 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $parse$error$bad$number_mutablemask7195 = [false];
var $parse$error$bad$number$base7189 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"render-fancy-reason":anf_variant_member7192,
"render-reason":anf_variant_member7193,
"_match":R.makeMatch("parse-error-bad-number",1)};
var $parse$error$bad$number$brander7190 = R.namedBrander("parse-error-bad-number",L[2801]);
var $parse$error$bad$number$brands7191 = {};
$parse$error$bad$number$brands7191[ParseError26._brand] = true;
$parse$error$bad$number$brands7191[$parse$error$bad$number$brander7190._brand] = true;
var parse$error$bad$number7197 = R.makeVariantConstructor(L[2802],function() {
return [];
},[],[],[false],["loc7198"],$parse$error$bad$number_mutablemask7195,$parse$error$bad$number$base7189,$parse$error$bad$number$brands7191,"parse-error-bad-number",$parse$error$bad$number_getfieldsref7194,$parse$error$bad$number_getfields7196,$parse$error$bad$number$base7189);
var $empty$block_getfields7205 = function(f) {
return f(this.dict["loc"]);
};
var $empty$block_getfieldsref7203 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $empty$block_mutablemask7204 = [false];
var $empty$block$base7199 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7202,
"_match":R.makeMatch("empty-block",1)};
var $empty$block$brander7200 = R.namedBrander("empty-block",L[2803]);
var $empty$block$brands7201 = {};
$empty$block$brands7201[ParseError26._brand] = true;
$empty$block$brands7201[$empty$block$brander7200._brand] = true;
var empty$block7206 = R.makeVariantConstructor(L[2804],function() {
return [];
},[],[],[false],["loc7207"],$empty$block_mutablemask7204,$empty$block$base7199,$empty$block$brands7201,"empty-block",$empty$block_getfieldsref7203,$empty$block_getfields7205,$empty$block$base7199);
var $bad$block$stmt_getfields7214 = function(f) {
return f(this.dict["loc"]);
};
var $bad$block$stmt_getfieldsref7212 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $bad$block$stmt_mutablemask7213 = [false];
var $bad$block$stmt$base7208 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7211,
"_match":R.makeMatch("bad-block-stmt",1)};
var $bad$block$stmt$brander7209 = R.namedBrander("bad-block-stmt",L[2805]);
var $bad$block$stmt$brands7210 = {};
$bad$block$stmt$brands7210[ParseError26._brand] = true;
$bad$block$stmt$brands7210[$bad$block$stmt$brander7209._brand] = true;
var bad$block$stmt7215 = R.makeVariantConstructor(L[2806],function() {
return [];
},[],[],[false],["loc7216"],$bad$block$stmt_mutablemask7213,$bad$block$stmt$base7208,$bad$block$stmt$brands7210,"bad-block-stmt",$bad$block$stmt_getfieldsref7212,$bad$block$stmt_getfields7214,$bad$block$stmt$base7208);
var $bad$check$block$stmt_getfields7223 = function(f) {
return f(this.dict["loc"]);
};
var $bad$check$block$stmt_getfieldsref7221 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $bad$check$block$stmt_mutablemask7222 = [false];
var $bad$check$block$stmt$base7217 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7220,
"_match":R.makeMatch("bad-check-block-stmt",1)};
var $bad$check$block$stmt$brander7218 = R.namedBrander("bad-check-block-stmt",L[2807]);
var $bad$check$block$stmt$brands7219 = {};
$bad$check$block$stmt$brands7219[ParseError26._brand] = true;
$bad$check$block$stmt$brands7219[$bad$check$block$stmt$brander7218._brand] = true;
var bad$check$block$stmt7224 = R.makeVariantConstructor(L[2808],function() {
return [];
},[],[],[false],["loc7225"],$bad$check$block$stmt_mutablemask7222,$bad$check$block$stmt$base7217,$bad$check$block$stmt$brands7219,"bad-check-block-stmt",$bad$check$block$stmt_getfieldsref7221,$bad$check$block$stmt_getfields7223,$bad$check$block$stmt$base7217);
var $fun$missing$colon_getfields7232 = function(f) {
return f(this.dict["loc"]);
};
var $fun$missing$colon_getfieldsref7230 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $fun$missing$colon_mutablemask7231 = [false];
var $fun$missing$colon$base7226 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7229,
"_match":R.makeMatch("fun-missing-colon",1)};
var $fun$missing$colon$brander7227 = R.namedBrander("fun-missing-colon",L[2809]);
var $fun$missing$colon$brands7228 = {};
$fun$missing$colon$brands7228[ParseError26._brand] = true;
$fun$missing$colon$brands7228[$fun$missing$colon$brander7227._brand] = true;
var fun$missing$colon7233 = R.makeVariantConstructor(L[2810],function() {
return [];
},[],[],[false],["loc7234"],$fun$missing$colon_mutablemask7231,$fun$missing$colon$base7226,$fun$missing$colon$brands7228,"fun-missing-colon",$fun$missing$colon_getfieldsref7230,$fun$missing$colon_getfields7232,$fun$missing$colon$base7226);
var $fun$missing$end_getfields7241 = function(f) {
return f(this.dict["loc"]);
};
var $fun$missing$end_getfieldsref7239 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $fun$missing$end_mutablemask7240 = [false];
var $fun$missing$end$base7235 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7238,
"_match":R.makeMatch("fun-missing-end",1)};
var $fun$missing$end$brander7236 = R.namedBrander("fun-missing-end",L[2811]);
var $fun$missing$end$brands7237 = {};
$fun$missing$end$brands7237[ParseError26._brand] = true;
$fun$missing$end$brands7237[$fun$missing$end$brander7236._brand] = true;
var fun$missing$end7242 = R.makeVariantConstructor(L[2812],function() {
return [];
},[],[],[false],["loc7243"],$fun$missing$end_mutablemask7240,$fun$missing$end$base7235,$fun$missing$end$brands7237,"fun-missing-end",$fun$missing$end_getfieldsref7239,$fun$missing$end_getfields7241,$fun$missing$end$base7235);
var $args$missing$comma_getfields7250 = function(f) {
return f(this.dict["loc"]);
};
var $args$missing$comma_getfieldsref7248 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $args$missing$comma_mutablemask7249 = [false];
var $args$missing$comma$base7244 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7247,
"_match":R.makeMatch("args-missing-comma",1)};
var $args$missing$comma$brander7245 = R.namedBrander("args-missing-comma",L[2813]);
var $args$missing$comma$brands7246 = {};
$args$missing$comma$brands7246[ParseError26._brand] = true;
$args$missing$comma$brands7246[$args$missing$comma$brander7245._brand] = true;
var args$missing$comma7251 = R.makeVariantConstructor(L[2814],function() {
return [];
},[],[],[false],["loc7252"],$args$missing$comma_mutablemask7249,$args$missing$comma$base7244,$args$missing$comma$brands7246,"args-missing-comma",$args$missing$comma_getfieldsref7248,$args$missing$comma_getfields7250,$args$missing$comma$base7244);
var $app$args$missing$comma_getfields7259 = function(f) {
return f(this.dict["loc"]);
};
var $app$args$missing$comma_getfieldsref7257 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $app$args$missing$comma_mutablemask7258 = [false];
var $app$args$missing$comma$base7253 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_tostring":anf_variant_member7256,
"_match":R.makeMatch("app-args-missing-comma",1)};
var $app$args$missing$comma$brander7254 = R.namedBrander("app-args-missing-comma",L[2815]);
var $app$args$missing$comma$brands7255 = {};
$app$args$missing$comma$brands7255[ParseError26._brand] = true;
$app$args$missing$comma$brands7255[$app$args$missing$comma$brander7254._brand] = true;
var app$args$missing$comma7260 = R.makeVariantConstructor(L[2816],function() {
return [];
},[],[],[false],["loc7261"],$app$args$missing$comma_mutablemask7258,$app$args$missing$comma$base7253,$app$args$missing$comma$brands7255,"app-args-missing-comma",$app$args$missing$comma_getfieldsref7257,$app$args$missing$comma_getfields7259,$app$args$missing$comma$base7253);
var $missing$end_getfields7267 = function(f) {
return f(this.dict["loc"]);
};
var $missing$end_getfieldsref7265 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $missing$end_mutablemask7266 = [false];
var $missing$end$base7262 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_match":R.makeMatch("missing-end",1)};
var $missing$end$brander7263 = R.namedBrander("missing-end",L[2817]);
var $missing$end$brands7264 = {};
$missing$end$brands7264[ParseError26._brand] = true;
$missing$end$brands7264[$missing$end$brander7263._brand] = true;
var missing$end7268 = R.makeVariantConstructor(L[2818],function() {
return [];
},[],[],[false],["loc7269"],$missing$end_mutablemask7266,$missing$end$base7262,$missing$end$brands7264,"missing-end",$missing$end_getfieldsref7265,$missing$end_getfields7267,$missing$end$base7262);
var $missing$comma_getfields7275 = function(f) {
return f(this.dict["loc"]);
};
var $missing$comma_getfieldsref7273 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $missing$comma_mutablemask7274 = [false];
var $missing$comma$base7270 = {"$fieldNames":["loc"],
"render-reason":anf_shared7147,
"_match":R.makeMatch("missing-comma",1)};
var $missing$comma$brander7271 = R.namedBrander("missing-comma",L[2819]);
var $missing$comma$brands7272 = {};
$missing$comma$brands7272[ParseError26._brand] = true;
$missing$comma$brands7272[$missing$comma$brander7271._brand] = true;
var missing$comma7276 = R.makeVariantConstructor(L[2820],function() {
return [];
},[],[],[false],["loc7277"],$missing$comma_mutablemask7274,$missing$comma$base7270,$missing$comma$brands7272,"missing-comma",$missing$comma_getfieldsref7273,$missing$comma_getfields7275,$missing$comma$base7270);
var anf_assign7278 = R.makeObject({"ParseError":G(ParseError26,"test",L[2821]),
"is-parse-error-next-token":G($parse$error$next$token$brander7149,"test",L[2792]),
"parse-error-next-token":parse$error$next$token7156,
"is-parse-error-eof":G($parse$error$eof$brander7160,"test",L[2795]),
"parse-error-eof":parse$error$eof7167,
"is-parse-error-unterminated-string":G($parse$error$unterminated$string$brander7170,"test",L[2797]),
"parse-error-unterminated-string":parse$error$unterminated$string7177,
"is-parse-error-bad-operator":G($parse$error$bad$operator$brander7180,"test",L[2799]),
"parse-error-bad-operator":parse$error$bad$operator7187,
"is-parse-error-bad-number":G($parse$error$bad$number$brander7190,"test",L[2801]),
"parse-error-bad-number":parse$error$bad$number7197,
"is-empty-block":G($empty$block$brander7200,"test",L[2803]),
"empty-block":empty$block7206,
"is-bad-block-stmt":G($bad$block$stmt$brander7209,"test",L[2805]),
"bad-block-stmt":bad$block$stmt7215,
"is-bad-check-block-stmt":G($bad$check$block$stmt$brander7218,"test",L[2807]),
"bad-check-block-stmt":bad$check$block$stmt7224,
"is-fun-missing-colon":G($fun$missing$colon$brander7227,"test",L[2809]),
"fun-missing-colon":fun$missing$colon7233,
"is-fun-missing-end":G($fun$missing$end$brander7236,"test",L[2811]),
"fun-missing-end":fun$missing$end7242,
"is-args-missing-comma":G($args$missing$comma$brander7245,"test",L[2813]),
"args-missing-comma":args$missing$comma7251,
"is-app-args-missing-comma":G($app$args$missing$comma$brander7254,"test",L[2815]),
"app-args-missing-comma":app$args$missing$comma7260,
"is-missing-end":G($missing$end$brander7263,"test",L[2817]),
"missing-end":missing$end7268,
"is-missing-comma":G($missing$comma$brander7271,"test",L[2819]),
"missing-comma":missing$comma7276});
ParseError7279.$var = anf_assign7278;
var anf_bracket7280 = ParseError7279.$var;
$al24 = L[2821];
var anf_assign7281 = G(anf_bracket7280,"ParseError",L[2821]);
is$ParseError7282.$var = anf_assign7281;
var anf_bracket7283 = ParseError7279.$var;
$al24 = L[2792];
var anf_assign7284 = G(anf_bracket7283,"is-parse-error-next-token",L[2792]);
is$parse$error$next$token7285.$var = anf_assign7284;
var anf_bracket7286 = ParseError7279.$var;
$al24 = L[2792];
var anf_assign7287 = G(anf_bracket7286,"parse-error-next-token",L[2792]);
parse$error$next$token7288.$var = anf_assign7287;
var anf_bracket7289 = ParseError7279.$var;
$al24 = L[2795];
var anf_assign7290 = G(anf_bracket7289,"is-parse-error-eof",L[2795]);
is$parse$error$eof7291.$var = anf_assign7290;
var anf_bracket7292 = ParseError7279.$var;
$al24 = L[2795];
var anf_assign7293 = G(anf_bracket7292,"parse-error-eof",L[2795]);
parse$error$eof7294.$var = anf_assign7293;
var anf_bracket7295 = ParseError7279.$var;
$al24 = L[2797];
var anf_assign7296 = G(anf_bracket7295,"is-parse-error-unterminated-string",L[2797]);
is$parse$error$unterminated$string7297.$var = anf_assign7296;
var anf_bracket7298 = ParseError7279.$var;
$al24 = L[2797];
var anf_assign7299 = G(anf_bracket7298,"parse-error-unterminated-string",L[2797]);
parse$error$unterminated$string7300.$var = anf_assign7299;
var anf_bracket7301 = ParseError7279.$var;
$al24 = L[2799];
var anf_assign7302 = G(anf_bracket7301,"is-parse-error-bad-operator",L[2799]);
is$parse$error$bad$operator7303.$var = anf_assign7302;
var anf_bracket7304 = ParseError7279.$var;
$al24 = L[2799];
var anf_assign7305 = G(anf_bracket7304,"parse-error-bad-operator",L[2799]);
parse$error$bad$operator7306.$var = anf_assign7305;
var anf_bracket7307 = ParseError7279.$var;
$al24 = L[2801];
var anf_assign7308 = G(anf_bracket7307,"is-parse-error-bad-number",L[2801]);
is$parse$error$bad$number7309.$var = anf_assign7308;
var anf_bracket7310 = ParseError7279.$var;
$al24 = L[2801];
var anf_assign7311 = G(anf_bracket7310,"parse-error-bad-number",L[2801]);
parse$error$bad$number7312.$var = anf_assign7311;
var anf_bracket7313 = ParseError7279.$var;
$al24 = L[2803];
var anf_assign7314 = G(anf_bracket7313,"is-empty-block",L[2803]);
is$empty$block7315.$var = anf_assign7314;
var anf_bracket7316 = ParseError7279.$var;
$al24 = L[2803];
var anf_assign7317 = G(anf_bracket7316,"empty-block",L[2803]);
empty$block7318.$var = anf_assign7317;
var anf_bracket7319 = ParseError7279.$var;
$al24 = L[2805];
var anf_assign7320 = G(anf_bracket7319,"is-bad-block-stmt",L[2805]);
is$bad$block$stmt7321.$var = anf_assign7320;
var anf_bracket7322 = ParseError7279.$var;
$al24 = L[2805];
var anf_assign7323 = G(anf_bracket7322,"bad-block-stmt",L[2805]);
bad$block$stmt7324.$var = anf_assign7323;
var anf_bracket7325 = ParseError7279.$var;
$al24 = L[2807];
var anf_assign7326 = G(anf_bracket7325,"is-bad-check-block-stmt",L[2807]);
is$bad$check$block$stmt7327.$var = anf_assign7326;
var anf_bracket7328 = ParseError7279.$var;
$al24 = L[2807];
var anf_assign7329 = G(anf_bracket7328,"bad-check-block-stmt",L[2807]);
bad$check$block$stmt7330.$var = anf_assign7329;
var anf_bracket7331 = ParseError7279.$var;
$al24 = L[2809];
var anf_assign7332 = G(anf_bracket7331,"is-fun-missing-colon",L[2809]);
is$fun$missing$colon7333.$var = anf_assign7332;
var anf_bracket7334 = ParseError7279.$var;
$al24 = L[2809];
var anf_assign7335 = G(anf_bracket7334,"fun-missing-colon",L[2809]);
fun$missing$colon7336.$var = anf_assign7335;
var anf_bracket7337 = ParseError7279.$var;
$al24 = L[2811];
var anf_assign7338 = G(anf_bracket7337,"is-fun-missing-end",L[2811]);
is$fun$missing$end7339.$var = anf_assign7338;
var anf_bracket7340 = ParseError7279.$var;
$al24 = L[2811];
var anf_assign7341 = G(anf_bracket7340,"fun-missing-end",L[2811]);
fun$missing$end7342.$var = anf_assign7341;
var anf_bracket7343 = ParseError7279.$var;
$al24 = L[2813];
var anf_assign7344 = G(anf_bracket7343,"is-args-missing-comma",L[2813]);
is$args$missing$comma7345.$var = anf_assign7344;
var anf_bracket7346 = ParseError7279.$var;
$al24 = L[2813];
var anf_assign7347 = G(anf_bracket7346,"args-missing-comma",L[2813]);
args$missing$comma7348.$var = anf_assign7347;
var anf_bracket7349 = ParseError7279.$var;
$al24 = L[2815];
var anf_assign7350 = G(anf_bracket7349,"is-app-args-missing-comma",L[2815]);
is$app$args$missing$comma7351.$var = anf_assign7350;
var anf_bracket7352 = ParseError7279.$var;
$al24 = L[2815];
var anf_assign7353 = G(anf_bracket7352,"app-args-missing-comma",L[2815]);
app$args$missing$comma7354.$var = anf_assign7353;
var anf_bracket7355 = ParseError7279.$var;
$al24 = L[2817];
var anf_assign7356 = G(anf_bracket7355,"is-missing-end",L[2817]);
is$missing$end7357.$var = anf_assign7356;
var anf_bracket7358 = ParseError7279.$var;
$al24 = L[2817];
var anf_assign7359 = G(anf_bracket7358,"missing-end",L[2817]);
missing$end7360.$var = anf_assign7359;
var anf_bracket7361 = ParseError7279.$var;
$al24 = L[2819];
var anf_assign7362 = G(anf_bracket7361,"is-missing-comma",L[2819]);
is$missing$comma7363.$var = anf_assign7362;
var anf_bracket7364 = ParseError7279.$var;
$al24 = L[2819];
var anf_assign7365 = G(anf_bracket7364,"missing-comma",L[2819]);
missing$comma7366.$var = anf_assign7365;
var defined_value7481 = missing$comma7366.$var;
var defined_value7482 = is$missing$comma7363.$var;
var defined_value7483 = missing$end7360.$var;
var defined_value7484 = is$missing$end7357.$var;
var defined_value7485 = app$args$missing$comma7354.$var;
var defined_value7486 = is$app$args$missing$comma7351.$var;
var defined_value7487 = args$missing$comma7348.$var;
var defined_value7488 = is$args$missing$comma7345.$var;
var defined_value7489 = fun$missing$end7342.$var;
var defined_value7490 = is$fun$missing$end7339.$var;
var defined_value7491 = fun$missing$colon7336.$var;
var defined_value7492 = is$fun$missing$colon7333.$var;
var defined_value7493 = bad$check$block$stmt7330.$var;
var defined_value7494 = is$bad$check$block$stmt7327.$var;
var defined_value7495 = bad$block$stmt7324.$var;
var defined_value7496 = is$bad$block$stmt7321.$var;
var defined_value7497 = empty$block7318.$var;
var defined_value7498 = is$empty$block7315.$var;
var defined_value7499 = parse$error$bad$number7312.$var;
var defined_value7500 = is$parse$error$bad$number7309.$var;
var defined_value7501 = parse$error$bad$operator7306.$var;
var defined_value7502 = is$parse$error$bad$operator7303.$var;
var defined_value7503 = parse$error$unterminated$string7300.$var;
var defined_value7504 = is$parse$error$unterminated$string7297.$var;
var defined_value7505 = parse$error$eof7294.$var;
var defined_value7506 = is$parse$error$eof7291.$var;
var defined_value7507 = parse$error$next$token7288.$var;
var defined_value7508 = is$parse$error$next$token7285.$var;
var defined_value7509 = is$ParseError7282.$var;
var defined_value7510 = user$exception6698.$var;
var defined_value7511 = is$user$exception6695.$var;
var defined_value7512 = user$break6692.$var;
var defined_value7513 = is$user$break6689.$var;
var defined_value7514 = equality$failure6686.$var;
var defined_value7515 = is$equality$failure6683.$var;
var defined_value7516 = invalid$array$index6680.$var;
var defined_value7517 = is$invalid$array$index6677.$var;
var defined_value7518 = module$load$failure6674.$var;
var defined_value7519 = is$module$load$failure6671.$var;
var defined_value7520 = uninitialized$id6668.$var;
var defined_value7521 = is$uninitialized$id6665.$var;
var defined_value7522 = non$function$app6662.$var;
var defined_value7523 = is$non$function$app6659.$var;
var defined_value7524 = arity$mismatch6656.$var;
var defined_value7525 = is$arity$mismatch6653.$var;
var defined_value7526 = constructor$arity$mismatch6650.$var;
var defined_value7527 = is$constructor$arity$mismatch6647.$var;
var defined_value7528 = cases$arity$mismatch6644.$var;
var defined_value7529 = is$cases$arity$mismatch6641.$var;
var defined_value7530 = cases$singleton$mismatch6638.$var;
var defined_value7531 = is$cases$singleton$mismatch6635.$var;
var defined_value7532 = numeric$binop$error6632.$var;
var defined_value7533 = is$numeric$binop$error6629.$var;
var defined_value7534 = num$string$binop$error6626.$var;
var defined_value7535 = is$num$string$binop$error6623.$var;
var defined_value7536 = generic$type$mismatch6620.$var;
var defined_value7537 = is$generic$type$mismatch6617.$var;
var defined_value7538 = non$boolean$op6614.$var;
var defined_value7539 = is$non$boolean$op6611.$var;
var defined_value7540 = non$boolean$condition6608.$var;
var defined_value7541 = is$non$boolean$condition6605.$var;
var defined_value7542 = extend$non$object6602.$var;
var defined_value7543 = is$extend$non$object6599.$var;
var defined_value7544 = lookup$non$object6596.$var;
var defined_value7545 = is$lookup$non$object6593.$var;
var defined_value7546 = bad$tuple$bind6590.$var;
var defined_value7547 = is$bad$tuple$bind6587.$var;
var defined_value7548 = non$tuple$bind6584.$var;
var defined_value7549 = is$non$tuple$bind6581.$var;
var defined_value7550 = lookup$large$index6578.$var;
var defined_value7551 = is$lookup$large$index6575.$var;
var defined_value7552 = lookup$non$tuple6572.$var;
var defined_value7553 = is$lookup$non$tuple6569.$var;
var defined_value7554 = lookup$constructor$not$object6566.$var;
var defined_value7555 = is$lookup$constructor$not$object6563.$var;
var defined_value7556 = field$not$found6560.$var;
var defined_value7557 = is$field$not$found6557.$var;
var defined_value7558 = template$not$finished6554.$var;
var defined_value7559 = is$template$not$finished6551.$var;
var defined_value7560 = internal$error6548.$var;
var defined_value7561 = is$internal$error6545.$var;
var defined_value7562 = no$branches$matched6542.$var;
var defined_value7563 = is$no$branches$matched6539.$var;
var defined_value7564 = no$cases$matched6536.$var;
var defined_value7565 = is$no$cases$matched6533.$var;
var defined_value7566 = update$non$existent$field6530.$var;
var defined_value7567 = is$update$non$existent$field6527.$var;
var defined_value7568 = update$non$ref6524.$var;
var defined_value7569 = is$update$non$ref6521.$var;
var defined_value7570 = update$frozen$ref6518.$var;
var defined_value7571 = is$update$frozen$ref6515.$var;
var defined_value7572 = update$non$obj6512.$var;
var defined_value7573 = is$update$non$obj6509.$var;
var defined_value7574 = message$exception6506.$var;
var defined_value7575 = is$message$exception6503.$var;
var defined_value7576 = sample$error6500.$var;
var defined_value7577 = is$sample$error6497.$var;
var defined_value7578 = multi$error6494.$var;
var defined_value7579 = is$multi$error6491.$var;
var defined_value7580 = is$RuntimeError6488.$var;
var defined_value7581 = please$report$bug133.$var;
var defined_value7582 = ed$intro122.$var;
var defined_value7583 = ed$simple$intro95.$var;
var defined_value7584 = vert$list$values62.$var;
var defined_value7585 = draw$and$highlight38.$var;
$step20 = 1;
$al24 = L[1841];
$field7367 = R.getColonFieldLoc(builtins1,"trace-value",L[1841]);
if(R.isMethod($field7367)) {
$ans23 = $field7367.full_meth(builtins1,L[1841],nothing2);
} else {
if(!(R.isFunction($field7367))) {
R.ffi.throwNonFunApp(L[1841],$field7367);
}
$ans23 = $field7367.app(L[1841],nothing2);
}
break;
case 1: var answer7479 = $ans23;
var anf_obj7368 = draw$and$highlight38.$var;
var anf_obj7369 = vert$list$values62.$var;
var anf_obj7370 = ed$simple$intro95.$var;
var anf_obj7371 = ed$intro122.$var;
var anf_obj7372 = please$report$bug133.$var;
var anf_obj7373 = is$RuntimeError6488.$var;
var anf_obj7374 = multi$error6494.$var;
var anf_obj7375 = is$multi$error6491.$var;
var anf_obj7376 = sample$error6500.$var;
var anf_obj7377 = is$sample$error6497.$var;
var anf_obj7378 = message$exception6506.$var;
var anf_obj7379 = is$message$exception6503.$var;
var anf_obj7380 = update$non$obj6512.$var;
var anf_obj7381 = is$update$non$obj6509.$var;
var anf_obj7382 = update$frozen$ref6518.$var;
var anf_obj7383 = is$update$frozen$ref6515.$var;
var anf_obj7384 = update$non$ref6524.$var;
var anf_obj7385 = is$update$non$ref6521.$var;
var anf_obj7386 = update$non$existent$field6530.$var;
var anf_obj7387 = is$update$non$existent$field6527.$var;
var anf_obj7388 = no$cases$matched6536.$var;
var anf_obj7389 = is$no$cases$matched6533.$var;
var anf_obj7390 = no$branches$matched6542.$var;
var anf_obj7391 = is$no$branches$matched6539.$var;
var anf_obj7392 = internal$error6548.$var;
var anf_obj7393 = is$internal$error6545.$var;
var anf_obj7394 = template$not$finished6554.$var;
var anf_obj7395 = is$template$not$finished6551.$var;
var anf_obj7396 = field$not$found6560.$var;
var anf_obj7397 = is$field$not$found6557.$var;
var anf_obj7398 = lookup$constructor$not$object6566.$var;
var anf_obj7399 = is$lookup$constructor$not$object6563.$var;
var anf_obj7400 = lookup$non$tuple6572.$var;
var anf_obj7401 = is$lookup$non$tuple6569.$var;
var anf_obj7402 = lookup$large$index6578.$var;
var anf_obj7403 = is$lookup$large$index6575.$var;
var anf_obj7404 = non$tuple$bind6584.$var;
var anf_obj7405 = is$non$tuple$bind6581.$var;
var anf_obj7406 = bad$tuple$bind6590.$var;
var anf_obj7407 = is$bad$tuple$bind6587.$var;
var anf_obj7408 = lookup$non$object6596.$var;
var anf_obj7409 = is$lookup$non$object6593.$var;
var anf_obj7410 = extend$non$object6602.$var;
var anf_obj7411 = is$extend$non$object6599.$var;
var anf_obj7412 = non$boolean$condition6608.$var;
var anf_obj7413 = is$non$boolean$condition6605.$var;
var anf_obj7414 = non$boolean$op6614.$var;
var anf_obj7415 = is$non$boolean$op6611.$var;
var anf_obj7416 = generic$type$mismatch6620.$var;
var anf_obj7417 = is$generic$type$mismatch6617.$var;
var anf_obj7418 = num$string$binop$error6626.$var;
var anf_obj7419 = is$num$string$binop$error6623.$var;
var anf_obj7420 = numeric$binop$error6632.$var;
var anf_obj7421 = is$numeric$binop$error6629.$var;
var anf_obj7422 = cases$singleton$mismatch6638.$var;
var anf_obj7423 = is$cases$singleton$mismatch6635.$var;
var anf_obj7424 = cases$arity$mismatch6644.$var;
var anf_obj7425 = is$cases$arity$mismatch6641.$var;
var anf_obj7426 = constructor$arity$mismatch6650.$var;
var anf_obj7427 = is$constructor$arity$mismatch6647.$var;
var anf_obj7428 = arity$mismatch6656.$var;
var anf_obj7429 = is$arity$mismatch6653.$var;
var anf_obj7430 = non$function$app6662.$var;
var anf_obj7431 = is$non$function$app6659.$var;
var anf_obj7432 = uninitialized$id6668.$var;
var anf_obj7433 = is$uninitialized$id6665.$var;
var anf_obj7434 = module$load$failure6674.$var;
var anf_obj7435 = is$module$load$failure6671.$var;
var anf_obj7436 = invalid$array$index6680.$var;
var anf_obj7437 = is$invalid$array$index6677.$var;
var anf_obj7438 = equality$failure6686.$var;
var anf_obj7439 = is$equality$failure6683.$var;
var anf_obj7440 = user$break6692.$var;
var anf_obj7441 = is$user$break6689.$var;
var anf_obj7442 = user$exception6698.$var;
var anf_obj7443 = is$user$exception6695.$var;
var anf_obj7444 = is$ParseError7282.$var;
var anf_obj7445 = parse$error$next$token7288.$var;
var anf_obj7446 = is$parse$error$next$token7285.$var;
var anf_obj7447 = parse$error$eof7294.$var;
var anf_obj7448 = is$parse$error$eof7291.$var;
var anf_obj7449 = parse$error$unterminated$string7300.$var;
var anf_obj7450 = is$parse$error$unterminated$string7297.$var;
var anf_obj7451 = parse$error$bad$operator7306.$var;
var anf_obj7452 = is$parse$error$bad$operator7303.$var;
var anf_obj7453 = parse$error$bad$number7312.$var;
var anf_obj7454 = is$parse$error$bad$number7309.$var;
var anf_obj7455 = empty$block7318.$var;
var anf_obj7456 = is$empty$block7315.$var;
var anf_obj7457 = bad$block$stmt7324.$var;
var anf_obj7458 = is$bad$block$stmt7321.$var;
var anf_obj7459 = bad$check$block$stmt7330.$var;
var anf_obj7460 = is$bad$check$block$stmt7327.$var;
var anf_obj7461 = fun$missing$colon7336.$var;
var anf_obj7462 = is$fun$missing$colon7333.$var;
var anf_obj7463 = fun$missing$end7342.$var;
var anf_obj7464 = is$fun$missing$end7339.$var;
var anf_obj7465 = args$missing$comma7348.$var;
var anf_obj7466 = is$args$missing$comma7345.$var;
var anf_obj7467 = app$args$missing$comma7354.$var;
var anf_obj7468 = is$app$args$missing$comma7351.$var;
var anf_obj7469 = missing$end7360.$var;
var anf_obj7470 = is$missing$end7357.$var;
var anf_obj7471 = missing$comma7366.$var;
var anf_obj7472 = is$missing$comma7363.$var;
var provides7478 = R.makeObject({"draw-and-highlight":anf_obj7368,
"vert-list-values":anf_obj7369,
"ed-simple-intro":anf_obj7370,
"ed-intro":anf_obj7371,
"please-report-bug":anf_obj7372,
"is-RuntimeError":anf_obj7373,
"multi-error":anf_obj7374,
"is-multi-error":anf_obj7375,
"sample-error":anf_obj7376,
"is-sample-error":anf_obj7377,
"message-exception":anf_obj7378,
"is-message-exception":anf_obj7379,
"update-non-obj":anf_obj7380,
"is-update-non-obj":anf_obj7381,
"update-frozen-ref":anf_obj7382,
"is-update-frozen-ref":anf_obj7383,
"update-non-ref":anf_obj7384,
"is-update-non-ref":anf_obj7385,
"update-non-existent-field":anf_obj7386,
"is-update-non-existent-field":anf_obj7387,
"no-cases-matched":anf_obj7388,
"is-no-cases-matched":anf_obj7389,
"no-branches-matched":anf_obj7390,
"is-no-branches-matched":anf_obj7391,
"internal-error":anf_obj7392,
"is-internal-error":anf_obj7393,
"template-not-finished":anf_obj7394,
"is-template-not-finished":anf_obj7395,
"field-not-found":anf_obj7396,
"is-field-not-found":anf_obj7397,
"lookup-constructor-not-object":anf_obj7398,
"is-lookup-constructor-not-object":anf_obj7399,
"lookup-non-tuple":anf_obj7400,
"is-lookup-non-tuple":anf_obj7401,
"lookup-large-index":anf_obj7402,
"is-lookup-large-index":anf_obj7403,
"non-tuple-bind":anf_obj7404,
"is-non-tuple-bind":anf_obj7405,
"bad-tuple-bind":anf_obj7406,
"is-bad-tuple-bind":anf_obj7407,
"lookup-non-object":anf_obj7408,
"is-lookup-non-object":anf_obj7409,
"extend-non-object":anf_obj7410,
"is-extend-non-object":anf_obj7411,
"non-boolean-condition":anf_obj7412,
"is-non-boolean-condition":anf_obj7413,
"non-boolean-op":anf_obj7414,
"is-non-boolean-op":anf_obj7415,
"generic-type-mismatch":anf_obj7416,
"is-generic-type-mismatch":anf_obj7417,
"num-string-binop-error":anf_obj7418,
"is-num-string-binop-error":anf_obj7419,
"numeric-binop-error":anf_obj7420,
"is-numeric-binop-error":anf_obj7421,
"cases-singleton-mismatch":anf_obj7422,
"is-cases-singleton-mismatch":anf_obj7423,
"cases-arity-mismatch":anf_obj7424,
"is-cases-arity-mismatch":anf_obj7425,
"constructor-arity-mismatch":anf_obj7426,
"is-constructor-arity-mismatch":anf_obj7427,
"arity-mismatch":anf_obj7428,
"is-arity-mismatch":anf_obj7429,
"non-function-app":anf_obj7430,
"is-non-function-app":anf_obj7431,
"uninitialized-id":anf_obj7432,
"is-uninitialized-id":anf_obj7433,
"module-load-failure":anf_obj7434,
"is-module-load-failure":anf_obj7435,
"invalid-array-index":anf_obj7436,
"is-invalid-array-index":anf_obj7437,
"equality-failure":anf_obj7438,
"is-equality-failure":anf_obj7439,
"user-break":anf_obj7440,
"is-user-break":anf_obj7441,
"user-exception":anf_obj7442,
"is-user-exception":anf_obj7443,
"is-ParseError":anf_obj7444,
"parse-error-next-token":anf_obj7445,
"is-parse-error-next-token":anf_obj7446,
"parse-error-eof":anf_obj7447,
"is-parse-error-eof":anf_obj7448,
"parse-error-unterminated-string":anf_obj7449,
"is-parse-error-unterminated-string":anf_obj7450,
"parse-error-bad-operator":anf_obj7451,
"is-parse-error-bad-operator":anf_obj7452,
"parse-error-bad-number":anf_obj7453,
"is-parse-error-bad-number":anf_obj7454,
"empty-block":anf_obj7455,
"is-empty-block":anf_obj7456,
"bad-block-stmt":anf_obj7457,
"is-bad-block-stmt":anf_obj7458,
"bad-check-block-stmt":anf_obj7459,
"is-bad-check-block-stmt":anf_obj7460,
"fun-missing-colon":anf_obj7461,
"is-fun-missing-colon":anf_obj7462,
"fun-missing-end":anf_obj7463,
"is-fun-missing-end":anf_obj7464,
"args-missing-comma":anf_obj7465,
"is-args-missing-comma":anf_obj7466,
"app-args-missing-comma":anf_obj7467,
"is-app-args-missing-comma":anf_obj7468,
"missing-end":anf_obj7469,
"is-missing-end":anf_obj7470,
"missing-comma":anf_obj7471,
"is-missing-comma":anf_obj7472});
$step20 = 2;
$al24 = L[2586];
$field7473 = R.getColonFieldLoc(builtins1,"current-checker",L[2586]);
if(R.isMethod($field7473)) {
$ans23 = $field7473.full_meth(builtins1);
} else {
if(!(R.isFunction($field7473))) {
R.ffi.throwNonFunApp(L[2586],$field7473);
}
$ans23 = $field7473.app();
}
break;
case 2: var anf_method_obj7474 = $ans23;
$step20 = 3;
$al24 = L[2586];
$field7475 = R.getColonFieldLoc(anf_method_obj7474,"results",L[2586]);
if(R.isMethod($field7475)) {
$ans23 = $field7475.full_meth(anf_method_obj7474);
} else {
if(!(R.isFunction($field7475))) {
R.ffi.throwNonFunApp(L[2586],$field7475);
}
$ans23 = $field7475.app();
}
break;
case 3: var checks7480 = $ans23;
$step20 = 4;
$ans23 = R.makeObject({"answer":answer7479,
"namespace":NAMESPACE,
"defined-values":{"missing-comma":defined_value7481,
"ED":ED5,
"is-missing-comma":defined_value7482,
"missing-end":defined_value7483,
"is-missing-end":defined_value7484,
"app-args-missing-comma":defined_value7485,
"is-app-args-missing-comma":defined_value7486,
"args-missing-comma":defined_value7487,
"is-args-missing-comma":defined_value7488,
"fun-missing-end":defined_value7489,
"is-fun-missing-end":defined_value7490,
"fun-missing-colon":defined_value7491,
"is-fun-missing-colon":defined_value7492,
"bad-check-block-stmt":defined_value7493,
"is-bad-check-block-stmt":defined_value7494,
"bad-block-stmt":defined_value7495,
"is-bad-block-stmt":defined_value7496,
"empty-block":defined_value7497,
"is-empty-block":defined_value7498,
"parse-error-bad-number":defined_value7499,
"is-parse-error-bad-number":defined_value7500,
"parse-error-bad-operator":defined_value7501,
"is-parse-error-bad-operator":defined_value7502,
"parse-error-unterminated-string":defined_value7503,
"is-parse-error-unterminated-string":defined_value7504,
"parse-error-eof":defined_value7505,
"is-parse-error-eof":defined_value7506,
"parse-error-next-token":defined_value7507,
"is-parse-error-next-token":defined_value7508,
"is-ParseError":defined_value7509,
"user-exception":defined_value7510,
"is-user-exception":defined_value7511,
"user-break":defined_value7512,
"is-user-break":defined_value7513,
"equality-failure":defined_value7514,
"is-equality-failure":defined_value7515,
"invalid-array-index":defined_value7516,
"is-invalid-array-index":defined_value7517,
"module-load-failure":defined_value7518,
"is-module-load-failure":defined_value7519,
"uninitialized-id":defined_value7520,
"is-uninitialized-id":defined_value7521,
"non-function-app":defined_value7522,
"is-non-function-app":defined_value7523,
"arity-mismatch":defined_value7524,
"is-arity-mismatch":defined_value7525,
"constructor-arity-mismatch":defined_value7526,
"is-constructor-arity-mismatch":defined_value7527,
"cases-arity-mismatch":defined_value7528,
"is-cases-arity-mismatch":defined_value7529,
"cases-singleton-mismatch":defined_value7530,
"is-cases-singleton-mismatch":defined_value7531,
"numeric-binop-error":defined_value7532,
"is-numeric-binop-error":defined_value7533,
"num-string-binop-error":defined_value7534,
"is-num-string-binop-error":defined_value7535,
"generic-type-mismatch":defined_value7536,
"is-generic-type-mismatch":defined_value7537,
"non-boolean-op":defined_value7538,
"is-non-boolean-op":defined_value7539,
"non-boolean-condition":defined_value7540,
"is-non-boolean-condition":defined_value7541,
"extend-non-object":defined_value7542,
"is-extend-non-object":defined_value7543,
"lookup-non-object":defined_value7544,
"is-lookup-non-object":defined_value7545,
"bad-tuple-bind":defined_value7546,
"is-bad-tuple-bind":defined_value7547,
"non-tuple-bind":defined_value7548,
"is-non-tuple-bind":defined_value7549,
"lookup-large-index":defined_value7550,
"is-lookup-large-index":defined_value7551,
"lookup-non-tuple":defined_value7552,
"is-lookup-non-tuple":defined_value7553,
"lookup-constructor-not-object":defined_value7554,
"is-lookup-constructor-not-object":defined_value7555,
"field-not-found":defined_value7556,
"is-field-not-found":defined_value7557,
"template-not-finished":defined_value7558,
"is-template-not-finished":defined_value7559,
"internal-error":defined_value7560,
"is-internal-error":defined_value7561,
"no-branches-matched":defined_value7562,
"is-no-branches-matched":defined_value7563,
"no-cases-matched":defined_value7564,
"is-no-cases-matched":defined_value7565,
"update-non-existent-field":defined_value7566,
"is-update-non-existent-field":defined_value7567,
"update-non-ref":defined_value7568,
"is-update-non-ref":defined_value7569,
"update-frozen-ref":defined_value7570,
"is-update-frozen-ref":defined_value7571,
"update-non-obj":defined_value7572,
"is-update-non-obj":defined_value7573,
"message-exception":defined_value7574,
"is-message-exception":defined_value7575,
"sample-error":defined_value7576,
"is-sample-error":defined_value7577,
"multi-error":defined_value7578,
"is-multi-error":defined_value7579,
"is-RuntimeError":defined_value7580,
"please-report-bug":defined_value7581,
"ed-intro":defined_value7582,
"ed-simple-intro":defined_value7583,
"vert-list-values":defined_value7584,
"draw-and-highlight":defined_value7585,
"VS":VS9,
"O":O8},
"defined-types":{"ParseError":ParseError7477,
"O":O13,
"RuntimeError":RuntimeError7476,
"VS":VS14,
"ED":ED10},
"provide-plus-types":R.makeObject({"values":provides7478,
"types":{"RuntimeError":RuntimeError7476,
"ParseError":ParseError7477}}),
"checks":checks7480});
break;
case 4: ++R.GAS;
return $ans23;
default: throw "No case numbered " + $step20 + " in $toplevel21";
}
}
} catch($e7586) {
if(R.isCont($e7586) && ($step20 !== 4)) {
$e7586.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al24,$toplevel21,$step20,[],[RuntimeError7476,ParseError7477,draw$and$highlight38,vert$list$values62,ed$simple$intro95,ed$intro122,please$report$bug133,is$RuntimeError6488,is$multi$error6491,multi$error6494,is$sample$error6497,sample$error6500,is$message$exception6503,message$exception6506,is$update$non$obj6509,update$non$obj6512,is$update$frozen$ref6515,update$frozen$ref6518,is$update$non$ref6521,update$non$ref6524,is$update$non$existent$field6527,update$non$existent$field6530,is$no$cases$matched6533,no$cases$matched6536,is$no$branches$matched6539,no$branches$matched6542,is$internal$error6545,internal$error6548,is$template$not$finished6551,template$not$finished6554,is$field$not$found6557,field$not$found6560,is$lookup$constructor$not$object6563,lookup$constructor$not$object6566,is$lookup$non$tuple6569,lookup$non$tuple6572,is$lookup$large$index6575,lookup$large$index6578,is$non$tuple$bind6581,non$tuple$bind6584,is$bad$tuple$bind6587,bad$tuple$bind6590,is$lookup$non$object6593,lookup$non$object6596,is$extend$non$object6599,extend$non$object6602,is$non$boolean$condition6605,non$boolean$condition6608,is$non$boolean$op6611,non$boolean$op6614,is$generic$type$mismatch6617,generic$type$mismatch6620,is$num$string$binop$error6623,num$string$binop$error6626,is$numeric$binop$error6629,numeric$binop$error6632,is$cases$singleton$mismatch6635,cases$singleton$mismatch6638,is$cases$arity$mismatch6641,cases$arity$mismatch6644,is$constructor$arity$mismatch6647,constructor$arity$mismatch6650,is$arity$mismatch6653,arity$mismatch6656,is$non$function$app6659,non$function$app6662,is$uninitialized$id6665,uninitialized$id6668,is$module$load$failure6671,module$load$failure6674,is$invalid$array$index6677,invalid$array$index6680,is$equality$failure6683,equality$failure6686,is$user$break6689,user$break6692,is$user$exception6695,user$exception6698,is$ParseError7282,is$parse$error$next$token7285,parse$error$next$token7288,is$parse$error$eof7291,parse$error$eof7294,is$parse$error$unterminated$string7297,parse$error$unterminated$string7300,is$parse$error$bad$operator7303,parse$error$bad$operator7306,is$parse$error$bad$number7309,parse$error$bad$number7312,is$empty$block7315,empty$block7318,is$bad$block$stmt7321,bad$block$stmt7324,is$bad$check$block$stmt7327,bad$check$block$stmt7330,is$fun$missing$colon7333,fun$missing$colon7336,is$fun$missing$end7339,fun$missing$end7342,is$args$missing$comma7345,args$missing$comma7348,is$app$args$missing$comma7351,app$args$missing$comma7354,is$missing$end7357,missing$end7360,is$missing$comma7363,missing$comma7366,defined_value7481,defined_value7482,defined_value7483,defined_value7484,defined_value7485,defined_value7486,defined_value7487,defined_value7488,defined_value7489,defined_value7490,defined_value7491,defined_value7492,defined_value7493,defined_value7494,defined_value7495,defined_value7496,defined_value7497,defined_value7498,defined_value7499,defined_value7500,defined_value7501,defined_value7502,defined_value7503,defined_value7504,defined_value7505,defined_value7506,defined_value7507,defined_value7508,defined_value7509,defined_value7510,defined_value7511,defined_value7512,defined_value7513,defined_value7514,defined_value7515,defined_value7516,defined_value7517,defined_value7518,defined_value7519,defined_value7520,defined_value7521,defined_value7522,defined_value7523,defined_value7524,defined_value7525,defined_value7526,defined_value7527,defined_value7528,defined_value7529,defined_value7530,defined_value7531,defined_value7532,defined_value7533,defined_value7534,defined_value7535,defined_value7536,defined_value7537,defined_value7538,defined_value7539,defined_value7540,defined_value7541,defined_value7542,defined_value7543,defined_value7544,defined_value7545,defined_value7546,defined_value7547,defined_value7548,defined_value7549,defined_value7550,defined_value7551,defined_value7552,defined_value7553,defined_value7554,defined_value7555,defined_value7556,defined_value7557,defined_value7558,defined_value7559,defined_value7560,defined_value7561,defined_value7562,defined_value7563,defined_value7564,defined_value7565,defined_value7566,defined_value7567,defined_value7568,defined_value7569,defined_value7570,defined_value7571,defined_value7572,defined_value7573,defined_value7574,defined_value7575,defined_value7576,defined_value7577,defined_value7578,defined_value7579,defined_value7580,defined_value7581,defined_value7582,defined_value7583,defined_value7584,defined_value7585,answer7479,provides7478]);
}
if(R.isPyretException($e7586)) {
$e7586.pyretStack.push($al24);
}
throw $e7586;
}
};
return R.safeCall($toplevel21,function(moduleVal) {
R.modules["$builtin://error15"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://equality":({"requires":[{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"Equal":"tany",
"NotEqual":"tany",
"Unknown":"tany",
"equal-and":"tany",
"equal-or":"tany",
"is-Equal":"tany",
"is-EqualityResult":"tany",
"is-NotEqual":"tany",
"is-Unknown":"tany",
"to-boolean":"tany"},
"datatypes":{"atom#EqualityResult#1":["data","EqualityResult",[],[["Equal"],["NotEqual",
[["value2",
"tany"],["value1",
"tany"],["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["Unknown",
[["value2",
"tany"],["value1",
"tany"],["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}]},
"aliases":{"EqualityResult":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$error15,$$import16) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://equality";
var D = R.undefined;
var L = [[M,9,2,104,9,9,111],
[M,10,2,114,10,46,158],
[M,10,23,135,10,29,141],
[M,10,4,116,10,46,158],
[M,11,2,161,11,45,204],
[M,11,22,181,11,28,187],
[M,11,4,163,11,45,204],
[M,8,0,81,12,3,208],
[M,16,6,284,16,22,300],
[M,17,6,317,17,22,333],
[M,18,6,350,18,19,363],
[M,18,24,368,18,37,381],
[M,18,6,350,18,37,381],
[M,14,21,231,14,35,245],
[M,14,44,254,14,58,268],
[M,14,0,210,21,3,450],
[M,25,6,525,25,19,538],
[M,26,6,555,26,19,568],
[M,27,6,585,27,21,600],
[M,23,20,472,23,34,486],
[M,23,43,495,23,57,509],
[M,23,0,452,30,3,710],
[M,34,34,812,34,67,845],
[M,34,28,806,34,68,846],
[M,34,6,784,34,24,802],
[M,33,2,752,37,5,903],
[M,35,6,853,35,11,858],
[M,36,6,873,36,21,888],
[M,33,8,758,33,22,772],
[M,32,21,733,32,35,747],
[M,32,0,712,38,3,907],
["dummy location"],
[M,3,0,13,38,3,907]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var raise1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raise");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var error2 = R.getField($error15,"values");
var error9 = R.getField($error15,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$error15);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import16);
var $toplevel18 = function($$resumer101) {
var $step17 = 0;
var $ans21 = D;
var $al23 = L[32];
try {
if(R.isActivationRecord($$resumer101)) {
$step17 = $$resumer101.step;
$al23 = $$resumer101.from;
$ans21 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
EqualityResult81 = $$resumer101.vars[0];
is$EqualityResult52 = $$resumer101.vars[1];
is$Equal53 = $$resumer101.vars[2];
Equal54 = $$resumer101.vars[3];
is$NotEqual55 = $$resumer101.vars[4];
NotEqual56 = $$resumer101.vars[5];
is$Unknown57 = $$resumer101.vars[6];
Unknown58 = $$resumer101.vars[7];
equal$and86 = $$resumer101.vars[8];
equal$or105 = $$resumer101.vars[9];
to$boolean125 = $$resumer101.vars[10];
defined_value143 = $$resumer101.vars[11];
defined_value144 = $$resumer101.vars[12];
defined_value145 = $$resumer101.vars[13];
defined_value146 = $$resumer101.vars[14];
defined_value147 = $$resumer101.vars[15];
defined_value148 = $$resumer101.vars[16];
defined_value149 = $$resumer101.vars[17];
defined_value150 = $$resumer101.vars[18];
defined_value151 = $$resumer101.vars[19];
defined_value152 = $$resumer101.vars[20];
answer141 = $$resumer101.vars[21];
provides140 = $$resumer101.vars[22];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step17) {
case 0: var EqualityResult24 = R.namedBrander("EqualityResult",L[7]);
var EqualityResult81 = R.makeBranderAnn(EqualityResult24,"EqualityResult");
var EqualityResult51 = {"$var":D};
var is$EqualityResult52 = {"$var":D};
var is$Equal53 = {"$var":D};
var Equal54 = {"$var":D};
var is$NotEqual55 = {"$var":D};
var NotEqual56 = {"$var":D};
var is$Unknown57 = {"$var":D};
var Unknown58 = {"$var":D};
var equal$and86 = {"$var":D};
var equal$or105 = {"$var":D};
var to$boolean125 = {"$var":D};
var $Equal_getfields30 = function(f) {
return f();
};
var $Equal_getfieldsref28 = function(f) {
return f();
};
var $Equal_mutablemask29 = [];
var $Equal$base25 = {"_match":R.makeMatch("Equal",0)};
var $Equal$brander26 = R.namedBrander("Equal",L[0]);
var $Equal$brands27 = {};
$Equal$brands27[EqualityResult24._brand] = true;
$Equal$brands27[$Equal$brander26._brand] = true;
var $NotEqual_getfields36 = function(f) {
return f(this.dict["reason"],this.dict["value1"],this.dict["value2"]);
};
var $NotEqual_getfieldsref34 = function(f,refmask) {
return f(R.derefField(this.dict["reason"],false,refmask[0]),R.derefField(this.dict["value1"],false,refmask[1]),R.derefField(this.dict["value2"],false,refmask[2]));
};
var $NotEqual_mutablemask35 = [false,false,false];
var $NotEqual$base31 = {"$fieldNames":["reason","value1","value2"],
"_match":R.makeMatch("NotEqual",3)};
var $NotEqual$brander32 = R.namedBrander("NotEqual",L[1]);
var $NotEqual$brands33 = {};
$NotEqual$brands33[EqualityResult24._brand] = true;
$NotEqual$brands33[$NotEqual$brander32._brand] = true;
var NotEqual37 = R.makeVariantConstructor(L[3],function() {
return [$type$String7];
},["reason38"],[L[2]],[false,false,false],["reason38","value139","value240"],$NotEqual_mutablemask35,$NotEqual$base31,$NotEqual$brands33,"NotEqual",$NotEqual_getfieldsref34,$NotEqual_getfields36,$NotEqual$base31);
var $Unknown_getfields46 = function(f) {
return f(this.dict["reason"],this.dict["value1"],this.dict["value2"]);
};
var $Unknown_getfieldsref44 = function(f,refmask) {
return f(R.derefField(this.dict["reason"],false,refmask[0]),R.derefField(this.dict["value1"],false,refmask[1]),R.derefField(this.dict["value2"],false,refmask[2]));
};
var $Unknown_mutablemask45 = [false,false,false];
var $Unknown$base41 = {"$fieldNames":["reason","value1","value2"],
"_match":R.makeMatch("Unknown",3)};
var $Unknown$brander42 = R.namedBrander("Unknown",L[4]);
var $Unknown$brands43 = {};
$Unknown$brands43[EqualityResult24._brand] = true;
$Unknown$brands43[$Unknown$brander42._brand] = true;
var Unknown47 = R.makeVariantConstructor(L[6],function() {
return [$type$String7];
},["reason48"],[L[5]],[false,false,false],["reason48","value149","value250"],$Unknown_mutablemask45,$Unknown$base41,$Unknown$brands43,"Unknown",$Unknown_getfieldsref44,$Unknown_getfields46,$Unknown$base41);
var anf_assign71 = R.makeObject({"EqualityResult":G(EqualityResult24,"test",L[7]),
"is-Equal":G($Equal$brander26,"test",L[0]),
"Equal":R.makeDataValue($Equal$base25,$Equal$brands27,"Equal",$Equal_getfieldsref28,$Equal_getfields30,-1,$Equal_mutablemask29,$Equal$base25),
"is-NotEqual":G($NotEqual$brander32,"test",L[1]),
"NotEqual":NotEqual37,
"is-Unknown":G($Unknown$brander42,"test",L[4]),
"Unknown":Unknown47});
EqualityResult51.$var = anf_assign71;
var anf_bracket73 = EqualityResult51.$var;
$al23 = L[7];
var anf_assign74 = G(anf_bracket73,"EqualityResult",L[7]);
is$EqualityResult52.$var = anf_assign74;
var anf_bracket76 = EqualityResult51.$var;
$al23 = L[0];
var anf_assign77 = G(anf_bracket76,"is-Equal",L[0]);
is$Equal53.$var = anf_assign77;
var anf_bracket79 = EqualityResult51.$var;
$al23 = L[0];
var anf_assign80 = G(anf_bracket79,"Equal",L[0]);
Equal54.$var = anf_assign80;
var anf_bracket82 = EqualityResult51.$var;
$al23 = L[1];
var anf_assign83 = G(anf_bracket82,"is-NotEqual",L[1]);
is$NotEqual55.$var = anf_assign83;
var anf_bracket83 = EqualityResult51.$var;
$al23 = L[1];
var anf_assign84 = G(anf_bracket83,"NotEqual",L[1]);
NotEqual56.$var = anf_assign84;
var anf_bracket86 = EqualityResult51.$var;
$al23 = L[4];
var anf_assign87 = G(anf_bracket86,"is-Unknown",L[4]);
is$Unknown57.$var = anf_assign87;
var anf_bracket89 = EqualityResult51.$var;
$al23 = L[4];
var anf_assign90 = G(anf_bracket89,"Unknown",L[4]);
Unknown58.$var = anf_assign90;
var $temp_lam60 = function($er161,$er262) {
var $step59 = 0;
var $ans63 = D;
var $al64 = L[15];
try {
if(R.isActivationRecord($er161)) {
$step59 = $er161.step;
$al64 = $er161.from;
$ans63 = $er161.ans;
er161 = $er161.args[0];
er262 = $er161.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[15],2,$t);
}
var er161 = $er161;
var er262 = $er262;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step59) {
case 0: $step59 = 1;
$al64 = L[13];
R._checkAnn(L[13],EqualityResult81,er161);
break;
case 1: $step59 = 2;
$al64 = L[14];
R._checkAnn(L[14],EqualityResult81,er262);
break;
case 2: var anf_fun65 = is$NotEqual55.$var;
$step59 = 3;
$al64 = L[8];
if(!(R.isFunction(anf_fun65))) {
R.ffi.throwNonFunApp($al64,anf_fun65);
}
$ans63 = anf_fun65.app(er161);
break;
case 3: var anf_arg66 = $ans63;
$al64 = L[8];
var anf_if80 = R.checkWrapBoolean(anf_arg66);
$step59 = R.isPyretTrue(anf_if80)?4:5;
break;
case 4: $step59 = 16;
$ans63 = er161;
break;
case 5: var anf_fun67 = is$NotEqual55.$var;
$step59 = 6;
$al64 = L[9];
if(!(R.isFunction(anf_fun67))) {
R.ffi.throwNonFunApp($al64,anf_fun67);
}
$ans63 = anf_fun67.app(er262);
break;
case 6: var anf_arg68 = $ans63;
$al64 = L[9];
var anf_if79 = R.checkWrapBoolean(anf_arg68);
$step59 = R.isPyretTrue(anf_if79)?7:8;
break;
case 7: $step59 = 16;
$ans63 = er262;
break;
case 8: var anf_fun69 = is$Equal53.$var;
$step59 = 9;
$al64 = L[10];
if(!(R.isFunction(anf_fun69))) {
R.ffi.throwNonFunApp($al64,anf_fun69);
}
$ans63 = anf_fun69.app(er161);
break;
case 9: var anf_arg73 = $ans63;
$al64 = L[10];
var anf_if78 = R.checkWrapBoolean(anf_arg73);
$step59 = R.isPyretTrue(anf_if78)?10:12;
break;
case 10: var anf_fun74 = is$Equal53.$var;
$step59 = 11;
$al64 = L[11];
if(!(R.isFunction(anf_fun74))) {
R.ffi.throwNonFunApp($al64,anf_fun74);
}
$ans63 = anf_fun74.app(er262);
break;
case 11: var anf_arg75 = $ans63;
$step59 = 13;
$al64 = L[11];
$ans63 = R.checkWrapBoolean(anf_arg75);
break;
case 12: $step59 = 13;
$ans63 = (false);
break;
case 13: var anf_arg76 = $ans63;
$al64 = L[12];
var anf_if77 = R.checkWrapBoolean(anf_arg76);
$step59 = R.isPyretTrue(anf_if77)?14:15;
break;
case 14: $step59 = 16;
$ans63 = Equal54.$var;
break;
case 15: $step59 = 16;
$ans63 = er161;
break;
case 16: ++R.GAS;
return $ans63;
default: throw "No case numbered " + $step59 + " in $temp_lam60";
}
}
} catch($e82) {
if(R.isCont($e82) && ($step59 !== 16)) {
$e82.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al64,$temp_lam60,$step59,[er161,er262],[]);
}
if(R.isPyretException($e82)) {
$e82.pyretStack.push($al64);
}
throw $e82;
}
};
var anf_assign85 = R.makeFunction($temp_lam60,"equal-and");
equal$and86.$var = anf_assign85;
var $temp_lam88 = function($er189,$er290) {
var $step87 = 0;
var $ans91 = D;
var $al92 = L[21];
try {
if(R.isActivationRecord($er189)) {
$step87 = $er189.step;
$al92 = $er189.from;
$ans91 = $er189.ans;
er189 = $er189.args[0];
er290 = $er189.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],2,$t);
}
var er189 = $er189;
var er290 = $er290;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step87) {
case 0: $step87 = 1;
$al92 = L[19];
R._checkAnn(L[19],EqualityResult81,er189);
break;
case 1: $step87 = 2;
$al92 = L[20];
R._checkAnn(L[20],EqualityResult81,er290);
break;
case 2: var anf_fun93 = is$Equal53.$var;
$step87 = 3;
$al92 = L[16];
if(!(R.isFunction(anf_fun93))) {
R.ffi.throwNonFunApp($al92,anf_fun93);
}
$ans91 = anf_fun93.app(er189);
break;
case 3: var anf_arg94 = $ans91;
$al92 = L[16];
var anf_if101 = R.checkWrapBoolean(anf_arg94);
$step87 = R.isPyretTrue(anf_if101)?4:5;
break;
case 4: $step87 = 12;
$ans91 = er189;
break;
case 5: var anf_fun95 = is$Equal53.$var;
$step87 = 6;
$al92 = L[17];
if(!(R.isFunction(anf_fun95))) {
R.ffi.throwNonFunApp($al92,anf_fun95);
}
$ans91 = anf_fun95.app(er290);
break;
case 6: var anf_arg96 = $ans91;
$al92 = L[17];
var anf_if100 = R.checkWrapBoolean(anf_arg96);
$step87 = R.isPyretTrue(anf_if100)?7:8;
break;
case 7: $step87 = 12;
$ans91 = er290;
break;
case 8: var anf_fun97 = is$Unknown57.$var;
$step87 = 9;
$al92 = L[18];
if(!(R.isFunction(anf_fun97))) {
R.ffi.throwNonFunApp($al92,anf_fun97);
}
$ans91 = anf_fun97.app(er189);
break;
case 9: var anf_arg98 = $ans91;
$al92 = L[18];
var anf_if99 = R.checkWrapBoolean(anf_arg98);
$step87 = R.isPyretTrue(anf_if99)?10:11;
break;
case 10: $step87 = 12;
$ans91 = er189;
break;
case 11: $step87 = 12;
$ans91 = er290;
break;
case 12: ++R.GAS;
return $ans91;
default: throw "No case numbered " + $step87 + " in $temp_lam88";
}
}
} catch($e103) {
if(R.isCont($e103) && ($step87 !== 12)) {
$e103.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al92,$temp_lam88,$step87,[er189,er290],[]);
}
if(R.isPyretException($e103)) {
$e103.pyretStack.push($al92);
}
throw $e103;
}
};
var anf_assign104 = R.makeFunction($temp_lam88,"equal-or");
equal$or105.$var = anf_assign104;
var $temp_lam107 = function($er108) {
var $step106 = 0;
var $ans109 = D;
var $al110 = L[30];
try {
if(R.isActivationRecord($er108)) {
$step106 = $er108.step;
$al110 = $er108.from;
$ans109 = $er108.ans;
er108 = $er108.args[0];
cases111 = $er108.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],1,$t);
}
var er108 = $er108;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step106) {
case 0: $step106 = 1;
$al110 = L[29];
R._checkAnn(L[29],EqualityResult81,er108);
break;
case 1: var cases111 = er108;
$step106 = 2;
$al110 = L[28];
R._checkAnn(L[28],EqualityResult81,cases111);
break;
case 2: var $cases_dispatch122 = {"Unknown":3,
"Equal":5,
"NotEqual":6};
$al110 = L[25];
$step106 = $cases_dispatch122[cases111.$name] || 7;
break;
case 3: if(cases111.$arity !== 3) {
if(cases111.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[24],3,cases111.$arity,L[25]);
} else {
R.ffi.throwCasesSingletonErrorC(L[24],true,L[25]);
}
}
var $fn187 = cases111.$constructor.$fieldNames;
var r112 = R.derefField(cases111.dict[$fn187[0]],cases111.$mut_fields_mask[0],false);
var v1113 = R.derefField(cases111.dict[$fn187[1]],cases111.$mut_fields_mask[1],false);
var v2114 = R.derefField(cases111.dict[$fn187[2]],cases111.$mut_fields_mask[2],false);
$step106 = 4;
$al110 = L[22];
$field115 = R.getColonFieldLoc(error2,"equality-failure",L[22]);
if(R.isMethod($field115)) {
$ans109 = $field115.full_meth(error2,r112,v1113,v2114);
} else {
if(!(R.isFunction($field115))) {
R.ffi.throwNonFunApp(L[22],$field115);
}
$ans109 = $field115.app(r112,v1113,v2114);
}
break;
case 4: var anf_arg118 = $ans109;
$step106 = 8;
$al110 = L[23];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al110,raise1);
}
$ans109 = raise1.app(anf_arg118);
break;
case 5: if(cases111.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[26],false,L[25]);
}
$step106 = 8;
$ans109 = (true);
break;
case 6: if(cases111.$arity !== 3) {
if(cases111.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[27],3,cases111.$arity,L[25]);
} else {
R.ffi.throwCasesSingletonErrorC(L[27],true,L[25]);
}
}
var $fn187 = cases111.$constructor.$fieldNames;
R.derefField(cases111.dict[$fn187[0]],cases111.$mut_fields_mask[0],false);
R.derefField(cases111.dict[$fn187[1]],cases111.$mut_fields_mask[1],false);
R.derefField(cases111.dict[$fn187[2]],cases111.$mut_fields_mask[2],false);
$step106 = 8;
$ans109 = (false);
break;
case 7: $step106 = 8;
$al110 = L[25];
$ans109 = R.throwNoCasesMatched(L[25],cases111);
break;
case 8: ++R.GAS;
return $ans109;
default: throw "No case numbered " + $step106 + " in $temp_lam107";
}
}
} catch($e123) {
if(R.isCont($e123) && ($step106 !== 8)) {
$e123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al110,$temp_lam107,$step106,[er108],[cases111]);
}
if(R.isPyretException($e123)) {
$e123.pyretStack.push($al110);
}
throw $e123;
}
};
var anf_assign124 = R.makeFunction($temp_lam107,"to-boolean");
to$boolean125.$var = anf_assign124;
var defined_value143 = to$boolean125.$var;
var defined_value144 = equal$or105.$var;
var defined_value145 = equal$and86.$var;
var defined_value146 = Unknown58.$var;
var defined_value147 = is$Unknown57.$var;
var defined_value148 = NotEqual56.$var;
var defined_value149 = is$NotEqual55.$var;
var defined_value150 = Equal54.$var;
var defined_value151 = is$Equal53.$var;
var defined_value152 = is$EqualityResult52.$var;
$step17 = 1;
$al23 = L[31];
$field126 = R.getColonFieldLoc(builtins1,"trace-value",L[31]);
if(R.isMethod($field126)) {
$ans21 = $field126.full_meth(builtins1,L[31],nothing2);
} else {
if(!(R.isFunction($field126))) {
R.ffi.throwNonFunApp(L[31],$field126);
}
$ans21 = $field126.app(L[31],nothing2);
}
break;
case 1: var answer141 = $ans21;
var anf_obj127 = is$EqualityResult52.$var;
var anf_obj128 = Equal54.$var;
var anf_obj129 = is$Equal53.$var;
var anf_obj130 = NotEqual56.$var;
var anf_obj131 = is$NotEqual55.$var;
var anf_obj132 = Unknown58.$var;
var anf_obj133 = is$Unknown57.$var;
var anf_obj134 = equal$and86.$var;
var anf_obj135 = equal$or105.$var;
var anf_obj136 = to$boolean125.$var;
var provides140 = R.makeObject({"is-EqualityResult":anf_obj127,
"Equal":anf_obj128,
"is-Equal":anf_obj129,
"NotEqual":anf_obj130,
"is-NotEqual":anf_obj131,
"Unknown":anf_obj132,
"is-Unknown":anf_obj133,
"equal-and":anf_obj134,
"equal-or":anf_obj135,
"to-boolean":anf_obj136});
$step17 = 2;
$al23 = L[7];
$field137 = R.getColonFieldLoc(builtins1,"current-checker",L[7]);
if(R.isMethod($field137)) {
$ans21 = $field137.full_meth(builtins1);
} else {
if(!(R.isFunction($field137))) {
R.ffi.throwNonFunApp(L[7],$field137);
}
$ans21 = $field137.app();
}
break;
case 2: var anf_method_obj138 = $ans21;
$step17 = 3;
$al23 = L[7];
$field139 = R.getColonFieldLoc(anf_method_obj138,"results",L[7]);
if(R.isMethod($field139)) {
$ans21 = $field139.full_meth(anf_method_obj138);
} else {
if(!(R.isFunction($field139))) {
R.ffi.throwNonFunApp(L[7],$field139);
}
$ans21 = $field139.app();
}
break;
case 3: var checks142 = $ans21;
$step17 = 4;
$ans21 = R.makeObject({"answer":answer141,
"namespace":NAMESPACE,
"defined-values":{"to-boolean":defined_value143,
"equal-or":defined_value144,
"equal-and":defined_value145,
"Unknown":defined_value146,
"is-Unknown":defined_value147,
"NotEqual":defined_value148,
"is-NotEqual":defined_value149,
"Equal":defined_value150,
"is-Equal":defined_value151,
"is-EqualityResult":defined_value152,
"error":error2},
"defined-types":{"EqualityResult":EqualityResult81,
"error":error9},
"provide-plus-types":R.makeObject({"values":provides140,
"types":{"EqualityResult":EqualityResult81}}),
"checks":checks142});
break;
case 4: ++R.GAS;
return $ans21;
default: throw "No case numbered " + $step17 + " in $toplevel18";
}
}
} catch($e154) {
if(R.isCont($e154) && ($step17 !== 4)) {
$e154.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al23,$toplevel18,$step17,[],[EqualityResult81,is$EqualityResult52,is$Equal53,Equal54,is$NotEqual55,NotEqual56,is$Unknown57,Unknown58,equal$and86,equal$or105,to$boolean125,defined_value143,defined_value144,defined_value145,defined_value146,defined_value147,defined_value148,defined_value149,defined_value150,defined_value151,defined_value152,answer141,provides140]);
}
if(R.isPyretException($e154)) {
$e154.pyretStack.push($al23);
}
throw $e154;
}
};
return R.safeCall($toplevel18,function(moduleVal) {
R.modules["$builtin://equality14"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://lists":({"requires":[{"import-type":"builtin",
"name":"either"},
{"import-type":"builtin",
"name":"equality"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{"all":"tany",
"all2":"tany",
"any":"tany",
"append":"tany",
"distinct":"tany",
"drop":"tany",
"each":"tany",
"each2":"tany",
"each2_n":"tany",
"each3":"tany",
"each3_n":"tany",
"each4":"tany",
"each4_n":"tany",
"each_n":"tany",
"empty":"tany",
"filter":"tany",
"filter-map":"tany",
"filter-values":"tany",
"find":"tany",
"fold":"tany",
"fold-while":"tany",
"fold2":"tany",
"fold3":"tany",
"fold4":"tany",
"fold_n":"tany",
"foldl":"tany",
"foldr":"tany",
"get":"tany",
"is-List":"tany",
"is-empty":"tany",
"is-link":"tany",
"is-none":"tany",
"is-some":"tany",
"join-str":"tany",
"last":"tany",
"left":"tany",
"length":"tany",
"link":"tany",
"list":"tany",
"map":"tany",
"map2":"tany",
"map2_n":"tany",
"map3":"tany",
"map3_n":"tany",
"map4":"tany",
"map4_n":"tany",
"map_n":"tany",
"member":"tany",
"member-always":"tany",
"member-always3":"tany",
"member-identical":"tany",
"member-identical3":"tany",
"member-now":"tany",
"member-now3":"tany",
"member-with":"tany",
"member3":"tany",
"none":"tany",
"partition":"tany",
"push":"tany",
"range":"tany",
"range-by":"tany",
"remove":"tany",
"repeat":"tany",
"reverse":"tany",
"reverse-help":"tany",
"right":"tany",
"set":"tany",
"shuffle":"tany",
"some":"tany",
"sort":"tany",
"sort-by":"tany",
"split-at":"tany",
"take":"tany"},
"datatypes":{"atom#List#1":["data","List",["a"],[["empty"],["link",
[["rest",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],["first",
["tid",
"a"]]]]],{"sort":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"sort-by":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"],
["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
["arrow",
[["tid",
"a"],
["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"_torepr":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],
"_tostring":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],
"reverse":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"last":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
["tid",
"a"]],
"append":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"any":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"all":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"foldl":["forall",
["b"],
["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"],
["tid",
"b"]],
["tid",
"b"]],
["tid",
"b"]],
["tid",
"b"]]],
"foldr":["forall",
["b"],
["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"],
["tid",
"b"]],
["tid",
"b"]],
["tid",
"b"]],
["tid",
"b"]]],
"member":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"find":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://option"},
"name":"Option"},[["tid",
"a"]]]],
"partition":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]],
["record",{"is-false":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
"is-true":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]}]],
"filter":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"map":["forall",
["b"],
["arrow",
["tany",
["arrow",
[["tid",
"a"]],
["tid",
"b"]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"b"]]]]],
"each":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["arrow",
[["tid",
"a"]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Nothing"}]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Nothing"}],
"length":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
"join-str":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],
"remove":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["tid",
"a"]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"set":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
["tid",
"a"]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"get":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
["tid",
"a"]],
"drop":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"take":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"split-at":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
["record",{"suffix":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
"prefix":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]}]],
"push":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["tid",
"a"]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"_plus":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
"_output":["arrow",
[["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[["tid",
"a"]]]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://valueskeleton"},
"name":"ValueSkeleton"}]}]},
"aliases":{"Either":"tany",
"List":"tany",
"Option":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$E29,$equality30,$$import31,$O18,$VS19) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://lists";
var D = R.undefined;
var L = [[M,11,7,167,11,13,173],
[M,12,10,184,12,19,193],
[M,13,7,201,13,13,207],
[M,14,10,218,14,19,227],
[M,17,7,259,17,13,265],
[M,18,8,274,18,15,281],
[M,259,89,10011,259,100,10022],
[M,259,80,10002,259,101,10023],
[M,259,55,9977,259,102,10024],
[M,259,37,9959,259,53,9975],
[M,259,25,9947,259,32,9954],
[M,259,2,9924,259,106,10028],
[M,262,4,10099,262,22,10117],
[M,261,53,10086,261,60,10093],
[M,261,23,10056,261,30,10063],
[M,261,41,10074,261,48,10081],
[M,261,2,10035,263,5,10123],
[M,267,4,10257,267,8,10261],
[M,265,44,10170,265,51,10177],
[M,267,4,10257,267,19,10272],
[M,265,22,10148,265,29,10155],
[M,265,38,10164,265,39,10165],
[M,265,2,10128,268,5,10278],
[M,271,4,10492,271,12,10500],
[M,269,53,10333,269,70,10350],
[M,269,72,10352,269,89,10369],
[M,269,51,10331,269,91,10371],
[M,271,4,10492,271,21,10509],
[M,269,26,10306,269,33,10313],
[M,269,40,10320,269,46,10326],
[M,269,2,10282,272,5,10515],
[M,275,4,10630,275,12,10638],
[M,275,4,10630,275,28,10654],
[M,273,47,10564,273,54,10571],
[M,275,4,10630,275,21,10647],
[M,273,22,10539,273,29,10546],
[M,273,36,10553,273,42,10559],
[M,273,2,10519,276,5,10660],
[M,279,4,10783,279,12,10791],
[M,279,4,10783,279,28,10807],
[M,277,47,10709,277,54,10716],
[M,279,4,10783,279,21,10800],
[M,277,22,10684,277,29,10691],
[M,277,36,10698,277,42,10704],
[M,277,2,10664,280,5,10813],
[M,284,4,10958,284,7,10961],
[M,282,46,10862,282,47,10863],
[M,284,4,10958,284,16,10970],
[M,282,21,10837,282,28,10844],
[M,282,35,10851,282,41,10857],
[M,282,2,10818,285,5,10976],
[M,288,4,11160,288,7,11163],
[M,286,54,11032,286,61,11039],
[M,288,4,11160,288,19,11175],
[M,286,21,10999,286,28,11006],
[M,286,35,11013,286,41,11019],
[M,286,48,11026,286,49,11027],
[M,286,2,10980,289,5,11181],
[M,292,4,11329,292,10,11335],
[M,290,44,11227,290,51,11234],
[M,292,4,11329,292,19,11344],
[M,290,24,11207,290,31,11214],
[M,290,38,11221,290,39,11222],
[M,290,2,11185,293,5,11350],
[M,24,38,375,24,44,381],
[M,24,26,363,24,33,370],
[M,24,4,341,27,7,480],
[M,29,57,540,29,64,547],
[M,29,24,507,29,31,514],
[M,29,38,521,29,52,535],
[M,29,4,487,32,7,670],
[M,36,6,846,36,11,851],
[M,34,42,715,34,49,722],
[M,34,29,702,34,37,710],
[M,34,4,677,37,7,859],
[M,41,6,1058,41,11,1063],
[M,39,59,921,39,66,928],
[M,39,26,888,39,33,895],
[M,39,40,902,39,54,916],
[M,39,4,866,42,7,1071],
[M,44,57,1131,44,65,1139],
[M,44,57,1131,44,68,1142],
[M,44,24,1098,44,31,1105],
[M,44,38,1112,44,52,1126],
[M,44,4,1078,47,7,1296],
[M,53,17,1705,53,22,1710],
[M,53,34,1722,53,39,1727],
[M,49,63,1362,49,81,1380],
[M,49,83,1382,49,102,1401],
[M,49,62,1361,49,103,1402],
[M,49,29,1328,49,36,1335],
[M,49,43,1342,49,57,1356],
[M,49,4,1303,54,7,1737],
[M,56,69,1809,56,70,1810],
[M,56,28,1768,56,35,1775],
[M,56,42,1782,56,53,1793],
[M,56,63,1803,56,64,1804],
[M,56,4,1744,60,7,1981],
[M,62,69,2053,62,70,2054],
[M,62,28,2012,62,35,2019],
[M,62,42,2026,62,53,2037],
[M,62,63,2047,62,64,2048],
[M,62,4,1988,66,7,2224],
[M,68,56,2283,68,63,2290],
[M,68,23,2250,68,30,2257],
[M,68,37,2264,68,51,2278],
[M,68,4,2231,71,7,2402],
[M,73,56,2461,73,63,2468],
[M,73,23,2428,73,30,2435],
[M,73,37,2442,73,51,2456],
[M,73,4,2409,76,7,2579],
[M,78,48,2630,78,55,2637],
[M,78,26,2608,78,33,2615],
[M,78,42,2624,78,43,2625],
[M,78,4,2586,81,7,2741],
[M,83,56,2800,83,63,2807],
[M,83,26,2770,83,33,2777],
[M,83,44,2788,83,51,2795],
[M,83,4,2748,86,7,2918],
[M,88,36,2957,88,37,2958],
[M,90,6,3058,90,44,3096],
[M,88,24,2945,88,31,2952],
[M,88,4,2925,91,7,3104],
[M,93,39,3146,93,46,3153],
[M,93,27,3134,93,34,3141],
[M,93,4,3111,96,7,3265],
[M,98,77,3345,98,83,3351],
[M,98,29,3297,98,36,3304],
[M,98,57,3325,98,72,3340],
[M,98,4,3272,98,99,3367],
[M,100,73,3443,100,79,3449],
[M,100,27,3397,100,34,3404],
[M,100,53,3423,100,68,3438],
[M,100,4,3374,100,95,3465],
[M,102,90,3558,102,97,3565],
[M,102,27,3495,102,34,3502],
[M,102,43,3511,102,60,3528],
[M,102,68,3536,102,85,3553],
[M,102,4,3472,107,7,3848],
[M,109,36,3887,109,43,3894],
[M,109,24,3875,109,31,3882],
[M,109,4,3855,113,7,4057],
[M,115,55,4115,115,61,4121],
[M,115,28,4088,115,35,4095],
[M,115,44,4104,115,50,4110],
[M,115,4,4064,119,7,4287],
[M,125,10,4472,125,19,4481],
[M,125,10,4472,125,28,4490],
[M,123,38,4372,123,44,4378],
[M,125,6,4468,125,28,4490],
[M,123,26,4360,123,33,4367],
[M,123,4,4338,126,7,4498],
[M,130,6,4673,130,10,4677],
[M,128,57,4558,128,64,4565],
[M,130,6,4673,130,19,4686],
[M,128,24,4525,128,31,4532],
[M,128,38,4539,128,52,4553],
[M,128,4,4505,131,7,4694],
[M,135,6,4870,135,9,4873],
[M,133,42,4739,133,49,4746],
[M,135,6,4870,135,18,4882],
[M,133,29,4726,133,37,4734],
[M,133,4,4701,136,7,4890],
[M,140,11,5094,140,21,5104],
[M,140,9,5092,140,22,5105],
[M,140,24,5107,140,34,5117],
[M,140,37,5120,140,41,5124],
[M,140,45,5128,140,54,5137],
[M,140,45,5128,140,64,5147],
[M,140,37,5120,140,65,5148],
[M,141,24,5173,141,33,5182],
[M,141,24,5173,141,43,5192],
[M,138,59,4952,138,66,4959],
[M,138,26,4919,138,33,4926],
[M,138,40,4933,138,54,4947],
[M,138,4,4897,143,7,5210],
[M,149,6,5608,149,15,5617],
[M,145,63,5276,145,81,5294],
[M,145,83,5296,145,102,5315],
[M,145,62,5275,145,103,5316],
[M,149,6,5608,149,24,5626],
[M,145,29,5242,145,36,5249],
[M,145,43,5256,145,57,5270],
[M,145,4,5217,150,7,5634],
[M,154,6,5847,154,10,5851],
[M,152,57,5694,152,65,5702],
[M,152,57,5694,152,68,5705],
[M,154,6,5847,154,19,5860],
[M,152,24,5661,152,31,5668],
[M,152,38,5675,152,52,5689],
[M,152,4,5641,155,7,5868],
[M,159,14,6025,159,24,6035],
[M,159,6,6017,159,25,6036],
[M,159,29,6040,159,38,6049],
[M,159,29,6040,159,50,6061],
[M,157,48,5919,157,55,5926],
[M,159,7,6018,159,24,6035],
[M,157,26,5897,157,33,5904],
[M,157,42,5913,157,43,5914],
[M,157,4,5875,160,7,6069],
[M,165,8,6306,165,18,6316],
[M,165,20,6318,165,29,6327],
[M,165,20,6318,165,44,6342],
[M,162,69,6141,162,70,6142],
[M,165,6,6304,165,45,6343],
[M,162,28,6100,162,35,6107],
[M,162,42,6114,162,53,6125],
[M,162,63,6135,162,64,6136],
[M,162,4,6076,166,7,6351],
[M,171,6,6585,171,15,6594],
[M,171,27,6606,171,37,6616],
[M,171,6,6585,171,45,6624],
[M,168,69,6423,168,70,6424],
[M,171,25,6604,171,44,6623],
[M,168,28,6382,168,35,6389],
[M,168,42,6396,168,53,6407],
[M,168,63,6417,168,64,6418],
[M,168,4,6358,172,7,6632],
[M,176,8,6800,176,18,6810],
[M,176,6,6798,176,19,6811],
[M,176,24,6816,176,33,6825],
[M,176,24,6816,176,40,6832],
[M,174,56,6691,174,63,6698],
[M,174,23,6658,174,30,6665],
[M,174,37,6672,174,51,6686],
[M,174,4,6639,177,7,6840],
[M,181,8,7006,181,18,7016],
[M,181,6,7004,181,19,7017],
[M,181,23,7021,181,32,7030],
[M,181,23,7021,181,39,7037],
[M,179,56,6899,179,63,6906],
[M,179,23,6866,179,30,6873],
[M,179,37,6880,179,51,6894],
[M,179,4,6847,182,7,7045],
[M,186,6,7209,186,16,7219],
[M,186,19,7222,186,23,7226],
[M,186,27,7230,186,36,7239],
[M,186,27,7230,186,50,7253],
[M,184,56,7104,184,63,7111],
[M,186,19,7222,186,51,7254],
[M,184,26,7074,184,33,7081],
[M,184,44,7092,184,51,7099],
[M,184,4,7052,187,7,7262],
[M,191,9,7405,191,17,7413],
[M,191,18,7414,191,27,7423],
[M,191,9,7405,191,28,7424],
[M,191,30,7426,191,40,7436],
[M,192,12,7449,192,21,7458],
[M,192,12,7449,192,28,7465],
[M,189,36,7301,189,37,7302],
[M,189,24,7289,189,31,7296],
[M,189,4,7269,194,7,7483],
[M,198,6,7632,198,18,7644],
[M,198,25,7651,198,30,7656],
[M,196,39,7525,196,46,7532],
[M,198,6,7632,198,31,7657],
[M,196,27,7513,196,34,7520],
[M,196,4,7490,199,7,7665],
[M,203,12,7783,203,16,7787],
[M,204,10,7855,204,41,7886],
[M,204,28,7873,204,41,7886],
[M,204,10,7855,204,25,7870],
[M,203,8,7779,205,11,7898],
[M,203,40,7811,203,50,7821],
[M,203,62,7833,203,71,7842],
[M,201,77,7745,201,83,7751],
[M,202,6,7759,206,11,7910],
[M,202,6,7759,205,11,7898],
[M,203,31,7802,203,51,7822],
[M,201,29,7697,201,36,7704],
[M,201,57,7725,201,72,7740],
[M,201,4,7672,207,7,7918],
[M,211,12,8032,211,16,8036],
[M,212,10,8102,212,39,8131],
[M,212,28,8120,212,39,8131],
[M,212,10,8102,212,25,8117],
[M,211,8,8028,213,11,8143],
[M,211,38,8058,211,48,8068],
[M,211,60,8080,211,69,8089],
[M,209,73,7994,209,79,8000],
[M,210,6,8008,214,11,8155],
[M,210,6,8008,213,11,8143],
[M,211,31,8051,211,49,8069],
[M,209,27,7948,209,34,7955],
[M,209,53,7974,209,68,7989],
[M,209,4,7925,215,7,8163],
[M,221,14,8548,221,24,8558],
[M,227,19,8848,227,24,8853],
[M,228,19,8873,228,24,8878],
[M,229,19,8898,229,24,8903],
[M,231,13,8941,231,26,8954],
[M,231,46,8974,231,50,8978],
[M,231,46,8974,231,61,8989],
[M,232,18,9008,232,30,9020],
[M,232,46,9036,232,50,9040],
[M,232,46,9036,232,61,9051],
[M,233,46,9098,233,50,9102],
[M,233,46,9098,233,61,9113],
[M,230,16,8920,235,11,9139],
[M,230,6,8910,235,12,9140],
[M,236,16,9157,236,39,9180],
[M,238,16,9220,238,39,9243],
[M,239,18,9262,239,39,9283],
[M,239,6,9250,239,40,9284],
[M,217,90,8256,217,97,8263],
[M,217,27,8193,217,34,8200],
[M,217,43,8209,217,60,8226],
[M,217,68,8234,217,85,8251],
[M,217,4,8170,240,7,9292],
[M,245,31,9514,245,38,9521],
[M,245,19,9502,245,42,9525],
[M,245,6,9489,245,55,9538],
[M,242,36,9331,242,43,9338],
[M,245,44,9527,245,54,9537],
[M,242,24,9319,242,31,9326],
[M,242,4,9299,246,7,9546],
[M,251,9,9769,251,16,9776],
[M,251,17,9777,251,26,9786],
[M,251,9,9769,251,27,9787],
[M,252,18,9807,252,28,9817],
[M,252,38,9827,252,47,9836],
[M,252,38,9827,252,61,9850],
[M,252,9,9798,252,61,9850],
[M,252,9,9798,252,35,9824],
[M,252,9,9798,252,29,9818],
[M,254,18,9881,254,28,9891],
[M,254,9,9872,254,29,9892],
[M,248,55,9604,248,61,9610],
[M,248,28,9577,248,35,9584],
[M,248,44,9593,248,50,9599],
[M,248,4,9553,256,7,9910],
[M,22,2,322,119,7,4287],
[M,121,2,4291,256,8,9911],
[M,121,18,4307,121,19,4308],
[M,121,29,4318,121,36,4325],
[M,121,4,4293,121,37,4326],
[M,21,0,306,294,3,11354],
[M,299,7,11521,299,18,11532],
[M,299,20,11534,299,60,11574],
[M,299,26,11540,299,59,11573],
[M,299,48,11562,299,59,11573],
[M,300,12,11587,300,20,11595],
[M,300,22,11597,300,29,11604],
[M,301,15,11620,301,21,11626],
[M,301,10,11615,301,31,11636],
[M,301,23,11628,301,30,11635],
[M,298,2,11496,303,5,11650],
[M,304,5,11656,304,10,11661],
[M,304,12,11663,304,58,11709],
[M,304,18,11669,304,57,11708],
[M,304,46,11697,304,57,11708],
[M,305,8,11718,305,20,11730],
[M,296,43,11399,296,44,11400],
[M,296,18,11374,296,25,11381],
[M,296,32,11388,296,38,11394],
[M,296,0,11356,307,3,11740],
[M,313,7,11986,313,18,11997],
[M,313,20,11999,313,60,12039],
[M,313,26,12005,313,59,12038],
[M,313,48,12027,313,59,12038],
[M,314,12,12052,314,20,12060],
[M,314,34,12074,314,40,12080],
[M,314,26,12066,314,41,12081],
[M,315,10,12092,315,17,12099],
[M,315,33,12115,315,39,12121],
[M,315,20,12102,315,50,12132],
[M,315,28,12110,315,49,12131],
[M,315,41,12123,315,48,12130],
[M,312,2,11961,317,5,12146],
[M,318,5,12152,318,10,12157],
[M,318,12,12159,318,58,12205],
[M,318,18,12165,318,57,12204],
[M,318,46,12193,318,57,12204],
[M,319,8,12214,319,20,12226],
[M,309,46,11788,309,47,11789],
[M,309,18,11760,309,25,11767],
[M,309,32,11774,309,38,11780],
[M,309,0,11742,321,3,12236],
[M,323,39,12277,323,46,12284],
[M,324,2,12288,324,14,12300],
[M,323,17,12255,323,24,12262],
[M,323,33,12271,323,34,12272],
[M,323,0,12238,325,3,12304],
[M,329,40,12499,329,54,12513],
[M,329,25,12484,329,58,12517],
[M,329,2,12461,329,70,12529],
[M,327,56,12362,327,63,12369],
[M,327,27,12333,327,34,12340],
[M,327,44,12350,327,51,12357],
[M,327,0,12306,333,3,12642],
[M,335,34,12678,335,41,12685],
[M,335,43,12687,335,67,12711],
[M,335,22,12666,335,29,12673],
[M,335,0,12644,335,71,12715],
[M,338,2,12813,338,22,12833],
[M,337,85,12802,337,92,12809],
[M,337,22,12739,337,29,12746],
[M,337,38,12755,337,55,12772],
[M,337,63,12780,337,80,12797],
[M,337,0,12717,339,3,12837],
[M,342,2,12881,342,12,12891],
[M,341,31,12870,341,38,12877],
[M,341,19,12858,341,26,12865],
[M,341,0,12839,343,3,12895],
[M,347,5,13038,347,17,13050],
[M,347,19,13052,351,39,13274],
[M,347,25,13058,351,38,13273],
[M,347,25,13058,350,49,13234],
[M,350,35,13220,350,49,13234],
[M,347,25,13058,349,39,13184],
[M,347,25,13058,348,50,13144],
[M,348,35,13129,348,50,13144],
[M,352,42,13317,352,51,13326],
[M,352,8,13283,352,67,13342],
[M,352,26,13301,352,66,13341],
[M,352,53,13328,352,65,13340],
[M,345,46,12943,345,58,12955],
[M,345,19,12916,345,25,12922],
[M,345,35,12932,345,41,12938],
[M,345,0,12897,354,3,13352],
[M,359,5,13573,359,15,13583],
[M,360,7,13592,360,20,13605],
[M,361,10,13623,361,76,13689],
[M,365,46,13813,365,65,13832],
[M,365,55,13822,365,64,13831],
[M,365,38,13805,365,69,13836],
[M,365,4,13771,365,79,13846],
[M,365,22,13789,365,78,13845],
[M,364,13,13719,364,60,13766],
[M,364,21,13727,364,56,13762],
[M,364,33,13739,364,55,13761],
[M,364,34,13740,364,46,13752],
[M,356,66,13420,356,78,13432],
[M,356,22,13376,356,28,13382],
[M,356,38,13392,356,44,13398],
[M,356,55,13409,356,61,13415],
[M,356,0,13354,374,3,14096],
[M,378,5,14193,378,10,14198],
[M,378,12,14200,378,60,14248],
[M,379,8,14257,379,45,14294],
[M,379,26,14275,379,44,14293],
[M,376,38,14136,376,45,14143],
[M,376,19,14117,376,25,14123],
[M,376,32,14130,376,33,14131],
[M,376,0,14098,381,3,14304],
[M,385,2,14432,385,34,14464],
[M,383,54,14360,383,61,14367],
[M,383,19,14325,383,33,14339],
[M,383,42,14348,383,49,14355],
[M,383,0,14306,386,3,14468],
[M,390,6,14561,390,11,14566],
[M,389,2,14533,392,5,14625],
[M,391,20,14595,391,44,14619],
[M,391,28,14603,391,43,14618],
[M,391,6,14581,391,16,14591],
[M,388,52,14522,388,59,14529],
[M,389,8,14539,389,15,14546],
[M,388,23,14493,388,30,14500],
[M,388,40,14510,388,47,14517],
[M,388,0,14470,393,3,14629],
[M,400,7,14919,400,26,14938],
[M,403,11,14981,403,25,14995],
[M,404,11,15008,404,26,15023],
[M,404,9,15006,404,27,15024],
[M,405,19,15045,405,34,15060],
[M,405,37,15063,405,53,15079],
[M,407,20,15112,407,35,15127],
[M,407,38,15130,407,55,15147],
[M,403,6,14976,403,26,14996],
[M,399,2,14891,410,5,15171],
[M,395,58,14689,395,76,14707],
[M,395,78,14709,395,97,14728],
[M,395,57,14688,395,98,14729],
[M,411,2,15174,411,11,15183],
[M,395,22,14653,395,36,14667],
[M,395,45,14676,395,52,14683],
[M,395,0,14631,413,3,15230],
[M,417,5,15380,417,18,15393],
[M,420,14,15427,420,23,15436],
[M,420,7,15420,420,23,15436],
[M,421,13,15451,421,21,15459],
[M,421,6,15444,421,27,15465],
[M,423,11,15487,423,20,15496],
[M,423,29,15505,423,37,15513],
[M,423,6,15482,423,44,15520],
[M,423,22,15498,423,43,15519],
[M,415,43,15275,415,50,15282],
[M,415,21,15253,415,28,15260],
[M,415,37,15269,415,38,15270],
[M,415,0,15232,426,3,15538],
[M,431,5,15736,431,18,15749],
[M,434,9,15777,434,18,15786],
[M,434,7,15775,434,19,15787],
[M,435,11,15800,435,20,15809],
[M,435,6,15795,435,21,15810],
[M,437,14,15835,437,22,15843],
[M,437,6,15827,437,23,15844],
[M,428,52,15592,428,60,15600],
[M,428,52,15592,428,63,15603],
[M,428,17,15557,428,31,15571],
[M,428,40,15580,428,47,15587],
[M,428,0,15540,440,3,15862],
[M,444,7,16079,444,12,16084],
[M,445,4,16090,445,26,16112],
[M,450,7,16188,450,15,16196],
[M,453,19,16266,453,43,16290],
[M,453,10,16257,453,15,16262],
[M,452,6,16226,457,9,16399],
[M,456,26,16374,456,41,16389],
[M,455,10,16329,455,28,16347],
[M,455,15,16334,455,22,16341],
[M,454,10,16301,454,24,16315],
[M,452,12,16232,452,16,16236],
[M,449,2,16163,459,5,16413],
[M,442,50,15914,442,67,15931],
[M,442,69,15933,442,86,15950],
[M,442,48,15912,442,88,15952],
[M,460,2,16416,460,14,16428],
[M,442,21,15885,442,27,15891],
[M,442,36,15900,442,43,15907],
[M,442,0,15864,462,3,16469],
[M,466,2,16600,466,25,16623],
[M,464,44,16515,464,51,16522],
[M,466,2,16600,466,18,16616],
[M,464,17,16488,464,23,16494],
[M,464,32,16503,464,39,16510],
[M,464,0,16471,467,3,16627],
[M,471,2,16766,471,25,16789],
[M,469,44,16673,469,51,16680],
[M,471,2,16766,471,18,16782],
[M,469,17,16646,469,23,16652],
[M,469,32,16661,469,39,16668],
[M,469,0,16629,472,3,16793],
[M,475,2,16829,475,10,16837],
[M,474,29,16824,474,30,16825],
[M,474,17,16812,474,24,16819],
[M,474,0,16795,476,3,16841],
[M,480,2,16971,480,12,16981],
[M,478,51,16894,478,58,16901],
[M,478,16,16859,478,30,16873],
[M,478,39,16882,478,46,16889],
[M,478,0,16843,481,3,16985],
[M,485,2,17116,485,12,17126],
[M,483,51,17038,483,58,17045],
[M,483,16,17003,483,30,17017],
[M,483,39,17026,483,46,17033],
[M,483,0,16987,486,3,17130],
[M,492,7,17396,492,19,17408],
[M,492,23,17412,492,35,17424],
[M,492,7,17396,492,35,17424],
[M,493,12,17443,493,20,17451],
[M,493,22,17453,493,30,17461],
[M,493,10,17441,493,31,17462],
[M,493,41,17472,493,48,17479],
[M,493,50,17481,493,57,17488],
[M,493,36,17467,493,58,17489],
[M,491,2,17371,495,5,17503],
[M,488,76,17208,488,83,17215],
[M,496,2,17506,496,18,17522],
[M,488,20,17152,488,37,17169],
[M,488,47,17179,488,54,17186],
[M,488,64,17196,488,71,17203],
[M,488,0,17132,497,3,17526],
[M,501,2,17657,501,31,17686],
[M,499,48,17576,499,55,17583],
[M,499,19,17547,499,27,17555],
[M,499,36,17564,499,43,17571],
[M,499,0,17528,502,3,17690],
[M,506,5,17860,506,17,17872],
[M,506,21,17876,506,33,17888],
[M,506,5,17860,506,33,17888],
[M,509,6,17914,509,14,17922],
[M,509,16,17924,509,24,17932],
[M,509,44,17952,509,51,17959],
[M,509,53,17961,509,60,17968],
[M,509,28,17936,509,62,17970],
[M,509,36,17944,509,61,17969],
[M,509,4,17912,509,25,17933],
[M,504,69,17761,504,76,17768],
[M,504,23,17715,504,34,17726],
[M,504,42,17734,504,49,17741],
[M,504,57,17749,504,64,17756],
[M,504,0,17692,511,3,17980],
[M,515,5,18173,515,17,18185],
[M,515,21,18189,515,33,18201],
[M,515,37,18205,515,49,18217],
[M,515,5,18173,515,49,18217],
[M,518,6,18243,518,14,18251],
[M,518,16,18253,518,24,18261],
[M,518,26,18263,518,34,18271],
[M,518,54,18291,518,61,18298],
[M,518,63,18300,518,70,18307],
[M,518,72,18309,518,79,18316],
[M,518,38,18275,518,81,18318],
[M,518,46,18283,518,80,18317],
[M,518,4,18241,518,35,18272],
[M,513,90,18072,513,97,18079],
[M,513,26,18008,513,40,18022],
[M,513,48,18030,513,55,18037],
[M,513,63,18045,513,70,18052],
[M,513,78,18060,513,85,18067],
[M,513,0,17982,520,3,18328],
[M,524,5,18556,524,17,18568],
[M,524,21,18572,524,33,18584],
[M,524,37,18588,524,49,18600],
[M,524,53,18604,524,65,18616],
[M,524,5,18556,524,65,18616],
[M,527,6,18642,527,14,18650],
[M,527,16,18652,527,24,18660],
[M,527,26,18662,527,34,18670],
[M,527,36,18672,527,44,18680],
[M,527,64,18700,527,71,18707],
[M,527,73,18709,527,80,18716],
[M,527,82,18718,527,89,18725],
[M,527,91,18727,527,98,18734],
[M,527,48,18684,527,100,18736],
[M,527,56,18692,527,99,18735],
[M,527,4,18640,527,45,18681],
[M,522,111,18441,522,118,18448],
[M,522,29,18359,522,46,18376],
[M,522,54,18384,522,61,18391],
[M,522,69,18399,522,76,18406],
[M,522,84,18414,522,91,18421],
[M,522,99,18429,522,106,18436],
[M,522,0,18330,529,3,18746],
[M,533,5,18914,533,18,18927],
[M,536,9,18956,536,18,18965],
[M,536,46,18993,536,54,19001],
[M,536,22,18969,536,56,19003],
[M,536,30,18977,536,55,19002],
[M,536,39,18986,536,44,18991],
[M,536,4,18951,536,19,18966],
[M,531,71,18819,531,78,18826],
[M,531,21,18769,531,37,18785],
[M,531,44,18792,531,50,18798],
[M,531,59,18807,531,66,18814],
[M,531,0,18748,538,3,19013],
[M,542,5,19223,542,17,19235],
[M,542,21,19239,542,33,19251],
[M,542,5,19223,542,33,19251],
[M,545,9,19280,545,17,19288],
[M,545,19,19290,545,27,19298],
[M,545,56,19327,545,63,19334],
[M,545,65,19336,545,72,19343],
[M,545,31,19302,545,74,19345],
[M,545,39,19310,545,73,19344],
[M,545,49,19320,545,54,19325],
[M,545,4,19275,545,28,19299],
[M,540,92,19107,540,99,19114],
[M,540,25,19040,540,44,19059],
[M,540,51,19066,540,57,19072],
[M,540,65,19080,540,72,19087],
[M,540,80,19095,540,87,19102],
[M,540,0,19015,547,3,19355],
[M,551,5,19600,551,17,19612],
[M,551,21,19616,551,33,19628],
[M,551,37,19632,551,49,19644],
[M,551,5,19600,551,49,19644],
[M,554,9,19673,554,17,19681],
[M,554,19,19683,554,27,19691],
[M,554,29,19693,554,37,19701],
[M,554,66,19730,554,73,19737],
[M,554,75,19739,554,82,19746],
[M,554,84,19748,554,91,19755],
[M,554,41,19705,554,93,19757],
[M,554,49,19713,554,92,19756],
[M,554,59,19723,554,64,19728],
[M,554,4,19668,554,38,19702],
[M,549,113,19470,549,120,19477],
[M,549,28,19385,549,50,19407],
[M,549,57,19414,549,63,19420],
[M,549,71,19428,549,78,19435],
[M,549,86,19443,549,93,19450],
[M,549,101,19458,549,108,19465],
[M,549,0,19357,556,3,19767],
[M,560,5,20047,560,17,20059],
[M,560,21,20063,560,33,20075],
[M,560,37,20079,560,49,20091],
[M,560,53,20095,560,65,20107],
[M,560,5,20047,560,65,20107],
[M,563,9,20136,563,17,20144],
[M,563,19,20146,563,27,20154],
[M,563,29,20156,563,37,20164],
[M,563,39,20166,563,47,20174],
[M,563,76,20203,563,83,20210],
[M,563,85,20212,563,92,20219],
[M,563,94,20221,563,101,20228],
[M,563,103,20230,563,110,20237],
[M,563,51,20178,563,112,20239],
[M,563,59,20186,563,111,20238],
[M,563,69,20196,563,74,20201],
[M,563,4,20131,563,48,20175],
[M,558,134,19903,558,141,19910],
[M,558,31,19800,558,56,19825],
[M,558,63,19832,558,69,19838],
[M,558,77,19846,558,84,19853],
[M,558,92,19861,558,99,19868],
[M,558,107,19876,558,114,19883],
[M,558,122,19891,558,129,19898],
[M,558,0,19769,565,3,20249],
[M,569,38,20415,569,44,20421],
[M,569,25,20402,569,48,20425],
[M,569,2,20379,569,63,20440],
[M,567,52,20303,567,59,20310],
[M,567,17,20268,567,31,20282],
[M,567,40,20291,567,47,20298],
[M,567,0,20251,571,3,20454],
[M,576,7,20691,576,19,20703],
[M,576,23,20707,576,35,20719],
[M,576,7,20691,576,35,20719],
[M,579,8,20759,579,16,20767],
[M,579,18,20769,579,26,20777],
[M,580,11,20790,580,18,20797],
[M,580,20,20799,580,27,20806],
[M,580,6,20785,580,28,20807],
[M,579,6,20757,579,27,20778],
[M,575,2,20666,582,5,20821],
[M,573,77,20533,573,84,20540],
[M,583,2,20824,583,18,20840],
[M,573,21,20477,573,38,20494],
[M,573,48,20504,573,55,20511],
[M,573,65,20521,573,72,20528],
[M,573,0,20456,584,3,20844],
[M,589,7,21114,589,19,21126],
[M,589,23,21130,589,35,21142],
[M,589,39,21146,589,51,21158],
[M,589,7,21114,589,51,21158],
[M,592,8,21198,592,16,21206],
[M,592,18,21208,592,26,21216],
[M,592,28,21218,592,36,21226],
[M,593,11,21239,593,18,21246],
[M,593,20,21248,593,27,21255],
[M,593,29,21257,593,36,21264],
[M,593,6,21234,593,37,21265],
[M,592,6,21196,592,37,21227],
[M,588,2,21085,595,5,21279],
[M,586,100,20946,586,107,20953],
[M,596,2,21282,596,24,21304],
[M,586,24,20870,586,44,20890],
[M,586,54,20900,586,61,20907],
[M,586,71,20917,586,78,20924],
[M,586,88,20934,586,95,20941],
[M,586,0,20846,597,3,21308],
[M,602,7,21597,602,19,21609],
[M,602,23,21613,602,35,21625],
[M,602,39,21629,602,51,21641],
[M,602,55,21645,602,67,21657],
[M,602,7,21597,602,67,21657],
[M,605,8,21697,605,16,21705],
[M,605,18,21707,605,26,21715],
[M,605,28,21717,605,36,21725],
[M,605,38,21727,605,46,21735],
[M,606,11,21748,606,18,21755],
[M,606,20,21757,606,27,21764],
[M,606,29,21766,606,36,21773],
[M,606,38,21775,606,45,21782],
[M,606,6,21743,606,46,21783],
[M,605,6,21695,605,47,21736],
[M,601,2,21564,608,5,21797],
[M,609,2,21800,609,30,21828],
[M,599,27,21337,599,50,21360],
[M,599,60,21370,599,67,21377],
[M,599,77,21387,599,84,21394],
[M,599,94,21404,599,101,21411],
[M,599,111,21421,599,118,21428],
[M,599,0,21310,610,3,21832],
[M,615,7,22038,615,18,22049],
[M,618,11,22092,618,18,22099],
[M,619,18,22119,619,24,22125],
[M,619,6,22107,619,25,22126],
[M,619,11,22112,619,16,22117],
[M,618,6,22087,618,19,22100],
[M,614,2,22015,621,5,22140],
[M,612,76,21910,612,83,21917],
[M,622,2,22143,622,16,22157],
[M,612,19,21853,612,41,21875],
[M,612,50,21884,612,56,21890],
[M,612,64,21898,612,71,21905],
[M,612,0,21834,623,3,22161],
[M,628,7,22417,628,19,22429],
[M,628,23,22433,628,35,22445],
[M,628,7,22417,628,35,22445],
[M,631,11,22488,631,19,22496],
[M,631,21,22498,631,29,22506],
[M,632,18,22526,632,25,22533],
[M,632,27,22535,632,34,22542],
[M,632,6,22514,632,35,22543],
[M,632,11,22519,632,16,22524],
[M,631,6,22483,631,30,22507],
[M,627,2,22389,634,5,22557],
[M,625,102,22265,625,109,22272],
[M,635,2,22560,635,23,22581],
[M,625,23,22186,625,48,22211],
[M,625,57,22220,625,63,22226],
[M,625,73,22236,625,80,22243],
[M,625,90,22253,625,97,22260],
[M,625,0,22163,636,3,22585],
[M,641,7,22884,641,19,22896],
[M,641,23,22900,641,35,22912],
[M,641,39,22916,641,51,22928],
[M,641,7,22884,641,51,22928],
[M,644,11,22971,644,19,22979],
[M,644,21,22981,644,29,22989],
[M,644,31,22991,644,39,22999],
[M,645,18,23019,645,25,23026],
[M,645,27,23028,645,34,23035],
[M,645,36,23037,645,43,23044],
[M,645,6,23007,645,44,23045],
[M,645,11,23012,645,16,23017],
[M,644,6,22966,644,40,23000],
[M,640,2,22852,647,5,23059],
[M,638,125,22712,638,132,22719],
[M,648,2,23062,648,29,23089],
[M,638,26,22613,638,54,22641],
[M,638,63,22650,638,69,22656],
[M,638,79,22666,638,86,22673],
[M,638,96,22683,638,103,22690],
[M,638,113,22700,638,120,22707],
[M,638,0,22587,649,3,23093],
[M,654,7,23427,654,19,23439],
[M,654,23,23443,654,35,23455],
[M,654,39,23459,654,51,23471],
[M,654,55,23475,654,67,23487],
[M,654,7,23427,654,67,23487],
[M,657,11,23530,657,19,23538],
[M,657,21,23540,657,29,23548],
[M,657,31,23550,657,39,23558],
[M,657,41,23560,657,49,23568],
[M,658,18,23588,658,25,23595],
[M,658,27,23597,658,34,23604],
[M,658,36,23606,658,43,23613],
[M,658,45,23615,658,52,23622],
[M,658,6,23576,658,53,23623],
[M,658,11,23581,658,16,23586],
[M,657,6,23525,657,50,23569],
[M,653,2,23391,660,5,23637],
[M,651,140,23235,651,147,23242],
[M,661,2,23640,661,35,23673],
[M,651,29,23124,651,52,23147],
[M,651,61,23156,651,67,23162],
[M,651,77,23172,651,84,23179],
[M,651,94,23189,651,101,23196],
[M,651,111,23206,651,118,23213],
[M,651,128,23223,651,135,23230],
[M,651,0,23095,662,3,23677],
[M,669,6,24052,669,11,24057],
[M,668,2,24029,675,5,24204],
[M,672,21,24145,672,40,24164],
[M,672,10,24134,672,17,24141],
[M,671,6,24094,674,9,24198],
[M,673,10,24175,673,18,24183],
[M,671,12,24100,671,20,24108],
[M,671,22,24110,671,34,24122],
[M,670,6,24072,670,18,24084],
[M,670,4,24070,674,9,24198],
[M,664,80,23759,664,81,23760],
[M,668,8,24035,668,12,24039],
[M,664,26,23705,664,48,23727],
[M,664,58,23737,664,59,23738],
[M,664,68,23747,664,75,23754],
[M,664,0,23679,676,3,24208],
[M,681,2,24430,681,38,24466],
[M,678,63,24273,678,64,24274],
[M,678,20,24230,678,31,24241],
[M,678,41,24251,678,42,24252],
[M,678,51,24261,678,58,24268],
[M,678,0,24210,682,3,24470],
[M,689,5,24715,689,18,24728],
[M,692,21,24768,692,29,24776],
[M,692,32,24779,692,41,24788],
[M,692,4,24751,692,42,24789],
[M,692,6,24753,692,30,24777],
[M,686,64,24554,686,65,24555],
[M,686,21,24511,686,32,24522],
[M,686,42,24532,686,43,24533],
[M,686,52,24542,686,59,24549],
[M,686,0,24490,694,3,24799],
[M,699,5,25098,699,17,25110],
[M,699,21,25114,699,33,25126],
[M,699,5,25098,699,33,25126],
[M,702,21,25166,702,29,25174],
[M,702,31,25176,702,39,25184],
[M,702,42,25187,702,49,25194],
[M,702,51,25196,702,58,25203],
[M,702,4,25149,702,59,25204],
[M,702,13,25158,702,40,25185],
[M,696,84,24885,696,85,24886],
[M,696,24,24825,696,38,24839],
[M,696,48,24849,696,49,24850],
[M,696,57,24858,696,64,24865],
[M,696,72,24873,696,79,24880],
[M,696,0,24801,704,3,25214],
[M,709,5,25533,709,17,25545],
[M,709,21,25549,709,33,25561],
[M,709,37,25565,709,49,25577],
[M,709,5,25533,709,49,25577],
[M,712,21,25617,712,29,25625],
[M,712,31,25627,712,39,25635],
[M,712,41,25637,712,49,25645],
[M,712,52,25648,712,59,25655],
[M,712,61,25657,712,68,25664],
[M,712,70,25666,712,77,25673],
[M,712,4,25600,712,78,25674],
[M,712,13,25609,712,50,25646],
[M,706,105,25321,706,106,25322],
[M,706,27,25243,706,44,25260],
[M,706,54,25270,706,55,25271],
[M,706,63,25279,706,70,25286],
[M,706,78,25294,706,85,25301],
[M,706,93,25309,706,100,25316],
[M,706,0,25216,714,3,25684],
[M,719,5,26023,719,17,26035],
[M,719,21,26039,719,33,26051],
[M,719,37,26055,719,49,26067],
[M,719,53,26071,719,65,26083],
[M,719,5,26023,719,65,26083],
[M,722,21,26123,722,29,26131],
[M,722,31,26133,722,39,26141],
[M,722,41,26143,722,49,26151],
[M,722,51,26153,722,59,26161],
[M,722,62,26164,722,69,26171],
[M,722,71,26173,722,78,26180],
[M,722,80,26182,722,87,26189],
[M,722,89,26191,722,96,26198],
[M,722,4,26106,722,97,26199],
[M,722,13,26115,722,60,26162],
[M,716,126,25812,716,127,25813],
[M,716,30,25716,716,50,25736],
[M,716,60,25746,716,61,25747],
[M,716,69,25755,716,76,25762],
[M,716,84,25770,716,91,25777],
[M,716,99,25785,716,106,25792],
[M,716,114,25800,716,121,25807],
[M,716,0,25686,724,3,26209],
[M,730,7,26553,730,29,26575],
[M,733,28,26625,733,46,26643],
[M,733,49,26646,733,66,26663],
[M,733,6,26603,733,67,26664],
[M,733,18,26615,733,47,26644],
[M,733,11,26608,733,16,26613],
[M,729,2,26514,735,5,26678],
[M,726,88,26299,726,89,26300],
[M,736,2,26681,736,22,26701],
[M,726,22,26233,726,41,26252],
[M,726,50,26261,726,56,26267],
[M,726,66,26277,726,67,26278],
[M,726,76,26287,726,83,26294],
[M,726,0,26211,737,3,26705],
[M,741,6,26807,741,19,26820],
[M,741,26,26827,741,61,26862],
[M,742,6,26869,742,18,26881],
[M,743,10,26898,743,19,26907],
[M,744,10,26918,744,18,26926],
[M,747,19,27035,747,33,27049],
[M,747,10,27026,747,15,27031],
[M,746,6,26968,749,9,27137],
[M,748,18,27068,748,77,27127],
[M,748,53,27103,748,76,27126],
[M,746,12,26974,746,35,26997],
[M,745,24,26951,745,34,26961],
[M,740,2,26796,750,5,27143],
[M,739,26,26733,739,33,26740],
[M,739,42,26749,739,43,26750],
[M,739,51,26758,739,84,26791],
[M,739,0,26707,751,3,27147],
[M,753,44,27193,753,67,27216],
[M,754,2,27220,754,38,27256],
[M,753,22,27171,753,29,27178],
[M,753,38,27187,753,39,27188],
[M,753,0,27149,755,3,27260],
[M,758,2,27316,758,40,27354],
[M,757,43,27305,757,50,27312],
[M,758,22,27336,758,39,27353],
[M,757,21,27283,757,28,27290],
[M,757,37,27299,757,38,27300],
[M,757,0,27262,759,3,27358],
[M,764,48,27457,764,71,27480],
[M,765,2,27484,765,35,27517],
[M,764,26,27435,764,33,27442],
[M,764,42,27451,764,43,27452],
[M,764,0,27409,766,3,27521],
[M,769,2,27581,769,44,27623],
[M,768,47,27570,768,54,27577],
[M,769,22,27601,769,43,27622],
[M,768,25,27548,768,32,27555],
[M,768,41,27564,768,42,27565],
[M,768,0,27523,770,3,27627],
[M,772,54,27683,772,77,27706],
[M,773,2,27710,773,35,27743],
[M,772,32,27661,772,39,27668],
[M,772,48,27677,772,49,27678],
[M,772,0,27629,774,3,27747],
[M,777,2,27813,777,50,27861],
[M,776,53,27802,776,60,27809],
[M,777,22,27833,777,49,27860],
[M,776,31,27780,776,38,27787],
[M,776,47,27796,776,48,27797],
[M,776,0,27749,778,3,27865],
[M,781,5,27915,781,18,27928],
[M,786,6,28127,786,31,28152],
[M,785,6,28075,785,51,28120],
[M,785,28,28097,785,50,28119],
[M,784,11,28059,784,20,28068],
[M,783,11,27955,788,7,28170],
[M,783,54,27998,783,63,28007],
[M,783,65,28009,783,77,28021],
[M,783,87,28031,783,95,28039],
[M,789,4,28175,789,27,28198],
[M,783,41,27985,783,78,28022],
[M,780,34,27901,780,41,27908],
[M,780,22,27889,780,29,27896],
[M,780,0,27867,791,3,28208],
[M,795,6,28310,795,11,28315],
[M,794,2,28284,801,5,28488],
[M,798,18,28403,798,37,28422],
[M,798,10,28395,798,14,28399],
[M,797,6,28358,800,9,28482],
[M,799,21,28444,799,49,28472],
[M,799,29,28452,799,48,28471],
[M,799,10,28433,799,17,28440],
[M,797,12,28364,797,21,28373],
[M,797,23,28375,797,31,28383],
[M,796,6,28331,796,23,28348],
[M,796,4,28329,800,9,28482],
[M,793,63,28273,793,70,28280],
[M,794,8,28290,794,15,28297],
[M,793,26,28236,793,42,28252],
[M,793,51,28261,793,58,28268],
[M,793,0,28210,802,3,28492],
[M,806,6,28579,806,11,28584],
[M,805,2,28553,812,5,28754],
[M,809,18,28669,809,37,28688],
[M,809,10,28661,809,14,28665],
[M,808,6,28627,811,9,28748],
[M,810,21,28710,810,49,28738],
[M,810,29,28718,810,48,28737],
[M,810,10,28699,810,17,28706],
[M,808,12,28633,808,21,28642],
[M,807,6,28600,807,23,28617],
[M,807,4,28598,811,9,28748],
[M,804,48,28542,804,55,28549],
[M,805,8,28559,805,15,28566],
[M,804,28,28522,804,43,28537],
[M,804,0,28494,813,3,28758],
[M,818,6,28927,818,11,28932],
[M,817,2,28905,825,5,29194],
[M,821,31,29059,821,58,29086],
[M,821,43,29071,821,57,29085],
[M,821,10,29038,821,27,29055],
[M,820,6,28975,824,9,29188],
[M,822,30,29117,822,57,29144],
[M,822,42,29129,822,56,29143],
[M,822,10,29097,822,26,29113],
[M,823,19,29164,823,33,29178],
[M,823,10,29155,823,15,29160],
[M,820,12,28981,820,35,29004],
[M,820,37,29006,820,57,29026],
[M,820,37,29006,820,44,29013],
[M,819,6,28948,819,23,28965],
[M,819,4,28946,824,9,29188],
[M,815,27,28789,815,31,28793],
[M,817,9,28912,817,13,28916],
[M,815,18,28780,815,22,28784],
[M,815,0,28762,826,3,29198],
[M,829,2,29235,829,12,29245],
[M,828,25,29225,828,31,29231],
[M,828,16,29216,828,20,29220],
[M,828,0,29200,830,3,29249],
[M,833,2,29309,833,15,29322],
[M,832,48,29299,832,54,29305],
[M,832,18,29269,832,30,29281],
[M,832,37,29288,832,43,29294],
[M,832,0,29251,834,3,29326],
[M,838,9,29373,838,25,29389],
[M,839,17,29408,839,31,29422],
[M,839,9,29400,839,35,29426],
[M,840,20,29448,840,43,29471],
[M,840,28,29456,840,42,29470],
[M,840,9,29437,840,47,29475],
[M,841,23,29500,841,55,29532],
[M,841,31,29508,841,54,29531],
[M,841,39,29516,841,53,29530],
[M,841,9,29486,841,59,29536],
[M,842,26,29564,842,67,29605],
[M,842,34,29572,842,66,29604],
[M,842,42,29580,842,65,29603],
[M,842,50,29588,842,64,29602],
[M,842,9,29547,842,71,29609],
[M,843,29,29640,843,79,29690],
[M,843,37,29648,843,78,29689],
[M,843,45,29656,843,77,29688],
[M,843,53,29664,843,76,29687],
[M,843,61,29672,843,75,29686],
[M,843,9,29620,843,83,29694],
["dummy location"],
[M,19,14,296,19,22,304],
[M,15,14,242,15,22,250],
[M,3,0,21,844,1,29697]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var raw$array$to$list5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-to-list");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var raw$array$of1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-of");
var raw$array$set2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-set");
var raw$array$get3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-get");
var random4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"random");
var $type$Boolean9 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
var identical35 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"identical3");
var equal$now36 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-now3");
var equal$always37 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always3");
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var $type$Nothing8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Nothing"];
var raise1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raise");
var _minus9 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_minus");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var _lessthan10 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_lessthan");
var raw$array$build11 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-build");
var _times12 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_times");
var num$max13 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-max");
var num$ceiling14 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-ceiling");
var _divide15 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_divide");
var tostring1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var _greaterthan16 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_greaterthan");
var within17 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"within");
var E18 = R.getField($E29,"values");
var equality19 = R.getField($equality30,"values");
var O21 = R.getField($O18,"values");
var VS22 = R.getField($VS19,"values");
var E23 = R.getField($E29,"types");
var equality24 = R.getField($equality30,"types");
var O26 = R.getField($O18,"types");
var VS27 = R.getField($VS19,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$E29);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$equality30);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import31);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$O18);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS19);
var $toplevel33 = function($$resumer101) {
var $step32 = 0;
var $ans35 = D;
var $al36 = L[1097];
try {
if(R.isActivationRecord($$resumer101)) {
$step32 = $$resumer101.step;
$al36 = $$resumer101.from;
$ans35 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
List51 = $$resumer101.vars[0];
none175 = $$resumer101.vars[1];
is$none2041 = $$resumer101.vars[2];
some970 = $$resumer101.vars[3];
is$some2042 = $$resumer101.vars[4];
Option1872 = $$resumer101.vars[5];
left2043 = $$resumer101.vars[6];
right2044 = $$resumer101.vars[7];
Either2117 = $$resumer101.vars[8];
is$List687 = $$resumer101.vars[9];
is$empty473 = $$resumer101.vars[10];
empty158 = $$resumer101.vars[11];
is$link615 = $$resumer101.vars[12];
link70 = $$resumer101.vars[13];
get112 = $$resumer101.vars[14];
set123 = $$resumer101.vars[15];
push773 = $$resumer101.vars[16];
reverse$help485 = $$resumer101.vars[17];
reverse802 = $$resumer101.vars[18];
sort$by814 = $$resumer101.vars[19];
sort824 = $$resumer101.vars[20];
range849 = $$resumer101.vars[21];
range$by872 = $$resumer101.vars[22];
repeat884 = $$resumer101.vars[23];
filter894 = $$resumer101.vars[24];
append902 = $$resumer101.vars[25];
partition360 = $$resumer101.vars[26];
remove132 = $$resumer101.vars[27];
find371 = $$resumer101.vars[28];
split$at80 = $$resumer101.vars[29];
take1026 = $$resumer101.vars[30];
drop1038 = $$resumer101.vars[31];
last1066 = $$resumer101.vars[32];
any1077 = $$resumer101.vars[33];
all1088 = $$resumer101.vars[34];
all21119 = $$resumer101.vars[35];
map326 = $$resumer101.vars[36];
map21139 = $$resumer101.vars[37];
map31166 = $$resumer101.vars[38];
map41199 = $$resumer101.vars[39];
map_n1216 = $$resumer101.vars[40];
map2_n1241 = $$resumer101.vars[41];
map3_n1269 = $$resumer101.vars[42];
map4_n1299 = $$resumer101.vars[43];
each316 = $$resumer101.vars[44];
each21356 = $$resumer101.vars[45];
each31391 = $$resumer101.vars[46];
each41427 = $$resumer101.vars[47];
each_n1453 = $$resumer101.vars[48];
each2_n1483 = $$resumer101.vars[49];
each3_n1522 = $$resumer101.vars[50];
each4_n1563 = $$resumer101.vars[51];
fold$while1574 = $$resumer101.vars[52];
fold496 = $$resumer101.vars[53];
foldl1602 = $$resumer101.vars[54];
foldr1611 = $$resumer101.vars[55];
fold21631 = $$resumer101.vars[56];
fold31657 = $$resumer101.vars[57];
fold41687 = $$resumer101.vars[58];
fold_n1726 = $$resumer101.vars[59];
member$with1743 = $$resumer101.vars[60];
member31763 = $$resumer101.vars[61];
member1776 = $$resumer101.vars[62];
member$always32099 = $$resumer101.vars[63];
member$always2100 = $$resumer101.vars[64];
member$now31787 = $$resumer101.vars[65];
member$now1803 = $$resumer101.vars[66];
member$identical31815 = $$resumer101.vars[67];
member$identical1828 = $$resumer101.vars[68];
shuffle1855 = $$resumer101.vars[69];
filter$map1865 = $$resumer101.vars[70];
filter$values1891 = $$resumer101.vars[71];
distinct1919 = $$resumer101.vars[72];
length1951 = $$resumer101.vars[73];
join$str1969 = $$resumer101.vars[74];
list2111 = $$resumer101.vars[75];
defined_value2121 = $$resumer101.vars[76];
defined_value2122 = $$resumer101.vars[77];
defined_value2123 = $$resumer101.vars[78];
defined_value2124 = $$resumer101.vars[79];
defined_value2125 = $$resumer101.vars[80];
defined_value2126 = $$resumer101.vars[81];
defined_value2127 = $$resumer101.vars[82];
defined_value2128 = $$resumer101.vars[83];
defined_value2129 = $$resumer101.vars[84];
defined_value2130 = $$resumer101.vars[85];
defined_value2131 = $$resumer101.vars[86];
defined_value2132 = $$resumer101.vars[87];
defined_value2133 = $$resumer101.vars[88];
defined_value2134 = $$resumer101.vars[89];
defined_value2135 = $$resumer101.vars[90];
defined_value2136 = $$resumer101.vars[91];
defined_value2137 = $$resumer101.vars[92];
defined_value2138 = $$resumer101.vars[93];
defined_value2139 = $$resumer101.vars[94];
defined_value2140 = $$resumer101.vars[95];
defined_value2141 = $$resumer101.vars[96];
defined_value2142 = $$resumer101.vars[97];
defined_value2143 = $$resumer101.vars[98];
defined_value2144 = $$resumer101.vars[99];
defined_value2145 = $$resumer101.vars[100];
defined_value2146 = $$resumer101.vars[101];
defined_value2147 = $$resumer101.vars[102];
defined_value2148 = $$resumer101.vars[103];
defined_value2149 = $$resumer101.vars[104];
defined_value2150 = $$resumer101.vars[105];
defined_value2151 = $$resumer101.vars[106];
defined_value2152 = $$resumer101.vars[107];
defined_value2153 = $$resumer101.vars[108];
defined_value2154 = $$resumer101.vars[109];
defined_value2155 = $$resumer101.vars[110];
defined_value2156 = $$resumer101.vars[111];
defined_value2157 = $$resumer101.vars[112];
defined_value2158 = $$resumer101.vars[113];
defined_value2159 = $$resumer101.vars[114];
defined_value2160 = $$resumer101.vars[115];
defined_value2161 = $$resumer101.vars[116];
defined_value2162 = $$resumer101.vars[117];
defined_value2163 = $$resumer101.vars[118];
defined_value2164 = $$resumer101.vars[119];
defined_value2165 = $$resumer101.vars[120];
defined_value2166 = $$resumer101.vars[121];
defined_value2167 = $$resumer101.vars[122];
defined_value2168 = $$resumer101.vars[123];
defined_value2169 = $$resumer101.vars[124];
defined_value2170 = $$resumer101.vars[125];
defined_value2171 = $$resumer101.vars[126];
defined_value2172 = $$resumer101.vars[127];
defined_value2173 = $$resumer101.vars[128];
defined_value2174 = $$resumer101.vars[129];
defined_value2175 = $$resumer101.vars[130];
defined_value2176 = $$resumer101.vars[131];
defined_value2177 = $$resumer101.vars[132];
defined_value2178 = $$resumer101.vars[133];
defined_value2179 = $$resumer101.vars[134];
defined_value2180 = $$resumer101.vars[135];
defined_value2181 = $$resumer101.vars[136];
defined_value2182 = $$resumer101.vars[137];
defined_value2183 = $$resumer101.vars[138];
defined_value2184 = $$resumer101.vars[139];
answer2119 = $$resumer101.vars[140];
provides2118 = $$resumer101.vars[141];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step32) {
case 0: var List37 = R.namedBrander("List",L[336]);
var List51 = R.makeBranderAnn(List37,"List");
$al36 = L[0];
var none175 = G(O21,"none",L[0]);
$al36 = L[1];
var is$none2041 = G(O21,"is-none",L[1]);
$al36 = L[2];
var some970 = G(O21,"some",L[2]);
$al36 = L[3];
var is$some2042 = G(O21,"is-some",L[3]);
var Option1872 = R.getDotAnn(L[1096],"O",O26,"Option");
$al36 = L[4];
var left2043 = G(E18,"left",L[4]);
$al36 = L[5];
var right2044 = G(E18,"right",L[5]);
var Either2117 = R.getDotAnn(L[1095],"E",E23,"Either");
var List684 = {"$var":D};
var is$List687 = {"$var":D};
var is$empty473 = {"$var":D};
var empty158 = {"$var":D};
var is$link615 = {"$var":D};
var link70 = {"$var":D};
var get112 = {"$var":D};
var set123 = {"$var":D};
var push773 = {"$var":D};
var reverse$help485 = {"$var":D};
var reverse802 = {"$var":D};
var sort$by814 = {"$var":D};
var sort824 = {"$var":D};
var range849 = {"$var":D};
var range$by872 = {"$var":D};
var repeat884 = {"$var":D};
var filter894 = {"$var":D};
var append902 = {"$var":D};
var partition360 = {"$var":D};
var remove132 = {"$var":D};
var find371 = {"$var":D};
var split$at80 = {"$var":D};
var take1026 = {"$var":D};
var drop1038 = {"$var":D};
var last1066 = {"$var":D};
var any1077 = {"$var":D};
var all1088 = {"$var":D};
var all21119 = {"$var":D};
var map326 = {"$var":D};
var map21139 = {"$var":D};
var map31166 = {"$var":D};
var map41199 = {"$var":D};
var map_n1216 = {"$var":D};
var map2_n1241 = {"$var":D};
var map3_n1269 = {"$var":D};
var map4_n1299 = {"$var":D};
var each316 = {"$var":D};
var each21356 = {"$var":D};
var each31391 = {"$var":D};
var each41427 = {"$var":D};
var each_n1453 = {"$var":D};
var each2_n1483 = {"$var":D};
var each3_n1522 = {"$var":D};
var each4_n1563 = {"$var":D};
var fold$while1574 = {"$var":D};
var fold496 = {"$var":D};
var foldl1602 = {"$var":D};
var foldr1611 = {"$var":D};
var fold21631 = {"$var":D};
var fold31657 = {"$var":D};
var fold41687 = {"$var":D};
var fold_n1726 = {"$var":D};
var member$with1743 = {"$var":D};
var member31763 = {"$var":D};
var member1776 = {"$var":D};
var $temp_full41 = function($self42) {
var $step40 = 0;
var $ans44 = D;
var $al45 = L[11];
try {
if(R.isActivationRecord($self42)) {
$step40 = $self42.step;
$al45 = $self42.from;
$ans44 = $self42.ans;
self42 = $self42.args[0];
ann_check_temp50 = $self42.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[11],1,$t);
}
var self42 = $self42;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step40) {
case 0: $step40 = 1;
$al45 = L[10];
R._checkAnn(L[10],List51,self42);
break;
case 1: $al45 = L[6];
var anf_arg46 = G(VS22,"vs-value",L[6]);
$step40 = 2;
$al45 = L[7];
$field47 = R.getColonFieldLoc(self42,"map",L[7]);
if(R.isMethod($field47)) {
$ans44 = $field47.full_meth(self42,anf_arg46);
} else {
if(!(R.isFunction($field47))) {
R.ffi.throwNonFunApp(L[7],$field47);
}
$ans44 = $field47.app(anf_arg46);
}
break;
case 2: var anf_arg48 = $ans44;
$step40 = 3;
$al45 = L[8];
$field49 = R.getColonFieldLoc(VS22,"vs-collection",L[8]);
if(R.isMethod($field49)) {
$ans44 = $field49.full_meth(VS22,("list"),anf_arg48);
} else {
if(!(R.isFunction($field49))) {
R.ffi.throwNonFunApp(L[8],$field49);
}
$ans44 = $field49.app(("list"),anf_arg48);
}
break;
case 3: var ann_check_temp50 = $ans44;
$step40 = 4;
$al45 = L[9];
R._checkAnn(L[9],R.getDotAnn(L[9],"VS",VS27,"ValueSkeleton"),ann_check_temp50);
break;
case 4: $step40 = 5;
$ans44 = ann_check_temp50;
break;
case 5: ++R.GAS;
return $ans44;
default: throw "No case numbered " + $step40 + " in $temp_full41";
}
}
} catch($e52) {
if(R.isCont($e52) && ($step40 !== 5)) {
$e52.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al45,$temp_full41,$step40,[self42],[ann_check_temp50]);
}
if(R.isPyretException($e52)) {
$e52.pyretStack.push($al45);
}
throw $e52;
}
};
var anf_shared622 = R.makeMethod0($temp_full41,"_output");
var $temp_full54 = function($self55,$other56) {
var $step53 = 0;
var $ans57 = D;
var $al58 = L[16];
try {
if(R.isActivationRecord($self55)) {
$step53 = $self55.step;
$al58 = $self55.from;
$ans57 = $self55.ans;
self55 = $self55.args[0];
other56 = $self55.args[1];
ann_check_temp61 = $self55.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[16],2,$t);
}
var self55 = $self55;
var other56 = $other56;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step53) {
case 0: $step53 = 1;
$al58 = L[14];
R._checkAnn(L[14],List51,self55);
break;
case 1: $step53 = 2;
$al58 = L[15];
R._checkAnn(L[15],List51,other56);
break;
case 2: $step53 = 3;
$al58 = L[12];
$field60 = R.getColonFieldLoc(self55,"append",L[12]);
if(R.isMethod($field60)) {
$ans57 = $field60.full_meth(self55,other56);
} else {
if(!(R.isFunction($field60))) {
R.ffi.throwNonFunApp(L[12],$field60);
}
$ans57 = $field60.app(other56);
}
break;
case 3: var ann_check_temp61 = $ans57;
$step53 = 4;
$al58 = L[13];
R._checkAnn(L[13],List51,ann_check_temp61);
break;
case 4: $step53 = 5;
$ans57 = ann_check_temp61;
break;
case 5: ++R.GAS;
return $ans57;
default: throw "No case numbered " + $step53 + " in $temp_full54";
}
}
} catch($e63) {
if(R.isCont($e63) && ($step53 !== 5)) {
$e63.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al58,$temp_full54,$step53,[self55,other56],[ann_check_temp61]);
}
if(R.isPyretException($e63)) {
$e63.pyretStack.push($al58);
}
throw $e63;
}
};
var anf_shared623 = R.makeMethod1($temp_full54,"_plus");
var $temp_full65 = function($self66,$elt67) {
var $step64 = 0;
var $ans68 = D;
var $al69 = L[22];
try {
if(R.isActivationRecord($self66)) {
$step64 = $self66.step;
$al69 = $self66.from;
$ans68 = $self66.ans;
self66 = $self66.args[0];
elt67 = $self66.args[1];
ann_check_temp72 = $self66.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],2,$t);
}
var self66 = $self66;
var elt67 = $elt67;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step64) {
case 0: $step64 = 1;
$al69 = L[20];
R._checkAnn(L[20],List51,self66);
break;
case 1: $step64 = 2;
$al69 = L[21];
R._checkAnn(L[21],R.Any,elt67);
break;
case 2: var anf_fun71 = link70.$var === D?U(L[17],"link"):link70.$var;
$step64 = 3;
$al69 = L[19];
if(!(R.isFunction(anf_fun71))) {
R.ffi.throwNonFunApp($al69,anf_fun71);
}
$ans68 = anf_fun71.app(elt67,self66);
break;
case 3: var ann_check_temp72 = $ans68;
$step64 = 4;
$al69 = L[18];
R._checkAnn(L[18],List51,ann_check_temp72);
break;
case 4: $step64 = 5;
$ans68 = ann_check_temp72;
break;
case 5: ++R.GAS;
return $ans68;
default: throw "No case numbered " + $step64 + " in $temp_full65";
}
}
} catch($e73) {
if(R.isCont($e73) && ($step64 !== 5)) {
$e73.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al69,$temp_full65,$step64,[self66,elt67],[ann_check_temp72]);
}
if(R.isPyretException($e73)) {
$e73.pyretStack.push($al69);
}
throw $e73;
}
};
var anf_shared624 = R.makeMethod1($temp_full65,"push");
var $temp_full75 = function($self76,$n77) {
var $step74 = 0;
var $ans78 = D;
var $al79 = L[30];
try {
if(R.isActivationRecord($self76)) {
$step74 = $self76.step;
$al79 = $self76.from;
$ans78 = $self76.ans;
self76 = $self76.args[0];
n77 = $self76.args[1];
ann_check_temp82 = $self76.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],2,$t);
}
var self76 = $self76;
var n77 = $n77;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step74) {
case 0: $step74 = 1;
$al79 = L[28];
R._checkAnn(L[28],List51,self76);
break;
case 1: $step74 = 2;
$al79 = L[29];
R._checkAnn(L[29],$type$Number8,n77);
break;
case 2: var anf_fun81 = split$at80.$var === D?U(L[23],"split-at"):split$at80.$var;
$step74 = 3;
$al79 = L[27];
if(!(R.isFunction(anf_fun81))) {
R.ffi.throwNonFunApp($al79,anf_fun81);
}
$ans78 = anf_fun81.app(n77,self76);
break;
case 3: var ann_check_temp82 = $ans78;
$step74 = 4;
$al79 = L[26];
R._checkAnn(L[26],R.makeRecordAnn(["prefix","suffix"],[L[24],L[25]],{"prefix":List51,
"suffix":List51}),ann_check_temp82);
break;
case 4: $step74 = 5;
$ans78 = ann_check_temp82;
break;
case 5: ++R.GAS;
return $ans78;
default: throw "No case numbered " + $step74 + " in $temp_full75";
}
}
} catch($e83) {
if(R.isCont($e83) && ($step74 !== 5)) {
$e83.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al79,$temp_full75,$step74,[self76,n77],[ann_check_temp82]);
}
if(R.isPyretException($e83)) {
$e83.pyretStack.push($al79);
}
throw $e83;
}
};
var anf_shared625 = R.makeMethod1($temp_full75,"split-at");
var $temp_full85 = function($self86,$n87) {
var $step84 = 0;
var $ans88 = D;
var $al89 = L[37];
try {
if(R.isActivationRecord($self86)) {
$step84 = $self86.step;
$al89 = $self86.from;
$ans88 = $self86.ans;
self86 = $self86.args[0];
n87 = $self86.args[1];
ann_check_temp92 = $self86.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[37],2,$t);
}
var self86 = $self86;
var n87 = $n87;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step84) {
case 0: $step84 = 1;
$al89 = L[35];
R._checkAnn(L[35],List51,self86);
break;
case 1: $step84 = 2;
$al89 = L[36];
R._checkAnn(L[36],$type$Number8,n87);
break;
case 2: var anf_fun90 = split$at80.$var === D?U(L[31],"split-at"):split$at80.$var;
$step84 = 3;
$al89 = L[34];
if(!(R.isFunction(anf_fun90))) {
R.ffi.throwNonFunApp($al89,anf_fun90);
}
$ans88 = anf_fun90.app(n87,self86);
break;
case 3: var anf_bracket91 = $ans88;
$al89 = L[32];
var ann_check_temp92 = G(anf_bracket91,"prefix",L[32]);
$step84 = 4;
$al89 = L[33];
R._checkAnn(L[33],List51,ann_check_temp92);
break;
case 4: $step84 = 5;
$ans88 = ann_check_temp92;
break;
case 5: ++R.GAS;
return $ans88;
default: throw "No case numbered " + $step84 + " in $temp_full85";
}
}
} catch($e94) {
if(R.isCont($e94) && ($step84 !== 5)) {
$e94.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al89,$temp_full85,$step84,[self86,n87],[ann_check_temp92]);
}
if(R.isPyretException($e94)) {
$e94.pyretStack.push($al89);
}
throw $e94;
}
};
var anf_shared626 = R.makeMethod1($temp_full85,"take");
var $temp_full96 = function($self97,$n98) {
var $step95 = 0;
var $ans99 = D;
var $al100 = L[44];
try {
if(R.isActivationRecord($self97)) {
$step95 = $self97.step;
$al100 = $self97.from;
$ans99 = $self97.ans;
self97 = $self97.args[0];
n98 = $self97.args[1];
ann_check_temp103 = $self97.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],2,$t);
}
var self97 = $self97;
var n98 = $n98;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step95) {
case 0: $step95 = 1;
$al100 = L[42];
R._checkAnn(L[42],List51,self97);
break;
case 1: $step95 = 2;
$al100 = L[43];
R._checkAnn(L[43],$type$Number8,n98);
break;
case 2: var anf_fun101 = split$at80.$var === D?U(L[38],"split-at"):split$at80.$var;
$step95 = 3;
$al100 = L[41];
if(!(R.isFunction(anf_fun101))) {
R.ffi.throwNonFunApp($al100,anf_fun101);
}
$ans99 = anf_fun101.app(n98,self97);
break;
case 3: var anf_bracket102 = $ans99;
$al100 = L[39];
var ann_check_temp103 = G(anf_bracket102,"suffix",L[39]);
$step95 = 4;
$al100 = L[40];
R._checkAnn(L[40],List51,ann_check_temp103);
break;
case 4: $step95 = 5;
$ans99 = ann_check_temp103;
break;
case 5: ++R.GAS;
return $ans99;
default: throw "No case numbered " + $step95 + " in $temp_full96";
}
}
} catch($e104) {
if(R.isCont($e104) && ($step95 !== 5)) {
$e104.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al100,$temp_full96,$step95,[self97,n98],[ann_check_temp103]);
}
if(R.isPyretException($e104)) {
$e104.pyretStack.push($al100);
}
throw $e104;
}
};
var anf_shared627 = R.makeMethod1($temp_full96,"drop");
var $temp_full106 = function($self107,$n108) {
var $step105 = 0;
var $ans110 = D;
var $al111 = L[50];
try {
if(R.isActivationRecord($self107)) {
$step105 = $self107.step;
$al111 = $self107.from;
$ans110 = $self107.ans;
self107 = $self107.args[0];
n108 = $self107.args[1];
ann_check_temp114 = $self107.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var self107 = $self107;
var n108 = $n108;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step105) {
case 0: $step105 = 1;
$al111 = L[48];
R._checkAnn(L[48],List51,self107);
break;
case 1: $step105 = 2;
$al111 = L[49];
R._checkAnn(L[49],$type$Number8,n108);
break;
case 2: var anf_fun113 = get112.$var === D?U(L[45],"get"):get112.$var;
$step105 = 3;
$al111 = L[47];
if(!(R.isFunction(anf_fun113))) {
R.ffi.throwNonFunApp($al111,anf_fun113);
}
$ans110 = anf_fun113.app(self107,n108);
break;
case 3: var ann_check_temp114 = $ans110;
$step105 = 4;
$al111 = L[46];
R._checkAnn(L[46],R.Any,ann_check_temp114);
break;
case 4: $step105 = 5;
$ans110 = ann_check_temp114;
break;
case 5: ++R.GAS;
return $ans110;
default: throw "No case numbered " + $step105 + " in $temp_full106";
}
}
} catch($e115) {
if(R.isCont($e115) && ($step105 !== 5)) {
$e115.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al111,$temp_full106,$step105,[self107,n108],[ann_check_temp114]);
}
if(R.isPyretException($e115)) {
$e115.pyretStack.push($al111);
}
throw $e115;
}
};
var anf_shared628 = R.makeMethod1($temp_full106,"get");
var $temp_full117 = function($self118,$n119,$e120) {
var $step116 = 0;
var $ans121 = D;
var $al122 = L[57];
try {
if(R.isActivationRecord($self118)) {
$step116 = $self118.step;
$al122 = $self118.from;
$ans121 = $self118.ans;
self118 = $self118.args[0];
n119 = $self118.args[1];
e120 = $self118.args[2];
ann_check_temp125 = $self118.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[57],3,$t);
}
var self118 = $self118;
var n119 = $n119;
var e120 = $e120;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step116) {
case 0: $step116 = 1;
$al122 = L[54];
R._checkAnn(L[54],List51,self118);
break;
case 1: $step116 = 2;
$al122 = L[55];
R._checkAnn(L[55],$type$Number8,n119);
break;
case 2: $step116 = 3;
$al122 = L[56];
R._checkAnn(L[56],R.Any,e120);
break;
case 3: var anf_fun124 = set123.$var === D?U(L[51],"set"):set123.$var;
$step116 = 4;
$al122 = L[53];
if(!(R.isFunction(anf_fun124))) {
R.ffi.throwNonFunApp($al122,anf_fun124);
}
$ans121 = anf_fun124.app(self118,n119,e120);
break;
case 4: var ann_check_temp125 = $ans121;
$step116 = 5;
$al122 = L[52];
R._checkAnn(L[52],List51,ann_check_temp125);
break;
case 5: $step116 = 6;
$ans121 = ann_check_temp125;
break;
case 6: ++R.GAS;
return $ans121;
default: throw "No case numbered " + $step116 + " in $temp_full117";
}
}
} catch($e126) {
if(R.isCont($e126) && ($step116 !== 6)) {
$e126.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al122,$temp_full117,$step116,[self118,n119,e120],[ann_check_temp125]);
}
if(R.isPyretException($e126)) {
$e126.pyretStack.push($al122);
}
throw $e126;
}
};
var anf_shared629 = R.makeMethod2($temp_full117,"set");
var $temp_full128 = function($self591,$e129) {
var $step127 = 0;
var $ans130 = D;
var $al131 = L[63];
try {
if(R.isActivationRecord($self591)) {
$step127 = $self591.step;
$al131 = $self591.from;
$ans130 = $self591.ans;
self591 = $self591.args[0];
e129 = $self591.args[1];
ann_check_temp134 = $self591.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[63],2,$t);
}
var self591 = $self591;
var e129 = $e129;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step127) {
case 0: $step127 = 1;
$al131 = L[61];
R._checkAnn(L[61],List51,self591);
break;
case 1: $step127 = 2;
$al131 = L[62];
R._checkAnn(L[62],R.Any,e129);
break;
case 2: var anf_fun133 = remove132.$var === D?U(L[58],"remove"):remove132.$var;
$step127 = 3;
$al131 = L[60];
if(!(R.isFunction(anf_fun133))) {
R.ffi.throwNonFunApp($al131,anf_fun133);
}
$ans130 = anf_fun133.app(self591,e129);
break;
case 3: var ann_check_temp134 = $ans130;
$step127 = 4;
$al131 = L[59];
R._checkAnn(L[59],List51,ann_check_temp134);
break;
case 4: $step127 = 5;
$ans130 = ann_check_temp134;
break;
case 5: ++R.GAS;
return $ans130;
default: throw "No case numbered " + $step127 + " in $temp_full128";
}
}
} catch($e135) {
if(R.isCont($e135) && ($step127 !== 5)) {
$e135.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al131,$temp_full128,$step127,[self591,e129],[ann_check_temp134]);
}
if(R.isPyretException($e135)) {
$e135.pyretStack.push($al131);
}
throw $e135;
}
};
var anf_shared630 = R.makeMethod1($temp_full128,"remove");
var $temp_full137 = function($self138) {
var $step136 = 0;
var $ans140 = D;
var $al141 = L[66];
try {
if(R.isActivationRecord($self138)) {
$step136 = $self138.step;
$al141 = $self138.from;
$ans140 = $self138.ans;
self138 = $self138.args[0];
ann_check_temp142 = $self138.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[66],1,$t);
}
var self138 = $self138;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step136) {
case 0: $step136 = 1;
$al141 = L[65];
R._checkAnn(L[65],List51,self138);
break;
case 1: var ann_check_temp142 = (0);
$step136 = 2;
$al141 = L[64];
R._checkAnn(L[64],$type$Number8,ann_check_temp142);
break;
case 2: $step136 = 3;
$ans140 = ann_check_temp142;
break;
case 3: ++R.GAS;
return $ans140;
default: throw "No case numbered " + $step136 + " in $temp_full137";
}
}
} catch($e143) {
if(R.isCont($e143) && ($step136 !== 3)) {
$e143.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al141,$temp_full137,$step136,[self138],[ann_check_temp142]);
}
if(R.isPyretException($e143)) {
$e143.pyretStack.push($al141);
}
throw $e143;
}
};
var anf_singleton_variant_member634 = R.makeMethod0($temp_full137,"length");
var $temp_full145 = function($self146,$f147) {
var $step144 = 0;
var $ans148 = D;
var $al149 = L[70];
try {
if(R.isActivationRecord($self146)) {
$step144 = $self146.step;
$al149 = $self146.from;
$ans148 = $self146.ans;
self146 = $self146.args[0];
f147 = $self146.args[1];
ann_check_temp150 = $self146.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[70],2,$t);
}
var self146 = $self146;
var f147 = $f147;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step144) {
case 0: $step144 = 1;
$al149 = L[68];
R._checkAnn(L[68],List51,self146);
break;
case 1: $step144 = 2;
$al149 = L[69];
R._checkAnn(L[69],R.Function,f147);
break;
case 2: var ann_check_temp150 = nothing2;
$step144 = 3;
$al149 = L[67];
R._checkAnn(L[67],$type$Nothing8,ann_check_temp150);
break;
case 3: $step144 = 4;
$ans148 = ann_check_temp150;
break;
case 4: ++R.GAS;
return $ans148;
default: throw "No case numbered " + $step144 + " in $temp_full145";
}
}
} catch($e151) {
if(R.isCont($e151) && ($step144 !== 4)) {
$e151.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al149,$temp_full145,$step144,[self146,f147],[ann_check_temp150]);
}
if(R.isPyretException($e151)) {
$e151.pyretStack.push($al149);
}
throw $e151;
}
};
var anf_singleton_variant_member635 = R.makeMethod1($temp_full145,"each");
var $temp_full153 = function($self154,$f155) {
var $step152 = 0;
var $ans156 = D;
var $al157 = L[74];
try {
if(R.isActivationRecord($self154)) {
$step152 = $self154.step;
$al157 = $self154.from;
$ans156 = $self154.ans;
self154 = $self154.args[0];
f155 = $self154.args[1];
ann_check_temp159 = $self154.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[74],2,$t);
}
var self154 = $self154;
var f155 = $f155;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step152) {
case 0: $step152 = 1;
$al157 = L[73];
R._checkAnn(L[73],R.Function,f155);
break;
case 1: var ann_check_temp159 = empty158.$var === D?U(L[71],"empty"):empty158.$var;
$step152 = 2;
$al157 = L[72];
R._checkAnn(L[72],List51,ann_check_temp159);
break;
case 2: $step152 = 3;
$ans156 = ann_check_temp159;
break;
case 3: ++R.GAS;
return $ans156;
default: throw "No case numbered " + $step152 + " in $temp_full153";
}
}
} catch($e160) {
if(R.isCont($e160) && ($step152 !== 3)) {
$e160.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al157,$temp_full153,$step152,[self154,f155],[ann_check_temp159]);
}
if(R.isPyretException($e160)) {
$e160.pyretStack.push($al157);
}
throw $e160;
}
};
var anf_singleton_variant_member636 = R.makeMethod1($temp_full153,"map");
var $temp_full162 = function($self163,$f164) {
var $step161 = 0;
var $ans165 = D;
var $al166 = L[79];
try {
if(R.isActivationRecord($self163)) {
$step161 = $self163.step;
$al166 = $self163.from;
$ans165 = $self163.ans;
self163 = $self163.args[0];
f164 = $self163.args[1];
ann_check_temp167 = $self163.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[79],2,$t);
}
var self163 = $self163;
var f164 = $f164;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step161) {
case 0: $step161 = 1;
$al166 = L[77];
R._checkAnn(L[77],List51,self163);
break;
case 1: $step161 = 2;
$al166 = L[78];
R._checkAnn(L[78],R.Function,f164);
break;
case 2: var ann_check_temp167 = empty158.$var === D?U(L[75],"empty"):empty158.$var;
$step161 = 3;
$al166 = L[76];
R._checkAnn(L[76],List51,ann_check_temp167);
break;
case 3: $step161 = 4;
$ans165 = ann_check_temp167;
break;
case 4: ++R.GAS;
return $ans165;
default: throw "No case numbered " + $step161 + " in $temp_full162";
}
}
} catch($e168) {
if(R.isCont($e168) && ($step161 !== 4)) {
$e168.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al166,$temp_full162,$step161,[self163,f164],[ann_check_temp167]);
}
if(R.isPyretException($e168)) {
$e168.pyretStack.push($al166);
}
throw $e168;
}
};
var anf_singleton_variant_member637 = R.makeMethod1($temp_full162,"filter");
var $temp_full170 = function($self171,$f172) {
var $step169 = 0;
var $ans173 = D;
var $al174 = L[84];
try {
if(R.isActivationRecord($self171)) {
$step169 = $self171.step;
$al174 = $self171.from;
$ans173 = $self171.ans;
self171 = $self171.args[0];
f172 = $self171.args[1];
ann_check_temp176 = $self171.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[84],2,$t);
}
var self171 = $self171;
var f172 = $f172;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step169) {
case 0: $step169 = 1;
$al174 = L[82];
R._checkAnn(L[82],List51,self171);
break;
case 1: $step169 = 2;
$al174 = L[83];
R._checkAnn(L[83],R.Function,f172);
break;
case 2: var ann_check_temp176 = none175;
$step169 = 3;
$al174 = L[81];
R._checkAnn(L[81],R.getDotAnn(L[80],"O",O26,"Option"),ann_check_temp176);
break;
case 3: $step169 = 4;
$ans173 = ann_check_temp176;
break;
case 4: ++R.GAS;
return $ans173;
default: throw "No case numbered " + $step169 + " in $temp_full170";
}
}
} catch($e177) {
if(R.isCont($e177) && ($step169 !== 4)) {
$e177.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al174,$temp_full170,$step169,[self171,f172],[ann_check_temp176]);
}
if(R.isPyretException($e177)) {
$e177.pyretStack.push($al174);
}
throw $e177;
}
};
var anf_singleton_variant_member638 = R.makeMethod1($temp_full170,"find");
var $temp_full179 = function($self180,$f181) {
var $step178 = 0;
var $ans182 = D;
var $al183 = L[92];
try {
if(R.isActivationRecord($self180)) {
$step178 = $self180.step;
$al183 = $self180.from;
$ans182 = $self180.ans;
self180 = $self180.args[0];
f181 = $self180.args[1];
ann_check_temp186 = $self180.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[92],2,$t);
}
var self180 = $self180;
var f181 = $f181;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step178) {
case 0: $step178 = 1;
$al183 = L[90];
R._checkAnn(L[90],List51,self180);
break;
case 1: $step178 = 2;
$al183 = L[91];
R._checkAnn(L[91],R.Function,f181);
break;
case 2: var anf_obj184 = empty158.$var === D?U(L[85],"empty"):empty158.$var;
var anf_obj185 = empty158.$var === D?U(L[86],"empty"):empty158.$var;
var ann_check_temp186 = R.makeObject({"is-true":anf_obj184,
"is-false":anf_obj185});
$step178 = 3;
$al183 = L[89];
R._checkAnn(L[89],R.makeRecordAnn(["is-true","is-false"],[L[87],L[88]],{"is-true":List51,
"is-false":List51}),ann_check_temp186);
break;
case 3: $step178 = 4;
$ans182 = ann_check_temp186;
break;
case 4: ++R.GAS;
return $ans182;
default: throw "No case numbered " + $step178 + " in $temp_full179";
}
}
} catch($e187) {
if(R.isCont($e187) && ($step178 !== 4)) {
$e187.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al183,$temp_full179,$step178,[self180,f181],[ann_check_temp186]);
}
if(R.isPyretException($e187)) {
$e187.pyretStack.push($al183);
}
throw $e187;
}
};
var anf_singleton_variant_member639 = R.makeMethod1($temp_full179,"partition");
var $temp_full189 = function($self190,$f191,$base192) {
var $step188 = 0;
var $ans193 = D;
var $al194 = L[97];
try {
if(R.isActivationRecord($self190)) {
$step188 = $self190.step;
$al194 = $self190.from;
$ans193 = $self190.ans;
self190 = $self190.args[0];
f191 = $self190.args[1];
base192 = $self190.args[2];
ann_check_temp195 = $self190.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[97],3,$t);
}
var self190 = $self190;
var f191 = $f191;
var base192 = $base192;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step188) {
case 0: $step188 = 1;
$al194 = L[94];
R._checkAnn(L[94],List51,self190);
break;
case 1: $step188 = 2;
$al194 = L[95];
R._checkAnn(L[95],R.Function,f191);
break;
case 2: $step188 = 3;
$al194 = L[96];
R._checkAnn(L[96],R.Any,base192);
break;
case 3: var ann_check_temp195 = base192;
$step188 = 4;
$al194 = L[93];
R._checkAnn(L[93],R.Any,ann_check_temp195);
break;
case 4: $step188 = 5;
$ans193 = ann_check_temp195;
break;
case 5: ++R.GAS;
return $ans193;
default: throw "No case numbered " + $step188 + " in $temp_full189";
}
}
} catch($e196) {
if(R.isCont($e196) && ($step188 !== 5)) {
$e196.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al194,$temp_full189,$step188,[self190,f191,base192],[ann_check_temp195]);
}
if(R.isPyretException($e196)) {
$e196.pyretStack.push($al194);
}
throw $e196;
}
};
var anf_singleton_variant_member640 = R.makeMethod2($temp_full189,"foldr");
var $temp_full198 = function($self199,$f200,$base201) {
var $step197 = 0;
var $ans202 = D;
var $al203 = L[102];
try {
if(R.isActivationRecord($self199)) {
$step197 = $self199.step;
$al203 = $self199.from;
$ans202 = $self199.ans;
self199 = $self199.args[0];
f200 = $self199.args[1];
base201 = $self199.args[2];
ann_check_temp204 = $self199.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[102],3,$t);
}
var self199 = $self199;
var f200 = $f200;
var base201 = $base201;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step197) {
case 0: $step197 = 1;
$al203 = L[99];
R._checkAnn(L[99],List51,self199);
break;
case 1: $step197 = 2;
$al203 = L[100];
R._checkAnn(L[100],R.Function,f200);
break;
case 2: $step197 = 3;
$al203 = L[101];
R._checkAnn(L[101],R.Any,base201);
break;
case 3: var ann_check_temp204 = base201;
$step197 = 4;
$al203 = L[98];
R._checkAnn(L[98],R.Any,ann_check_temp204);
break;
case 4: $step197 = 5;
$ans202 = ann_check_temp204;
break;
case 5: ++R.GAS;
return $ans202;
default: throw "No case numbered " + $step197 + " in $temp_full198";
}
}
} catch($e205) {
if(R.isCont($e205) && ($step197 !== 5)) {
$e205.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al203,$temp_full198,$step197,[self199,f200,base201],[ann_check_temp204]);
}
if(R.isPyretException($e205)) {
$e205.pyretStack.push($al203);
}
throw $e205;
}
};
var anf_singleton_variant_member641 = R.makeMethod2($temp_full198,"foldl");
var $temp_full207 = function($self208,$f209) {
var $step206 = 0;
var $ans210 = D;
var $al211 = L[106];
try {
if(R.isActivationRecord($self208)) {
$step206 = $self208.step;
$al211 = $self208.from;
$ans210 = $self208.ans;
self208 = $self208.args[0];
f209 = $self208.args[1];
ann_check_temp212 = $self208.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[106],2,$t);
}
var self208 = $self208;
var f209 = $f209;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step206) {
case 0: $step206 = 1;
$al211 = L[104];
R._checkAnn(L[104],List51,self208);
break;
case 1: $step206 = 2;
$al211 = L[105];
R._checkAnn(L[105],R.Function,f209);
break;
case 2: var ann_check_temp212 = (true);
$step206 = 3;
$al211 = L[103];
R._checkAnn(L[103],$type$Boolean9,ann_check_temp212);
break;
case 3: $step206 = 4;
$ans210 = ann_check_temp212;
break;
case 4: ++R.GAS;
return $ans210;
default: throw "No case numbered " + $step206 + " in $temp_full207";
}
}
} catch($e213) {
if(R.isCont($e213) && ($step206 !== 4)) {
$e213.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al211,$temp_full207,$step206,[self208,f209],[ann_check_temp212]);
}
if(R.isPyretException($e213)) {
$e213.pyretStack.push($al211);
}
throw $e213;
}
};
var anf_singleton_variant_member642 = R.makeMethod1($temp_full207,"all");
var $temp_full215 = function($self216,$f217) {
var $step214 = 0;
var $ans218 = D;
var $al219 = L[110];
try {
if(R.isActivationRecord($self216)) {
$step214 = $self216.step;
$al219 = $self216.from;
$ans218 = $self216.ans;
self216 = $self216.args[0];
f217 = $self216.args[1];
ann_check_temp220 = $self216.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[110],2,$t);
}
var self216 = $self216;
var f217 = $f217;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step214) {
case 0: $step214 = 1;
$al219 = L[108];
R._checkAnn(L[108],List51,self216);
break;
case 1: $step214 = 2;
$al219 = L[109];
R._checkAnn(L[109],R.Function,f217);
break;
case 2: var ann_check_temp220 = (false);
$step214 = 3;
$al219 = L[107];
R._checkAnn(L[107],$type$Boolean9,ann_check_temp220);
break;
case 3: $step214 = 4;
$ans218 = ann_check_temp220;
break;
case 4: ++R.GAS;
return $ans218;
default: throw "No case numbered " + $step214 + " in $temp_full215";
}
}
} catch($e221) {
if(R.isCont($e221) && ($step214 !== 4)) {
$e221.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al219,$temp_full215,$step214,[self216,f217],[ann_check_temp220]);
}
if(R.isPyretException($e221)) {
$e221.pyretStack.push($al219);
}
throw $e221;
}
};
var anf_singleton_variant_member643 = R.makeMethod1($temp_full215,"any");
var $temp_full223 = function($self224,$elt225) {
var $step222 = 0;
var $ans226 = D;
var $al227 = L[114];
try {
if(R.isActivationRecord($self224)) {
$step222 = $self224.step;
$al227 = $self224.from;
$ans226 = $self224.ans;
self224 = $self224.args[0];
elt225 = $self224.args[1];
ann_check_temp228 = $self224.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[114],2,$t);
}
var self224 = $self224;
var elt225 = $elt225;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step222) {
case 0: $step222 = 1;
$al227 = L[112];
R._checkAnn(L[112],List51,self224);
break;
case 1: $step222 = 2;
$al227 = L[113];
R._checkAnn(L[113],R.Any,elt225);
break;
case 2: var ann_check_temp228 = (false);
$step222 = 3;
$al227 = L[111];
R._checkAnn(L[111],$type$Boolean9,ann_check_temp228);
break;
case 3: $step222 = 4;
$ans226 = ann_check_temp228;
break;
case 4: ++R.GAS;
return $ans226;
default: throw "No case numbered " + $step222 + " in $temp_full223";
}
}
} catch($e230) {
if(R.isCont($e230) && ($step222 !== 4)) {
$e230.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al227,$temp_full223,$step222,[self224,elt225],[ann_check_temp228]);
}
if(R.isPyretException($e230)) {
$e230.pyretStack.push($al227);
}
throw $e230;
}
};
var anf_singleton_variant_member644 = R.makeMethod1($temp_full223,"member");
var $temp_full232 = function($self233,$other234) {
var $step231 = 0;
var $ans235 = D;
var $al236 = L[118];
try {
if(R.isActivationRecord($self233)) {
$step231 = $self233.step;
$al236 = $self233.from;
$ans235 = $self233.ans;
self233 = $self233.args[0];
other234 = $self233.args[1];
ann_check_temp237 = $self233.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[118],2,$t);
}
var self233 = $self233;
var other234 = $other234;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step231) {
case 0: $step231 = 1;
$al236 = L[116];
R._checkAnn(L[116],List51,self233);
break;
case 1: $step231 = 2;
$al236 = L[117];
R._checkAnn(L[117],List51,other234);
break;
case 2: var ann_check_temp237 = other234;
$step231 = 3;
$al236 = L[115];
R._checkAnn(L[115],List51,ann_check_temp237);
break;
case 3: $step231 = 4;
$ans235 = ann_check_temp237;
break;
case 4: ++R.GAS;
return $ans235;
default: throw "No case numbered " + $step231 + " in $temp_full232";
}
}
} catch($e238) {
if(R.isCont($e238) && ($step231 !== 4)) {
$e238.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al236,$temp_full232,$step231,[self233,other234],[ann_check_temp237]);
}
if(R.isPyretException($e238)) {
$e238.pyretStack.push($al236);
}
throw $e238;
}
};
var anf_singleton_variant_member645 = R.makeMethod1($temp_full232,"append");
var $temp_full240 = function($self241) {
var $step239 = 0;
var $ans243 = D;
var $al244 = L[122];
try {
if(R.isActivationRecord($self241)) {
$step239 = $self241.step;
$al244 = $self241.from;
$ans243 = $self241.ans;
self241 = $self241.args[0];
ann_check_temp245 = $self241.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[122],1,$t);
}
var self241 = $self241;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step239) {
case 0: $step239 = 1;
$al244 = L[121];
R._checkAnn(L[121],List51,self241);
break;
case 1: $step239 = 2;
$al244 = L[120];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al244,raise1);
}
$ans243 = raise1.app(("last: took last of empty list"));
break;
case 2: var ann_check_temp245 = $ans243;
$step239 = 3;
$al244 = L[119];
R._checkAnn(L[119],R.Any,ann_check_temp245);
break;
case 3: $step239 = 4;
$ans243 = ann_check_temp245;
break;
case 4: ++R.GAS;
return $ans243;
default: throw "No case numbered " + $step239 + " in $temp_full240";
}
}
} catch($e247) {
if(R.isCont($e247) && ($step239 !== 4)) {
$e247.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al244,$temp_full240,$step239,[self241],[ann_check_temp245]);
}
if(R.isPyretException($e247)) {
$e247.pyretStack.push($al244);
}
throw $e247;
}
};
var anf_singleton_variant_member646 = R.makeMethod0($temp_full240,"last");
var $temp_full249 = function($self250) {
var $step248 = 0;
var $ans251 = D;
var $al252 = L[125];
try {
if(R.isActivationRecord($self250)) {
$step248 = $self250.step;
$al252 = $self250.from;
$ans251 = $self250.ans;
self250 = $self250.args[0];
ann_check_temp253 = $self250.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[125],1,$t);
}
var self250 = $self250;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step248) {
case 0: $step248 = 1;
$al252 = L[124];
R._checkAnn(L[124],List51,self250);
break;
case 1: var ann_check_temp253 = self250;
$step248 = 2;
$al252 = L[123];
R._checkAnn(L[123],List51,ann_check_temp253);
break;
case 2: $step248 = 3;
$ans251 = ann_check_temp253;
break;
case 3: ++R.GAS;
return $ans251;
default: throw "No case numbered " + $step248 + " in $temp_full249";
}
}
} catch($e254) {
if(R.isCont($e254) && ($step248 !== 3)) {
$e254.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al252,$temp_full249,$step248,[self250],[ann_check_temp253]);
}
if(R.isPyretException($e254)) {
$e254.pyretStack.push($al252);
}
throw $e254;
}
};
var anf_singleton_variant_member647 = R.makeMethod0($temp_full249,"reverse");
var $temp_full256 = function($self257,$tostring258) {
var $step255 = 0;
var $ans259 = D;
var $al260 = L[129];
try {
if(R.isActivationRecord($self257)) {
$step255 = $self257.step;
$al260 = $self257.from;
$ans259 = $self257.ans;
self257 = $self257.args[0];
tostring258 = $self257.args[1];
ann_check_temp261 = $self257.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[129],2,$t);
}
var self257 = $self257;
var tostring258 = $tostring258;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step255) {
case 0: $step255 = 1;
$al260 = L[127];
R._checkAnn(L[127],List51,self257);
break;
case 1: $step255 = 2;
$al260 = L[128];
R._checkAnn(L[128],R.Function,tostring258);
break;
case 2: var ann_check_temp261 = ("[list: ]");
$step255 = 3;
$al260 = L[126];
R._checkAnn(L[126],$type$String7,ann_check_temp261);
break;
case 3: $step255 = 4;
$ans259 = ann_check_temp261;
break;
case 4: ++R.GAS;
return $ans259;
default: throw "No case numbered " + $step255 + " in $temp_full256";
}
}
} catch($e262) {
if(R.isCont($e262) && ($step255 !== 4)) {
$e262.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al260,$temp_full256,$step255,[self257,tostring258],[ann_check_temp261]);
}
if(R.isPyretException($e262)) {
$e262.pyretStack.push($al260);
}
throw $e262;
}
};
var anf_singleton_variant_member648 = R.makeMethod1($temp_full256,"_tostring");
var $temp_full264 = function($self265,$torepr266) {
var $step263 = 0;
var $ans267 = D;
var $al268 = L[133];
try {
if(R.isActivationRecord($self265)) {
$step263 = $self265.step;
$al268 = $self265.from;
$ans267 = $self265.ans;
self265 = $self265.args[0];
torepr266 = $self265.args[1];
ann_check_temp269 = $self265.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[133],2,$t);
}
var self265 = $self265;
var torepr266 = $torepr266;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step263) {
case 0: $step263 = 1;
$al268 = L[131];
R._checkAnn(L[131],List51,self265);
break;
case 1: $step263 = 2;
$al268 = L[132];
R._checkAnn(L[132],R.Function,torepr266);
break;
case 2: var ann_check_temp269 = ("[list: ]");
$step263 = 3;
$al268 = L[130];
R._checkAnn(L[130],$type$String7,ann_check_temp269);
break;
case 3: $step263 = 4;
$ans267 = ann_check_temp269;
break;
case 4: ++R.GAS;
return $ans267;
default: throw "No case numbered " + $step263 + " in $temp_full264";
}
}
} catch($e270) {
if(R.isCont($e270) && ($step263 !== 4)) {
$e270.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al268,$temp_full264,$step263,[self265,torepr266],[ann_check_temp269]);
}
if(R.isPyretException($e270)) {
$e270.pyretStack.push($al268);
}
throw $e270;
}
};
var anf_singleton_variant_member649 = R.makeMethod1($temp_full264,"_torepr");
var $temp_full272 = function($self273,$cmp274,$eq275) {
var $step271 = 0;
var $ans276 = D;
var $al277 = L[138];
try {
if(R.isActivationRecord($self273)) {
$step271 = $self273.step;
$al277 = $self273.from;
$ans276 = $self273.ans;
self273 = $self273.args[0];
cmp274 = $self273.args[1];
eq275 = $self273.args[2];
ann_check_temp278 = $self273.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[138],3,$t);
}
var self273 = $self273;
var cmp274 = $cmp274;
var eq275 = $eq275;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step271) {
case 0: $step271 = 1;
$al277 = L[135];
R._checkAnn(L[135],List51,self273);
break;
case 1: $step271 = 2;
$al277 = L[136];
R._checkAnn(L[136],R.Function,cmp274);
break;
case 2: $step271 = 3;
$al277 = L[137];
R._checkAnn(L[137],R.Function,eq275);
break;
case 3: var ann_check_temp278 = self273;
$step271 = 4;
$al277 = L[134];
R._checkAnn(L[134],List51,ann_check_temp278);
break;
case 4: $step271 = 5;
$ans276 = ann_check_temp278;
break;
case 5: ++R.GAS;
return $ans276;
default: throw "No case numbered " + $step271 + " in $temp_full272";
}
}
} catch($e280) {
if(R.isCont($e280) && ($step271 !== 5)) {
$e280.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al277,$temp_full272,$step271,[self273,cmp274,eq275],[ann_check_temp278]);
}
if(R.isPyretException($e280)) {
$e280.pyretStack.push($al277);
}
throw $e280;
}
};
var anf_singleton_variant_member650 = R.makeMethod2($temp_full272,"sort-by");
var $temp_full282 = function($self283) {
var $step281 = 0;
var $ans284 = D;
var $al285 = L[141];
try {
if(R.isActivationRecord($self283)) {
$step281 = $self283.step;
$al285 = $self283.from;
$ans284 = $self283.ans;
self283 = $self283.args[0];
ann_check_temp286 = $self283.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],1,$t);
}
var self283 = $self283;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step281) {
case 0: $step281 = 1;
$al285 = L[140];
R._checkAnn(L[140],List51,self283);
break;
case 1: var ann_check_temp286 = self283;
$step281 = 2;
$al285 = L[139];
R._checkAnn(L[139],List51,ann_check_temp286);
break;
case 2: $step281 = 3;
$ans284 = ann_check_temp286;
break;
case 3: ++R.GAS;
return $ans284;
default: throw "No case numbered " + $step281 + " in $temp_full282";
}
}
} catch($e287) {
if(R.isCont($e287) && ($step281 !== 3)) {
$e287.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al285,$temp_full282,$step281,[self283],[ann_check_temp286]);
}
if(R.isPyretException($e287)) {
$e287.pyretStack.push($al285);
}
throw $e287;
}
};
var anf_singleton_variant_member651 = R.makeMethod0($temp_full282,"sort");
var $temp_full289 = function($self290,$str291) {
var $step288 = 0;
var $ans293 = D;
var $al294 = L[145];
try {
if(R.isActivationRecord($self290)) {
$step288 = $self290.step;
$al294 = $self290.from;
$ans293 = $self290.ans;
self290 = $self290.args[0];
str291 = $self290.args[1];
ann_check_temp295 = $self290.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[145],2,$t);
}
var self290 = $self290;
var str291 = $str291;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step288) {
case 0: $step288 = 1;
$al294 = L[143];
R._checkAnn(L[143],List51,self290);
break;
case 1: $step288 = 2;
$al294 = L[144];
R._checkAnn(L[144],$type$String7,str291);
break;
case 2: var ann_check_temp295 = ("");
$step288 = 3;
$al294 = L[142];
R._checkAnn(L[142],$type$String7,ann_check_temp295);
break;
case 3: $step288 = 4;
$ans293 = ann_check_temp295;
break;
case 4: ++R.GAS;
return $ans293;
default: throw "No case numbered " + $step288 + " in $temp_full289";
}
}
} catch($e296) {
if(R.isCont($e296) && ($step288 !== 4)) {
$e296.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al294,$temp_full289,$step288,[self290,str291],[ann_check_temp295]);
}
if(R.isPyretException($e296)) {
$e296.pyretStack.push($al294);
}
throw $e296;
}
};
var anf_singleton_variant_member652 = R.makeMethod1($temp_full289,"join-str");
var $temp_full298 = function($self299) {
var $step297 = 0;
var $ans300 = D;
var $al301 = L[151];
try {
if(R.isActivationRecord($self299)) {
$step297 = $self299.step;
$al301 = $self299.from;
$ans300 = $self299.ans;
self299 = $self299.args[0];
ann_check_temp308 = $self299.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[151],1,$t);
}
var self299 = $self299;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step297) {
case 0: $step297 = 1;
$al301 = L[150];
R._checkAnn(L[150],List51,self299);
break;
case 1: $al301 = L[146];
var anf_method_obj302 = G(self299,"rest",L[146]);
$step297 = 2;
$al301 = L[147];
$field303 = R.getColonFieldLoc(anf_method_obj302,"length",L[147]);
if(R.isMethod($field303)) {
$ans300 = $field303.full_meth(anf_method_obj302);
} else {
if(!(R.isFunction($field303))) {
R.ffi.throwNonFunApp(L[147],$field303);
}
$ans300 = $field303.app();
}
break;
case 2: var anf_arg307 = $ans300;
$step297 = 3;
$al301 = L[149];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al301,_plus1);
}
$ans300 = _plus1.app((1),anf_arg307);
break;
case 3: var ann_check_temp308 = $ans300;
$step297 = 4;
$al301 = L[148];
R._checkAnn(L[148],$type$Number8,ann_check_temp308);
break;
case 4: $step297 = 5;
$ans300 = ann_check_temp308;
break;
case 5: ++R.GAS;
return $ans300;
default: throw "No case numbered " + $step297 + " in $temp_full298";
}
}
} catch($e309) {
if(R.isCont($e309) && ($step297 !== 5)) {
$e309.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al301,$temp_full298,$step297,[self299],[ann_check_temp308]);
}
if(R.isPyretException($e309)) {
$e309.pyretStack.push($al301);
}
throw $e309;
}
};
var anf_variant_member659 = R.makeMethod0($temp_full298,"length");
var $temp_full311 = function($self312,$f313) {
var $step310 = 0;
var $ans314 = D;
var $al315 = L[157];
try {
if(R.isActivationRecord($self312)) {
$step310 = $self312.step;
$al315 = $self312.from;
$ans314 = $self312.ans;
self312 = $self312.args[0];
f313 = $self312.args[1];
ann_check_temp318 = $self312.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[157],2,$t);
}
var self312 = $self312;
var f313 = $f313;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step310) {
case 0: $step310 = 1;
$al315 = L[155];
R._checkAnn(L[155],List51,self312);
break;
case 1: $step310 = 2;
$al315 = L[156];
R._checkAnn(L[156],R.Function,f313);
break;
case 2: var anf_fun317 = each316.$var === D?U(L[152],"each"):each316.$var;
$step310 = 3;
$al315 = L[154];
if(!(R.isFunction(anf_fun317))) {
R.ffi.throwNonFunApp($al315,anf_fun317);
}
$ans314 = anf_fun317.app(f313,self312);
break;
case 3: var ann_check_temp318 = $ans314;
$step310 = 4;
$al315 = L[153];
R._checkAnn(L[153],$type$Nothing8,ann_check_temp318);
break;
case 4: $step310 = 5;
$ans314 = ann_check_temp318;
break;
case 5: ++R.GAS;
return $ans314;
default: throw "No case numbered " + $step310 + " in $temp_full311";
}
}
} catch($e319) {
if(R.isCont($e319) && ($step310 !== 5)) {
$e319.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al315,$temp_full311,$step310,[self312,f313],[ann_check_temp318]);
}
if(R.isPyretException($e319)) {
$e319.pyretStack.push($al315);
}
throw $e319;
}
};
var anf_variant_member660 = R.makeMethod1($temp_full311,"each");
var $temp_full321 = function($self322,$f323) {
var $step320 = 0;
var $ans324 = D;
var $al325 = L[162];
try {
if(R.isActivationRecord($self322)) {
$step320 = $self322.step;
$al325 = $self322.from;
$ans324 = $self322.ans;
self322 = $self322.args[0];
f323 = $self322.args[1];
ann_check_temp328 = $self322.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[162],2,$t);
}
var self322 = $self322;
var f323 = $f323;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step320) {
case 0: $step320 = 1;
$al325 = L[161];
R._checkAnn(L[161],R.Function,f323);
break;
case 1: var anf_fun327 = map326.$var === D?U(L[158],"map"):map326.$var;
$step320 = 2;
$al325 = L[160];
if(!(R.isFunction(anf_fun327))) {
R.ffi.throwNonFunApp($al325,anf_fun327);
}
$ans324 = anf_fun327.app(f323,self322);
break;
case 2: var ann_check_temp328 = $ans324;
$step320 = 3;
$al325 = L[159];
R._checkAnn(L[159],List51,ann_check_temp328);
break;
case 3: $step320 = 4;
$ans324 = ann_check_temp328;
break;
case 4: ++R.GAS;
return $ans324;
default: throw "No case numbered " + $step320 + " in $temp_full321";
}
}
} catch($e329) {
if(R.isCont($e329) && ($step320 !== 4)) {
$e329.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al325,$temp_full321,$step320,[self322,f323],[ann_check_temp328]);
}
if(R.isPyretException($e329)) {
$e329.pyretStack.push($al325);
}
throw $e329;
}
};
var anf_variant_member661 = R.makeMethod1($temp_full321,"map");
var $temp_full331 = function($self332,$f333) {
var $step330 = 0;
var $ans334 = D;
var $al335 = L[175];
try {
if(R.isActivationRecord($self332)) {
$step330 = $self332.step;
$al335 = $self332.from;
$ans334 = $self332.ans;
self332 = $self332.args[0];
f333 = $self332.args[1];
arg_343 = $self332.vars[0];
anf_fun342 = $self332.vars[1];
ann_check_temp350 = $self332.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[175],2,$t);
}
var self332 = $self332;
var f333 = $f333;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step330) {
case 0: $step330 = 1;
$al335 = L[173];
R._checkAnn(L[173],List51,self332);
break;
case 1: $step330 = 2;
$al335 = L[174];
R._checkAnn(L[174],R.Function,f333);
break;
case 2: $al335 = L[163];
var anf_arg338 = G(self332,"first",L[163]);
$step330 = 3;
$al335 = L[164];
if(!(R.isFunction(f333))) {
R.ffi.throwNonFunApp($al335,f333);
}
$ans334 = f333.app(anf_arg338);
break;
case 3: var anf_arg339 = $ans334;
$al335 = L[164];
var anf_if351 = R.checkWrapBoolean(anf_arg339);
$step330 = R.isPyretTrue(anf_if351)?4:6;
break;
case 4: $al335 = L[165];
var arg_343 = G(self332,"first",L[165]);
var anf_fun342 = link70.$var === D?U(L[166],"link"):link70.$var;
$al335 = L[167];
var anf_method_obj340 = G(self332,"rest",L[167]);
$step330 = 5;
$al335 = L[168];
$field341 = R.getColonFieldLoc(anf_method_obj340,"filter",L[168]);
if(R.isMethod($field341)) {
$ans334 = $field341.full_meth(anf_method_obj340,f333);
} else {
if(!(R.isFunction($field341))) {
R.ffi.throwNonFunApp(L[168],$field341);
}
$ans334 = $field341.app(f333);
}
break;
case 5: var anf_arg347 = $ans334;
$step330 = 7;
$al335 = L[169];
if(!(R.isFunction(anf_fun342))) {
R.ffi.throwNonFunApp($al335,anf_fun342);
}
$ans334 = anf_fun342.app(arg_343,anf_arg347);
break;
case 6: $al335 = L[170];
var anf_method_obj348 = G(self332,"rest",L[170]);
$step330 = 7;
$al335 = L[171];
$field349 = R.getColonFieldLoc(anf_method_obj348,"filter",L[171]);
if(R.isMethod($field349)) {
$ans334 = $field349.full_meth(anf_method_obj348,f333);
} else {
if(!(R.isFunction($field349))) {
R.ffi.throwNonFunApp(L[171],$field349);
}
$ans334 = $field349.app(f333);
}
break;
case 7: var ann_check_temp350 = $ans334;
$step330 = 8;
$al335 = L[172];
R._checkAnn(L[172],List51,ann_check_temp350);
break;
case 8: $step330 = 9;
$ans334 = ann_check_temp350;
break;
case 9: ++R.GAS;
return $ans334;
default: throw "No case numbered " + $step330 + " in $temp_full331";
}
}
} catch($e352) {
if(R.isCont($e352) && ($step330 !== 9)) {
$e352.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al335,$temp_full331,$step330,[self332,f333],[arg_343,anf_fun342,ann_check_temp350]);
}
if(R.isPyretException($e352)) {
$e352.pyretStack.push($al335);
}
throw $e352;
}
};
var anf_variant_member662 = R.makeMethod1($temp_full331,"filter");
var $temp_full354 = function($self355,$f356) {
var $step353 = 0;
var $ans358 = D;
var $al359 = L[183];
try {
if(R.isActivationRecord($self355)) {
$step353 = $self355.step;
$al359 = $self355.from;
$ans358 = $self355.ans;
self355 = $self355.args[0];
f356 = $self355.args[1];
ann_check_temp363 = $self355.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[183],2,$t);
}
var self355 = $self355;
var f356 = $f356;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step353) {
case 0: $step353 = 1;
$al359 = L[181];
R._checkAnn(L[181],List51,self355);
break;
case 1: $step353 = 2;
$al359 = L[182];
R._checkAnn(L[182],R.Function,f356);
break;
case 2: var anf_fun362 = partition360.$var === D?U(L[176],"partition"):partition360.$var;
$step353 = 3;
$al359 = L[180];
if(!(R.isFunction(anf_fun362))) {
R.ffi.throwNonFunApp($al359,anf_fun362);
}
$ans358 = anf_fun362.app(f356,self355);
break;
case 3: var ann_check_temp363 = $ans358;
$step353 = 4;
$al359 = L[179];
R._checkAnn(L[179],R.makeRecordAnn(["is-true","is-false"],[L[177],L[178]],{"is-true":List51,
"is-false":List51}),ann_check_temp363);
break;
case 4: $step353 = 5;
$ans358 = ann_check_temp363;
break;
case 5: ++R.GAS;
return $ans358;
default: throw "No case numbered " + $step353 + " in $temp_full354";
}
}
} catch($e364) {
if(R.isCont($e364) && ($step353 !== 5)) {
$e364.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al359,$temp_full354,$step353,[self355,f356],[ann_check_temp363]);
}
if(R.isPyretException($e364)) {
$e364.pyretStack.push($al359);
}
throw $e364;
}
};
var anf_variant_member663 = R.makeMethod1($temp_full354,"partition");
var $temp_full366 = function($self367,$f368) {
var $step365 = 0;
var $ans369 = D;
var $al370 = L[190];
try {
if(R.isActivationRecord($self367)) {
$step365 = $self367.step;
$al370 = $self367.from;
$ans369 = $self367.ans;
self367 = $self367.args[0];
f368 = $self367.args[1];
ann_check_temp373 = $self367.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[190],2,$t);
}
var self367 = $self367;
var f368 = $f368;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step365) {
case 0: $step365 = 1;
$al370 = L[188];
R._checkAnn(L[188],List51,self367);
break;
case 1: $step365 = 2;
$al370 = L[189];
R._checkAnn(L[189],R.Function,f368);
break;
case 2: var anf_fun372 = find371.$var === D?U(L[184],"find"):find371.$var;
$step365 = 3;
$al370 = L[187];
if(!(R.isFunction(anf_fun372))) {
R.ffi.throwNonFunApp($al370,anf_fun372);
}
$ans369 = anf_fun372.app(f368,self367);
break;
case 3: var ann_check_temp373 = $ans369;
$step365 = 4;
$al370 = L[186];
R._checkAnn(L[186],R.getDotAnn(L[185],"O",O26,"Option"),ann_check_temp373);
break;
case 4: $step365 = 5;
$ans369 = ann_check_temp373;
break;
case 5: ++R.GAS;
return $ans369;
default: throw "No case numbered " + $step365 + " in $temp_full366";
}
}
} catch($e374) {
if(R.isCont($e374) && ($step365 !== 5)) {
$e374.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al370,$temp_full366,$step365,[self367,f368],[ann_check_temp373]);
}
if(R.isPyretException($e374)) {
$e374.pyretStack.push($al370);
}
throw $e374;
}
};
var anf_variant_member664 = R.makeMethod1($temp_full366,"find");
var $temp_full376 = function($self377,$elt378) {
var $step375 = 0;
var $ans379 = D;
var $al380 = L[199];
try {
if(R.isActivationRecord($self377)) {
$step375 = $self377.step;
$al380 = $self377.from;
$ans379 = $self377.ans;
self377 = $self377.args[0];
elt378 = $self377.args[1];
ann_check_temp388 = $self377.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[199],2,$t);
}
var self377 = $self377;
var elt378 = $elt378;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step375) {
case 0: $step375 = 1;
$al380 = L[197];
R._checkAnn(L[197],List51,self377);
break;
case 1: $step375 = 2;
$al380 = L[198];
R._checkAnn(L[198],R.Any,elt378);
break;
case 2: $al380 = L[191];
var anf_arg382 = G(self377,"first",L[191]);
$step375 = 3;
$al380 = L[196];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al380,equal$always2);
}
$ans379 = equal$always2.app(elt378,anf_arg382);
break;
case 3: var anf_arg383 = $ans379;
$al380 = L[192];
var anf_if389 = R.checkWrapBoolean(anf_arg383);
$step375 = R.isPyretTrue(anf_if389)?4:5;
break;
case 4: $step375 = 7;
$ans379 = (true);
break;
case 5: $al380 = L[193];
var anf_method_obj384 = G(self377,"rest",L[193]);
$step375 = 6;
$al380 = L[194];
$field385 = R.getColonFieldLoc(anf_method_obj384,"member",L[194]);
if(R.isMethod($field385)) {
$ans379 = $field385.full_meth(anf_method_obj384,elt378);
} else {
if(!(R.isFunction($field385))) {
R.ffi.throwNonFunApp(L[194],$field385);
}
$ans379 = $field385.app(elt378);
}
break;
case 6: var anf_arg387 = $ans379;
$step375 = 7;
$al380 = L[194];
$ans379 = R.checkWrapBoolean(anf_arg387);
break;
case 7: var ann_check_temp388 = $ans379;
$step375 = 8;
$al380 = L[195];
R._checkAnn(L[195],$type$Boolean9,ann_check_temp388);
break;
case 8: $step375 = 9;
$ans379 = ann_check_temp388;
break;
case 9: ++R.GAS;
return $ans379;
default: throw "No case numbered " + $step375 + " in $temp_full376";
}
}
} catch($e390) {
if(R.isCont($e390) && ($step375 !== 9)) {
$e390.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al380,$temp_full376,$step375,[self377,elt378],[ann_check_temp388]);
}
if(R.isPyretException($e390)) {
$e390.pyretStack.push($al380);
}
throw $e390;
}
};
var anf_variant_member665 = R.makeMethod1($temp_full376,"member");
var $temp_full392 = function($self393,$f394,$base395) {
var $step391 = 0;
var $ans396 = D;
var $al397 = L[208];
try {
if(R.isActivationRecord($self393)) {
$step391 = $self393.step;
$al397 = $self393.from;
$ans396 = $self393.ans;
self393 = $self393.args[0];
f394 = $self393.args[1];
base395 = $self393.args[2];
anf_arg404 = $self393.vars[0];
ann_check_temp409 = $self393.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[208],3,$t);
}
var self393 = $self393;
var f394 = $f394;
var base395 = $base395;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step391) {
case 0: $step391 = 1;
$al397 = L[205];
R._checkAnn(L[205],List51,self393);
break;
case 1: $step391 = 2;
$al397 = L[206];
R._checkAnn(L[206],R.Function,f394);
break;
case 2: $step391 = 3;
$al397 = L[207];
R._checkAnn(L[207],R.Any,base395);
break;
case 3: $al397 = L[200];
var anf_arg404 = G(self393,"first",L[200]);
$al397 = L[201];
var anf_method_obj398 = G(self393,"rest",L[201]);
$step391 = 4;
$al397 = L[202];
$field400 = R.getColonFieldLoc(anf_method_obj398,"foldr",L[202]);
if(R.isMethod($field400)) {
$ans396 = $field400.full_meth(anf_method_obj398,f394,base395);
} else {
if(!(R.isFunction($field400))) {
R.ffi.throwNonFunApp(L[202],$field400);
}
$ans396 = $field400.app(f394,base395);
}
break;
case 4: var anf_arg408 = $ans396;
$step391 = 5;
$al397 = L[204];
if(!(R.isFunction(f394))) {
R.ffi.throwNonFunApp($al397,f394);
}
$ans396 = f394.app(anf_arg404,anf_arg408);
break;
case 5: var ann_check_temp409 = $ans396;
$step391 = 6;
$al397 = L[203];
R._checkAnn(L[203],R.Any,ann_check_temp409);
break;
case 6: $step391 = 7;
$ans396 = ann_check_temp409;
break;
case 7: ++R.GAS;
return $ans396;
default: throw "No case numbered " + $step391 + " in $temp_full392";
}
}
} catch($e410) {
if(R.isCont($e410) && ($step391 !== 7)) {
$e410.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al397,$temp_full392,$step391,[self393,f394,base395],[anf_arg404,ann_check_temp409]);
}
if(R.isPyretException($e410)) {
$e410.pyretStack.push($al397);
}
throw $e410;
}
};
var anf_variant_member666 = R.makeMethod2($temp_full392,"foldr");
var $temp_full412 = function($self413,$f414,$base415) {
var $step411 = 0;
var $ans416 = D;
var $al417 = L[217];
try {
if(R.isActivationRecord($self413)) {
$step411 = $self413.step;
$al417 = $self413.from;
$ans416 = $self413.ans;
self413 = $self413.args[0];
f414 = $self413.args[1];
base415 = $self413.args[2];
anf_method_obj419 = $self413.vars[0];
ann_check_temp422 = $self413.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[217],3,$t);
}
var self413 = $self413;
var f414 = $f414;
var base415 = $base415;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step411) {
case 0: $step411 = 1;
$al417 = L[214];
R._checkAnn(L[214],List51,self413);
break;
case 1: $step411 = 2;
$al417 = L[215];
R._checkAnn(L[215],R.Function,f414);
break;
case 2: $step411 = 3;
$al417 = L[216];
R._checkAnn(L[216],R.Any,base415);
break;
case 3: $al417 = L[209];
var anf_method_obj419 = G(self413,"rest",L[209]);
$al417 = L[210];
var anf_arg418 = G(self413,"first",L[210]);
$step411 = 4;
$al417 = L[213];
if(!(R.isFunction(f414))) {
R.ffi.throwNonFunApp($al417,f414);
}
$ans416 = f414.app(anf_arg418,base415);
break;
case 4: var anf_arg420 = $ans416;
$step411 = 5;
$al417 = L[211];
$field421 = R.getColonFieldLoc(anf_method_obj419,"foldl",L[211]);
if(R.isMethod($field421)) {
$ans416 = $field421.full_meth(anf_method_obj419,f414,anf_arg420);
} else {
if(!(R.isFunction($field421))) {
R.ffi.throwNonFunApp(L[211],$field421);
}
$ans416 = $field421.app(f414,anf_arg420);
}
break;
case 5: var ann_check_temp422 = $ans416;
$step411 = 6;
$al417 = L[212];
R._checkAnn(L[212],R.Any,ann_check_temp422);
break;
case 6: $step411 = 7;
$ans416 = ann_check_temp422;
break;
case 7: ++R.GAS;
return $ans416;
default: throw "No case numbered " + $step411 + " in $temp_full412";
}
}
} catch($e423) {
if(R.isCont($e423) && ($step411 !== 7)) {
$e423.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al417,$temp_full412,$step411,[self413,f414,base415],[anf_method_obj419,ann_check_temp422]);
}
if(R.isPyretException($e423)) {
$e423.pyretStack.push($al417);
}
throw $e423;
}
};
var anf_variant_member667 = R.makeMethod2($temp_full412,"foldl");
var $temp_full425 = function($self426,$f427) {
var $step424 = 0;
var $ans428 = D;
var $al429 = L[225];
try {
if(R.isActivationRecord($self426)) {
$step424 = $self426.step;
$al429 = $self426.from;
$ans428 = $self426.ans;
self426 = $self426.args[0];
f427 = $self426.args[1];
ann_check_temp440 = $self426.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[225],2,$t);
}
var self426 = $self426;
var f427 = $f427;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step424) {
case 0: $step424 = 1;
$al429 = L[223];
R._checkAnn(L[223],List51,self426);
break;
case 1: $step424 = 2;
$al429 = L[224];
R._checkAnn(L[224],R.Function,f427);
break;
case 2: $al429 = L[218];
var anf_arg434 = G(self426,"first",L[218]);
$step424 = 3;
$al429 = L[219];
if(!(R.isFunction(f427))) {
R.ffi.throwNonFunApp($al429,f427);
}
$ans428 = f427.app(anf_arg434);
break;
case 3: var anf_arg53 = $ans428;
$al429 = L[219];
var anf_if441 = R.checkWrapBoolean(anf_arg53);
$step424 = R.isPyretTrue(anf_if441)?4:6;
break;
case 4: $al429 = L[220];
var anf_method_obj435 = G(self426,"rest",L[220]);
$step424 = 5;
$al429 = L[221];
$field437 = R.getColonFieldLoc(anf_method_obj435,"all",L[221]);
if(R.isMethod($field437)) {
$ans428 = $field437.full_meth(anf_method_obj435,f427);
} else {
if(!(R.isFunction($field437))) {
R.ffi.throwNonFunApp(L[221],$field437);
}
$ans428 = $field437.app(f427);
}
break;
case 5: var anf_arg439 = $ans428;
$step424 = 7;
$al429 = L[221];
$ans428 = R.checkWrapBoolean(anf_arg439);
break;
case 6: $step424 = 7;
$ans428 = (false);
break;
case 7: var ann_check_temp440 = $ans428;
$step424 = 8;
$al429 = L[222];
R._checkAnn(L[222],$type$Boolean9,ann_check_temp440);
break;
case 8: $step424 = 9;
$ans428 = ann_check_temp440;
break;
case 9: ++R.GAS;
return $ans428;
default: throw "No case numbered " + $step424 + " in $temp_full425";
}
}
} catch($e442) {
if(R.isCont($e442) && ($step424 !== 9)) {
$e442.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al429,$temp_full425,$step424,[self426,f427],[ann_check_temp440]);
}
if(R.isPyretException($e442)) {
$e442.pyretStack.push($al429);
}
throw $e442;
}
};
var anf_variant_member668 = R.makeMethod1($temp_full425,"all");
var $temp_full444 = function($self445,$f446) {
var $step443 = 0;
var $ans447 = D;
var $al448 = L[233];
try {
if(R.isActivationRecord($self445)) {
$step443 = $self445.step;
$al448 = $self445.from;
$ans447 = $self445.ans;
self445 = $self445.args[0];
f446 = $self445.args[1];
ann_check_temp455 = $self445.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[233],2,$t);
}
var self445 = $self445;
var f446 = $f446;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step443) {
case 0: $step443 = 1;
$al448 = L[231];
R._checkAnn(L[231],List51,self445);
break;
case 1: $step443 = 2;
$al448 = L[232];
R._checkAnn(L[232],R.Function,f446);
break;
case 2: $al448 = L[226];
var anf_arg451 = G(self445,"first",L[226]);
$step443 = 3;
$al448 = L[227];
if(!(R.isFunction(f446))) {
R.ffi.throwNonFunApp($al448,f446);
}
$ans447 = f446.app(anf_arg451);
break;
case 3: var anf_arg71 = $ans447;
$al448 = L[227];
var anf_if456 = R.checkWrapBoolean(anf_arg71);
$step443 = R.isPyretTrue(anf_if456)?4:5;
break;
case 4: $step443 = 7;
$ans447 = (true);
break;
case 5: $al448 = L[228];
var anf_method_obj453 = G(self445,"rest",L[228]);
$step443 = 6;
$al448 = L[229];
$field454 = R.getColonFieldLoc(anf_method_obj453,"any",L[229]);
if(R.isMethod($field454)) {
$ans447 = $field454.full_meth(anf_method_obj453,f446);
} else {
if(!(R.isFunction($field454))) {
R.ffi.throwNonFunApp(L[229],$field454);
}
$ans447 = $field454.app(f446);
}
break;
case 6: var anf_arg78 = $ans447;
$step443 = 7;
$al448 = L[229];
$ans447 = R.checkWrapBoolean(anf_arg78);
break;
case 7: var ann_check_temp455 = $ans447;
$step443 = 8;
$al448 = L[230];
R._checkAnn(L[230],$type$Boolean9,ann_check_temp455);
break;
case 8: $step443 = 9;
$ans447 = ann_check_temp455;
break;
case 9: ++R.GAS;
return $ans447;
default: throw "No case numbered " + $step443 + " in $temp_full444";
}
}
} catch($e457) {
if(R.isCont($e457) && ($step443 !== 9)) {
$e457.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al448,$temp_full444,$step443,[self445,f446],[ann_check_temp455]);
}
if(R.isPyretException($e457)) {
$e457.pyretStack.push($al448);
}
throw $e457;
}
};
var anf_variant_member669 = R.makeMethod1($temp_full444,"any");
var $temp_full459 = function($self195,$other460) {
var $step458 = 0;
var $ans461 = D;
var $al462 = L[242];
try {
if(R.isActivationRecord($self195)) {
$step458 = $self195.step;
$al462 = $self195.from;
$ans461 = $self195.ans;
self195 = $self195.args[0];
other460 = $self195.args[1];
arg_466 = $self195.vars[0];
anf_fun465 = $self195.vars[1];
ann_check_temp467 = $self195.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[242],2,$t);
}
var self195 = $self195;
var other460 = $other460;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step458) {
case 0: $step458 = 1;
$al462 = L[240];
R._checkAnn(L[240],List51,self195);
break;
case 1: $step458 = 2;
$al462 = L[241];
R._checkAnn(L[241],List51,other460);
break;
case 2: $al462 = L[234];
var arg_466 = G(self195,"first",L[234]);
var anf_fun465 = link70.$var === D?U(L[235],"link"):link70.$var;
$al462 = L[236];
var anf_method_obj463 = G(self195,"rest",L[236]);
$step458 = 3;
$al462 = L[237];
$field464 = R.getColonFieldLoc(anf_method_obj463,"append",L[237]);
if(R.isMethod($field464)) {
$ans461 = $field464.full_meth(anf_method_obj463,other460);
} else {
if(!(R.isFunction($field464))) {
R.ffi.throwNonFunApp(L[237],$field464);
}
$ans461 = $field464.app(other460);
}
break;
case 3: var anf_arg88 = $ans461;
$step458 = 4;
$al462 = L[239];
if(!(R.isFunction(anf_fun465))) {
R.ffi.throwNonFunApp($al462,anf_fun465);
}
$ans461 = anf_fun465.app(arg_466,anf_arg88);
break;
case 4: var ann_check_temp467 = $ans461;
$step458 = 5;
$al462 = L[238];
R._checkAnn(L[238],List51,ann_check_temp467);
break;
case 5: $step458 = 6;
$ans461 = ann_check_temp467;
break;
case 6: ++R.GAS;
return $ans461;
default: throw "No case numbered " + $step458 + " in $temp_full459";
}
}
} catch($e468) {
if(R.isCont($e468) && ($step458 !== 6)) {
$e468.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al462,$temp_full459,$step458,[self195,other460],[arg_466,anf_fun465,ann_check_temp467]);
}
if(R.isPyretException($e468)) {
$e468.pyretStack.push($al462);
}
throw $e468;
}
};
var anf_variant_member670 = R.makeMethod1($temp_full459,"append");
var $temp_full470 = function($self205) {
var $step469 = 0;
var $ans471 = D;
var $al472 = L[251];
try {
if(R.isActivationRecord($self205)) {
$step469 = $self205.step;
$al472 = $self205.from;
$ans471 = $self205.ans;
self205 = $self205.args[0];
ann_check_temp477 = $self205.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[251],1,$t);
}
var self205 = $self205;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step469) {
case 0: $step469 = 1;
$al472 = L[250];
R._checkAnn(L[250],List51,self205);
break;
case 1: var anf_fun474 = is$empty473.$var === D?U(L[243],"is-empty"):is$empty473.$var;
$al472 = L[244];
var anf_arg475 = G(self205,"rest",L[244]);
$step469 = 2;
$al472 = L[245];
if(!(R.isFunction(anf_fun474))) {
R.ffi.throwNonFunApp($al472,anf_fun474);
}
$ans471 = anf_fun474.app(anf_arg475);
break;
case 2: var anf_arg115 = $ans471;
$al472 = L[245];
var anf_if478 = R.checkWrapBoolean(anf_arg115);
$step469 = R.isPyretTrue(anf_if478)?3:4;
break;
case 3: $step469 = 5;
$al472 = L[246];
$ans471 = G(self205,"first",L[246]);
break;
case 4: $al472 = L[247];
var anf_method_obj106 = G(self205,"rest",L[247]);
$step469 = 5;
$al472 = L[248];
$field476 = R.getColonFieldLoc(anf_method_obj106,"last",L[248]);
if(R.isMethod($field476)) {
$ans471 = $field476.full_meth(anf_method_obj106);
} else {
if(!(R.isFunction($field476))) {
R.ffi.throwNonFunApp(L[248],$field476);
}
$ans471 = $field476.app();
}
break;
case 5: var ann_check_temp477 = $ans471;
$step469 = 6;
$al472 = L[249];
R._checkAnn(L[249],R.Any,ann_check_temp477);
break;
case 6: $step469 = 7;
$ans471 = ann_check_temp477;
break;
case 7: ++R.GAS;
return $ans471;
default: throw "No case numbered " + $step469 + " in $temp_full470";
}
}
} catch($e479) {
if(R.isCont($e479) && ($step469 !== 7)) {
$e479.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al472,$temp_full470,$step469,[self205],[ann_check_temp477]);
}
if(R.isPyretException($e479)) {
$e479.pyretStack.push($al472);
}
throw $e479;
}
};
var anf_variant_member671 = R.makeMethod0($temp_full470,"last");
var $temp_full481 = function($self482) {
var $step480 = 0;
var $ans483 = D;
var $al484 = L[257];
try {
if(R.isActivationRecord($self482)) {
$step480 = $self482.step;
$al484 = $self482.from;
$ans483 = $self482.ans;
self482 = $self482.args[0];
ann_check_temp487 = $self482.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[257],1,$t);
}
var self482 = $self482;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step480) {
case 0: $step480 = 1;
$al484 = L[256];
R._checkAnn(L[256],List51,self482);
break;
case 1: var anf_fun486 = reverse$help485.$var === D?U(L[252],"reverse-help"):reverse$help485.$var;
var anf_arg111 = empty158.$var === D?U(L[253],"empty"):empty158.$var;
$step480 = 2;
$al484 = L[255];
if(!(R.isFunction(anf_fun486))) {
R.ffi.throwNonFunApp($al484,anf_fun486);
}
$ans483 = anf_fun486.app(self482,anf_arg111);
break;
case 2: var ann_check_temp487 = $ans483;
$step480 = 3;
$al484 = L[254];
R._checkAnn(L[254],List51,ann_check_temp487);
break;
case 3: $step480 = 4;
$ans483 = ann_check_temp487;
break;
case 4: ++R.GAS;
return $ans483;
default: throw "No case numbered " + $step480 + " in $temp_full481";
}
}
} catch($e488) {
if(R.isCont($e488) && ($step480 !== 4)) {
$e488.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al484,$temp_full481,$step480,[self482],[ann_check_temp487]);
}
if(R.isPyretException($e488)) {
$e488.pyretStack.push($al484);
}
throw $e488;
}
};
var anf_variant_member672 = R.makeMethod0($temp_full481,"reverse");
var $temp_full490 = function($self491,$tostring492) {
var $step489 = 0;
var $ans494 = D;
var $al495 = L[271];
try {
if(R.isActivationRecord($self491)) {
$step489 = $self491.step;
$al495 = $self491.from;
$ans494 = $self491.ans;
self491 = $self491.args[0];
tostring492 = $self491.args[1];
anf_fun505 = $self491.vars[0];
anf_arg508 = $self491.vars[1];
ann_check_temp517 = $self491.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[271],2,$t);
}
var self491 = $self491;
var tostring492 = $tostring492;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step489) {
case 0: $step489 = 1;
$al495 = L[269];
R._checkAnn(L[269],List51,self491);
break;
case 1: $step489 = 2;
$al495 = L[270];
R._checkAnn(L[270],R.Function,tostring492);
break;
case 2: var anf_fun505 = fold496.$var === D?U(L[258],"fold"):fold496.$var;
var $temp_lam498 = function($combined499,$elt500) {
var $step497 = 0;
var $ans501 = D;
var $al502 = L[262];
try {
if(R.isActivationRecord($combined499)) {
$step497 = $combined499.step;
$al502 = $combined499.from;
$ans501 = $combined499.ans;
combined499 = $combined499.args[0];
elt500 = $combined499.args[1];
anf_arg129 = $combined499.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[262],2,$t);
}
var combined499 = $combined499;
var elt500 = $elt500;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step497) {
case 0: $step497 = 1;
$al502 = L[261];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al502,_plus1);
}
$ans501 = _plus1.app(combined499,(", "));
break;
case 1: var anf_arg129 = $ans501;
$step497 = 2;
$al502 = L[260];
if(!(R.isFunction(tostring492))) {
R.ffi.throwNonFunApp($al502,tostring492);
}
$ans501 = tostring492.app(elt500);
break;
case 2: var anf_arg503 = $ans501;
$step497 = 3;
$al502 = L[259];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al502,_plus1);
}
$ans501 = _plus1.app(anf_arg129,anf_arg503);
break;
case 3: ++R.GAS;
return $ans501;
default: throw "No case numbered " + $step497 + " in $temp_lam498";
}
}
} catch($e504) {
if(R.isCont($e504) && ($step497 !== 3)) {
$e504.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al502,$temp_lam498,$step497,[combined499,elt500],[anf_arg129]);
}
if(R.isPyretException($e504)) {
$e504.pyretStack.push($al502);
}
throw $e504;
}
};
var anf_arg508 = R.makeFunction($temp_lam498,"for-body<line 203, column 8>");
$al495 = L[263];
var anf_arg149 = G(self491,"first",L[263]);
$step489 = 3;
$al495 = L[268];
if(!(R.isFunction(tostring492))) {
R.ffi.throwNonFunApp($al495,tostring492);
}
$ans494 = tostring492.app(anf_arg149);
break;
case 3: var anf_arg510 = $ans494;
$al495 = L[264];
var anf_arg511 = G(self491,"rest",L[264]);
$step489 = 4;
$al495 = L[262];
if(!(R.isFunction(anf_fun505))) {
R.ffi.throwNonFunApp($al495,anf_fun505);
}
$ans494 = anf_fun505.app(anf_arg508,anf_arg510,anf_arg511);
break;
case 4: var anf_arg167 = $ans494;
$step489 = 5;
$al495 = L[267];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al495,_plus1);
}
$ans494 = _plus1.app(("[list: "),anf_arg167);
break;
case 5: var anf_arg516 = $ans494;
$step489 = 6;
$al495 = L[266];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al495,_plus1);
}
$ans494 = _plus1.app(anf_arg516,("]"));
break;
case 6: var ann_check_temp517 = $ans494;
$step489 = 7;
$al495 = L[265];
R._checkAnn(L[265],$type$String7,ann_check_temp517);
break;
case 7: $step489 = 8;
$ans494 = ann_check_temp517;
break;
case 8: ++R.GAS;
return $ans494;
default: throw "No case numbered " + $step489 + " in $temp_full490";
}
}
} catch($e519) {
if(R.isCont($e519) && ($step489 !== 8)) {
$e519.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al495,$temp_full490,$step489,[self491,tostring492],[anf_fun505,anf_arg508,ann_check_temp517]);
}
if(R.isPyretException($e519)) {
$e519.pyretStack.push($al495);
}
throw $e519;
}
};
var anf_variant_member673 = R.makeMethod1($temp_full490,"_tostring");
var $temp_full521 = function($self522,$torepr523) {
var $step520 = 0;
var $ans524 = D;
var $al525 = L[285];
try {
if(R.isActivationRecord($self522)) {
$step520 = $self522.step;
$al525 = $self522.from;
$ans524 = $self522.ans;
self522 = $self522.args[0];
torepr523 = $self522.args[1];
anf_fun534 = $self522.vars[0];
anf_arg535 = $self522.vars[1];
ann_check_temp542 = $self522.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[285],2,$t);
}
var self522 = $self522;
var torepr523 = $torepr523;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step520) {
case 0: $step520 = 1;
$al525 = L[283];
R._checkAnn(L[283],List51,self522);
break;
case 1: $step520 = 2;
$al525 = L[284];
R._checkAnn(L[284],R.Function,torepr523);
break;
case 2: var anf_fun534 = fold496.$var === D?U(L[272],"fold"):fold496.$var;
var $temp_lam527 = function($combined528,$elt529) {
var $step526 = 0;
var $ans530 = D;
var $al531 = L[276];
try {
if(R.isActivationRecord($combined528)) {
$step526 = $combined528.step;
$al531 = $combined528.from;
$ans530 = $combined528.ans;
combined528 = $combined528.args[0];
elt529 = $combined528.args[1];
anf_arg183 = $combined528.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[276],2,$t);
}
var combined528 = $combined528;
var elt529 = $elt529;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step526) {
case 0: $step526 = 1;
$al531 = L[275];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al531,_plus1);
}
$ans530 = _plus1.app(combined528,(", "));
break;
case 1: var anf_arg183 = $ans530;
$step526 = 2;
$al531 = L[274];
if(!(R.isFunction(torepr523))) {
R.ffi.throwNonFunApp($al531,torepr523);
}
$ans530 = torepr523.app(elt529);
break;
case 2: var anf_arg184 = $ans530;
$step526 = 3;
$al531 = L[273];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al531,_plus1);
}
$ans530 = _plus1.app(anf_arg183,anf_arg184);
break;
case 3: ++R.GAS;
return $ans530;
default: throw "No case numbered " + $step526 + " in $temp_lam527";
}
}
} catch($e533) {
if(R.isCont($e533) && ($step526 !== 3)) {
$e533.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al531,$temp_lam527,$step526,[combined528,elt529],[anf_arg183]);
}
if(R.isPyretException($e533)) {
$e533.pyretStack.push($al531);
}
throw $e533;
}
};
var anf_arg535 = R.makeFunction($temp_lam527,"for-body<line 211, column 8>");
$al525 = L[277];
var anf_arg185 = G(self522,"first",L[277]);
$step520 = 3;
$al525 = L[282];
if(!(R.isFunction(torepr523))) {
R.ffi.throwNonFunApp($al525,torepr523);
}
$ans524 = torepr523.app(anf_arg185);
break;
case 3: var anf_arg536 = $ans524;
$al525 = L[278];
var anf_arg537 = G(self522,"rest",L[278]);
$step520 = 4;
$al525 = L[276];
if(!(R.isFunction(anf_fun534))) {
R.ffi.throwNonFunApp($al525,anf_fun534);
}
$ans524 = anf_fun534.app(anf_arg535,anf_arg536,anf_arg537);
break;
case 4: var anf_arg200 = $ans524;
$step520 = 5;
$al525 = L[281];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al525,_plus1);
}
$ans524 = _plus1.app(("[list: "),anf_arg200);
break;
case 5: var anf_arg541 = $ans524;
$step520 = 6;
$al525 = L[280];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al525,_plus1);
}
$ans524 = _plus1.app(anf_arg541,("]"));
break;
case 6: var ann_check_temp542 = $ans524;
$step520 = 7;
$al525 = L[279];
R._checkAnn(L[279],$type$String7,ann_check_temp542);
break;
case 7: $step520 = 8;
$ans524 = ann_check_temp542;
break;
case 8: ++R.GAS;
return $ans524;
default: throw "No case numbered " + $step520 + " in $temp_full521";
}
}
} catch($e543) {
if(R.isCont($e543) && ($step520 !== 8)) {
$e543.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al525,$temp_full521,$step520,[self522,torepr523],[anf_fun534,anf_arg535,ann_check_temp542]);
}
if(R.isPyretException($e543)) {
$e543.pyretStack.push($al525);
}
throw $e543;
}
};
var anf_variant_member6083 = R.makeMethod1($temp_full521,"_torepr");
var $temp_full545 = function($self546,$cmp547,$eq548) {
var $step544 = 0;
var $ans549 = D;
var $al550 = L[308];
try {
if(R.isActivationRecord($self546)) {
$step544 = $self546.step;
$al550 = $self546.from;
$ans549 = $self546.ans;
self546 = $self546.args[0];
cmp547 = $self546.args[1];
eq548 = $self546.args[2];
are$lt557 = $self546.vars[0];
are$eq562 = $self546.vars[1];
are$gt569 = $self546.vars[2];
less585 = $self546.vars[3];
equal582 = $self546.vars[4];
ann_check_temp588 = $self546.vars[5];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[308],3,$t);
}
var self546 = $self546;
var cmp547 = $cmp547;
var eq548 = $eq548;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step544) {
case 0: $step544 = 1;
$al550 = L[305];
R._checkAnn(L[305],List51,self546);
break;
case 1: $step544 = 2;
$al550 = L[306];
R._checkAnn(L[306],R.Function,cmp547);
break;
case 2: $step544 = 3;
$al550 = L[307];
R._checkAnn(L[307],R.Function,eq548);
break;
case 3: $al550 = L[286];
var pivot556 = G(self546,"first",L[286]);
var var591 = empty158.$var === D?U(L[287],"empty"):empty158.$var;
var are$lt557 = {"$var":var591};
var var590 = empty158.$var === D?U(L[288],"empty"):empty158.$var;
var are$eq562 = {"$var":var590};
var var589 = empty158.$var === D?U(L[289],"empty"):empty158.$var;
var are$gt569 = {"$var":var589};
var $temp_lam552 = function($e553) {
var $step551 = 0;
var $ans554 = D;
var $al555 = L[298];
try {
if(R.isActivationRecord($e553)) {
$step551 = $e553.step;
$al555 = $e553.from;
$ans554 = $e553.ans;
e553 = $e553.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[298],1,$t);
}
var e553 = $e553;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step551) {
case 0: $step551 = 1;
$al555 = L[290];
if(!(R.isFunction(cmp547))) {
R.ffi.throwNonFunApp($al555,cmp547);
}
$ans554 = cmp547.app(e553,pivot556);
break;
case 1: var anf_arg220 = $ans554;
$al555 = L[290];
var anf_if574 = R.checkWrapBoolean(anf_arg220);
$step551 = R.isPyretTrue(anf_if574)?2:4;
break;
case 2: var arg_559 = e553;
var anf_fun558 = link70.$var === D?U(L[291],"link"):link70.$var;
var anf_arg231 = are$lt557.$var;
$step551 = 3;
$al555 = L[292];
if(!(R.isFunction(anf_fun558))) {
R.ffi.throwNonFunApp($al555,anf_fun558);
}
$ans554 = anf_fun558.app(arg_559,anf_arg231);
break;
case 3: var anf_assign560 = $ans554;
$step551 = 10;
$ans554 = are$lt557.$var = anf_assign560;
break;
case 4: $step551 = 5;
$al555 = L[293];
if(!(R.isFunction(eq548))) {
R.ffi.throwNonFunApp($al555,eq548);
}
$ans554 = eq548.app(e553,pivot556);
break;
case 5: var anf_arg561 = $ans554;
$al555 = L[293];
var anf_if573 = R.checkWrapBoolean(anf_arg561);
$step551 = R.isPyretTrue(anf_if573)?6:8;
break;
case 6: var arg_564 = e553;
var anf_fun563 = link70.$var === D?U(L[294],"link"):link70.$var;
var anf_arg567 = are$eq562.$var;
$step551 = 7;
$al555 = L[295];
if(!(R.isFunction(anf_fun563))) {
R.ffi.throwNonFunApp($al555,anf_fun563);
}
$ans554 = anf_fun563.app(arg_564,anf_arg567);
break;
case 7: var anf_assign568 = $ans554;
$step551 = 10;
$ans554 = are$eq562.$var = anf_assign568;
break;
case 8: var arg_571 = e553;
var anf_fun570 = link70.$var === D?U(L[296],"link"):link70.$var;
var anf_arg254 = are$gt569.$var;
$step551 = 9;
$al555 = L[297];
if(!(R.isFunction(anf_fun570))) {
R.ffi.throwNonFunApp($al555,anf_fun570);
}
$ans554 = anf_fun570.app(arg_571,anf_arg254);
break;
case 9: var anf_assign572 = $ans554;
$step551 = 10;
$ans554 = are$gt569.$var = anf_assign572;
break;
case 10: ++R.GAS;
return $ans554;
default: throw "No case numbered " + $step551 + " in $temp_lam552";
}
}
} catch($e575) {
if(R.isCont($e575) && ($step551 !== 10)) {
$e575.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al555,$temp_lam552,$step551,[e553],[]);
}
if(R.isPyretException($e575)) {
$e575.pyretStack.push($al555);
}
throw $e575;
}
};
var anf_arg249 = R.makeFunction($temp_lam552,"");
$step544 = 4;
$al550 = L[299];
$field576 = R.getColonFieldLoc(self546,"each",L[299]);
if(R.isMethod($field576)) {
$ans549 = $field576.full_meth(self546,anf_arg249);
} else {
if(!(R.isFunction($field576))) {
R.ffi.throwNonFunApp(L[299],$field576);
}
$ans549 = $field576.app(anf_arg249);
}
break;
case 4: var anf_method_obj577 = are$lt557.$var;
$step544 = 5;
$al550 = L[300];
$field579 = R.getColonFieldLoc(anf_method_obj577,"sort-by",L[300]);
if(R.isMethod($field579)) {
$ans549 = $field579.full_meth(anf_method_obj577,cmp547,eq548);
} else {
if(!(R.isFunction($field579))) {
R.ffi.throwNonFunApp(L[300],$field579);
}
$ans549 = $field579.app(cmp547,eq548);
}
break;
case 5: var less585 = $ans549;
var equal582 = are$eq562.$var;
var anf_method_obj580 = are$gt569.$var;
$step544 = 6;
$al550 = L[301];
$field581 = R.getColonFieldLoc(anf_method_obj580,"sort-by",L[301]);
if(R.isMethod($field581)) {
$ans549 = $field581.full_meth(anf_method_obj580,cmp547,eq548);
} else {
if(!(R.isFunction($field581))) {
R.ffi.throwNonFunApp(L[301],$field581);
}
$ans549 = $field581.app(cmp547,eq548);
}
break;
case 6: var greater583 = $ans549;
$step544 = 7;
$al550 = L[302];
$field584 = R.getColonFieldLoc(equal582,"append",L[302]);
if(R.isMethod($field584)) {
$ans549 = $field584.full_meth(equal582,greater583);
} else {
if(!(R.isFunction($field584))) {
R.ffi.throwNonFunApp(L[302],$field584);
}
$ans549 = $field584.app(greater583);
}
break;
case 7: var anf_arg257 = $ans549;
$step544 = 8;
$al550 = L[303];
$field587 = R.getColonFieldLoc(less585,"append",L[303]);
if(R.isMethod($field587)) {
$ans549 = $field587.full_meth(less585,anf_arg257);
} else {
if(!(R.isFunction($field587))) {
R.ffi.throwNonFunApp(L[303],$field587);
}
$ans549 = $field587.app(anf_arg257);
}
break;
case 8: var ann_check_temp588 = $ans549;
$step544 = 9;
$al550 = L[304];
R._checkAnn(L[304],List51,ann_check_temp588);
break;
case 9: $step544 = 10;
$ans549 = ann_check_temp588;
break;
case 10: ++R.GAS;
return $ans549;
default: throw "No case numbered " + $step544 + " in $temp_full545";
}
}
} catch($e592) {
if(R.isCont($e592) && ($step544 !== 10)) {
$e592.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al550,$temp_full545,$step544,[self546,cmp547,eq548],[are$lt557,are$eq562,are$gt569,less585,equal582,ann_check_temp588]);
}
if(R.isPyretException($e592)) {
$e592.pyretStack.push($al550);
}
throw $e592;
}
};
var anf_variant_member674 = R.makeMethod2($temp_full545,"sort-by");
var $temp_full594 = function($self595) {
var $step593 = 0;
var $ans597 = D;
var $al598 = L[315];
try {
if(R.isActivationRecord($self595)) {
$step593 = $self595.step;
$al598 = $self595.from;
$ans597 = $self595.ans;
self595 = $self595.args[0];
anf_arg260 = $self595.vars[0];
ann_check_temp607 = $self595.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[315],1,$t);
}
var self595 = $self595;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step593) {
case 0: $step593 = 1;
$al598 = L[314];
R._checkAnn(L[314],List51,self595);
break;
case 1: var $temp_lam600 = function($e1601,$e2602) {
var $step599 = 0;
var $ans603 = D;
var $al604 = L[310];
try {
if(R.isActivationRecord($e1601)) {
$step599 = $e1601.step;
$al604 = $e1601.from;
$ans603 = $e1601.ans;
e1601 = $e1601.args[0];
e2602 = $e1601.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[310],2,$t);
}
var e1601 = $e1601;
var e2602 = $e2602;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step599) {
case 0: $step599 = 1;
$al604 = L[309];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al604,_lessthan10);
}
$ans603 = _lessthan10.app(e1601,e2602);
break;
case 1: ++R.GAS;
return $ans603;
default: throw "No case numbered " + $step599 + " in $temp_lam600";
}
}
} catch($e605) {
if(R.isCont($e605) && ($step599 !== 1)) {
$e605.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al604,$temp_lam600,$step599,[e1601,e2602],[]);
}
if(R.isPyretException($e605)) {
$e605.pyretStack.push($al604);
}
throw $e605;
}
};
var anf_arg260 = R.makeFunction($temp_lam600,"");
$step593 = 2;
$al598 = L[313];
if(!(R.isFunction(within17))) {
R.ffi.throwNonFunApp($al598,within17);
}
$ans597 = within17.app(R.makeNumberFromString("~0"));
break;
case 2: var anf_arg282 = $ans597;
$step593 = 3;
$al598 = L[311];
$field606 = R.getColonFieldLoc(self595,"sort-by",L[311]);
if(R.isMethod($field606)) {
$ans597 = $field606.full_meth(self595,anf_arg260,anf_arg282);
} else {
if(!(R.isFunction($field606))) {
R.ffi.throwNonFunApp(L[311],$field606);
}
$ans597 = $field606.app(anf_arg260,anf_arg282);
}
break;
case 3: var ann_check_temp607 = $ans597;
$step593 = 4;
$al598 = L[312];
R._checkAnn(L[312],List51,ann_check_temp607);
break;
case 4: $step593 = 5;
$ans597 = ann_check_temp607;
break;
case 5: ++R.GAS;
return $ans597;
default: throw "No case numbered " + $step593 + " in $temp_full594";
}
}
} catch($e608) {
if(R.isCont($e608) && ($step593 !== 5)) {
$e608.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al598,$temp_full594,$step593,[self595],[anf_arg260,ann_check_temp607]);
}
if(R.isPyretException($e608)) {
$e608.pyretStack.push($al598);
}
throw $e608;
}
};
var anf_variant_member675 = R.makeMethod0($temp_full594,"sort");
var $temp_full610 = function($self611,$str612) {
var $step609 = 0;
var $ans613 = D;
var $al614 = L[330];
try {
if(R.isActivationRecord($self611)) {
$step609 = $self611.step;
$al614 = $self611.from;
$ans613 = $self611.ans;
self611 = $self611.args[0];
str612 = $self611.args[1];
anf_arg275 = $self611.vars[0];
ann_check_temp619 = $self611.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[330],2,$t);
}
var self611 = $self611;
var str612 = $str612;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step609) {
case 0: $step609 = 1;
$al614 = L[328];
R._checkAnn(L[328],List51,self611);
break;
case 1: $step609 = 2;
$al614 = L[329];
R._checkAnn(L[329],$type$String7,str612);
break;
case 2: var anf_fun616 = is$link615.$var === D?U(L[316],"is-link"):is$link615.$var;
$al614 = L[317];
var anf_arg274 = G(self611,"rest",L[317]);
$step609 = 3;
$al614 = L[318];
if(!(R.isFunction(anf_fun616))) {
R.ffi.throwNonFunApp($al614,anf_fun616);
}
$ans613 = anf_fun616.app(anf_arg274);
break;
case 3: var anf_arg269 = $ans613;
$al614 = L[318];
var anf_if620 = R.checkWrapBoolean(anf_arg269);
$step609 = R.isPyretTrue(anf_if620)?4:8;
break;
case 4: $al614 = L[319];
var anf_arg267 = G(self611,"first",L[319]);
$step609 = 5;
$al614 = L[324];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al614,tostring1);
}
$ans613 = tostring1.app(anf_arg267);
break;
case 5: var anf_arg270 = $ans613;
$step609 = 6;
$al614 = L[323];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al614,_plus1);
}
$ans613 = _plus1.app(anf_arg270,str612);
break;
case 6: var anf_arg275 = $ans613;
$al614 = L[320];
var anf_method_obj617 = G(self611,"rest",L[320]);
$step609 = 7;
$al614 = L[321];
$field618 = R.getColonFieldLoc(anf_method_obj617,"join-str",L[321]);
if(R.isMethod($field618)) {
$ans613 = $field618.full_meth(anf_method_obj617,str612);
} else {
if(!(R.isFunction($field618))) {
R.ffi.throwNonFunApp(L[321],$field618);
}
$ans613 = $field618.app(str612);
}
break;
case 7: var anf_arg284 = $ans613;
$step609 = 9;
$al614 = L[322];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al614,_plus1);
}
$ans613 = _plus1.app(anf_arg275,anf_arg284);
break;
case 8: $al614 = L[325];
var anf_arg279 = G(self611,"first",L[325]);
$step609 = 9;
$al614 = L[326];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al614,tostring1);
}
$ans613 = tostring1.app(anf_arg279);
break;
case 9: var ann_check_temp619 = $ans613;
$step609 = 10;
$al614 = L[327];
R._checkAnn(L[327],$type$String7,ann_check_temp619);
break;
case 10: $step609 = 11;
$ans613 = ann_check_temp619;
break;
case 11: ++R.GAS;
return $ans613;
default: throw "No case numbered " + $step609 + " in $temp_full610";
}
}
} catch($e621) {
if(R.isCont($e621) && ($step609 !== 11)) {
$e621.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al614,$temp_full610,$step609,[self611,str612],[anf_arg275,ann_check_temp619]);
}
if(R.isPyretException($e621)) {
$e621.pyretStack.push($al614);
}
throw $e621;
}
};
var anf_variant_member676 = R.makeMethod1($temp_full610,"join-str");
var $empty_getfields655 = function(f) {
return f();
};
var $empty_getfieldsref653 = function(f) {
return f();
};
var $empty_mutablemask654 = [];
var $empty$base631 = {"_output":anf_shared622,
"_plus":anf_shared623,
"push":anf_shared624,
"split-at":anf_shared625,
"take":anf_shared626,
"drop":anf_shared627,
"get":anf_shared628,
"set":anf_shared629,
"remove":anf_shared630,
"length":anf_singleton_variant_member634,
"each":anf_singleton_variant_member635,
"map":anf_singleton_variant_member636,
"filter":anf_singleton_variant_member637,
"find":anf_singleton_variant_member638,
"partition":anf_singleton_variant_member639,
"foldr":anf_singleton_variant_member640,
"foldl":anf_singleton_variant_member641,
"all":anf_singleton_variant_member642,
"any":anf_singleton_variant_member643,
"member":anf_singleton_variant_member644,
"append":anf_singleton_variant_member645,
"last":anf_singleton_variant_member646,
"reverse":anf_singleton_variant_member647,
"_tostring":anf_singleton_variant_member648,
"_torepr":anf_singleton_variant_member649,
"sort-by":anf_singleton_variant_member650,
"sort":anf_singleton_variant_member651,
"join-str":anf_singleton_variant_member652,
"_match":R.makeMatch("empty",0)};
var $empty$brander632 = R.namedBrander("empty",L[331]);
var $empty$brands633 = {};
$empty$brands633[List37._brand] = true;
$empty$brands633[$empty$brander632._brand] = true;
var $link_getfields679 = function(f) {
return f(this.dict["first"],this.dict["rest"]);
};
var $link_getfieldsref677 = function(f,refmask) {
return f(R.derefField(this.dict["first"],false,refmask[0]),R.derefField(this.dict["rest"],false,refmask[1]));
};
var $link_mutablemask678 = [false,false];
var $link$base656 = {"$fieldNames":["first","rest"],
"_output":anf_shared622,
"_plus":anf_shared623,
"push":anf_shared624,
"split-at":anf_shared625,
"take":anf_shared626,
"drop":anf_shared627,
"get":anf_shared628,
"set":anf_shared629,
"remove":anf_shared630,
"length":anf_variant_member659,
"each":anf_variant_member660,
"map":anf_variant_member661,
"filter":anf_variant_member662,
"partition":anf_variant_member663,
"find":anf_variant_member664,
"member":anf_variant_member665,
"foldr":anf_variant_member666,
"foldl":anf_variant_member667,
"all":anf_variant_member668,
"any":anf_variant_member669,
"append":anf_variant_member670,
"last":anf_variant_member671,
"reverse":anf_variant_member672,
"_tostring":anf_variant_member673,
"_torepr":anf_variant_member6083,
"sort-by":anf_variant_member674,
"sort":anf_variant_member675,
"join-str":anf_variant_member676,
"_match":R.makeMatch("link",2)};
var $link$brander657 = R.namedBrander("link",L[332]);
var $link$brands658 = {};
$link$brands658[List37._brand] = true;
$link$brands658[$link$brander657._brand] = true;
var link680 = R.makeVariantConstructor(L[335],function() {
return [R.Any,List51];
},["first681","rest682"],[L[333],L[334]],[false,false],["first681","rest682"],$link_mutablemask678,$link$base656,$link$brands658,"link",$link_getfieldsref677,$link_getfields679,$link$base656);
var anf_assign683 = R.makeObject({"List":G(List37,"test",L[336]),
"is-empty":G($empty$brander632,"test",L[331]),
"empty":R.makeDataValue($empty$base631,$empty$brands633,"empty",$empty_getfieldsref653,$empty_getfields655,-1,$empty_mutablemask654,$empty$base631),
"is-link":G($link$brander657,"test",L[332]),
"link":link680});
List684.$var = anf_assign683;
var anf_bracket685 = List684.$var;
$al36 = L[336];
var anf_assign686 = G(anf_bracket685,"List",L[336]);
is$List687.$var = anf_assign686;
var anf_bracket688 = List684.$var;
$al36 = L[331];
var anf_assign689 = G(anf_bracket688,"is-empty",L[331]);
is$empty473.$var = anf_assign689;
var anf_bracket690 = List684.$var;
$al36 = L[331];
var anf_assign691 = G(anf_bracket690,"empty",L[331]);
empty158.$var = anf_assign691;
var anf_bracket692 = List684.$var;
$al36 = L[332];
var anf_assign693 = G(anf_bracket692,"is-link",L[332]);
is$link615.$var = anf_assign693;
var anf_bracket694 = List684.$var;
$al36 = L[332];
var anf_assign695 = G(anf_bracket694,"link",L[332]);
link70.$var = anf_assign695;
var $temp_lam697 = function($lst698,$n699) {
var $step696 = 0;
var $ans700 = D;
var $al701 = L[355];
try {
if(R.isActivationRecord($lst698)) {
$step696 = $lst698.step;
$al701 = $lst698.from;
$ans700 = $lst698.ans;
lst698 = $lst698.args[0];
n699 = $lst698.args[1];
help710 = $lst698.vars[0];
ann_check_temp717 = $lst698.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[355],2,$t);
}
var lst698 = $lst698;
var n699 = $n699;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step696) {
case 0: $step696 = 1;
$al701 = L[353];
R._checkAnn(L[353],List51,lst698);
break;
case 1: $step696 = 2;
$al701 = L[354];
R._checkAnn(L[354],$type$Number8,n699);
break;
case 2: var help710 = {"$var":D};
var $temp_lam703 = function($l704,$cur705) {
var $step702 = 0;
var $ans707 = D;
var $al708 = L[346];
try {
if(R.isActivationRecord($l704)) {
$step702 = $l704.step;
$al708 = $l704.from;
$ans707 = $l704.ans;
l704 = $l704.args[0];
cur705 = $l704.args[1];
anf_fun711 = $l704.vars[0];
anf_arg712 = $l704.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[346],2,$t);
}
var l704 = $l704;
var cur705 = $cur705;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step702) {
case 0: var anf_fun709 = is$empty473.$var;
$step702 = 1;
$al708 = L[337];
if(!(R.isFunction(anf_fun709))) {
R.ffi.throwNonFunApp($al708,anf_fun709);
}
$ans707 = anf_fun709.app(l704);
break;
case 1: var anf_arg320 = $ans707;
$al708 = L[337];
var anf_if384 = R.checkWrapBoolean(anf_arg320);
$step702 = R.isPyretTrue(anf_if384)?2:5;
break;
case 2: $step702 = 3;
$al708 = L[340];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al708,tostring1);
}
$ans707 = tostring1.app(n699);
break;
case 3: var anf_arg322 = $ans707;
$step702 = 4;
$al708 = L[339];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al708,_plus1);
}
$ans707 = _plus1.app(("get: n too large "),anf_arg322);
break;
case 4: var anf_arg324 = $ans707;
$step702 = 10;
$al708 = L[338];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al708,raise1);
}
$ans707 = raise1.app(anf_arg324);
break;
case 5: $step702 = 6;
$al708 = L[341];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al708,equal$always2);
}
$ans707 = equal$always2.app(cur705,(0));
break;
case 6: var anf_arg325 = $ans707;
$al708 = L[341];
var anf_if383 = R.checkWrapBoolean(anf_arg325);
$step702 = R.isPyretTrue(anf_if383)?7:8;
break;
case 7: $step702 = 10;
$al708 = L[342];
$ans707 = G(l704,"first",L[342]);
break;
case 8: var anf_fun711 = help710.$var;
$al708 = L[343];
var anf_arg712 = G(l704,"rest",L[343]);
$step702 = 9;
$al708 = L[345];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al708,_minus9);
}
$ans707 = _minus9.app(cur705,(1));
break;
case 9: var anf_arg327 = $ans707;
$step702 = 10;
$al708 = L[344];
if(!(R.isFunction(anf_fun711))) {
R.ffi.throwNonFunApp($al708,anf_fun711);
}
$ans707 = anf_fun711.app(anf_arg712,anf_arg327);
break;
case 10: ++R.GAS;
return $ans707;
default: throw "No case numbered " + $step702 + " in $temp_lam703";
}
}
} catch($e713) {
if(R.isCont($e713) && ($step702 !== 10)) {
$e713.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al708,$temp_lam703,$step702,[l704,cur705],[anf_fun711,anf_arg712]);
}
if(R.isPyretException($e713)) {
$e713.pyretStack.push($al708);
}
throw $e713;
}
};
var anf_assign714 = R.makeFunction($temp_lam703,"help");
help710.$var = anf_assign714;
$step696 = 3;
$al701 = L[347];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al701,_lessthan10);
}
$ans700 = _lessthan10.app(n699,(0));
break;
case 3: var anf_arg328 = $ans700;
$al701 = L[347];
var anf_if718 = R.checkWrapBoolean(anf_arg328);
$step696 = R.isPyretTrue(anf_if718)?4:7;
break;
case 4: $step696 = 5;
$al701 = L[350];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al701,tostring1);
}
$ans700 = tostring1.app(n699);
break;
case 5: var anf_arg715 = $ans700;
$step696 = 6;
$al701 = L[349];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al701,_plus1);
}
$ans700 = _plus1.app(("get: invalid argument: "),anf_arg715);
break;
case 6: var anf_arg349 = $ans700;
$step696 = 8;
$al701 = L[348];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al701,raise1);
}
$ans700 = raise1.app(anf_arg349);
break;
case 7: var anf_fun716 = help710.$var;
$step696 = 8;
$al701 = L[351];
if(!(R.isFunction(anf_fun716))) {
R.ffi.throwNonFunApp($al701,anf_fun716);
}
$ans700 = anf_fun716.app(lst698,n699);
break;
case 8: var ann_check_temp717 = $ans700;
$step696 = 9;
$al701 = L[352];
R._checkAnn(L[352],R.Any,ann_check_temp717);
break;
case 9: $step696 = 10;
$ans700 = ann_check_temp717;
break;
case 10: ++R.GAS;
return $ans700;
default: throw "No case numbered " + $step696 + " in $temp_lam697";
}
}
} catch($e719) {
if(R.isCont($e719) && ($step696 !== 10)) {
$e719.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al701,$temp_lam697,$step696,[lst698,n699],[help710,ann_check_temp717]);
}
if(R.isPyretException($e719)) {
$e719.pyretStack.push($al701);
}
throw $e719;
}
};
var anf_assign720 = R.makeFunction($temp_lam697,"get");
get112.$var = anf_assign720;
var $temp_lam722 = function($lst723,$n725,$v726) {
var $step721 = 0;
var $ans727 = D;
var $al728 = L[377];
try {
if(R.isActivationRecord($lst723)) {
$step721 = $lst723.step;
$al728 = $lst723.from;
$ans727 = $lst723.ans;
lst723 = $lst723.args[0];
n725 = $lst723.args[1];
v726 = $lst723.args[2];
help739 = $lst723.vars[0];
ann_check_temp759 = $lst723.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[377],3,$t);
}
var lst723 = $lst723;
var n725 = $n725;
var v726 = $v726;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step721) {
case 0: $step721 = 1;
$al728 = L[375];
R._checkAnn(L[375],List51,lst723);
break;
case 1: $step721 = 2;
$al728 = L[376];
R._checkAnn(L[376],$type$Number8,n725);
break;
case 2: var help739 = {"$var":D};
var $temp_lam730 = function($l731,$cur732) {
var $step729 = 0;
var $ans733 = D;
var $al734 = L[368];
try {
if(R.isActivationRecord($l731)) {
$step729 = $l731.step;
$al734 = $l731.from;
$ans733 = $l731.ans;
l731 = $l731.args[0];
cur732 = $l731.args[1];
arg_752 = $l731.vars[0];
anf_fun751 = $l731.vars[1];
anf_fun740 = $l731.vars[2];
anf_arg741 = $l731.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[368],2,$t);
}
var l731 = $l731;
var cur732 = $cur732;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step729) {
case 0: var anf_fun735 = is$empty473.$var;
$step729 = 1;
$al734 = L[356];
if(!(R.isFunction(anf_fun735))) {
R.ffi.throwNonFunApp($al734,anf_fun735);
}
$ans733 = anf_fun735.app(l731);
break;
case 1: var anf_arg350 = $ans733;
$al734 = L[356];
var anf_if754 = R.checkWrapBoolean(anf_arg350);
$step729 = R.isPyretTrue(anf_if754)?2:5;
break;
case 2: $step729 = 3;
$al734 = L[359];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al734,tostring1);
}
$ans733 = tostring1.app(n725);
break;
case 3: var anf_arg344 = $ans733;
$step729 = 4;
$al734 = L[358];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al734,_plus1);
}
$ans733 = _plus1.app(("set: n too large "),anf_arg344);
break;
case 4: var anf_arg736 = $ans733;
$step729 = 11;
$al734 = L[357];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al734,raise1);
}
$ans733 = raise1.app(anf_arg736);
break;
case 5: $step729 = 6;
$al734 = L[360];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al734,equal$always2);
}
$ans733 = equal$always2.app(cur732,(0));
break;
case 6: var anf_arg342 = $ans733;
$al734 = L[360];
var anf_if753 = R.checkWrapBoolean(anf_arg342);
$step729 = R.isPyretTrue(anf_if753)?7:8;
break;
case 7: var arg_738 = v726;
var anf_fun737 = link70.$var;
$al734 = L[361];
var anf_arg359 = G(l731,"rest",L[361]);
$step729 = 11;
$al734 = L[362];
if(!(R.isFunction(anf_fun737))) {
R.ffi.throwNonFunApp($al734,anf_fun737);
}
$ans733 = anf_fun737.app(arg_738,anf_arg359);
break;
case 8: $al734 = L[363];
var arg_752 = G(l731,"first",L[363]);
var anf_fun751 = link70.$var;
var anf_fun740 = help739.$var;
$al734 = L[364];
var anf_arg741 = G(l731,"rest",L[364]);
$step729 = 9;
$al734 = L[367];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al734,_minus9);
}
$ans733 = _minus9.app(cur732,(1));
break;
case 9: var anf_arg750 = $ans733;
$step729 = 10;
$al734 = L[366];
if(!(R.isFunction(anf_fun740))) {
R.ffi.throwNonFunApp($al734,anf_fun740);
}
$ans733 = anf_fun740.app(anf_arg741,anf_arg750);
break;
case 10: var anf_arg364 = $ans733;
$step729 = 11;
$al734 = L[365];
if(!(R.isFunction(anf_fun751))) {
R.ffi.throwNonFunApp($al734,anf_fun751);
}
$ans733 = anf_fun751.app(arg_752,anf_arg364);
break;
case 11: ++R.GAS;
return $ans733;
default: throw "No case numbered " + $step729 + " in $temp_lam730";
}
}
} catch($e755) {
if(R.isCont($e755) && ($step729 !== 11)) {
$e755.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al734,$temp_lam730,$step729,[l731,cur732],[arg_752,anf_fun751,anf_fun740,anf_arg741]);
}
if(R.isPyretException($e755)) {
$e755.pyretStack.push($al734);
}
throw $e755;
}
};
var anf_assign756 = R.makeFunction($temp_lam730,"help");
help739.$var = anf_assign756;
$step721 = 3;
$al728 = L[369];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al728,_lessthan10);
}
$ans727 = _lessthan10.app(n725,(0));
break;
case 3: var anf_arg757 = $ans727;
$al728 = L[369];
var anf_if760 = R.checkWrapBoolean(anf_arg757);
$step721 = R.isPyretTrue(anf_if760)?4:7;
break;
case 4: $step721 = 5;
$al728 = L[372];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al728,tostring1);
}
$ans727 = tostring1.app(n725);
break;
case 5: var anf_arg366 = $ans727;
$step721 = 6;
$al728 = L[371];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al728,_plus1);
}
$ans727 = _plus1.app(("set: invalid argument: "),anf_arg366);
break;
case 6: var anf_arg368 = $ans727;
$step721 = 8;
$al728 = L[370];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al728,raise1);
}
$ans727 = raise1.app(anf_arg368);
break;
case 7: var anf_fun758 = help739.$var;
$step721 = 8;
$al728 = L[373];
if(!(R.isFunction(anf_fun758))) {
R.ffi.throwNonFunApp($al728,anf_fun758);
}
$ans727 = anf_fun758.app(lst723,n725);
break;
case 8: var ann_check_temp759 = $ans727;
$step721 = 9;
$al728 = L[374];
R._checkAnn(L[374],R.Any,ann_check_temp759);
break;
case 9: $step721 = 10;
$ans727 = ann_check_temp759;
break;
case 10: ++R.GAS;
return $ans727;
default: throw "No case numbered " + $step721 + " in $temp_lam722";
}
}
} catch($e761) {
if(R.isCont($e761) && ($step721 !== 10)) {
$e761.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al728,$temp_lam722,$step721,[lst723,n725,v726],[help739,ann_check_temp759]);
}
if(R.isPyretException($e761)) {
$e761.pyretStack.push($al728);
}
throw $e761;
}
};
var anf_assign762 = R.makeFunction($temp_lam722,"set");
set123.$var = anf_assign762;
var $temp_lam764 = function($l765,$elt766) {
var $step763 = 0;
var $ans767 = D;
var $al768 = L[382];
try {
if(R.isActivationRecord($l765)) {
$step763 = $l765.step;
$al768 = $l765.from;
$ans767 = $l765.ans;
l765 = $l765.args[0];
elt766 = $l765.args[1];
ann_check_temp770 = $l765.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[382],2,$t);
}
var l765 = $l765;
var elt766 = $elt766;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step763) {
case 0: $step763 = 1;
$al768 = L[380];
R._checkAnn(L[380],List51,l765);
break;
case 1: $step763 = 2;
$al768 = L[381];
R._checkAnn(L[381],R.Any,elt766);
break;
case 2: var anf_fun769 = link70.$var;
$step763 = 3;
$al768 = L[379];
if(!(R.isFunction(anf_fun769))) {
R.ffi.throwNonFunApp($al768,anf_fun769);
}
$ans767 = anf_fun769.app(elt766,l765);
break;
case 3: var ann_check_temp770 = $ans767;
$step763 = 4;
$al768 = L[378];
R._checkAnn(L[378],List51,ann_check_temp770);
break;
case 4: $step763 = 5;
$ans767 = ann_check_temp770;
break;
case 5: ++R.GAS;
return $ans767;
default: throw "No case numbered " + $step763 + " in $temp_lam764";
}
}
} catch($e771) {
if(R.isCont($e771) && ($step763 !== 5)) {
$e771.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al768,$temp_lam764,$step763,[l765,elt766],[ann_check_temp770]);
}
if(R.isPyretException($e771)) {
$e771.pyretStack.push($al768);
}
throw $e771;
}
};
var anf_assign772 = R.makeFunction($temp_lam764,"push");
push773.$var = anf_assign772;
var $temp_lam775 = function($lst776,$tail777) {
var $step774 = 0;
var $ans778 = D;
var $al779 = L[389];
try {
if(R.isActivationRecord($lst776)) {
$step774 = $lst776.step;
$al779 = $lst776.from;
$ans778 = $lst776.ans;
lst776 = $lst776.args[0];
tail777 = $lst776.args[1];
ann_check_temp790 = $lst776.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[389],2,$t);
}
var lst776 = $lst776;
var tail777 = $tail777;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step774) {
case 0: $step774 = 1;
$al779 = L[387];
R._checkAnn(L[387],List51,lst776);
break;
case 1: $step774 = 2;
$al779 = L[388];
R._checkAnn(L[388],List51,tail777);
break;
case 2: var $temp_lam781 = function($acc782,$elt783) {
var $step780 = 0;
var $ans784 = D;
var $al785 = L[384];
try {
if(R.isActivationRecord($acc782)) {
$step780 = $acc782.step;
$al785 = $acc782.from;
$ans784 = $acc782.ans;
acc782 = $acc782.args[0];
elt783 = $acc782.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[384],2,$t);
}
var acc782 = $acc782;
var elt783 = $elt783;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step780) {
case 0: var anf_fun786 = link70.$var;
$step780 = 1;
$al785 = L[383];
if(!(R.isFunction(anf_fun786))) {
R.ffi.throwNonFunApp($al785,anf_fun786);
}
$ans784 = anf_fun786.app(elt783,acc782);
break;
case 1: ++R.GAS;
return $ans784;
default: throw "No case numbered " + $step780 + " in $temp_lam781";
}
}
} catch($e787) {
if(R.isCont($e787) && ($step780 !== 1)) {
$e787.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al785,$temp_lam781,$step780,[acc782,elt783],[]);
}
if(R.isPyretException($e787)) {
$e787.pyretStack.push($al785);
}
throw $e787;
}
};
var anf_arg788 = R.makeFunction($temp_lam781,"");
$step774 = 3;
$al779 = L[385];
$field789 = R.getColonFieldLoc(builtins1,"raw-list-fold",L[385]);
if(R.isMethod($field789)) {
$ans778 = $field789.full_meth(builtins1,anf_arg788,tail777,lst776);
} else {
if(!(R.isFunction($field789))) {
R.ffi.throwNonFunApp(L[385],$field789);
}
$ans778 = $field789.app(anf_arg788,tail777,lst776);
}
break;
case 3: var ann_check_temp790 = $ans778;
$step774 = 4;
$al779 = L[386];
R._checkAnn(L[386],List51,ann_check_temp790);
break;
case 4: $step774 = 5;
$ans778 = ann_check_temp790;
break;
case 5: ++R.GAS;
return $ans778;
default: throw "No case numbered " + $step774 + " in $temp_lam775";
}
}
} catch($e791) {
if(R.isCont($e791) && ($step774 !== 5)) {
$e791.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al779,$temp_lam775,$step774,[lst776,tail777],[ann_check_temp790]);
}
if(R.isPyretException($e791)) {
$e791.pyretStack.push($al779);
}
throw $e791;
}
};
var anf_assign792 = R.makeFunction($temp_lam775,"reverse-help");
reverse$help485.$var = anf_assign792;
var $temp_lam794 = function($lst795) {
var $step793 = 0;
var $ans796 = D;
var $al797 = L[393];
try {
if(R.isActivationRecord($lst795)) {
$step793 = $lst795.step;
$al797 = $lst795.from;
$ans796 = $lst795.ans;
lst795 = $lst795.args[0];
ann_check_temp799 = $lst795.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[393],1,$t);
}
var lst795 = $lst795;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step793) {
case 0: $step793 = 1;
$al797 = L[392];
R._checkAnn(L[392],List51,lst795);
break;
case 1: var anf_fun798 = reverse$help485.$var;
var anf_arg401 = empty158.$var;
$step793 = 2;
$al797 = L[391];
if(!(R.isFunction(anf_fun798))) {
R.ffi.throwNonFunApp($al797,anf_fun798);
}
$ans796 = anf_fun798.app(lst795,anf_arg401);
break;
case 2: var ann_check_temp799 = $ans796;
$step793 = 3;
$al797 = L[390];
R._checkAnn(L[390],List51,ann_check_temp799);
break;
case 3: $step793 = 4;
$ans796 = ann_check_temp799;
break;
case 4: ++R.GAS;
return $ans796;
default: throw "No case numbered " + $step793 + " in $temp_lam794";
}
}
} catch($e800) {
if(R.isCont($e800) && ($step793 !== 4)) {
$e800.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al797,$temp_lam794,$step793,[lst795],[ann_check_temp799]);
}
if(R.isPyretException($e800)) {
$e800.pyretStack.push($al797);
}
throw $e800;
}
};
var anf_assign801 = R.makeFunction($temp_lam794,"reverse");
reverse802.$var = anf_assign801;
var $temp_lam804 = function($lst805,$cmp806,$eq807) {
var $step803 = 0;
var $ans808 = D;
var $al809 = L[399];
try {
if(R.isActivationRecord($lst805)) {
$step803 = $lst805.step;
$al809 = $lst805.from;
$ans808 = $lst805.ans;
lst805 = $lst805.args[0];
cmp806 = $lst805.args[1];
eq807 = $lst805.args[2];
ann_check_temp811 = $lst805.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[399],3,$t);
}
var lst805 = $lst805;
var cmp806 = $cmp806;
var eq807 = $eq807;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step803) {
case 0: $step803 = 1;
$al809 = L[396];
R._checkAnn(L[396],List51,lst805);
break;
case 1: $step803 = 2;
$al809 = L[397];
R._checkAnn(L[397],R.Function,cmp806);
break;
case 2: $step803 = 3;
$al809 = L[398];
R._checkAnn(L[398],R.Function,eq807);
break;
case 3: $step803 = 4;
$al809 = L[394];
$field810 = R.getColonFieldLoc(lst805,"sort-by",L[394]);
if(R.isMethod($field810)) {
$ans808 = $field810.full_meth(lst805,cmp806,eq807);
} else {
if(!(R.isFunction($field810))) {
R.ffi.throwNonFunApp(L[394],$field810);
}
$ans808 = $field810.app(cmp806,eq807);
}
break;
case 4: var ann_check_temp811 = $ans808;
$step803 = 5;
$al809 = L[395];
R._checkAnn(L[395],List51,ann_check_temp811);
break;
case 5: $step803 = 6;
$ans808 = ann_check_temp811;
break;
case 6: ++R.GAS;
return $ans808;
default: throw "No case numbered " + $step803 + " in $temp_lam804";
}
}
} catch($e812) {
if(R.isCont($e812) && ($step803 !== 6)) {
$e812.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al809,$temp_lam804,$step803,[lst805,cmp806,eq807],[ann_check_temp811]);
}
if(R.isPyretException($e812)) {
$e812.pyretStack.push($al809);
}
throw $e812;
}
};
var anf_assign813 = R.makeFunction($temp_lam804,"sort-by");
sort$by814.$var = anf_assign813;
var $temp_lam816 = function($lst817) {
var $step815 = 0;
var $ans818 = D;
var $al819 = L[403];
try {
if(R.isActivationRecord($lst817)) {
$step815 = $lst817.step;
$al819 = $lst817.from;
$ans818 = $lst817.ans;
lst817 = $lst817.args[0];
ann_check_temp821 = $lst817.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[403],1,$t);
}
var lst817 = $lst817;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step815) {
case 0: $step815 = 1;
$al819 = L[402];
R._checkAnn(L[402],List51,lst817);
break;
case 1: $step815 = 2;
$al819 = L[400];
$field820 = R.getColonFieldLoc(lst817,"sort",L[400]);
if(R.isMethod($field820)) {
$ans818 = $field820.full_meth(lst817);
} else {
if(!(R.isFunction($field820))) {
R.ffi.throwNonFunApp(L[400],$field820);
}
$ans818 = $field820.app();
}
break;
case 2: var ann_check_temp821 = $ans818;
$step815 = 3;
$al819 = L[401];
R._checkAnn(L[401],List51,ann_check_temp821);
break;
case 3: $step815 = 4;
$ans818 = ann_check_temp821;
break;
case 4: ++R.GAS;
return $ans818;
default: throw "No case numbered " + $step815 + " in $temp_lam816";
}
}
} catch($e822) {
if(R.isCont($e822) && ($step815 !== 4)) {
$e822.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al819,$temp_lam816,$step815,[lst817],[ann_check_temp821]);
}
if(R.isPyretException($e822)) {
$e822.pyretStack.push($al819);
}
throw $e822;
}
};
var anf_assign823 = R.makeFunction($temp_lam816,"sort");
sort824.$var = anf_assign823;
var $temp_lam826 = function($start827,$stop828) {
var $step825 = 0;
var $ans829 = D;
var $al830 = L[419];
try {
if(R.isActivationRecord($start827)) {
$step825 = $start827.step;
$al830 = $start827.from;
$ans829 = $start827.ans;
start827 = $start827.args[0];
stop828 = $start827.args[1];
anf_arg425 = $start827.vars[0];
anf_arg428 = $start827.vars[1];
ann_check_temp845 = $start827.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[419],2,$t);
}
var start827 = $start827;
var stop828 = $stop828;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step825) {
case 0: $step825 = 1;
$al830 = L[417];
R._checkAnn(L[417],$type$Number8,start827);
break;
case 1: $step825 = 2;
$al830 = L[418];
R._checkAnn(L[418],$type$Number8,stop828);
break;
case 2: $step825 = 3;
$al830 = L[404];
if(!(R.isFunction(_greaterthan16))) {
R.ffi.throwNonFunApp($al830,_greaterthan16);
}
$ans829 = _greaterthan16.app(start827,stop828);
break;
case 3: var anf_arg411 = $ans829;
$al830 = L[404];
var anf_if846 = R.checkWrapBoolean(anf_arg411);
$step825 = R.isPyretTrue(anf_if846)?4:11;
break;
case 4: $step825 = 5;
$al830 = L[411];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al830,tostring1);
}
$ans829 = tostring1.app(start827);
break;
case 5: var anf_arg834 = $ans829;
$step825 = 6;
$al830 = L[410];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al830,_plus1);
}
$ans829 = _plus1.app(("range: start greater than stop: ("),anf_arg834);
break;
case 6: var anf_arg424 = $ans829;
$step825 = 7;
$al830 = L[409];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al830,_plus1);
}
$ans829 = _plus1.app(anf_arg424,(", "));
break;
case 7: var anf_arg425 = $ans829;
$step825 = 8;
$al830 = L[408];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al830,tostring1);
}
$ans829 = tostring1.app(stop828);
break;
case 8: var anf_arg835 = $ans829;
$step825 = 9;
$al830 = L[407];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al830,_plus1);
}
$ans829 = _plus1.app(anf_arg425,anf_arg835);
break;
case 9: var anf_arg426 = $ans829;
$step825 = 10;
$al830 = L[406];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al830,_plus1);
}
$ans829 = _plus1.app(anf_arg426,(")"));
break;
case 10: var anf_arg427 = $ans829;
$step825 = 14;
$al830 = L[405];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al830,raise1);
}
$ans829 = raise1.app(anf_arg427);
break;
case 11: var $temp_lam837 = function($arg_838) {
var $step836 = 0;
var $ans839 = D;
var $al840 = L[412];
try {
if(R.isActivationRecord($arg_838)) {
$step836 = $arg_838.step;
$al840 = $arg_838.from;
$ans839 = $arg_838.ans;
arg_838 = $arg_838.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[412],1,$t);
}
var arg_838 = $arg_838;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step836) {
case 0: $step836 = 1;
$al840 = L[412];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al840,_plus1);
}
$ans839 = _plus1.app(arg_838,start827);
break;
case 1: ++R.GAS;
return $ans839;
default: throw "No case numbered " + $step836 + " in $temp_lam837";
}
}
} catch($e841) {
if(R.isCont($e841) && ($step836 !== 1)) {
$e841.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al840,$temp_lam837,$step836,[arg_838],[]);
}
if(R.isPyretException($e841)) {
$e841.pyretStack.push($al840);
}
throw $e841;
}
};
var anf_arg428 = R.makeFunction($temp_lam837,"");
$step825 = 12;
$al830 = L[415];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al830,_minus9);
}
$ans829 = _minus9.app(stop828,start827);
break;
case 12: var anf_arg842 = $ans829;
$step825 = 13;
$al830 = L[414];
if(!(R.isFunction(raw$array$build11))) {
R.ffi.throwNonFunApp($al830,raw$array$build11);
}
$ans829 = raw$array$build11.app(anf_arg428,anf_arg842);
break;
case 13: var anf_arg844 = $ans829;
$step825 = 14;
$al830 = L[413];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al830,raw$array$to$list5);
}
$ans829 = raw$array$to$list5.app(anf_arg844);
break;
case 14: var ann_check_temp845 = $ans829;
$step825 = 15;
$al830 = L[416];
R._checkAnn(L[416],List51,ann_check_temp845);
break;
case 15: $step825 = 16;
$ans829 = ann_check_temp845;
break;
case 16: ++R.GAS;
return $ans829;
default: throw "No case numbered " + $step825 + " in $temp_lam826";
}
}
} catch($e847) {
if(R.isCont($e847) && ($step825 !== 16)) {
$e847.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al830,$temp_lam826,$step825,[start827,stop828],[anf_arg425,anf_arg428,ann_check_temp845]);
}
if(R.isPyretException($e847)) {
$e847.pyretStack.push($al830);
}
throw $e847;
}
};
var anf_assign848 = R.makeFunction($temp_lam826,"range");
range849.$var = anf_assign848;
var $temp_lam851 = function($start852,$stop853,$delta854) {
var $step850 = 0;
var $ans855 = D;
var $al856 = L[436];
try {
if(R.isActivationRecord($start852)) {
$step850 = $start852.step;
$al856 = $start852.from;
$ans855 = $start852.ans;
start852 = $start852.args[0];
stop853 = $start852.args[1];
delta854 = $start852.args[2];
ann_check_temp868 = $start852.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[436],3,$t);
}
var start852 = $start852;
var stop853 = $stop853;
var delta854 = $delta854;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step850) {
case 0: $step850 = 1;
$al856 = L[433];
R._checkAnn(L[433],$type$Number8,start852);
break;
case 1: $step850 = 2;
$al856 = L[434];
R._checkAnn(L[434],$type$Number8,stop853);
break;
case 2: $step850 = 3;
$al856 = L[435];
R._checkAnn(L[435],$type$Number8,delta854);
break;
case 3: $step850 = 4;
$al856 = L[420];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al856,equal$always2);
}
$ans855 = equal$always2.app(delta854,(0));
break;
case 4: var anf_arg461 = $ans855;
$al856 = L[420];
var anf_if869 = R.checkWrapBoolean(anf_arg461);
$step850 = R.isPyretTrue(anf_if869)?5:9;
break;
case 5: $step850 = 6;
$al856 = L[421];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al856,equal$always2);
}
$ans855 = equal$always2.app(start852,stop853);
break;
case 6: var anf_arg463 = $ans855;
$al856 = L[421];
var anf_if857 = R.checkWrapBoolean(anf_arg463);
$step850 = R.isPyretTrue(anf_if857)?7:8;
break;
case 7: $step850 = 15;
$ans855 = empty158.$var;
break;
case 8: $step850 = 15;
$al856 = L[422];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al856,raise1);
}
$ans855 = raise1.app(("range-by: an interval of 0 would produce an infinite list"));
break;
case 9: $step850 = 10;
$al856 = L[431];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al856,_minus9);
}
$ans855 = _minus9.app(stop853,start852);
break;
case 10: var anf_arg453 = $ans855;
$step850 = 11;
$al856 = L[430];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al856,_divide15);
}
$ans855 = _divide15.app(anf_arg453,delta854);
break;
case 11: var anf_arg440 = $ans855;
$step850 = 12;
$al856 = L[429];
if(!(R.isFunction(num$ceiling14))) {
R.ffi.throwNonFunApp($al856,num$ceiling14);
}
$ans855 = num$ceiling14.app(anf_arg440);
break;
case 12: var anf_arg858 = $ans855;
$step850 = 13;
$al856 = L[428];
if(!(R.isFunction(num$max13))) {
R.ffi.throwNonFunApp($al856,num$max13);
}
$ans855 = num$max13.app(anf_arg858,(0));
break;
case 13: var length867 = $ans855;
var $temp_lam860 = function($i861) {
var $step859 = 0;
var $ans863 = D;
var $al864 = L[425];
try {
if(R.isActivationRecord($i861)) {
$step859 = $i861.step;
$al864 = $i861.from;
$ans863 = $i861.ans;
i861 = $i861.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[425],1,$t);
}
var i861 = $i861;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step859) {
case 0: $step859 = 1;
$al864 = L[424];
if(!(R.isFunction(_times12))) {
R.ffi.throwNonFunApp($al864,_times12);
}
$ans863 = _times12.app(i861,delta854);
break;
case 1: var anf_arg438 = $ans863;
$step859 = 2;
$al864 = L[423];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al864,_plus1);
}
$ans863 = _plus1.app(start852,anf_arg438);
break;
case 2: ++R.GAS;
return $ans863;
default: throw "No case numbered " + $step859 + " in $temp_lam860";
}
}
} catch($e866) {
if(R.isCont($e866) && ($step859 !== 2)) {
$e866.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al864,$temp_lam860,$step859,[i861],[]);
}
if(R.isPyretException($e866)) {
$e866.pyretStack.push($al864);
}
throw $e866;
}
};
var anf_arg441 = R.makeFunction($temp_lam860,"");
$step850 = 14;
$al856 = L[427];
if(!(R.isFunction(raw$array$build11))) {
R.ffi.throwNonFunApp($al856,raw$array$build11);
}
$ans855 = raw$array$build11.app(anf_arg441,length867);
break;
case 14: var anf_arg454 = $ans855;
$step850 = 15;
$al856 = L[426];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al856,raw$array$to$list5);
}
$ans855 = raw$array$to$list5.app(anf_arg454);
break;
case 15: var ann_check_temp868 = $ans855;
$step850 = 16;
$al856 = L[432];
R._checkAnn(L[432],List51,ann_check_temp868);
break;
case 16: $step850 = 17;
$ans855 = ann_check_temp868;
break;
case 17: ++R.GAS;
return $ans855;
default: throw "No case numbered " + $step850 + " in $temp_lam851";
}
}
} catch($e870) {
if(R.isCont($e870) && ($step850 !== 17)) {
$e870.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al856,$temp_lam851,$step850,[start852,stop853,delta854],[ann_check_temp868]);
}
if(R.isPyretException($e870)) {
$e870.pyretStack.push($al856);
}
throw $e870;
}
};
var anf_assign871 = R.makeFunction($temp_lam851,"range-by");
range$by872.$var = anf_assign871;
var $temp_lam874 = function($n875,$e876) {
var $step873 = 0;
var $ans877 = D;
var $al878 = L[444];
try {
if(R.isActivationRecord($n875)) {
$step873 = $n875.step;
$al878 = $n875.from;
$ans877 = $n875.ans;
n875 = $n875.args[0];
e876 = $n875.args[1];
ann_check_temp880 = $n875.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[444],2,$t);
}
var n875 = $n875;
var e876 = $e876;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step873) {
case 0: $step873 = 1;
$al878 = L[442];
R._checkAnn(L[442],$type$Number8,n875);
break;
case 1: $step873 = 2;
$al878 = L[443];
R._checkAnn(L[443],R.Any,e876);
break;
case 2: $step873 = 3;
$al878 = L[437];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al878,_lessthan10);
}
$ans877 = _lessthan10.app(n875,(0));
break;
case 3: var anf_arg879 = $ans877;
$al878 = L[437];
var anf_if881 = R.checkWrapBoolean(anf_arg879);
$step873 = R.isPyretTrue(anf_if881)?4:5;
break;
case 4: $step873 = 7;
$al878 = L[438];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al878,raise1);
}
$ans877 = raise1.app(("repeat: can't have a negative argument'"));
break;
case 5: $step873 = 6;
$al878 = L[440];
if(!(R.isFunction(raw$array$of1))) {
R.ffi.throwNonFunApp($al878,raw$array$of1);
}
$ans877 = raw$array$of1.app(e876,n875);
break;
case 6: var anf_arg450 = $ans877;
$step873 = 7;
$al878 = L[439];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al878,raw$array$to$list5);
}
$ans877 = raw$array$to$list5.app(anf_arg450);
break;
case 7: var ann_check_temp880 = $ans877;
$step873 = 8;
$al878 = L[441];
R._checkAnn(L[441],List51,ann_check_temp880);
break;
case 8: $step873 = 9;
$ans877 = ann_check_temp880;
break;
case 9: ++R.GAS;
return $ans877;
default: throw "No case numbered " + $step873 + " in $temp_lam874";
}
}
} catch($e882) {
if(R.isCont($e882) && ($step873 !== 9)) {
$e882.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al878,$temp_lam874,$step873,[n875,e876],[ann_check_temp880]);
}
if(R.isPyretException($e882)) {
$e882.pyretStack.push($al878);
}
throw $e882;
}
};
var anf_assign883 = R.makeFunction($temp_lam874,"repeat");
repeat884.$var = anf_assign883;
var $temp_lam886 = function($f989,$lst887) {
var $step885 = 0;
var $ans888 = D;
var $al889 = L[449];
try {
if(R.isActivationRecord($f989)) {
$step885 = $f989.step;
$al889 = $f989.from;
$ans888 = $f989.ans;
f989 = $f989.args[0];
lst887 = $f989.args[1];
ann_check_temp891 = $f989.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[449],2,$t);
}
var f989 = $f989;
var lst887 = $lst887;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step885) {
case 0: $step885 = 1;
$al889 = L[447];
R._checkAnn(L[447],R.Function,f989);
break;
case 1: $step885 = 2;
$al889 = L[448];
R._checkAnn(L[448],List51,lst887);
break;
case 2: $step885 = 3;
$al889 = L[445];
$field890 = R.getColonFieldLoc(builtins1,"raw-list-filter",L[445]);
if(R.isMethod($field890)) {
$ans888 = $field890.full_meth(builtins1,f989,lst887);
} else {
if(!(R.isFunction($field890))) {
R.ffi.throwNonFunApp(L[445],$field890);
}
$ans888 = $field890.app(f989,lst887);
}
break;
case 3: var ann_check_temp891 = $ans888;
$step885 = 4;
$al889 = L[446];
R._checkAnn(L[446],List51,ann_check_temp891);
break;
case 4: $step885 = 5;
$ans888 = ann_check_temp891;
break;
case 5: ++R.GAS;
return $ans888;
default: throw "No case numbered " + $step885 + " in $temp_lam886";
}
}
} catch($e892) {
if(R.isCont($e892) && ($step885 !== 5)) {
$e892.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al889,$temp_lam886,$step885,[f989,lst887],[ann_check_temp891]);
}
if(R.isPyretException($e892)) {
$e892.pyretStack.push($al889);
}
throw $e892;
}
};
var anf_assign893 = R.makeFunction($temp_lam886,"filter");
filter894.$var = anf_assign893;
var $temp_lam896 = function($front897,$back898) {
var $step895 = 0;
var $ans899 = D;
var $al900 = L[459];
try {
if(R.isActivationRecord($front897)) {
$step895 = $front897.step;
$al900 = $front897.from;
$ans899 = $front897.ans;
front897 = $front897.args[0];
back898 = $front897.args[1];
cases901 = $front897.vars[0];
f905 = $front897.vars[1];
anf_fun904 = $front897.vars[2];
ann_check_temp907 = $front897.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[459],2,$t);
}
var front897 = $front897;
var back898 = $back898;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step895) {
case 0: $step895 = 1;
$al900 = L[457];
R._checkAnn(L[457],List51,front897);
break;
case 1: $step895 = 2;
$al900 = L[458];
R._checkAnn(L[458],List51,back898);
break;
case 2: var cases901 = front897;
$step895 = 3;
$al900 = L[456];
R._checkAnn(L[456],List51,cases901);
break;
case 3: var $cases_dispatch906 = {"empty":4,
"link":5};
$al900 = L[451];
$step895 = $cases_dispatch906[cases901.$name] || 7;
break;
case 4: if(cases901.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[450],false,L[451]);
}
$step895 = 8;
$ans899 = back898;
break;
case 5: if(cases901.$arity !== 2) {
if(cases901.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[454],2,cases901.$arity,L[451]);
} else {
R.ffi.throwCasesSingletonErrorC(L[454],true,L[451]);
}
}
var $fn187 = cases901.$constructor.$fieldNames;
var f905 = R.derefField(cases901.dict[$fn187[0]],cases901.$mut_fields_mask[0],false);
var r903 = R.derefField(cases901.dict[$fn187[1]],cases901.$mut_fields_mask[1],false);
var anf_fun904 = link70.$var;
var anf_fun467 = append902.$var;
$step895 = 6;
$al900 = L[453];
if(!(R.isFunction(anf_fun467))) {
R.ffi.throwNonFunApp($al900,anf_fun467);
}
$ans899 = anf_fun467.app(r903,back898);
break;
case 6: var anf_arg468 = $ans899;
$step895 = 8;
$al900 = L[452];
if(!(R.isFunction(anf_fun904))) {
R.ffi.throwNonFunApp($al900,anf_fun904);
}
$ans899 = anf_fun904.app(f905,anf_arg468);
break;
case 7: $step895 = 8;
$al900 = L[451];
$ans899 = R.throwNoCasesMatched(L[451],cases901);
break;
case 8: var ann_check_temp907 = $ans899;
$step895 = 9;
$al900 = L[455];
R._checkAnn(L[455],List51,ann_check_temp907);
break;
case 9: $step895 = 10;
$ans899 = ann_check_temp907;
break;
case 10: ++R.GAS;
return $ans899;
default: throw "No case numbered " + $step895 + " in $temp_lam896";
}
}
} catch($e908) {
if(R.isCont($e908) && ($step895 !== 10)) {
$e908.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al900,$temp_lam896,$step895,[front897,back898],[cases901,f905,anf_fun904,ann_check_temp907]);
}
if(R.isPyretException($e908)) {
$e908.pyretStack.push($al900);
}
throw $e908;
}
};
var anf_assign909 = R.makeFunction($temp_lam896,"append");
append902.$var = anf_assign909;
var $temp_lam911 = function($f912,$lst913) {
var $step910 = 0;
var $ans914 = D;
var $al915 = L[476];
try {
if(R.isActivationRecord($f912)) {
$step910 = $f912.step;
$al915 = $f912.from;
$ans914 = $f912.ans;
f912 = $f912.args[0];
lst913 = $f912.args[1];
is$true925 = $f912.vars[0];
is$false928 = $f912.vars[1];
ann_check_temp939 = $f912.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[476],2,$t);
}
var f912 = $f912;
var lst913 = $lst913;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step910) {
case 0: $step910 = 1;
$al915 = L[474];
R._checkAnn(L[474],R.Function,f912);
break;
case 1: $step910 = 2;
$al915 = L[475];
R._checkAnn(L[475],List51,lst913);
break;
case 2: var var941 = empty158.$var;
var is$true925 = {"$var":var941};
var var940 = empty158.$var;
var is$false928 = {"$var":var940};
var help922 = {"$var":D};
var $temp_lam917 = function($inner$lst918) {
var $step916 = 0;
var $ans919 = D;
var $al920 = L[469];
try {
if(R.isActivationRecord($inner$lst918)) {
$step916 = $inner$lst918.step;
$al920 = $inner$lst918.from;
$ans919 = $inner$lst918.ans;
inner$lst918 = $inner$lst918.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[469],1,$t);
}
var inner$lst918 = $inner$lst918;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step916) {
case 0: var anf_fun921 = is$empty473.$var;
$step916 = 1;
$al920 = L[460];
if(!(R.isFunction(anf_fun921))) {
R.ffi.throwNonFunApp($al920,anf_fun921);
}
$ans919 = anf_fun921.app(inner$lst918);
break;
case 1: var anf_arg477 = $ans919;
$al920 = L[460];
var anf_if933 = R.checkWrapBoolean(anf_arg477);
$step916 = R.isPyretTrue(anf_if933)?2:3;
break;
case 2: $step916 = 10;
$ans919 = nothing2;
break;
case 3: var anf_fun923 = help922.$var;
$al920 = L[461];
var anf_arg480 = G(inner$lst918,"rest",L[461]);
$step916 = 4;
$al920 = L[468];
if(!(R.isFunction(anf_fun923))) {
R.ffi.throwNonFunApp($al920,anf_fun923);
}
$ans919 = anf_fun923.app(anf_arg480);
break;
case 4: $al920 = L[462];
var anf_arg485 = G(inner$lst918,"first",L[462]);
$step916 = 5;
$al920 = L[463];
if(!(R.isFunction(f912))) {
R.ffi.throwNonFunApp($al920,f912);
}
$ans919 = f912.app(anf_arg485);
break;
case 5: var anf_arg924 = $ans919;
$al920 = L[463];
var anf_if932 = R.checkWrapBoolean(anf_arg924);
$step916 = R.isPyretTrue(anf_if932)?6:8;
break;
case 6: $al920 = L[464];
var arg_926 = G(inner$lst918,"first",L[464]);
var anf_fun495 = link70.$var;
var anf_arg496 = is$true925.$var;
$step916 = 7;
$al920 = L[465];
if(!(R.isFunction(anf_fun495))) {
R.ffi.throwNonFunApp($al920,anf_fun495);
}
$ans919 = anf_fun495.app(arg_926,anf_arg496);
break;
case 7: var anf_assign927 = $ans919;
$step916 = 10;
$ans919 = is$true925.$var = anf_assign927;
break;
case 8: $al920 = L[466];
var arg_930 = G(inner$lst918,"first",L[466]);
var anf_fun929 = link70.$var;
var anf_arg505 = is$false928.$var;
$step916 = 9;
$al920 = L[467];
if(!(R.isFunction(anf_fun929))) {
R.ffi.throwNonFunApp($al920,anf_fun929);
}
$ans919 = anf_fun929.app(arg_930,anf_arg505);
break;
case 9: var anf_assign931 = $ans919;
$step916 = 10;
$ans919 = is$false928.$var = anf_assign931;
break;
case 10: ++R.GAS;
return $ans919;
default: throw "No case numbered " + $step916 + " in $temp_lam917";
}
}
} catch($e934) {
if(R.isCont($e934) && ($step916 !== 10)) {
$e934.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al920,$temp_lam917,$step916,[inner$lst918],[]);
}
if(R.isPyretException($e934)) {
$e934.pyretStack.push($al920);
}
throw $e934;
}
};
var anf_assign935 = R.makeFunction($temp_lam917,"help");
help922.$var = anf_assign935;
var anf_fun936 = help922.$var;
$step910 = 3;
$al915 = L[473];
if(!(R.isFunction(anf_fun936))) {
R.ffi.throwNonFunApp($al915,anf_fun936);
}
$ans914 = anf_fun936.app(lst913);
break;
case 3: var anf_obj937 = is$true925.$var;
var anf_obj938 = is$false928.$var;
var ann_check_temp939 = R.makeObject({"is-true":anf_obj937,
"is-false":anf_obj938});
$step910 = 4;
$al915 = L[472];
R._checkAnn(L[472],R.makeRecordAnn(["is-true","is-false"],[L[470],L[471]],{"is-true":List51,
"is-false":List51}),ann_check_temp939);
break;
case 4: $step910 = 5;
$ans914 = ann_check_temp939;
break;
case 5: ++R.GAS;
return $ans914;
default: throw "No case numbered " + $step910 + " in $temp_lam911";
}
}
} catch($e942) {
if(R.isCont($e942) && ($step910 !== 5)) {
$e942.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al915,$temp_lam911,$step910,[f912,lst913],[is$true925,is$false928,ann_check_temp939]);
}
if(R.isPyretException($e942)) {
$e942.pyretStack.push($al915);
}
throw $e942;
}
};
var anf_assign943 = R.makeFunction($temp_lam911,"partition");
partition360.$var = anf_assign943;
var $temp_lam945 = function($lst946,$elt947) {
var $step944 = 0;
var $ans948 = D;
var $al949 = L[489];
try {
if(R.isActivationRecord($lst946)) {
$step944 = $lst946.step;
$al949 = $lst946.from;
$ans948 = $lst946.ans;
lst946 = $lst946.args[0];
elt947 = $lst946.args[1];
anf_fun956 = $lst946.vars[0];
anf_arg538 = $lst946.vars[1];
ann_check_temp958 = $lst946.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[489],2,$t);
}
var lst946 = $lst946;
var elt947 = $elt947;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step944) {
case 0: $step944 = 1;
$al949 = L[487];
R._checkAnn(L[487],List51,lst946);
break;
case 1: $step944 = 2;
$al949 = L[488];
R._checkAnn(L[488],R.Any,elt947);
break;
case 2: var anf_fun950 = is$empty473.$var;
$step944 = 3;
$al949 = L[477];
if(!(R.isFunction(anf_fun950))) {
R.ffi.throwNonFunApp($al949,anf_fun950);
}
$ans948 = anf_fun950.app(lst946);
break;
case 3: var anf_arg951 = $ans948;
$al949 = L[477];
var anf_if959 = R.checkWrapBoolean(anf_arg951);
$step944 = R.isPyretTrue(anf_if959)?4:5;
break;
case 4: $step944 = 10;
$ans948 = empty158.$var;
break;
case 5: $al949 = L[478];
var anf_arg952 = G(lst946,"first",L[478]);
$step944 = 6;
$al949 = L[479];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al949,equal$always2);
}
$ans948 = equal$always2.app(elt947,anf_arg952);
break;
case 6: var anf_arg953 = $ans948;
$al949 = L[479];
var anf_if957 = R.checkWrapBoolean(anf_arg953);
$step944 = R.isPyretTrue(anf_if957)?7:8;
break;
case 7: var anf_fun954 = remove132.$var;
$al949 = L[480];
var anf_arg545 = G(lst946,"rest",L[480]);
$step944 = 10;
$al949 = L[481];
if(!(R.isFunction(anf_fun954))) {
R.ffi.throwNonFunApp($al949,anf_fun954);
}
$ans948 = anf_fun954.app(anf_arg545,elt947);
break;
case 8: var anf_fun956 = link70.$var;
$al949 = L[482];
var anf_arg538 = G(lst946,"first",L[482]);
var anf_fun955 = remove132.$var;
$al949 = L[483];
var anf_arg534 = G(lst946,"rest",L[483]);
$step944 = 9;
$al949 = L[485];
if(!(R.isFunction(anf_fun955))) {
R.ffi.throwNonFunApp($al949,anf_fun955);
}
$ans948 = anf_fun955.app(anf_arg534,elt947);
break;
case 9: var anf_arg539 = $ans948;
$step944 = 10;
$al949 = L[484];
if(!(R.isFunction(anf_fun956))) {
R.ffi.throwNonFunApp($al949,anf_fun956);
}
$ans948 = anf_fun956.app(anf_arg538,anf_arg539);
break;
case 10: var ann_check_temp958 = $ans948;
$step944 = 11;
$al949 = L[486];
R._checkAnn(L[486],List51,ann_check_temp958);
break;
case 11: $step944 = 12;
$ans948 = ann_check_temp958;
break;
case 12: ++R.GAS;
return $ans948;
default: throw "No case numbered " + $step944 + " in $temp_lam945";
}
}
} catch($e960) {
if(R.isCont($e960) && ($step944 !== 12)) {
$e960.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al949,$temp_lam945,$step944,[lst946,elt947],[anf_fun956,anf_arg538,ann_check_temp958]);
}
if(R.isPyretException($e960)) {
$e960.pyretStack.push($al949);
}
throw $e960;
}
};
var anf_assign961 = R.makeFunction($temp_lam945,"remove");
remove132.$var = anf_assign961;
var $temp_lam963 = function($f964,$lst965) {
var $step962 = 0;
var $ans966 = D;
var $al967 = L[501];
try {
if(R.isActivationRecord($f964)) {
$step962 = $f964.step;
$al967 = $f964.from;
$ans966 = $f964.ans;
f964 = $f964.args[0];
lst965 = $f964.args[1];
ann_check_temp975 = $f964.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[501],2,$t);
}
var f964 = $f964;
var lst965 = $lst965;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step962) {
case 0: $step962 = 1;
$al967 = L[499];
R._checkAnn(L[499],R.Function,f964);
break;
case 1: $step962 = 2;
$al967 = L[500];
R._checkAnn(L[500],List51,lst965);
break;
case 2: var anf_fun968 = is$empty473.$var;
$step962 = 3;
$al967 = L[490];
if(!(R.isFunction(anf_fun968))) {
R.ffi.throwNonFunApp($al967,anf_fun968);
}
$ans966 = anf_fun968.app(lst965);
break;
case 3: var anf_arg548 = $ans966;
$al967 = L[490];
var anf_if976 = R.checkWrapBoolean(anf_arg548);
$step962 = R.isPyretTrue(anf_if976)?4:5;
break;
case 4: $step962 = 9;
$ans966 = none175;
break;
case 5: $al967 = L[491];
var anf_arg969 = G(lst965,"first",L[491]);
$step962 = 6;
$al967 = L[492];
if(!(R.isFunction(f964))) {
R.ffi.throwNonFunApp($al967,f964);
}
$ans966 = f964.app(anf_arg969);
break;
case 6: var anf_arg551 = $ans966;
$al967 = L[492];
var anf_if974 = R.checkWrapBoolean(anf_arg551);
$step962 = R.isPyretTrue(anf_if974)?7:8;
break;
case 7: $al967 = L[493];
var anf_arg552 = G(lst965,"first",L[493]);
$step962 = 9;
$al967 = L[494];
if(!(R.isFunction(some970))) {
R.ffi.throwNonFunApp($al967,some970);
}
$ans966 = some970.app(anf_arg552);
break;
case 8: var anf_fun971 = find371.$var;
$al967 = L[495];
var anf_arg973 = G(lst965,"rest",L[495]);
$step962 = 9;
$al967 = L[496];
if(!(R.isFunction(anf_fun971))) {
R.ffi.throwNonFunApp($al967,anf_fun971);
}
$ans966 = anf_fun971.app(f964,anf_arg973);
break;
case 9: var ann_check_temp975 = $ans966;
$step962 = 10;
$al967 = L[498];
R._checkAnn(L[498],R.getDotAnn(L[497],"O",O26,"Option"),ann_check_temp975);
break;
case 10: $step962 = 11;
$ans966 = ann_check_temp975;
break;
case 11: ++R.GAS;
return $ans966;
default: throw "No case numbered " + $step962 + " in $temp_lam963";
}
}
} catch($e977) {
if(R.isCont($e977) && ($step962 !== 11)) {
$e977.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al967,$temp_lam963,$step962,[f964,lst965],[ann_check_temp975]);
}
if(R.isPyretException($e977)) {
$e977.pyretStack.push($al967);
}
throw $e977;
}
};
var anf_assign978 = R.makeFunction($temp_lam963,"find");
find371.$var = anf_assign978;
var $temp_lam980 = function($n981,$lst982) {
var $step979 = 0;
var $ans983 = D;
var $al984 = L[520];
try {
if(R.isActivationRecord($n981)) {
$step979 = $n981.step;
$al984 = $n981.from;
$ans983 = $n981.ans;
n981 = $n981.args[0];
lst982 = $n981.args[1];
prefix998 = $n981.vars[0];
suffix992 = $n981.vars[1];
ann_check_temp1009 = $n981.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[520],2,$t);
}
var n981 = $n981;
var lst982 = $lst982;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step979) {
case 0: $step979 = 1;
$al984 = L[518];
R._checkAnn(L[518],$type$Number8,n981);
break;
case 1: $step979 = 2;
$al984 = L[519];
R._checkAnn(L[519],List51,lst982);
break;
case 2: $step979 = 3;
$al984 = L[502];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al984,_lessthan10);
}
$ans983 = _lessthan10.app(n981,(0));
break;
case 3: var anf_arg985 = $ans983;
$al984 = L[502];
var anf_if1012 = R.checkWrapBoolean(anf_arg985);
$step979 = R.isPyretTrue(anf_if1012)?4:5;
break;
case 4: $step979 = 6;
$al984 = L[503];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al984,raise1);
}
$ans983 = raise1.app(("Invalid index"));
break;
case 5: $step979 = 6;
$ans983 = nothing2;
break;
case 6: var var1011 = empty158.$var;
var prefix998 = {"$var":var1011};
var var1010 = empty158.$var;
var suffix992 = {"$var":var1010};
var help994 = {"$var":D};
var $temp_lam987 = function($ind988,$l989) {
var $step986 = 0;
var $ans990 = D;
var $al991 = L[513];
try {
if(R.isActivationRecord($ind988)) {
$step986 = $ind988.step;
$al991 = $ind988.from;
$ans990 = $ind988.ans;
ind988 = $ind988.args[0];
l989 = $ind988.args[1];
cases993 = $ind988.vars[0];
fst997 = $ind988.vars[1];
rst996 = $ind988.vars[2];
anf_fun995 = $ind988.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[513],2,$t);
}
var ind988 = $ind988;
var l989 = $l989;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step986) {
case 0: $step986 = 1;
$al991 = L[504];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al991,equal$always2);
}
$ans990 = equal$always2.app(ind988,(0));
break;
case 1: var anf_arg575 = $ans990;
$al991 = L[504];
var anf_if1003 = R.checkWrapBoolean(anf_arg575);
$step986 = R.isPyretTrue(anf_if1003)?2:3;
break;
case 2: $step986 = 11;
$ans990 = suffix992.$var = l989;
break;
case 3: var cases993 = l989;
$step986 = 4;
$al991 = L[512];
R._checkAnn(L[512],List51,cases993);
break;
case 4: var $cases_dispatch1002 = {"empty":5,
"link":6};
$al991 = L[507];
$step986 = $cases_dispatch1002[cases993.$name] || 10;
break;
case 5: if(cases993.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[506],false,L[507]);
}
$step986 = 11;
$al991 = L[505];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al991,raise1);
}
$ans990 = raise1.app(("Index too large"));
break;
case 6: if(cases993.$arity !== 2) {
if(cases993.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[511],2,cases993.$arity,L[507]);
} else {
R.ffi.throwCasesSingletonErrorC(L[511],true,L[507]);
}
}
var $fn187 = cases993.$constructor.$fieldNames;
var fst997 = R.derefField(cases993.dict[$fn187[0]],cases993.$mut_fields_mask[0],false);
var rst996 = R.derefField(cases993.dict[$fn187[1]],cases993.$mut_fields_mask[1],false);
var anf_fun995 = help994.$var;
$step986 = 7;
$al991 = L[510];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al991,_minus9);
}
$ans990 = _minus9.app(ind988,(1));
break;
case 7: var anf_arg566 = $ans990;
$step986 = 8;
$al991 = L[509];
if(!(R.isFunction(anf_fun995))) {
R.ffi.throwNonFunApp($al991,anf_fun995);
}
$ans990 = anf_fun995.app(anf_arg566,rst996);
break;
case 8: var arg_1000 = fst997;
var anf_fun999 = link70.$var;
var anf_arg577 = prefix998.$var;
$step986 = 9;
$al991 = L[508];
if(!(R.isFunction(anf_fun999))) {
R.ffi.throwNonFunApp($al991,anf_fun999);
}
$ans990 = anf_fun999.app(arg_1000,anf_arg577);
break;
case 9: var anf_assign1001 = $ans990;
$step986 = 11;
$ans990 = prefix998.$var = anf_assign1001;
break;
case 10: $step986 = 11;
$al991 = L[507];
$ans990 = R.throwNoCasesMatched(L[507],cases993);
break;
case 11: ++R.GAS;
return $ans990;
default: throw "No case numbered " + $step986 + " in $temp_lam987";
}
}
} catch($e1004) {
if(R.isCont($e1004) && ($step986 !== 11)) {
$e1004.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al991,$temp_lam987,$step986,[ind988,l989],[cases993,fst997,rst996,anf_fun995]);
}
if(R.isPyretException($e1004)) {
$e1004.pyretStack.push($al991);
}
throw $e1004;
}
};
var anf_assign1005 = R.makeFunction($temp_lam987,"help");
help994.$var = anf_assign1005;
var anf_fun1006 = help994.$var;
$step979 = 7;
$al984 = L[517];
if(!(R.isFunction(anf_fun1006))) {
R.ffi.throwNonFunApp($al984,anf_fun1006);
}
$ans983 = anf_fun1006.app(n981,lst982);
break;
case 7: var anf_obj1007 = prefix998.$var;
var anf_obj1008 = suffix992.$var;
var ann_check_temp1009 = R.makeObject({"prefix":anf_obj1007,
"suffix":anf_obj1008});
$step979 = 8;
$al984 = L[516];
R._checkAnn(L[516],R.makeRecordAnn(["prefix","suffix"],[L[514],L[515]],{"prefix":List51,
"suffix":List51}),ann_check_temp1009);
break;
case 8: $step979 = 9;
$ans983 = ann_check_temp1009;
break;
case 9: ++R.GAS;
return $ans983;
default: throw "No case numbered " + $step979 + " in $temp_lam980";
}
}
} catch($e1013) {
if(R.isCont($e1013) && ($step979 !== 9)) {
$e1013.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al984,$temp_lam980,$step979,[n981,lst982],[prefix998,suffix992,ann_check_temp1009]);
}
if(R.isPyretException($e1013)) {
$e1013.pyretStack.push($al984);
}
throw $e1013;
}
};
var anf_assign1014 = R.makeFunction($temp_lam980,"split-at");
split$at80.$var = anf_assign1014;
var $temp_lam1016 = function($n1017,$lst1018) {
var $step1015 = 0;
var $ans1019 = D;
var $al1020 = L[526];
try {
if(R.isActivationRecord($n1017)) {
$step1015 = $n1017.step;
$al1020 = $n1017.from;
$ans1019 = $n1017.ans;
n1017 = $n1017.args[0];
lst1018 = $n1017.args[1];
ann_check_temp1023 = $n1017.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[526],2,$t);
}
var n1017 = $n1017;
var lst1018 = $lst1018;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1015) {
case 0: $step1015 = 1;
$al1020 = L[524];
R._checkAnn(L[524],$type$Number8,n1017);
break;
case 1: $step1015 = 2;
$al1020 = L[525];
R._checkAnn(L[525],List51,lst1018);
break;
case 2: var anf_fun1021 = split$at80.$var;
$step1015 = 3;
$al1020 = L[523];
if(!(R.isFunction(anf_fun1021))) {
R.ffi.throwNonFunApp($al1020,anf_fun1021);
}
$ans1019 = anf_fun1021.app(n1017,lst1018);
break;
case 3: var anf_bracket1022 = $ans1019;
$al1020 = L[521];
var ann_check_temp1023 = G(anf_bracket1022,"prefix",L[521]);
$step1015 = 4;
$al1020 = L[522];
R._checkAnn(L[522],List51,ann_check_temp1023);
break;
case 4: $step1015 = 5;
$ans1019 = ann_check_temp1023;
break;
case 5: ++R.GAS;
return $ans1019;
default: throw "No case numbered " + $step1015 + " in $temp_lam1016";
}
}
} catch($e1024) {
if(R.isCont($e1024) && ($step1015 !== 5)) {
$e1024.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1020,$temp_lam1016,$step1015,[n1017,lst1018],[ann_check_temp1023]);
}
if(R.isPyretException($e1024)) {
$e1024.pyretStack.push($al1020);
}
throw $e1024;
}
};
var anf_assign1025 = R.makeFunction($temp_lam1016,"take");
take1026.$var = anf_assign1025;
var $temp_lam1028 = function($n1029,$lst1030) {
var $step1027 = 0;
var $ans1031 = D;
var $al1032 = L[532];
try {
if(R.isActivationRecord($n1029)) {
$step1027 = $n1029.step;
$al1032 = $n1029.from;
$ans1031 = $n1029.ans;
n1029 = $n1029.args[0];
lst1030 = $n1029.args[1];
ann_check_temp1035 = $n1029.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[532],2,$t);
}
var n1029 = $n1029;
var lst1030 = $lst1030;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1027) {
case 0: $step1027 = 1;
$al1032 = L[530];
R._checkAnn(L[530],$type$Number8,n1029);
break;
case 1: $step1027 = 2;
$al1032 = L[531];
R._checkAnn(L[531],List51,lst1030);
break;
case 2: var anf_fun1033 = split$at80.$var;
$step1027 = 3;
$al1032 = L[529];
if(!(R.isFunction(anf_fun1033))) {
R.ffi.throwNonFunApp($al1032,anf_fun1033);
}
$ans1031 = anf_fun1033.app(n1029,lst1030);
break;
case 3: var anf_bracket1034 = $ans1031;
$al1032 = L[527];
var ann_check_temp1035 = G(anf_bracket1034,"suffix",L[527]);
$step1027 = 4;
$al1032 = L[528];
R._checkAnn(L[528],List51,ann_check_temp1035);
break;
case 4: $step1027 = 5;
$ans1031 = ann_check_temp1035;
break;
case 5: ++R.GAS;
return $ans1031;
default: throw "No case numbered " + $step1027 + " in $temp_lam1028";
}
}
} catch($e1036) {
if(R.isCont($e1036) && ($step1027 !== 5)) {
$e1036.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1032,$temp_lam1028,$step1027,[n1029,lst1030],[ann_check_temp1035]);
}
if(R.isPyretException($e1036)) {
$e1036.pyretStack.push($al1032);
}
throw $e1036;
}
};
var anf_assign1037 = R.makeFunction($temp_lam1028,"drop");
drop1038.$var = anf_assign1037;
var $temp_lam1040 = function($l1041) {
var $step1039 = 0;
var $ans1043 = D;
var $al1044 = L[536];
try {
if(R.isActivationRecord($l1041)) {
$step1039 = $l1041.step;
$al1044 = $l1041.from;
$ans1043 = $l1041.ans;
l1041 = $l1041.args[0];
ann_check_temp1063 = $l1041.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[536],1,$t);
}
var l1041 = $l1041;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1039) {
case 0: $step1039 = 1;
$al1044 = L[535];
R._checkAnn(L[535],List51,l1041);
break;
case 1: $step1039 = 2;
$al1044 = L[533];
$field1062 = R.getColonFieldLoc(l1041,"last",L[533]);
if(R.isMethod($field1062)) {
$ans1043 = $field1062.full_meth(l1041);
} else {
if(!(R.isFunction($field1062))) {
R.ffi.throwNonFunApp(L[533],$field1062);
}
$ans1043 = $field1062.app();
}
break;
case 2: var ann_check_temp1063 = $ans1043;
$step1039 = 3;
$al1044 = L[534];
R._checkAnn(L[534],R.Any,ann_check_temp1063);
break;
case 3: $step1039 = 4;
$ans1043 = ann_check_temp1063;
break;
case 4: ++R.GAS;
return $ans1043;
default: throw "No case numbered " + $step1039 + " in $temp_lam1040";
}
}
} catch($e1064) {
if(R.isCont($e1064) && ($step1039 !== 4)) {
$e1064.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1044,$temp_lam1040,$step1039,[l1041],[ann_check_temp1063]);
}
if(R.isPyretException($e1064)) {
$e1064.pyretStack.push($al1044);
}
throw $e1064;
}
};
var anf_assign1065 = R.makeFunction($temp_lam1040,"last");
last1066.$var = anf_assign1065;
var $temp_lam1068 = function($f1069,$lst1070) {
var $step1067 = 0;
var $ans1071 = D;
var $al1072 = L[541];
try {
if(R.isActivationRecord($f1069)) {
$step1067 = $f1069.step;
$al1072 = $f1069.from;
$ans1071 = $f1069.ans;
f1069 = $f1069.args[0];
lst1070 = $f1069.args[1];
ann_check_temp1074 = $f1069.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[541],2,$t);
}
var f1069 = $f1069;
var lst1070 = $lst1070;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1067) {
case 0: $step1067 = 1;
$al1072 = L[539];
R._checkAnn(L[539],R.Function,f1069);
break;
case 1: $step1067 = 2;
$al1072 = L[540];
R._checkAnn(L[540],List51,lst1070);
break;
case 2: $step1067 = 3;
$al1072 = L[537];
$field1073 = R.getColonFieldLoc(lst1070,"any",L[537]);
if(R.isMethod($field1073)) {
$ans1071 = $field1073.full_meth(lst1070,f1069);
} else {
if(!(R.isFunction($field1073))) {
R.ffi.throwNonFunApp(L[537],$field1073);
}
$ans1071 = $field1073.app(f1069);
}
break;
case 3: var ann_check_temp1074 = $ans1071;
$step1067 = 4;
$al1072 = L[538];
R._checkAnn(L[538],$type$Boolean9,ann_check_temp1074);
break;
case 4: $step1067 = 5;
$ans1071 = ann_check_temp1074;
break;
case 5: ++R.GAS;
return $ans1071;
default: throw "No case numbered " + $step1067 + " in $temp_lam1068";
}
}
} catch($e1075) {
if(R.isCont($e1075) && ($step1067 !== 5)) {
$e1075.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1072,$temp_lam1068,$step1067,[f1069,lst1070],[ann_check_temp1074]);
}
if(R.isPyretException($e1075)) {
$e1075.pyretStack.push($al1072);
}
throw $e1075;
}
};
var anf_assign1076 = R.makeFunction($temp_lam1068,"any");
any1077.$var = anf_assign1076;
var $temp_lam1079 = function($f1080,$lst1081) {
var $step1078 = 0;
var $ans1082 = D;
var $al1083 = L[546];
try {
if(R.isActivationRecord($f1080)) {
$step1078 = $f1080.step;
$al1083 = $f1080.from;
$ans1082 = $f1080.ans;
f1080 = $f1080.args[0];
lst1081 = $f1080.args[1];
ann_check_temp1085 = $f1080.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[546],2,$t);
}
var f1080 = $f1080;
var lst1081 = $lst1081;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1078) {
case 0: $step1078 = 1;
$al1083 = L[544];
R._checkAnn(L[544],R.Function,f1080);
break;
case 1: $step1078 = 2;
$al1083 = L[545];
R._checkAnn(L[545],List51,lst1081);
break;
case 2: $step1078 = 3;
$al1083 = L[542];
$field1084 = R.getColonFieldLoc(lst1081,"all",L[542]);
if(R.isMethod($field1084)) {
$ans1082 = $field1084.full_meth(lst1081,f1080);
} else {
if(!(R.isFunction($field1084))) {
R.ffi.throwNonFunApp(L[542],$field1084);
}
$ans1082 = $field1084.app(f1080);
}
break;
case 3: var ann_check_temp1085 = $ans1082;
$step1078 = 4;
$al1083 = L[543];
R._checkAnn(L[543],$type$Boolean9,ann_check_temp1085);
break;
case 4: $step1078 = 5;
$ans1082 = ann_check_temp1085;
break;
case 5: ++R.GAS;
return $ans1082;
default: throw "No case numbered " + $step1078 + " in $temp_lam1079";
}
}
} catch($e1086) {
if(R.isCont($e1086) && ($step1078 !== 5)) {
$e1086.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1083,$temp_lam1079,$step1078,[f1080,lst1081],[ann_check_temp1085]);
}
if(R.isPyretException($e1086)) {
$e1086.pyretStack.push($al1083);
}
throw $e1086;
}
};
var anf_assign1087 = R.makeFunction($temp_lam1079,"all");
all1088.$var = anf_assign1087;
var $temp_lam1090 = function($f1091,$lst11092,$lst21093) {
var $step1089 = 0;
var $ans1094 = D;
var $al1095 = L[562];
try {
if(R.isActivationRecord($f1091)) {
$step1089 = $f1091.step;
$al1095 = $f1091.from;
$ans1094 = $f1091.ans;
f1091 = $f1091.args[0];
lst11092 = $f1091.args[1];
lst21093 = $f1091.args[2];
ann_check_temp1116 = $f1091.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[562],3,$t);
}
var f1091 = $f1091;
var lst11092 = $lst11092;
var lst21093 = $lst21093;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1089) {
case 0: $step1089 = 1;
$al1095 = L[559];
R._checkAnn(L[559],R.Function,f1091);
break;
case 1: $step1089 = 2;
$al1095 = L[560];
R._checkAnn(L[560],List51,lst11092);
break;
case 2: $step1089 = 3;
$al1095 = L[561];
R._checkAnn(L[561],List51,lst21093);
break;
case 3: var help1108 = {"$var":D};
var $temp_lam1097 = function($l11098,$l21099) {
var $step1096 = 0;
var $ans1100 = D;
var $al1101 = L[556];
try {
if(R.isActivationRecord($l11098)) {
$step1096 = $l11098.step;
$al1101 = $l11098.from;
$ans1100 = $l11098.ans;
l11098 = $l11098.args[0];
l21099 = $l11098.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[556],2,$t);
}
var l11098 = $l11098;
var l21099 = $l21099;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1096) {
case 0: var anf_fun1102 = is$empty473.$var;
$step1096 = 1;
$al1101 = L[547];
if(!(R.isFunction(anf_fun1102))) {
R.ffi.throwNonFunApp($al1101,anf_fun1102);
}
$ans1100 = anf_fun1102.app(l11098);
break;
case 1: var anf_arg631 = $ans1100;
$al1101 = L[547];
var anf_if1112 = R.checkWrapBoolean(anf_arg631);
$step1096 = R.isPyretTrue(anf_if1112)?2:3;
break;
case 2: $step1096 = 5;
$ans1100 = (true);
break;
case 3: var anf_fun1103 = is$empty473.$var;
$step1096 = 4;
$al1101 = L[548];
if(!(R.isFunction(anf_fun1103))) {
R.ffi.throwNonFunApp($al1101,anf_fun1103);
}
$ans1100 = anf_fun1103.app(l21099);
break;
case 4: var anf_arg1104 = $ans1100;
$step1096 = 5;
$al1101 = L[548];
$ans1100 = R.checkWrapBoolean(anf_arg1104);
break;
case 5: var anf_arg1106 = $ans1100;
$al1101 = L[549];
var anf_if1111 = R.checkWrapBoolean(anf_arg1106);
$step1096 = R.isPyretTrue(anf_if1111)?6:7;
break;
case 6: $step1096 = 12;
$ans1100 = (true);
break;
case 7: $al1101 = L[550];
var anf_arg636 = G(l11098,"first",L[550]);
$al1101 = L[551];
var anf_arg645 = G(l21099,"first",L[551]);
$step1096 = 8;
$al1101 = L[552];
if(!(R.isFunction(f1091))) {
R.ffi.throwNonFunApp($al1101,f1091);
}
$ans1100 = f1091.app(anf_arg636,anf_arg645);
break;
case 8: var anf_arg1107 = $ans1100;
$al1101 = L[552];
var anf_if1110 = R.checkWrapBoolean(anf_arg1107);
$step1096 = R.isPyretTrue(anf_if1110)?9:11;
break;
case 9: var anf_fun1109 = help1108.$var;
$al1101 = L[553];
var anf_arg642 = G(l11098,"rest",L[553]);
$al1101 = L[554];
var anf_arg647 = G(l21099,"rest",L[554]);
$step1096 = 10;
$al1101 = L[555];
if(!(R.isFunction(anf_fun1109))) {
R.ffi.throwNonFunApp($al1101,anf_fun1109);
}
$ans1100 = anf_fun1109.app(anf_arg642,anf_arg647);
break;
case 10: var anf_arg649 = $ans1100;
$step1096 = 12;
$al1101 = L[555];
$ans1100 = R.checkWrapBoolean(anf_arg649);
break;
case 11: $step1096 = 12;
$ans1100 = (false);
break;
case 12: ++R.GAS;
return $ans1100;
default: throw "No case numbered " + $step1096 + " in $temp_lam1097";
}
}
} catch($e1113) {
if(R.isCont($e1113) && ($step1096 !== 12)) {
$e1113.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1101,$temp_lam1097,$step1096,[l11098,l21099],[]);
}
if(R.isPyretException($e1113)) {
$e1113.pyretStack.push($al1101);
}
throw $e1113;
}
};
var anf_assign1114 = R.makeFunction($temp_lam1097,"help");
help1108.$var = anf_assign1114;
var anf_fun1115 = help1108.$var;
$step1089 = 4;
$al1095 = L[558];
if(!(R.isFunction(anf_fun1115))) {
R.ffi.throwNonFunApp($al1095,anf_fun1115);
}
$ans1094 = anf_fun1115.app(lst11092,lst21093);
break;
case 4: var ann_check_temp1116 = $ans1094;
$step1089 = 5;
$al1095 = L[557];
R._checkAnn(L[557],$type$Boolean9,ann_check_temp1116);
break;
case 5: $step1089 = 6;
$ans1094 = ann_check_temp1116;
break;
case 6: ++R.GAS;
return $ans1094;
default: throw "No case numbered " + $step1089 + " in $temp_lam1090";
}
}
} catch($e1117) {
if(R.isCont($e1117) && ($step1089 !== 6)) {
$e1117.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1095,$temp_lam1090,$step1089,[f1091,lst11092,lst21093],[ann_check_temp1116]);
}
if(R.isPyretException($e1117)) {
$e1117.pyretStack.push($al1095);
}
throw $e1117;
}
};
var anf_assign1118 = R.makeFunction($temp_lam1090,"all2");
all21119.$var = anf_assign1118;
var $temp_lam1121 = function($f1122,$lst1123) {
var $step1120 = 0;
var $ans1124 = D;
var $al1125 = L[567];
try {
if(R.isActivationRecord($f1122)) {
$step1120 = $f1122.step;
$al1125 = $f1122.from;
$ans1124 = $f1122.ans;
f1122 = $f1122.args[0];
lst1123 = $f1122.args[1];
ann_check_temp1127 = $f1122.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[567],2,$t);
}
var f1122 = $f1122;
var lst1123 = $lst1123;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1120) {
case 0: $step1120 = 1;
$al1125 = L[565];
R._checkAnn(L[565],R.Function,f1122);
break;
case 1: $step1120 = 2;
$al1125 = L[566];
R._checkAnn(L[566],List51,lst1123);
break;
case 2: $step1120 = 3;
$al1125 = L[563];
$field1126 = R.getColonFieldLoc(builtins1,"raw-list-map",L[563]);
if(R.isMethod($field1126)) {
$ans1124 = $field1126.full_meth(builtins1,f1122,lst1123);
} else {
if(!(R.isFunction($field1126))) {
R.ffi.throwNonFunApp(L[563],$field1126);
}
$ans1124 = $field1126.app(f1122,lst1123);
}
break;
case 3: var ann_check_temp1127 = $ans1124;
$step1120 = 4;
$al1125 = L[564];
R._checkAnn(L[564],List51,ann_check_temp1127);
break;
case 4: $step1120 = 5;
$ans1124 = ann_check_temp1127;
break;
case 5: ++R.GAS;
return $ans1124;
default: throw "No case numbered " + $step1120 + " in $temp_lam1121";
}
}
} catch($e1128) {
if(R.isCont($e1128) && ($step1120 !== 5)) {
$e1128.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1125,$temp_lam1121,$step1120,[f1122,lst1123],[ann_check_temp1127]);
}
if(R.isPyretException($e1128)) {
$e1128.pyretStack.push($al1125);
}
throw $e1128;
}
};
var anf_assign1129 = R.makeFunction($temp_lam1121,"map");
map326.$var = anf_assign1129;
var $temp_lam1131 = function($f1132,$l11133,$l21134) {
var $step1130 = 0;
var $ans1135 = D;
var $al1136 = L[582];
try {
if(R.isActivationRecord($f1132)) {
$step1130 = $f1132.step;
$al1136 = $f1132.from;
$ans1135 = $f1132.ans;
f1132 = $f1132.args[0];
l11133 = $f1132.args[1];
l21134 = $f1132.args[2];
arg_1143 = $f1132.vars[0];
anf_fun1142 = $f1132.vars[1];
ann_check_temp1145 = $f1132.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[582],3,$t);
}
var f1132 = $f1132;
var l11133 = $l11133;
var l21134 = $l21134;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1130) {
case 0: $step1130 = 1;
$al1136 = L[579];
R._checkAnn(L[579],R.Function,f1132);
break;
case 1: $step1130 = 2;
$al1136 = L[580];
R._checkAnn(L[580],List51,l11133);
break;
case 2: $step1130 = 3;
$al1136 = L[581];
R._checkAnn(L[581],List51,l21134);
break;
case 3: var anf_fun1137 = is$empty473.$var;
$step1130 = 4;
$al1136 = L[568];
if(!(R.isFunction(anf_fun1137))) {
R.ffi.throwNonFunApp($al1136,anf_fun1137);
}
$ans1135 = anf_fun1137.app(l11133);
break;
case 4: var anf_arg657 = $ans1135;
$al1136 = L[568];
var anf_if1147 = R.checkWrapBoolean(anf_arg657);
$step1130 = R.isPyretTrue(anf_if1147)?5:6;
break;
case 5: $step1130 = 8;
$ans1135 = (true);
break;
case 6: var anf_fun1138 = is$empty473.$var;
$step1130 = 7;
$al1136 = L[569];
if(!(R.isFunction(anf_fun1138))) {
R.ffi.throwNonFunApp($al1136,anf_fun1138);
}
$ans1135 = anf_fun1138.app(l21134);
break;
case 7: var anf_arg687 = $ans1135;
$step1130 = 8;
$al1136 = L[569];
$ans1135 = R.checkWrapBoolean(anf_arg687);
break;
case 8: var anf_arg671 = $ans1135;
$al1136 = L[570];
var anf_if1146 = R.checkWrapBoolean(anf_arg671);
$step1130 = R.isPyretTrue(anf_if1146)?9:10;
break;
case 9: $step1130 = 13;
$ans1135 = empty158.$var;
break;
case 10: $al1136 = L[571];
var anf_arg669 = G(l11133,"first",L[571]);
$al1136 = L[572];
var anf_arg672 = G(l21134,"first",L[572]);
$step1130 = 11;
$al1136 = L[577];
if(!(R.isFunction(f1132))) {
R.ffi.throwNonFunApp($al1136,f1132);
}
$ans1135 = f1132.app(anf_arg669,anf_arg672);
break;
case 11: var arg_1143 = $ans1135;
var anf_fun1142 = link70.$var;
var anf_fun1140 = map21139.$var;
$al1136 = L[573];
var anf_arg681 = G(l11133,"rest",L[573]);
$al1136 = L[574];
var anf_arg1141 = G(l21134,"rest",L[574]);
$step1130 = 12;
$al1136 = L[576];
if(!(R.isFunction(anf_fun1140))) {
R.ffi.throwNonFunApp($al1136,anf_fun1140);
}
$ans1135 = anf_fun1140.app(f1132,anf_arg681,anf_arg1141);
break;
case 12: var anf_arg1144 = $ans1135;
$step1130 = 13;
$al1136 = L[575];
if(!(R.isFunction(anf_fun1142))) {
R.ffi.throwNonFunApp($al1136,anf_fun1142);
}
$ans1135 = anf_fun1142.app(arg_1143,anf_arg1144);
break;
case 13: var ann_check_temp1145 = $ans1135;
$step1130 = 14;
$al1136 = L[578];
R._checkAnn(L[578],List51,ann_check_temp1145);
break;
case 14: $step1130 = 15;
$ans1135 = ann_check_temp1145;
break;
case 15: ++R.GAS;
return $ans1135;
default: throw "No case numbered " + $step1130 + " in $temp_lam1131";
}
}
} catch($e1148) {
if(R.isCont($e1148) && ($step1130 !== 15)) {
$e1148.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1136,$temp_lam1131,$step1130,[f1132,l11133,l21134],[arg_1143,anf_fun1142,ann_check_temp1145]);
}
if(R.isPyretException($e1148)) {
$e1148.pyretStack.push($al1136);
}
throw $e1148;
}
};
var anf_assign1149 = R.makeFunction($temp_lam1131,"map2");
map21139.$var = anf_assign1149;
var $temp_lam1152 = function($f1153,$l11154,$l21155,$l31156) {
var $step1151 = 0;
var $ans1157 = D;
var $al1158 = L[601];
try {
if(R.isActivationRecord($f1153)) {
$step1151 = $f1153.step;
$al1158 = $f1153.from;
$ans1157 = $f1153.ans;
f1153 = $f1153.args[0];
l11154 = $f1153.args[1];
l21155 = $f1153.args[2];
l31156 = $f1153.args[3];
arg_1172 = $f1153.vars[0];
anf_fun1171 = $f1153.vars[1];
ann_check_temp1175 = $f1153.vars[2];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[601],4,$t);
}
var f1153 = $f1153;
var l11154 = $l11154;
var l21155 = $l21155;
var l31156 = $l31156;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1151) {
case 0: $step1151 = 1;
$al1158 = L[597];
R._checkAnn(L[597],R.Function,f1153);
break;
case 1: $step1151 = 2;
$al1158 = L[598];
R._checkAnn(L[598],List51,l11154);
break;
case 2: $step1151 = 3;
$al1158 = L[599];
R._checkAnn(L[599],List51,l21155);
break;
case 3: $step1151 = 4;
$al1158 = L[600];
R._checkAnn(L[600],List51,l31156);
break;
case 4: var anf_fun1159 = is$empty473.$var;
$step1151 = 5;
$al1158 = L[583];
if(!(R.isFunction(anf_fun1159))) {
R.ffi.throwNonFunApp($al1158,anf_fun1159);
}
$ans1157 = anf_fun1159.app(l11154);
break;
case 5: var anf_arg691 = $ans1157;
$al1158 = L[583];
var anf_if1177 = R.checkWrapBoolean(anf_arg691);
$step1151 = R.isPyretTrue(anf_if1177)?6:7;
break;
case 6: $step1151 = 12;
$ans1157 = (true);
break;
case 7: var anf_fun1160 = is$empty473.$var;
$step1151 = 8;
$al1158 = L[584];
if(!(R.isFunction(anf_fun1160))) {
R.ffi.throwNonFunApp($al1158,anf_fun1160);
}
$ans1157 = anf_fun1160.app(l21155);
break;
case 8: var anf_arg701 = $ans1157;
$al1158 = L[584];
var anf_if1161 = R.checkWrapBoolean(anf_arg701);
$step1151 = R.isPyretTrue(anf_if1161)?9:10;
break;
case 9: $step1151 = 12;
$ans1157 = (true);
break;
case 10: var anf_fun728 = is$empty473.$var;
$step1151 = 11;
$al1158 = L[585];
if(!(R.isFunction(anf_fun728))) {
R.ffi.throwNonFunApp($al1158,anf_fun728);
}
$ans1157 = anf_fun728.app(l31156);
break;
case 11: var anf_arg729 = $ans1157;
$step1151 = 12;
$al1158 = L[585];
$ans1157 = R.checkWrapBoolean(anf_arg729);
break;
case 12: var anf_arg742 = $ans1157;
$al1158 = L[586];
var anf_if1176 = R.checkWrapBoolean(anf_arg742);
$step1151 = R.isPyretTrue(anf_if1176)?13:14;
break;
case 13: $step1151 = 17;
$ans1157 = empty158.$var;
break;
case 14: $al1158 = L[587];
var anf_arg743 = G(l11154,"first",L[587]);
$al1158 = L[588];
var anf_arg1165 = G(l21155,"first",L[588]);
$al1158 = L[589];
var anf_arg737 = G(l31156,"first",L[589]);
$step1151 = 15;
$al1158 = L[595];
if(!(R.isFunction(f1153))) {
R.ffi.throwNonFunApp($al1158,f1153);
}
$ans1157 = f1153.app(anf_arg743,anf_arg1165,anf_arg737);
break;
case 15: var arg_1172 = $ans1157;
var anf_fun1171 = link70.$var;
var anf_fun1167 = map31166.$var;
$al1158 = L[590];
var anf_arg749 = G(l11154,"rest",L[590]);
$al1158 = L[591];
var anf_arg1168 = G(l21155,"rest",L[591]);
$al1158 = L[592];
var anf_arg1170 = G(l31156,"rest",L[592]);
$step1151 = 16;
$al1158 = L[594];
if(!(R.isFunction(anf_fun1167))) {
R.ffi.throwNonFunApp($al1158,anf_fun1167);
}
$ans1157 = anf_fun1167.app(f1153,anf_arg749,anf_arg1168,anf_arg1170);
break;
case 16: var anf_arg1174 = $ans1157;
$step1151 = 17;
$al1158 = L[593];
if(!(R.isFunction(anf_fun1171))) {
R.ffi.throwNonFunApp($al1158,anf_fun1171);
}
$ans1157 = anf_fun1171.app(arg_1172,anf_arg1174);
break;
case 17: var ann_check_temp1175 = $ans1157;
$step1151 = 18;
$al1158 = L[596];
R._checkAnn(L[596],List51,ann_check_temp1175);
break;
case 18: $step1151 = 19;
$ans1157 = ann_check_temp1175;
break;
case 19: ++R.GAS;
return $ans1157;
default: throw "No case numbered " + $step1151 + " in $temp_lam1152";
}
}
} catch($e1178) {
if(R.isCont($e1178) && ($step1151 !== 19)) {
$e1178.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1158,$temp_lam1152,$step1151,[f1153,l11154,l21155,l31156],[arg_1172,anf_fun1171,ann_check_temp1175]);
}
if(R.isPyretException($e1178)) {
$e1178.pyretStack.push($al1158);
}
throw $e1178;
}
};
var anf_assign1179 = R.makeFunction($temp_lam1152,"map3");
map31166.$var = anf_assign1179;
var $temp_lam1181 = function($f1182,$l11183,$l21184,$l31185,$l41186) {
var $step1180 = 0;
var $ans1187 = D;
var $al1188 = L[624];
try {
if(R.isActivationRecord($f1182)) {
$step1180 = $f1182.step;
$al1188 = $f1182.from;
$ans1187 = $f1182.ans;
f1182 = $f1182.args[0];
l11183 = $f1182.args[1];
l21184 = $f1182.args[2];
l31185 = $f1182.args[3];
l41186 = $f1182.args[4];
arg_1203 = $f1182.vars[0];
anf_fun1202 = $f1182.vars[1];
ann_check_temp1204 = $f1182.vars[2];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[624],5,$t);
}
var f1182 = $f1182;
var l11183 = $l11183;
var l21184 = $l21184;
var l31185 = $l31185;
var l41186 = $l41186;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1180) {
case 0: $step1180 = 1;
$al1188 = L[619];
R._checkAnn(L[619],R.Function,f1182);
break;
case 1: $step1180 = 2;
$al1188 = L[620];
R._checkAnn(L[620],List51,l11183);
break;
case 2: $step1180 = 3;
$al1188 = L[621];
R._checkAnn(L[621],List51,l21184);
break;
case 3: $step1180 = 4;
$al1188 = L[622];
R._checkAnn(L[622],List51,l31185);
break;
case 4: $step1180 = 5;
$al1188 = L[623];
R._checkAnn(L[623],List51,l41186);
break;
case 5: var anf_fun1189 = is$empty473.$var;
$step1180 = 6;
$al1188 = L[602];
if(!(R.isFunction(anf_fun1189))) {
R.ffi.throwNonFunApp($al1188,anf_fun1189);
}
$ans1187 = anf_fun1189.app(l11183);
break;
case 6: var anf_arg775 = $ans1187;
$al1188 = L[602];
var anf_if1206 = R.checkWrapBoolean(anf_arg775);
$step1180 = R.isPyretTrue(anf_if1206)?7:8;
break;
case 7: $step1180 = 16;
$ans1187 = (true);
break;
case 8: var anf_fun1190 = is$empty473.$var;
$step1180 = 9;
$al1188 = L[603];
if(!(R.isFunction(anf_fun1190))) {
R.ffi.throwNonFunApp($al1188,anf_fun1190);
}
$ans1187 = anf_fun1190.app(l21184);
break;
case 9: var anf_arg783 = $ans1187;
$al1188 = L[603];
var anf_if1194 = R.checkWrapBoolean(anf_arg783);
$step1180 = R.isPyretTrue(anf_if1194)?10:11;
break;
case 10: $step1180 = 16;
$ans1187 = (true);
break;
case 11: var anf_fun1191 = is$empty473.$var;
$step1180 = 12;
$al1188 = L[604];
if(!(R.isFunction(anf_fun1191))) {
R.ffi.throwNonFunApp($al1188,anf_fun1191);
}
$ans1187 = anf_fun1191.app(l31185);
break;
case 12: var anf_arg797 = $ans1187;
$al1188 = L[604];
var anf_if1193 = R.checkWrapBoolean(anf_arg797);
$step1180 = R.isPyretTrue(anf_if1193)?13:14;
break;
case 13: $step1180 = 16;
$ans1187 = (true);
break;
case 14: var anf_fun1192 = is$empty473.$var;
$step1180 = 15;
$al1188 = L[605];
if(!(R.isFunction(anf_fun1192))) {
R.ffi.throwNonFunApp($al1188,anf_fun1192);
}
$ans1187 = anf_fun1192.app(l41186);
break;
case 15: var anf_arg799 = $ans1187;
$step1180 = 16;
$al1188 = L[605];
$ans1187 = R.checkWrapBoolean(anf_arg799);
break;
case 16: var anf_arg800 = $ans1187;
$al1188 = L[606];
var anf_if1205 = R.checkWrapBoolean(anf_arg800);
$step1180 = R.isPyretTrue(anf_if1205)?17:18;
break;
case 17: $step1180 = 21;
$ans1187 = empty158.$var;
break;
case 18: $al1188 = L[607];
var anf_arg1195 = G(l11183,"first",L[607]);
$al1188 = L[608];
var anf_arg1196 = G(l21184,"first",L[608]);
$al1188 = L[609];
var anf_arg1198 = G(l31185,"first",L[609]);
$al1188 = L[610];
var anf_arg802 = G(l41186,"first",L[610]);
$step1180 = 19;
$al1188 = L[617];
if(!(R.isFunction(f1182))) {
R.ffi.throwNonFunApp($al1188,f1182);
}
$ans1187 = f1182.app(anf_arg1195,anf_arg1196,anf_arg1198,anf_arg802);
break;
case 19: var arg_1203 = $ans1187;
var anf_fun1202 = link70.$var;
var anf_fun1200 = map41199.$var;
$al1188 = L[611];
var anf_arg816 = G(l11183,"rest",L[611]);
$al1188 = L[612];
var anf_arg806 = G(l21184,"rest",L[612]);
$al1188 = L[613];
var anf_arg817 = G(l31185,"rest",L[613]);
$al1188 = L[614];
var anf_arg1201 = G(l41186,"rest",L[614]);
$step1180 = 20;
$al1188 = L[616];
if(!(R.isFunction(anf_fun1200))) {
R.ffi.throwNonFunApp($al1188,anf_fun1200);
}
$ans1187 = anf_fun1200.app(f1182,anf_arg816,anf_arg806,anf_arg817,anf_arg1201);
break;
case 20: var anf_arg813 = $ans1187;
$step1180 = 21;
$al1188 = L[615];
if(!(R.isFunction(anf_fun1202))) {
R.ffi.throwNonFunApp($al1188,anf_fun1202);
}
$ans1187 = anf_fun1202.app(arg_1203,anf_arg813);
break;
case 21: var ann_check_temp1204 = $ans1187;
$step1180 = 22;
$al1188 = L[618];
R._checkAnn(L[618],List51,ann_check_temp1204);
break;
case 22: $step1180 = 23;
$ans1187 = ann_check_temp1204;
break;
case 23: ++R.GAS;
return $ans1187;
default: throw "No case numbered " + $step1180 + " in $temp_lam1181";
}
}
} catch($e1207) {
if(R.isCont($e1207) && ($step1180 !== 23)) {
$e1207.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1188,$temp_lam1181,$step1180,[f1182,l11183,l21184,l31185,l41186],[arg_1203,anf_fun1202,ann_check_temp1204]);
}
if(R.isPyretException($e1207)) {
$e1207.pyretStack.push($al1188);
}
throw $e1207;
}
};
var anf_assign1208 = R.makeFunction($temp_lam1181,"map4");
map41199.$var = anf_assign1208;
var $temp_lam1210 = function($f1211,$n1212,$lst1213) {
var $step1209 = 0;
var $ans1214 = D;
var $al1215 = L[636];
try {
if(R.isActivationRecord($f1211)) {
$step1209 = $f1211.step;
$al1215 = $f1211.from;
$ans1214 = $f1211.ans;
f1211 = $f1211.args[0];
n1212 = $f1211.args[1];
lst1213 = $f1211.args[2];
arg_1220 = $f1211.vars[0];
anf_fun1219 = $f1211.vars[1];
anf_fun1217 = $f1211.vars[2];
ann_check_temp1222 = $f1211.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[636],3,$t);
}
var f1211 = $f1211;
var n1212 = $n1212;
var lst1213 = $lst1213;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1209) {
case 0: $step1209 = 1;
$al1215 = L[633];
R._checkAnn(L[633],R.Function,f1211);
break;
case 1: $step1209 = 2;
$al1215 = L[634];
R._checkAnn(L[634],$type$Number8,n1212);
break;
case 2: $step1209 = 3;
$al1215 = L[635];
R._checkAnn(L[635],List51,lst1213);
break;
case 3: var anf_fun821 = is$empty473.$var;
$step1209 = 4;
$al1215 = L[625];
if(!(R.isFunction(anf_fun821))) {
R.ffi.throwNonFunApp($al1215,anf_fun821);
}
$ans1214 = anf_fun821.app(lst1213);
break;
case 4: var anf_arg820 = $ans1214;
$al1215 = L[625];
var anf_if1223 = R.checkWrapBoolean(anf_arg820);
$step1209 = R.isPyretTrue(anf_if1223)?5:6;
break;
case 5: $step1209 = 10;
$ans1214 = empty158.$var;
break;
case 6: $al1215 = L[626];
var anf_arg823 = G(lst1213,"first",L[626]);
$step1209 = 7;
$al1215 = L[631];
if(!(R.isFunction(f1211))) {
R.ffi.throwNonFunApp($al1215,f1211);
}
$ans1214 = f1211.app(n1212,anf_arg823);
break;
case 7: var arg_1220 = $ans1214;
var anf_fun1219 = link70.$var;
var anf_fun1217 = map_n1216.$var;
$step1209 = 8;
$al1215 = L[630];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1215,_plus1);
}
$ans1214 = _plus1.app(n1212,(1));
break;
case 8: var anf_arg827 = $ans1214;
$al1215 = L[627];
var anf_arg833 = G(lst1213,"rest",L[627]);
$step1209 = 9;
$al1215 = L[629];
if(!(R.isFunction(anf_fun1217))) {
R.ffi.throwNonFunApp($al1215,anf_fun1217);
}
$ans1214 = anf_fun1217.app(f1211,anf_arg827,anf_arg833);
break;
case 9: var anf_arg1221 = $ans1214;
$step1209 = 10;
$al1215 = L[628];
if(!(R.isFunction(anf_fun1219))) {
R.ffi.throwNonFunApp($al1215,anf_fun1219);
}
$ans1214 = anf_fun1219.app(arg_1220,anf_arg1221);
break;
case 10: var ann_check_temp1222 = $ans1214;
$step1209 = 11;
$al1215 = L[632];
R._checkAnn(L[632],List51,ann_check_temp1222);
break;
case 11: $step1209 = 12;
$ans1214 = ann_check_temp1222;
break;
case 12: ++R.GAS;
return $ans1214;
default: throw "No case numbered " + $step1209 + " in $temp_lam1210";
}
}
} catch($e1224) {
if(R.isCont($e1224) && ($step1209 !== 12)) {
$e1224.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1215,$temp_lam1210,$step1209,[f1211,n1212,lst1213],[arg_1220,anf_fun1219,anf_fun1217,ann_check_temp1222]);
}
if(R.isPyretException($e1224)) {
$e1224.pyretStack.push($al1215);
}
throw $e1224;
}
};
var anf_assign1225 = R.makeFunction($temp_lam1210,"map_n");
map_n1216.$var = anf_assign1225;
var $temp_lam1227 = function($f1228,$n1229,$l11230,$l21231) {
var $step1226 = 0;
var $ans1232 = D;
var $al1233 = L[653];
try {
if(R.isActivationRecord($f1228)) {
$step1226 = $f1228.step;
$al1233 = $f1228.from;
$ans1232 = $f1228.ans;
f1228 = $f1228.args[0];
n1229 = $f1228.args[1];
l11230 = $f1228.args[2];
l21231 = $f1228.args[3];
arg_1244 = $f1228.vars[0];
anf_fun1243 = $f1228.vars[1];
anf_fun1242 = $f1228.vars[2];
ann_check_temp1245 = $f1228.vars[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[653],4,$t);
}
var f1228 = $f1228;
var n1229 = $n1229;
var l11230 = $l11230;
var l21231 = $l21231;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1226) {
case 0: $step1226 = 1;
$al1233 = L[649];
R._checkAnn(L[649],R.Function,f1228);
break;
case 1: $step1226 = 2;
$al1233 = L[650];
R._checkAnn(L[650],$type$Number8,n1229);
break;
case 2: $step1226 = 3;
$al1233 = L[651];
R._checkAnn(L[651],List51,l11230);
break;
case 3: $step1226 = 4;
$al1233 = L[652];
R._checkAnn(L[652],List51,l21231);
break;
case 4: var anf_fun1234 = is$empty473.$var;
$step1226 = 5;
$al1233 = L[637];
if(!(R.isFunction(anf_fun1234))) {
R.ffi.throwNonFunApp($al1233,anf_fun1234);
}
$ans1232 = anf_fun1234.app(l11230);
break;
case 5: var anf_arg845 = $ans1232;
$al1233 = L[637];
var anf_if1247 = R.checkWrapBoolean(anf_arg845);
$step1226 = R.isPyretTrue(anf_if1247)?6:7;
break;
case 6: $step1226 = 9;
$ans1232 = (true);
break;
case 7: var anf_fun1236 = is$empty473.$var;
$step1226 = 8;
$al1233 = L[638];
if(!(R.isFunction(anf_fun1236))) {
R.ffi.throwNonFunApp($al1233,anf_fun1236);
}
$ans1232 = anf_fun1236.app(l21231);
break;
case 8: var anf_arg1238 = $ans1232;
$step1226 = 9;
$al1233 = L[638];
$ans1232 = R.checkWrapBoolean(anf_arg1238);
break;
case 9: var anf_arg849 = $ans1232;
$al1233 = L[639];
var anf_if1246 = R.checkWrapBoolean(anf_arg849);
$step1226 = R.isPyretTrue(anf_if1246)?10:11;
break;
case 10: $step1226 = 15;
$ans1232 = empty158.$var;
break;
case 11: $al1233 = L[640];
var anf_arg1239 = G(l11230,"first",L[640]);
$al1233 = L[641];
var anf_arg1240 = G(l21231,"first",L[641]);
$step1226 = 12;
$al1233 = L[647];
if(!(R.isFunction(f1228))) {
R.ffi.throwNonFunApp($al1233,f1228);
}
$ans1232 = f1228.app(n1229,anf_arg1239,anf_arg1240);
break;
case 12: var arg_1244 = $ans1232;
var anf_fun1243 = link70.$var;
var anf_fun1242 = map2_n1241.$var;
$step1226 = 13;
$al1233 = L[646];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1233,_plus1);
}
$ans1232 = _plus1.app(n1229,(1));
break;
case 13: var anf_arg875 = $ans1232;
$al1233 = L[642];
var anf_arg872 = G(l11230,"rest",L[642]);
$al1233 = L[643];
var anf_arg876 = G(l21231,"rest",L[643]);
$step1226 = 14;
$al1233 = L[645];
if(!(R.isFunction(anf_fun1242))) {
R.ffi.throwNonFunApp($al1233,anf_fun1242);
}
$ans1232 = anf_fun1242.app(f1228,anf_arg875,anf_arg872,anf_arg876);
break;
case 14: var anf_arg886 = $ans1232;
$step1226 = 15;
$al1233 = L[644];
if(!(R.isFunction(anf_fun1243))) {
R.ffi.throwNonFunApp($al1233,anf_fun1243);
}
$ans1232 = anf_fun1243.app(arg_1244,anf_arg886);
break;
case 15: var ann_check_temp1245 = $ans1232;
$step1226 = 16;
$al1233 = L[648];
R._checkAnn(L[648],List51,ann_check_temp1245);
break;
case 16: $step1226 = 17;
$ans1232 = ann_check_temp1245;
break;
case 17: ++R.GAS;
return $ans1232;
default: throw "No case numbered " + $step1226 + " in $temp_lam1227";
}
}
} catch($e1248) {
if(R.isCont($e1248) && ($step1226 !== 17)) {
$e1248.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1233,$temp_lam1227,$step1226,[f1228,n1229,l11230,l21231],[arg_1244,anf_fun1243,anf_fun1242,ann_check_temp1245]);
}
if(R.isPyretException($e1248)) {
$e1248.pyretStack.push($al1233);
}
throw $e1248;
}
};
var anf_assign1249 = R.makeFunction($temp_lam1227,"map2_n");
map2_n1241.$var = anf_assign1249;
var $temp_lam1251 = function($f1252,$n1253,$l11254,$l21255,$l31256) {
var $step1250 = 0;
var $ans1257 = D;
var $al1258 = L[674];
try {
if(R.isActivationRecord($f1252)) {
$step1250 = $f1252.step;
$al1258 = $f1252.from;
$ans1257 = $f1252.ans;
f1252 = $f1252.args[0];
n1253 = $f1252.args[1];
l11254 = $f1252.args[2];
l21255 = $f1252.args[3];
l31256 = $f1252.args[4];
arg_1272 = $f1252.vars[0];
anf_fun1271 = $f1252.vars[1];
anf_fun906 = $f1252.vars[2];
ann_check_temp1273 = $f1252.vars[3];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[674],5,$t);
}
var f1252 = $f1252;
var n1253 = $n1253;
var l11254 = $l11254;
var l21255 = $l21255;
var l31256 = $l31256;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1250) {
case 0: $step1250 = 1;
$al1258 = L[669];
R._checkAnn(L[669],R.Function,f1252);
break;
case 1: $step1250 = 2;
$al1258 = L[670];
R._checkAnn(L[670],$type$Number8,n1253);
break;
case 2: $step1250 = 3;
$al1258 = L[671];
R._checkAnn(L[671],List51,l11254);
break;
case 3: $step1250 = 4;
$al1258 = L[672];
R._checkAnn(L[672],List51,l21255);
break;
case 4: $step1250 = 5;
$al1258 = L[673];
R._checkAnn(L[673],List51,l31256);
break;
case 5: var anf_fun1259 = is$empty473.$var;
$step1250 = 6;
$al1258 = L[654];
if(!(R.isFunction(anf_fun1259))) {
R.ffi.throwNonFunApp($al1258,anf_fun1259);
}
$ans1257 = anf_fun1259.app(l11254);
break;
case 6: var anf_arg1262 = $ans1257;
$al1258 = L[654];
var anf_if1275 = R.checkWrapBoolean(anf_arg1262);
$step1250 = R.isPyretTrue(anf_if1275)?7:8;
break;
case 7: $step1250 = 13;
$ans1257 = (true);
break;
case 8: var anf_fun1263 = is$empty473.$var;
$step1250 = 9;
$al1258 = L[655];
if(!(R.isFunction(anf_fun1263))) {
R.ffi.throwNonFunApp($al1258,anf_fun1263);
}
$ans1257 = anf_fun1263.app(l21255);
break;
case 9: var anf_arg1264 = $ans1257;
$al1258 = L[655];
var anf_if1267 = R.checkWrapBoolean(anf_arg1264);
$step1250 = R.isPyretTrue(anf_if1267)?10:11;
break;
case 10: $step1250 = 13;
$ans1257 = (true);
break;
case 11: var anf_fun1265 = is$empty473.$var;
$step1250 = 12;
$al1258 = L[656];
if(!(R.isFunction(anf_fun1265))) {
R.ffi.throwNonFunApp($al1258,anf_fun1265);
}
$ans1257 = anf_fun1265.app(l31256);
break;
case 12: var anf_arg1266 = $ans1257;
$step1250 = 13;
$al1258 = L[656];
$ans1257 = R.checkWrapBoolean(anf_arg1266);
break;
case 13: var anf_arg902 = $ans1257;
$al1258 = L[657];
var anf_if1274 = R.checkWrapBoolean(anf_arg902);
$step1250 = R.isPyretTrue(anf_if1274)?14:15;
break;
case 14: $step1250 = 19;
$ans1257 = empty158.$var;
break;
case 15: $al1258 = L[658];
var anf_arg904 = G(l11254,"first",L[658]);
$al1258 = L[659];
var anf_arg905 = G(l21255,"first",L[659]);
$al1258 = L[660];
var anf_arg1268 = G(l31256,"first",L[660]);
$step1250 = 16;
$al1258 = L[667];
if(!(R.isFunction(f1252))) {
R.ffi.throwNonFunApp($al1258,f1252);
}
$ans1257 = f1252.app(n1253,anf_arg904,anf_arg905,anf_arg1268);
break;
case 16: var arg_1272 = $ans1257;
var anf_fun1271 = link70.$var;
var anf_fun906 = map3_n1269.$var;
$step1250 = 17;
$al1258 = L[666];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1258,_plus1);
}
$ans1257 = _plus1.app(n1253,(1));
break;
case 17: var anf_arg907 = $ans1257;
$al1258 = L[661];
var anf_arg913 = G(l11254,"rest",L[661]);
$al1258 = L[662];
var anf_arg1270 = G(l21255,"rest",L[662]);
$al1258 = L[663];
var anf_arg910 = G(l31256,"rest",L[663]);
$step1250 = 18;
$al1258 = L[665];
if(!(R.isFunction(anf_fun906))) {
R.ffi.throwNonFunApp($al1258,anf_fun906);
}
$ans1257 = anf_fun906.app(f1252,anf_arg907,anf_arg913,anf_arg1270,anf_arg910);
break;
case 18: var anf_arg914 = $ans1257;
$step1250 = 19;
$al1258 = L[664];
if(!(R.isFunction(anf_fun1271))) {
R.ffi.throwNonFunApp($al1258,anf_fun1271);
}
$ans1257 = anf_fun1271.app(arg_1272,anf_arg914);
break;
case 19: var ann_check_temp1273 = $ans1257;
$step1250 = 20;
$al1258 = L[668];
R._checkAnn(L[668],List51,ann_check_temp1273);
break;
case 20: $step1250 = 21;
$ans1257 = ann_check_temp1273;
break;
case 21: ++R.GAS;
return $ans1257;
default: throw "No case numbered " + $step1250 + " in $temp_lam1251";
}
}
} catch($e1277) {
if(R.isCont($e1277) && ($step1250 !== 21)) {
$e1277.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1258,$temp_lam1251,$step1250,[f1252,n1253,l11254,l21255,l31256],[arg_1272,anf_fun1271,anf_fun906,ann_check_temp1273]);
}
if(R.isPyretException($e1277)) {
$e1277.pyretStack.push($al1258);
}
throw $e1277;
}
};
var anf_assign1278 = R.makeFunction($temp_lam1251,"map3_n");
map3_n1269.$var = anf_assign1278;
var $temp_lam1280 = function($f1281,$n1282,$l11283,$l21284,$l31285,$l41286) {
var $step1279 = 0;
var $ans1287 = D;
var $al1288 = L[699];
try {
if(R.isActivationRecord($f1281)) {
$step1279 = $f1281.step;
$al1288 = $f1281.from;
$ans1287 = $f1281.ans;
f1281 = $f1281.args[0];
n1282 = $f1281.args[1];
l11283 = $f1281.args[2];
l21284 = $f1281.args[3];
l31285 = $f1281.args[4];
l41286 = $f1281.args[5];
arg_1303 = $f1281.vars[0];
anf_fun1302 = $f1281.vars[1];
anf_fun1300 = $f1281.vars[2];
ann_check_temp1305 = $f1281.vars[3];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[699],6,$t);
}
var f1281 = $f1281;
var n1282 = $n1282;
var l11283 = $l11283;
var l21284 = $l21284;
var l31285 = $l31285;
var l41286 = $l41286;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1279) {
case 0: $step1279 = 1;
$al1288 = L[693];
R._checkAnn(L[693],R.Function,f1281);
break;
case 1: $step1279 = 2;
$al1288 = L[694];
R._checkAnn(L[694],$type$Number8,n1282);
break;
case 2: $step1279 = 3;
$al1288 = L[695];
R._checkAnn(L[695],List51,l11283);
break;
case 3: $step1279 = 4;
$al1288 = L[696];
R._checkAnn(L[696],List51,l21284);
break;
case 4: $step1279 = 5;
$al1288 = L[697];
R._checkAnn(L[697],List51,l31285);
break;
case 5: $step1279 = 6;
$al1288 = L[698];
R._checkAnn(L[698],List51,l41286);
break;
case 6: var anf_fun1289 = is$empty473.$var;
$step1279 = 7;
$al1288 = L[675];
if(!(R.isFunction(anf_fun1289))) {
R.ffi.throwNonFunApp($al1288,anf_fun1289);
}
$ans1287 = anf_fun1289.app(l11283);
break;
case 7: var anf_arg925 = $ans1287;
$al1288 = L[675];
var anf_if1307 = R.checkWrapBoolean(anf_arg925);
$step1279 = R.isPyretTrue(anf_if1307)?8:9;
break;
case 8: $step1279 = 17;
$ans1287 = (true);
break;
case 9: var anf_fun1290 = is$empty473.$var;
$step1279 = 10;
$al1288 = L[676];
if(!(R.isFunction(anf_fun1290))) {
R.ffi.throwNonFunApp($al1288,anf_fun1290);
}
$ans1287 = anf_fun1290.app(l21284);
break;
case 10: var anf_arg1292 = $ans1287;
$al1288 = L[676];
var anf_if1296 = R.checkWrapBoolean(anf_arg1292);
$step1279 = R.isPyretTrue(anf_if1296)?11:12;
break;
case 11: $step1279 = 17;
$ans1287 = (true);
break;
case 12: var anf_fun1293 = is$empty473.$var;
$step1279 = 13;
$al1288 = L[677];
if(!(R.isFunction(anf_fun1293))) {
R.ffi.throwNonFunApp($al1288,anf_fun1293);
}
$ans1287 = anf_fun1293.app(l31285);
break;
case 13: var anf_arg1294 = $ans1287;
$al1288 = L[677];
var anf_if1295 = R.checkWrapBoolean(anf_arg1294);
$step1279 = R.isPyretTrue(anf_if1295)?14:15;
break;
case 14: $step1279 = 17;
$ans1287 = (true);
break;
case 15: var anf_fun937 = is$empty473.$var;
$step1279 = 16;
$al1288 = L[678];
if(!(R.isFunction(anf_fun937))) {
R.ffi.throwNonFunApp($al1288,anf_fun937);
}
$ans1287 = anf_fun937.app(l41286);
break;
case 16: var anf_arg938 = $ans1287;
$step1279 = 17;
$al1288 = L[678];
$ans1287 = R.checkWrapBoolean(anf_arg938);
break;
case 17: var anf_arg944 = $ans1287;
$al1288 = L[679];
var anf_if1306 = R.checkWrapBoolean(anf_arg944);
$step1279 = R.isPyretTrue(anf_if1306)?18:19;
break;
case 18: $step1279 = 23;
$ans1287 = empty158.$var;
break;
case 19: $al1288 = L[680];
var anf_arg941 = G(l11283,"first",L[680]);
$al1288 = L[681];
var anf_arg945 = G(l21284,"first",L[681]);
$al1288 = L[682];
var anf_arg1297 = G(l31285,"first",L[682]);
$al1288 = L[683];
var anf_arg1298 = G(l41286,"first",L[683]);
$step1279 = 20;
$al1288 = L[691];
if(!(R.isFunction(f1281))) {
R.ffi.throwNonFunApp($al1288,f1281);
}
$ans1287 = f1281.app(n1282,anf_arg941,anf_arg945,anf_arg1297,anf_arg1298);
break;
case 20: var arg_1303 = $ans1287;
var anf_fun1302 = link70.$var;
var anf_fun1300 = map4_n1299.$var;
$step1279 = 21;
$al1288 = L[690];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1288,_plus1);
}
$ans1287 = _plus1.app(n1282,(1));
break;
case 21: var anf_arg959 = $ans1287;
$al1288 = L[684];
var anf_arg960 = G(l11283,"rest",L[684]);
$al1288 = L[685];
var anf_arg961 = G(l21284,"rest",L[685]);
$al1288 = L[686];
var anf_arg962 = G(l31285,"rest",L[686]);
$al1288 = L[687];
var anf_arg1301 = G(l41286,"rest",L[687]);
$step1279 = 22;
$al1288 = L[689];
if(!(R.isFunction(anf_fun1300))) {
R.ffi.throwNonFunApp($al1288,anf_fun1300);
}
$ans1287 = anf_fun1300.app(f1281,anf_arg959,anf_arg960,anf_arg961,anf_arg962,anf_arg1301);
break;
case 22: var anf_arg1304 = $ans1287;
$step1279 = 23;
$al1288 = L[688];
if(!(R.isFunction(anf_fun1302))) {
R.ffi.throwNonFunApp($al1288,anf_fun1302);
}
$ans1287 = anf_fun1302.app(arg_1303,anf_arg1304);
break;
case 23: var ann_check_temp1305 = $ans1287;
$step1279 = 24;
$al1288 = L[692];
R._checkAnn(L[692],List51,ann_check_temp1305);
break;
case 24: $step1279 = 25;
$ans1287 = ann_check_temp1305;
break;
case 25: ++R.GAS;
return $ans1287;
default: throw "No case numbered " + $step1279 + " in $temp_lam1280";
}
}
} catch($e1308) {
if(R.isCont($e1308) && ($step1279 !== 25)) {
$e1308.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1288,$temp_lam1280,$step1279,[f1281,n1282,l11283,l21284,l31285,l41286],[arg_1303,anf_fun1302,anf_fun1300,ann_check_temp1305]);
}
if(R.isPyretException($e1308)) {
$e1308.pyretStack.push($al1288);
}
throw $e1308;
}
};
var anf_assign1309 = R.makeFunction($temp_lam1280,"map4_n");
map4_n1299.$var = anf_assign1309;
var $temp_lam1311 = function($f1312,$lst1313) {
var $step1310 = 0;
var $ans1314 = D;
var $al1315 = L[706];
try {
if(R.isActivationRecord($f1312)) {
$step1310 = $f1312.step;
$al1315 = $f1312.from;
$ans1314 = $f1312.ans;
f1312 = $f1312.args[0];
lst1313 = $f1312.args[1];
ann_check_temp1324 = $f1312.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[706],2,$t);
}
var f1312 = $f1312;
var lst1313 = $lst1313;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1310) {
case 0: $step1310 = 1;
$al1315 = L[704];
R._checkAnn(L[704],R.Function,f1312);
break;
case 1: $step1310 = 2;
$al1315 = L[705];
R._checkAnn(L[705],List51,lst1313);
break;
case 2: var $temp_lam1317 = function($$underscore1318,$elt1319) {
var $step1316 = 0;
var $ans1320 = D;
var $al1321 = L[701];
try {
if(R.isActivationRecord($$underscore1318)) {
$step1316 = $$underscore1318.step;
$al1321 = $$underscore1318.from;
$ans1320 = $$underscore1318.ans;
$underscore1318 = $$underscore1318.args[0];
elt1319 = $$underscore1318.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[701],2,$t);
}
var $underscore1318 = $$underscore1318;
var elt1319 = $elt1319;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1316) {
case 0: $step1316 = 1;
$al1321 = L[700];
if(!(R.isFunction(f1312))) {
R.ffi.throwNonFunApp($al1321,f1312);
}
$ans1320 = f1312.app(elt1319);
break;
case 1: ++R.GAS;
return $ans1320;
default: throw "No case numbered " + $step1316 + " in $temp_lam1317";
}
}
} catch($e1322) {
if(R.isCont($e1322) && ($step1316 !== 1)) {
$e1322.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1321,$temp_lam1317,$step1316,[$underscore1318,elt1319],[]);
}
if(R.isPyretException($e1322)) {
$e1322.pyretStack.push($al1321);
}
throw $e1322;
}
};
var anf_arg976 = R.makeFunction($temp_lam1317,"");
$step1310 = 3;
$al1315 = L[702];
$field1323 = R.getColonFieldLoc(builtins1,"raw-list-fold",L[702]);
if(R.isMethod($field1323)) {
$ans1314 = $field1323.full_meth(builtins1,anf_arg976,nothing2,lst1313);
} else {
if(!(R.isFunction($field1323))) {
R.ffi.throwNonFunApp(L[702],$field1323);
}
$ans1314 = $field1323.app(anf_arg976,nothing2,lst1313);
}
break;
case 3: var ann_check_temp1324 = nothing2;
$step1310 = 4;
$al1315 = L[703];
R._checkAnn(L[703],$type$Nothing8,ann_check_temp1324);
break;
case 4: $step1310 = 5;
$ans1314 = ann_check_temp1324;
break;
case 5: ++R.GAS;
return $ans1314;
default: throw "No case numbered " + $step1310 + " in $temp_lam1311";
}
}
} catch($e1325) {
if(R.isCont($e1325) && ($step1310 !== 5)) {
$e1325.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1315,$temp_lam1311,$step1310,[f1312,lst1313],[ann_check_temp1324]);
}
if(R.isPyretException($e1325)) {
$e1325.pyretStack.push($al1315);
}
throw $e1325;
}
};
var anf_assign1326 = R.makeFunction($temp_lam1311,"each");
each316.$var = anf_assign1326;
var $temp_lam1328 = function($f1329,$lst11330,$lst21331) {
var $step1327 = 0;
var $ans1332 = D;
var $al1333 = L[722];
try {
if(R.isActivationRecord($f1329)) {
$step1327 = $f1329.step;
$al1333 = $f1329.from;
$ans1332 = $f1329.ans;
f1329 = $f1329.args[0];
lst11330 = $f1329.args[1];
lst21331 = $f1329.args[2];
ann_check_temp1353 = $f1329.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[722],3,$t);
}
var f1329 = $f1329;
var lst11330 = $lst11330;
var lst21331 = $lst21331;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1327) {
case 0: $step1327 = 1;
$al1333 = L[719];
R._checkAnn(L[719],R.Function,f1329);
break;
case 1: $step1327 = 2;
$al1333 = L[720];
R._checkAnn(L[720],List51,lst11330);
break;
case 2: $step1327 = 3;
$al1333 = L[721];
R._checkAnn(L[721],List51,lst21331);
break;
case 3: var help1344 = {"$var":D};
var $temp_lam1335 = function($l11336,$l21337) {
var $step1334 = 0;
var $ans1338 = D;
var $al1339 = L[716];
try {
if(R.isActivationRecord($l11336)) {
$step1334 = $l11336.step;
$al1339 = $l11336.from;
$ans1338 = $l11336.ans;
l11336 = $l11336.args[0];
l21337 = $l11336.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[716],2,$t);
}
var l11336 = $l11336;
var l21337 = $l21337;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1334) {
case 0: var anf_fun1340 = is$empty473.$var;
$step1334 = 1;
$al1339 = L[707];
if(!(R.isFunction(anf_fun1340))) {
R.ffi.throwNonFunApp($al1339,anf_fun1340);
}
$ans1338 = anf_fun1340.app(l11336);
break;
case 1: var anf_arg968 = $ans1338;
$al1339 = L[707];
var anf_if1349 = R.checkWrapBoolean(anf_arg968);
$step1334 = R.isPyretTrue(anf_if1349)?2:3;
break;
case 2: $step1334 = 5;
$ans1338 = (true);
break;
case 3: var anf_fun1341 = is$empty473.$var;
$step1334 = 4;
$al1339 = L[708];
if(!(R.isFunction(anf_fun1341))) {
R.ffi.throwNonFunApp($al1339,anf_fun1341);
}
$ans1338 = anf_fun1341.app(l21337);
break;
case 4: var anf_arg1342 = $ans1338;
$step1334 = 5;
$al1339 = L[708];
$ans1338 = R.checkWrapBoolean(anf_arg1342);
break;
case 5: var anf_arg978 = $ans1338;
$al1339 = L[709];
var anf_if1348 = R.checkWrapBoolean(anf_arg978);
$step1334 = R.isPyretTrue(anf_if1348)?6:7;
break;
case 6: $step1334 = 9;
$ans1338 = nothing2;
break;
case 7: $al1339 = L[710];
var anf_arg981 = G(l11336,"first",L[710]);
$al1339 = L[711];
var anf_arg1343 = G(l21337,"first",L[711]);
$step1334 = 8;
$al1339 = L[715];
if(!(R.isFunction(f1329))) {
R.ffi.throwNonFunApp($al1339,f1329);
}
$ans1338 = f1329.app(anf_arg981,anf_arg1343);
break;
case 8: var anf_fun1345 = help1344.$var;
$al1339 = L[712];
var anf_arg1346 = G(l11336,"rest",L[712]);
$al1339 = L[713];
var anf_arg1347 = G(l21337,"rest",L[713]);
$step1334 = 9;
$al1339 = L[714];
if(!(R.isFunction(anf_fun1345))) {
R.ffi.throwNonFunApp($al1339,anf_fun1345);
}
$ans1338 = anf_fun1345.app(anf_arg1346,anf_arg1347);
break;
case 9: ++R.GAS;
return $ans1338;
default: throw "No case numbered " + $step1334 + " in $temp_lam1335";
}
}
} catch($e1350) {
if(R.isCont($e1350) && ($step1334 !== 9)) {
$e1350.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1339,$temp_lam1335,$step1334,[l11336,l21337],[]);
}
if(R.isPyretException($e1350)) {
$e1350.pyretStack.push($al1339);
}
throw $e1350;
}
};
var anf_assign1351 = R.makeFunction($temp_lam1335,"help");
help1344.$var = anf_assign1351;
var anf_fun1352 = help1344.$var;
$step1327 = 4;
$al1333 = L[718];
if(!(R.isFunction(anf_fun1352))) {
R.ffi.throwNonFunApp($al1333,anf_fun1352);
}
$ans1332 = anf_fun1352.app(lst11330,lst21331);
break;
case 4: var ann_check_temp1353 = $ans1332;
$step1327 = 5;
$al1333 = L[717];
R._checkAnn(L[717],$type$Nothing8,ann_check_temp1353);
break;
case 5: $step1327 = 6;
$ans1332 = ann_check_temp1353;
break;
case 6: ++R.GAS;
return $ans1332;
default: throw "No case numbered " + $step1327 + " in $temp_lam1328";
}
}
} catch($e1354) {
if(R.isCont($e1354) && ($step1327 !== 6)) {
$e1354.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1333,$temp_lam1328,$step1327,[f1329,lst11330,lst21331],[ann_check_temp1353]);
}
if(R.isPyretException($e1354)) {
$e1354.pyretStack.push($al1333);
}
throw $e1354;
}
};
var anf_assign1355 = R.makeFunction($temp_lam1328,"each2");
each21356.$var = anf_assign1355;
var $temp_lam1358 = function($f1359,$lst11360,$lst21361,$lst31362) {
var $step1357 = 0;
var $ans1363 = D;
var $al1364 = L[742];
try {
if(R.isActivationRecord($f1359)) {
$step1357 = $f1359.step;
$al1364 = $f1359.from;
$ans1363 = $f1359.ans;
f1359 = $f1359.args[0];
lst11360 = $f1359.args[1];
lst21361 = $f1359.args[2];
lst31362 = $f1359.args[3];
ann_check_temp1388 = $f1359.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[742],4,$t);
}
var f1359 = $f1359;
var lst11360 = $lst11360;
var lst21361 = $lst21361;
var lst31362 = $lst31362;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1357) {
case 0: $step1357 = 1;
$al1364 = L[738];
R._checkAnn(L[738],R.Function,f1359);
break;
case 1: $step1357 = 2;
$al1364 = L[739];
R._checkAnn(L[739],List51,lst11360);
break;
case 2: $step1357 = 3;
$al1364 = L[740];
R._checkAnn(L[740],List51,lst21361);
break;
case 3: $step1357 = 4;
$al1364 = L[741];
R._checkAnn(L[741],List51,lst31362);
break;
case 4: var help1380 = {"$var":D};
var $temp_lam1366 = function($l11367,$l21368,$l31369) {
var $step1365 = 0;
var $ans1370 = D;
var $al1371 = L[735];
try {
if(R.isActivationRecord($l11367)) {
$step1365 = $l11367.step;
$al1371 = $l11367.from;
$ans1370 = $l11367.ans;
l11367 = $l11367.args[0];
l21368 = $l11367.args[1];
l31369 = $l11367.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[735],3,$t);
}
var l11367 = $l11367;
var l21368 = $l21368;
var l31369 = $l31369;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1365) {
case 0: var anf_fun1372 = is$empty473.$var;
$step1365 = 1;
$al1371 = L[723];
if(!(R.isFunction(anf_fun1372))) {
R.ffi.throwNonFunApp($al1371,anf_fun1372);
}
$ans1370 = anf_fun1372.app(l11367);
break;
case 1: var anf_arg1026 = $ans1370;
$al1371 = L[723];
var anf_if1384 = R.checkWrapBoolean(anf_arg1026);
$step1365 = R.isPyretTrue(anf_if1384)?2:3;
break;
case 2: $step1365 = 8;
$ans1370 = (true);
break;
case 3: var anf_fun1373 = is$empty473.$var;
$step1365 = 4;
$al1371 = L[724];
if(!(R.isFunction(anf_fun1373))) {
R.ffi.throwNonFunApp($al1371,anf_fun1373);
}
$ans1370 = anf_fun1373.app(l21368);
break;
case 4: var anf_arg1376 = $ans1370;
$al1371 = L[724];
var anf_if1379 = R.checkWrapBoolean(anf_arg1376);
$step1365 = R.isPyretTrue(anf_if1379)?5:6;
break;
case 5: $step1365 = 8;
$ans1370 = (true);
break;
case 6: var anf_fun1378 = is$empty473.$var;
$step1365 = 7;
$al1371 = L[725];
if(!(R.isFunction(anf_fun1378))) {
R.ffi.throwNonFunApp($al1371,anf_fun1378);
}
$ans1370 = anf_fun1378.app(l31369);
break;
case 7: var anf_arg1027 = $ans1370;
$step1365 = 8;
$al1371 = L[725];
$ans1370 = R.checkWrapBoolean(anf_arg1027);
break;
case 8: var anf_arg1028 = $ans1370;
$al1371 = L[726];
var anf_if1383 = R.checkWrapBoolean(anf_arg1028);
$step1365 = R.isPyretTrue(anf_if1383)?9:10;
break;
case 9: $step1365 = 12;
$ans1370 = nothing2;
break;
case 10: $al1371 = L[727];
var anf_arg1014 = G(l11367,"first",L[727]);
$al1371 = L[728];
var anf_arg1009 = G(l21368,"first",L[728]);
$al1371 = L[729];
var anf_arg1011 = G(l31369,"first",L[729]);
$step1365 = 11;
$al1371 = L[734];
if(!(R.isFunction(f1359))) {
R.ffi.throwNonFunApp($al1371,f1359);
}
$ans1370 = f1359.app(anf_arg1014,anf_arg1009,anf_arg1011);
break;
case 11: var anf_fun1381 = help1380.$var;
$al1371 = L[730];
var anf_arg1021 = G(l11367,"rest",L[730]);
$al1371 = L[731];
var anf_arg1382 = G(l21368,"rest",L[731]);
$al1371 = L[732];
var anf_arg1019 = G(l31369,"rest",L[732]);
$step1365 = 12;
$al1371 = L[733];
if(!(R.isFunction(anf_fun1381))) {
R.ffi.throwNonFunApp($al1371,anf_fun1381);
}
$ans1370 = anf_fun1381.app(anf_arg1021,anf_arg1382,anf_arg1019);
break;
case 12: ++R.GAS;
return $ans1370;
default: throw "No case numbered " + $step1365 + " in $temp_lam1366";
}
}
} catch($e1385) {
if(R.isCont($e1385) && ($step1365 !== 12)) {
$e1385.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1371,$temp_lam1366,$step1365,[l11367,l21368,l31369],[]);
}
if(R.isPyretException($e1385)) {
$e1385.pyretStack.push($al1371);
}
throw $e1385;
}
};
var anf_assign1386 = R.makeFunction($temp_lam1366,"help");
help1380.$var = anf_assign1386;
var anf_fun1387 = help1380.$var;
$step1357 = 5;
$al1364 = L[737];
if(!(R.isFunction(anf_fun1387))) {
R.ffi.throwNonFunApp($al1364,anf_fun1387);
}
$ans1363 = anf_fun1387.app(lst11360,lst21361,lst31362);
break;
case 5: var ann_check_temp1388 = $ans1363;
$step1357 = 6;
$al1364 = L[736];
R._checkAnn(L[736],$type$Nothing8,ann_check_temp1388);
break;
case 6: $step1357 = 7;
$ans1363 = ann_check_temp1388;
break;
case 7: ++R.GAS;
return $ans1363;
default: throw "No case numbered " + $step1357 + " in $temp_lam1358";
}
}
} catch($e1389) {
if(R.isCont($e1389) && ($step1357 !== 7)) {
$e1389.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1364,$temp_lam1358,$step1357,[f1359,lst11360,lst21361,lst31362],[ann_check_temp1388]);
}
if(R.isPyretException($e1389)) {
$e1389.pyretStack.push($al1364);
}
throw $e1389;
}
};
var anf_assign1390 = R.makeFunction($temp_lam1358,"each3");
each31391.$var = anf_assign1390;
var $temp_lam1393 = function($f1394,$lst11395,$lst21396,$lst31397,$lst41398) {
var $step1392 = 0;
var $ans1399 = D;
var $al1400 = L[765];
try {
if(R.isActivationRecord($f1394)) {
$step1392 = $f1394.step;
$al1400 = $f1394.from;
$ans1399 = $f1394.ans;
f1394 = $f1394.args[0];
lst11395 = $f1394.args[1];
lst21396 = $f1394.args[2];
lst31397 = $f1394.args[3];
lst41398 = $f1394.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[765],5,$t);
}
var f1394 = $f1394;
var lst11395 = $lst11395;
var lst21396 = $lst21396;
var lst31397 = $lst31397;
var lst41398 = $lst41398;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1392) {
case 0: $step1392 = 1;
$al1400 = L[760];
R._checkAnn(L[760],R.Function,f1394);
break;
case 1: $step1392 = 2;
$al1400 = L[761];
R._checkAnn(L[761],List51,lst11395);
break;
case 2: $step1392 = 3;
$al1400 = L[762];
R._checkAnn(L[762],List51,lst21396);
break;
case 3: $step1392 = 4;
$al1400 = L[763];
R._checkAnn(L[763],List51,lst31397);
break;
case 4: $step1392 = 5;
$al1400 = L[764];
R._checkAnn(L[764],List51,lst41398);
break;
case 5: var help1416 = {"$var":D};
var $temp_lam1402 = function($l11403,$l21404,$l31405,$l41406) {
var $step1401 = 0;
var $ans1407 = D;
var $al1408 = L[758];
try {
if(R.isActivationRecord($l11403)) {
$step1401 = $l11403.step;
$al1408 = $l11403.from;
$ans1407 = $l11403.ans;
l11403 = $l11403.args[0];
l21404 = $l11403.args[1];
l31405 = $l11403.args[2];
l41406 = $l11403.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[758],4,$t);
}
var l11403 = $l11403;
var l21404 = $l21404;
var l31405 = $l31405;
var l41406 = $l41406;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1401) {
case 0: var anf_fun1409 = is$empty473.$var;
$step1401 = 1;
$al1408 = L[743];
if(!(R.isFunction(anf_fun1409))) {
R.ffi.throwNonFunApp($al1408,anf_fun1409);
}
$ans1407 = anf_fun1409.app(l11403);
break;
case 1: var anf_arg1032 = $ans1407;
$al1408 = L[743];
var anf_if1421 = R.checkWrapBoolean(anf_arg1032);
$step1401 = R.isPyretTrue(anf_if1421)?2:3;
break;
case 2: $step1401 = 11;
$ans1407 = (true);
break;
case 3: var anf_fun1410 = is$empty473.$var;
$step1401 = 4;
$al1408 = L[744];
if(!(R.isFunction(anf_fun1410))) {
R.ffi.throwNonFunApp($al1408,anf_fun1410);
}
$ans1407 = anf_fun1410.app(l21404);
break;
case 4: var anf_arg1411 = $ans1407;
$al1408 = L[744];
var anf_if1415 = R.checkWrapBoolean(anf_arg1411);
$step1401 = R.isPyretTrue(anf_if1415)?5:6;
break;
case 5: $step1401 = 11;
$ans1407 = (true);
break;
case 6: var anf_fun1412 = is$empty473.$var;
$step1401 = 7;
$al1408 = L[745];
if(!(R.isFunction(anf_fun1412))) {
R.ffi.throwNonFunApp($al1408,anf_fun1412);
}
$ans1407 = anf_fun1412.app(l31405);
break;
case 7: var anf_arg1065 = $ans1407;
$al1408 = L[745];
var anf_if1414 = R.checkWrapBoolean(anf_arg1065);
$step1401 = R.isPyretTrue(anf_if1414)?8:9;
break;
case 8: $step1401 = 11;
$ans1407 = (true);
break;
case 9: var anf_fun1413 = is$empty473.$var;
$step1401 = 10;
$al1408 = L[746];
if(!(R.isFunction(anf_fun1413))) {
R.ffi.throwNonFunApp($al1408,anf_fun1413);
}
$ans1407 = anf_fun1413.app(l41406);
break;
case 10: var anf_arg1074 = $ans1407;
$step1401 = 11;
$al1408 = L[746];
$ans1407 = R.checkWrapBoolean(anf_arg1074);
break;
case 11: var anf_arg1068 = $ans1407;
$al1408 = L[747];
var anf_if1420 = R.checkWrapBoolean(anf_arg1068);
$step1401 = R.isPyretTrue(anf_if1420)?12:13;
break;
case 12: $step1401 = 15;
$ans1407 = nothing2;
break;
case 13: $al1408 = L[748];
var anf_arg1075 = G(l11403,"first",L[748]);
$al1408 = L[749];
var anf_arg1076 = G(l21404,"first",L[749]);
$al1408 = L[750];
var anf_arg1083 = G(l31405,"first",L[750]);
$al1408 = L[751];
var anf_arg1078 = G(l41406,"first",L[751]);
$step1401 = 14;
$al1408 = L[757];
if(!(R.isFunction(f1394))) {
R.ffi.throwNonFunApp($al1408,f1394);
}
$ans1407 = f1394.app(anf_arg1075,anf_arg1076,anf_arg1083,anf_arg1078);
break;
case 14: var anf_fun1417 = help1416.$var;
$al1408 = L[752];
var anf_arg1418 = G(l11403,"rest",L[752]);
$al1408 = L[753];
var anf_arg1419 = G(l21404,"rest",L[753]);
$al1408 = L[754];
var anf_arg1101 = G(l31405,"rest",L[754]);
$al1408 = L[755];
var anf_arg1116 = G(l41406,"rest",L[755]);
$step1401 = 15;
$al1408 = L[756];
if(!(R.isFunction(anf_fun1417))) {
R.ffi.throwNonFunApp($al1408,anf_fun1417);
}
$ans1407 = anf_fun1417.app(anf_arg1418,anf_arg1419,anf_arg1101,anf_arg1116);
break;
case 15: ++R.GAS;
return $ans1407;
default: throw "No case numbered " + $step1401 + " in $temp_lam1402";
}
}
} catch($e1422) {
if(R.isCont($e1422) && ($step1401 !== 15)) {
$e1422.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1408,$temp_lam1402,$step1401,[l11403,l21404,l31405,l41406],[]);
}
if(R.isPyretException($e1422)) {
$e1422.pyretStack.push($al1408);
}
throw $e1422;
}
};
var anf_assign1423 = R.makeFunction($temp_lam1402,"help");
help1416.$var = anf_assign1423;
var anf_fun1424 = help1416.$var;
$step1392 = 6;
$al1400 = L[759];
if(!(R.isFunction(anf_fun1424))) {
R.ffi.throwNonFunApp($al1400,anf_fun1424);
}
$ans1399 = anf_fun1424.app(lst11395,lst21396,lst31397,lst41398);
break;
case 6: ++R.GAS;
return $ans1399;
default: throw "No case numbered " + $step1392 + " in $temp_lam1393";
}
}
} catch($e1425) {
if(R.isCont($e1425) && ($step1392 !== 6)) {
$e1425.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1400,$temp_lam1393,$step1392,[f1394,lst11395,lst21396,lst31397,lst41398],[]);
}
if(R.isPyretException($e1425)) {
$e1425.pyretStack.push($al1400);
}
throw $e1425;
}
};
var anf_assign1426 = R.makeFunction($temp_lam1393,"each4");
each41427.$var = anf_assign1426;
var $temp_lam1429 = function($f1430,$num1431,$lst1432) {
var $step1428 = 0;
var $ans1433 = D;
var $al1434 = L[778];
try {
if(R.isActivationRecord($f1430)) {
$step1428 = $f1430.step;
$al1434 = $f1430.from;
$ans1433 = $f1430.ans;
f1430 = $f1430.args[0];
num1431 = $f1430.args[1];
lst1432 = $f1430.args[2];
ann_check_temp1450 = $f1430.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[778],3,$t);
}
var f1430 = $f1430;
var num1431 = $num1431;
var lst1432 = $lst1432;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1428) {
case 0: $step1428 = 1;
$al1434 = L[775];
R._checkAnn(L[775],R.Function,f1430);
break;
case 1: $step1428 = 2;
$al1434 = L[776];
R._checkAnn(L[776],$type$Number8,num1431);
break;
case 2: $step1428 = 3;
$al1434 = L[777];
R._checkAnn(L[777],List51,lst1432);
break;
case 3: var help1442 = {"$var":D};
var $temp_lam1436 = function($n1437,$l1438) {
var $step1435 = 0;
var $ans1439 = D;
var $al1440 = L[772];
try {
if(R.isActivationRecord($n1437)) {
$step1435 = $n1437.step;
$al1440 = $n1437.from;
$ans1439 = $n1437.ans;
n1437 = $n1437.args[0];
l1438 = $n1437.args[1];
anf_fun1443 = $n1437.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[772],2,$t);
}
var n1437 = $n1437;
var l1438 = $l1438;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1435) {
case 0: var anf_fun1441 = is$empty473.$var;
$step1435 = 1;
$al1440 = L[766];
if(!(R.isFunction(anf_fun1441))) {
R.ffi.throwNonFunApp($al1440,anf_fun1441);
}
$ans1439 = anf_fun1441.app(l1438);
break;
case 1: var anf_arg1111 = $ans1439;
$al1440 = L[766];
var anf_if1446 = R.checkWrapBoolean(anf_arg1111);
$step1435 = R.isPyretTrue(anf_if1446)?2:3;
break;
case 2: $step1435 = 6;
$ans1439 = nothing2;
break;
case 3: $al1440 = L[767];
var anf_arg1113 = G(l1438,"first",L[767]);
$step1435 = 4;
$al1440 = L[771];
if(!(R.isFunction(f1430))) {
R.ffi.throwNonFunApp($al1440,f1430);
}
$ans1439 = f1430.app(n1437,anf_arg1113);
break;
case 4: var anf_fun1443 = help1442.$var;
$step1435 = 5;
$al1440 = L[770];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1440,_plus1);
}
$ans1439 = _plus1.app(n1437,(1));
break;
case 5: var anf_arg1444 = $ans1439;
$al1440 = L[768];
var anf_arg1445 = G(l1438,"rest",L[768]);
$step1435 = 6;
$al1440 = L[769];
if(!(R.isFunction(anf_fun1443))) {
R.ffi.throwNonFunApp($al1440,anf_fun1443);
}
$ans1439 = anf_fun1443.app(anf_arg1444,anf_arg1445);
break;
case 6: ++R.GAS;
return $ans1439;
default: throw "No case numbered " + $step1435 + " in $temp_lam1436";
}
}
} catch($e1447) {
if(R.isCont($e1447) && ($step1435 !== 6)) {
$e1447.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1440,$temp_lam1436,$step1435,[n1437,l1438],[anf_fun1443]);
}
if(R.isPyretException($e1447)) {
$e1447.pyretStack.push($al1440);
}
throw $e1447;
}
};
var anf_assign1448 = R.makeFunction($temp_lam1436,"help");
help1442.$var = anf_assign1448;
var anf_fun1449 = help1442.$var;
$step1428 = 4;
$al1434 = L[774];
if(!(R.isFunction(anf_fun1449))) {
R.ffi.throwNonFunApp($al1434,anf_fun1449);
}
$ans1433 = anf_fun1449.app(num1431,lst1432);
break;
case 4: var ann_check_temp1450 = $ans1433;
$step1428 = 5;
$al1434 = L[773];
R._checkAnn(L[773],$type$Nothing8,ann_check_temp1450);
break;
case 5: $step1428 = 6;
$ans1433 = ann_check_temp1450;
break;
case 6: ++R.GAS;
return $ans1433;
default: throw "No case numbered " + $step1428 + " in $temp_lam1429";
}
}
} catch($e1451) {
if(R.isCont($e1451) && ($step1428 !== 6)) {
$e1451.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1434,$temp_lam1429,$step1428,[f1430,num1431,lst1432],[ann_check_temp1450]);
}
if(R.isPyretException($e1451)) {
$e1451.pyretStack.push($al1434);
}
throw $e1451;
}
};
var anf_assign1452 = R.makeFunction($temp_lam1429,"each_n");
each_n1453.$var = anf_assign1452;
var $temp_lam1455 = function($f1456,$num1457,$lst11458,$lst21459) {
var $step1454 = 0;
var $ans1460 = D;
var $al1461 = L[796];
try {
if(R.isActivationRecord($f1456)) {
$step1454 = $f1456.step;
$al1461 = $f1456.from;
$ans1460 = $f1456.ans;
f1456 = $f1456.args[0];
num1457 = $f1456.args[1];
lst11458 = $f1456.args[2];
lst21459 = $f1456.args[3];
ann_check_temp1480 = $f1456.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[796],4,$t);
}
var f1456 = $f1456;
var num1457 = $num1457;
var lst11458 = $lst11458;
var lst21459 = $lst21459;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1454) {
case 0: $step1454 = 1;
$al1461 = L[792];
R._checkAnn(L[792],R.Function,f1456);
break;
case 1: $step1454 = 2;
$al1461 = L[793];
R._checkAnn(L[793],$type$Number8,num1457);
break;
case 2: $step1454 = 3;
$al1461 = L[794];
R._checkAnn(L[794],List51,lst11458);
break;
case 3: $step1454 = 4;
$al1461 = L[795];
R._checkAnn(L[795],List51,lst21459);
break;
case 4: var help1472 = {"$var":D};
var $temp_lam1463 = function($n1464,$l11465,$l21466) {
var $step1462 = 0;
var $ans1467 = D;
var $al1468 = L[789];
try {
if(R.isActivationRecord($n1464)) {
$step1462 = $n1464.step;
$al1468 = $n1464.from;
$ans1467 = $n1464.ans;
n1464 = $n1464.args[0];
l11465 = $n1464.args[1];
l21466 = $n1464.args[2];
anf_fun1473 = $n1464.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[789],3,$t);
}
var n1464 = $n1464;
var l11465 = $l11465;
var l21466 = $l21466;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1462) {
case 0: var anf_fun1469 = is$empty473.$var;
$step1462 = 1;
$al1468 = L[779];
if(!(R.isFunction(anf_fun1469))) {
R.ffi.throwNonFunApp($al1468,anf_fun1469);
}
$ans1467 = anf_fun1469.app(l11465);
break;
case 1: var anf_arg1132 = $ans1467;
$al1468 = L[779];
var anf_if1476 = R.checkWrapBoolean(anf_arg1132);
$step1462 = R.isPyretTrue(anf_if1476)?2:3;
break;
case 2: $step1462 = 5;
$ans1467 = (true);
break;
case 3: var anf_fun1470 = is$empty473.$var;
$step1462 = 4;
$al1468 = L[780];
if(!(R.isFunction(anf_fun1470))) {
R.ffi.throwNonFunApp($al1468,anf_fun1470);
}
$ans1467 = anf_fun1470.app(l21466);
break;
case 4: var anf_arg1140 = $ans1467;
$step1462 = 5;
$al1468 = L[780];
$ans1467 = R.checkWrapBoolean(anf_arg1140);
break;
case 5: var anf_arg1146 = $ans1467;
$al1468 = L[781];
var anf_if1475 = R.checkWrapBoolean(anf_arg1146);
$step1462 = R.isPyretTrue(anf_if1475)?6:7;
break;
case 6: $step1462 = 10;
$ans1467 = nothing2;
break;
case 7: $al1468 = L[782];
var anf_arg1147 = G(l11465,"first",L[782]);
$al1468 = L[783];
var anf_arg1471 = G(l21466,"first",L[783]);
$step1462 = 8;
$al1468 = L[788];
if(!(R.isFunction(f1456))) {
R.ffi.throwNonFunApp($al1468,f1456);
}
$ans1467 = f1456.app(n1464,anf_arg1147,anf_arg1471);
break;
case 8: var anf_fun1473 = help1472.$var;
$step1462 = 9;
$al1468 = L[787];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1468,_plus1);
}
$ans1467 = _plus1.app(n1464,(1));
break;
case 9: var anf_arg1160 = $ans1467;
$al1468 = L[784];
var anf_arg1474 = G(l11465,"rest",L[784]);
$al1468 = L[785];
var anf_arg1161 = G(l21466,"rest",L[785]);
$step1462 = 10;
$al1468 = L[786];
if(!(R.isFunction(anf_fun1473))) {
R.ffi.throwNonFunApp($al1468,anf_fun1473);
}
$ans1467 = anf_fun1473.app(anf_arg1160,anf_arg1474,anf_arg1161);
break;
case 10: ++R.GAS;
return $ans1467;
default: throw "No case numbered " + $step1462 + " in $temp_lam1463";
}
}
} catch($e1477) {
if(R.isCont($e1477) && ($step1462 !== 10)) {
$e1477.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1468,$temp_lam1463,$step1462,[n1464,l11465,l21466],[anf_fun1473]);
}
if(R.isPyretException($e1477)) {
$e1477.pyretStack.push($al1468);
}
throw $e1477;
}
};
var anf_assign1478 = R.makeFunction($temp_lam1463,"help");
help1472.$var = anf_assign1478;
var anf_fun1479 = help1472.$var;
$step1454 = 5;
$al1461 = L[791];
if(!(R.isFunction(anf_fun1479))) {
R.ffi.throwNonFunApp($al1461,anf_fun1479);
}
$ans1460 = anf_fun1479.app(num1457,lst11458,lst21459);
break;
case 5: var ann_check_temp1480 = $ans1460;
$step1454 = 6;
$al1461 = L[790];
R._checkAnn(L[790],$type$Nothing8,ann_check_temp1480);
break;
case 6: $step1454 = 7;
$ans1460 = ann_check_temp1480;
break;
case 7: ++R.GAS;
return $ans1460;
default: throw "No case numbered " + $step1454 + " in $temp_lam1455";
}
}
} catch($e1481) {
if(R.isCont($e1481) && ($step1454 !== 7)) {
$e1481.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1461,$temp_lam1455,$step1454,[f1456,num1457,lst11458,lst21459],[ann_check_temp1480]);
}
if(R.isPyretException($e1481)) {
$e1481.pyretStack.push($al1461);
}
throw $e1481;
}
};
var anf_assign1482 = R.makeFunction($temp_lam1455,"each2_n");
each2_n1483.$var = anf_assign1482;
var $temp_lam1485 = function($f1486,$num1487,$lst11488,$lst21489,$lst31490) {
var $step1484 = 0;
var $ans1491 = D;
var $al1492 = L[818];
try {
if(R.isActivationRecord($f1486)) {
$step1484 = $f1486.step;
$al1492 = $f1486.from;
$ans1491 = $f1486.ans;
f1486 = $f1486.args[0];
num1487 = $f1486.args[1];
lst11488 = $f1486.args[2];
lst21489 = $f1486.args[3];
lst31490 = $f1486.args[4];
ann_check_temp1519 = $f1486.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[818],5,$t);
}
var f1486 = $f1486;
var num1487 = $num1487;
var lst11488 = $lst11488;
var lst21489 = $lst21489;
var lst31490 = $lst31490;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1484) {
case 0: $step1484 = 1;
$al1492 = L[813];
R._checkAnn(L[813],R.Function,f1486);
break;
case 1: $step1484 = 2;
$al1492 = L[814];
R._checkAnn(L[814],$type$Number8,num1487);
break;
case 2: $step1484 = 3;
$al1492 = L[815];
R._checkAnn(L[815],List51,lst11488);
break;
case 3: $step1484 = 4;
$al1492 = L[816];
R._checkAnn(L[816],List51,lst21489);
break;
case 4: $step1484 = 5;
$al1492 = L[817];
R._checkAnn(L[817],List51,lst31490);
break;
case 5: var help1509 = {"$var":D};
var $temp_lam1494 = function($n1495,$l11496,$l21497,$l31498) {
var $step1493 = 0;
var $ans1499 = D;
var $al1500 = L[810];
try {
if(R.isActivationRecord($n1495)) {
$step1493 = $n1495.step;
$al1500 = $n1495.from;
$ans1499 = $n1495.ans;
n1495 = $n1495.args[0];
l11496 = $n1495.args[1];
l21497 = $n1495.args[2];
l31498 = $n1495.args[3];
anf_fun1510 = $n1495.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[810],4,$t);
}
var n1495 = $n1495;
var l11496 = $l11496;
var l21497 = $l21497;
var l31498 = $l31498;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1493) {
case 0: var anf_fun1501 = is$empty473.$var;
$step1493 = 1;
$al1500 = L[797];
if(!(R.isFunction(anf_fun1501))) {
R.ffi.throwNonFunApp($al1500,anf_fun1501);
}
$ans1499 = anf_fun1501.app(l11496);
break;
case 1: var anf_arg1502 = $ans1499;
$al1500 = L[797];
var anf_if1515 = R.checkWrapBoolean(anf_arg1502);
$step1493 = R.isPyretTrue(anf_if1515)?2:3;
break;
case 2: $step1493 = 8;
$ans1499 = (true);
break;
case 3: var anf_fun1503 = is$empty473.$var;
$step1493 = 4;
$al1500 = L[798];
if(!(R.isFunction(anf_fun1503))) {
R.ffi.throwNonFunApp($al1500,anf_fun1503);
}
$ans1499 = anf_fun1503.app(l21497);
break;
case 4: var anf_arg1504 = $ans1499;
$al1500 = L[798];
var anf_if1507 = R.checkWrapBoolean(anf_arg1504);
$step1493 = R.isPyretTrue(anf_if1507)?5:6;
break;
case 5: $step1493 = 8;
$ans1499 = (true);
break;
case 6: var anf_fun1505 = is$empty473.$var;
$step1493 = 7;
$al1500 = L[799];
if(!(R.isFunction(anf_fun1505))) {
R.ffi.throwNonFunApp($al1500,anf_fun1505);
}
$ans1499 = anf_fun1505.app(l31498);
break;
case 7: var anf_arg1506 = $ans1499;
$step1493 = 8;
$al1500 = L[799];
$ans1499 = R.checkWrapBoolean(anf_arg1506);
break;
case 8: var anf_arg1508 = $ans1499;
$al1500 = L[800];
var anf_if1514 = R.checkWrapBoolean(anf_arg1508);
$step1493 = R.isPyretTrue(anf_if1514)?9:10;
break;
case 9: $step1493 = 13;
$ans1499 = nothing2;
break;
case 10: $al1500 = L[801];
var anf_arg1184 = G(l11496,"first",L[801]);
$al1500 = L[802];
var anf_arg1177 = G(l21497,"first",L[802]);
$al1500 = L[803];
var anf_arg1185 = G(l31498,"first",L[803]);
$step1493 = 11;
$al1500 = L[809];
if(!(R.isFunction(f1486))) {
R.ffi.throwNonFunApp($al1500,f1486);
}
$ans1499 = f1486.app(n1495,anf_arg1184,anf_arg1177,anf_arg1185);
break;
case 11: var anf_fun1510 = help1509.$var;
$step1493 = 12;
$al1500 = L[808];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1500,_plus1);
}
$ans1499 = _plus1.app(n1495,(1));
break;
case 12: var anf_arg1181 = $ans1499;
$al1500 = L[804];
var anf_arg1186 = G(l11496,"rest",L[804]);
$al1500 = L[805];
var anf_arg1511 = G(l21497,"rest",L[805]);
$al1500 = L[806];
var anf_arg1513 = G(l31498,"rest",L[806]);
$step1493 = 13;
$al1500 = L[807];
if(!(R.isFunction(anf_fun1510))) {
R.ffi.throwNonFunApp($al1500,anf_fun1510);
}
$ans1499 = anf_fun1510.app(anf_arg1181,anf_arg1186,anf_arg1511,anf_arg1513);
break;
case 13: ++R.GAS;
return $ans1499;
default: throw "No case numbered " + $step1493 + " in $temp_lam1494";
}
}
} catch($e1516) {
if(R.isCont($e1516) && ($step1493 !== 13)) {
$e1516.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1500,$temp_lam1494,$step1493,[n1495,l11496,l21497,l31498],[anf_fun1510]);
}
if(R.isPyretException($e1516)) {
$e1516.pyretStack.push($al1500);
}
throw $e1516;
}
};
var anf_assign1517 = R.makeFunction($temp_lam1494,"help");
help1509.$var = anf_assign1517;
var anf_fun1518 = help1509.$var;
$step1484 = 6;
$al1492 = L[812];
if(!(R.isFunction(anf_fun1518))) {
R.ffi.throwNonFunApp($al1492,anf_fun1518);
}
$ans1491 = anf_fun1518.app(num1487,lst11488,lst21489,lst31490);
break;
case 6: var ann_check_temp1519 = $ans1491;
$step1484 = 7;
$al1492 = L[811];
R._checkAnn(L[811],$type$Nothing8,ann_check_temp1519);
break;
case 7: $step1484 = 8;
$ans1491 = ann_check_temp1519;
break;
case 8: ++R.GAS;
return $ans1491;
default: throw "No case numbered " + $step1484 + " in $temp_lam1485";
}
}
} catch($e1520) {
if(R.isCont($e1520) && ($step1484 !== 8)) {
$e1520.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1492,$temp_lam1485,$step1484,[f1486,num1487,lst11488,lst21489,lst31490],[ann_check_temp1519]);
}
if(R.isPyretException($e1520)) {
$e1520.pyretStack.push($al1492);
}
throw $e1520;
}
};
var anf_assign1521 = R.makeFunction($temp_lam1485,"each3_n");
each3_n1522.$var = anf_assign1521;
var $temp_lam1524 = function($f1525,$num1526,$lst11527,$lst21528,$lst31529,$lst41530) {
var $step1523 = 0;
var $ans1531 = D;
var $al1532 = L[844];
try {
if(R.isActivationRecord($f1525)) {
$step1523 = $f1525.step;
$al1532 = $f1525.from;
$ans1531 = $f1525.ans;
f1525 = $f1525.args[0];
num1526 = $f1525.args[1];
lst11527 = $f1525.args[2];
lst21528 = $f1525.args[3];
lst31529 = $f1525.args[4];
lst41530 = $f1525.args[5];
ann_check_temp1560 = $f1525.vars[0];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[844],6,$t);
}
var f1525 = $f1525;
var num1526 = $num1526;
var lst11527 = $lst11527;
var lst21528 = $lst21528;
var lst31529 = $lst31529;
var lst41530 = $lst41530;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1523) {
case 0: $step1523 = 1;
$al1532 = L[838];
R._checkAnn(L[838],R.Function,f1525);
break;
case 1: $step1523 = 2;
$al1532 = L[839];
R._checkAnn(L[839],$type$Number8,num1526);
break;
case 2: $step1523 = 3;
$al1532 = L[840];
R._checkAnn(L[840],List51,lst11527);
break;
case 3: $step1523 = 4;
$al1532 = L[841];
R._checkAnn(L[841],List51,lst21528);
break;
case 4: $step1523 = 5;
$al1532 = L[842];
R._checkAnn(L[842],List51,lst31529);
break;
case 5: $step1523 = 6;
$al1532 = L[843];
R._checkAnn(L[843],List51,lst41530);
break;
case 6: var help1550 = {"$var":D};
var $temp_lam1535 = function($n1536,$l11537,$l21538,$l31539,$l41540) {
var $step1534 = 0;
var $ans1541 = D;
var $al1542 = L[835];
try {
if(R.isActivationRecord($n1536)) {
$step1534 = $n1536.step;
$al1542 = $n1536.from;
$ans1541 = $n1536.ans;
n1536 = $n1536.args[0];
l11537 = $n1536.args[1];
l21538 = $n1536.args[2];
l31539 = $n1536.args[3];
l41540 = $n1536.args[4];
anf_fun1551 = $n1536.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[835],5,$t);
}
var n1536 = $n1536;
var l11537 = $l11537;
var l21538 = $l21538;
var l31539 = $l31539;
var l41540 = $l41540;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1534) {
case 0: var anf_fun1543 = is$empty473.$var;
$step1534 = 1;
$al1542 = L[819];
if(!(R.isFunction(anf_fun1543))) {
R.ffi.throwNonFunApp($al1542,anf_fun1543);
}
$ans1541 = anf_fun1543.app(l11537);
break;
case 1: var anf_arg1204 = $ans1541;
$al1542 = L[819];
var anf_if1556 = R.checkWrapBoolean(anf_arg1204);
$step1534 = R.isPyretTrue(anf_if1556)?2:3;
break;
case 2: $step1534 = 11;
$ans1541 = (true);
break;
case 3: var anf_fun1544 = is$empty473.$var;
$step1534 = 4;
$al1542 = L[820];
if(!(R.isFunction(anf_fun1544))) {
R.ffi.throwNonFunApp($al1542,anf_fun1544);
}
$ans1541 = anf_fun1544.app(l21538);
break;
case 4: var anf_arg1217 = $ans1541;
$al1542 = L[820];
var anf_if1318 = R.checkWrapBoolean(anf_arg1217);
$step1534 = R.isPyretTrue(anf_if1318)?5:6;
break;
case 5: $step1534 = 11;
$ans1541 = (true);
break;
case 6: var anf_fun1545 = is$empty473.$var;
$step1534 = 7;
$al1542 = L[821];
if(!(R.isFunction(anf_fun1545))) {
R.ffi.throwNonFunApp($al1542,anf_fun1545);
}
$ans1541 = anf_fun1545.app(l31539);
break;
case 7: var anf_arg1546 = $ans1541;
$al1542 = L[821];
var anf_if1549 = R.checkWrapBoolean(anf_arg1546);
$step1534 = R.isPyretTrue(anf_if1549)?8:9;
break;
case 8: $step1534 = 11;
$ans1541 = (true);
break;
case 9: var anf_fun1547 = is$empty473.$var;
$step1534 = 10;
$al1542 = L[822];
if(!(R.isFunction(anf_fun1547))) {
R.ffi.throwNonFunApp($al1542,anf_fun1547);
}
$ans1541 = anf_fun1547.app(l41540);
break;
case 10: var anf_arg1548 = $ans1541;
$step1534 = 11;
$al1542 = L[822];
$ans1541 = R.checkWrapBoolean(anf_arg1548);
break;
case 11: var anf_arg1222 = $ans1541;
$al1542 = L[823];
var anf_if1555 = R.checkWrapBoolean(anf_arg1222);
$step1534 = R.isPyretTrue(anf_if1555)?12:13;
break;
case 12: $step1534 = 16;
$ans1541 = nothing2;
break;
case 13: $al1542 = L[824];
var anf_arg1224 = G(l11537,"first",L[824]);
$al1542 = L[825];
var anf_arg1229 = G(l21538,"first",L[825]);
$al1542 = L[826];
var anf_arg1231 = G(l31539,"first",L[826]);
$al1542 = L[827];
var anf_arg1232 = G(l41540,"first",L[827]);
$step1534 = 14;
$al1542 = L[834];
if(!(R.isFunction(f1525))) {
R.ffi.throwNonFunApp($al1542,f1525);
}
$ans1541 = f1525.app(n1536,anf_arg1224,anf_arg1229,anf_arg1231,anf_arg1232);
break;
case 14: var anf_fun1551 = help1550.$var;
$step1534 = 15;
$al1542 = L[833];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1542,_plus1);
}
$ans1541 = _plus1.app(n1536,(1));
break;
case 15: var anf_arg1233 = $ans1541;
$al1542 = L[828];
var anf_arg1552 = G(l11537,"rest",L[828]);
$al1542 = L[829];
var anf_arg1554 = G(l21538,"rest",L[829]);
$al1542 = L[830];
var anf_arg1236 = G(l31539,"rest",L[830]);
$al1542 = L[831];
var anf_arg1258 = G(l41540,"rest",L[831]);
$step1534 = 16;
$al1542 = L[832];
if(!(R.isFunction(anf_fun1551))) {
R.ffi.throwNonFunApp($al1542,anf_fun1551);
}
$ans1541 = anf_fun1551.app(anf_arg1233,anf_arg1552,anf_arg1554,anf_arg1236,anf_arg1258);
break;
case 16: ++R.GAS;
return $ans1541;
default: throw "No case numbered " + $step1534 + " in $temp_lam1535";
}
}
} catch($e1557) {
if(R.isCont($e1557) && ($step1534 !== 16)) {
$e1557.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1542,$temp_lam1535,$step1534,[n1536,l11537,l21538,l31539,l41540],[anf_fun1551]);
}
if(R.isPyretException($e1557)) {
$e1557.pyretStack.push($al1542);
}
throw $e1557;
}
};
var anf_assign1558 = R.makeFunction($temp_lam1535,"help");
help1550.$var = anf_assign1558;
var anf_fun1559 = help1550.$var;
$step1523 = 7;
$al1532 = L[837];
if(!(R.isFunction(anf_fun1559))) {
R.ffi.throwNonFunApp($al1532,anf_fun1559);
}
$ans1531 = anf_fun1559.app(num1526,lst11527,lst21528,lst31529,lst41530);
break;
case 7: var ann_check_temp1560 = $ans1531;
$step1523 = 8;
$al1532 = L[836];
R._checkAnn(L[836],$type$Nothing8,ann_check_temp1560);
break;
case 8: $step1523 = 9;
$ans1531 = ann_check_temp1560;
break;
case 9: ++R.GAS;
return $ans1531;
default: throw "No case numbered " + $step1523 + " in $temp_lam1524";
}
}
} catch($e1561) {
if(R.isCont($e1561) && ($step1523 !== 9)) {
$e1561.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1532,$temp_lam1524,$step1523,[f1525,num1526,lst11527,lst21528,lst31529,lst41530],[ann_check_temp1560]);
}
if(R.isPyretException($e1561)) {
$e1561.pyretStack.push($al1532);
}
throw $e1561;
}
};
var anf_assign1562 = R.makeFunction($temp_lam1524,"each4_n");
each4_n1563.$var = anf_assign1562;
var $temp_lam1565 = function($f1566,$base1567,$lst1568) {
var $step1564 = 0;
var $ans1569 = D;
var $al1570 = L[860];
try {
if(R.isActivationRecord($f1566)) {
$step1564 = $f1566.step;
$al1570 = $f1566.from;
$ans1569 = $f1566.ans;
f1566 = $f1566.args[0];
base1567 = $f1566.args[1];
lst1568 = $f1566.args[2];
cases1571 = $f1566.vars[0];
ann_check_temp1587 = $f1566.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[860],3,$t);
}
var f1566 = $f1566;
var base1567 = $base1567;
var lst1568 = $lst1568;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1564) {
case 0: $step1564 = 1;
$al1570 = L[857];
R._checkAnn(L[857],R.Function,f1566);
break;
case 1: $step1564 = 2;
$al1570 = L[858];
R._checkAnn(L[858],R.Any,base1567);
break;
case 2: $step1564 = 3;
$al1570 = L[859];
R._checkAnn(L[859],List51,lst1568);
break;
case 3: var cases1571 = lst1568;
$step1564 = 4;
$al1570 = L[856];
R._checkAnn(L[856],List51,cases1571);
break;
case 4: var $cases_dispatch1586 = {"empty":5,
"link":6};
$al1570 = L[846];
$step1564 = $cases_dispatch1586[cases1571.$name] || 7;
break;
case 5: if(cases1571.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[845],false,L[846]);
}
$step1564 = 8;
$ans1569 = base1567;
break;
case 6: if(cases1571.$arity !== 2) {
if(cases1571.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[853],2,cases1571.$arity,L[846]);
} else {
R.ffi.throwCasesSingletonErrorC(L[853],true,L[846]);
}
}
$step1564 = 8;
$al1570 = L[854];
var $temp_branch1580 = function($elt1572,$r1577) {
var $step1581 = 0;
var $ans1582 = D;
var $al1583 = L[849];
try {
if(R.isActivationRecord($elt1572)) {
$step1581 = $elt1572.step;
$al1583 = $elt1572.from;
$ans1582 = $elt1572.ans;
elt1572 = $elt1572.args[0];
r1577 = $elt1572.args[1];
cases1573 = $elt1572.vars[0];
} else {
var elt1572 = $elt1572;
var r1577 = $r1577;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1581) {
case 0: $step1581 = 1;
$al1583 = L[852];
if(!(R.isFunction(f1566))) {
R.ffi.throwNonFunApp($al1583,f1566);
}
$ans1582 = f1566.app(base1567,elt1572);
break;
case 1: var cases1573 = $ans1582;
$step1581 = 2;
$al1583 = L[851];
R._checkAnn(L[851],R.getDotAnn(L[851],"E",E23,"Either"),cases1573);
break;
case 2: var $cases_dispatch1584 = {"left":3,
"right":4};
$al1583 = L[849];
$step1581 = $cases_dispatch1584[cases1573.$name] || 5;
break;
case 3: if(cases1573.$arity !== 1) {
if(cases1573.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[848],1,cases1573.$arity,L[849]);
} else {
R.ffi.throwCasesSingletonErrorC(L[848],true,L[849]);
}
}
var $fn187 = cases1573.$constructor.$fieldNames;
var v1576 = R.derefField(cases1573.dict[$fn187[0]],cases1573.$mut_fields_mask[0],false);
var anf_fun1575 = fold$while1574.$var;
$step1581 = 6;
$al1583 = L[847];
if(!(R.isFunction(anf_fun1575))) {
R.ffi.throwNonFunApp($al1583,anf_fun1575);
}
$ans1582 = anf_fun1575.app(f1566,v1576,r1577);
break;
case 4: if(cases1573.$arity !== 1) {
if(cases1573.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[850],1,cases1573.$arity,L[849]);
} else {
R.ffi.throwCasesSingletonErrorC(L[850],true,L[849]);
}
}
var $fn187 = cases1573.$constructor.$fieldNames;
var v1578 = R.derefField(cases1573.dict[$fn187[0]],cases1573.$mut_fields_mask[0],false);
$step1581 = 6;
$ans1582 = v1578;
break;
case 5: $step1581 = 6;
$al1583 = L[849];
$ans1582 = R.throwNoCasesMatched(L[849],cases1573);
break;
case 6: ++R.GAS;
return $ans1582;
default: throw "No case numbered " + $step1581 + " in $temp_branch1580";
}
}
} catch($e1585) {
if(R.isCont($e1585) && ($step1581 !== 6)) {
$e1585.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1583,$temp_branch1580,$step1581,[elt1572,r1577],[cases1573]);
}
if(R.isPyretException($e1585)) {
$e1585.pyretStack.push($al1583);
}
throw $e1585;
}
};
$ans1569 = cases1571.$app_fields($temp_branch1580,[false,false]);
break;
case 7: $step1564 = 8;
$al1570 = L[846];
$ans1569 = R.throwNoCasesMatched(L[846],cases1571);
break;
case 8: var ann_check_temp1587 = $ans1569;
$step1564 = 9;
$al1570 = L[855];
R._checkAnn(L[855],R.Any,ann_check_temp1587);
break;
case 9: $step1564 = 10;
$ans1569 = ann_check_temp1587;
break;
case 10: ++R.GAS;
return $ans1569;
default: throw "No case numbered " + $step1564 + " in $temp_lam1565";
}
}
} catch($e1588) {
if(R.isCont($e1588) && ($step1564 !== 10)) {
$e1588.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1570,$temp_lam1565,$step1564,[f1566,base1567,lst1568],[cases1571,ann_check_temp1587]);
}
if(R.isPyretException($e1588)) {
$e1588.pyretStack.push($al1570);
}
throw $e1588;
}
};
var anf_assign1589 = R.makeFunction($temp_lam1565,"fold-while");
fold$while1574.$var = anf_assign1589;
var $temp_lam1591 = function($f1592,$base1593,$lst1594) {
var $step1590 = 0;
var $ans1595 = D;
var $al1596 = L[866];
try {
if(R.isActivationRecord($f1592)) {
$step1590 = $f1592.step;
$al1596 = $f1592.from;
$ans1595 = $f1592.ans;
f1592 = $f1592.args[0];
base1593 = $f1592.args[1];
lst1594 = $f1592.args[2];
ann_check_temp1598 = $f1592.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[866],3,$t);
}
var f1592 = $f1592;
var base1593 = $base1593;
var lst1594 = $lst1594;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1590) {
case 0: $step1590 = 1;
$al1596 = L[863];
R._checkAnn(L[863],R.Function,f1592);
break;
case 1: $step1590 = 2;
$al1596 = L[864];
R._checkAnn(L[864],R.Any,base1593);
break;
case 2: $step1590 = 3;
$al1596 = L[865];
R._checkAnn(L[865],List51,lst1594);
break;
case 3: $step1590 = 4;
$al1596 = L[861];
$field1597 = R.getColonFieldLoc(builtins1,"raw-list-fold",L[861]);
if(R.isMethod($field1597)) {
$ans1595 = $field1597.full_meth(builtins1,f1592,base1593,lst1594);
} else {
if(!(R.isFunction($field1597))) {
R.ffi.throwNonFunApp(L[861],$field1597);
}
$ans1595 = $field1597.app(f1592,base1593,lst1594);
}
break;
case 4: var ann_check_temp1598 = $ans1595;
$step1590 = 5;
$al1596 = L[862];
R._checkAnn(L[862],R.Any,ann_check_temp1598);
break;
case 5: $step1590 = 6;
$ans1595 = ann_check_temp1598;
break;
case 6: ++R.GAS;
return $ans1595;
default: throw "No case numbered " + $step1590 + " in $temp_lam1591";
}
}
} catch($e1599) {
if(R.isCont($e1599) && ($step1590 !== 6)) {
$e1599.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1596,$temp_lam1591,$step1590,[f1592,base1593,lst1594],[ann_check_temp1598]);
}
if(R.isPyretException($e1599)) {
$e1599.pyretStack.push($al1596);
}
throw $e1599;
}
};
var anf_assign1600 = R.makeFunction($temp_lam1591,"fold");
fold496.$var = anf_assign1600;
var anf_assign1601 = fold496.$var;
foldl1602.$var = anf_assign1601;
var $temp_lam1604 = function($f1605,$base1606,$lst1607) {
var $step1603 = 0;
var $ans1608 = D;
var $al1609 = L[876];
try {
if(R.isActivationRecord($f1605)) {
$step1603 = $f1605.step;
$al1609 = $f1605.from;
$ans1608 = $f1605.ans;
f1605 = $f1605.args[0];
base1606 = $f1605.args[1];
lst1607 = $f1605.args[2];
ann_check_temp1615 = $f1605.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[876],3,$t);
}
var f1605 = $f1605;
var base1606 = $base1606;
var lst1607 = $lst1607;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1603) {
case 0: $step1603 = 1;
$al1609 = L[873];
R._checkAnn(L[873],R.Function,f1605);
break;
case 1: $step1603 = 2;
$al1609 = L[874];
R._checkAnn(L[874],R.Any,base1606);
break;
case 2: $step1603 = 3;
$al1609 = L[875];
R._checkAnn(L[875],List51,lst1607);
break;
case 3: var anf_fun1610 = is$empty473.$var;
$step1603 = 4;
$al1609 = L[867];
if(!(R.isFunction(anf_fun1610))) {
R.ffi.throwNonFunApp($al1609,anf_fun1610);
}
$ans1608 = anf_fun1610.app(lst1607);
break;
case 4: var anf_arg1260 = $ans1608;
$al1609 = L[867];
var anf_if1616 = R.checkWrapBoolean(anf_arg1260);
$step1603 = R.isPyretTrue(anf_if1616)?5:6;
break;
case 5: $step1603 = 8;
$ans1608 = base1606;
break;
case 6: var anf_fun1612 = foldr1611.$var;
$al1609 = L[868];
var anf_arg1613 = G(lst1607,"rest",L[868]);
$step1603 = 7;
$al1609 = L[871];
if(!(R.isFunction(anf_fun1612))) {
R.ffi.throwNonFunApp($al1609,anf_fun1612);
}
$ans1608 = anf_fun1612.app(f1605,base1606,anf_arg1613);
break;
case 7: var anf_arg1614 = $ans1608;
$al1609 = L[869];
var anf_arg1278 = G(lst1607,"first",L[869]);
$step1603 = 8;
$al1609 = L[870];
if(!(R.isFunction(f1605))) {
R.ffi.throwNonFunApp($al1609,f1605);
}
$ans1608 = f1605.app(anf_arg1614,anf_arg1278);
break;
case 8: var ann_check_temp1615 = $ans1608;
$step1603 = 9;
$al1609 = L[872];
R._checkAnn(L[872],R.Any,ann_check_temp1615);
break;
case 9: $step1603 = 10;
$ans1608 = ann_check_temp1615;
break;
case 10: ++R.GAS;
return $ans1608;
default: throw "No case numbered " + $step1603 + " in $temp_lam1604";
}
}
} catch($e1618) {
if(R.isCont($e1618) && ($step1603 !== 10)) {
$e1618.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1609,$temp_lam1604,$step1603,[f1605,base1606,lst1607],[ann_check_temp1615]);
}
if(R.isPyretException($e1618)) {
$e1618.pyretStack.push($al1609);
}
throw $e1618;
}
};
var anf_assign1619 = R.makeFunction($temp_lam1604,"foldr");
foldr1611.$var = anf_assign1619;
var $temp_lam1621 = function($f1622,$base1623,$l11624,$l21625) {
var $step1620 = 0;
var $ans1626 = D;
var $al1627 = L[891];
try {
if(R.isActivationRecord($f1622)) {
$step1620 = $f1622.step;
$al1627 = $f1622.from;
$ans1626 = $f1622.ans;
f1622 = $f1622.args[0];
base1623 = $f1622.args[1];
l11624 = $f1622.args[2];
l21625 = $f1622.args[3];
anf_fun1304 = $f1622.vars[0];
ann_check_temp1634 = $f1622.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[891],4,$t);
}
var f1622 = $f1622;
var base1623 = $base1623;
var l11624 = $l11624;
var l21625 = $l21625;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1620) {
case 0: $step1620 = 1;
$al1627 = L[887];
R._checkAnn(L[887],R.Function,f1622);
break;
case 1: $step1620 = 2;
$al1627 = L[888];
R._checkAnn(L[888],R.Any,base1623);
break;
case 2: $step1620 = 3;
$al1627 = L[889];
R._checkAnn(L[889],List51,l11624);
break;
case 3: $step1620 = 4;
$al1627 = L[890];
R._checkAnn(L[890],List51,l21625);
break;
case 4: var anf_fun1628 = is$empty473.$var;
$step1620 = 5;
$al1627 = L[877];
if(!(R.isFunction(anf_fun1628))) {
R.ffi.throwNonFunApp($al1627,anf_fun1628);
}
$ans1626 = anf_fun1628.app(l11624);
break;
case 5: var anf_arg1629 = $ans1626;
$al1627 = L[877];
var anf_if1637 = R.checkWrapBoolean(anf_arg1629);
$step1620 = R.isPyretTrue(anf_if1637)?6:7;
break;
case 6: $step1620 = 9;
$ans1626 = (true);
break;
case 7: var anf_fun1630 = is$empty473.$var;
$step1620 = 8;
$al1627 = L[878];
if(!(R.isFunction(anf_fun1630))) {
R.ffi.throwNonFunApp($al1627,anf_fun1630);
}
$ans1626 = anf_fun1630.app(l21625);
break;
case 8: var anf_arg1285 = $ans1626;
$step1620 = 9;
$al1627 = L[878];
$ans1626 = R.checkWrapBoolean(anf_arg1285);
break;
case 9: var anf_arg1291 = $ans1626;
$al1627 = L[879];
var anf_if1636 = R.checkWrapBoolean(anf_arg1291);
$step1620 = R.isPyretTrue(anf_if1636)?10:11;
break;
case 10: $step1620 = 13;
$ans1626 = base1623;
break;
case 11: var anf_fun1304 = fold21631.$var;
$al1627 = L[880];
var anf_arg1305 = G(l11624,"first",L[880]);
$al1627 = L[881];
var anf_arg1313 = G(l21625,"first",L[881]);
$step1620 = 12;
$al1627 = L[885];
if(!(R.isFunction(f1622))) {
R.ffi.throwNonFunApp($al1627,f1622);
}
$ans1626 = f1622.app(base1623,anf_arg1305,anf_arg1313);
break;
case 12: var anf_arg1633 = $ans1626;
$al1627 = L[882];
var anf_arg1308 = G(l11624,"rest",L[882]);
$al1627 = L[883];
var anf_arg1314 = G(l21625,"rest",L[883]);
$step1620 = 13;
$al1627 = L[884];
if(!(R.isFunction(anf_fun1304))) {
R.ffi.throwNonFunApp($al1627,anf_fun1304);
}
$ans1626 = anf_fun1304.app(f1622,anf_arg1633,anf_arg1308,anf_arg1314);
break;
case 13: var ann_check_temp1634 = $ans1626;
$step1620 = 14;
$al1627 = L[886];
R._checkAnn(L[886],R.Any,ann_check_temp1634);
break;
case 14: $step1620 = 15;
$ans1626 = ann_check_temp1634;
break;
case 15: ++R.GAS;
return $ans1626;
default: throw "No case numbered " + $step1620 + " in $temp_lam1621";
}
}
} catch($e1638) {
if(R.isCont($e1638) && ($step1620 !== 15)) {
$e1638.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1627,$temp_lam1621,$step1620,[f1622,base1623,l11624,l21625],[anf_fun1304,ann_check_temp1634]);
}
if(R.isPyretException($e1638)) {
$e1638.pyretStack.push($al1627);
}
throw $e1638;
}
};
var anf_assign1639 = R.makeFunction($temp_lam1621,"fold2");
fold21631.$var = anf_assign1639;
var $temp_lam1641 = function($f1642,$base1643,$l11644,$l21645,$l31646) {
var $step1640 = 0;
var $ans1647 = D;
var $al1648 = L[910];
try {
if(R.isActivationRecord($f1642)) {
$step1640 = $f1642.step;
$al1648 = $f1642.from;
$ans1647 = $f1642.ans;
f1642 = $f1642.args[0];
base1643 = $f1642.args[1];
l11644 = $f1642.args[2];
l21645 = $f1642.args[3];
l31646 = $f1642.args[4];
anf_fun1663 = $f1642.vars[0];
ann_check_temp1666 = $f1642.vars[1];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[910],5,$t);
}
var f1642 = $f1642;
var base1643 = $base1643;
var l11644 = $l11644;
var l21645 = $l21645;
var l31646 = $l31646;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1640) {
case 0: $step1640 = 1;
$al1648 = L[905];
R._checkAnn(L[905],R.Function,f1642);
break;
case 1: $step1640 = 2;
$al1648 = L[906];
R._checkAnn(L[906],R.Any,base1643);
break;
case 2: $step1640 = 3;
$al1648 = L[907];
R._checkAnn(L[907],List51,l11644);
break;
case 3: $step1640 = 4;
$al1648 = L[908];
R._checkAnn(L[908],List51,l21645);
break;
case 4: $step1640 = 5;
$al1648 = L[909];
R._checkAnn(L[909],List51,l31646);
break;
case 5: var anf_fun1649 = is$empty473.$var;
$step1640 = 6;
$al1648 = L[892];
if(!(R.isFunction(anf_fun1649))) {
R.ffi.throwNonFunApp($al1648,anf_fun1649);
}
$ans1647 = anf_fun1649.app(l11644);
break;
case 6: var anf_arg1653 = $ans1647;
$al1648 = L[892];
var anf_if1668 = R.checkWrapBoolean(anf_arg1653);
$step1640 = R.isPyretTrue(anf_if1668)?7:8;
break;
case 7: $step1640 = 13;
$ans1647 = (true);
break;
case 8: var anf_fun1654 = is$empty473.$var;
$step1640 = 9;
$al1648 = L[893];
if(!(R.isFunction(anf_fun1654))) {
R.ffi.throwNonFunApp($al1648,anf_fun1654);
}
$ans1647 = anf_fun1654.app(l21645);
break;
case 9: var anf_arg1334 = $ans1647;
$al1648 = L[893];
var anf_if1656 = R.checkWrapBoolean(anf_arg1334);
$step1640 = R.isPyretTrue(anf_if1656)?10:11;
break;
case 10: $step1640 = 13;
$ans1647 = (true);
break;
case 11: var anf_fun1655 = is$empty473.$var;
$step1640 = 12;
$al1648 = L[894];
if(!(R.isFunction(anf_fun1655))) {
R.ffi.throwNonFunApp($al1648,anf_fun1655);
}
$ans1647 = anf_fun1655.app(l31646);
break;
case 12: var anf_arg1335 = $ans1647;
$step1640 = 13;
$al1648 = L[894];
$ans1647 = R.checkWrapBoolean(anf_arg1335);
break;
case 13: var anf_arg1331 = $ans1647;
$al1648 = L[895];
var anf_if1667 = R.checkWrapBoolean(anf_arg1331);
$step1640 = R.isPyretTrue(anf_if1667)?14:15;
break;
case 14: $step1640 = 17;
$ans1647 = base1643;
break;
case 15: var anf_fun1663 = fold31657.$var;
$al1648 = L[896];
var anf_arg1661 = G(l11644,"first",L[896]);
$al1648 = L[897];
var anf_arg1349 = G(l21645,"first",L[897]);
$al1648 = L[898];
var anf_arg1662 = G(l31646,"first",L[898]);
$step1640 = 16;
$al1648 = L[903];
if(!(R.isFunction(f1642))) {
R.ffi.throwNonFunApp($al1648,f1642);
}
$ans1647 = f1642.app(base1643,anf_arg1661,anf_arg1349,anf_arg1662);
break;
case 16: var anf_arg1664 = $ans1647;
$al1648 = L[899];
var anf_arg1665 = G(l11644,"rest",L[899]);
$al1648 = L[900];
var anf_arg1351 = G(l21645,"rest",L[900]);
$al1648 = L[901];
var anf_arg1369 = G(l31646,"rest",L[901]);
$step1640 = 17;
$al1648 = L[902];
if(!(R.isFunction(anf_fun1663))) {
R.ffi.throwNonFunApp($al1648,anf_fun1663);
}
$ans1647 = anf_fun1663.app(f1642,anf_arg1664,anf_arg1665,anf_arg1351,anf_arg1369);
break;
case 17: var ann_check_temp1666 = $ans1647;
$step1640 = 18;
$al1648 = L[904];
R._checkAnn(L[904],R.Any,ann_check_temp1666);
break;
case 18: $step1640 = 19;
$ans1647 = ann_check_temp1666;
break;
case 19: ++R.GAS;
return $ans1647;
default: throw "No case numbered " + $step1640 + " in $temp_lam1641";
}
}
} catch($e1669) {
if(R.isCont($e1669) && ($step1640 !== 19)) {
$e1669.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1648,$temp_lam1641,$step1640,[f1642,base1643,l11644,l21645,l31646],[anf_fun1663,ann_check_temp1666]);
}
if(R.isPyretException($e1669)) {
$e1669.pyretStack.push($al1648);
}
throw $e1669;
}
};
var anf_assign1670 = R.makeFunction($temp_lam1641,"fold3");
fold31657.$var = anf_assign1670;
var $temp_lam1672 = function($f1673,$base1674,$l11675,$l21676,$l31677,$l41678) {
var $step1671 = 0;
var $ans1679 = D;
var $al1680 = L[933];
try {
if(R.isActivationRecord($f1673)) {
$step1671 = $f1673.step;
$al1680 = $f1673.from;
$ans1679 = $f1673.ans;
f1673 = $f1673.args[0];
base1674 = $f1673.args[1];
l11675 = $f1673.args[2];
l21676 = $f1673.args[3];
l31677 = $f1673.args[4];
l41678 = $f1673.args[5];
anf_fun1691 = $f1673.vars[0];
ann_check_temp1694 = $f1673.vars[1];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[933],6,$t);
}
var f1673 = $f1673;
var base1674 = $base1674;
var l11675 = $l11675;
var l21676 = $l21676;
var l31677 = $l31677;
var l41678 = $l41678;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1671) {
case 0: $step1671 = 1;
$al1680 = L[927];
R._checkAnn(L[927],R.Function,f1673);
break;
case 1: $step1671 = 2;
$al1680 = L[928];
R._checkAnn(L[928],R.Any,base1674);
break;
case 2: $step1671 = 3;
$al1680 = L[929];
R._checkAnn(L[929],List51,l11675);
break;
case 3: $step1671 = 4;
$al1680 = L[930];
R._checkAnn(L[930],List51,l21676);
break;
case 4: $step1671 = 5;
$al1680 = L[931];
R._checkAnn(L[931],List51,l31677);
break;
case 5: $step1671 = 6;
$al1680 = L[932];
R._checkAnn(L[932],List51,l41678);
break;
case 6: var anf_fun1681 = is$empty473.$var;
$step1671 = 7;
$al1680 = L[911];
if(!(R.isFunction(anf_fun1681))) {
R.ffi.throwNonFunApp($al1680,anf_fun1681);
}
$ans1679 = anf_fun1681.app(l11675);
break;
case 7: var anf_arg1362 = $ans1679;
$al1680 = L[911];
var anf_if1695 = R.checkWrapBoolean(anf_arg1362);
$step1671 = R.isPyretTrue(anf_if1695)?8:9;
break;
case 8: $step1671 = 17;
$ans1679 = (true);
break;
case 9: var anf_fun1682 = is$empty473.$var;
$step1671 = 10;
$al1680 = L[912];
if(!(R.isFunction(anf_fun1682))) {
R.ffi.throwNonFunApp($al1680,anf_fun1682);
}
$ans1679 = anf_fun1682.app(l21676);
break;
case 10: var anf_arg1357 = $ans1679;
$al1680 = L[912];
var anf_if1686 = R.checkWrapBoolean(anf_arg1357);
$step1671 = R.isPyretTrue(anf_if1686)?11:12;
break;
case 11: $step1671 = 17;
$ans1679 = (true);
break;
case 12: var anf_fun1683 = is$empty473.$var;
$step1671 = 13;
$al1680 = L[913];
if(!(R.isFunction(anf_fun1683))) {
R.ffi.throwNonFunApp($al1680,anf_fun1683);
}
$ans1679 = anf_fun1683.app(l31677);
break;
case 13: var anf_arg1370 = $ans1679;
$al1680 = L[913];
var anf_if1685 = R.checkWrapBoolean(anf_arg1370);
$step1671 = R.isPyretTrue(anf_if1685)?14:15;
break;
case 14: $step1671 = 17;
$ans1679 = (true);
break;
case 15: var anf_fun1684 = is$empty473.$var;
$step1671 = 16;
$al1680 = L[914];
if(!(R.isFunction(anf_fun1684))) {
R.ffi.throwNonFunApp($al1680,anf_fun1684);
}
$ans1679 = anf_fun1684.app(l41678);
break;
case 16: var anf_arg1373 = $ans1679;
$step1671 = 17;
$al1680 = L[914];
$ans1679 = R.checkWrapBoolean(anf_arg1373);
break;
case 17: var anf_arg1374 = $ans1679;
$al1680 = L[915];
var anf_if1501 = R.checkWrapBoolean(anf_arg1374);
$step1671 = R.isPyretTrue(anf_if1501)?18:19;
break;
case 18: $step1671 = 21;
$ans1679 = base1674;
break;
case 19: var anf_fun1691 = fold41687.$var;
$al1680 = L[916];
var anf_arg1688 = G(l11675,"first",L[916]);
$al1680 = L[917];
var anf_arg1690 = G(l21676,"first",L[917]);
$al1680 = L[918];
var anf_arg1378 = G(l31677,"first",L[918]);
$al1680 = L[919];
var anf_arg1413 = G(l41678,"first",L[919]);
$step1671 = 20;
$al1680 = L[925];
if(!(R.isFunction(f1673))) {
R.ffi.throwNonFunApp($al1680,f1673);
}
$ans1679 = f1673.app(base1674,anf_arg1688,anf_arg1690,anf_arg1378,anf_arg1413);
break;
case 20: var anf_arg1379 = $ans1679;
$al1680 = L[920];
var anf_arg1414 = G(l11675,"rest",L[920]);
$al1680 = L[921];
var anf_arg1692 = G(l21676,"rest",L[921]);
$al1680 = L[922];
var anf_arg1693 = G(l31677,"rest",L[922]);
$al1680 = L[923];
var anf_arg1388 = G(l41678,"rest",L[923]);
$step1671 = 21;
$al1680 = L[924];
if(!(R.isFunction(anf_fun1691))) {
R.ffi.throwNonFunApp($al1680,anf_fun1691);
}
$ans1679 = anf_fun1691.app(f1673,anf_arg1379,anf_arg1414,anf_arg1692,anf_arg1693,anf_arg1388);
break;
case 21: var ann_check_temp1694 = $ans1679;
$step1671 = 22;
$al1680 = L[926];
R._checkAnn(L[926],R.Any,ann_check_temp1694);
break;
case 22: $step1671 = 23;
$ans1679 = ann_check_temp1694;
break;
case 23: ++R.GAS;
return $ans1679;
default: throw "No case numbered " + $step1671 + " in $temp_lam1672";
}
}
} catch($e1696) {
if(R.isCont($e1696) && ($step1671 !== 23)) {
$e1696.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1680,$temp_lam1672,$step1671,[f1673,base1674,l11675,l21676,l31677,l41678],[anf_fun1691,ann_check_temp1694]);
}
if(R.isPyretException($e1696)) {
$e1696.pyretStack.push($al1680);
}
throw $e1696;
}
};
var anf_assign1697 = R.makeFunction($temp_lam1672,"fold4");
fold41687.$var = anf_assign1697;
var $temp_lam1699 = function($f1700,$num1701,$base1702,$lst1703) {
var $step1698 = 0;
var $ans1704 = D;
var $al1705 = L[947];
try {
if(R.isActivationRecord($f1700)) {
$step1698 = $f1700.step;
$al1705 = $f1700.from;
$ans1704 = $f1700.ans;
f1700 = $f1700.args[0];
num1701 = $f1700.args[1];
base1702 = $f1700.args[2];
lst1703 = $f1700.args[3];
ann_check_temp1723 = $f1700.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[947],4,$t);
}
var f1700 = $f1700;
var num1701 = $num1701;
var base1702 = $base1702;
var lst1703 = $lst1703;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1698) {
case 0: $step1698 = 1;
$al1705 = L[943];
R._checkAnn(L[943],R.Function,f1700);
break;
case 1: $step1698 = 2;
$al1705 = L[944];
R._checkAnn(L[944],$type$Number8,num1701);
break;
case 2: $step1698 = 3;
$al1705 = L[945];
R._checkAnn(L[945],R.Any,base1702);
break;
case 3: $step1698 = 4;
$al1705 = L[946];
R._checkAnn(L[946],List51,lst1703);
break;
case 4: var help1714 = {"$var":D};
var $temp_lam1707 = function($n1708,$acc1709,$partial$list1710) {
var $step1706 = 0;
var $ans1711 = D;
var $al1712 = L[940];
try {
if(R.isActivationRecord($n1708)) {
$step1706 = $n1708.step;
$al1712 = $n1708.from;
$ans1711 = $n1708.ans;
n1708 = $n1708.args[0];
acc1709 = $n1708.args[1];
partial$list1710 = $n1708.args[2];
anf_fun1716 = $n1708.vars[0];
anf_arg1718 = $n1708.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[940],3,$t);
}
var n1708 = $n1708;
var acc1709 = $acc1709;
var partial$list1710 = $partial$list1710;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1706) {
case 0: var anf_fun1713 = is$empty473.$var;
$step1706 = 1;
$al1712 = L[934];
if(!(R.isFunction(anf_fun1713))) {
R.ffi.throwNonFunApp($al1712,anf_fun1713);
}
$ans1711 = anf_fun1713.app(partial$list1710);
break;
case 1: var anf_arg1389 = $ans1711;
$al1712 = L[934];
var anf_if1719 = R.checkWrapBoolean(anf_arg1389);
$step1706 = R.isPyretTrue(anf_if1719)?2:3;
break;
case 2: $step1706 = 6;
$ans1711 = acc1709;
break;
case 3: var anf_fun1716 = help1714.$var;
$step1706 = 4;
$al1712 = L[939];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1712,_plus1);
}
$ans1711 = _plus1.app(n1708,(1));
break;
case 4: var anf_arg1718 = $ans1711;
$al1712 = L[935];
var anf_arg1397 = G(partial$list1710,"first",L[935]);
$step1706 = 5;
$al1712 = L[938];
if(!(R.isFunction(f1700))) {
R.ffi.throwNonFunApp($al1712,f1700);
}
$ans1711 = f1700.app(n1708,acc1709,anf_arg1397);
break;
case 5: var anf_arg1400 = $ans1711;
$al1712 = L[936];
var anf_arg1402 = G(partial$list1710,"rest",L[936]);
$step1706 = 6;
$al1712 = L[937];
if(!(R.isFunction(anf_fun1716))) {
R.ffi.throwNonFunApp($al1712,anf_fun1716);
}
$ans1711 = anf_fun1716.app(anf_arg1718,anf_arg1400,anf_arg1402);
break;
case 6: ++R.GAS;
return $ans1711;
default: throw "No case numbered " + $step1706 + " in $temp_lam1707";
}
}
} catch($e1720) {
if(R.isCont($e1720) && ($step1706 !== 6)) {
$e1720.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1712,$temp_lam1707,$step1706,[n1708,acc1709,partial$list1710],[anf_fun1716,anf_arg1718]);
}
if(R.isPyretException($e1720)) {
$e1720.pyretStack.push($al1712);
}
throw $e1720;
}
};
var anf_assign1721 = R.makeFunction($temp_lam1707,"help");
help1714.$var = anf_assign1721;
var anf_fun1722 = help1714.$var;
$step1698 = 5;
$al1705 = L[942];
if(!(R.isFunction(anf_fun1722))) {
R.ffi.throwNonFunApp($al1705,anf_fun1722);
}
$ans1704 = anf_fun1722.app(num1701,base1702,lst1703);
break;
case 5: var ann_check_temp1723 = $ans1704;
$step1698 = 6;
$al1705 = L[941];
R._checkAnn(L[941],R.Any,ann_check_temp1723);
break;
case 6: $step1698 = 7;
$ans1704 = ann_check_temp1723;
break;
case 7: ++R.GAS;
return $ans1704;
default: throw "No case numbered " + $step1698 + " in $temp_lam1699";
}
}
} catch($e1724) {
if(R.isCont($e1724) && ($step1698 !== 7)) {
$e1724.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1705,$temp_lam1699,$step1698,[f1700,num1701,base1702,lst1703],[ann_check_temp1723]);
}
if(R.isPyretException($e1724)) {
$e1724.pyretStack.push($al1705);
}
throw $e1724;
}
};
var anf_assign1725 = R.makeFunction($temp_lam1699,"fold_n");
fold_n1726.$var = anf_assign1725;
var $temp_lam1728 = function($lst1729,$elt1730,$eq1731) {
var $step1727 = 0;
var $ans1732 = D;
var $al1733 = L[964];
try {
if(R.isActivationRecord($lst1729)) {
$step1727 = $lst1729.step;
$al1733 = $lst1729.from;
$ans1732 = $lst1729.ans;
lst1729 = $lst1729.args[0];
elt1730 = $lst1729.args[1];
eq1731 = $lst1729.args[2];
r1745 = $lst1729.vars[0];
first$elt$equal1741 = $lst1729.vars[1];
cases1742 = $lst1729.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[964],3,$t);
}
var lst1729 = $lst1729;
var elt1730 = $elt1730;
var eq1731 = $eq1731;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1727) {
case 0: $step1727 = 1;
$al1733 = L[961];
R._checkAnn(L[961],List51,lst1729);
break;
case 1: $step1727 = 2;
$al1733 = L[962];
R._checkAnn(L[962],R.Any,elt1730);
break;
case 2: $step1727 = 3;
$al1733 = L[963];
R._checkAnn(L[963],R.Function,eq1731);
break;
case 3: var anf_fun1734 = is$empty473.$var;
$step1727 = 4;
$al1733 = L[948];
if(!(R.isFunction(anf_fun1734))) {
R.ffi.throwNonFunApp($al1733,anf_fun1734);
}
$ans1732 = anf_fun1734.app(lst1729);
break;
case 4: var anf_arg1410 = $ans1732;
$al1733 = L[948];
var anf_if1749 = R.checkWrapBoolean(anf_arg1410);
$step1727 = R.isPyretTrue(anf_if1749)?5:6;
break;
case 5: $step1727 = 15;
$al1733 = L[949];
$field1737 = R.getColonFieldLoc(equality19,"NotEqual",L[949]);
if(R.isMethod($field1737)) {
$ans1732 = $field1737.full_meth(equality19,("list"),elt1730,lst1729);
} else {
if(!(R.isFunction($field1737))) {
R.ffi.throwNonFunApp(L[949],$field1737);
}
$ans1732 = $field1737.app(("list"),elt1730,lst1729);
}
break;
case 6: var anf_fun1738 = is$link615.$var;
$step1727 = 7;
$al1733 = L[950];
if(!(R.isFunction(anf_fun1738))) {
R.ffi.throwNonFunApp($al1733,anf_fun1738);
}
$ans1732 = anf_fun1738.app(lst1729);
break;
case 7: var anf_arg1739 = $ans1732;
$al1733 = L[950];
var anf_if1748 = R.checkWrapBoolean(anf_arg1739);
$step1727 = R.isPyretTrue(anf_if1748)?8:14;
break;
case 8: $al1733 = L[951];
var f1740 = G(lst1729,"first",L[951]);
$al1733 = L[952];
var r1745 = G(lst1729,"rest",L[952]);
$step1727 = 9;
$al1733 = L[959];
if(!(R.isFunction(eq1731))) {
R.ffi.throwNonFunApp($al1733,eq1731);
}
$ans1732 = eq1731.app(f1740,elt1730);
break;
case 9: var first$elt$equal1741 = $ans1732;
var cases1742 = first$elt$equal1741;
$step1727 = 10;
$al1733 = L[958];
R._checkAnn(L[958],R.getDotAnn(L[958],"equality",equality24,"EqualityResult"),cases1742);
break;
case 10: var $cases_dispatch1747 = {"Equal":11};
$al1733 = L[955];
$step1727 = $cases_dispatch1747[cases1742.$name] || 12;
break;
case 11: if(cases1742.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[954],false,L[955]);
}
$step1727 = 15;
$al1733 = L[953];
$ans1732 = G(equality19,"Equal",L[953]);
break;
case 12: var anf_fun1744 = member$with1743.$var;
$step1727 = 13;
$al1733 = L[957];
if(!(R.isFunction(anf_fun1744))) {
R.ffi.throwNonFunApp($al1733,anf_fun1744);
}
$ans1732 = anf_fun1744.app(r1745,elt1730,eq1731);
break;
case 13: var anf_arg1440 = $ans1732;
$step1727 = 15;
$al1733 = L[956];
$field1746 = R.getColonFieldLoc(equality19,"equal-or",L[956]);
if(R.isMethod($field1746)) {
$ans1732 = $field1746.full_meth(equality19,first$elt$equal1741,anf_arg1440);
} else {
if(!(R.isFunction($field1746))) {
R.ffi.throwNonFunApp(L[956],$field1746);
}
$ans1732 = $field1746.app(first$elt$equal1741,anf_arg1440);
}
break;
case 14: $step1727 = 15;
$al1733 = L[960];
$ans1732 = R.throwNoBranchesMatched(L[960],("ask"));
break;
case 15: ++R.GAS;
return $ans1732;
default: throw "No case numbered " + $step1727 + " in $temp_lam1728";
}
}
} catch($e1750) {
if(R.isCont($e1750) && ($step1727 !== 15)) {
$e1750.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1733,$temp_lam1728,$step1727,[lst1729,elt1730,eq1731],[r1745,first$elt$equal1741,cases1742]);
}
if(R.isPyretException($e1750)) {
$e1750.pyretStack.push($al1733);
}
throw $e1750;
}
};
var anf_assign1751 = R.makeFunction($temp_lam1728,"member-with");
member$with1743.$var = anf_assign1751;
var $temp_lam1754 = function($lst1755,$elt1756) {
var $step1753 = 0;
var $ans1757 = D;
var $al1758 = L[969];
try {
if(R.isActivationRecord($lst1755)) {
$step1753 = $lst1755.step;
$al1758 = $lst1755.from;
$ans1757 = $lst1755.ans;
lst1755 = $lst1755.args[0];
elt1756 = $lst1755.args[1];
ann_check_temp1760 = $lst1755.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[969],2,$t);
}
var lst1755 = $lst1755;
var elt1756 = $elt1756;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1753) {
case 0: $step1753 = 1;
$al1758 = L[967];
R._checkAnn(L[967],List51,lst1755);
break;
case 1: $step1753 = 2;
$al1758 = L[968];
R._checkAnn(L[968],R.Any,elt1756);
break;
case 2: var anf_fun1759 = member$with1743.$var;
$step1753 = 3;
$al1758 = L[966];
if(!(R.isFunction(anf_fun1759))) {
R.ffi.throwNonFunApp($al1758,anf_fun1759);
}
$ans1757 = anf_fun1759.app(lst1755,elt1756,equal$always37);
break;
case 3: var ann_check_temp1760 = $ans1757;
$step1753 = 4;
$al1758 = L[965];
R._checkAnn(L[965],R.getDotAnn(L[965],"equality",equality24,"EqualityResult"),ann_check_temp1760);
break;
case 4: $step1753 = 5;
$ans1757 = ann_check_temp1760;
break;
case 5: ++R.GAS;
return $ans1757;
default: throw "No case numbered " + $step1753 + " in $temp_lam1754";
}
}
} catch($e1761) {
if(R.isCont($e1761) && ($step1753 !== 5)) {
$e1761.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1758,$temp_lam1754,$step1753,[lst1755,elt1756],[ann_check_temp1760]);
}
if(R.isPyretException($e1761)) {
$e1761.pyretStack.push($al1758);
}
throw $e1761;
}
};
var anf_assign1762 = R.makeFunction($temp_lam1754,"member3");
member31763.$var = anf_assign1762;
var $temp_lam1765 = function($lst1766,$elt1767) {
var $step1764 = 0;
var $ans1768 = D;
var $al1769 = L[975];
try {
if(R.isActivationRecord($lst1766)) {
$step1764 = $lst1766.step;
$al1769 = $lst1766.from;
$ans1768 = $lst1766.ans;
lst1766 = $lst1766.args[0];
elt1767 = $lst1766.args[1];
ann_check_temp1773 = $lst1766.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[975],2,$t);
}
var lst1766 = $lst1766;
var elt1767 = $elt1767;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1764) {
case 0: $step1764 = 1;
$al1769 = L[973];
R._checkAnn(L[973],List51,lst1766);
break;
case 1: $step1764 = 2;
$al1769 = L[974];
R._checkAnn(L[974],R.Any,elt1767);
break;
case 2: var anf_fun1770 = member31763.$var;
$step1764 = 3;
$al1769 = L[972];
if(!(R.isFunction(anf_fun1770))) {
R.ffi.throwNonFunApp($al1769,anf_fun1770);
}
$ans1768 = anf_fun1770.app(lst1766,elt1767);
break;
case 3: var anf_arg1446 = $ans1768;
$step1764 = 4;
$al1769 = L[970];
$field1772 = R.getColonFieldLoc(equality19,"to-boolean",L[970]);
if(R.isMethod($field1772)) {
$ans1768 = $field1772.full_meth(equality19,anf_arg1446);
} else {
if(!(R.isFunction($field1772))) {
R.ffi.throwNonFunApp(L[970],$field1772);
}
$ans1768 = $field1772.app(anf_arg1446);
}
break;
case 4: var ann_check_temp1773 = $ans1768;
$step1764 = 5;
$al1769 = L[971];
R._checkAnn(L[971],$type$Boolean9,ann_check_temp1773);
break;
case 5: $step1764 = 6;
$ans1768 = ann_check_temp1773;
break;
case 6: ++R.GAS;
return $ans1768;
default: throw "No case numbered " + $step1764 + " in $temp_lam1765";
}
}
} catch($e1774) {
if(R.isCont($e1774) && ($step1764 !== 6)) {
$e1774.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1769,$temp_lam1765,$step1764,[lst1766,elt1767],[ann_check_temp1773]);
}
if(R.isPyretException($e1774)) {
$e1774.pyretStack.push($al1769);
}
throw $e1774;
}
};
var anf_assign1775 = R.makeFunction($temp_lam1765,"member");
member1776.$var = anf_assign1775;
var member$always32099 = member31763.$var;
var member$always2100 = member1776.$var;
var member$now31787 = {"$var":D};
var member$now1803 = {"$var":D};
var member$identical31815 = {"$var":D};
var member$identical1828 = {"$var":D};
var shuffle1855 = {"$var":D};
var filter$map1865 = {"$var":D};
var filter$values1891 = {"$var":D};
var distinct1919 = {"$var":D};
var length1951 = {"$var":D};
var join$str1969 = {"$var":D};
var $temp_lam1778 = function($lst1779,$elt1780) {
var $step1777 = 0;
var $ans1781 = D;
var $al1782 = L[980];
try {
if(R.isActivationRecord($lst1779)) {
$step1777 = $lst1779.step;
$al1782 = $lst1779.from;
$ans1781 = $lst1779.ans;
lst1779 = $lst1779.args[0];
elt1780 = $lst1779.args[1];
ann_check_temp1784 = $lst1779.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[980],2,$t);
}
var lst1779 = $lst1779;
var elt1780 = $elt1780;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1777) {
case 0: $step1777 = 1;
$al1782 = L[978];
R._checkAnn(L[978],List51,lst1779);
break;
case 1: $step1777 = 2;
$al1782 = L[979];
R._checkAnn(L[979],R.Any,elt1780);
break;
case 2: var anf_fun1783 = member$with1743.$var;
$step1777 = 3;
$al1782 = L[977];
if(!(R.isFunction(anf_fun1783))) {
R.ffi.throwNonFunApp($al1782,anf_fun1783);
}
$ans1781 = anf_fun1783.app(lst1779,elt1780,equal$now36);
break;
case 3: var ann_check_temp1784 = $ans1781;
$step1777 = 4;
$al1782 = L[976];
R._checkAnn(L[976],R.getDotAnn(L[976],"equality",equality24,"EqualityResult"),ann_check_temp1784);
break;
case 4: $step1777 = 5;
$ans1781 = ann_check_temp1784;
break;
case 5: ++R.GAS;
return $ans1781;
default: throw "No case numbered " + $step1777 + " in $temp_lam1778";
}
}
} catch($e1785) {
if(R.isCont($e1785) && ($step1777 !== 5)) {
$e1785.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1782,$temp_lam1778,$step1777,[lst1779,elt1780],[ann_check_temp1784]);
}
if(R.isPyretException($e1785)) {
$e1785.pyretStack.push($al1782);
}
throw $e1785;
}
};
var anf_assign1786 = R.makeFunction($temp_lam1778,"member-now3");
member$now31787.$var = anf_assign1786;
var $temp_lam1789 = function($lst1790,$elt1791) {
var $step1788 = 0;
var $ans1792 = D;
var $al1793 = L[986];
try {
if(R.isActivationRecord($lst1790)) {
$step1788 = $lst1790.step;
$al1793 = $lst1790.from;
$ans1792 = $lst1790.ans;
lst1790 = $lst1790.args[0];
elt1791 = $lst1790.args[1];
ann_check_temp1800 = $lst1790.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[986],2,$t);
}
var lst1790 = $lst1790;
var elt1791 = $elt1791;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1788) {
case 0: $step1788 = 1;
$al1793 = L[984];
R._checkAnn(L[984],List51,lst1790);
break;
case 1: $step1788 = 2;
$al1793 = L[985];
R._checkAnn(L[985],R.Any,elt1791);
break;
case 2: var anf_fun1794 = member$now31787.$var;
$step1788 = 3;
$al1793 = L[983];
if(!(R.isFunction(anf_fun1794))) {
R.ffi.throwNonFunApp($al1793,anf_fun1794);
}
$ans1792 = anf_fun1794.app(lst1790,elt1791);
break;
case 3: var anf_arg1798 = $ans1792;
$step1788 = 4;
$al1793 = L[981];
$field1799 = R.getColonFieldLoc(equality19,"to-boolean",L[981]);
if(R.isMethod($field1799)) {
$ans1792 = $field1799.full_meth(equality19,anf_arg1798);
} else {
if(!(R.isFunction($field1799))) {
R.ffi.throwNonFunApp(L[981],$field1799);
}
$ans1792 = $field1799.app(anf_arg1798);
}
break;
case 4: var ann_check_temp1800 = $ans1792;
$step1788 = 5;
$al1793 = L[982];
R._checkAnn(L[982],$type$Boolean9,ann_check_temp1800);
break;
case 5: $step1788 = 6;
$ans1792 = ann_check_temp1800;
break;
case 6: ++R.GAS;
return $ans1792;
default: throw "No case numbered " + $step1788 + " in $temp_lam1789";
}
}
} catch($e1801) {
if(R.isCont($e1801) && ($step1788 !== 6)) {
$e1801.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1793,$temp_lam1789,$step1788,[lst1790,elt1791],[ann_check_temp1800]);
}
if(R.isPyretException($e1801)) {
$e1801.pyretStack.push($al1793);
}
throw $e1801;
}
};
var anf_assign1802 = R.makeFunction($temp_lam1789,"member-now");
member$now1803.$var = anf_assign1802;
var $temp_lam1805 = function($lst1806,$elt1807) {
var $step1804 = 0;
var $ans1808 = D;
var $al1809 = L[991];
try {
if(R.isActivationRecord($lst1806)) {
$step1804 = $lst1806.step;
$al1809 = $lst1806.from;
$ans1808 = $lst1806.ans;
lst1806 = $lst1806.args[0];
elt1807 = $lst1806.args[1];
ann_check_temp1811 = $lst1806.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[991],2,$t);
}
var lst1806 = $lst1806;
var elt1807 = $elt1807;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1804) {
case 0: $step1804 = 1;
$al1809 = L[989];
R._checkAnn(L[989],List51,lst1806);
break;
case 1: $step1804 = 2;
$al1809 = L[990];
R._checkAnn(L[990],R.Any,elt1807);
break;
case 2: var anf_fun1810 = member$with1743.$var;
$step1804 = 3;
$al1809 = L[988];
if(!(R.isFunction(anf_fun1810))) {
R.ffi.throwNonFunApp($al1809,anf_fun1810);
}
$ans1808 = anf_fun1810.app(lst1806,elt1807,identical35);
break;
case 3: var ann_check_temp1811 = $ans1808;
$step1804 = 4;
$al1809 = L[987];
R._checkAnn(L[987],R.getDotAnn(L[987],"equality",equality24,"EqualityResult"),ann_check_temp1811);
break;
case 4: $step1804 = 5;
$ans1808 = ann_check_temp1811;
break;
case 5: ++R.GAS;
return $ans1808;
default: throw "No case numbered " + $step1804 + " in $temp_lam1805";
}
}
} catch($e1813) {
if(R.isCont($e1813) && ($step1804 !== 5)) {
$e1813.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1809,$temp_lam1805,$step1804,[lst1806,elt1807],[ann_check_temp1811]);
}
if(R.isPyretException($e1813)) {
$e1813.pyretStack.push($al1809);
}
throw $e1813;
}
};
var anf_assign1814 = R.makeFunction($temp_lam1805,"member-identical3");
member$identical31815.$var = anf_assign1814;
var $temp_lam1817 = function($lst1818,$elt1819) {
var $step1816 = 0;
var $ans1820 = D;
var $al1821 = L[997];
try {
if(R.isActivationRecord($lst1818)) {
$step1816 = $lst1818.step;
$al1821 = $lst1818.from;
$ans1820 = $lst1818.ans;
lst1818 = $lst1818.args[0];
elt1819 = $lst1818.args[1];
ann_check_temp1825 = $lst1818.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[997],2,$t);
}
var lst1818 = $lst1818;
var elt1819 = $elt1819;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1816) {
case 0: $step1816 = 1;
$al1821 = L[995];
R._checkAnn(L[995],List51,lst1818);
break;
case 1: $step1816 = 2;
$al1821 = L[996];
R._checkAnn(L[996],R.Any,elt1819);
break;
case 2: var anf_fun1822 = member$identical31815.$var;
$step1816 = 3;
$al1821 = L[994];
if(!(R.isFunction(anf_fun1822))) {
R.ffi.throwNonFunApp($al1821,anf_fun1822);
}
$ans1820 = anf_fun1822.app(lst1818,elt1819);
break;
case 3: var anf_arg1490 = $ans1820;
$step1816 = 4;
$al1821 = L[992];
$field1824 = R.getColonFieldLoc(equality19,"to-boolean",L[992]);
if(R.isMethod($field1824)) {
$ans1820 = $field1824.full_meth(equality19,anf_arg1490);
} else {
if(!(R.isFunction($field1824))) {
R.ffi.throwNonFunApp(L[992],$field1824);
}
$ans1820 = $field1824.app(anf_arg1490);
}
break;
case 4: var ann_check_temp1825 = $ans1820;
$step1816 = 5;
$al1821 = L[993];
R._checkAnn(L[993],$type$Boolean9,ann_check_temp1825);
break;
case 5: $step1816 = 6;
$ans1820 = ann_check_temp1825;
break;
case 6: ++R.GAS;
return $ans1820;
default: throw "No case numbered " + $step1816 + " in $temp_lam1817";
}
}
} catch($e1826) {
if(R.isCont($e1826) && ($step1816 !== 6)) {
$e1826.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1821,$temp_lam1817,$step1816,[lst1818,elt1819],[ann_check_temp1825]);
}
if(R.isPyretException($e1826)) {
$e1826.pyretStack.push($al1821);
}
throw $e1826;
}
};
var anf_assign1827 = R.makeFunction($temp_lam1817,"member-identical");
member$identical1828.$var = anf_assign1827;
var $temp_lam1830 = function($lst1831) {
var $step1829 = 0;
var $ans1832 = D;
var $al1833 = L[1011];
try {
if(R.isActivationRecord($lst1831)) {
$step1829 = $lst1831.step;
$al1833 = $lst1831.from;
$ans1832 = $lst1831.ans;
lst1831 = $lst1831.args[0];
anf_fun1848 = $lst1831.vars[0];
anf_arg1499 = $lst1831.vars[1];
anf_arg1846 = $lst1831.vars[2];
ann_check_temp1851 = $lst1831.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1011],1,$t);
}
var lst1831 = $lst1831;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1829) {
case 0: $step1829 = 1;
$al1833 = L[1010];
R._checkAnn(L[1010],List51,lst1831);
break;
case 1: var anf_fun1834 = is$empty473.$var;
$step1829 = 2;
$al1833 = L[998];
if(!(R.isFunction(anf_fun1834))) {
R.ffi.throwNonFunApp($al1833,anf_fun1834);
}
$ans1832 = anf_fun1834.app(lst1831);
break;
case 2: var anf_arg1486 = $ans1832;
$al1833 = L[998];
var anf_if1852 = R.checkWrapBoolean(anf_arg1486);
$step1829 = R.isPyretTrue(anf_if1852)?3:4;
break;
case 3: $step1829 = 8;
$ans1832 = empty158.$var;
break;
case 4: var anf_fun1848 = fold_n1726.$var;
var $temp_lam1836 = function($i1837,$arr1838,$e1839) {
var $step1835 = 0;
var $ans1840 = D;
var $al1841 = L[1003];
try {
if(R.isActivationRecord($i1837)) {
$step1835 = $i1837.step;
$al1841 = $i1837.from;
$ans1840 = $i1837.ans;
i1837 = $i1837.args[0];
arr1838 = $i1837.args[1];
e1839 = $i1837.args[2];
ix1842 = $i1837.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1003],3,$t);
}
var i1837 = $i1837;
var arr1838 = $arr1838;
var e1839 = $e1839;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1835) {
case 0: $step1835 = 1;
$al1841 = L[1002];
if(!(R.isFunction(random4))) {
R.ffi.throwNonFunApp($al1841,random4);
}
$ans1840 = random4.app(i1837);
break;
case 1: var ix1842 = $ans1840;
$step1835 = 2;
$al1841 = L[1001];
if(!(R.isFunction(raw$array$get3))) {
R.ffi.throwNonFunApp($al1841,raw$array$get3);
}
$ans1840 = raw$array$get3.app(arr1838,ix1842);
break;
case 2: var anf_arg1494 = $ans1840;
$step1835 = 3;
$al1841 = L[1000];
if(!(R.isFunction(raw$array$set2))) {
R.ffi.throwNonFunApp($al1841,raw$array$set2);
}
$ans1840 = raw$array$set2.app(arr1838,i1837,anf_arg1494);
break;
case 3: $step1835 = 4;
$al1841 = L[999];
if(!(R.isFunction(raw$array$set2))) {
R.ffi.throwNonFunApp($al1841,raw$array$set2);
}
$ans1840 = raw$array$set2.app(arr1838,ix1842,e1839);
break;
case 4: $step1835 = 5;
$ans1840 = arr1838;
break;
case 5: ++R.GAS;
return $ans1840;
default: throw "No case numbered " + $step1835 + " in $temp_lam1836";
}
}
} catch($e1843) {
if(R.isCont($e1843) && ($step1835 !== 5)) {
$e1843.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1841,$temp_lam1836,$step1835,[i1837,arr1838,e1839],[ix1842]);
}
if(R.isPyretException($e1843)) {
$e1843.pyretStack.push($al1841);
}
throw $e1843;
}
};
var anf_arg1499 = R.makeFunction($temp_lam1836,"for-body<line 783, column 11>");
$al1833 = L[1004];
var anf_arg1846 = G(lst1831,"first",L[1004]);
$step1829 = 5;
$al1833 = L[1005];
$field1845 = R.getColonFieldLoc(lst1831,"length",L[1005]);
if(R.isMethod($field1845)) {
$ans1832 = $field1845.full_meth(lst1831);
} else {
if(!(R.isFunction($field1845))) {
R.ffi.throwNonFunApp(L[1005],$field1845);
}
$ans1832 = $field1845.app();
}
break;
case 5: var anf_arg1847 = $ans1832;
$step1829 = 6;
$al1833 = L[1008];
if(!(R.isFunction(raw$array$of1))) {
R.ffi.throwNonFunApp($al1833,raw$array$of1);
}
$ans1832 = raw$array$of1.app(anf_arg1846,anf_arg1847);
break;
case 6: var anf_arg1849 = $ans1832;
$al1833 = L[1006];
var anf_arg1510 = G(lst1831,"rest",L[1006]);
$step1829 = 7;
$al1833 = L[1003];
if(!(R.isFunction(anf_fun1848))) {
R.ffi.throwNonFunApp($al1833,anf_fun1848);
}
$ans1832 = anf_fun1848.app(anf_arg1499,(1),anf_arg1849,anf_arg1510);
break;
case 7: var elts1850 = $ans1832;
$step1829 = 8;
$al1833 = L[1007];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al1833,raw$array$to$list5);
}
$ans1832 = raw$array$to$list5.app(elts1850);
break;
case 8: var ann_check_temp1851 = $ans1832;
$step1829 = 9;
$al1833 = L[1009];
R._checkAnn(L[1009],List51,ann_check_temp1851);
break;
case 9: $step1829 = 10;
$ans1832 = ann_check_temp1851;
break;
case 10: ++R.GAS;
return $ans1832;
default: throw "No case numbered " + $step1829 + " in $temp_lam1830";
}
}
} catch($e1853) {
if(R.isCont($e1853) && ($step1829 !== 10)) {
$e1853.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1833,$temp_lam1830,$step1829,[lst1831],[anf_fun1848,anf_arg1499,anf_arg1846,ann_check_temp1851]);
}
if(R.isPyretException($e1853)) {
$e1853.pyretStack.push($al1833);
}
throw $e1853;
}
};
var anf_assign1854 = R.makeFunction($temp_lam1830,"shuffle");
shuffle1855.$var = anf_assign1854;
var $temp_lam1857 = function($f1858,$lst1859) {
var $step1856 = 0;
var $ans1860 = D;
var $al1861 = L[1028];
try {
if(R.isActivationRecord($f1858)) {
$step1856 = $f1858.step;
$al1861 = $f1858.from;
$ans1860 = $f1858.ans;
f1858 = $f1858.args[0];
lst1859 = $f1858.args[1];
cases1862 = $f1858.vars[0];
ann_check_temp1880 = $f1858.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1028],2,$t);
}
var f1858 = $f1858;
var lst1859 = $lst1859;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1856) {
case 0: $step1856 = 1;
$al1861 = L[1026];
R._checkAnn(L[1026],R.Function,f1858);
break;
case 1: $step1856 = 2;
$al1861 = L[1027];
R._checkAnn(L[1027],List51,lst1859);
break;
case 2: var cases1862 = lst1859;
$step1856 = 3;
$al1861 = L[1025];
R._checkAnn(L[1025],List51,cases1862);
break;
case 3: var $cases_dispatch1879 = {"empty":4,
"link":5};
$al1861 = L[1013];
$step1856 = $cases_dispatch1879[cases1862.$name] || 6;
break;
case 4: if(cases1862.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1012],false,L[1013]);
}
$step1856 = 7;
$ans1860 = empty158.$var;
break;
case 5: if(cases1862.$arity !== 2) {
if(cases1862.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1022],2,cases1862.$arity,L[1013]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1022],true,L[1013]);
}
}
$step1856 = 7;
$al1861 = L[1023];
var $temp_branch1873 = function($first1863,$rest1867) {
var $step1874 = 0;
var $ans1875 = D;
var $al1876 = L[1016];
try {
if(R.isActivationRecord($first1863)) {
$step1874 = $first1863.step;
$al1876 = $first1863.from;
$ans1875 = $first1863.ans;
first1863 = $first1863.args[0];
rest1867 = $first1863.args[1];
cases1864 = $first1863.vars[0];
v1870 = $first1863.vars[1];
anf_fun1869 = $first1863.vars[2];
} else {
var first1863 = $first1863;
var rest1867 = $rest1867;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1874) {
case 0: $step1874 = 1;
$al1876 = L[1021];
if(!(R.isFunction(f1858))) {
R.ffi.throwNonFunApp($al1876,f1858);
}
$ans1875 = f1858.app(first1863);
break;
case 1: var cases1864 = $ans1875;
$step1874 = 2;
$al1876 = L[1020];
R._checkAnn(L[1020],Option1872,cases1864);
break;
case 2: var $cases_dispatch1877 = {"none":3,
"some":4};
$al1876 = L[1016];
$step1874 = $cases_dispatch1877[cases1864.$name] || 6;
break;
case 3: if(cases1864.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1015],false,L[1016]);
}
var anf_fun1866 = filter$map1865.$var;
$step1874 = 7;
$al1876 = L[1014];
if(!(R.isFunction(anf_fun1866))) {
R.ffi.throwNonFunApp($al1876,anf_fun1866);
}
$ans1875 = anf_fun1866.app(f1858,rest1867);
break;
case 4: if(cases1864.$arity !== 1) {
if(cases1864.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1019],1,cases1864.$arity,L[1016]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1019],true,L[1016]);
}
}
var $fn187 = cases1864.$constructor.$fieldNames;
var v1870 = R.derefField(cases1864.dict[$fn187[0]],cases1864.$mut_fields_mask[0],false);
var anf_fun1869 = link70.$var;
var anf_fun1868 = filter$map1865.$var;
$step1874 = 5;
$al1876 = L[1018];
if(!(R.isFunction(anf_fun1868))) {
R.ffi.throwNonFunApp($al1876,anf_fun1868);
}
$ans1875 = anf_fun1868.app(f1858,rest1867);
break;
case 5: var anf_arg1522 = $ans1875;
$step1874 = 7;
$al1876 = L[1017];
if(!(R.isFunction(anf_fun1869))) {
R.ffi.throwNonFunApp($al1876,anf_fun1869);
}
$ans1875 = anf_fun1869.app(v1870,anf_arg1522);
break;
case 6: $step1874 = 7;
$al1876 = L[1016];
$ans1875 = R.throwNoCasesMatched(L[1016],cases1864);
break;
case 7: ++R.GAS;
return $ans1875;
default: throw "No case numbered " + $step1874 + " in $temp_branch1873";
}
}
} catch($e1878) {
if(R.isCont($e1878) && ($step1874 !== 7)) {
$e1878.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1876,$temp_branch1873,$step1874,[first1863,rest1867],[cases1864,v1870,anf_fun1869]);
}
if(R.isPyretException($e1878)) {
$e1878.pyretStack.push($al1876);
}
throw $e1878;
}
};
$ans1860 = cases1862.$app_fields($temp_branch1873,[false,false]);
break;
case 6: $step1856 = 7;
$al1861 = L[1013];
$ans1860 = R.throwNoCasesMatched(L[1013],cases1862);
break;
case 7: var ann_check_temp1880 = $ans1860;
$step1856 = 8;
$al1861 = L[1024];
R._checkAnn(L[1024],List51,ann_check_temp1880);
break;
case 8: $step1856 = 9;
$ans1860 = ann_check_temp1880;
break;
case 9: ++R.GAS;
return $ans1860;
default: throw "No case numbered " + $step1856 + " in $temp_lam1857";
}
}
} catch($e1881) {
if(R.isCont($e1881) && ($step1856 !== 9)) {
$e1881.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1861,$temp_lam1857,$step1856,[f1858,lst1859],[cases1862,ann_check_temp1880]);
}
if(R.isPyretException($e1881)) {
$e1881.pyretStack.push($al1861);
}
throw $e1881;
}
};
var anf_assign1882 = R.makeFunction($temp_lam1857,"filter-map");
filter$map1865.$var = anf_assign1882;
var $temp_lam1884 = function($lst1885) {
var $step1883 = 0;
var $ans1886 = D;
var $al1887 = L[1043];
try {
if(R.isActivationRecord($lst1885)) {
$step1883 = $lst1885.step;
$al1887 = $lst1885.from;
$ans1886 = $lst1885.ans;
lst1885 = $lst1885.args[0];
cases1888 = $lst1885.vars[0];
ann_check_temp1905 = $lst1885.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1043],1,$t);
}
var lst1885 = $lst1885;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1883) {
case 0: $step1883 = 1;
$al1887 = L[1042];
R._checkAnn(L[1042],List51,lst1885);
break;
case 1: var cases1888 = lst1885;
$step1883 = 2;
$al1887 = L[1041];
R._checkAnn(L[1041],List51,cases1888);
break;
case 2: var $cases_dispatch1904 = {"empty":3,
"link":4};
$al1887 = L[1030];
$step1883 = $cases_dispatch1904[cases1888.$name] || 5;
break;
case 3: if(cases1888.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1029],false,L[1030]);
}
$step1883 = 6;
$ans1886 = empty158.$var;
break;
case 4: if(cases1888.$arity !== 2) {
if(cases1888.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1038],2,cases1888.$arity,L[1030]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1038],true,L[1030]);
}
}
$step1883 = 6;
$al1887 = L[1039];
var $temp_branch1898 = function($first1889,$rest1893) {
var $step1899 = 0;
var $ans1900 = D;
var $al1901 = L[1033];
try {
if(R.isActivationRecord($first1889)) {
$step1899 = $first1889.step;
$al1901 = $first1889.from;
$ans1900 = $first1889.ans;
first1889 = $first1889.args[0];
rest1893 = $first1889.args[1];
cases1890 = $first1889.vars[0];
v1896 = $first1889.vars[1];
anf_fun1895 = $first1889.vars[2];
} else {
var first1889 = $first1889;
var rest1893 = $rest1893;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1899) {
case 0: var cases1890 = first1889;
$step1899 = 1;
$al1901 = L[1037];
R._checkAnn(L[1037],Option1872,cases1890);
break;
case 1: var $cases_dispatch1902 = {"none":2,
"some":3};
$al1901 = L[1033];
$step1899 = $cases_dispatch1902[cases1890.$name] || 5;
break;
case 2: if(cases1890.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1032],false,L[1033]);
}
var anf_fun1892 = filter$values1891.$var;
$step1899 = 6;
$al1901 = L[1031];
if(!(R.isFunction(anf_fun1892))) {
R.ffi.throwNonFunApp($al1901,anf_fun1892);
}
$ans1900 = anf_fun1892.app(rest1893);
break;
case 3: if(cases1890.$arity !== 1) {
if(cases1890.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1036],1,cases1890.$arity,L[1033]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1036],true,L[1033]);
}
}
var $fn187 = cases1890.$constructor.$fieldNames;
var v1896 = R.derefField(cases1890.dict[$fn187[0]],cases1890.$mut_fields_mask[0],false);
var anf_fun1895 = link70.$var;
var anf_fun1894 = filter$values1891.$var;
$step1899 = 4;
$al1901 = L[1035];
if(!(R.isFunction(anf_fun1894))) {
R.ffi.throwNonFunApp($al1901,anf_fun1894);
}
$ans1900 = anf_fun1894.app(rest1893);
break;
case 4: var anf_arg1525 = $ans1900;
$step1899 = 6;
$al1901 = L[1034];
if(!(R.isFunction(anf_fun1895))) {
R.ffi.throwNonFunApp($al1901,anf_fun1895);
}
$ans1900 = anf_fun1895.app(v1896,anf_arg1525);
break;
case 5: $step1899 = 6;
$al1901 = L[1033];
$ans1900 = R.throwNoCasesMatched(L[1033],cases1890);
break;
case 6: ++R.GAS;
return $ans1900;
default: throw "No case numbered " + $step1899 + " in $temp_branch1898";
}
}
} catch($e1903) {
if(R.isCont($e1903) && ($step1899 !== 6)) {
$e1903.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1901,$temp_branch1898,$step1899,[first1889,rest1893],[cases1890,v1896,anf_fun1895]);
}
if(R.isPyretException($e1903)) {
$e1903.pyretStack.push($al1901);
}
throw $e1903;
}
};
$ans1886 = cases1888.$app_fields($temp_branch1898,[false,false]);
break;
case 5: $step1883 = 6;
$al1887 = L[1030];
$ans1886 = R.throwNoCasesMatched(L[1030],cases1888);
break;
case 6: var ann_check_temp1905 = $ans1886;
$step1883 = 7;
$al1887 = L[1040];
R._checkAnn(L[1040],List51,ann_check_temp1905);
break;
case 7: $step1883 = 8;
$ans1886 = ann_check_temp1905;
break;
case 8: ++R.GAS;
return $ans1886;
default: throw "No case numbered " + $step1883 + " in $temp_lam1884";
}
}
} catch($e1906) {
if(R.isCont($e1906) && ($step1883 !== 8)) {
$e1906.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1887,$temp_lam1884,$step1883,[lst1885],[cases1888,ann_check_temp1905]);
}
if(R.isPyretException($e1906)) {
$e1906.pyretStack.push($al1887);
}
throw $e1906;
}
};
var anf_assign1907 = R.makeFunction($temp_lam1884,"filter-values");
filter$values1891.$var = anf_assign1907;
var $temp_lam1909 = function($l1910) {
var $step1908 = 0;
var $ans1911 = D;
var $al1912 = L[1063];
try {
if(R.isActivationRecord($l1910)) {
$step1908 = $l1910.step;
$al1912 = $l1910.from;
$ans1911 = $l1910.ans;
l1910 = $l1910.args[0];
cases1914 = $l1910.vars[0];
ann_check_temp1939 = $l1910.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1063],1,$t);
}
var l1910 = $l1910;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1908) {
case 0: $step1908 = 1;
$al1912 = L[1062];
R._checkAnn(L[1062],List51,l1910);
break;
case 1: var cases1914 = l1910;
$step1908 = 2;
$al1912 = L[1061];
R._checkAnn(L[1061],List51,cases1914);
break;
case 2: var $cases_dispatch1938 = {"empty":3,
"link":4};
$al1912 = L[1045];
$step1908 = $cases_dispatch1938[cases1914.$name] || 5;
break;
case 3: if(cases1914.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1044],false,L[1045]);
}
$step1908 = 6;
$ans1911 = empty158.$var;
break;
case 4: if(cases1914.$arity !== 2) {
if(cases1914.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1058],2,cases1914.$arity,L[1045]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1058],true,L[1045]);
}
}
$step1908 = 6;
$al1912 = L[1059];
var $temp_branch1932 = function($first1917,$rest1916) {
var $step1933 = 0;
var $ans1934 = D;
var $al1935 = L[1057];
try {
if(R.isActivationRecord($first1917)) {
$step1933 = $first1917.step;
$al1935 = $first1917.from;
$ans1934 = $first1917.ans;
first1917 = $first1917.args[0];
rest1916 = $first1917.args[1];
cases1918 = $first1917.vars[0];
anf_fun1921 = $first1917.vars[1];
anf_fun1926 = $first1917.vars[2];
} else {
var first1917 = $first1917;
var rest1916 = $rest1916;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1933) {
case 0: var anf_fun1915 = member31763.$var;
$step1933 = 1;
$al1935 = L[1056];
if(!(R.isFunction(anf_fun1915))) {
R.ffi.throwNonFunApp($al1935,anf_fun1915);
}
$ans1934 = anf_fun1915.app(rest1916,first1917);
break;
case 1: var cases1918 = $ans1934;
$step1933 = 2;
$al1935 = L[1055];
R._checkAnn(L[1055],R.getDotAnn(L[1055],"equality",equality24,"EqualityResult"),cases1918);
break;
case 2: var $cases_dispatch1936 = {"NotEqual":3,
"Unknown":5,
"Equal":7};
$al1935 = L[1049];
$step1933 = $cases_dispatch1936[cases1918.$name] || 8;
break;
case 3: if(cases1918.$arity !== 3) {
if(cases1918.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1048],3,cases1918.$arity,L[1049]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1048],true,L[1049]);
}
}
var $fn187 = cases1918.$constructor.$fieldNames;
R.derefField(cases1918.dict[$fn187[0]],cases1918.$mut_fields_mask[0],false);
R.derefField(cases1918.dict[$fn187[1]],cases1918.$mut_fields_mask[1],false);
R.derefField(cases1918.dict[$fn187[2]],cases1918.$mut_fields_mask[2],false);
var anf_fun1921 = link70.$var;
var anf_fun1920 = distinct1919.$var;
$step1933 = 4;
$al1935 = L[1047];
if(!(R.isFunction(anf_fun1920))) {
R.ffi.throwNonFunApp($al1935,anf_fun1920);
}
$ans1934 = anf_fun1920.app(rest1916);
break;
case 4: var anf_arg1922 = $ans1934;
$step1933 = 9;
$al1935 = L[1046];
if(!(R.isFunction(anf_fun1921))) {
R.ffi.throwNonFunApp($al1935,anf_fun1921);
}
$ans1934 = anf_fun1921.app(first1917,anf_arg1922);
break;
case 5: if(cases1918.$arity !== 3) {
if(cases1918.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[1052],3,cases1918.$arity,L[1049]);
} else {
R.ffi.throwCasesSingletonErrorC(L[1052],true,L[1049]);
}
}
var $fn187 = cases1918.$constructor.$fieldNames;
R.derefField(cases1918.dict[$fn187[0]],cases1918.$mut_fields_mask[0],false);
R.derefField(cases1918.dict[$fn187[1]],cases1918.$mut_fields_mask[1],false);
R.derefField(cases1918.dict[$fn187[2]],cases1918.$mut_fields_mask[2],false);
var anf_fun1926 = link70.$var;
var anf_fun1925 = distinct1919.$var;
$step1933 = 6;
$al1935 = L[1051];
if(!(R.isFunction(anf_fun1925))) {
R.ffi.throwNonFunApp($al1935,anf_fun1925);
}
$ans1934 = anf_fun1925.app(rest1916);
break;
case 6: var anf_arg1545 = $ans1934;
$step1933 = 9;
$al1935 = L[1050];
if(!(R.isFunction(anf_fun1926))) {
R.ffi.throwNonFunApp($al1935,anf_fun1926);
}
$ans1934 = anf_fun1926.app(first1917,anf_arg1545);
break;
case 7: if(cases1918.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[1054],false,L[1049]);
}
var anf_fun1930 = distinct1919.$var;
$step1933 = 9;
$al1935 = L[1053];
if(!(R.isFunction(anf_fun1930))) {
R.ffi.throwNonFunApp($al1935,anf_fun1930);
}
$ans1934 = anf_fun1930.app(rest1916);
break;
case 8: $step1933 = 9;
$al1935 = L[1049];
$ans1934 = R.throwNoCasesMatched(L[1049],cases1918);
break;
case 9: ++R.GAS;
return $ans1934;
default: throw "No case numbered " + $step1933 + " in $temp_branch1932";
}
}
} catch($e1937) {
if(R.isCont($e1937) && ($step1933 !== 9)) {
$e1937.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1935,$temp_branch1932,$step1933,[first1917,rest1916],[cases1918,anf_fun1921,anf_fun1926]);
}
if(R.isPyretException($e1937)) {
$e1937.pyretStack.push($al1935);
}
throw $e1937;
}
};
$ans1911 = cases1914.$app_fields($temp_branch1932,[false,false]);
break;
case 5: $step1908 = 6;
$al1912 = L[1045];
$ans1911 = R.throwNoCasesMatched(L[1045],cases1914);
break;
case 6: var ann_check_temp1939 = $ans1911;
$step1908 = 7;
$al1912 = L[1060];
R._checkAnn(L[1060],List51,ann_check_temp1939);
break;
case 7: $step1908 = 8;
$ans1911 = ann_check_temp1939;
break;
case 8: ++R.GAS;
return $ans1911;
default: throw "No case numbered " + $step1908 + " in $temp_lam1909";
}
}
} catch($e1940) {
if(R.isCont($e1940) && ($step1908 !== 8)) {
$e1940.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1912,$temp_lam1909,$step1908,[l1910],[cases1914,ann_check_temp1939]);
}
if(R.isPyretException($e1940)) {
$e1940.pyretStack.push($al1912);
}
throw $e1940;
}
};
var anf_assign1941 = R.makeFunction($temp_lam1909,"distinct");
distinct1919.$var = anf_assign1941;
var $temp_lam1943 = function($l1944) {
var $step1942 = 0;
var $ans1945 = D;
var $al1946 = L[1067];
try {
if(R.isActivationRecord($l1944)) {
$step1942 = $l1944.step;
$al1946 = $l1944.from;
$ans1945 = $l1944.ans;
l1944 = $l1944.args[0];
ann_check_temp1948 = $l1944.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1067],1,$t);
}
var l1944 = $l1944;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1942) {
case 0: $step1942 = 1;
$al1946 = L[1066];
R._checkAnn(L[1066],List51,l1944);
break;
case 1: $step1942 = 2;
$al1946 = L[1064];
$field1947 = R.getColonFieldLoc(l1944,"length",L[1064]);
if(R.isMethod($field1947)) {
$ans1945 = $field1947.full_meth(l1944);
} else {
if(!(R.isFunction($field1947))) {
R.ffi.throwNonFunApp(L[1064],$field1947);
}
$ans1945 = $field1947.app();
}
break;
case 2: var ann_check_temp1948 = $ans1945;
$step1942 = 3;
$al1946 = L[1065];
R._checkAnn(L[1065],$type$Number8,ann_check_temp1948);
break;
case 3: $step1942 = 4;
$ans1945 = ann_check_temp1948;
break;
case 4: ++R.GAS;
return $ans1945;
default: throw "No case numbered " + $step1942 + " in $temp_lam1943";
}
}
} catch($e1949) {
if(R.isCont($e1949) && ($step1942 !== 4)) {
$e1949.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1946,$temp_lam1943,$step1942,[l1944],[ann_check_temp1948]);
}
if(R.isPyretException($e1949)) {
$e1949.pyretStack.push($al1946);
}
throw $e1949;
}
};
var anf_assign1950 = R.makeFunction($temp_lam1943,"length");
length1951.$var = anf_assign1950;
var $temp_lam1954 = function($l1955,$s1956) {
var $step1953 = 0;
var $ans1957 = D;
var $al1958 = L[1072];
try {
if(R.isActivationRecord($l1955)) {
$step1953 = $l1955.step;
$al1958 = $l1955.from;
$ans1957 = $l1955.ans;
l1955 = $l1955.args[0];
s1956 = $l1955.args[1];
ann_check_temp1966 = $l1955.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1072],2,$t);
}
var l1955 = $l1955;
var s1956 = $s1956;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1953) {
case 0: $step1953 = 1;
$al1958 = L[1070];
R._checkAnn(L[1070],List51,l1955);
break;
case 1: $step1953 = 2;
$al1958 = L[1071];
R._checkAnn(L[1071],$type$String7,s1956);
break;
case 2: $step1953 = 3;
$al1958 = L[1068];
$field1965 = R.getColonFieldLoc(l1955,"join-str",L[1068]);
if(R.isMethod($field1965)) {
$ans1957 = $field1965.full_meth(l1955,s1956);
} else {
if(!(R.isFunction($field1965))) {
R.ffi.throwNonFunApp(L[1068],$field1965);
}
$ans1957 = $field1965.app(s1956);
}
break;
case 3: var ann_check_temp1966 = $ans1957;
$step1953 = 4;
$al1958 = L[1069];
R._checkAnn(L[1069],$type$String7,ann_check_temp1966);
break;
case 4: $step1953 = 5;
$ans1957 = ann_check_temp1966;
break;
case 5: ++R.GAS;
return $ans1957;
default: throw "No case numbered " + $step1953 + " in $temp_lam1954";
}
}
} catch($e1967) {
if(R.isCont($e1967) && ($step1953 !== 5)) {
$e1967.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1958,$temp_lam1954,$step1953,[l1955,s1956],[ann_check_temp1966]);
}
if(R.isPyretException($e1967)) {
$e1967.pyretStack.push($al1958);
}
throw $e1967;
}
};
var anf_assign1968 = R.makeFunction($temp_lam1954,"join-str");
join$str1969.$var = anf_assign1968;
var $temp_lam1971 = function($$resumer101) {
var $step1970 = 0;
var $ans1972 = D;
var $al1973 = L[1073];
try {
if(R.isActivationRecord($$resumer101)) {
$step1970 = $$resumer101.step;
$al1973 = $$resumer101.from;
$ans1972 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1073],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1970) {
case 0: $step1970 = 1;
$ans1972 = empty158.$var;
break;
case 1: ++R.GAS;
return $ans1972;
default: throw "No case numbered " + $step1970 + " in $temp_lam1971";
}
}
} catch($e1974) {
if(R.isCont($e1974) && ($step1970 !== 1)) {
$e1974.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1973,$temp_lam1971,$step1970,[],[]);
}
if(R.isPyretException($e1974)) {
$e1974.pyretStack.push($al1973);
}
throw $e1974;
}
};
var anf_obj2034 = R.makeFunction($temp_lam1971,"");
var $temp_lam1976 = function($a1977) {
var $step1975 = 0;
var $ans1978 = D;
var $al1979 = L[1075];
try {
if(R.isActivationRecord($a1977)) {
$step1975 = $a1977.step;
$al1979 = $a1977.from;
$ans1978 = $a1977.ans;
a1977 = $a1977.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1075],1,$t);
}
var a1977 = $a1977;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1975) {
case 0: var anf_fun1980 = link70.$var;
var anf_arg1562 = empty158.$var;
$step1975 = 1;
$al1979 = L[1074];
if(!(R.isFunction(anf_fun1980))) {
R.ffi.throwNonFunApp($al1979,anf_fun1980);
}
$ans1978 = anf_fun1980.app(a1977,anf_arg1562);
break;
case 1: ++R.GAS;
return $ans1978;
default: throw "No case numbered " + $step1975 + " in $temp_lam1976";
}
}
} catch($e1981) {
if(R.isCont($e1981) && ($step1975 !== 1)) {
$e1981.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1979,$temp_lam1976,$step1975,[a1977],[]);
}
if(R.isPyretException($e1981)) {
$e1981.pyretStack.push($al1979);
}
throw $e1981;
}
};
var anf_obj2035 = R.makeFunction($temp_lam1976,"");
var $temp_lam1983 = function($a1984,$b1985) {
var $step1982 = 0;
var $ans1986 = D;
var $al1987 = L[1078];
try {
if(R.isActivationRecord($a1984)) {
$step1982 = $a1984.step;
$al1987 = $a1984.from;
$ans1986 = $a1984.ans;
a1984 = $a1984.args[0];
b1985 = $a1984.args[1];
anf_fun1990 = $a1984.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1078],2,$t);
}
var a1984 = $a1984;
var b1985 = $b1985;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1982) {
case 0: var anf_fun1990 = link70.$var;
var anf_fun1988 = link70.$var;
var anf_arg1989 = empty158.$var;
$step1982 = 1;
$al1987 = L[1077];
if(!(R.isFunction(anf_fun1988))) {
R.ffi.throwNonFunApp($al1987,anf_fun1988);
}
$ans1986 = anf_fun1988.app(b1985,anf_arg1989);
break;
case 1: var anf_arg1566 = $ans1986;
$step1982 = 2;
$al1987 = L[1076];
if(!(R.isFunction(anf_fun1990))) {
R.ffi.throwNonFunApp($al1987,anf_fun1990);
}
$ans1986 = anf_fun1990.app(a1984,anf_arg1566);
break;
case 2: ++R.GAS;
return $ans1986;
default: throw "No case numbered " + $step1982 + " in $temp_lam1983";
}
}
} catch($e1992) {
if(R.isCont($e1992) && ($step1982 !== 2)) {
$e1992.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1987,$temp_lam1983,$step1982,[a1984,b1985],[anf_fun1990]);
}
if(R.isPyretException($e1992)) {
$e1992.pyretStack.push($al1987);
}
throw $e1992;
}
};
var anf_obj2036 = R.makeFunction($temp_lam1983,"");
var $temp_lam1994 = function($a1995,$b1996,$c1997) {
var $step1993 = 0;
var $ans1998 = D;
var $al1999 = L[1082];
try {
if(R.isActivationRecord($a1995)) {
$step1993 = $a1995.step;
$al1999 = $a1995.from;
$ans1998 = $a1995.ans;
a1995 = $a1995.args[0];
b1996 = $a1995.args[1];
c1997 = $a1995.args[2];
anf_fun2002 = $a1995.vars[0];
anf_fun2001 = $a1995.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1082],3,$t);
}
var a1995 = $a1995;
var b1996 = $b1996;
var c1997 = $c1997;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1993) {
case 0: var anf_fun2002 = link70.$var;
var anf_fun2001 = link70.$var;
var anf_fun2000 = link70.$var;
var anf_arg1571 = empty158.$var;
$step1993 = 1;
$al1999 = L[1081];
if(!(R.isFunction(anf_fun2000))) {
R.ffi.throwNonFunApp($al1999,anf_fun2000);
}
$ans1998 = anf_fun2000.app(c1997,anf_arg1571);
break;
case 1: var anf_arg1578 = $ans1998;
$step1993 = 2;
$al1999 = L[1080];
if(!(R.isFunction(anf_fun2001))) {
R.ffi.throwNonFunApp($al1999,anf_fun2001);
}
$ans1998 = anf_fun2001.app(b1996,anf_arg1578);
break;
case 2: var anf_arg1573 = $ans1998;
$step1993 = 3;
$al1999 = L[1079];
if(!(R.isFunction(anf_fun2002))) {
R.ffi.throwNonFunApp($al1999,anf_fun2002);
}
$ans1998 = anf_fun2002.app(a1995,anf_arg1573);
break;
case 3: ++R.GAS;
return $ans1998;
default: throw "No case numbered " + $step1993 + " in $temp_lam1994";
}
}
} catch($e2003) {
if(R.isCont($e2003) && ($step1993 !== 3)) {
$e2003.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1999,$temp_lam1994,$step1993,[a1995,b1996,c1997],[anf_fun2002,anf_fun2001]);
}
if(R.isPyretException($e2003)) {
$e2003.pyretStack.push($al1999);
}
throw $e2003;
}
};
var anf_obj2037 = R.makeFunction($temp_lam1994,"");
var $temp_lam2005 = function($a2006,$b2007,$c2008,$d2009) {
var $step2004 = 0;
var $ans2010 = D;
var $al2011 = L[1087];
try {
if(R.isActivationRecord($a2006)) {
$step2004 = $a2006.step;
$al2011 = $a2006.from;
$ans2010 = $a2006.ans;
a2006 = $a2006.args[0];
b2007 = $a2006.args[1];
c2008 = $a2006.args[2];
d2009 = $a2006.args[3];
anf_fun2016 = $a2006.vars[0];
anf_fun2015 = $a2006.vars[1];
anf_fun2013 = $a2006.vars[2];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1087],4,$t);
}
var a2006 = $a2006;
var b2007 = $b2007;
var c2008 = $c2008;
var d2009 = $d2009;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2004) {
case 0: var anf_fun2016 = link70.$var;
var anf_fun2015 = link70.$var;
var anf_fun2013 = link70.$var;
var anf_fun2012 = link70.$var;
var anf_arg1598 = empty158.$var;
$step2004 = 1;
$al2011 = L[1086];
if(!(R.isFunction(anf_fun2012))) {
R.ffi.throwNonFunApp($al2011,anf_fun2012);
}
$ans2010 = anf_fun2012.app(d2009,anf_arg1598);
break;
case 1: var anf_arg1599 = $ans2010;
$step2004 = 2;
$al2011 = L[1085];
if(!(R.isFunction(anf_fun2013))) {
R.ffi.throwNonFunApp($al2011,anf_fun2013);
}
$ans2010 = anf_fun2013.app(c2008,anf_arg1599);
break;
case 2: var anf_arg1604 = $ans2010;
$step2004 = 3;
$al2011 = L[1084];
if(!(R.isFunction(anf_fun2015))) {
R.ffi.throwNonFunApp($al2011,anf_fun2015);
}
$ans2010 = anf_fun2015.app(b2007,anf_arg1604);
break;
case 3: var anf_arg1601 = $ans2010;
$step2004 = 4;
$al2011 = L[1083];
if(!(R.isFunction(anf_fun2016))) {
R.ffi.throwNonFunApp($al2011,anf_fun2016);
}
$ans2010 = anf_fun2016.app(a2006,anf_arg1601);
break;
case 4: ++R.GAS;
return $ans2010;
default: throw "No case numbered " + $step2004 + " in $temp_lam2005";
}
}
} catch($e2017) {
if(R.isCont($e2017) && ($step2004 !== 4)) {
$e2017.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2011,$temp_lam2005,$step2004,[a2006,b2007,c2008,d2009],[anf_fun2016,anf_fun2015,anf_fun2013]);
}
if(R.isPyretException($e2017)) {
$e2017.pyretStack.push($al2011);
}
throw $e2017;
}
};
var anf_obj2038 = R.makeFunction($temp_lam2005,"");
var $temp_lam2019 = function($a2020,$b2021,$c2022,$d2023,$e2024) {
var $step2018 = 0;
var $ans2025 = D;
var $al2026 = L[1093];
try {
if(R.isActivationRecord($a2020)) {
$step2018 = $a2020.step;
$al2026 = $a2020.from;
$ans2025 = $a2020.ans;
a2020 = $a2020.args[0];
b2021 = $a2020.args[1];
c2022 = $a2020.args[2];
d2023 = $a2020.args[3];
e2024 = $a2020.args[4];
anf_fun2031 = $a2020.vars[0];
anf_fun2030 = $a2020.vars[1];
anf_fun2029 = $a2020.vars[2];
anf_fun2028 = $a2020.vars[3];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1093],5,$t);
}
var a2020 = $a2020;
var b2021 = $b2021;
var c2022 = $c2022;
var d2023 = $d2023;
var e2024 = $e2024;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2018) {
case 0: var anf_fun2031 = link70.$var;
var anf_fun2030 = link70.$var;
var anf_fun2029 = link70.$var;
var anf_fun2028 = link70.$var;
var anf_fun2027 = link70.$var;
var anf_arg1626 = empty158.$var;
$step2018 = 1;
$al2026 = L[1092];
if(!(R.isFunction(anf_fun2027))) {
R.ffi.throwNonFunApp($al2026,anf_fun2027);
}
$ans2025 = anf_fun2027.app(e2024,anf_arg1626);
break;
case 1: var anf_arg1631 = $ans2025;
$step2018 = 2;
$al2026 = L[1091];
if(!(R.isFunction(anf_fun2028))) {
R.ffi.throwNonFunApp($al2026,anf_fun2028);
}
$ans2025 = anf_fun2028.app(d2023,anf_arg1631);
break;
case 2: var anf_arg1628 = $ans2025;
$step2018 = 3;
$al2026 = L[1090];
if(!(R.isFunction(anf_fun2029))) {
R.ffi.throwNonFunApp($al2026,anf_fun2029);
}
$ans2025 = anf_fun2029.app(c2022,anf_arg1628);
break;
case 3: var anf_arg1632 = $ans2025;
$step2018 = 4;
$al2026 = L[1089];
if(!(R.isFunction(anf_fun2030))) {
R.ffi.throwNonFunApp($al2026,anf_fun2030);
}
$ans2025 = anf_fun2030.app(b2021,anf_arg1632);
break;
case 4: var anf_arg2032 = $ans2025;
$step2018 = 5;
$al2026 = L[1088];
if(!(R.isFunction(anf_fun2031))) {
R.ffi.throwNonFunApp($al2026,anf_fun2031);
}
$ans2025 = anf_fun2031.app(a2020,anf_arg2032);
break;
case 5: ++R.GAS;
return $ans2025;
default: throw "No case numbered " + $step2018 + " in $temp_lam2019";
}
}
} catch($e2033) {
if(R.isCont($e2033) && ($step2018 !== 5)) {
$e2033.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2026,$temp_lam2019,$step2018,[a2020,b2021,c2022,d2023,e2024],[anf_fun2031,anf_fun2030,anf_fun2029,anf_fun2028]);
}
if(R.isPyretException($e2033)) {
$e2033.pyretStack.push($al2026);
}
throw $e2033;
}
};
var anf_obj2039 = R.makeFunction($temp_lam2019,"");
var list2111 = R.makeObject({"make":raw$array$to$list5,
"make0":anf_obj2034,
"make1":anf_obj2035,
"make2":anf_obj2036,
"make3":anf_obj2037,
"make4":anf_obj2038,
"make5":anf_obj2039});
var defined_value2121 = join$str1969.$var;
var defined_value2122 = empty158.$var;
var defined_value2123 = length1951.$var;
var defined_value2124 = distinct1919.$var;
var defined_value2125 = filter$values1891.$var;
var defined_value2126 = filter$map1865.$var;
var defined_value2127 = shuffle1855.$var;
var defined_value2128 = member$identical1828.$var;
var defined_value2129 = member$identical31815.$var;
var defined_value2130 = member$now1803.$var;
var defined_value2131 = member$now31787.$var;
var defined_value2132 = member1776.$var;
var defined_value2133 = fold496.$var;
var defined_value2134 = member31763.$var;
var defined_value2135 = member$with1743.$var;
var defined_value2136 = fold_n1726.$var;
var defined_value2137 = fold41687.$var;
var defined_value2138 = fold31657.$var;
var defined_value2139 = fold21631.$var;
var defined_value2140 = foldr1611.$var;
var defined_value2141 = foldl1602.$var;
var defined_value2142 = fold$while1574.$var;
var defined_value2143 = each4_n1563.$var;
var defined_value2144 = each3_n1522.$var;
var defined_value2145 = each2_n1483.$var;
var defined_value2146 = each_n1453.$var;
var defined_value2147 = each41427.$var;
var defined_value2148 = each31391.$var;
var defined_value2149 = each21356.$var;
var defined_value2150 = each316.$var;
var defined_value2151 = map4_n1299.$var;
var defined_value2152 = map3_n1269.$var;
var defined_value2153 = map2_n1241.$var;
var defined_value2154 = map_n1216.$var;
var defined_value2155 = map41199.$var;
var defined_value2156 = map31166.$var;
var defined_value2157 = map21139.$var;
var defined_value2158 = map326.$var;
var defined_value2159 = all21119.$var;
var defined_value2160 = all1088.$var;
var defined_value2161 = any1077.$var;
var defined_value2162 = last1066.$var;
var defined_value2163 = drop1038.$var;
var defined_value2164 = take1026.$var;
var defined_value2165 = split$at80.$var;
var defined_value2166 = find371.$var;
var defined_value2167 = remove132.$var;
var defined_value2168 = partition360.$var;
var defined_value2169 = append902.$var;
var defined_value2170 = filter894.$var;
var defined_value2171 = repeat884.$var;
var defined_value2172 = range$by872.$var;
var defined_value2173 = range849.$var;
var defined_value2174 = sort824.$var;
var defined_value2175 = sort$by814.$var;
var defined_value2176 = reverse802.$var;
var defined_value2177 = reverse$help485.$var;
var defined_value2178 = push773.$var;
var defined_value2179 = set123.$var;
var defined_value2180 = get112.$var;
var defined_value2181 = link70.$var;
var defined_value2182 = is$link615.$var;
var defined_value2183 = is$empty473.$var;
var defined_value2184 = is$List687.$var;
$step32 = 1;
$al36 = L[1094];
$field2040 = R.getColonFieldLoc(builtins1,"trace-value",L[1094]);
if(R.isMethod($field2040)) {
$ans35 = $field2040.full_meth(builtins1,L[1094],nothing2);
} else {
if(!(R.isFunction($field2040))) {
R.ffi.throwNonFunApp(L[1094],$field2040);
}
$ans35 = $field2040.app(L[1094],nothing2);
}
break;
case 1: var answer2119 = $ans35;
var anf_obj2045 = is$List687.$var;
var anf_obj2046 = empty158.$var;
var anf_obj2047 = is$empty473.$var;
var anf_obj2048 = link70.$var;
var anf_obj2049 = is$link615.$var;
var anf_obj2050 = get112.$var;
var anf_obj2051 = set123.$var;
var anf_obj2052 = push773.$var;
var anf_obj2053 = reverse$help485.$var;
var anf_obj2054 = reverse802.$var;
var anf_obj2055 = sort$by814.$var;
var anf_obj2056 = sort824.$var;
var anf_obj2057 = range849.$var;
var anf_obj2058 = range$by872.$var;
var anf_obj2059 = repeat884.$var;
var anf_obj2060 = filter894.$var;
var anf_obj2061 = append902.$var;
var anf_obj2062 = partition360.$var;
var anf_obj2063 = remove132.$var;
var anf_obj2064 = find371.$var;
var anf_obj2065 = split$at80.$var;
var anf_obj2066 = take1026.$var;
var anf_obj2067 = drop1038.$var;
var anf_obj2068 = last1066.$var;
var anf_obj2069 = any1077.$var;
var anf_obj2070 = all1088.$var;
var anf_obj2071 = all21119.$var;
var anf_obj2072 = map326.$var;
var anf_obj2073 = map21139.$var;
var anf_obj2074 = map31166.$var;
var anf_obj2075 = map41199.$var;
var anf_obj2076 = map_n1216.$var;
var anf_obj2077 = map2_n1241.$var;
var anf_obj2078 = map3_n1269.$var;
var anf_obj2079 = map4_n1299.$var;
var anf_obj2080 = each316.$var;
var anf_obj2081 = each21356.$var;
var anf_obj2082 = each31391.$var;
var anf_obj2083 = each41427.$var;
var anf_obj2084 = each_n1453.$var;
var anf_obj2085 = each2_n1483.$var;
var anf_obj2086 = each3_n1522.$var;
var anf_obj2087 = each4_n1563.$var;
var anf_obj2088 = fold$while1574.$var;
var anf_obj2089 = fold496.$var;
var anf_obj2090 = foldl1602.$var;
var anf_obj2091 = foldr1611.$var;
var anf_obj2092 = fold21631.$var;
var anf_obj2093 = fold31657.$var;
var anf_obj2094 = fold41687.$var;
var anf_obj2095 = fold_n1726.$var;
var anf_obj2096 = member$with1743.$var;
var anf_obj2097 = member31763.$var;
var anf_obj2098 = member1776.$var;
var anf_obj2101 = member$now31787.$var;
var anf_obj2102 = member$now1803.$var;
var anf_obj2103 = member$identical31815.$var;
var anf_obj2104 = member$identical1828.$var;
var anf_obj2105 = shuffle1855.$var;
var anf_obj2106 = filter$map1865.$var;
var anf_obj2107 = filter$values1891.$var;
var anf_obj2108 = distinct1919.$var;
var anf_obj2109 = length1951.$var;
var anf_obj2110 = join$str1969.$var;
var provides2118 = R.makeObject({"none":none175,
"is-none":is$none2041,
"some":some970,
"is-some":is$some2042,
"left":left2043,
"right":right2044,
"is-List":anf_obj2045,
"empty":anf_obj2046,
"is-empty":anf_obj2047,
"link":anf_obj2048,
"is-link":anf_obj2049,
"get":anf_obj2050,
"set":anf_obj2051,
"push":anf_obj2052,
"reverse-help":anf_obj2053,
"reverse":anf_obj2054,
"sort-by":anf_obj2055,
"sort":anf_obj2056,
"range":anf_obj2057,
"range-by":anf_obj2058,
"repeat":anf_obj2059,
"filter":anf_obj2060,
"append":anf_obj2061,
"partition":anf_obj2062,
"remove":anf_obj2063,
"find":anf_obj2064,
"split-at":anf_obj2065,
"take":anf_obj2066,
"drop":anf_obj2067,
"last":anf_obj2068,
"any":anf_obj2069,
"all":anf_obj2070,
"all2":anf_obj2071,
"map":anf_obj2072,
"map2":anf_obj2073,
"map3":anf_obj2074,
"map4":anf_obj2075,
"map_n":anf_obj2076,
"map2_n":anf_obj2077,
"map3_n":anf_obj2078,
"map4_n":anf_obj2079,
"each":anf_obj2080,
"each2":anf_obj2081,
"each3":anf_obj2082,
"each4":anf_obj2083,
"each_n":anf_obj2084,
"each2_n":anf_obj2085,
"each3_n":anf_obj2086,
"each4_n":anf_obj2087,
"fold-while":anf_obj2088,
"fold":anf_obj2089,
"foldl":anf_obj2090,
"foldr":anf_obj2091,
"fold2":anf_obj2092,
"fold3":anf_obj2093,
"fold4":anf_obj2094,
"fold_n":anf_obj2095,
"member-with":anf_obj2096,
"member3":anf_obj2097,
"member":anf_obj2098,
"member-always3":member$always32099,
"member-always":member$always2100,
"member-now3":anf_obj2101,
"member-now":anf_obj2102,
"member-identical3":anf_obj2103,
"member-identical":anf_obj2104,
"shuffle":anf_obj2105,
"filter-map":anf_obj2106,
"filter-values":anf_obj2107,
"distinct":anf_obj2108,
"length":anf_obj2109,
"join-str":anf_obj2110,
"list":list2111});
$step32 = 2;
$al36 = L[336];
$field2113 = R.getColonFieldLoc(builtins1,"current-checker",L[336]);
if(R.isMethod($field2113)) {
$ans35 = $field2113.full_meth(builtins1);
} else {
if(!(R.isFunction($field2113))) {
R.ffi.throwNonFunApp(L[336],$field2113);
}
$ans35 = $field2113.app();
}
break;
case 2: var anf_method_obj2114 = $ans35;
$step32 = 3;
$al36 = L[336];
$field2116 = R.getColonFieldLoc(anf_method_obj2114,"results",L[336]);
if(R.isMethod($field2116)) {
$ans35 = $field2116.full_meth(anf_method_obj2114);
} else {
if(!(R.isFunction($field2116))) {
R.ffi.throwNonFunApp(L[336],$field2116);
}
$ans35 = $field2116.app();
}
break;
case 3: var checks2120 = $ans35;
$step32 = 4;
$ans35 = R.makeObject({"answer":answer2119,
"namespace":NAMESPACE,
"defined-values":{"list":list2111,
"join-str":defined_value2121,
"empty":defined_value2122,
"length":defined_value2123,
"distinct":defined_value2124,
"filter-values":defined_value2125,
"filter-map":defined_value2126,
"shuffle":defined_value2127,
"member-identical":defined_value2128,
"member-identical3":defined_value2129,
"member-now":defined_value2130,
"member-now3":defined_value2131,
"member-always":member$always2100,
"member-always3":member$always32099,
"member":defined_value2132,
"fold":defined_value2133,
"member3":defined_value2134,
"member-with":defined_value2135,
"fold_n":defined_value2136,
"fold4":defined_value2137,
"fold3":defined_value2138,
"fold2":defined_value2139,
"foldr":defined_value2140,
"foldl":defined_value2141,
"fold-while":defined_value2142,
"each4_n":defined_value2143,
"each3_n":defined_value2144,
"each2_n":defined_value2145,
"each_n":defined_value2146,
"each4":defined_value2147,
"each3":defined_value2148,
"each2":defined_value2149,
"each":defined_value2150,
"map4_n":defined_value2151,
"map3_n":defined_value2152,
"map2_n":defined_value2153,
"map_n":defined_value2154,
"map4":defined_value2155,
"map3":defined_value2156,
"map2":defined_value2157,
"map":defined_value2158,
"all2":defined_value2159,
"all":defined_value2160,
"any":defined_value2161,
"last":defined_value2162,
"drop":defined_value2163,
"take":defined_value2164,
"split-at":defined_value2165,
"find":defined_value2166,
"remove":defined_value2167,
"partition":defined_value2168,
"append":defined_value2169,
"filter":defined_value2170,
"repeat":defined_value2171,
"range-by":defined_value2172,
"range":defined_value2173,
"sort":defined_value2174,
"sort-by":defined_value2175,
"reverse":defined_value2176,
"reverse-help":defined_value2177,
"push":defined_value2178,
"set":defined_value2179,
"get":defined_value2180,
"link":defined_value2181,
"is-link":defined_value2182,
"is-empty":defined_value2183,
"is-List":defined_value2184,
"right":right2044,
"left":left2043,
"E":E18,
"is-some":is$some2042,
"some":some970,
"O":O21,
"is-none":is$none2041,
"none":none175,
"VS":VS22,
"equality":equality19},
"defined-types":{"Either":Either2117,
"List":List51,
"equality":equality24,
"Option":Option1872,
"E":E23,
"O":O26,
"VS":VS27},
"provide-plus-types":R.makeObject({"values":provides2118,
"types":{"Option":Option1872,
"Either":Either2117,
"List":List51}}),
"checks":checks2120});
break;
case 4: ++R.GAS;
return $ans35;
default: throw "No case numbered " + $step32 + " in $toplevel33";
}
}
} catch($e2185) {
if(R.isCont($e2185) && ($step32 !== 4)) {
$e2185.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al36,$toplevel33,$step32,[],[List51,none175,is$none2041,some970,is$some2042,Option1872,left2043,right2044,Either2117,is$List687,is$empty473,empty158,is$link615,link70,get112,set123,push773,reverse$help485,reverse802,sort$by814,sort824,range849,range$by872,repeat884,filter894,append902,partition360,remove132,find371,split$at80,take1026,drop1038,last1066,any1077,all1088,all21119,map326,map21139,map31166,map41199,map_n1216,map2_n1241,map3_n1269,map4_n1299,each316,each21356,each31391,each41427,each_n1453,each2_n1483,each3_n1522,each4_n1563,fold$while1574,fold496,foldl1602,foldr1611,fold21631,fold31657,fold41687,fold_n1726,member$with1743,member31763,member1776,member$always32099,member$always2100,member$now31787,member$now1803,member$identical31815,member$identical1828,shuffle1855,filter$map1865,filter$values1891,distinct1919,length1951,join$str1969,list2111,defined_value2121,defined_value2122,defined_value2123,defined_value2124,defined_value2125,defined_value2126,defined_value2127,defined_value2128,defined_value2129,defined_value2130,defined_value2131,defined_value2132,defined_value2133,defined_value2134,defined_value2135,defined_value2136,defined_value2137,defined_value2138,defined_value2139,defined_value2140,defined_value2141,defined_value2142,defined_value2143,defined_value2144,defined_value2145,defined_value2146,defined_value2147,defined_value2148,defined_value2149,defined_value2150,defined_value2151,defined_value2152,defined_value2153,defined_value2154,defined_value2155,defined_value2156,defined_value2157,defined_value2158,defined_value2159,defined_value2160,defined_value2161,defined_value2162,defined_value2163,defined_value2164,defined_value2165,defined_value2166,defined_value2167,defined_value2168,defined_value2169,defined_value2170,defined_value2171,defined_value2172,defined_value2173,defined_value2174,defined_value2175,defined_value2176,defined_value2177,defined_value2178,defined_value2179,defined_value2180,defined_value2181,defined_value2182,defined_value2183,defined_value2184,answer2119,provides2118]);
}
if(R.isPyretException($e2185)) {
$e2185.pyretStack.push($al36);
}
throw $e2185;
}
};
return R.safeCall($toplevel33,function(moduleVal) {
R.modules["$builtin://lists28"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://arrays":({"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{"ArrayT":"tany",
"array":"tany",
"array-from-list":"tany",
"array-get-now":"tany",
"array-length":"tany",
"array-of":"tany",
"array-set-now":"tany",
"array-to-list-now":"tany",
"build-array":"tany",
"get-arr-key":"tany",
"is-array":"tany",
"make":"tany"},
"datatypes":{},
"aliases":{"Array":"tany",
"List":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import18,$lists19,$VS19) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://arrays";
var D = R.undefined;
var L = [[M,28,9,536,28,27,554],
[M,28,39,566,28,73,600],
[M,27,4,503,29,7,612],
[M,30,37,651,30,59,673],
[M,30,28,642,30,34,648],
[M,30,4,618,30,63,677],
[M,31,47,726,31,54,733],
[M,32,6,747,32,33,774],
[M,31,31,710,31,37,716],
[M,31,4,683,34,7,796],
[M,35,22,820,35,43,841],
[M,35,4,802,35,47,845],
[M,36,27,874,36,49,896],
[M,36,4,851,36,53,900],
[M,38,9,948,38,34,973],
[M,38,36,975,38,62,1001],
[M,38,6,945,38,63,1002],
[M,37,4,906,39,7,1010],
[M,41,19,1072,41,37,1090],
[M,41,19,1072,41,49,1102],
[M,41,19,1072,41,64,1117],
[M,41,6,1059,41,70,1123],
[M,41,6,1059,41,64,1117],
[M,40,4,1016,42,7,1131],
[M,44,19,1197,44,37,1215],
[M,44,19,1197,44,51,1229],
[M,44,19,1197,44,66,1244],
[M,44,6,1184,44,72,1250],
[M,44,6,1184,44,66,1244],
[M,43,4,1137,45,7,1258],
[M,46,52,1312,46,70,1330],
[M,46,75,1335,46,86,1346],
[M,46,52,1312,46,87,1347],
[M,46,26,1286,46,88,1348],
[M,46,4,1264,46,92,1352],
[M,26,2,484,47,4,1357],
[M,25,29,475,25,34,480],
[M,25,16,462,25,24,470],
[M,25,0,446,48,3,1361],
[M,50,11,1374,50,22,1385],
[M,55,9,1507,55,16,1514],
[M,57,6,1562,57,17,1573],
[M,57,11,1567,57,16,1572],
[M,56,6,1528,56,33,1555],
[M,56,28,1550,56,32,1554],
[M,54,2,1485,59,5,1587],
[M,61,2,1600,61,11,1609],
[M,60,2,1590,60,9,1597],
[M,53,8,1456,53,34,1482],
[M,52,24,1411,52,37,1424],
[M,52,46,1433,52,52,1439],
[M,52,0,1387,62,3,1613],
[M,65,24,1669,65,34,1679],
[M,67,4,1727,67,30,1753],
[M,66,2,1683,68,5,1759],
[M,69,2,1762,69,11,1771],
[M,65,8,1653,65,35,1680],
[M,64,0,1615,70,3,1775],
[M,72,46,1823,72,54,1831],
[M,74,2,1868,74,11,1877],
[M,73,8,1841,73,32,1865],
[M,72,23,1800,72,24,1801],
[M,72,35,1812,72,41,1818],
[M,72,0,1777,75,3,1881],
[M,78,2,1962,78,25,1985],
[M,77,68,1951,77,75,1958],
[M,77,28,1911,77,36,1919],
[M,77,47,1930,77,53,1936],
[M,77,62,1945,77,63,1946],
[M,77,0,1883,79,3,1989],
[M,82,2,2054,82,20,2072],
[M,81,58,2049,81,59,2050],
[M,81,28,2019,81,36,2027],
[M,81,47,2038,81,53,2044],
[M,81,0,1991,83,3,2076],
[M,86,2,2128,86,14,2140],
[M,85,40,2118,85,46,2124],
[M,85,27,2105,85,35,2113],
[M,85,0,2078,87,3,2144],
[M,90,2,2202,90,19,2219],
[M,89,45,2191,89,52,2198],
[M,89,32,2178,89,40,2186],
[M,89,0,2146,91,3,2223],
[M,95,22,2271,95,31,2280],
[M,95,16,2265,95,35,2284],
[M,95,9,2258,95,39,2288],
[M,96,23,2313,96,32,2322],
[M,96,17,2307,96,37,2327],
[M,96,9,2299,96,41,2331],
[M,97,26,2359,97,35,2368],
[M,97,20,2353,97,43,2376],
[M,97,9,2342,97,47,2380],
[M,98,29,2411,98,38,2420],
[M,98,23,2405,98,49,2431],
[M,98,9,2391,98,53,2435],
[M,99,32,2469,99,41,2478],
[M,99,26,2463,99,55,2492],
[M,99,9,2446,99,59,2496],
[M,100,35,2533,100,44,2542],
[M,100,29,2527,100,61,2559],
[M,100,9,2507,100,65,2563],
["dummy location"],
[M,21,0,403,21,23,426],
[M,19,12,391,19,22,401],
[M,3,0,21,101,1,2565]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var raw$array6 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array");
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$Nothing8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Nothing"];
var raw$array$of1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-of");
var raw$array$set2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-set");
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var _lessthan10 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_lessthan");
var raw$array$to$list5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-to-list");
var raw$array$length1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-length");
var raw$array$get3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-get");
var raise1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raise");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var $type$RawArray1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["RawArray"];
var lists10 = R.getField($lists19,"values");
var VS11 = R.getField($VS19,"values");
var lists15 = R.getField($lists19,"types");
var VS16 = R.getField($VS19,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import18);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists19);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS19);
var $toplevel22 = function($$resumer101) {
var $step21 = 0;
var $ans27 = D;
var $al28 = L[104];
try {
if(R.isActivationRecord($$resumer101)) {
$step21 = $$resumer101.step;
$al28 = $$resumer101.from;
$ans27 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
ArrayT29 = $$resumer101.vars[0];
Array153 = $$resumer101.vars[1];
List268 = $$resumer101.vars[2];
get$arr$key47 = $$resumer101.vars[3];
is$array354 = $$resumer101.vars[4];
build$array185 = $$resumer101.vars[5];
array$from$list208 = $$resumer101.vars[6];
array$of220 = $$resumer101.vars[7];
array$set$now233 = $$resumer101.vars[8];
array$get$now245 = $$resumer101.vars[9];
array$length255 = $$resumer101.vars[10];
array$to$list$now271 = $$resumer101.vars[11];
array351 = $$resumer101.vars[12];
defined_value367 = $$resumer101.vars[13];
defined_value368 = $$resumer101.vars[14];
defined_value369 = $$resumer101.vars[15];
defined_value370 = $$resumer101.vars[16];
defined_value371 = $$resumer101.vars[17];
defined_value372 = $$resumer101.vars[18];
defined_value373 = $$resumer101.vars[19];
defined_value374 = $$resumer101.vars[20];
answer365 = $$resumer101.vars[21];
provides364 = $$resumer101.vars[22];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step21) {
case 0: var ArrayT29 = R.namedBrander("Array",L[102]);
var Array153 = R.makeBranderAnn(ArrayT29,"Array");
var List268 = R.getDotAnn(L[103],"lists",lists15,"List");
var get$arr$key47 = R.makeObject({});
var make157 = {"$var":D};
var $temp_lam32 = function($arr33) {
var $step31 = 0;
var $ans36 = D;
var $al37 = L[38];
try {
if(R.isActivationRecord($arr33)) {
$step31 = $arr33.step;
$al37 = $arr33.from;
$ans36 = $arr33.ans;
arr33 = $arr33.args[0];
ann_check_temp152 = $arr33.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],1,$t);
}
var arr33 = $arr33;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step31) {
case 0: $step31 = 1;
$al37 = L[37];
R._checkAnn(L[37],$type$RawArray1,arr33);
break;
case 1: var $temp_full42 = function($$underscore43,$key44) {
var $step41 = 0;
var $ans45 = D;
var $al46 = L[2];
try {
if(R.isActivationRecord($$underscore43)) {
$step41 = $$underscore43.step;
$al46 = $$underscore43.from;
$ans45 = $$underscore43.ans;
$underscore43 = $$underscore43.args[0];
key44 = $$underscore43.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],2,$t);
}
var $underscore43 = $$underscore43;
var key44 = $key44;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step41) {
case 0: $step41 = 1;
$al46 = L[0];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al46,equal$always2);
}
$ans45 = equal$always2.app(key44,get$arr$key47);
break;
case 1: var anf_arg49 = $ans45;
$al46 = L[0];
var anf_if50 = R.checkWrapBoolean(anf_arg49);
$step41 = R.isPyretTrue(anf_if50)?2:3;
break;
case 2: $step41 = 4;
$ans45 = arr33;
break;
case 3: $step41 = 4;
$al46 = L[1];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al46,raise1);
}
$ans45 = raise1.app(("Cannot get arr externally"));
break;
case 4: ++R.GAS;
return $ans45;
default: throw "No case numbered " + $step41 + " in $temp_full42";
}
}
} catch($e51) {
if(R.isCont($e51) && ($step41 !== 4)) {
$e51.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al46,$temp_full42,$step41,[$underscore43,key44],[]);
}
if(R.isPyretException($e51)) {
$e51.pyretStack.push($al46);
}
throw $e51;
}
};
var anf_obj142 = R.makeMethod1($temp_full42,"get-arr");
var $temp_full53 = function($$underscore54,$ix55) {
var $step52 = 0;
var $ans56 = D;
var $al57 = L[5];
try {
if(R.isActivationRecord($$underscore54)) {
$step52 = $$underscore54.step;
$al57 = $$underscore54.from;
$ans56 = $$underscore54.ans;
$underscore54 = $$underscore54.args[0];
ix55 = $$underscore54.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],2,$t);
}
var $underscore54 = $$underscore54;
var ix55 = $ix55;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step52) {
case 0: $step52 = 1;
$al57 = L[4];
R._checkAnn(L[4],$type$Number8,ix55);
break;
case 1: $step52 = 2;
$al57 = L[3];
if(!(R.isFunction(raw$array$get3))) {
R.ffi.throwNonFunApp($al57,raw$array$get3);
}
$ans56 = raw$array$get3.app(arr33,ix55);
break;
case 2: ++R.GAS;
return $ans56;
default: throw "No case numbered " + $step52 + " in $temp_full53";
}
}
} catch($e58) {
if(R.isCont($e58) && ($step52 !== 2)) {
$e58.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al57,$temp_full53,$step52,[$underscore54,ix55],[]);
}
if(R.isPyretException($e58)) {
$e58.pyretStack.push($al57);
}
throw $e58;
}
};
var anf_obj143 = R.makeMethod1($temp_full53,"get-now");
var $temp_full61 = function($self62,$ix63,$val64) {
var $step60 = 0;
var $ans65 = D;
var $al66 = L[9];
try {
if(R.isActivationRecord($self62)) {
$step60 = $self62.step;
$al66 = $self62.from;
$ans65 = $self62.ans;
self62 = $self62.args[0];
ix63 = $self62.args[1];
val64 = $self62.args[2];
ann_check_temp67 = $self62.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],3,$t);
}
var self62 = $self62;
var ix63 = $ix63;
var val64 = $val64;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step60) {
case 0: $step60 = 1;
$al66 = L[8];
R._checkAnn(L[8],$type$Number8,ix63);
break;
case 1: $step60 = 2;
$al66 = L[7];
if(!(R.isFunction(raw$array$set2))) {
R.ffi.throwNonFunApp($al66,raw$array$set2);
}
$ans65 = raw$array$set2.app(arr33,ix63,val64);
break;
case 2: var ann_check_temp67 = nothing2;
$step60 = 3;
$al66 = L[6];
R._checkAnn(L[6],$type$Nothing8,ann_check_temp67);
break;
case 3: $step60 = 4;
$ans65 = ann_check_temp67;
break;
case 4: ++R.GAS;
return $ans65;
default: throw "No case numbered " + $step60 + " in $temp_full61";
}
}
} catch($e68) {
if(R.isCont($e68) && ($step60 !== 4)) {
$e68.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al66,$temp_full61,$step60,[self62,ix63,val64],[ann_check_temp67]);
}
if(R.isPyretException($e68)) {
$e68.pyretStack.push($al66);
}
throw $e68;
}
};
var anf_obj144 = R.makeMethod2($temp_full61,"set-now");
var $temp_full70 = function($$underscore71) {
var $step69 = 0;
var $ans72 = D;
var $al73 = L[11];
try {
if(R.isActivationRecord($$underscore71)) {
$step69 = $$underscore71.step;
$al73 = $$underscore71.from;
$ans72 = $$underscore71.ans;
$underscore71 = $$underscore71.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[11],1,$t);
}
var $underscore71 = $$underscore71;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step69) {
case 0: $step69 = 1;
$al73 = L[10];
if(!(R.isFunction(raw$array$length1))) {
R.ffi.throwNonFunApp($al73,raw$array$length1);
}
$ans72 = raw$array$length1.app(arr33);
break;
case 1: ++R.GAS;
return $ans72;
default: throw "No case numbered " + $step69 + " in $temp_full70";
}
}
} catch($e74) {
if(R.isCont($e74) && ($step69 !== 1)) {
$e74.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al73,$temp_full70,$step69,[$underscore71],[]);
}
if(R.isPyretException($e74)) {
$e74.pyretStack.push($al73);
}
throw $e74;
}
};
var anf_obj145 = R.makeMethod0($temp_full70,"length");
var $temp_full76 = function($$underscore77) {
var $step75 = 0;
var $ans79 = D;
var $al80 = L[13];
try {
if(R.isActivationRecord($$underscore77)) {
$step75 = $$underscore77.step;
$al80 = $$underscore77.from;
$ans79 = $$underscore77.ans;
$underscore77 = $$underscore77.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[13],1,$t);
}
var $underscore77 = $$underscore77;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step75) {
case 0: $step75 = 1;
$al80 = L[12];
if(!(R.isFunction(raw$array$to$list5))) {
R.ffi.throwNonFunApp($al80,raw$array$to$list5);
}
$ans79 = raw$array$to$list5.app(arr33);
break;
case 1: ++R.GAS;
return $ans79;
default: throw "No case numbered " + $step75 + " in $temp_full76";
}
}
} catch($e81) {
if(R.isCont($e81) && ($step75 !== 1)) {
$e81.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al80,$temp_full76,$step75,[$underscore77],[]);
}
if(R.isPyretException($e81)) {
$e81.pyretStack.push($al80);
}
throw $e81;
}
};
var anf_obj146 = R.makeMethod0($temp_full76,"to-list-now");
var $temp_full83 = function($self84,$other85,$eq86) {
var $step82 = 0;
var $ans87 = D;
var $al88 = L[17];
try {
if(R.isActivationRecord($self84)) {
$step82 = $self84.step;
$al88 = $self84.from;
$ans87 = $self84.ans;
self84 = $self84.args[0];
other85 = $self84.args[1];
eq86 = $self84.args[2];
anf_arg95 = $self84.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[17],3,$t);
}
var self84 = $self84;
var other85 = $other85;
var eq86 = $eq86;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step82) {
case 0: $step82 = 1;
$al88 = L[14];
$field89 = R.getColonFieldLoc(self84,"get-arr",L[14]);
if(R.isMethod($field89)) {
$ans87 = $field89.full_meth(self84,get$arr$key47);
} else {
if(!(R.isFunction($field89))) {
R.ffi.throwNonFunApp(L[14],$field89);
}
$ans87 = $field89.app(get$arr$key47);
}
break;
case 1: var anf_arg95 = $ans87;
$step82 = 2;
$al88 = L[15];
$field93 = R.getColonFieldLoc(other85,"get-arr",L[15]);
if(R.isMethod($field93)) {
$ans87 = $field93.full_meth(other85,get$arr$key47);
} else {
if(!(R.isFunction($field93))) {
R.ffi.throwNonFunApp(L[15],$field93);
}
$ans87 = $field93.app(get$arr$key47);
}
break;
case 2: var anf_arg97 = $ans87;
$step82 = 3;
$al88 = L[16];
if(!(R.isFunction(eq86))) {
R.ffi.throwNonFunApp($al88,eq86);
}
$ans87 = eq86.app(anf_arg95,anf_arg97);
break;
case 3: ++R.GAS;
return $ans87;
default: throw "No case numbered " + $step82 + " in $temp_full83";
}
}
} catch($e98) {
if(R.isCont($e98) && ($step82 !== 3)) {
$e98.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al88,$temp_full83,$step82,[self84,other85,eq86],[anf_arg95]);
}
if(R.isPyretException($e98)) {
$e98.pyretStack.push($al88);
}
throw $e98;
}
};
var anf_obj129 = R.makeMethod2($temp_full83,"_equals");
var $temp_full100 = function($self101,$torepr102) {
var $step99 = 0;
var $ans103 = D;
var $al104 = L[23];
try {
if(R.isActivationRecord($self101)) {
$step99 = $self101.step;
$al104 = $self101.from;
$ans103 = $self101.ans;
self101 = $self101.args[0];
torepr102 = $self101.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[23],2,$t);
}
var self101 = $self101;
var torepr102 = $torepr102;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step99) {
case 0: $step99 = 1;
$al104 = L[18];
$field106 = R.getColonFieldLoc(self101,"to-list-now",L[18]);
if(R.isMethod($field106)) {
$ans103 = $field106.full_meth(self101);
} else {
if(!(R.isFunction($field106))) {
R.ffi.throwNonFunApp(L[18],$field106);
}
$ans103 = $field106.app();
}
break;
case 1: var anf_method_obj107 = $ans103;
$step99 = 2;
$al104 = L[19];
$field108 = R.getColonFieldLoc(anf_method_obj107,"map",L[19]);
if(R.isMethod($field108)) {
$ans103 = $field108.full_meth(anf_method_obj107,torepr102);
} else {
if(!(R.isFunction($field108))) {
R.ffi.throwNonFunApp(L[19],$field108);
}
$ans103 = $field108.app(torepr102);
}
break;
case 2: var anf_method_obj109 = $ans103;
$step99 = 3;
$al104 = L[20];
$field111 = R.getColonFieldLoc(anf_method_obj109,"join-str",L[20]);
if(R.isMethod($field111)) {
$ans103 = $field111.full_meth(anf_method_obj109,(", "));
} else {
if(!(R.isFunction($field111))) {
R.ffi.throwNonFunApp(L[20],$field111);
}
$ans103 = $field111.app((", "));
}
break;
case 3: var anf_arg112 = $ans103;
$step99 = 4;
$al104 = L[22];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al104,_plus1);
}
$ans103 = _plus1.app(("[array: "),anf_arg112);
break;
case 4: var anf_arg113 = $ans103;
$step99 = 5;
$al104 = L[21];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al104,_plus1);
}
$ans103 = _plus1.app(anf_arg113,("]"));
break;
case 5: ++R.GAS;
return $ans103;
default: throw "No case numbered " + $step99 + " in $temp_full100";
}
}
} catch($e114) {
if(R.isCont($e114) && ($step99 !== 5)) {
$e114.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al104,$temp_full100,$step99,[self101,torepr102],[]);
}
if(R.isPyretException($e114)) {
$e114.pyretStack.push($al104);
}
throw $e114;
}
};
var anf_obj134 = R.makeMethod1($temp_full100,"_torepr");
var $temp_full116 = function($self117,$tostring118) {
var $step115 = 0;
var $ans119 = D;
var $al120 = L[29];
try {
if(R.isActivationRecord($self117)) {
$step115 = $self117.step;
$al120 = $self117.from;
$ans119 = $self117.ans;
self117 = $self117.args[0];
tostring118 = $self117.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[29],2,$t);
}
var self117 = $self117;
var tostring118 = $tostring118;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step115) {
case 0: $step115 = 1;
$al120 = L[24];
$field121 = R.getColonFieldLoc(self117,"to-list-now",L[24]);
if(R.isMethod($field121)) {
$ans119 = $field121.full_meth(self117);
} else {
if(!(R.isFunction($field121))) {
R.ffi.throwNonFunApp(L[24],$field121);
}
$ans119 = $field121.app();
}
break;
case 1: var anf_method_obj122 = $ans119;
$step115 = 2;
$al120 = L[25];
$field123 = R.getColonFieldLoc(anf_method_obj122,"map",L[25]);
if(R.isMethod($field123)) {
$ans119 = $field123.full_meth(anf_method_obj122,tostring118);
} else {
if(!(R.isFunction($field123))) {
R.ffi.throwNonFunApp(L[25],$field123);
}
$ans119 = $field123.app(tostring118);
}
break;
case 2: var anf_method_obj124 = $ans119;
$step115 = 3;
$al120 = L[26];
$field125 = R.getColonFieldLoc(anf_method_obj124,"join-str",L[26]);
if(R.isMethod($field125)) {
$ans119 = $field125.full_meth(anf_method_obj124,(", "));
} else {
if(!(R.isFunction($field125))) {
R.ffi.throwNonFunApp(L[26],$field125);
}
$ans119 = $field125.app((", "));
}
break;
case 3: var anf_arg126 = $ans119;
$step115 = 4;
$al120 = L[28];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al120,_plus1);
}
$ans119 = _plus1.app(("[array: "),anf_arg126);
break;
case 4: var anf_arg127 = $ans119;
$step115 = 5;
$al120 = L[27];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al120,_plus1);
}
$ans119 = _plus1.app(anf_arg127,("]"));
break;
case 5: ++R.GAS;
return $ans119;
default: throw "No case numbered " + $step115 + " in $temp_full116";
}
}
} catch($e128) {
if(R.isCont($e128) && ($step115 !== 5)) {
$e128.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al120,$temp_full116,$step115,[self117,tostring118],[]);
}
if(R.isPyretException($e128)) {
$e128.pyretStack.push($al120);
}
throw $e128;
}
};
var anf_obj147 = R.makeMethod1($temp_full116,"_tostring");
var $temp_full130 = function($self131) {
var $step129 = 0;
var $ans132 = D;
var $al133 = L[34];
try {
if(R.isActivationRecord($self131)) {
$step129 = $self131.step;
$al133 = $self131.from;
$ans132 = $self131.ans;
self131 = $self131.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[34],1,$t);
}
var self131 = $self131;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step129) {
case 0: $step129 = 1;
$al133 = L[30];
$field134 = R.getColonFieldLoc(self131,"to-list-now",L[30]);
if(R.isMethod($field134)) {
$ans132 = $field134.full_meth(self131);
} else {
if(!(R.isFunction($field134))) {
R.ffi.throwNonFunApp(L[30],$field134);
}
$ans132 = $field134.app();
}
break;
case 1: var anf_method_obj135 = $ans132;
$al133 = L[31];
var anf_arg136 = G(VS11,"vs-value",L[31]);
$step129 = 2;
$al133 = L[32];
$field138 = R.getColonFieldLoc(anf_method_obj135,"map",L[32]);
if(R.isMethod($field138)) {
$ans132 = $field138.full_meth(anf_method_obj135,anf_arg136);
} else {
if(!(R.isFunction($field138))) {
R.ffi.throwNonFunApp(L[32],$field138);
}
$ans132 = $field138.app(anf_arg136);
}
break;
case 2: var anf_arg139 = $ans132;
$step129 = 3;
$al133 = L[33];
$field140 = R.getColonFieldLoc(VS11,"vs-collection",L[33]);
if(R.isMethod($field140)) {
$ans132 = $field140.full_meth(VS11,("array"),anf_arg139);
} else {
if(!(R.isFunction($field140))) {
R.ffi.throwNonFunApp(L[33],$field140);
}
$ans132 = $field140.app(("array"),anf_arg139);
}
break;
case 3: ++R.GAS;
return $ans132;
default: throw "No case numbered " + $step129 + " in $temp_full130";
}
}
} catch($e141) {
if(R.isCont($e141) && ($step129 !== 3)) {
$e141.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al133,$temp_full130,$step129,[self131],[]);
}
if(R.isPyretException($e141)) {
$e141.pyretStack.push($al133);
}
throw $e141;
}
};
var anf_obj148 = R.makeMethod0($temp_full130,"_output");
var anf_arg150 = R.makeObject({"get-arr":anf_obj142,
"get-now":anf_obj143,
"set-now":anf_obj144,
"length":anf_obj145,
"to-list-now":anf_obj146,
"_equals":anf_obj129,
"_torepr":anf_obj134,
"_tostring":anf_obj147,
"_output":anf_obj148});
$step31 = 2;
$al37 = L[35];
$field151 = R.getColonFieldLoc(ArrayT29,"brand",L[35]);
if(R.isMethod($field151)) {
$ans36 = $field151.full_meth(ArrayT29,anf_arg150);
} else {
if(!(R.isFunction($field151))) {
R.ffi.throwNonFunApp(L[35],$field151);
}
$ans36 = $field151.app(anf_arg150);
}
break;
case 2: var ann_check_temp152 = $ans36;
$step31 = 3;
$al37 = L[36];
R._checkAnn(L[36],Array153,ann_check_temp152);
break;
case 3: $step31 = 4;
$ans36 = ann_check_temp152;
break;
case 4: ++R.GAS;
return $ans36;
default: throw "No case numbered " + $step31 + " in $temp_lam32";
}
}
} catch($e155) {
if(R.isCont($e155) && ($step31 !== 4)) {
$e155.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al37,$temp_lam32,$step31,[arr33],[ann_check_temp152]);
}
if(R.isPyretException($e155)) {
$e155.pyretStack.push($al37);
}
throw $e155;
}
};
var anf_assign156 = R.makeFunction($temp_lam32,"make");
make157.$var = anf_assign156;
$al28 = L[39];
var is$array354 = G(ArrayT29,"test",L[39]);
var build$array185 = {"$var":D};
var array$from$list208 = {"$var":D};
var array$of220 = {"$var":D};
var array$set$now233 = {"$var":D};
var array$get$now245 = {"$var":D};
var array$length255 = {"$var":D};
var array$to$list$now271 = {"$var":D};
var $temp_lam159 = function($f160,$len161) {
var $step158 = 0;
var $ans163 = D;
var $al164 = L[51];
try {
if(R.isActivationRecord($f160)) {
$step158 = $f160.step;
$al164 = $f160.from;
$ans163 = $f160.ans;
f160 = $f160.args[0];
len161 = $f160.args[1];
arr171 = $f160.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[51],2,$t);
}
var f160 = $f160;
var len161 = $len161;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step158) {
case 0: $step158 = 1;
$al164 = L[49];
R._checkAnn(L[49],R.Function,f160);
break;
case 1: $step158 = 2;
$al164 = L[50];
R._checkAnn(L[50],$type$Number8,len161);
break;
case 2: $step158 = 3;
$al164 = L[48];
if(!(R.isFunction(raw$array$of1))) {
R.ffi.throwNonFunApp($al164,raw$array$of1);
}
$ans163 = raw$array$of1.app(nothing2,len161);
break;
case 3: var arr171 = $ans163;
var loop173 = {"$var":D};
var $temp_lam166 = function($i167) {
var $step165 = 0;
var $ans168 = D;
var $al169 = L[45];
try {
if(R.isActivationRecord($i167)) {
$step165 = $i167.step;
$al169 = $i167.from;
$ans168 = $i167.ans;
i167 = $i167.args[0];
anf_fun174 = $i167.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[45],1,$t);
}
var i167 = $i167;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step165) {
case 0: $step165 = 1;
$al169 = L[40];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al169,_lessthan10);
}
$ans168 = _lessthan10.app(i167,len161);
break;
case 1: var anf_arg170 = $ans168;
$al169 = L[40];
var anf_if176 = R.checkWrapBoolean(anf_arg170);
$step165 = R.isPyretTrue(anf_if176)?2:7;
break;
case 2: $step165 = 3;
$al169 = L[44];
if(!(R.isFunction(f160))) {
R.ffi.throwNonFunApp($al169,f160);
}
$ans168 = f160.app(i167);
break;
case 3: var anf_arg172 = $ans168;
$step165 = 4;
$al169 = L[43];
if(!(R.isFunction(raw$array$set2))) {
R.ffi.throwNonFunApp($al169,raw$array$set2);
}
$ans168 = raw$array$set2.app(arr171,i167,anf_arg172);
break;
case 4: var anf_fun174 = loop173.$var;
$step165 = 5;
$al169 = L[42];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al169,_plus1);
}
$ans168 = _plus1.app(i167,(1));
break;
case 5: var anf_arg175 = $ans168;
$step165 = 6;
$al169 = L[41];
if(!(R.isFunction(anf_fun174))) {
R.ffi.throwNonFunApp($al169,anf_fun174);
}
$ans168 = anf_fun174.app(anf_arg175);
break;
case 6: $step165 = 8;
$ans168 = nothing2;
break;
case 7: $step165 = 8;
$ans168 = nothing2;
break;
case 8: ++R.GAS;
return $ans168;
default: throw "No case numbered " + $step165 + " in $temp_lam166";
}
}
} catch($e178) {
if(R.isCont($e178) && ($step165 !== 8)) {
$e178.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al169,$temp_lam166,$step165,[i167],[anf_fun174]);
}
if(R.isPyretException($e178)) {
$e178.pyretStack.push($al169);
}
throw $e178;
}
};
var anf_assign180 = R.makeFunction($temp_lam166,"loop");
loop173.$var = anf_assign180;
var anf_fun181 = loop173.$var;
$step158 = 4;
$al164 = L[47];
if(!(R.isFunction(anf_fun181))) {
R.ffi.throwNonFunApp($al164,anf_fun181);
}
$ans163 = anf_fun181.app((0));
break;
case 4: var anf_fun182 = make157.$var;
$step158 = 5;
$al164 = L[46];
if(!(R.isFunction(anf_fun182))) {
R.ffi.throwNonFunApp($al164,anf_fun182);
}
$ans163 = anf_fun182.app(arr171);
break;
case 5: ++R.GAS;
return $ans163;
default: throw "No case numbered " + $step158 + " in $temp_lam159";
}
}
} catch($e183) {
if(R.isCont($e183) && ($step158 !== 5)) {
$e183.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al164,$temp_lam159,$step158,[f160,len161],[arr171]);
}
if(R.isPyretException($e183)) {
$e183.pyretStack.push($al164);
}
throw $e183;
}
};
var anf_assign184 = R.makeFunction($temp_lam159,"build-array");
build$array185.$var = anf_assign184;
var $temp_lam187 = function($l188) {
var $step186 = 0;
var $ans189 = D;
var $al190 = L[57];
try {
if(R.isActivationRecord($l188)) {
$step186 = $l188.step;
$al190 = $l188.from;
$ans189 = $l188.ans;
l188 = $l188.args[0];
arr200 = $l188.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[57],1,$t);
}
var l188 = $l188;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step186) {
case 0: $step186 = 1;
$al190 = L[52];
$field191 = R.getColonFieldLoc(l188,"length",L[52]);
if(R.isMethod($field191)) {
$ans189 = $field191.full_meth(l188);
} else {
if(!(R.isFunction($field191))) {
R.ffi.throwNonFunApp(L[52],$field191);
}
$ans189 = $field191.app();
}
break;
case 1: var anf_arg192 = $ans189;
$step186 = 2;
$al190 = L[56];
if(!(R.isFunction(raw$array$of1))) {
R.ffi.throwNonFunApp($al190,raw$array$of1);
}
$ans189 = raw$array$of1.app((0),anf_arg192);
break;
case 2: var arr200 = $ans189;
var $temp_lam195 = function($n196,$elt197) {
var $step194 = 0;
var $ans198 = D;
var $al199 = L[54];
try {
if(R.isActivationRecord($n196)) {
$step194 = $n196.step;
$al199 = $n196.from;
$ans198 = $n196.ans;
n196 = $n196.args[0];
elt197 = $n196.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[54],2,$t);
}
var n196 = $n196;
var elt197 = $elt197;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step194) {
case 0: $step194 = 1;
$al199 = L[53];
if(!(R.isFunction(raw$array$set2))) {
R.ffi.throwNonFunApp($al199,raw$array$set2);
}
$ans198 = raw$array$set2.app(arr200,n196,elt197);
break;
case 1: ++R.GAS;
return $ans198;
default: throw "No case numbered " + $step194 + " in $temp_lam195";
}
}
} catch($e201) {
if(R.isCont($e201) && ($step194 !== 1)) {
$e201.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al199,$temp_lam195,$step194,[n196,elt197],[]);
}
if(R.isPyretException($e201)) {
$e201.pyretStack.push($al199);
}
throw $e201;
}
};
var anf_arg202 = R.makeFunction($temp_lam195,"for-body<line 66, column 2>");
$step186 = 3;
$al190 = L[54];
$field203 = R.getColonFieldLoc(lists10,"each_n",L[54]);
if(R.isMethod($field203)) {
$ans189 = $field203.full_meth(lists10,anf_arg202,(0),l188);
} else {
if(!(R.isFunction($field203))) {
R.ffi.throwNonFunApp(L[54],$field203);
}
$ans189 = $field203.app(anf_arg202,(0),l188);
}
break;
case 3: var anf_fun204 = make157.$var;
$step186 = 4;
$al190 = L[55];
if(!(R.isFunction(anf_fun204))) {
R.ffi.throwNonFunApp($al190,anf_fun204);
}
$ans189 = anf_fun204.app(arr200);
break;
case 4: ++R.GAS;
return $ans189;
default: throw "No case numbered " + $step186 + " in $temp_lam187";
}
}
} catch($e206) {
if(R.isCont($e206) && ($step186 !== 4)) {
$e206.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al190,$temp_lam187,$step186,[l188],[arr200]);
}
if(R.isPyretException($e206)) {
$e206.pyretStack.push($al190);
}
throw $e206;
}
};
var anf_assign207 = R.makeFunction($temp_lam187,"array-from-list");
array$from$list208.$var = anf_assign207;
var $temp_lam210 = function($elt211,$count212) {
var $step209 = 0;
var $ans213 = D;
var $al214 = L[63];
try {
if(R.isActivationRecord($elt211)) {
$step209 = $elt211.step;
$al214 = $elt211.from;
$ans213 = $elt211.ans;
elt211 = $elt211.args[0];
count212 = $elt211.args[1];
ann_check_temp217 = $elt211.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[63],2,$t);
}
var elt211 = $elt211;
var count212 = $count212;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step209) {
case 0: $step209 = 1;
$al214 = L[61];
R._checkAnn(L[61],R.Any,elt211);
break;
case 1: $step209 = 2;
$al214 = L[62];
R._checkAnn(L[62],$type$Number8,count212);
break;
case 2: $step209 = 3;
$al214 = L[60];
if(!(R.isFunction(raw$array$of1))) {
R.ffi.throwNonFunApp($al214,raw$array$of1);
}
$ans213 = raw$array$of1.app(elt211,count212);
break;
case 3: var arr216 = $ans213;
var anf_fun215 = make157.$var;
$step209 = 4;
$al214 = L[59];
if(!(R.isFunction(anf_fun215))) {
R.ffi.throwNonFunApp($al214,anf_fun215);
}
$ans213 = anf_fun215.app(arr216);
break;
case 4: var ann_check_temp217 = $ans213;
$step209 = 5;
$al214 = L[58];
R._checkAnn(L[58],Array153,ann_check_temp217);
break;
case 5: $step209 = 6;
$ans213 = ann_check_temp217;
break;
case 6: ++R.GAS;
return $ans213;
default: throw "No case numbered " + $step209 + " in $temp_lam210";
}
}
} catch($e218) {
if(R.isCont($e218) && ($step209 !== 6)) {
$e218.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al214,$temp_lam210,$step209,[elt211,count212],[ann_check_temp217]);
}
if(R.isPyretException($e218)) {
$e218.pyretStack.push($al214);
}
throw $e218;
}
};
var anf_assign219 = R.makeFunction($temp_lam210,"array-of");
array$of220.$var = anf_assign219;
var $temp_lam222 = function($arr223,$index224,$val225) {
var $step221 = 0;
var $ans227 = D;
var $al228 = L[69];
try {
if(R.isActivationRecord($arr223)) {
$step221 = $arr223.step;
$al228 = $arr223.from;
$ans227 = $arr223.ans;
arr223 = $arr223.args[0];
index224 = $arr223.args[1];
val225 = $arr223.args[2];
ann_check_temp230 = $arr223.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[69],3,$t);
}
var arr223 = $arr223;
var index224 = $index224;
var val225 = $val225;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step221) {
case 0: $step221 = 1;
$al228 = L[66];
R._checkAnn(L[66],Array153,arr223);
break;
case 1: $step221 = 2;
$al228 = L[67];
R._checkAnn(L[67],$type$Number8,index224);
break;
case 2: $step221 = 3;
$al228 = L[68];
R._checkAnn(L[68],R.Any,val225);
break;
case 3: $step221 = 4;
$al228 = L[64];
$field229 = R.getColonFieldLoc(arr223,"set-now",L[64]);
if(R.isMethod($field229)) {
$ans227 = $field229.full_meth(arr223,index224,val225);
} else {
if(!(R.isFunction($field229))) {
R.ffi.throwNonFunApp(L[64],$field229);
}
$ans227 = $field229.app(index224,val225);
}
break;
case 4: var ann_check_temp230 = $ans227;
$step221 = 5;
$al228 = L[65];
R._checkAnn(L[65],$type$Nothing8,ann_check_temp230);
break;
case 5: $step221 = 6;
$ans227 = ann_check_temp230;
break;
case 6: ++R.GAS;
return $ans227;
default: throw "No case numbered " + $step221 + " in $temp_lam222";
}
}
} catch($e231) {
if(R.isCont($e231) && ($step221 !== 6)) {
$e231.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al228,$temp_lam222,$step221,[arr223,index224,val225],[ann_check_temp230]);
}
if(R.isPyretException($e231)) {
$e231.pyretStack.push($al228);
}
throw $e231;
}
};
var anf_assign232 = R.makeFunction($temp_lam222,"array-set-now");
array$set$now233.$var = anf_assign232;
var $temp_lam236 = function($arr237,$index238) {
var $step235 = 0;
var $ans239 = D;
var $al240 = L[74];
try {
if(R.isActivationRecord($arr237)) {
$step235 = $arr237.step;
$al240 = $arr237.from;
$ans239 = $arr237.ans;
arr237 = $arr237.args[0];
index238 = $arr237.args[1];
ann_check_temp242 = $arr237.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[74],2,$t);
}
var arr237 = $arr237;
var index238 = $index238;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step235) {
case 0: $step235 = 1;
$al240 = L[72];
R._checkAnn(L[72],Array153,arr237);
break;
case 1: $step235 = 2;
$al240 = L[73];
R._checkAnn(L[73],$type$Number8,index238);
break;
case 2: $step235 = 3;
$al240 = L[70];
$field241 = R.getColonFieldLoc(arr237,"get-now",L[70]);
if(R.isMethod($field241)) {
$ans239 = $field241.full_meth(arr237,index238);
} else {
if(!(R.isFunction($field241))) {
R.ffi.throwNonFunApp(L[70],$field241);
}
$ans239 = $field241.app(index238);
}
break;
case 3: var ann_check_temp242 = $ans239;
$step235 = 4;
$al240 = L[71];
R._checkAnn(L[71],R.Any,ann_check_temp242);
break;
case 4: $step235 = 5;
$ans239 = ann_check_temp242;
break;
case 5: ++R.GAS;
return $ans239;
default: throw "No case numbered " + $step235 + " in $temp_lam236";
}
}
} catch($e243) {
if(R.isCont($e243) && ($step235 !== 5)) {
$e243.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al240,$temp_lam236,$step235,[arr237,index238],[ann_check_temp242]);
}
if(R.isPyretException($e243)) {
$e243.pyretStack.push($al240);
}
throw $e243;
}
};
var anf_assign244 = R.makeFunction($temp_lam236,"array-get-now");
array$get$now245.$var = anf_assign244;
var $temp_lam247 = function($arr248) {
var $step246 = 0;
var $ans249 = D;
var $al250 = L[78];
try {
if(R.isActivationRecord($arr248)) {
$step246 = $arr248.step;
$al250 = $arr248.from;
$ans249 = $arr248.ans;
arr248 = $arr248.args[0];
ann_check_temp252 = $arr248.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[78],1,$t);
}
var arr248 = $arr248;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step246) {
case 0: $step246 = 1;
$al250 = L[77];
R._checkAnn(L[77],Array153,arr248);
break;
case 1: $step246 = 2;
$al250 = L[75];
$field251 = R.getColonFieldLoc(arr248,"length",L[75]);
if(R.isMethod($field251)) {
$ans249 = $field251.full_meth(arr248);
} else {
if(!(R.isFunction($field251))) {
R.ffi.throwNonFunApp(L[75],$field251);
}
$ans249 = $field251.app();
}
break;
case 2: var ann_check_temp252 = $ans249;
$step246 = 3;
$al250 = L[76];
R._checkAnn(L[76],$type$Number8,ann_check_temp252);
break;
case 3: $step246 = 4;
$ans249 = ann_check_temp252;
break;
case 4: ++R.GAS;
return $ans249;
default: throw "No case numbered " + $step246 + " in $temp_lam247";
}
}
} catch($e253) {
if(R.isCont($e253) && ($step246 !== 4)) {
$e253.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al250,$temp_lam247,$step246,[arr248],[ann_check_temp252]);
}
if(R.isPyretException($e253)) {
$e253.pyretStack.push($al250);
}
throw $e253;
}
};
var anf_assign254 = R.makeFunction($temp_lam247,"array-length");
array$length255.$var = anf_assign254;
var $temp_lam257 = function($arr258) {
var $step256 = 0;
var $ans260 = D;
var $al261 = L[82];
try {
if(R.isActivationRecord($arr258)) {
$step256 = $arr258.step;
$al261 = $arr258.from;
$ans260 = $arr258.ans;
arr258 = $arr258.args[0];
ann_check_temp267 = $arr258.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[82],1,$t);
}
var arr258 = $arr258;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step256) {
case 0: $step256 = 1;
$al261 = L[81];
R._checkAnn(L[81],Array153,arr258);
break;
case 1: $step256 = 2;
$al261 = L[79];
$field266 = R.getColonFieldLoc(arr258,"to-list-now",L[79]);
if(R.isMethod($field266)) {
$ans260 = $field266.full_meth(arr258);
} else {
if(!(R.isFunction($field266))) {
R.ffi.throwNonFunApp(L[79],$field266);
}
$ans260 = $field266.app();
}
break;
case 2: var ann_check_temp267 = $ans260;
$step256 = 3;
$al261 = L[80];
R._checkAnn(L[80],List268,ann_check_temp267);
break;
case 3: $step256 = 4;
$ans260 = ann_check_temp267;
break;
case 4: ++R.GAS;
return $ans260;
default: throw "No case numbered " + $step256 + " in $temp_lam257";
}
}
} catch($e269) {
if(R.isCont($e269) && ($step256 !== 4)) {
$e269.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al261,$temp_lam257,$step256,[arr258],[ann_check_temp267]);
}
if(R.isPyretException($e269)) {
$e269.pyretStack.push($al261);
}
throw $e269;
}
};
var anf_assign270 = R.makeFunction($temp_lam257,"array-to-list-now");
array$to$list$now271.$var = anf_assign270;
var anf_obj342 = make157.$var;
var $temp_lam273 = function($$resumer101) {
var $step272 = 0;
var $ans274 = D;
var $al275 = L[85];
try {
if(R.isActivationRecord($$resumer101)) {
$step272 = $$resumer101.step;
$al275 = $$resumer101.from;
$ans274 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_fun277 = $$resumer101.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[85],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step272) {
case 0: var anf_fun277 = make157.$var;
$step272 = 1;
$al275 = L[83];
$field276 = R.getColonFieldLoc(raw$array6,"make0",L[83]);
if(R.isMethod($field276)) {
$ans274 = $field276.full_meth(raw$array6);
} else {
if(!(R.isFunction($field276))) {
R.ffi.throwNonFunApp(L[83],$field276);
}
$ans274 = $field276.app();
}
break;
case 1: var anf_arg280 = $ans274;
$step272 = 2;
$al275 = L[84];
if(!(R.isFunction(anf_fun277))) {
R.ffi.throwNonFunApp($al275,anf_fun277);
}
$ans274 = anf_fun277.app(anf_arg280);
break;
case 2: ++R.GAS;
return $ans274;
default: throw "No case numbered " + $step272 + " in $temp_lam273";
}
}
} catch($e281) {
if(R.isCont($e281) && ($step272 !== 2)) {
$e281.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al275,$temp_lam273,$step272,[],[anf_fun277]);
}
if(R.isPyretException($e281)) {
$e281.pyretStack.push($al275);
}
throw $e281;
}
};
var anf_obj343 = R.makeFunction($temp_lam273,"");
var $temp_lam283 = function($a284) {
var $step282 = 0;
var $ans285 = D;
var $al286 = L[88];
try {
if(R.isActivationRecord($a284)) {
$step282 = $a284.step;
$al286 = $a284.from;
$ans285 = $a284.ans;
a284 = $a284.args[0];
anf_fun288 = $a284.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[88],1,$t);
}
var a284 = $a284;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step282) {
case 0: var anf_fun288 = make157.$var;
$step282 = 1;
$al286 = L[86];
$field287 = R.getColonFieldLoc(raw$array6,"make1",L[86]);
if(R.isMethod($field287)) {
$ans285 = $field287.full_meth(raw$array6,a284);
} else {
if(!(R.isFunction($field287))) {
R.ffi.throwNonFunApp(L[86],$field287);
}
$ans285 = $field287.app(a284);
}
break;
case 1: var anf_arg289 = $ans285;
$step282 = 2;
$al286 = L[87];
if(!(R.isFunction(anf_fun288))) {
R.ffi.throwNonFunApp($al286,anf_fun288);
}
$ans285 = anf_fun288.app(anf_arg289);
break;
case 2: ++R.GAS;
return $ans285;
default: throw "No case numbered " + $step282 + " in $temp_lam283";
}
}
} catch($e290) {
if(R.isCont($e290) && ($step282 !== 2)) {
$e290.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al286,$temp_lam283,$step282,[a284],[anf_fun288]);
}
if(R.isPyretException($e290)) {
$e290.pyretStack.push($al286);
}
throw $e290;
}
};
var anf_obj344 = R.makeFunction($temp_lam283,"");
var $temp_lam292 = function($a293,$b294) {
var $step291 = 0;
var $ans295 = D;
var $al296 = L[91];
try {
if(R.isActivationRecord($a293)) {
$step291 = $a293.step;
$al296 = $a293.from;
$ans295 = $a293.ans;
a293 = $a293.args[0];
b294 = $a293.args[1];
anf_fun298 = $a293.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[91],2,$t);
}
var a293 = $a293;
var b294 = $b294;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step291) {
case 0: var anf_fun298 = make157.$var;
$step291 = 1;
$al296 = L[89];
$field297 = R.getColonFieldLoc(raw$array6,"make2",L[89]);
if(R.isMethod($field297)) {
$ans295 = $field297.full_meth(raw$array6,a293,b294);
} else {
if(!(R.isFunction($field297))) {
R.ffi.throwNonFunApp(L[89],$field297);
}
$ans295 = $field297.app(a293,b294);
}
break;
case 1: var anf_arg299 = $ans295;
$step291 = 2;
$al296 = L[90];
if(!(R.isFunction(anf_fun298))) {
R.ffi.throwNonFunApp($al296,anf_fun298);
}
$ans295 = anf_fun298.app(anf_arg299);
break;
case 2: ++R.GAS;
return $ans295;
default: throw "No case numbered " + $step291 + " in $temp_lam292";
}
}
} catch($e300) {
if(R.isCont($e300) && ($step291 !== 2)) {
$e300.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al296,$temp_lam292,$step291,[a293,b294],[anf_fun298]);
}
if(R.isPyretException($e300)) {
$e300.pyretStack.push($al296);
}
throw $e300;
}
};
var anf_obj345 = R.makeFunction($temp_lam292,"");
var $temp_lam302 = function($a303,$b304,$c305) {
var $step301 = 0;
var $ans306 = D;
var $al307 = L[94];
try {
if(R.isActivationRecord($a303)) {
$step301 = $a303.step;
$al307 = $a303.from;
$ans306 = $a303.ans;
a303 = $a303.args[0];
b304 = $a303.args[1];
c305 = $a303.args[2];
anf_fun309 = $a303.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[94],3,$t);
}
var a303 = $a303;
var b304 = $b304;
var c305 = $c305;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step301) {
case 0: var anf_fun309 = make157.$var;
$step301 = 1;
$al307 = L[92];
$field308 = R.getColonFieldLoc(raw$array6,"make3",L[92]);
if(R.isMethod($field308)) {
$ans306 = $field308.full_meth(raw$array6,a303,b304,c305);
} else {
if(!(R.isFunction($field308))) {
R.ffi.throwNonFunApp(L[92],$field308);
}
$ans306 = $field308.app(a303,b304,c305);
}
break;
case 1: var anf_arg311 = $ans306;
$step301 = 2;
$al307 = L[93];
if(!(R.isFunction(anf_fun309))) {
R.ffi.throwNonFunApp($al307,anf_fun309);
}
$ans306 = anf_fun309.app(anf_arg311);
break;
case 2: ++R.GAS;
return $ans306;
default: throw "No case numbered " + $step301 + " in $temp_lam302";
}
}
} catch($e312) {
if(R.isCont($e312) && ($step301 !== 2)) {
$e312.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al307,$temp_lam302,$step301,[a303,b304,c305],[anf_fun309]);
}
if(R.isPyretException($e312)) {
$e312.pyretStack.push($al307);
}
throw $e312;
}
};
var anf_obj346 = R.makeFunction($temp_lam302,"");
var $temp_lam314 = function($a315,$b316,$c317,$d318) {
var $step313 = 0;
var $ans319 = D;
var $al320 = L[97];
try {
if(R.isActivationRecord($a315)) {
$step313 = $a315.step;
$al320 = $a315.from;
$ans319 = $a315.ans;
a315 = $a315.args[0];
b316 = $a315.args[1];
c317 = $a315.args[2];
d318 = $a315.args[3];
anf_fun323 = $a315.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[97],4,$t);
}
var a315 = $a315;
var b316 = $b316;
var c317 = $c317;
var d318 = $d318;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step313) {
case 0: var anf_fun323 = make157.$var;
$step313 = 1;
$al320 = L[95];
$field321 = R.getColonFieldLoc(raw$array6,"make4",L[95]);
if(R.isMethod($field321)) {
$ans319 = $field321.full_meth(raw$array6,a315,b316,c317,d318);
} else {
if(!(R.isFunction($field321))) {
R.ffi.throwNonFunApp(L[95],$field321);
}
$ans319 = $field321.app(a315,b316,c317,d318);
}
break;
case 1: var anf_arg326 = $ans319;
$step313 = 2;
$al320 = L[96];
if(!(R.isFunction(anf_fun323))) {
R.ffi.throwNonFunApp($al320,anf_fun323);
}
$ans319 = anf_fun323.app(anf_arg326);
break;
case 2: ++R.GAS;
return $ans319;
default: throw "No case numbered " + $step313 + " in $temp_lam314";
}
}
} catch($e327) {
if(R.isCont($e327) && ($step313 !== 2)) {
$e327.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al320,$temp_lam314,$step313,[a315,b316,c317,d318],[anf_fun323]);
}
if(R.isPyretException($e327)) {
$e327.pyretStack.push($al320);
}
throw $e327;
}
};
var anf_obj347 = R.makeFunction($temp_lam314,"");
var $temp_lam329 = function($a316,$b317,$c330,$d331,$e332) {
var $step328 = 0;
var $ans333 = D;
var $al334 = L[100];
try {
if(R.isActivationRecord($a316)) {
$step328 = $a316.step;
$al334 = $a316.from;
$ans333 = $a316.ans;
a316 = $a316.args[0];
b317 = $a316.args[1];
c330 = $a316.args[2];
d331 = $a316.args[3];
e332 = $a316.args[4];
anf_fun337 = $a316.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[100],5,$t);
}
var a316 = $a316;
var b317 = $b317;
var c330 = $c330;
var d331 = $d331;
var e332 = $e332;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step328) {
case 0: var anf_fun337 = make157.$var;
$step328 = 1;
$al334 = L[98];
$field336 = R.getColonFieldLoc(raw$array6,"make5",L[98]);
if(R.isMethod($field336)) {
$ans333 = $field336.full_meth(raw$array6,a316,b317,c330,d331,e332);
} else {
if(!(R.isFunction($field336))) {
R.ffi.throwNonFunApp(L[98],$field336);
}
$ans333 = $field336.app(a316,b317,c330,d331,e332);
}
break;
case 1: var anf_arg340 = $ans333;
$step328 = 2;
$al334 = L[99];
if(!(R.isFunction(anf_fun337))) {
R.ffi.throwNonFunApp($al334,anf_fun337);
}
$ans333 = anf_fun337.app(anf_arg340);
break;
case 2: ++R.GAS;
return $ans333;
default: throw "No case numbered " + $step328 + " in $temp_lam329";
}
}
} catch($e341) {
if(R.isCont($e341) && ($step328 !== 2)) {
$e341.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al334,$temp_lam329,$step328,[a316,b317,c330,d331,e332],[anf_fun337]);
}
if(R.isPyretException($e341)) {
$e341.pyretStack.push($al334);
}
throw $e341;
}
};
var anf_obj348 = R.makeFunction($temp_lam329,"");
var array351 = R.makeObject({"make":anf_obj342,
"make0":anf_obj343,
"make1":anf_obj344,
"make2":anf_obj345,
"make3":anf_obj346,
"make4":anf_obj347,
"make5":anf_obj348});
var defined_value367 = array$to$list$now271.$var;
var defined_value368 = make157.$var;
var defined_value369 = array$length255.$var;
var defined_value370 = array$get$now245.$var;
var defined_value371 = array$set$now233.$var;
var defined_value372 = array$of220.$var;
var defined_value373 = array$from$list208.$var;
var defined_value374 = build$array185.$var;
$step21 = 1;
$al28 = L[101];
$field350 = R.getColonFieldLoc(builtins1,"trace-value",L[101]);
if(R.isMethod($field350)) {
$ans27 = $field350.full_meth(builtins1,L[101],nothing2);
} else {
if(!(R.isFunction($field350))) {
R.ffi.throwNonFunApp(L[101],$field350);
}
$ans27 = $field350.app(L[101],nothing2);
}
break;
case 1: var answer365 = $ans27;
var anf_obj352 = build$array185.$var;
var anf_obj353 = array$from$list208.$var;
var anf_obj355 = array$of220.$var;
var anf_obj356 = array$set$now233.$var;
var anf_obj357 = array$get$now245.$var;
var anf_obj358 = array$length255.$var;
var anf_obj359 = array$to$list$now271.$var;
var provides364 = R.makeObject({"array":array351,
"build-array":anf_obj352,
"array-from-list":anf_obj353,
"is-array":is$array354,
"array-of":anf_obj355,
"array-set-now":anf_obj356,
"array-get-now":anf_obj357,
"array-length":anf_obj358,
"array-to-list-now":anf_obj359});
$step21 = 2;
$al28 = L[102];
$field360 = R.getColonFieldLoc(builtins1,"current-checker",L[102]);
if(R.isMethod($field360)) {
$ans27 = $field360.full_meth(builtins1);
} else {
if(!(R.isFunction($field360))) {
R.ffi.throwNonFunApp(L[102],$field360);
}
$ans27 = $field360.app();
}
break;
case 2: var anf_method_obj361 = $ans27;
$step21 = 3;
$al28 = L[102];
$field363 = R.getColonFieldLoc(anf_method_obj361,"results",L[102]);
if(R.isMethod($field363)) {
$ans27 = $field363.full_meth(anf_method_obj361);
} else {
if(!(R.isFunction($field363))) {
R.ffi.throwNonFunApp(L[102],$field363);
}
$ans27 = $field363.app();
}
break;
case 3: var checks366 = $ans27;
$step21 = 4;
$ans27 = R.makeObject({"answer":answer365,
"namespace":NAMESPACE,
"defined-values":{"array":array351,
"array-to-list-now":defined_value367,
"make":defined_value368,
"array-length":defined_value369,
"array-get-now":defined_value370,
"array-set-now":defined_value371,
"array-of":defined_value372,
"array-from-list":defined_value373,
"build-array":defined_value374,
"is-array":is$array354,
"ArrayT":ArrayT29,
"get-arr-key":get$arr$key47,
"VS":VS11,
"lists":lists10},
"defined-types":{"List":List268,
"Array":Array153,
"lists":lists15,
"VS":VS16},
"provide-plus-types":R.makeObject({"values":provides364,
"types":{"List":List268,
"Array":Array153}}),
"checks":checks366});
break;
case 4: ++R.GAS;
return $ans27;
default: throw "No case numbered " + $step21 + " in $toplevel22";
}
}
} catch($e375) {
if(R.isCont($e375) && ($step21 !== 4)) {
$e375.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al28,$toplevel22,$step21,[],[ArrayT29,Array153,List268,get$arr$key47,is$array354,build$array185,array$from$list208,array$of220,array$set$now233,array$get$now245,array$length255,array$to$list$now271,array351,defined_value367,defined_value368,defined_value369,defined_value370,defined_value371,defined_value372,defined_value373,defined_value374,answer365,provides364]);
}
if(R.isPyretException($e375)) {
$e375.pyretStack.push($al28);
}
throw $e375;
}
};
return R.safeCall($toplevel22,function(moduleVal) {
R.modules["$builtin://arrays17"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://pick":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"is-Pick":"tany",
"is-pick-none":"tany",
"is-pick-some":"tany",
"pick-none":"tany",
"pick-some":"tany"},
"datatypes":{"atom#Pick#1":["data","Pick",["a","b"],[["pick-none"],["pick-some",
[["rest",
["tid",
"b"]],["elt",
["tid",
"a"]]]]],{}]},
"aliases":{"Pick":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import18) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://pick";
var D = R.undefined;
var L = [[M,7,2,66,7,13,77],
[M,8,2,80,8,34,112],
[M,8,21,99,8,22,100],
[M,8,32,110,8,33,111],
[M,8,4,82,8,34,112],
[M,6,0,47,9,3,116],
["dummy location"],
[M,1,0,0,9,3,116]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import18);
var $toplevel20 = function($$resumer101) {
var $step19 = 0;
var $ans22 = D;
var $al26 = L[7];
try {
if(R.isActivationRecord($$resumer101)) {
$step19 = $$resumer101.step;
$al26 = $$resumer101.from;
$ans22 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
Pick57 = $$resumer101.vars[0];
is$Pick44 = $$resumer101.vars[1];
is$pick$none45 = $$resumer101.vars[2];
pick$none46 = $$resumer101.vars[3];
is$pick$some47 = $$resumer101.vars[4];
pick$some48 = $$resumer101.vars[5];
defined_value57 = $$resumer101.vars[6];
defined_value58 = $$resumer101.vars[7];
defined_value59 = $$resumer101.vars[8];
defined_value60 = $$resumer101.vars[9];
defined_value61 = $$resumer101.vars[10];
answer55 = $$resumer101.vars[11];
provides54 = $$resumer101.vars[12];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step19) {
case 0: var Pick27 = R.namedBrander("Pick",L[5]);
var Pick57 = R.makeBranderAnn(Pick27,"Pick");
var Pick43 = {"$var":D};
var is$Pick44 = {"$var":D};
var is$pick$none45 = {"$var":D};
var pick$none46 = {"$var":D};
var is$pick$some47 = {"$var":D};
var pick$some48 = {"$var":D};
var $pick$none_getfields33 = function(f) {
return f();
};
var $pick$none_getfieldsref31 = function(f) {
return f();
};
var $pick$none_mutablemask32 = [];
var $pick$none$base28 = {"_match":R.makeMatch("pick-none",0)};
var $pick$none$brander29 = R.namedBrander("pick-none",L[0]);
var $pick$none$brands30 = {};
$pick$none$brands30[Pick27._brand] = true;
$pick$none$brands30[$pick$none$brander29._brand] = true;
var $pick$some_getfields39 = function(f) {
return f(this.dict["elt"],this.dict["rest"]);
};
var $pick$some_getfieldsref37 = function(f,refmask) {
return f(R.derefField(this.dict["elt"],false,refmask[0]),R.derefField(this.dict["rest"],false,refmask[1]));
};
var $pick$some_mutablemask38 = [false,false];
var $pick$some$base34 = {"$fieldNames":["elt","rest"],
"_match":R.makeMatch("pick-some",2)};
var $pick$some$brander35 = R.namedBrander("pick-some",L[1]);
var $pick$some$brands36 = {};
$pick$some$brands36[Pick27._brand] = true;
$pick$some$brands36[$pick$some$brander35._brand] = true;
var pick$some40 = R.makeVariantConstructor(L[4],function() {
return [R.Any,R.Any];
},["elt41","rest42"],[L[2],L[3]],[false,false],["elt41","rest42"],$pick$some_mutablemask38,$pick$some$base34,$pick$some$brands36,"pick-some",$pick$some_getfieldsref37,$pick$some_getfields39,$pick$some$base34);
var anf_assign27 = R.makeObject({"Pick":G(Pick27,"test",L[5]),
"is-pick-none":G($pick$none$brander29,"test",L[0]),
"pick-none":R.makeDataValue($pick$none$base28,$pick$none$brands30,"pick-none",$pick$none_getfieldsref31,$pick$none_getfields33,-1,$pick$none_mutablemask32,$pick$none$base28),
"is-pick-some":G($pick$some$brander35,"test",L[1]),
"pick-some":pick$some40});
Pick43.$var = anf_assign27;
var anf_bracket29 = Pick43.$var;
$al26 = L[5];
var anf_assign30 = G(anf_bracket29,"Pick",L[5]);
is$Pick44.$var = anf_assign30;
var anf_bracket32 = Pick43.$var;
$al26 = L[0];
var anf_assign33 = G(anf_bracket32,"is-pick-none",L[0]);
is$pick$none45.$var = anf_assign33;
var anf_bracket35 = Pick43.$var;
$al26 = L[0];
var anf_assign36 = G(anf_bracket35,"pick-none",L[0]);
pick$none46.$var = anf_assign36;
var anf_bracket38 = Pick43.$var;
$al26 = L[1];
var anf_assign39 = G(anf_bracket38,"is-pick-some",L[1]);
is$pick$some47.$var = anf_assign39;
var anf_bracket41 = Pick43.$var;
$al26 = L[1];
var anf_assign42 = G(anf_bracket41,"pick-some",L[1]);
pick$some48.$var = anf_assign42;
var defined_value57 = pick$some48.$var;
var defined_value58 = is$pick$some47.$var;
var defined_value59 = pick$none46.$var;
var defined_value60 = is$pick$none45.$var;
var defined_value61 = is$Pick44.$var;
$step19 = 1;
$al26 = L[6];
$field53 = R.getColonFieldLoc(builtins1,"trace-value",L[6]);
if(R.isMethod($field53)) {
$ans22 = $field53.full_meth(builtins1,L[6],nothing2);
} else {
if(!(R.isFunction($field53))) {
R.ffi.throwNonFunApp(L[6],$field53);
}
$ans22 = $field53.app(L[6],nothing2);
}
break;
case 1: var answer55 = $ans22;
var anf_obj45 = is$Pick44.$var;
var anf_obj46 = pick$none46.$var;
var anf_obj47 = is$pick$none45.$var;
var anf_obj48 = pick$some48.$var;
var anf_obj49 = is$pick$some47.$var;
var provides54 = R.makeObject({"is-Pick":anf_obj45,
"pick-none":anf_obj46,
"is-pick-none":anf_obj47,
"pick-some":anf_obj48,
"is-pick-some":anf_obj49});
$step19 = 2;
$al26 = L[5];
$field55 = R.getColonFieldLoc(builtins1,"current-checker",L[5]);
if(R.isMethod($field55)) {
$ans22 = $field55.full_meth(builtins1);
} else {
if(!(R.isFunction($field55))) {
R.ffi.throwNonFunApp(L[5],$field55);
}
$ans22 = $field55.app();
}
break;
case 2: var anf_method_obj51 = $ans22;
$step19 = 3;
$al26 = L[5];
$field56 = R.getColonFieldLoc(anf_method_obj51,"results",L[5]);
if(R.isMethod($field56)) {
$ans22 = $field56.full_meth(anf_method_obj51);
} else {
if(!(R.isFunction($field56))) {
R.ffi.throwNonFunApp(L[5],$field56);
}
$ans22 = $field56.app();
}
break;
case 3: var checks56 = $ans22;
$step19 = 4;
$ans22 = R.makeObject({"answer":answer55,
"namespace":NAMESPACE,
"defined-values":{"pick-some":defined_value57,
"is-pick-some":defined_value58,
"pick-none":defined_value59,
"is-pick-none":defined_value60,
"is-Pick":defined_value61},
"defined-types":{"Pick":Pick57},
"provide-plus-types":R.makeObject({"values":provides54,
"types":{"Pick":Pick57}}),
"checks":checks56});
break;
case 4: ++R.GAS;
return $ans22;
default: throw "No case numbered " + $step19 + " in $toplevel20";
}
}
} catch($e59) {
if(R.isCont($e59) && ($step19 !== 4)) {
$e59.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al26,$toplevel20,$step19,[],[Pick57,is$Pick44,is$pick$none45,pick$none46,is$pick$some47,pick$some48,defined_value57,defined_value58,defined_value59,defined_value60,defined_value61,answer55,provides54]);
}
if(R.isPyretException($e59)) {
$e59.pyretStack.push($al26);
}
throw $e59;
}
};
return R.safeCall($toplevel20,function(moduleVal) {
R.modules["$builtin://pick17"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://sets":({"requires":[{"import-type":"builtin",
"name":"arrays"},
{"import-type":"builtin",
"name":"equality"},
{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"pick"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{"List":"tany",
"arr-to-list-set":"tany",
"arr-to-tree-set":"tany",
"branch":"tany",
"elems-to-balanced-avl":"tany",
"empty":"tany",
"empty-list-set":"tany",
"empty-tree-set":"tany",
"fold":"tany",
"is-AVLTree":"tany",
"is-Set":"tany",
"is-branch":"tany",
"is-empty":"tany",
"is-leaf":"tany",
"is-list-set":"tany",
"is-tree-set":"tany",
"leaf":"tany",
"link":"tany",
"list-set":"tany",
"list-set-maker":"tany",
"list-to-list-set":"tany",
"list-to-set":"tany",
"list-to-tree":"tany",
"list-to-tree-set":"tany",
"makeSet2":"tany",
"makeSet3":"tany",
"makeSet4":"tany",
"makeSet5":"tany",
"merge-drop-l2":"tany",
"merge-no-dups":"tany",
"merge-only-dups":"tany",
"mkbranch":"tany",
"pick-none":"tany",
"pick-some":"tany",
"rebalance":"tany",
"remove-root":"tany",
"set-all":"tany",
"set-any":"tany",
"set-fold":"tany",
"set-to-sorted-elems":"tany",
"swap-next-lowest":"tany",
"tree-all":"tany",
"tree-any":"tany",
"tree-fold":"tany",
"tree-set":"tany",
"tree-set-difference":"tany",
"tree-set-intersect":"tany",
"tree-set-maker":"tany",
"tree-set-union":"tany"},
"datatypes":{"atom#AVLTree#1":["data","AVLTree",[],[["leaf"],["branch",
[["right",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"AVLTree"}],["left",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"AVLTree"}],["h",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["value",
"tany"]]]],{"all":["arrow",
["tany",
"tany"],
"tany"],
"count":["arrow",
["tany"],
"tany"],
"fold-revpostorder":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"fold-revinorder":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"fold-revpreorder":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"fold-postorder":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"fold-inorder":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"fold-preorder":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"revpostorder":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"revinorder":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"revpreorder":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"postorder":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"inorder":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"preorder":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"remove":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"AVLTree"}],
"insert":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"AVLTree"}],
"contains":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"height":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
"any":["arrow",
["tany",
"tany"],
"tany"],
"_equals":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"to-list":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}]}],
"atom#Set#2":["data","Set",[],[["list-set",
[["elems",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}]]],["tree-set",
[["elems",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"AVLTree"}]]]],{"_output":["arrow",
["tany"],
"tany"],
"_torepr":["arrow",
["tany",
"tany"],
"tany"],
"_tostring":["arrow",
["tany",
"tany"],
"tany"],
"pick":["arrow",
["tany"],
"tany"],
"to-list":["arrow",
["tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"}],
"remove":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
"add":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
"member":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"any":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"all":["arrow",
["tany",
"tany"],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"is-empty":["arrow",
["tany"],
"tany"],
"size":["arrow",
[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],
"difference":["arrow",
[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
"overlaps":["arrow",
[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}],
"_equals":["arrow",
["tany",
"tany",
"tany"],
"tany"],
"symmetric-difference":["arrow",
[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://sets"},
"name":"Set"}]}]},
"aliases":{"AVLTree":"tany",
"List":"tany",
"Pick":"tany",
"Set":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$arrays32,$equality30,$error15,$$import33,$lists19,$option34,$pick35,$VS19) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://sets";
var D = R.undefined;
var L = [[M,29,7,605,29,20,618],
[M,30,8,627,30,19,638],
[M,31,7,646,31,17,656],
[M,32,11,668,32,25,682],
[M,33,7,690,33,17,700],
[M,36,12,736,36,26,750],
[M,37,12,763,37,26,777],
[M,163,4,6531,163,18,6545],
[M,161,26,6448,161,36,6458],
[M,161,2,6424,164,5,6551],
[M,166,11,6599,166,21,6609],
[M,166,7,6595,166,29,6617],
[M,167,6,6625,167,51,6670],
[M,169,9,6690,169,23,6704],
[M,169,25,6706,169,40,6721],
[M,169,6,6687,169,41,6722],
[M,166,11,6599,166,28,6616],
[M,165,2,6555,171,5,6736],
[M,43,27,843,43,33,849],
[M,43,4,820,43,40,856],
[M,44,41,899,44,48,906],
[M,44,4,862,44,59,917],
[M,45,48,967,45,56,975],
[M,45,62,981,45,66,985],
[M,45,68,987,45,72,991],
[M,45,39,958,45,46,965],
[M,45,48,967,45,73,992],
[M,45,4,923,45,77,996],
[M,46,48,1046,46,52,1050],
[M,46,39,1037,46,46,1044],
[M,46,4,1002,46,56,1054],
[M,47,29,1085,47,39,1095],
[M,47,4,1060,47,50,1106],
[M,48,28,1136,48,38,1146],
[M,48,4,1112,48,49,1157],
[M,49,30,1189,49,40,1199],
[M,49,4,1163,49,51,1210],
[M,50,32,1244,50,42,1254],
[M,50,4,1216,50,53,1265],
[M,51,31,1298,51,41,1308],
[M,51,4,1271,51,52,1319],
[M,52,33,1354,52,43,1364],
[M,52,4,1325,52,54,1375],
[M,53,4,1381,53,49,1426],
[M,54,4,1432,54,48,1476],
[M,55,4,1482,55,50,1528],
[M,56,4,1534,56,52,1582],
[M,57,4,1588,57,51,1635],
[M,58,4,1641,58,53,1690],
[M,59,4,1696,59,29,1721],
[M,60,4,1727,60,33,1756],
[M,61,4,1762,61,34,1792],
[M,66,6,1957,66,12,1963],
[M,64,27,1900,64,33,1906],
[M,64,4,1877,67,7,1971],
[M,70,16,2115,70,26,2125],
[M,70,9,2108,70,26,2125],
[M,71,20,2152,71,30,2162],
[M,71,14,2146,71,30,2162],
[M,71,32,2164,71,41,2173],
[M,71,32,2164,71,55,2187],
[M,72,12,2200,72,22,2210],
[M,72,12,2200,72,36,2224],
[M,68,41,2014,68,48,2021],
[M,68,4,1977,74,7,2242],
[M,77,16,2375,77,26,2385],
[M,77,9,2368,77,26,2385],
[M,77,28,2387,77,36,2395],
[M,77,42,2401,77,51,2410],
[M,77,53,2412,77,63,2422],
[M,77,28,2387,77,64,2423],
[M,78,20,2444,78,30,2454],
[M,78,14,2438,78,30,2454],
[M,79,8,2464,79,17,2473],
[M,79,18,2474,79,26,2482],
[M,79,27,2483,79,37,2493],
[M,79,39,2495,79,48,2504],
[M,79,39,2495,79,60,2516],
[M,79,62,2518,79,72,2528],
[M,79,8,2464,79,74,2530],
[M,79,18,2474,79,73,2529],
[M,81,8,2551,81,17,2560],
[M,81,18,2561,81,26,2569],
[M,81,27,2570,81,37,2580],
[M,81,39,2582,81,48,2591],
[M,81,50,2593,81,60,2603],
[M,81,50,2593,81,72,2615],
[M,81,8,2551,81,74,2617],
[M,81,18,2561,81,73,2616],
[M,75,39,2283,75,46,2290],
[M,75,4,2248,83,7,2635],
[M,86,16,2765,86,26,2775],
[M,86,9,2758,86,26,2775],
[M,86,28,2777,86,39,2788],
[M,86,28,2777,86,45,2794],
[M,87,20,2815,87,30,2825],
[M,87,14,2809,87,30,2825],
[M,88,8,2835,88,17,2844],
[M,88,18,2845,88,26,2853],
[M,88,27,2854,88,37,2864],
[M,88,39,2866,88,48,2875],
[M,88,39,2866,88,60,2887],
[M,88,62,2889,88,72,2899],
[M,88,8,2835,88,74,2901],
[M,88,18,2845,88,73,2900],
[M,90,8,2922,90,17,2931],
[M,90,18,2932,90,26,2940],
[M,90,27,2941,90,37,2951],
[M,90,39,2953,90,48,2962],
[M,90,50,2964,90,60,2974],
[M,90,50,2964,90,72,2986],
[M,90,8,2922,90,74,2988],
[M,90,18,2932,90,73,2987],
[M,84,39,2676,84,46,2683],
[M,84,4,2641,92,7,3006],
[M,95,22,3155,95,32,3165],
[M,95,6,3139,95,36,3169],
[M,96,6,3237,96,40,3271],
[M,93,29,3037,93,39,3047],
[M,93,4,3012,97,7,3315],
[M,100,22,3462,100,32,3472],
[M,100,6,3446,100,36,3476],
[M,101,6,3483,101,39,3516],
[M,98,28,3345,98,38,3355],
[M,98,4,3321,102,7,3524],
[M,105,22,3675,105,32,3685],
[M,105,6,3659,105,36,3689],
[M,106,6,3696,106,41,3731],
[M,103,30,3556,103,40,3566],
[M,103,4,3530,107,7,3739],
[M,110,22,3891,110,32,3901],
[M,110,6,3875,110,36,3905],
[M,111,6,3912,111,37,3943],
[M,108,32,3773,108,42,3783],
[M,108,4,3745,112,7,3951],
[M,115,22,4100,115,32,4110],
[M,115,6,4084,115,36,4114],
[M,116,6,4121,116,36,4151],
[M,113,31,3984,113,41,3994],
[M,113,4,3957,117,7,4159],
[M,120,22,4313,120,32,4323],
[M,120,6,4297,120,36,4327],
[M,121,6,4334,121,38,4366],
[M,118,33,4194,118,43,4204],
[M,118,4,4165,122,7,4374],
[M,126,6,4574,126,16,4584],
[M,126,34,4602,126,43,4611],
[M,126,69,4637,126,79,4647],
[M,126,34,4602,126,81,4649],
[M,126,6,4574,126,82,4650],
[M,126,61,4629,126,80,4648],
[M,123,4,4380,127,7,4658],
[M,131,6,4857,131,16,4867],
[M,131,35,4886,131,44,4895],
[M,131,35,4886,131,66,4917],
[M,131,68,4919,131,78,4929],
[M,131,6,4857,131,80,4931],
[M,131,33,4884,131,79,4930],
[M,128,4,4664,132,7,4939],
[M,136,8,5143,136,18,5153],
[M,136,37,5172,136,46,5181],
[M,136,37,5172,136,70,5205],
[M,136,8,5143,136,71,5206],
[M,136,73,5208,136,83,5218],
[M,136,6,5141,136,84,5219],
[M,133,4,4945,137,7,5227],
[M,141,6,5444,141,15,5453],
[M,141,36,5474,141,46,5484],
[M,141,75,5513,141,85,5523],
[M,141,36,5474,141,87,5525],
[M,141,6,5444,141,88,5526],
[M,141,67,5505,141,86,5524],
[M,138,4,5233,142,7,5534],
[M,146,6,5749,146,15,5758],
[M,146,37,5780,146,47,5790],
[M,146,37,5780,146,72,5815],
[M,146,74,5817,146,84,5827],
[M,146,6,5749,146,86,5829],
[M,146,35,5778,146,85,5828],
[M,143,4,5540,147,7,5837],
[M,151,8,6058,151,17,6067],
[M,151,39,6089,151,49,6099],
[M,151,39,6089,151,76,6126],
[M,151,8,6058,151,77,6127],
[M,151,79,6129,151,89,6139],
[M,151,6,6056,151,90,6140],
[M,148,4,5843,152,7,6148],
[M,153,28,6178,153,37,6187],
[M,153,28,6178,153,45,6195],
[M,153,48,6198,153,58,6208],
[M,153,48,6198,153,66,6216],
[M,153,24,6174,153,66,6216],
[M,153,24,6174,153,45,6195],
[M,153,4,6154,153,70,6220],
[M,155,8,6255,155,18,6265],
[M,155,6,6253,155,19,6266],
[M,155,24,6271,155,34,6281],
[M,155,24,6271,155,41,6288],
[M,155,46,6293,155,55,6302],
[M,155,46,6293,155,62,6309],
[M,154,4,6226,156,7,6317],
[M,158,8,6352,158,18,6362],
[M,158,6,6350,158,19,6363],
[M,158,23,6367,158,33,6377],
[M,158,23,6367,158,40,6384],
[M,158,44,6388,158,53,6397],
[M,158,44,6388,158,60,6404],
[M,157,4,6323,159,7,6412],
[M,42,2,803,61,34,1792],
[M,63,2,1796,159,7,6412],
[M,63,30,1824,63,36,1830],
[M,63,46,1840,63,53,1847],
[M,63,64,1858,63,71,1865],
[M,63,4,1798,63,72,1866],
[M,41,0,787,172,3,6740],
[M,174,30,6772,174,57,6799],
[M,174,0,6742,174,61,6803],
[M,175,23,6827,175,34,6838],
[M,175,0,6804,175,38,6842],
[M,176,23,6866,176,34,6877],
[M,176,0,6843,176,38,6881],
[M,179,22,6966,179,35,6979],
[M,179,37,6981,179,51,6995],
[M,179,2,6946,179,70,7014],
[M,179,14,6958,179,56,7000],
[M,179,14,6958,179,52,6996],
[M,178,33,6916,178,40,6923],
[M,178,51,6934,178,58,6941],
[M,178,0,6883,180,3,7018],
[M,184,13,7085,184,19,7091],
[M,184,13,7085,184,25,7097],
[M,184,27,7099,184,33,7105],
[M,184,27,7099,184,38,7110],
[M,184,49,7121,184,56,7128],
[M,184,58,7130,184,64,7136],
[M,184,58,7130,184,70,7142],
[M,184,72,7144,184,79,7151],
[M,184,4,7076,184,81,7153],
[M,184,40,7112,184,80,7152],
[M,183,2,7054,185,5,7159],
[M,187,13,7195,187,20,7202],
[M,187,13,7195,187,26,7208],
[M,187,37,7219,187,44,7226],
[M,187,46,7228,187,52,7234],
[M,187,54,7236,187,61,7243],
[M,187,54,7236,187,66,7248],
[M,187,69,7251,187,76,7258],
[M,187,69,7251,187,82,7264],
[M,187,4,7186,187,83,7265],
[M,187,28,7210,187,67,7249],
[M,186,2,7162,188,5,7271],
[M,190,13,7306,190,19,7312],
[M,190,13,7306,190,25,7318],
[M,190,13,7306,190,31,7324],
[M,191,15,7341,191,21,7347],
[M,191,15,7341,191,27,7353],
[M,191,29,7355,191,35,7361],
[M,191,29,7355,191,40,7366],
[M,191,42,7368,191,48,7374],
[M,191,42,7368,191,54,7380],
[M,191,42,7368,191,59,7385],
[M,192,15,7403,192,22,7410],
[M,192,24,7412,192,30,7418],
[M,192,24,7412,192,36,7424],
[M,192,24,7412,192,42,7430],
[M,192,44,7432,192,51,7439],
[M,190,4,7297,192,53,7441],
[M,192,6,7394,192,52,7440],
[M,191,6,7332,191,60,7386],
[M,189,2,7274,193,5,7447],
[M,195,13,7482,195,20,7489],
[M,195,13,7482,195,25,7494],
[M,195,13,7482,195,31,7500],
[M,196,15,7517,196,22,7524],
[M,196,24,7526,196,30,7532],
[M,196,32,7534,196,39,7541],
[M,196,32,7534,196,44,7546],
[M,196,32,7534,196,49,7551],
[M,197,15,7569,197,22,7576],
[M,197,15,7569,197,28,7582],
[M,197,30,7584,197,37,7591],
[M,197,30,7584,197,42,7596],
[M,197,30,7584,197,48,7602],
[M,197,50,7604,197,57,7611],
[M,197,50,7604,197,63,7617],
[M,195,4,7473,197,65,7619],
[M,197,6,7560,197,64,7618],
[M,196,6,7508,196,50,7552],
[M,194,2,7450,198,5,7625],
[M,199,7,7633,199,16,7642],
[M,199,7,7633,199,25,7651],
[M,200,7,7659,200,17,7669],
[M,200,7,7659,200,26,7678],
[M,201,5,7684,201,26,7705],
[M,203,10,7726,203,24,7740],
[M,204,7,7749,204,16,7758],
[M,204,7,7749,204,21,7763],
[M,204,7,7749,204,30,7772],
[M,204,34,7776,204,43,7785],
[M,204,34,7776,204,49,7791],
[M,204,34,7776,204,58,7800],
[M,204,7,7749,204,58,7800],
[M,205,6,7808,205,21,7823],
[M,207,6,7840,207,22,7856],
[M,209,10,7875,209,24,7889],
[M,210,7,7898,210,17,7908],
[M,210,7,7898,210,23,7914],
[M,210,7,7898,210,32,7923],
[M,210,36,7927,210,46,7937],
[M,210,36,7927,210,51,7942],
[M,210,36,7927,210,60,7951],
[M,210,7,7898,210,60,7951],
[M,211,6,7959,211,23,7976],
[M,213,6,7993,213,22,8009],
[M,216,4,8030,216,48,8074],
[M,209,11,7876,209,18,7883],
[M,203,11,7727,203,18,7734],
[M,201,5,7684,201,21,7700],
[M,201,13,7692,201,20,7699],
[M,182,22,7042,182,29,7049],
[M,182,0,7020,218,3,8084],
[M,221,13,8133,221,22,8142],
[M,221,5,8125,221,23,8143],
[M,222,15,8160,222,25,8170],
[M,222,7,8152,222,26,8171],
[M,225,6,8200,225,16,8210],
[M,228,15,8242,228,25,8252],
[M,228,7,8234,228,26,8253],
[M,229,6,8261,229,15,8270],
[M,231,6,8287,231,22,8303],
[M,231,6,8287,231,28,8309],
[M,220,24,8110,220,31,8117],
[M,220,0,8086,234,3,8327],
[M,239,16,8425,239,55,8464],
[M,239,8,8417,239,12,8421],
[M,238,4,8391,241,7,8553],
[M,240,37,8502,240,51,8516],
[M,240,61,8526,240,76,8541],
[M,240,8,8473,240,30,8495],
[M,238,10,8397,238,17,8404],
[M,237,2,8370,242,5,8559],
[M,245,16,8638,245,53,8675],
[M,245,8,8630,245,12,8634],
[M,244,4,8604,252,7,8869],
[M,247,11,8726,247,25,8740],
[M,250,10,8781,250,78,8849],
[M,250,20,8791,250,77,8848],
[M,250,40,8811,250,76,8847],
[M,247,11,8726,247,18,8733],
[M,246,8,8684,246,35,8711],
[M,246,6,8682,251,11,8861],
[M,244,10,8610,244,17,8617],
[M,243,2,8562,253,5,8875],
[M,254,30,8906,254,39,8915],
[M,254,21,8897,254,46,8922],
[M,255,36,8960,255,45,8969],
[M,256,6,8978,256,16,8988],
[M,254,2,8878,256,18,8990],
[M,254,12,8888,256,17,8989],
[M,255,6,8930,255,46,8970],
[M,254,21,8897,254,40,8916],
[M,236,29,8358,236,36,8365],
[M,236,0,8329,257,3,8994],
[M,481,4,15185,481,21,15202],
[M,481,33,15214,481,54,15235],
[M,481,4,15185,481,55,15236],
[M,479,60,15103,479,63,15106],
[M,479,38,15081,479,41,15084],
[M,479,52,15095,479,55,15098],
[M,479,2,15045,482,5,15242],
[M,485,11,15291,485,17,15297],
[M,485,7,15287,485,25,15305],
[M,486,6,15313,486,47,15354],
[M,488,18,15383,488,32,15397],
[M,489,19,15417,489,34,15432],
[M,490,13,15446,490,32,15465],
[M,490,36,15469,490,54,15487],
[M,490,9,15442,490,55,15488],
[M,491,8,15498,491,50,15540],
[M,494,27,15646,494,65,15684],
[M,495,10,15695,495,52,15737],
[M,493,8,15561,496,11,15749],
[M,493,29,15582,493,43,15596],
[M,490,13,15446,490,54,15487],
[M,485,11,15291,485,24,15304],
[M,484,2,15247,499,5,15773],
[M,276,12,9549,276,22,9559],
[M,278,10,9593,278,15,9598],
[M,277,6,9566,290,9,9969],
[M,281,36,9697,281,44,9705],
[M,281,23,9684,281,52,9713],
[M,281,36,9697,281,51,9712],
[M,281,14,9675,281,19,9680],
[M,280,10,9646,289,13,9959],
[M,284,17,9797,284,31,9811],
[M,285,29,9842,285,37,9850],
[M,285,16,9829,285,41,9854],
[M,285,29,9842,285,40,9853],
[M,287,30,9905,287,38,9913],
[M,287,16,9891,287,52,9927],
[M,287,30,9905,287,51,9926],
[M,287,39,9914,287,50,9925],
[M,283,26,9770,283,35,9779],
[M,283,14,9758,283,35,9779],
[M,282,14,9728,282,26,9740],
[M,282,12,9726,288,17,9945],
[M,280,16,9652,280,20,9656],
[M,279,10,9622,279,20,9632],
[M,279,8,9620,289,13,9959],
[M,277,12,9572,277,16,9576],
[M,275,4,9518,291,7,9977],
[M,294,6,10047,294,16,10057],
[M,295,13,10093,295,22,10102],
[M,295,24,10104,295,38,10118],
[M,296,16,10135,296,43,10162],
[M,296,16,10135,296,37,10156],
[M,296,16,10135,296,30,10149],
[M,294,23,10064,298,11,10188],
[M,294,6,10047,298,16,10193],
[M,293,6,10030,299,9,10205],
[M,293,6,10030,298,16,10193],
[M,292,4,9983,300,7,10213],
[M,303,6,10284,303,16,10294],
[M,304,13,10330,304,22,10339],
[M,304,24,10341,304,36,10353],
[M,305,16,10370,305,41,10395],
[M,305,16,10370,305,35,10389],
[M,305,16,10370,305,28,10382],
[M,303,23,10301,307,11,10421],
[M,303,6,10284,307,16,10426],
[M,302,6,10262,308,9,10438],
[M,302,6,10262,307,16,10426],
[M,301,4,10219,309,7,10446],
[M,310,55,10503,310,69,10517],
[M,310,74,10522,310,85,10533],
[M,310,55,10503,310,86,10534],
[M,310,26,10474,310,87,10535],
[M,310,4,10452,310,91,10539],
[M,313,20,10622,313,30,10632],
[M,313,6,10608,313,31,10633],
[M,312,27,10569,312,44,10586],
[M,312,4,10546,314,7,10641],
[M,318,6,10752,318,16,10762],
[M,318,6,10752,318,29,10775],
[M,316,40,10684,316,47,10691],
[M,316,4,10648,319,7,10783],
[M,323,10,10907,323,20,10917],
[M,323,10,10907,323,33,10930],
[M,323,9,10906,323,34,10931],
[M,326,8,10966,326,16,10974],
[M,326,28,10986,326,38,10996],
[M,326,8,10966,326,40,10998],
[M,326,17,10975,326,39,10997],
[M,321,37,10823,321,40,10826],
[M,321,4,10790,328,7,11016],
[M,332,6,11132,332,14,11140],
[M,332,15,11141,332,25,11151],
[M,332,15,11141,332,38,11164],
[M,330,40,11059,330,43,11062],
[M,332,6,11132,332,39,11165],
[M,330,4,11023,333,7,11173],
[M,337,6,11274,337,16,11284],
[M,335,28,11204,335,38,11214],
[M,335,4,11180,338,7,11292],
[M,343,8,11446,343,19,11457],
[M,342,17,11424,344,9,11467],
[M,342,6,11413,344,16,11474],
[M,340,47,11342,340,50,11345],
[M,340,25,11320,340,28,11323],
[M,340,39,11334,340,42,11337],
[M,340,4,11299,345,7,11482],
[M,350,11,11692,350,29,11710],
[M,353,10,11752,353,28,11770],
[M,349,18,11626,355,9,11792],
[M,349,38,11646,349,48,11656],
[M,349,60,11668,349,70,11678],
[M,356,6,11799,356,14,11807],
[M,347,51,11536,347,54,11539],
[M,356,6,11799,356,25,11818],
[M,347,29,11514,347,32,11517],
[M,347,43,11528,347,46,11531],
[M,347,4,11489,357,7,11826],
[M,361,15,11989,361,27,12001],
[M,361,6,11980,361,28,12002],
[M,359,50,11879,359,57,11886],
[M,359,28,11857,359,31,11860],
[M,359,42,11871,359,45,11874],
[M,359,4,11833,362,7,12010],
[M,367,11,12223,367,29,12241],
[M,368,10,12253,368,28,12271],
[M,366,18,12157,372,9,12323],
[M,366,38,12177,366,48,12187],
[M,366,60,12199,366,70,12209],
[M,373,6,12330,373,14,12338],
[M,364,52,12069,364,55,12072],
[M,373,6,12330,373,25,12349],
[M,364,30,12047,364,33,12050],
[M,364,44,12061,364,47,12064],
[M,364,4,12021,374,7,12357],
[M,377,6,12406,377,16,12416],
[M,377,6,12406,377,25,12425],
[M,376,32,12392,376,38,12398],
[M,376,24,12384,376,27,12387],
[M,376,4,12364,378,7,12433],
[M,380,36,12472,380,46,12482],
[M,380,27,12463,380,47,12483],
[M,380,4,12440,380,51,12487],
[M,383,6,12532,383,16,12542],
[M,383,6,12532,383,23,12549],
[M,382,27,12517,382,34,12524],
[M,382,4,12494,384,7,12557],
[M,387,6,12602,387,16,12612],
[M,387,6,12602,387,23,12619],
[M,386,27,12587,386,34,12594],
[M,386,4,12564,388,7,12627],
[M,392,10,12703,392,20,12713],
[M,394,10,12748,394,14,12752],
[M,393,6,12720,397,9,12853],
[M,396,23,12821,396,31,12829],
[M,396,32,12830,396,43,12841],
[M,396,10,12808,396,45,12843],
[M,396,23,12821,396,44,12842],
[M,395,10,12776,395,28,12794],
[M,393,12,12726,393,19,12733],
[M,391,4,12674,398,7,12861],
[M,401,6,12936,401,16,12946],
[M,402,13,12981,402,22,12990],
[M,402,24,12992,402,38,13006],
[M,403,16,13023,403,43,13050],
[M,403,29,13036,403,43,13050],
[M,403,16,13023,403,26,13033],
[M,401,22,12952,405,11,13076],
[M,401,6,12936,405,16,13081],
[M,400,6,12914,406,9,13093],
[M,400,6,12914,405,16,13081],
[M,399,4,12867,407,7,13101],
[M,410,6,13172,410,16,13182],
[M,411,13,13217,411,22,13226],
[M,411,24,13228,411,36,13240],
[M,412,16,13257,412,41,13282],
[M,412,29,13270,412,41,13282],
[M,412,16,13257,412,26,13267],
[M,410,22,13188,414,11,13308],
[M,410,6,13172,414,16,13313],
[M,409,6,13150,415,9,13325],
[M,409,6,13150,414,16,13313],
[M,408,4,13107,416,7,13333],
[M,417,55,13390,417,69,13404],
[M,417,74,13409,417,85,13420],
[M,417,55,13390,417,86,13421],
[M,417,26,13361,417,87,13422],
[M,417,4,13339,417,91,13426],
[M,420,25,13509,420,35,13519],
[M,420,6,13490,420,36,13520],
[M,419,27,13456,419,39,13468],
[M,419,4,13433,421,7,13528],
[M,425,6,13639,425,16,13649],
[M,425,6,13639,425,31,13664],
[M,423,40,13571,423,47,13578],
[M,423,4,13535,426,7,13672],
[M,430,6,13792,430,14,13800],
[M,430,15,13801,430,25,13811],
[M,430,15,13801,430,38,13824],
[M,428,37,13712,428,40,13715],
[M,430,6,13792,430,39,13825],
[M,428,4,13679,431,7,13833],
[M,435,6,13949,435,14,13957],
[M,435,15,13958,435,25,13968],
[M,435,15,13958,435,38,13981],
[M,433,40,13876,433,43,13879],
[M,435,6,13949,435,39,13982],
[M,433,4,13840,436,7,13990],
[M,440,6,14091,440,16,14101],
[M,440,6,14091,440,26,14111],
[M,438,28,14021,438,38,14031],
[M,438,4,13997,441,7,14119],
[M,445,6,14219,445,20,14233],
[M,445,6,14219,445,33,14246],
[M,443,4,14126,446,7,14254],
[M,450,6,14365,450,24,14383],
[M,450,6,14365,450,37,14396],
[M,448,4,14261,451,7,14404],
[M,455,15,14567,455,27,14579],
[M,455,6,14558,455,28,14580],
[M,453,50,14457,453,57,14464],
[M,453,28,14435,453,31,14438],
[M,453,42,14449,453,45,14452],
[M,453,4,14411,456,7,14588],
[M,460,6,14719,460,25,14738],
[M,458,52,14643,458,55,14646],
[M,460,6,14719,460,38,14751],
[M,458,30,14621,458,33,14624],
[M,458,44,14635,458,47,14638],
[M,458,4,14595,461,7,14759],
[M,464,6,14808,464,16,14818],
[M,464,6,14808,464,24,14826],
[M,463,32,14794,463,38,14800],
[M,463,24,14786,463,27,14789],
[M,463,4,14766,465,7,14834],
[M,467,35,14872,467,45,14882],
[M,467,27,14864,467,46,14883],
[M,467,4,14841,467,50,14887],
[M,470,6,14932,470,16,14942],
[M,470,6,14932,470,23,14949],
[M,469,27,14917,469,34,14924],
[M,469,4,14894,471,7,14957],
[M,474,6,15002,474,16,15012],
[M,474,6,15002,474,23,15019],
[M,473,27,14987,473,34,14994],
[M,473,4,14964,475,7,15027],
[M,274,2,9476,388,7,12627],
[M,274,22,9496,274,32,9506],
[M,274,4,9478,274,33,9507],
[M,390,2,12635,475,7,15027],
[M,390,22,12655,390,29,12662],
[M,390,4,12637,390,30,12663],
[M,273,0,9464,500,3,15777],
[M,504,25,15848,504,37,15860],
[M,504,6,15829,504,21,15844],
[M,503,2,15809,506,5,15907],
[M,505,25,15886,505,40,15901],
[M,505,6,15867,505,21,15882],
[M,503,8,15815,503,11,15818],
[M,502,0,15779,507,3,15911],
[M,516,8,16286,516,22,16300],
[M,518,7,16325,518,13,16331],
[M,519,12,16356,519,26,16370],
[M,522,13,16438,522,23,16448],
[M,523,14,16463,523,23,16472],
[M,524,19,16492,524,32,16505],
[M,524,6,16479,524,77,16550],
[M,524,44,16517,524,76,16549],
[M,524,51,16524,524,75,16548],
[M,524,63,16536,524,74,16547],
[M,524,64,16537,524,69,16542],
[M,524,19,16492,524,36,16509],
[M,521,13,16400,521,37,16424],
[M,521,20,16407,521,36,16423],
[M,521,30,16417,521,35,16422],
[M,517,2,16303,526,5,16564],
[M,527,2,16567,527,13,16578],
[M,509,0,15913,536,3,16973],
[M,540,5,17102,540,17,17114],
[M,541,10,17129,541,22,17141],
[M,542,10,17156,542,18,17164],
[M,542,21,17167,542,29,17175],
[M,542,10,17156,542,29,17175],
[M,542,37,17183,542,45,17191],
[M,542,61,17207,542,68,17214],
[M,542,32,17178,542,74,17220],
[M,542,47,17193,542,73,17219],
[M,543,10,17231,543,18,17239],
[M,543,22,17243,543,30,17251],
[M,543,10,17231,543,30,17251],
[M,543,46,17267,543,53,17274],
[M,543,32,17253,543,58,17279],
[M,544,37,17317,544,45,17325],
[M,544,65,17345,544,72,17352],
[M,544,32,17312,544,74,17354],
[M,544,47,17327,544,73,17353],
[M,538,0,16975,548,3,17455],
[M,550,30,17487,550,33,17490],
[M,554,2,17616,554,44,17658],
[M,554,11,17625,554,43,17657],
[M,553,14,17580,553,47,17613],
[M,552,13,17542,552,36,17565],
[M,551,13,17505,551,36,17528],
[M,550,0,17457,555,3,17662],
[M,559,5,17783,559,17,17795],
[M,559,21,17799,559,33,17811],
[M,559,5,17783,559,33,17811],
[M,560,10,17829,560,18,17837],
[M,560,21,17840,560,29,17848],
[M,560,10,17829,560,29,17848],
[M,560,48,17867,560,55,17874],
[M,560,32,17851,560,60,17879],
[M,561,10,17890,561,18,17898],
[M,561,22,17902,561,30,17910],
[M,561,10,17890,561,30,17910],
[M,561,37,17917,561,45,17925],
[M,561,63,17943,561,70,17950],
[M,561,72,17952,561,79,17959],
[M,561,32,17912,561,81,17961],
[M,561,47,17927,561,80,17960],
[M,562,52,18014,562,59,18021],
[M,562,32,17994,562,60,18022],
[M,557,0,17664,566,3,18113],
[M,568,34,18149,568,37,18152],
[M,572,2,18280,572,44,18322],
[M,572,11,18289,572,43,18321],
[M,571,14,18242,571,49,18277],
[M,570,13,18204,570,36,18227],
[M,569,13,18167,569,36,18190],
[M,568,0,18115,573,3,18326],
[M,577,5,18451,577,17,18463],
[M,577,21,18467,577,33,18479],
[M,577,5,18451,577,33,18479],
[M,578,10,18494,578,18,18502],
[M,578,22,18506,578,30,18514],
[M,578,10,18494,578,30,18514],
[M,578,46,18530,578,53,18537],
[M,578,55,18539,578,62,18546],
[M,578,32,18516,578,63,18547],
[M,579,10,18558,579,18,18566],
[M,579,21,18569,579,29,18577],
[M,579,10,18558,579,29,18577],
[M,579,37,18585,579,45,18593],
[M,579,61,18609,579,68,18616],
[M,579,32,18580,579,74,18622],
[M,579,47,18595,579,73,18621],
[M,580,50,18673,580,57,18680],
[M,580,32,18655,580,58,18681],
[M,575,0,18328,584,3,18770],
[M,586,35,18807,586,38,18810],
[M,590,2,18936,590,44,18978],
[M,590,11,18945,590,43,18977],
[M,589,14,18900,589,47,18933],
[M,588,13,18862,588,36,18885],
[M,587,13,18825,587,36,18848],
[M,586,0,18772,591,3,18982],
[M,594,2,19023,594,10,19031],
[M,593,28,19012,593,35,19019],
[M,593,20,19004,593,23,19007],
[M,593,0,18984,595,3,19035],
[M,598,2,19076,598,10,19084],
[M,597,28,19065,597,35,19072],
[M,597,20,19057,597,23,19060],
[M,597,0,19037,599,3,19088],
[M,602,2,19125,602,17,19140],
[M,601,27,19117,601,30,19120],
[M,601,0,19090,603,3,19144],
[M,608,4,19296,608,15,19307],
[M,607,2,19244,609,5,19313],
[M,605,55,19201,605,58,19204],
[M,605,23,19169,605,33,19179],
[M,605,47,19193,605,50,19196],
[M,605,0,19146,610,3,19317],
[M,612,43,19362,612,46,19365],
[M,614,2,19416,614,35,19449],
[M,614,19,19433,614,34,19448],
[M,612,28,19347,612,38,19357],
[M,612,0,19319,615,3,19453],
[M,617,43,19498,617,46,19501],
[M,619,2,19552,619,34,19584],
[M,619,19,19569,619,33,19583],
[M,617,28,19483,617,38,19493],
[M,617,0,19455,620,3,19588],
[M,624,4,19679,624,20,19695],
[M,623,2,19629,625,5,19701],
[M,622,24,19614,622,34,19624],
[M,622,0,19590,626,3,19705],
[M,630,4,19827,630,15,19838],
[M,629,2,19754,631,5,19844],
[M,628,40,19747,628,43,19750],
[M,629,29,19781,629,44,19796],
[M,628,27,19734,628,35,19742],
[M,628,0,19707,632,3,19848],
[M,636,4,19965,636,17,19978],
[M,635,9,19904,637,5,19984],
[M,634,40,19890,634,43,19893],
[M,638,2,19987,638,16,20001],
[M,634,27,19877,634,35,19885],
[M,634,0,19850,639,3,20005],
[M,645,5,20098,645,11,20104],
[M,645,13,20106,645,27,20120],
[M,646,8,20129,646,31,20152],
[M,646,16,20137,646,30,20151],
[M,644,0,20073,648,3,20162],
[M,650,10,20196,650,16,20202],
[M,650,18,20204,650,32,20218],
[M,651,10,20229,651,16,20235],
[M,651,18,20237,651,32,20251],
[M,652,18,20270,652,41,20293],
[M,652,26,20278,652,40,20292],
[M,649,0,20163,654,3,20303],
[M,656,10,20340,656,16,20346],
[M,656,18,20348,656,35,20365],
[M,657,10,20376,657,16,20382],
[M,657,18,20384,657,35,20401],
[M,658,10,20412,658,16,20418],
[M,658,18,20420,658,35,20437],
[M,659,18,20456,659,44,20482],
[M,659,26,20464,659,43,20481],
[M,655,0,20304,661,3,20492],
[M,663,10,20532,663,16,20538],
[M,663,18,20540,663,38,20560],
[M,664,10,20571,664,16,20577],
[M,664,18,20579,664,38,20599],
[M,665,10,20610,665,16,20616],
[M,665,18,20618,665,38,20638],
[M,666,10,20649,666,16,20655],
[M,666,18,20657,666,38,20677],
[M,667,18,20696,667,47,20725],
[M,667,26,20704,667,46,20724],
[M,662,0,20493,669,3,20735],
[M,673,9,20790,673,34,20815],
[M,674,17,20834,674,41,20858],
[M,674,26,20843,674,40,20857],
[M,674,9,20826,674,45,20862],
[M,675,20,20884,675,44,20908],
[M,675,29,20893,675,43,20907],
[M,675,9,20873,675,48,20912],
[M,676,23,20937,676,50,20964],
[M,676,32,20946,676,49,20963],
[M,676,9,20923,676,54,20968],
[M,677,26,20996,677,56,21026],
[M,677,35,21005,677,55,21025],
[M,677,9,20979,677,60,21030],
[M,678,29,21061,678,62,21094],
[M,678,38,21070,678,61,21093],
[M,678,9,21041,678,66,21098],
[M,683,9,21155,683,34,21180],
[M,684,17,21199,684,38,21220],
[M,684,9,21191,684,42,21224],
[M,685,20,21246,685,41,21267],
[M,685,20,21246,685,48,21274],
[M,685,9,21235,685,52,21278],
[M,686,23,21303,686,44,21324],
[M,686,23,21303,686,51,21331],
[M,686,23,21303,686,58,21338],
[M,686,9,21289,686,62,21342],
[M,687,26,21370,687,47,21391],
[M,687,26,21370,687,54,21398],
[M,687,26,21370,687,61,21405],
[M,687,26,21370,687,68,21412],
[M,687,9,21353,687,72,21416],
[M,688,29,21447,688,50,21468],
[M,688,29,21447,688,57,21475],
[M,688,29,21447,688,64,21482],
[M,688,29,21447,688,71,21489],
[M,688,29,21447,688,78,21496],
[M,688,9,21427,688,82,21500],
["dummy location"],
[M,642,17,20057,642,31,20071],
[M,641,17,20024,641,32,20039],
[M,35,12,714,35,21,723],
[M,28,12,587,28,22,597],
[M,3,0,21,689,1,21502]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var raw$array$fold1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raw-array-fold");
var $type$RawArray1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["RawArray"];
var $type$Boolean9 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
var _lessthan10 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_lessthan");
var num$ceiling14 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-ceiling");
var _minus9 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_minus");
var _divide15 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_divide");
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var num$floor2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-floor");
var _lessequal3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_lessequal");
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var random4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"random");
var not4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"not");
var raise1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raise");
var _greaterequal4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_greaterequal");
var num$abs5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-abs");
var num$max13 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-max");
var arrays6 = R.getField($arrays32,"values");
var equality7 = R.getField($equality30,"values");
var error8 = R.getField($error15,"values");
var lists18 = R.getField($lists19,"values");
var option19 = R.getField($option34,"values");
var pick20 = R.getField($pick35,"values");
var VS21 = R.getField($VS19,"values");
var arrays22 = R.getField($arrays32,"types");
var equality23 = R.getField($equality30,"types");
var error24 = R.getField($error15,"types");
var lists27 = R.getField($lists19,"types");
var option28 = R.getField($option34,"types");
var pick29 = R.getField($pick35,"types");
var VS30 = R.getField($VS19,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$arrays32);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$equality30);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$error15);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import33);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists19);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$option34);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$pick35);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS19);
var $toplevel37 = function($$resumer101) {
var $step36 = 0;
var $ans39 = D;
var $al40 = L[837];
try {
if(R.isActivationRecord($$resumer101)) {
$step36 = $$resumer101.step;
$al40 = $$resumer101.from;
$ans39 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
AVLTree101 = $$resumer101.vars[0];
Set1115 = $$resumer101.vars[1];
List1179 = $$resumer101.vars[2];
List2253 = $$resumer101.vars[3];
empty122 = $$resumer101.vars[4];
link70 = $$resumer101.vars[5];
is$empty1387 = $$resumer101.vars[6];
fold1148 = $$resumer101.vars[7];
Pick2211 = $$resumer101.vars[8];
pick$none1159 = $$resumer101.vars[9];
pick$some1163 = $$resumer101.vars[10];
is$AVLTree60 = $$resumer101.vars[11];
is$leaf781 = $$resumer101.vars[12];
leaf92 = $$resumer101.vars[13];
is$branch786 = $$resumer101.vars[14];
branch789 = $$resumer101.vars[15];
tree$fold803 = $$resumer101.vars[16];
tree$all815 = $$resumer101.vars[17];
tree$any825 = $$resumer101.vars[18];
mkbranch91 = $$resumer101.vars[19];
rebalance293 = $$resumer101.vars[20];
remove$root354 = $$resumer101.vars[21];
swap$next$lowest1035 = $$resumer101.vars[22];
is$Set1124 = $$resumer101.vars[23];
is$list$set1661 = $$resumer101.vars[24];
list$set1162 = $$resumer101.vars[25];
is$tree$set1666 = $$resumer101.vars[26];
tree$set1415 = $$resumer101.vars[27];
set$to$sorted$elems1683 = $$resumer101.vars[28];
elems$to$balanced$avl1712 = $$resumer101.vars[29];
merge$no$dups1723 = $$resumer101.vars[30];
tree$set$union1536 = $$resumer101.vars[31];
merge$only$dups1757 = $$resumer101.vars[32];
tree$set$intersect1545 = $$resumer101.vars[33];
merge$drop$l21793 = $$resumer101.vars[34];
tree$set$difference1562 = $$resumer101.vars[35];
set$all1833 = $$resumer101.vars[36];
set$any1844 = $$resumer101.vars[37];
set$fold1857 = $$resumer101.vars[38];
list$to$set1879 = $$resumer101.vars[39];
list$to$list$set1890 = $$resumer101.vars[40];
list$to$tree$set1902 = $$resumer101.vars[41];
list$to$tree1920 = $$resumer101.vars[42];
arr$to$list$set1940 = $$resumer101.vars[43];
arr$to$tree$set1960 = $$resumer101.vars[44];
empty$list$set2035 = $$resumer101.vars[45];
empty$tree$set2120 = $$resumer101.vars[46];
list$set$maker2200 = $$resumer101.vars[47];
tree$set$maker2201 = $$resumer101.vars[48];
defined_value2215 = $$resumer101.vars[49];
defined_value2216 = $$resumer101.vars[50];
defined_value2217 = $$resumer101.vars[51];
defined_value2218 = $$resumer101.vars[52];
defined_value2219 = $$resumer101.vars[53];
defined_value2220 = $$resumer101.vars[54];
defined_value2221 = $$resumer101.vars[55];
defined_value2222 = $$resumer101.vars[56];
defined_value2223 = $$resumer101.vars[57];
defined_value2224 = $$resumer101.vars[58];
defined_value2225 = $$resumer101.vars[59];
defined_value2226 = $$resumer101.vars[60];
defined_value2227 = $$resumer101.vars[61];
defined_value2228 = $$resumer101.vars[62];
defined_value2229 = $$resumer101.vars[63];
defined_value2230 = $$resumer101.vars[64];
defined_value2231 = $$resumer101.vars[65];
defined_value2232 = $$resumer101.vars[66];
defined_value2233 = $$resumer101.vars[67];
defined_value2234 = $$resumer101.vars[68];
defined_value2235 = $$resumer101.vars[69];
defined_value2236 = $$resumer101.vars[70];
defined_value2237 = $$resumer101.vars[71];
defined_value2238 = $$resumer101.vars[72];
defined_value2239 = $$resumer101.vars[73];
defined_value2240 = $$resumer101.vars[74];
defined_value2241 = $$resumer101.vars[75];
defined_value2242 = $$resumer101.vars[76];
defined_value2243 = $$resumer101.vars[77];
defined_value2244 = $$resumer101.vars[78];
defined_value2245 = $$resumer101.vars[79];
defined_value2246 = $$resumer101.vars[80];
defined_value2247 = $$resumer101.vars[81];
defined_value2248 = $$resumer101.vars[82];
defined_value2249 = $$resumer101.vars[83];
defined_value2250 = $$resumer101.vars[84];
defined_value2251 = $$resumer101.vars[85];
defined_value2252 = $$resumer101.vars[86];
answer2213 = $$resumer101.vars[87];
provides2212 = $$resumer101.vars[88];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step36) {
case 0: var AVLTree41 = R.namedBrander("AVLTree",L[214]);
var AVLTree101 = R.makeBranderAnn(AVLTree41,"AVLTree");
var Set42 = R.namedBrander("Set",L[616]);
var Set1115 = R.makeBranderAnn(Set42,"Set");
var List1179 = R.getDotAnn(L[836],"lists",lists27,"List");
$al40 = L[0];
var List2253 = G(lists18,"is-List",L[0]);
$al40 = L[1];
var empty122 = G(lists18,"empty",L[1]);
$al40 = L[2];
var link70 = G(lists18,"link",L[2]);
$al40 = L[3];
var is$empty1387 = G(lists18,"is-empty",L[3]);
$al40 = L[4];
var fold1148 = G(lists18,"fold",L[4]);
var Pick2211 = R.getDotAnn(L[835],"pick",pick29,"Pick");
$al40 = L[5];
var pick$none1159 = G(pick20,"pick-none",L[5]);
$al40 = L[6];
var pick$some1163 = G(pick20,"pick-some",L[6]);
var AVLTree776 = {"$var":D};
var is$AVLTree60 = {"$var":D};
var is$leaf781 = {"$var":D};
var leaf92 = {"$var":D};
var is$branch786 = {"$var":D};
var branch789 = {"$var":D};
var tree$fold803 = {"$var":D};
var tree$all815 = {"$var":D};
var tree$any825 = {"$var":D};
var mkbranch91 = {"$var":D};
var rebalance293 = {"$var":D};
var remove$root354 = {"$var":D};
var swap$next$lowest1035 = {"$var":D};
var $temp_full44 = function($self413) {
var $step43 = 0;
var $ans46 = D;
var $al47 = L[9];
try {
if(R.isActivationRecord($self413)) {
$step43 = $self413.step;
$al47 = $self413.from;
$ans46 = $self413.ans;
self413 = $self413.args[0];
ann_check_temp49 = $self413.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[9],1,$t);
}
var self413 = $self413;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step43) {
case 0: $step43 = 1;
$al47 = L[7];
$field48 = R.getColonFieldLoc(self413,"inorder",L[7]);
if(R.isMethod($field48)) {
$ans46 = $field48.full_meth(self413);
} else {
if(!(R.isFunction($field48))) {
R.ffi.throwNonFunApp(L[7],$field48);
}
$ans46 = $field48.app();
}
break;
case 1: var ann_check_temp49 = $ans46;
$step43 = 2;
$al47 = L[8];
R._checkAnn(L[8],R.getDotAnn(L[8],"lists",lists27,"List"),ann_check_temp49);
break;
case 2: $step43 = 3;
$ans46 = ann_check_temp49;
break;
case 3: ++R.GAS;
return $ans46;
default: throw "No case numbered " + $step43 + " in $temp_full44";
}
}
} catch($e50) {
if(R.isCont($e50) && ($step43 !== 3)) {
$e50.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al47,$temp_full44,$step43,[self413],[ann_check_temp49]);
}
if(R.isPyretException($e50)) {
$e50.pyretStack.push($al47);
}
throw $e50;
}
};
var anf_shared718 = R.makeMethod0($temp_full44,"to-list");
var $temp_full52 = function($self53,$other54,$eq55) {
var $step51 = 0;
var $ans58 = D;
var $al59 = L[17];
try {
if(R.isActivationRecord($self53)) {
$step51 = $self53.step;
$al59 = $self53.from;
$ans58 = $self53.ans;
self53 = $self53.args[0];
other54 = $self53.args[1];
eq55 = $self53.args[2];
anf_arg778 = $self53.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[17],3,$t);
}
var self53 = $self53;
var other54 = $other54;
var eq55 = $eq55;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step51) {
case 0: var anf_fun61 = is$AVLTree60.$var === D?U(L[10],"is-AVLTree"):is$AVLTree60.$var;
$step51 = 1;
$al59 = L[16];
if(!(R.isFunction(anf_fun61))) {
R.ffi.throwNonFunApp($al59,anf_fun61);
}
$ans58 = anf_fun61.app(other54);
break;
case 1: var anf_arg62 = $ans58;
$step51 = 2;
$al59 = L[11];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al59,not4);
}
$ans58 = not4.app(anf_arg62);
break;
case 2: var anf_arg776 = $ans58;
$al59 = L[11];
var anf_if782 = R.checkWrapBoolean(anf_arg776);
$step51 = R.isPyretTrue(anf_if782)?3:4;
break;
case 3: $step51 = 7;
$al59 = L[12];
$field63 = R.getColonFieldLoc(equality7,"NotEqual",L[12]);
if(R.isMethod($field63)) {
$ans58 = $field63.full_meth(equality7,("Non-AVLTree"),self53,other54);
} else {
if(!(R.isFunction($field63))) {
R.ffi.throwNonFunApp(L[12],$field63);
}
$ans58 = $field63.app(("Non-AVLTree"),self53,other54);
}
break;
case 4: $step51 = 5;
$al59 = L[13];
$field64 = R.getColonFieldLoc(self53,"inorder",L[13]);
if(R.isMethod($field64)) {
$ans58 = $field64.full_meth(self53);
} else {
if(!(R.isFunction($field64))) {
R.ffi.throwNonFunApp(L[13],$field64);
}
$ans58 = $field64.app();
}
break;
case 5: var anf_arg778 = $ans58;
$step51 = 6;
$al59 = L[14];
$field65 = R.getColonFieldLoc(other54,"inorder",L[14]);
if(R.isMethod($field65)) {
$ans58 = $field65.full_meth(other54);
} else {
if(!(R.isFunction($field65))) {
R.ffi.throwNonFunApp(L[14],$field65);
}
$ans58 = $field65.app();
}
break;
case 6: var anf_arg780 = $ans58;
$step51 = 7;
$al59 = L[15];
if(!(R.isFunction(eq55))) {
R.ffi.throwNonFunApp($al59,eq55);
}
$ans58 = eq55.app(anf_arg778,anf_arg780);
break;
case 7: ++R.GAS;
return $ans58;
default: throw "No case numbered " + $step51 + " in $temp_full52";
}
}
} catch($e66) {
if(R.isCont($e66) && ($step51 !== 7)) {
$e66.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al59,$temp_full52,$step51,[self53,other54,eq55],[anf_arg778]);
}
if(R.isPyretException($e66)) {
$e66.pyretStack.push($al59);
}
throw $e66;
}
};
var anf_shared719 = R.makeMethod2($temp_full52,"_equals");
var $temp_full68 = function($self69) {
var $step67 = 0;
var $ans70 = D;
var $al71 = L[19];
try {
if(R.isActivationRecord($self69)) {
$step67 = $self69.step;
$al71 = $self69.from;
$ans70 = $self69.ans;
self69 = $self69.args[0];
ann_check_temp73 = $self69.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[19],1,$t);
}
var self69 = $self69;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step67) {
case 0: var ann_check_temp73 = (0);
$step67 = 1;
$al71 = L[18];
R._checkAnn(L[18],$type$Number8,ann_check_temp73);
break;
case 1: $step67 = 2;
$ans70 = ann_check_temp73;
break;
case 2: ++R.GAS;
return $ans70;
default: throw "No case numbered " + $step67 + " in $temp_full68";
}
}
} catch($e75) {
if(R.isCont($e75) && ($step67 !== 2)) {
$e75.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al71,$temp_full68,$step67,[self69],[ann_check_temp73]);
}
if(R.isPyretException($e75)) {
$e75.pyretStack.push($al71);
}
throw $e75;
}
};
var anf_singleton_variant_member723 = R.makeMethod0($temp_full68,"height");
var $temp_full77 = function($self78,$val79) {
var $step76 = 0;
var $ans80 = D;
var $al81 = L[21];
try {
if(R.isActivationRecord($self78)) {
$step76 = $self78.step;
$al81 = $self78.from;
$ans80 = $self78.ans;
self78 = $self78.args[0];
val79 = $self78.args[1];
ann_check_temp83 = $self78.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],2,$t);
}
var self78 = $self78;
var val79 = $val79;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step76) {
case 0: var ann_check_temp83 = (false);
$step76 = 1;
$al81 = L[20];
R._checkAnn(L[20],$type$Boolean9,ann_check_temp83);
break;
case 1: $step76 = 2;
$ans80 = ann_check_temp83;
break;
case 2: ++R.GAS;
return $ans80;
default: throw "No case numbered " + $step76 + " in $temp_full77";
}
}
} catch($e84) {
if(R.isCont($e84) && ($step76 !== 2)) {
$e84.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al81,$temp_full77,$step76,[self78,val79],[ann_check_temp83]);
}
if(R.isPyretException($e84)) {
$e84.pyretStack.push($al81);
}
throw $e84;
}
};
var anf_singleton_variant_member724 = R.makeMethod1($temp_full77,"contains");
var $temp_full86 = function($self87,$val88) {
var $step85 = 0;
var $ans89 = D;
var $al90 = L[27];
try {
if(R.isActivationRecord($self87)) {
$step85 = $self87.step;
$al90 = $self87.from;
$ans89 = $self87.ans;
self87 = $self87.args[0];
val88 = $self87.args[1];
ann_check_temp100 = $self87.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[27],2,$t);
}
var self87 = $self87;
var val88 = $val88;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step85) {
case 0: var anf_fun94 = mkbranch91.$var === D?U(L[22],"mkbranch"):mkbranch91.$var;
var anf_arg796 = leaf92.$var === D?U(L[23],"leaf"):leaf92.$var;
var anf_arg99 = leaf92.$var === D?U(L[24],"leaf"):leaf92.$var;
$step85 = 1;
$al90 = L[26];
if(!(R.isFunction(anf_fun94))) {
R.ffi.throwNonFunApp($al90,anf_fun94);
}
$ans89 = anf_fun94.app(val88,anf_arg796,anf_arg99);
break;
case 1: var ann_check_temp100 = $ans89;
$step85 = 2;
$al90 = L[25];
R._checkAnn(L[25],AVLTree101,ann_check_temp100);
break;
case 2: $step85 = 3;
$ans89 = ann_check_temp100;
break;
case 3: ++R.GAS;
return $ans89;
default: throw "No case numbered " + $step85 + " in $temp_full86";
}
}
} catch($e105) {
if(R.isCont($e105) && ($step85 !== 3)) {
$e105.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al90,$temp_full86,$step85,[self87,val88],[ann_check_temp100]);
}
if(R.isPyretException($e105)) {
$e105.pyretStack.push($al90);
}
throw $e105;
}
};
var anf_singleton_variant_member725 = R.makeMethod1($temp_full86,"insert");
var $temp_full108 = function($self109,$val110) {
var $step107 = 0;
var $ans111 = D;
var $al112 = L[30];
try {
if(R.isActivationRecord($self109)) {
$step107 = $self109.step;
$al112 = $self109.from;
$ans111 = $self109.ans;
self109 = $self109.args[0];
val110 = $self109.args[1];
ann_check_temp113 = $self109.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[30],2,$t);
}
var self109 = $self109;
var val110 = $val110;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step107) {
case 0: var ann_check_temp113 = leaf92.$var === D?U(L[28],"leaf"):leaf92.$var;
$step107 = 1;
$al112 = L[29];
R._checkAnn(L[29],AVLTree101,ann_check_temp113);
break;
case 1: $step107 = 2;
$ans111 = ann_check_temp113;
break;
case 2: ++R.GAS;
return $ans111;
default: throw "No case numbered " + $step107 + " in $temp_full108";
}
}
} catch($e116) {
if(R.isCont($e116) && ($step107 !== 2)) {
$e116.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al112,$temp_full108,$step107,[self109,val110],[ann_check_temp113]);
}
if(R.isPyretException($e116)) {
$e116.pyretStack.push($al112);
}
throw $e116;
}
};
var anf_singleton_variant_member726 = R.makeMethod1($temp_full108,"remove");
var $temp_full118 = function($self119) {
var $step117 = 0;
var $ans120 = D;
var $al121 = L[32];
try {
if(R.isActivationRecord($self119)) {
$step117 = $self119.step;
$al121 = $self119.from;
$ans120 = $self119.ans;
self119 = $self119.args[0];
ann_check_temp123 = $self119.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[32],1,$t);
}
var self119 = $self119;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step117) {
case 0: var ann_check_temp123 = empty122;
$step117 = 1;
$al121 = L[31];
R._checkAnn(L[31],R.getDotAnn(L[31],"lists",lists27,"List"),ann_check_temp123);
break;
case 1: $step117 = 2;
$ans120 = ann_check_temp123;
break;
case 2: ++R.GAS;
return $ans120;
default: throw "No case numbered " + $step117 + " in $temp_full118";
}
}
} catch($e124) {
if(R.isCont($e124) && ($step117 !== 2)) {
$e124.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al121,$temp_full118,$step117,[self119],[ann_check_temp123]);
}
if(R.isPyretException($e124)) {
$e124.pyretStack.push($al121);
}
throw $e124;
}
};
var anf_singleton_variant_member727 = R.makeMethod0($temp_full118,"preorder");
var $temp_full126 = function($self127) {
var $step125 = 0;
var $ans128 = D;
var $al129 = L[34];
try {
if(R.isActivationRecord($self127)) {
$step125 = $self127.step;
$al129 = $self127.from;
$ans128 = $self127.ans;
self127 = $self127.args[0];
ann_check_temp130 = $self127.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[34],1,$t);
}
var self127 = $self127;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step125) {
case 0: var ann_check_temp130 = empty122;
$step125 = 1;
$al129 = L[33];
R._checkAnn(L[33],R.getDotAnn(L[33],"lists",lists27,"List"),ann_check_temp130);
break;
case 1: $step125 = 2;
$ans128 = ann_check_temp130;
break;
case 2: ++R.GAS;
return $ans128;
default: throw "No case numbered " + $step125 + " in $temp_full126";
}
}
} catch($e133) {
if(R.isCont($e133) && ($step125 !== 2)) {
$e133.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al129,$temp_full126,$step125,[self127],[ann_check_temp130]);
}
if(R.isPyretException($e133)) {
$e133.pyretStack.push($al129);
}
throw $e133;
}
};
var anf_singleton_variant_member728 = R.makeMethod0($temp_full126,"inorder");
var $temp_full136 = function($self137) {
var $step135 = 0;
var $ans138 = D;
var $al139 = L[36];
try {
if(R.isActivationRecord($self137)) {
$step135 = $self137.step;
$al139 = $self137.from;
$ans138 = $self137.ans;
self137 = $self137.args[0];
ann_check_temp140 = $self137.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[36],1,$t);
}
var self137 = $self137;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step135) {
case 0: var ann_check_temp140 = empty122;
$step135 = 1;
$al139 = L[35];
R._checkAnn(L[35],R.getDotAnn(L[35],"lists",lists27,"List"),ann_check_temp140);
break;
case 1: $step135 = 2;
$ans138 = ann_check_temp140;
break;
case 2: ++R.GAS;
return $ans138;
default: throw "No case numbered " + $step135 + " in $temp_full136";
}
}
} catch($e142) {
if(R.isCont($e142) && ($step135 !== 2)) {
$e142.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al139,$temp_full136,$step135,[self137],[ann_check_temp140]);
}
if(R.isPyretException($e142)) {
$e142.pyretStack.push($al139);
}
throw $e142;
}
};
var anf_singleton_variant_member729 = R.makeMethod0($temp_full136,"postorder");
var $temp_full144 = function($self145) {
var $step143 = 0;
var $ans146 = D;
var $al147 = L[38];
try {
if(R.isActivationRecord($self145)) {
$step143 = $self145.step;
$al147 = $self145.from;
$ans146 = $self145.ans;
self145 = $self145.args[0];
ann_check_temp148 = $self145.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],1,$t);
}
var self145 = $self145;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step143) {
case 0: var ann_check_temp148 = empty122;
$step143 = 1;
$al147 = L[37];
R._checkAnn(L[37],R.getDotAnn(L[37],"lists",lists27,"List"),ann_check_temp148);
break;
case 1: $step143 = 2;
$ans146 = ann_check_temp148;
break;
case 2: ++R.GAS;
return $ans146;
default: throw "No case numbered " + $step143 + " in $temp_full144";
}
}
} catch($e149) {
if(R.isCont($e149) && ($step143 !== 2)) {
$e149.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al147,$temp_full144,$step143,[self145],[ann_check_temp148]);
}
if(R.isPyretException($e149)) {
$e149.pyretStack.push($al147);
}
throw $e149;
}
};
var anf_singleton_variant_member730 = R.makeMethod0($temp_full144,"revpreorder");
var $temp_full151 = function($self152) {
var $step150 = 0;
var $ans153 = D;
var $al154 = L[40];
try {
if(R.isActivationRecord($self152)) {
$step150 = $self152.step;
$al154 = $self152.from;
$ans153 = $self152.ans;
self152 = $self152.args[0];
ann_check_temp155 = $self152.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[40],1,$t);
}
var self152 = $self152;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step150) {
case 0: var ann_check_temp155 = empty122;
$step150 = 1;
$al154 = L[39];
R._checkAnn(L[39],R.getDotAnn(L[39],"lists",lists27,"List"),ann_check_temp155);
break;
case 1: $step150 = 2;
$ans153 = ann_check_temp155;
break;
case 2: ++R.GAS;
return $ans153;
default: throw "No case numbered " + $step150 + " in $temp_full151";
}
}
} catch($e156) {
if(R.isCont($e156) && ($step150 !== 2)) {
$e156.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al154,$temp_full151,$step150,[self152],[ann_check_temp155]);
}
if(R.isPyretException($e156)) {
$e156.pyretStack.push($al154);
}
throw $e156;
}
};
var anf_singleton_variant_member731 = R.makeMethod0($temp_full151,"revinorder");
var $temp_full158 = function($self159) {
var $step157 = 0;
var $ans160 = D;
var $al161 = L[42];
try {
if(R.isActivationRecord($self159)) {
$step157 = $self159.step;
$al161 = $self159.from;
$ans160 = $self159.ans;
self159 = $self159.args[0];
ann_check_temp162 = $self159.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[42],1,$t);
}
var self159 = $self159;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step157) {
case 0: var ann_check_temp162 = empty122;
$step157 = 1;
$al161 = L[41];
R._checkAnn(L[41],R.getDotAnn(L[41],"lists",lists27,"List"),ann_check_temp162);
break;
case 1: $step157 = 2;
$ans160 = ann_check_temp162;
break;
case 2: ++R.GAS;
return $ans160;
default: throw "No case numbered " + $step157 + " in $temp_full158";
}
}
} catch($e163) {
if(R.isCont($e163) && ($step157 !== 2)) {
$e163.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al161,$temp_full158,$step157,[self159],[ann_check_temp162]);
}
if(R.isPyretException($e163)) {
$e163.pyretStack.push($al161);
}
throw $e163;
}
};
var anf_singleton_variant_member732 = R.makeMethod0($temp_full158,"revpostorder");
var $temp_full165 = function($self166,$f167,$base168) {
var $step164 = 0;
var $ans169 = D;
var $al170 = L[43];
try {
if(R.isActivationRecord($self166)) {
$step164 = $self166.step;
$al170 = $self166.from;
$ans169 = $self166.ans;
self166 = $self166.args[0];
f167 = $self166.args[1];
base168 = $self166.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[43],3,$t);
}
var self166 = $self166;
var f167 = $f167;
var base168 = $base168;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step164) {
case 0: $step164 = 1;
$ans169 = base168;
break;
case 1: ++R.GAS;
return $ans169;
default: throw "No case numbered " + $step164 + " in $temp_full165";
}
}
} catch($e172) {
if(R.isCont($e172) && ($step164 !== 1)) {
$e172.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al170,$temp_full165,$step164,[self166,f167,base168],[]);
}
if(R.isPyretException($e172)) {
$e172.pyretStack.push($al170);
}
throw $e172;
}
};
var anf_singleton_variant_member733 = R.makeMethod2($temp_full165,"fold-preorder");
var $temp_full174 = function($self175,$f176,$base177) {
var $step173 = 0;
var $ans179 = D;
var $al180 = L[44];
try {
if(R.isActivationRecord($self175)) {
$step173 = $self175.step;
$al180 = $self175.from;
$ans179 = $self175.ans;
self175 = $self175.args[0];
f176 = $self175.args[1];
base177 = $self175.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],3,$t);
}
var self175 = $self175;
var f176 = $f176;
var base177 = $base177;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step173) {
case 0: $step173 = 1;
$ans179 = base177;
break;
case 1: ++R.GAS;
return $ans179;
default: throw "No case numbered " + $step173 + " in $temp_full174";
}
}
} catch($e181) {
if(R.isCont($e181) && ($step173 !== 1)) {
$e181.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al180,$temp_full174,$step173,[self175,f176,base177],[]);
}
if(R.isPyretException($e181)) {
$e181.pyretStack.push($al180);
}
throw $e181;
}
};
var anf_singleton_variant_member734 = R.makeMethod2($temp_full174,"fold-inorder");
var $temp_full183 = function($self184,$f185,$base186) {
var $step182 = 0;
var $ans187 = D;
var $al188 = L[45];
try {
if(R.isActivationRecord($self184)) {
$step182 = $self184.step;
$al188 = $self184.from;
$ans187 = $self184.ans;
self184 = $self184.args[0];
f185 = $self184.args[1];
base186 = $self184.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[45],3,$t);
}
var self184 = $self184;
var f185 = $f185;
var base186 = $base186;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step182) {
case 0: $step182 = 1;
$ans187 = base186;
break;
case 1: ++R.GAS;
return $ans187;
default: throw "No case numbered " + $step182 + " in $temp_full183";
}
}
} catch($e189) {
if(R.isCont($e189) && ($step182 !== 1)) {
$e189.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al188,$temp_full183,$step182,[self184,f185,base186],[]);
}
if(R.isPyretException($e189)) {
$e189.pyretStack.push($al188);
}
throw $e189;
}
};
var anf_singleton_variant_member735 = R.makeMethod2($temp_full183,"fold-postorder");
var $temp_full191 = function($self192,$f193,$base194) {
var $step190 = 0;
var $ans195 = D;
var $al196 = L[46];
try {
if(R.isActivationRecord($self192)) {
$step190 = $self192.step;
$al196 = $self192.from;
$ans195 = $self192.ans;
self192 = $self192.args[0];
f193 = $self192.args[1];
base194 = $self192.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[46],3,$t);
}
var self192 = $self192;
var f193 = $f193;
var base194 = $base194;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step190) {
case 0: $step190 = 1;
$ans195 = base194;
break;
case 1: ++R.GAS;
return $ans195;
default: throw "No case numbered " + $step190 + " in $temp_full191";
}
}
} catch($e197) {
if(R.isCont($e197) && ($step190 !== 1)) {
$e197.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al196,$temp_full191,$step190,[self192,f193,base194],[]);
}
if(R.isPyretException($e197)) {
$e197.pyretStack.push($al196);
}
throw $e197;
}
};
var anf_singleton_variant_member736 = R.makeMethod2($temp_full191,"fold-revpreorder");
var $temp_full199 = function($self200,$f201,$base202) {
var $step198 = 0;
var $ans203 = D;
var $al204 = L[47];
try {
if(R.isActivationRecord($self200)) {
$step198 = $self200.step;
$al204 = $self200.from;
$ans203 = $self200.ans;
self200 = $self200.args[0];
f201 = $self200.args[1];
base202 = $self200.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[47],3,$t);
}
var self200 = $self200;
var f201 = $f201;
var base202 = $base202;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step198) {
case 0: $step198 = 1;
$ans203 = base202;
break;
case 1: ++R.GAS;
return $ans203;
default: throw "No case numbered " + $step198 + " in $temp_full199";
}
}
} catch($e207) {
if(R.isCont($e207) && ($step198 !== 1)) {
$e207.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al204,$temp_full199,$step198,[self200,f201,base202],[]);
}
if(R.isPyretException($e207)) {
$e207.pyretStack.push($al204);
}
throw $e207;
}
};
var anf_singleton_variant_member737 = R.makeMethod2($temp_full199,"fold-revinorder");
var $temp_full209 = function($self210,$f211,$base212) {
var $step208 = 0;
var $ans214 = D;
var $al215 = L[48];
try {
if(R.isActivationRecord($self210)) {
$step208 = $self210.step;
$al215 = $self210.from;
$ans214 = $self210.ans;
self210 = $self210.args[0];
f211 = $self210.args[1];
base212 = $self210.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[48],3,$t);
}
var self210 = $self210;
var f211 = $f211;
var base212 = $base212;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step208) {
case 0: $step208 = 1;
$ans214 = base212;
break;
case 1: ++R.GAS;
return $ans214;
default: throw "No case numbered " + $step208 + " in $temp_full209";
}
}
} catch($e216) {
if(R.isCont($e216) && ($step208 !== 1)) {
$e216.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al215,$temp_full209,$step208,[self210,f211,base212],[]);
}
if(R.isPyretException($e216)) {
$e216.pyretStack.push($al215);
}
throw $e216;
}
};
var anf_singleton_variant_member738 = R.makeMethod2($temp_full209,"fold-revpostorder");
var $temp_full219 = function($self220) {
var $step218 = 0;
var $ans221 = D;
var $al222 = L[49];
try {
if(R.isActivationRecord($self220)) {
$step218 = $self220.step;
$al222 = $self220.from;
$ans221 = $self220.ans;
self220 = $self220.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[49],1,$t);
}
var self220 = $self220;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step218) {
case 0: $step218 = 1;
$ans221 = (0);
break;
case 1: ++R.GAS;
return $ans221;
default: throw "No case numbered " + $step218 + " in $temp_full219";
}
}
} catch($e223) {
if(R.isCont($e223) && ($step218 !== 1)) {
$e223.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al222,$temp_full219,$step218,[self220],[]);
}
if(R.isPyretException($e223)) {
$e223.pyretStack.push($al222);
}
throw $e223;
}
};
var anf_singleton_variant_member739 = R.makeMethod0($temp_full219,"count");
var $temp_full225 = function($self226,$f227) {
var $step224 = 0;
var $ans228 = D;
var $al229 = L[50];
try {
if(R.isActivationRecord($self226)) {
$step224 = $self226.step;
$al229 = $self226.from;
$ans228 = $self226.ans;
self226 = $self226.args[0];
f227 = $self226.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],2,$t);
}
var self226 = $self226;
var f227 = $f227;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step224) {
case 0: $step224 = 1;
$ans228 = (true);
break;
case 1: ++R.GAS;
return $ans228;
default: throw "No case numbered " + $step224 + " in $temp_full225";
}
}
} catch($e232) {
if(R.isCont($e232) && ($step224 !== 1)) {
$e232.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al229,$temp_full225,$step224,[self226,f227],[]);
}
if(R.isPyretException($e232)) {
$e232.pyretStack.push($al229);
}
throw $e232;
}
};
var anf_singleton_variant_member740 = R.makeMethod1($temp_full225,"all");
var $temp_full234 = function($self146,$f147) {
var $step233 = 0;
var $ans236 = D;
var $al237 = L[51];
try {
if(R.isActivationRecord($self146)) {
$step233 = $self146.step;
$al237 = $self146.from;
$ans236 = $self146.ans;
self146 = $self146.args[0];
f147 = $self146.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[51],2,$t);
}
var self146 = $self146;
var f147 = $f147;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step233) {
case 0: $step233 = 1;
$ans236 = (false);
break;
case 1: ++R.GAS;
return $ans236;
default: throw "No case numbered " + $step233 + " in $temp_full234";
}
}
} catch($e239) {
if(R.isCont($e239) && ($step233 !== 1)) {
$e239.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al237,$temp_full234,$step233,[self146,f147],[]);
}
if(R.isPyretException($e239)) {
$e239.pyretStack.push($al237);
}
throw $e239;
}
};
var anf_singleton_variant_member741 = R.makeMethod1($temp_full234,"any");
var $temp_full241 = function($self242) {
var $step240 = 0;
var $ans244 = D;
var $al245 = L[54];
try {
if(R.isActivationRecord($self242)) {
$step240 = $self242.step;
$al245 = $self242.from;
$ans244 = $self242.ans;
self242 = $self242.args[0];
ann_check_temp246 = $self242.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[54],1,$t);
}
var self242 = $self242;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step240) {
case 0: $al245 = L[52];
var ann_check_temp246 = G(self242,"h",L[52]);
$step240 = 1;
$al245 = L[53];
R._checkAnn(L[53],$type$Number8,ann_check_temp246);
break;
case 1: $step240 = 2;
$ans244 = ann_check_temp246;
break;
case 2: ++R.GAS;
return $ans244;
default: throw "No case numbered " + $step240 + " in $temp_full241";
}
}
} catch($e248) {
if(R.isCont($e248) && ($step240 !== 2)) {
$e248.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al245,$temp_full241,$step240,[self242],[ann_check_temp246]);
}
if(R.isPyretException($e248)) {
$e248.pyretStack.push($al245);
}
throw $e248;
}
};
var anf_variant_member748 = R.makeMethod0($temp_full241,"height");
var $temp_full250 = function($self171,$val251) {
var $step249 = 0;
var $ans253 = D;
var $al254 = L[64];
try {
if(R.isActivationRecord($self171)) {
$step249 = $self171.step;
$al254 = $self171.from;
$ans253 = $self171.ans;
self171 = $self171.args[0];
val251 = $self171.args[1];
ann_check_temp271 = $self171.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[64],2,$t);
}
var self171 = $self171;
var val251 = $val251;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step249) {
case 0: $al254 = L[55];
var anf_arg258 = G(self171,"value",L[55]);
$step249 = 1;
$al254 = L[56];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al254,equal$always2);
}
$ans253 = equal$always2.app(val251,anf_arg258);
break;
case 1: var anf_arg259 = $ans253;
$al254 = L[56];
var anf_if272 = R.checkWrapBoolean(anf_arg259);
$step249 = R.isPyretTrue(anf_if272)?2:3;
break;
case 2: $step249 = 7;
$ans253 = (true);
break;
case 3: $al254 = L[57];
var anf_arg262 = G(self171,"value",L[57]);
$step249 = 4;
$al254 = L[58];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al254,_lessthan10);
}
$ans253 = _lessthan10.app(val251,anf_arg262);
break;
case 4: var anf_arg263 = $ans253;
$al254 = L[58];
var anf_if270 = R.checkWrapBoolean(anf_arg263);
$step249 = R.isPyretTrue(anf_if270)?5:6;
break;
case 5: $al254 = L[59];
var anf_method_obj264 = G(self171,"left",L[59]);
$step249 = 7;
$al254 = L[60];
$field267 = R.getColonFieldLoc(anf_method_obj264,"contains",L[60]);
if(R.isMethod($field267)) {
$ans253 = $field267.full_meth(anf_method_obj264,val251);
} else {
if(!(R.isFunction($field267))) {
R.ffi.throwNonFunApp(L[60],$field267);
}
$ans253 = $field267.app(val251);
}
break;
case 6: $al254 = L[61];
var anf_method_obj268 = G(self171,"right",L[61]);
$step249 = 7;
$al254 = L[62];
$field269 = R.getColonFieldLoc(anf_method_obj268,"contains",L[62]);
if(R.isMethod($field269)) {
$ans253 = $field269.full_meth(anf_method_obj268,val251);
} else {
if(!(R.isFunction($field269))) {
R.ffi.throwNonFunApp(L[62],$field269);
}
$ans253 = $field269.app(val251);
}
break;
case 7: var ann_check_temp271 = $ans253;
$step249 = 8;
$al254 = L[63];
R._checkAnn(L[63],$type$Boolean9,ann_check_temp271);
break;
case 8: $step249 = 9;
$ans253 = ann_check_temp271;
break;
case 9: ++R.GAS;
return $ans253;
default: throw "No case numbered " + $step249 + " in $temp_full250";
}
}
} catch($e273) {
if(R.isCont($e273) && ($step249 !== 9)) {
$e273.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al254,$temp_full250,$step249,[self171,val251],[ann_check_temp271]);
}
if(R.isPyretException($e273)) {
$e273.pyretStack.push($al254);
}
throw $e273;
}
};
var anf_variant_member749 = R.makeMethod1($temp_full250,"contains");
var $temp_full275 = function($self180,$val276) {
var $step274 = 0;
var $ans277 = D;
var $al278 = L[90];
try {
if(R.isActivationRecord($self180)) {
$step274 = $self180.step;
$al278 = $self180.from;
$ans277 = $self180.ans;
self180 = $self180.args[0];
val276 = $self180.args[1];
anf_fun310 = $self180.vars[0];
anf_fun296 = $self180.vars[1];
anf_arg297 = $self180.vars[2];
anf_fun330 = $self180.vars[3];
anf_fun316 = $self180.vars[4];
anf_arg317 = $self180.vars[5];
anf_arg318 = $self180.vars[6];
ann_check_temp333 = $self180.vars[7];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[90],2,$t);
}
var self180 = $self180;
var val276 = $val276;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step274) {
case 0: $al278 = L[65];
var anf_arg281 = G(self180,"value",L[65]);
$step274 = 1;
$al278 = L[66];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al278,equal$always2);
}
$ans277 = equal$always2.app(val276,anf_arg281);
break;
case 1: var anf_arg286 = $ans277;
$al278 = L[66];
var anf_if334 = R.checkWrapBoolean(anf_arg286);
$step274 = R.isPyretTrue(anf_if334)?2:3;
break;
case 2: var anf_fun287 = mkbranch91.$var === D?U(L[67],"mkbranch"):mkbranch91.$var;
$al278 = L[68];
var anf_arg288 = G(self180,"left",L[68]);
$al278 = L[69];
var anf_arg290 = G(self180,"right",L[69]);
$step274 = 11;
$al278 = L[70];
if(!(R.isFunction(anf_fun287))) {
R.ffi.throwNonFunApp($al278,anf_fun287);
}
$ans277 = anf_fun287.app(val276,anf_arg288,anf_arg290);
break;
case 3: $al278 = L[71];
var anf_arg291 = G(self180,"value",L[71]);
$step274 = 4;
$al278 = L[72];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al278,_lessthan10);
}
$ans277 = _lessthan10.app(val276,anf_arg291);
break;
case 4: var anf_arg292 = $ans277;
$al278 = L[72];
var anf_if332 = R.checkWrapBoolean(anf_arg292);
$step274 = R.isPyretTrue(anf_if332)?5:8;
break;
case 5: var anf_fun310 = rebalance293.$var === D?U(L[73],"rebalance"):rebalance293.$var;
var anf_fun296 = mkbranch91.$var === D?U(L[74],"mkbranch"):mkbranch91.$var;
$al278 = L[75];
var anf_arg297 = G(self180,"value",L[75]);
$al278 = L[76];
var anf_method_obj294 = G(self180,"left",L[76]);
$step274 = 6;
$al278 = L[77];
$field295 = R.getColonFieldLoc(anf_method_obj294,"insert",L[77]);
if(R.isMethod($field295)) {
$ans277 = $field295.full_meth(anf_method_obj294,val276);
} else {
if(!(R.isFunction($field295))) {
R.ffi.throwNonFunApp(L[77],$field295);
}
$ans277 = $field295.app(val276);
}
break;
case 6: var anf_arg303 = $ans277;
$al278 = L[78];
var anf_arg308 = G(self180,"right",L[78]);
$step274 = 7;
$al278 = L[80];
if(!(R.isFunction(anf_fun296))) {
R.ffi.throwNonFunApp($al278,anf_fun296);
}
$ans277 = anf_fun296.app(anf_arg297,anf_arg303,anf_arg308);
break;
case 7: var anf_arg313 = $ans277;
$step274 = 11;
$al278 = L[79];
if(!(R.isFunction(anf_fun310))) {
R.ffi.throwNonFunApp($al278,anf_fun310);
}
$ans277 = anf_fun310.app(anf_arg313);
break;
case 8: var anf_fun330 = rebalance293.$var === D?U(L[81],"rebalance"):rebalance293.$var;
var anf_fun316 = mkbranch91.$var === D?U(L[82],"mkbranch"):mkbranch91.$var;
$al278 = L[83];
var anf_arg317 = G(self180,"value",L[83]);
$al278 = L[84];
var anf_arg318 = G(self180,"left",L[84]);
$al278 = L[85];
var anf_method_obj314 = G(self180,"right",L[85]);
$step274 = 9;
$al278 = L[86];
$field315 = R.getColonFieldLoc(anf_method_obj314,"insert",L[86]);
if(R.isMethod($field315)) {
$ans277 = $field315.full_meth(anf_method_obj314,val276);
} else {
if(!(R.isFunction($field315))) {
R.ffi.throwNonFunApp(L[86],$field315);
}
$ans277 = $field315.app(val276);
}
break;
case 9: var anf_arg329 = $ans277;
$step274 = 10;
$al278 = L[88];
if(!(R.isFunction(anf_fun316))) {
R.ffi.throwNonFunApp($al278,anf_fun316);
}
$ans277 = anf_fun316.app(anf_arg317,anf_arg318,anf_arg329);
break;
case 10: var anf_arg331 = $ans277;
$step274 = 11;
$al278 = L[87];
if(!(R.isFunction(anf_fun330))) {
R.ffi.throwNonFunApp($al278,anf_fun330);
}
$ans277 = anf_fun330.app(anf_arg331);
break;
case 11: var ann_check_temp333 = $ans277;
$step274 = 12;
$al278 = L[89];
R._checkAnn(L[89],AVLTree101,ann_check_temp333);
break;
case 12: $step274 = 13;
$ans277 = ann_check_temp333;
break;
case 13: ++R.GAS;
return $ans277;
default: throw "No case numbered " + $step274 + " in $temp_full275";
}
}
} catch($e335) {
if(R.isCont($e335) && ($step274 !== 13)) {
$e335.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al278,$temp_full275,$step274,[self180,val276],[anf_fun310,anf_fun296,anf_arg297,anf_fun330,anf_fun316,anf_arg317,anf_arg318,ann_check_temp333]);
}
if(R.isPyretException($e335)) {
$e335.pyretStack.push($al278);
}
throw $e335;
}
};
var anf_variant_member750 = R.makeMethod1($temp_full275,"insert");
var $temp_full337 = function($self338,$val339) {
var $step336 = 0;
var $ans340 = D;
var $al341 = L[114];
try {
if(R.isActivationRecord($self338)) {
$step336 = $self338.step;
$al341 = $self338.from;
$ans340 = $self338.ans;
self338 = $self338.args[0];
val339 = $self338.args[1];
anf_fun373 = $self338.vars[0];
anf_fun367 = $self338.vars[1];
anf_arg369 = $self338.vars[2];
anf_fun390 = $self338.vars[3];
anf_fun379 = $self338.vars[4];
anf_arg385 = $self338.vars[5];
anf_arg388 = $self338.vars[6];
ann_check_temp393 = $self338.vars[7];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[114],2,$t);
}
var self338 = $self338;
var val339 = $val339;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step336) {
case 0: $al341 = L[91];
var anf_arg343 = G(self338,"value",L[91]);
$step336 = 1;
$al341 = L[92];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al341,equal$always2);
}
$ans340 = equal$always2.app(val339,anf_arg343);
break;
case 1: var anf_arg353 = $ans340;
$al341 = L[92];
var anf_if394 = R.checkWrapBoolean(anf_arg353);
$step336 = R.isPyretTrue(anf_if394)?2:3;
break;
case 2: var anf_fun355 = remove$root354.$var === D?U(L[93],"remove-root"):remove$root354.$var;
$step336 = 11;
$al341 = L[94];
if(!(R.isFunction(anf_fun355))) {
R.ffi.throwNonFunApp($al341,anf_fun355);
}
$ans340 = anf_fun355.app(self338);
break;
case 3: $al341 = L[95];
var anf_arg356 = G(self338,"value",L[95]);
$step336 = 4;
$al341 = L[96];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al341,_lessthan10);
}
$ans340 = _lessthan10.app(val339,anf_arg356);
break;
case 4: var anf_arg363 = $ans340;
$al341 = L[96];
var anf_if392 = R.checkWrapBoolean(anf_arg363);
$step336 = R.isPyretTrue(anf_if392)?5:8;
break;
case 5: var anf_fun373 = rebalance293.$var === D?U(L[97],"rebalance"):rebalance293.$var;
var anf_fun367 = mkbranch91.$var === D?U(L[98],"mkbranch"):mkbranch91.$var;
$al341 = L[99];
var anf_arg369 = G(self338,"value",L[99]);
$al341 = L[100];
var anf_method_obj364 = G(self338,"left",L[100]);
$step336 = 6;
$al341 = L[101];
$field366 = R.getColonFieldLoc(anf_method_obj364,"remove",L[101]);
if(R.isMethod($field366)) {
$ans340 = $field366.full_meth(anf_method_obj364,val339);
} else {
if(!(R.isFunction($field366))) {
R.ffi.throwNonFunApp(L[101],$field366);
}
$ans340 = $field366.app(val339);
}
break;
case 6: var anf_arg370 = $ans340;
$al341 = L[102];
var anf_arg371 = G(self338,"right",L[102]);
$step336 = 7;
$al341 = L[104];
if(!(R.isFunction(anf_fun367))) {
R.ffi.throwNonFunApp($al341,anf_fun367);
}
$ans340 = anf_fun367.app(anf_arg369,anf_arg370,anf_arg371);
break;
case 7: var anf_arg375 = $ans340;
$step336 = 11;
$al341 = L[103];
if(!(R.isFunction(anf_fun373))) {
R.ffi.throwNonFunApp($al341,anf_fun373);
}
$ans340 = anf_fun373.app(anf_arg375);
break;
case 8: var anf_fun390 = rebalance293.$var === D?U(L[105],"rebalance"):rebalance293.$var;
var anf_fun379 = mkbranch91.$var === D?U(L[106],"mkbranch"):mkbranch91.$var;
$al341 = L[107];
var anf_arg385 = G(self338,"value",L[107]);
$al341 = L[108];
var anf_arg388 = G(self338,"left",L[108]);
$al341 = L[109];
var anf_method_obj376 = G(self338,"right",L[109]);
$step336 = 9;
$al341 = L[110];
$field378 = R.getColonFieldLoc(anf_method_obj376,"remove",L[110]);
if(R.isMethod($field378)) {
$ans340 = $field378.full_meth(anf_method_obj376,val339);
} else {
if(!(R.isFunction($field378))) {
R.ffi.throwNonFunApp(L[110],$field378);
}
$ans340 = $field378.app(val339);
}
break;
case 9: var anf_arg389 = $ans340;
$step336 = 10;
$al341 = L[112];
if(!(R.isFunction(anf_fun379))) {
R.ffi.throwNonFunApp($al341,anf_fun379);
}
$ans340 = anf_fun379.app(anf_arg385,anf_arg388,anf_arg389);
break;
case 10: var anf_arg391 = $ans340;
$step336 = 11;
$al341 = L[111];
if(!(R.isFunction(anf_fun390))) {
R.ffi.throwNonFunApp($al341,anf_fun390);
}
$ans340 = anf_fun390.app(anf_arg391);
break;
case 11: var ann_check_temp393 = $ans340;
$step336 = 12;
$al341 = L[113];
R._checkAnn(L[113],AVLTree101,ann_check_temp393);
break;
case 12: $step336 = 13;
$ans340 = ann_check_temp393;
break;
case 13: ++R.GAS;
return $ans340;
default: throw "No case numbered " + $step336 + " in $temp_full337";
}
}
} catch($e395) {
if(R.isCont($e395) && ($step336 !== 13)) {
$e395.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al341,$temp_full337,$step336,[self338,val339],[anf_fun373,anf_fun367,anf_arg369,anf_fun390,anf_fun379,anf_arg385,anf_arg388,ann_check_temp393]);
}
if(R.isPyretException($e395)) {
$e395.pyretStack.push($al341);
}
throw $e395;
}
};
var anf_variant_member751 = R.makeMethod1($temp_full337,"remove");
var $temp_full397 = function($self398) {
var $step396 = 0;
var $ans399 = D;
var $al400 = L[119];
try {
if(R.isActivationRecord($self398)) {
$step396 = $self398.step;
$al400 = $self398.from;
$ans399 = $self398.ans;
self398 = $self398.args[0];
ann_check_temp414 = $self398.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[119],1,$t);
}
var self398 = $self398;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step396) {
case 0: var knil409 = {"$var":D};
var $temp_lam402 = function($l403,$x404) {
var $step401 = 0;
var $ans405 = D;
var $al406 = L[116];
try {
if(R.isActivationRecord($l403)) {
$step401 = $l403.step;
$al406 = $l403.from;
$ans405 = $l403.ans;
l403 = $l403.args[0];
x404 = $l403.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[116],2,$t);
}
var l403 = $l403;
var x404 = $x404;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step401) {
case 0: $step401 = 1;
$al406 = L[115];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al406,link70);
}
$ans405 = link70.app(x404,l403);
break;
case 1: ++R.GAS;
return $ans405;
default: throw "No case numbered " + $step401 + " in $temp_lam402";
}
}
} catch($e407) {
if(R.isCont($e407) && ($step401 !== 1)) {
$e407.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al406,$temp_lam402,$step401,[l403,x404],[]);
}
if(R.isPyretException($e407)) {
$e407.pyretStack.push($al406);
}
throw $e407;
}
};
var anf_assign408 = R.makeFunction($temp_lam402,"knil");
knil409.$var = anf_assign408;
var anf_arg412 = knil409.$var;
$step396 = 1;
$al400 = L[117];
$field413 = R.getColonFieldLoc(self398,"fold-revpreorder",L[117]);
if(R.isMethod($field413)) {
$ans399 = $field413.full_meth(self398,anf_arg412,empty122);
} else {
if(!(R.isFunction($field413))) {
R.ffi.throwNonFunApp(L[117],$field413);
}
$ans399 = $field413.app(anf_arg412,empty122);
}
break;
case 1: var ann_check_temp414 = $ans399;
$step396 = 2;
$al400 = L[118];
R._checkAnn(L[118],R.getDotAnn(L[118],"lists",lists27,"List"),ann_check_temp414);
break;
case 2: $step396 = 3;
$ans399 = ann_check_temp414;
break;
case 3: ++R.GAS;
return $ans399;
default: throw "No case numbered " + $step396 + " in $temp_full397";
}
}
} catch($e415) {
if(R.isCont($e415) && ($step396 !== 3)) {
$e415.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al400,$temp_full397,$step396,[self398],[ann_check_temp414]);
}
if(R.isPyretException($e415)) {
$e415.pyretStack.push($al400);
}
throw $e415;
}
};
var anf_variant_member752 = R.makeMethod0($temp_full397,"preorder");
var $temp_full417 = function($self418) {
var $step416 = 0;
var $ans419 = D;
var $al420 = L[124];
try {
if(R.isActivationRecord($self418)) {
$step416 = $self418.step;
$al420 = $self418.from;
$ans419 = $self418.ans;
self418 = $self418.args[0];
ann_check_temp439 = $self418.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[124],1,$t);
}
var self418 = $self418;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step416) {
case 0: var knil430 = {"$var":D};
var $temp_lam423 = function($l424,$x425) {
var $step422 = 0;
var $ans426 = D;
var $al427 = L[121];
try {
if(R.isActivationRecord($l424)) {
$step422 = $l424.step;
$al427 = $l424.from;
$ans426 = $l424.ans;
l424 = $l424.args[0];
x425 = $l424.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[121],2,$t);
}
var l424 = $l424;
var x425 = $x425;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step422) {
case 0: $step422 = 1;
$al427 = L[120];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al427,link70);
}
$ans426 = link70.app(x425,l424);
break;
case 1: ++R.GAS;
return $ans426;
default: throw "No case numbered " + $step422 + " in $temp_lam423";
}
}
} catch($e428) {
if(R.isCont($e428) && ($step422 !== 1)) {
$e428.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al427,$temp_lam423,$step422,[l424,x425],[]);
}
if(R.isPyretException($e428)) {
$e428.pyretStack.push($al427);
}
throw $e428;
}
};
var anf_assign429 = R.makeFunction($temp_lam423,"knil");
knil430.$var = anf_assign429;
var anf_arg435 = knil430.$var;
$step416 = 1;
$al420 = L[122];
$field438 = R.getColonFieldLoc(self418,"fold-revinorder",L[122]);
if(R.isMethod($field438)) {
$ans419 = $field438.full_meth(self418,anf_arg435,empty122);
} else {
if(!(R.isFunction($field438))) {
R.ffi.throwNonFunApp(L[122],$field438);
}
$ans419 = $field438.app(anf_arg435,empty122);
}
break;
case 1: var ann_check_temp439 = $ans419;
$step416 = 2;
$al420 = L[123];
R._checkAnn(L[123],R.getDotAnn(L[123],"lists",lists27,"List"),ann_check_temp439);
break;
case 2: $step416 = 3;
$ans419 = ann_check_temp439;
break;
case 3: ++R.GAS;
return $ans419;
default: throw "No case numbered " + $step416 + " in $temp_full417";
}
}
} catch($e440) {
if(R.isCont($e440) && ($step416 !== 3)) {
$e440.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al420,$temp_full417,$step416,[self418],[ann_check_temp439]);
}
if(R.isPyretException($e440)) {
$e440.pyretStack.push($al420);
}
throw $e440;
}
};
var anf_variant_member753 = R.makeMethod0($temp_full417,"inorder");
var $temp_full442 = function($self216) {
var $step441 = 0;
var $ans443 = D;
var $al444 = L[129];
try {
if(R.isActivationRecord($self216)) {
$step441 = $self216.step;
$al444 = $self216.from;
$ans443 = $self216.ans;
self216 = $self216.args[0];
ann_check_temp459 = $self216.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[129],1,$t);
}
var self216 = $self216;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step441) {
case 0: var knil453 = {"$var":D};
var $temp_lam446 = function($l447,$x448) {
var $step445 = 0;
var $ans449 = D;
var $al450 = L[126];
try {
if(R.isActivationRecord($l447)) {
$step445 = $l447.step;
$al450 = $l447.from;
$ans449 = $l447.ans;
l447 = $l447.args[0];
x448 = $l447.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[126],2,$t);
}
var l447 = $l447;
var x448 = $x448;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step445) {
case 0: $step445 = 1;
$al450 = L[125];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al450,link70);
}
$ans449 = link70.app(x448,l447);
break;
case 1: ++R.GAS;
return $ans449;
default: throw "No case numbered " + $step445 + " in $temp_lam446";
}
}
} catch($e451) {
if(R.isCont($e451) && ($step445 !== 1)) {
$e451.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al450,$temp_lam446,$step445,[l447,x448],[]);
}
if(R.isPyretException($e451)) {
$e451.pyretStack.push($al450);
}
throw $e451;
}
};
var anf_assign452 = R.makeFunction($temp_lam446,"knil");
knil453.$var = anf_assign452;
var anf_arg457 = knil453.$var;
$step441 = 1;
$al444 = L[127];
$field458 = R.getColonFieldLoc(self216,"fold-revpostorder",L[127]);
if(R.isMethod($field458)) {
$ans443 = $field458.full_meth(self216,anf_arg457,empty122);
} else {
if(!(R.isFunction($field458))) {
R.ffi.throwNonFunApp(L[127],$field458);
}
$ans443 = $field458.app(anf_arg457,empty122);
}
break;
case 1: var ann_check_temp459 = $ans443;
$step441 = 2;
$al444 = L[128];
R._checkAnn(L[128],R.getDotAnn(L[128],"lists",lists27,"List"),ann_check_temp459);
break;
case 2: $step441 = 3;
$ans443 = ann_check_temp459;
break;
case 3: ++R.GAS;
return $ans443;
default: throw "No case numbered " + $step441 + " in $temp_full442";
}
}
} catch($e460) {
if(R.isCont($e460) && ($step441 !== 3)) {
$e460.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al444,$temp_full442,$step441,[self216],[ann_check_temp459]);
}
if(R.isPyretException($e460)) {
$e460.pyretStack.push($al444);
}
throw $e460;
}
};
var anf_variant_member754 = R.makeMethod0($temp_full442,"postorder");
var $temp_full462 = function($self233) {
var $step461 = 0;
var $ans463 = D;
var $al464 = L[134];
try {
if(R.isActivationRecord($self233)) {
$step461 = $self233.step;
$al464 = $self233.from;
$ans463 = $self233.ans;
self233 = $self233.args[0];
ann_check_temp476 = $self233.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[134],1,$t);
}
var self233 = $self233;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step461) {
case 0: var knil473 = {"$var":D};
var $temp_lam466 = function($l467,$x468) {
var $step465 = 0;
var $ans469 = D;
var $al470 = L[131];
try {
if(R.isActivationRecord($l467)) {
$step465 = $l467.step;
$al470 = $l467.from;
$ans469 = $l467.ans;
l467 = $l467.args[0];
x468 = $l467.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[131],2,$t);
}
var l467 = $l467;
var x468 = $x468;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step465) {
case 0: $step465 = 1;
$al470 = L[130];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al470,link70);
}
$ans469 = link70.app(x468,l467);
break;
case 1: ++R.GAS;
return $ans469;
default: throw "No case numbered " + $step465 + " in $temp_lam466";
}
}
} catch($e471) {
if(R.isCont($e471) && ($step465 !== 1)) {
$e471.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al470,$temp_lam466,$step465,[l467,x468],[]);
}
if(R.isPyretException($e471)) {
$e471.pyretStack.push($al470);
}
throw $e471;
}
};
var anf_assign472 = R.makeFunction($temp_lam466,"knil");
knil473.$var = anf_assign472;
var anf_arg474 = knil473.$var;
$step461 = 1;
$al464 = L[132];
$field475 = R.getColonFieldLoc(self233,"fold-preorder",L[132]);
if(R.isMethod($field475)) {
$ans463 = $field475.full_meth(self233,anf_arg474,empty122);
} else {
if(!(R.isFunction($field475))) {
R.ffi.throwNonFunApp(L[132],$field475);
}
$ans463 = $field475.app(anf_arg474,empty122);
}
break;
case 1: var ann_check_temp476 = $ans463;
$step461 = 2;
$al464 = L[133];
R._checkAnn(L[133],R.getDotAnn(L[133],"lists",lists27,"List"),ann_check_temp476);
break;
case 2: $step461 = 3;
$ans463 = ann_check_temp476;
break;
case 3: ++R.GAS;
return $ans463;
default: throw "No case numbered " + $step461 + " in $temp_full462";
}
}
} catch($e477) {
if(R.isCont($e477) && ($step461 !== 3)) {
$e477.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al464,$temp_full462,$step461,[self233],[ann_check_temp476]);
}
if(R.isPyretException($e477)) {
$e477.pyretStack.push($al464);
}
throw $e477;
}
};
var anf_variant_member755 = R.makeMethod0($temp_full462,"revpreorder");
var $temp_full479 = function($self257) {
var $step478 = 0;
var $ans480 = D;
var $al481 = L[139];
try {
if(R.isActivationRecord($self257)) {
$step478 = $self257.step;
$al481 = $self257.from;
$ans480 = $self257.ans;
self257 = $self257.args[0];
ann_check_temp495 = $self257.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[139],1,$t);
}
var self257 = $self257;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step478) {
case 0: var knil492 = {"$var":D};
var $temp_lam483 = function($l484,$x485) {
var $step482 = 0;
var $ans486 = D;
var $al487 = L[136];
try {
if(R.isActivationRecord($l484)) {
$step482 = $l484.step;
$al487 = $l484.from;
$ans486 = $l484.ans;
l484 = $l484.args[0];
x485 = $l484.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[136],2,$t);
}
var l484 = $l484;
var x485 = $x485;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step482) {
case 0: $step482 = 1;
$al487 = L[135];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al487,link70);
}
$ans486 = link70.app(x485,l484);
break;
case 1: ++R.GAS;
return $ans486;
default: throw "No case numbered " + $step482 + " in $temp_lam483";
}
}
} catch($e490) {
if(R.isCont($e490) && ($step482 !== 1)) {
$e490.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al487,$temp_lam483,$step482,[l484,x485],[]);
}
if(R.isPyretException($e490)) {
$e490.pyretStack.push($al487);
}
throw $e490;
}
};
var anf_assign491 = R.makeFunction($temp_lam483,"knil");
knil492.$var = anf_assign491;
var anf_arg493 = knil492.$var;
$step478 = 1;
$al481 = L[137];
$field494 = R.getColonFieldLoc(self257,"fold-inorder",L[137]);
if(R.isMethod($field494)) {
$ans480 = $field494.full_meth(self257,anf_arg493,empty122);
} else {
if(!(R.isFunction($field494))) {
R.ffi.throwNonFunApp(L[137],$field494);
}
$ans480 = $field494.app(anf_arg493,empty122);
}
break;
case 1: var ann_check_temp495 = $ans480;
$step478 = 2;
$al481 = L[138];
R._checkAnn(L[138],R.getDotAnn(L[138],"lists",lists27,"List"),ann_check_temp495);
break;
case 2: $step478 = 3;
$ans480 = ann_check_temp495;
break;
case 3: ++R.GAS;
return $ans480;
default: throw "No case numbered " + $step478 + " in $temp_full479";
}
}
} catch($e496) {
if(R.isCont($e496) && ($step478 !== 3)) {
$e496.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al481,$temp_full479,$step478,[self257],[ann_check_temp495]);
}
if(R.isPyretException($e496)) {
$e496.pyretStack.push($al481);
}
throw $e496;
}
};
var anf_variant_member756 = R.makeMethod0($temp_full479,"revinorder");
var $temp_full499 = function($self273) {
var $step498 = 0;
var $ans500 = D;
var $al501 = L[144];
try {
if(R.isActivationRecord($self273)) {
$step498 = $self273.step;
$al501 = $self273.from;
$ans500 = $self273.ans;
self273 = $self273.args[0];
ann_check_temp520 = $self273.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[144],1,$t);
}
var self273 = $self273;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step498) {
case 0: var knil510 = {"$var":D};
var $temp_lam503 = function($l504,$x505) {
var $step502 = 0;
var $ans506 = D;
var $al507 = L[141];
try {
if(R.isActivationRecord($l504)) {
$step502 = $l504.step;
$al507 = $l504.from;
$ans506 = $l504.ans;
l504 = $l504.args[0];
x505 = $l504.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],2,$t);
}
var l504 = $l504;
var x505 = $x505;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step502) {
case 0: $step502 = 1;
$al507 = L[140];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al507,link70);
}
$ans506 = link70.app(x505,l504);
break;
case 1: ++R.GAS;
return $ans506;
default: throw "No case numbered " + $step502 + " in $temp_lam503";
}
}
} catch($e508) {
if(R.isCont($e508) && ($step502 !== 1)) {
$e508.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al507,$temp_lam503,$step502,[l504,x505],[]);
}
if(R.isPyretException($e508)) {
$e508.pyretStack.push($al507);
}
throw $e508;
}
};
var anf_assign509 = R.makeFunction($temp_lam503,"knil");
knil510.$var = anf_assign509;
var anf_arg518 = knil510.$var;
$step498 = 1;
$al501 = L[142];
$field519 = R.getColonFieldLoc(self273,"fold-postorder",L[142]);
if(R.isMethod($field519)) {
$ans500 = $field519.full_meth(self273,anf_arg518,empty122);
} else {
if(!(R.isFunction($field519))) {
R.ffi.throwNonFunApp(L[142],$field519);
}
$ans500 = $field519.app(anf_arg518,empty122);
}
break;
case 1: var ann_check_temp520 = $ans500;
$step498 = 2;
$al501 = L[143];
R._checkAnn(L[143],R.getDotAnn(L[143],"lists",lists27,"List"),ann_check_temp520);
break;
case 2: $step498 = 3;
$ans500 = ann_check_temp520;
break;
case 3: ++R.GAS;
return $ans500;
default: throw "No case numbered " + $step498 + " in $temp_full499";
}
}
} catch($e521) {
if(R.isCont($e521) && ($step498 !== 3)) {
$e521.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al501,$temp_full499,$step498,[self273],[ann_check_temp520]);
}
if(R.isPyretException($e521)) {
$e521.pyretStack.push($al501);
}
throw $e521;
}
};
var anf_variant_member757 = R.makeMethod0($temp_full499,"revpostorder");
var $temp_full523 = function($self290,$f524,$base525) {
var $step522 = 0;
var $ans527 = D;
var $al528 = L[151];
try {
if(R.isActivationRecord($self290)) {
$step522 = $self290.step;
$al528 = $self290.from;
$ans527 = $self290.ans;
self290 = $self290.args[0];
f524 = $self290.args[1];
base525 = $self290.args[2];
anf_method_obj545 = $self290.vars[0];
anf_method_obj534 = $self290.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[151],3,$t);
}
var self290 = $self290;
var f524 = $f524;
var base525 = $base525;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step522) {
case 0: $al528 = L[145];
var anf_method_obj545 = G(self290,"right",L[145]);
$al528 = L[146];
var anf_method_obj534 = G(self290,"left",L[146]);
$al528 = L[147];
var anf_arg533 = G(self290,"value",L[147]);
$step522 = 1;
$al528 = L[150];
if(!(R.isFunction(f524))) {
R.ffi.throwNonFunApp($al528,f524);
}
$ans527 = f524.app(base525,anf_arg533);
break;
case 1: var anf_arg543 = $ans527;
$step522 = 2;
$al528 = L[148];
$field544 = R.getColonFieldLoc(anf_method_obj534,"fold-preorder",L[148]);
if(R.isMethod($field544)) {
$ans527 = $field544.full_meth(anf_method_obj534,f524,anf_arg543);
} else {
if(!(R.isFunction($field544))) {
R.ffi.throwNonFunApp(L[148],$field544);
}
$ans527 = $field544.app(f524,anf_arg543);
}
break;
case 2: var anf_arg549 = $ans527;
$step522 = 3;
$al528 = L[149];
$field550 = R.getColonFieldLoc(anf_method_obj545,"fold-preorder",L[149]);
if(R.isMethod($field550)) {
$ans527 = $field550.full_meth(anf_method_obj545,f524,anf_arg549);
} else {
if(!(R.isFunction($field550))) {
R.ffi.throwNonFunApp(L[149],$field550);
}
$ans527 = $field550.app(f524,anf_arg549);
}
break;
case 3: ++R.GAS;
return $ans527;
default: throw "No case numbered " + $step522 + " in $temp_full523";
}
}
} catch($e551) {
if(R.isCont($e551) && ($step522 !== 3)) {
$e551.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al528,$temp_full523,$step522,[self290,f524,base525],[anf_method_obj545,anf_method_obj534]);
}
if(R.isPyretException($e551)) {
$e551.pyretStack.push($al528);
}
throw $e551;
}
};
var anf_variant_member758 = R.makeMethod2($temp_full523,"fold-preorder");
var $temp_full553 = function($self554,$f555,$base556) {
var $step552 = 0;
var $ans557 = D;
var $al558 = L[158];
try {
if(R.isActivationRecord($self554)) {
$step552 = $self554.step;
$al558 = $self554.from;
$ans557 = $self554.ans;
self554 = $self554.args[0];
f555 = $self554.args[1];
base556 = $self554.args[2];
anf_method_obj566 = $self554.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[158],3,$t);
}
var self554 = $self554;
var f555 = $f555;
var base556 = $base556;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step552) {
case 0: $al558 = L[152];
var anf_method_obj566 = G(self554,"right",L[152]);
$al558 = L[153];
var anf_method_obj559 = G(self554,"left",L[153]);
$step552 = 1;
$al558 = L[154];
$field560 = R.getColonFieldLoc(anf_method_obj559,"fold-inorder",L[154]);
if(R.isMethod($field560)) {
$ans557 = $field560.full_meth(anf_method_obj559,f555,base556);
} else {
if(!(R.isFunction($field560))) {
R.ffi.throwNonFunApp(L[154],$field560);
}
$ans557 = $field560.app(f555,base556);
}
break;
case 1: var anf_arg562 = $ans557;
$al558 = L[155];
var anf_arg564 = G(self554,"value",L[155]);
$step552 = 2;
$al558 = L[157];
if(!(R.isFunction(f555))) {
R.ffi.throwNonFunApp($al558,f555);
}
$ans557 = f555.app(anf_arg562,anf_arg564);
break;
case 2: var anf_arg570 = $ans557;
$step552 = 3;
$al558 = L[156];
$field571 = R.getColonFieldLoc(anf_method_obj566,"fold-inorder",L[156]);
if(R.isMethod($field571)) {
$ans557 = $field571.full_meth(anf_method_obj566,f555,anf_arg570);
} else {
if(!(R.isFunction($field571))) {
R.ffi.throwNonFunApp(L[156],$field571);
}
$ans557 = $field571.app(f555,anf_arg570);
}
break;
case 3: ++R.GAS;
return $ans557;
default: throw "No case numbered " + $step552 + " in $temp_full553";
}
}
} catch($e572) {
if(R.isCont($e572) && ($step552 !== 3)) {
$e572.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al558,$temp_full553,$step552,[self554,f555,base556],[anf_method_obj566]);
}
if(R.isPyretException($e572)) {
$e572.pyretStack.push($al558);
}
throw $e572;
}
};
var anf_variant_member759 = R.makeMethod2($temp_full553,"fold-inorder");
var $temp_full574 = function($self575,$f576,$base577) {
var $step573 = 0;
var $ans578 = D;
var $al579 = L[165];
try {
if(R.isActivationRecord($self575)) {
$step573 = $self575.step;
$al579 = $self575.from;
$ans578 = $self575.ans;
self575 = $self575.args[0];
f576 = $self575.args[1];
base577 = $self575.args[2];
anf_method_obj584 = $self575.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[165],3,$t);
}
var self575 = $self575;
var f576 = $f576;
var base577 = $base577;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step573) {
case 0: $al579 = L[159];
var anf_method_obj584 = G(self575,"right",L[159]);
$al579 = L[160];
var anf_method_obj582 = G(self575,"left",L[160]);
$step573 = 1;
$al579 = L[161];
$field583 = R.getColonFieldLoc(anf_method_obj582,"fold-postorder",L[161]);
if(R.isMethod($field583)) {
$ans578 = $field583.full_meth(anf_method_obj582,f576,base577);
} else {
if(!(R.isFunction($field583))) {
R.ffi.throwNonFunApp(L[161],$field583);
}
$ans578 = $field583.app(f576,base577);
}
break;
case 1: var anf_arg587 = $ans578;
$step573 = 2;
$al579 = L[162];
$field588 = R.getColonFieldLoc(anf_method_obj584,"fold-postorder",L[162]);
if(R.isMethod($field588)) {
$ans578 = $field588.full_meth(anf_method_obj584,f576,anf_arg587);
} else {
if(!(R.isFunction($field588))) {
R.ffi.throwNonFunApp(L[162],$field588);
}
$ans578 = $field588.app(f576,anf_arg587);
}
break;
case 2: var anf_arg589 = $ans578;
$al579 = L[163];
var anf_arg590 = G(self575,"value",L[163]);
$step573 = 3;
$al579 = L[164];
if(!(R.isFunction(f576))) {
R.ffi.throwNonFunApp($al579,f576);
}
$ans578 = f576.app(anf_arg589,anf_arg590);
break;
case 3: ++R.GAS;
return $ans578;
default: throw "No case numbered " + $step573 + " in $temp_full574";
}
}
} catch($e591) {
if(R.isCont($e591) && ($step573 !== 3)) {
$e591.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al579,$temp_full574,$step573,[self575,f576,base577],[anf_method_obj584]);
}
if(R.isPyretException($e591)) {
$e591.pyretStack.push($al579);
}
throw $e591;
}
};
var anf_variant_member760 = R.makeMethod2($temp_full574,"fold-postorder");
var $temp_full593 = function($self594,$f595,$base596) {
var $step592 = 0;
var $ans598 = D;
var $al599 = L[172];
try {
if(R.isActivationRecord($self594)) {
$step592 = $self594.step;
$al599 = $self594.from;
$ans598 = $self594.ans;
self594 = $self594.args[0];
f595 = $self594.args[1];
base596 = $self594.args[2];
anf_method_obj609 = $self594.vars[0];
anf_method_obj604 = $self594.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[172],3,$t);
}
var self594 = $self594;
var f595 = $f595;
var base596 = $base596;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step592) {
case 0: $al599 = L[166];
var anf_method_obj609 = G(self594,"left",L[166]);
$al599 = L[167];
var anf_method_obj604 = G(self594,"right",L[167]);
$al599 = L[168];
var anf_arg602 = G(self594,"value",L[168]);
$step592 = 1;
$al599 = L[171];
if(!(R.isFunction(f595))) {
R.ffi.throwNonFunApp($al599,f595);
}
$ans598 = f595.app(base596,anf_arg602);
break;
case 1: var anf_arg607 = $ans598;
$step592 = 2;
$al599 = L[169];
$field608 = R.getColonFieldLoc(anf_method_obj604,"fold-revpreorder",L[169]);
if(R.isMethod($field608)) {
$ans598 = $field608.full_meth(anf_method_obj604,f595,anf_arg607);
} else {
if(!(R.isFunction($field608))) {
R.ffi.throwNonFunApp(L[169],$field608);
}
$ans598 = $field608.app(f595,anf_arg607);
}
break;
case 2: var anf_arg610 = $ans598;
$step592 = 3;
$al599 = L[170];
$field611 = R.getColonFieldLoc(anf_method_obj609,"fold-revpreorder",L[170]);
if(R.isMethod($field611)) {
$ans598 = $field611.full_meth(anf_method_obj609,f595,anf_arg610);
} else {
if(!(R.isFunction($field611))) {
R.ffi.throwNonFunApp(L[170],$field611);
}
$ans598 = $field611.app(f595,anf_arg610);
}
break;
case 3: ++R.GAS;
return $ans598;
default: throw "No case numbered " + $step592 + " in $temp_full593";
}
}
} catch($e612) {
if(R.isCont($e612) && ($step592 !== 3)) {
$e612.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al599,$temp_full593,$step592,[self594,f595,base596],[anf_method_obj609,anf_method_obj604]);
}
if(R.isPyretException($e612)) {
$e612.pyretStack.push($al599);
}
throw $e612;
}
};
var anf_variant_member761 = R.makeMethod2($temp_full593,"fold-revpreorder");
var $temp_full614 = function($self355,$f356,$base615) {
var $step613 = 0;
var $ans616 = D;
var $al617 = L[179];
try {
if(R.isActivationRecord($self355)) {
$step613 = $self355.step;
$al617 = $self355.from;
$ans616 = $self355.ans;
self355 = $self355.args[0];
f356 = $self355.args[1];
base615 = $self355.args[2];
anf_method_obj622 = $self355.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[179],3,$t);
}
var self355 = $self355;
var f356 = $f356;
var base615 = $base615;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step613) {
case 0: $al617 = L[173];
var anf_method_obj622 = G(self355,"left",L[173]);
$al617 = L[174];
var anf_method_obj618 = G(self355,"right",L[174]);
$step613 = 1;
$al617 = L[175];
$field619 = R.getColonFieldLoc(anf_method_obj618,"fold-revinorder",L[175]);
if(R.isMethod($field619)) {
$ans616 = $field619.full_meth(anf_method_obj618,f356,base615);
} else {
if(!(R.isFunction($field619))) {
R.ffi.throwNonFunApp(L[175],$field619);
}
$ans616 = $field619.app(f356,base615);
}
break;
case 1: var anf_arg620 = $ans616;
$al617 = L[176];
var anf_arg621 = G(self355,"value",L[176]);
$step613 = 2;
$al617 = L[178];
if(!(R.isFunction(f356))) {
R.ffi.throwNonFunApp($al617,f356);
}
$ans616 = f356.app(anf_arg620,anf_arg621);
break;
case 2: var anf_arg623 = $ans616;
$step613 = 3;
$al617 = L[177];
$field624 = R.getColonFieldLoc(anf_method_obj622,"fold-revinorder",L[177]);
if(R.isMethod($field624)) {
$ans616 = $field624.full_meth(anf_method_obj622,f356,anf_arg623);
} else {
if(!(R.isFunction($field624))) {
R.ffi.throwNonFunApp(L[177],$field624);
}
$ans616 = $field624.app(f356,anf_arg623);
}
break;
case 3: ++R.GAS;
return $ans616;
default: throw "No case numbered " + $step613 + " in $temp_full614";
}
}
} catch($e625) {
if(R.isCont($e625) && ($step613 !== 3)) {
$e625.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al617,$temp_full614,$step613,[self355,f356,base615],[anf_method_obj622]);
}
if(R.isPyretException($e625)) {
$e625.pyretStack.push($al617);
}
throw $e625;
}
};
var anf_variant_member762 = R.makeMethod2($temp_full614,"fold-revinorder");
var $temp_full627 = function($self628,$f629,$base630) {
var $step626 = 0;
var $ans631 = D;
var $al632 = L[186];
try {
if(R.isActivationRecord($self628)) {
$step626 = $self628.step;
$al632 = $self628.from;
$ans631 = $self628.ans;
self628 = $self628.args[0];
f629 = $self628.args[1];
base630 = $self628.args[2];
anf_method_obj635 = $self628.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[186],3,$t);
}
var self628 = $self628;
var f629 = $f629;
var base630 = $base630;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step626) {
case 0: $al632 = L[180];
var anf_method_obj635 = G(self628,"left",L[180]);
$al632 = L[181];
var anf_method_obj633 = G(self628,"right",L[181]);
$step626 = 1;
$al632 = L[182];
$field634 = R.getColonFieldLoc(anf_method_obj633,"fold-revpostorder",L[182]);
if(R.isMethod($field634)) {
$ans631 = $field634.full_meth(anf_method_obj633,f629,base630);
} else {
if(!(R.isFunction($field634))) {
R.ffi.throwNonFunApp(L[182],$field634);
}
$ans631 = $field634.app(f629,base630);
}
break;
case 1: var anf_arg637 = $ans631;
$step626 = 2;
$al632 = L[183];
$field639 = R.getColonFieldLoc(anf_method_obj635,"fold-revpostorder",L[183]);
if(R.isMethod($field639)) {
$ans631 = $field639.full_meth(anf_method_obj635,f629,anf_arg637);
} else {
if(!(R.isFunction($field639))) {
R.ffi.throwNonFunApp(L[183],$field639);
}
$ans631 = $field639.app(f629,anf_arg637);
}
break;
case 2: var anf_arg644 = $ans631;
$al632 = L[184];
var anf_arg648 = G(self628,"value",L[184]);
$step626 = 3;
$al632 = L[185];
if(!(R.isFunction(f629))) {
R.ffi.throwNonFunApp($al632,f629);
}
$ans631 = f629.app(anf_arg644,anf_arg648);
break;
case 3: ++R.GAS;
return $ans631;
default: throw "No case numbered " + $step626 + " in $temp_full627";
}
}
} catch($e649) {
if(R.isCont($e649) && ($step626 !== 3)) {
$e649.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al632,$temp_full627,$step626,[self628,f629,base630],[anf_method_obj635]);
}
if(R.isPyretException($e649)) {
$e649.pyretStack.push($al632);
}
throw $e649;
}
};
var anf_variant_member763 = R.makeMethod2($temp_full627,"fold-revpostorder");
var $temp_full651 = function($self652) {
var $step650 = 0;
var $ans653 = D;
var $al654 = L[193];
try {
if(R.isActivationRecord($self652)) {
$step650 = $self652.step;
$al654 = $self652.from;
$ans653 = $self652.ans;
self652 = $self652.args[0];
anf_arg662 = $self652.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[193],1,$t);
}
var self652 = $self652;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step650) {
case 0: $al654 = L[187];
var anf_method_obj655 = G(self652,"left",L[187]);
$step650 = 1;
$al654 = L[188];
$field656 = R.getColonFieldLoc(anf_method_obj655,"count",L[188]);
if(R.isMethod($field656)) {
$ans653 = $field656.full_meth(anf_method_obj655);
} else {
if(!(R.isFunction($field656))) {
R.ffi.throwNonFunApp(L[188],$field656);
}
$ans653 = $field656.app();
}
break;
case 1: var anf_arg658 = $ans653;
$step650 = 2;
$al654 = L[192];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al654,_plus1);
}
$ans653 = _plus1.app((1),anf_arg658);
break;
case 2: var anf_arg662 = $ans653;
$al654 = L[189];
var anf_method_obj659 = G(self652,"right",L[189]);
$step650 = 3;
$al654 = L[190];
$field661 = R.getColonFieldLoc(anf_method_obj659,"count",L[190]);
if(R.isMethod($field661)) {
$ans653 = $field661.full_meth(anf_method_obj659);
} else {
if(!(R.isFunction($field661))) {
R.ffi.throwNonFunApp(L[190],$field661);
}
$ans653 = $field661.app();
}
break;
case 3: var anf_arg663 = $ans653;
$step650 = 4;
$al654 = L[191];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al654,_plus1);
}
$ans653 = _plus1.app(anf_arg662,anf_arg663);
break;
case 4: ++R.GAS;
return $ans653;
default: throw "No case numbered " + $step650 + " in $temp_full651";
}
}
} catch($e664) {
if(R.isCont($e664) && ($step650 !== 4)) {
$e664.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al654,$temp_full651,$step650,[self652],[anf_arg662]);
}
if(R.isPyretException($e664)) {
$e664.pyretStack.push($al654);
}
throw $e664;
}
};
var anf_variant_member764 = R.makeMethod0($temp_full651,"count");
var $temp_full666 = function($self393,$f394) {
var $step665 = 0;
var $ans667 = D;
var $al668 = L[200];
try {
if(R.isActivationRecord($self393)) {
$step665 = $self393.step;
$al668 = $self393.from;
$ans667 = $self393.ans;
self393 = $self393.args[0];
f394 = $self393.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[200],2,$t);
}
var self393 = $self393;
var f394 = $f394;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step665) {
case 0: $al668 = L[194];
var anf_arg670 = G(self393,"value",L[194]);
$step665 = 1;
$al668 = L[195];
if(!(R.isFunction(f394))) {
R.ffi.throwNonFunApp($al668,f394);
}
$ans667 = f394.app(anf_arg670);
break;
case 1: var anf_arg673 = $ans667;
$al668 = L[195];
var anf_if686 = R.checkWrapBoolean(anf_arg673);
$step665 = R.isPyretTrue(anf_if686)?2:7;
break;
case 2: $al668 = L[196];
var anf_method_obj674 = G(self393,"right",L[196]);
$step665 = 3;
$al668 = L[197];
$field676 = R.getColonFieldLoc(anf_method_obj674,"all",L[197]);
if(R.isMethod($field676)) {
$ans667 = $field676.full_meth(anf_method_obj674,f394);
} else {
if(!(R.isFunction($field676))) {
R.ffi.throwNonFunApp(L[197],$field676);
}
$ans667 = $field676.app(f394);
}
break;
case 3: var anf_arg677 = $ans667;
$al668 = L[197];
var anf_if685 = R.checkWrapBoolean(anf_arg677);
$step665 = R.isPyretTrue(anf_if685)?4:6;
break;
case 4: $al668 = L[198];
var anf_method_obj678 = G(self393,"left",L[198]);
$step665 = 5;
$al668 = L[199];
$field679 = R.getColonFieldLoc(anf_method_obj678,"all",L[199]);
if(R.isMethod($field679)) {
$ans667 = $field679.full_meth(anf_method_obj678,f394);
} else {
if(!(R.isFunction($field679))) {
R.ffi.throwNonFunApp(L[199],$field679);
}
$ans667 = $field679.app(f394);
}
break;
case 5: var anf_arg684 = $ans667;
$step665 = 8;
$al668 = L[199];
$ans667 = R.checkWrapBoolean(anf_arg684);
break;
case 6: $step665 = 8;
$ans667 = (false);
break;
case 7: $step665 = 8;
$ans667 = (false);
break;
case 8: ++R.GAS;
return $ans667;
default: throw "No case numbered " + $step665 + " in $temp_full666";
}
}
} catch($e687) {
if(R.isCont($e687) && ($step665 !== 8)) {
$e687.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al668,$temp_full666,$step665,[self393,f394],[]);
}
if(R.isPyretException($e687)) {
$e687.pyretStack.push($al668);
}
throw $e687;
}
};
var anf_variant_member765 = R.makeMethod1($temp_full666,"all");
var $temp_full689 = function($self156,$f690) {
var $step688 = 0;
var $ans691 = D;
var $al692 = L[207];
try {
if(R.isActivationRecord($self156)) {
$step688 = $self156.step;
$al692 = $self156.from;
$ans691 = $self156.ans;
self156 = $self156.args[0];
f690 = $self156.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[207],2,$t);
}
var self156 = $self156;
var f690 = $f690;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step688) {
case 0: $al692 = L[201];
var anf_arg696 = G(self156,"value",L[201]);
$step688 = 1;
$al692 = L[202];
if(!(R.isFunction(f690))) {
R.ffi.throwNonFunApp($al692,f690);
}
$ans691 = f690.app(anf_arg696);
break;
case 1: var anf_arg702 = $ans691;
$al692 = L[202];
var anf_if716 = R.checkWrapBoolean(anf_arg702);
$step688 = R.isPyretTrue(anf_if716)?2:3;
break;
case 2: $step688 = 8;
$ans691 = (true);
break;
case 3: $al692 = L[203];
var anf_method_obj703 = G(self156,"right",L[203]);
$step688 = 4;
$al692 = L[204];
$field704 = R.getColonFieldLoc(anf_method_obj703,"all",L[204]);
if(R.isMethod($field704)) {
$ans691 = $field704.full_meth(anf_method_obj703,f690);
} else {
if(!(R.isFunction($field704))) {
R.ffi.throwNonFunApp(L[204],$field704);
}
$ans691 = $field704.app(f690);
}
break;
case 4: var anf_arg705 = $ans691;
$al692 = L[204];
var anf_if715 = R.checkWrapBoolean(anf_arg705);
$step688 = R.isPyretTrue(anf_if715)?5:6;
break;
case 5: $step688 = 8;
$ans691 = (true);
break;
case 6: $al692 = L[205];
var anf_method_obj706 = G(self156,"left",L[205]);
$step688 = 7;
$al692 = L[206];
$field711 = R.getColonFieldLoc(anf_method_obj706,"all",L[206]);
if(R.isMethod($field711)) {
$ans691 = $field711.full_meth(anf_method_obj706,f690);
} else {
if(!(R.isFunction($field711))) {
R.ffi.throwNonFunApp(L[206],$field711);
}
$ans691 = $field711.app(f690);
}
break;
case 7: var anf_arg714 = $ans691;
$step688 = 8;
$al692 = L[206];
$ans691 = R.checkWrapBoolean(anf_arg714);
break;
case 8: ++R.GAS;
return $ans691;
default: throw "No case numbered " + $step688 + " in $temp_full689";
}
}
} catch($e717) {
if(R.isCont($e717) && ($step688 !== 8)) {
$e717.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al692,$temp_full689,$step688,[self156,f690],[]);
}
if(R.isPyretException($e717)) {
$e717.pyretStack.push($al692);
}
throw $e717;
}
};
var anf_variant_member766 = R.makeMethod1($temp_full689,"any");
var $leaf_getfields744 = function(f) {
return f();
};
var $leaf_getfieldsref742 = function(f) {
return f();
};
var $leaf_mutablemask743 = [];
var $leaf$base720 = {"to-list":anf_shared718,
"_equals":anf_shared719,
"height":anf_singleton_variant_member723,
"contains":anf_singleton_variant_member724,
"insert":anf_singleton_variant_member725,
"remove":anf_singleton_variant_member726,
"preorder":anf_singleton_variant_member727,
"inorder":anf_singleton_variant_member728,
"postorder":anf_singleton_variant_member729,
"revpreorder":anf_singleton_variant_member730,
"revinorder":anf_singleton_variant_member731,
"revpostorder":anf_singleton_variant_member732,
"fold-preorder":anf_singleton_variant_member733,
"fold-inorder":anf_singleton_variant_member734,
"fold-postorder":anf_singleton_variant_member735,
"fold-revpreorder":anf_singleton_variant_member736,
"fold-revinorder":anf_singleton_variant_member737,
"fold-revpostorder":anf_singleton_variant_member738,
"count":anf_singleton_variant_member739,
"all":anf_singleton_variant_member740,
"any":anf_singleton_variant_member741,
"_match":R.makeMatch("leaf",0)};
var $leaf$brander721 = R.namedBrander("leaf",L[208]);
var $leaf$brands722 = {};
$leaf$brands722[AVLTree41._brand] = true;
$leaf$brands722[$leaf$brander721._brand] = true;
var $branch_getfields769 = function(f) {
return f(this.dict["value"],this.dict["h"],this.dict["left"],this.dict["right"]);
};
var $branch_getfieldsref767 = function(f,refmask) {
return f(R.derefField(this.dict["value"],false,refmask[0]),R.derefField(this.dict["h"],false,refmask[1]),R.derefField(this.dict["left"],false,refmask[2]),R.derefField(this.dict["right"],false,refmask[3]));
};
var $branch_mutablemask768 = [false,false,false,false];
var $branch$base745 = {"$fieldNames":["value","h","left","right"],
"to-list":anf_shared718,
"_equals":anf_shared719,
"height":anf_variant_member748,
"contains":anf_variant_member749,
"insert":anf_variant_member750,
"remove":anf_variant_member751,
"preorder":anf_variant_member752,
"inorder":anf_variant_member753,
"postorder":anf_variant_member754,
"revpreorder":anf_variant_member755,
"revinorder":anf_variant_member756,
"revpostorder":anf_variant_member757,
"fold-preorder":anf_variant_member758,
"fold-inorder":anf_variant_member759,
"fold-postorder":anf_variant_member760,
"fold-revpreorder":anf_variant_member761,
"fold-revinorder":anf_variant_member762,
"fold-revpostorder":anf_variant_member763,
"count":anf_variant_member764,
"all":anf_variant_member765,
"any":anf_variant_member766,
"_match":R.makeMatch("branch",4)};
var $branch$brander746 = R.namedBrander("branch",L[209]);
var $branch$brands747 = {};
$branch$brands747[AVLTree41._brand] = true;
$branch$brands747[$branch$brander746._brand] = true;
var branch770 = R.makeVariantConstructor(L[213],function() {
return [$type$Number8,AVLTree101,AVLTree101];
},["h771","left772","right773"],[L[210],L[211],L[212]],[false,false,false,false],["value774","h771","left772","right773"],$branch_mutablemask768,$branch$base745,$branch$brands747,"branch",$branch_getfieldsref767,$branch_getfields769,$branch$base745);
var anf_assign775 = R.makeObject({"AVLTree":G(AVLTree41,"test",L[214]),
"is-leaf":G($leaf$brander721,"test",L[208]),
"leaf":R.makeDataValue($leaf$base720,$leaf$brands722,"leaf",$leaf_getfieldsref742,$leaf_getfields744,-1,$leaf_mutablemask743,$leaf$base720),
"is-branch":G($branch$brander746,"test",L[209]),
"branch":branch770});
AVLTree776.$var = anf_assign775;
var anf_bracket777 = AVLTree776.$var;
$al40 = L[214];
var anf_assign778 = G(anf_bracket777,"AVLTree",L[214]);
is$AVLTree60.$var = anf_assign778;
var anf_bracket779 = AVLTree776.$var;
$al40 = L[208];
var anf_assign780 = G(anf_bracket779,"is-leaf",L[208]);
is$leaf781.$var = anf_assign780;
var anf_bracket782 = AVLTree776.$var;
$al40 = L[208];
var anf_assign783 = G(anf_bracket782,"leaf",L[208]);
leaf92.$var = anf_assign783;
var anf_bracket784 = AVLTree776.$var;
$al40 = L[209];
var anf_assign785 = G(anf_bracket784,"is-branch",L[209]);
is$branch786.$var = anf_assign785;
var anf_bracket787 = AVLTree776.$var;
$al40 = L[209];
var anf_assign788 = G(anf_bracket787,"branch",L[209]);
branch789.$var = anf_assign788;
var $temp_lam791 = function($f427,$base792,$tree793) {
var $step790 = 0;
var $ans794 = D;
var $al795 = L[216];
try {
if(R.isActivationRecord($f427)) {
$step790 = $f427.step;
$al795 = $f427.from;
$ans794 = $f427.ans;
f427 = $f427.args[0];
base792 = $f427.args[1];
tree793 = $f427.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[216],3,$t);
}
var f427 = $f427;
var base792 = $base792;
var tree793 = $tree793;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step790) {
case 0: $step790 = 1;
$al795 = L[215];
$field798 = R.getColonFieldLoc(tree793,"fold-preorder",L[215]);
if(R.isMethod($field798)) {
$ans794 = $field798.full_meth(tree793,f427,base792);
} else {
if(!(R.isFunction($field798))) {
R.ffi.throwNonFunApp(L[215],$field798);
}
$ans794 = $field798.app(f427,base792);
}
break;
case 1: ++R.GAS;
return $ans794;
default: throw "No case numbered " + $step790 + " in $temp_lam791";
}
}
} catch($e801) {
if(R.isCont($e801) && ($step790 !== 1)) {
$e801.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al795,$temp_lam791,$step790,[f427,base792,tree793],[]);
}
if(R.isPyretException($e801)) {
$e801.pyretStack.push($al795);
}
throw $e801;
}
};
var anf_assign802 = R.makeFunction($temp_lam791,"tree-fold");
tree$fold803.$var = anf_assign802;
var $temp_lam805 = function($f806,$tree807) {
var $step804 = 0;
var $ans809 = D;
var $al810 = L[218];
try {
if(R.isActivationRecord($f806)) {
$step804 = $f806.step;
$al810 = $f806.from;
$ans809 = $f806.ans;
f806 = $f806.args[0];
tree807 = $f806.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[218],2,$t);
}
var f806 = $f806;
var tree807 = $tree807;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step804) {
case 0: $step804 = 1;
$al810 = L[217];
$field811 = R.getColonFieldLoc(tree807,"all",L[217]);
if(R.isMethod($field811)) {
$ans809 = $field811.full_meth(tree807,f806);
} else {
if(!(R.isFunction($field811))) {
R.ffi.throwNonFunApp(L[217],$field811);
}
$ans809 = $field811.app(f806);
}
break;
case 1: ++R.GAS;
return $ans809;
default: throw "No case numbered " + $step804 + " in $temp_lam805";
}
}
} catch($e813) {
if(R.isCont($e813) && ($step804 !== 1)) {
$e813.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al810,$temp_lam805,$step804,[f806,tree807],[]);
}
if(R.isPyretException($e813)) {
$e813.pyretStack.push($al810);
}
throw $e813;
}
};
var anf_assign814 = R.makeFunction($temp_lam805,"tree-all");
tree$all815.$var = anf_assign814;
var $temp_lam817 = function($f818,$tree819) {
var $step816 = 0;
var $ans820 = D;
var $al821 = L[220];
try {
if(R.isActivationRecord($f818)) {
$step816 = $f818.step;
$al821 = $f818.from;
$ans820 = $f818.ans;
f818 = $f818.args[0];
tree819 = $f818.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[220],2,$t);
}
var f818 = $f818;
var tree819 = $tree819;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step816) {
case 0: $step816 = 1;
$al821 = L[219];
$field822 = R.getColonFieldLoc(tree819,"any",L[219]);
if(R.isMethod($field822)) {
$ans820 = $field822.full_meth(tree819,f818);
} else {
if(!(R.isFunction($field822))) {
R.ffi.throwNonFunApp(L[219],$field822);
}
$ans820 = $field822.app(f818);
}
break;
case 1: ++R.GAS;
return $ans820;
default: throw "No case numbered " + $step816 + " in $temp_lam817";
}
}
} catch($e823) {
if(R.isCont($e823) && ($step816 !== 1)) {
$e823.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al821,$temp_lam817,$step816,[f818,tree819],[]);
}
if(R.isPyretException($e823)) {
$e823.pyretStack.push($al821);
}
throw $e823;
}
};
var anf_assign824 = R.makeFunction($temp_lam817,"tree-any");
tree$any825.$var = anf_assign824;
var $temp_lam827 = function($val828,$left829,$right830) {
var $step826 = 0;
var $ans831 = D;
var $al832 = L[228];
try {
if(R.isActivationRecord($val828)) {
$step826 = $val828.step;
$al832 = $val828.from;
$ans831 = $val828.ans;
val828 = $val828.args[0];
left829 = $val828.args[1];
right830 = $val828.args[2];
anf_fun839 = $val828.vars[0];
anf_arg836 = $val828.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[228],3,$t);
}
var val828 = $val828;
var left829 = $left829;
var right830 = $right830;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step826) {
case 0: $step826 = 1;
$al832 = L[226];
R._checkAnn(L[226],AVLTree101,left829);
break;
case 1: $step826 = 2;
$al832 = L[227];
R._checkAnn(L[227],AVLTree101,right830);
break;
case 2: var anf_fun839 = branch789.$var;
$step826 = 3;
$al832 = L[221];
$field833 = R.getColonFieldLoc(left829,"height",L[221]);
if(R.isMethod($field833)) {
$ans831 = $field833.full_meth(left829);
} else {
if(!(R.isFunction($field833))) {
R.ffi.throwNonFunApp(L[221],$field833);
}
$ans831 = $field833.app();
}
break;
case 3: var anf_arg836 = $ans831;
$step826 = 4;
$al832 = L[222];
$field835 = R.getColonFieldLoc(right830,"height",L[222]);
if(R.isMethod($field835)) {
$ans831 = $field835.full_meth(right830);
} else {
if(!(R.isFunction($field835))) {
R.ffi.throwNonFunApp(L[222],$field835);
}
$ans831 = $field835.app();
}
break;
case 4: var anf_arg837 = $ans831;
$step826 = 5;
$al832 = L[225];
if(!(R.isFunction(num$max13))) {
R.ffi.throwNonFunApp($al832,num$max13);
}
$ans831 = num$max13.app(anf_arg836,anf_arg837);
break;
case 5: var anf_arg838 = $ans831;
$step826 = 6;
$al832 = L[224];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al832,_plus1);
}
$ans831 = _plus1.app(anf_arg838,(1));
break;
case 6: var anf_arg840 = $ans831;
$step826 = 7;
$al832 = L[223];
if(!(R.isFunction(anf_fun839))) {
R.ffi.throwNonFunApp($al832,anf_fun839);
}
$ans831 = anf_fun839.app(val828,anf_arg840,left829,right830);
break;
case 7: ++R.GAS;
return $ans831;
default: throw "No case numbered " + $step826 + " in $temp_lam827";
}
}
} catch($e842) {
if(R.isCont($e842) && ($step826 !== 7)) {
$e842.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al832,$temp_lam827,$step826,[val828,left829,right830],[anf_fun839,anf_arg836]);
}
if(R.isPyretException($e842)) {
$e842.pyretStack.push($al832);
}
throw $e842;
}
};
var anf_assign843 = R.makeFunction($temp_lam827,"mkbranch");
mkbranch91.$var = anf_assign843;
var $temp_lam845 = function($tree846) {
var $step844 = 0;
var $ans847 = D;
var $al848 = L[320];
try {
if(R.isActivationRecord($tree846)) {
$step844 = $tree846.step;
$al848 = $tree846.from;
$ans847 = $tree846.ans;
tree846 = $tree846.args[0];
left$left869 = $tree846.vars[0];
right$right893 = $tree846.vars[1];
left$right931 = $tree846.vars[2];
right$left968 = $tree846.vars[3];
lh973 = $tree846.vars[4];
rh974 = $tree846.vars[5];
anf_arg993 = $tree846.vars[6];
anf_arg1010 = $tree846.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[320],1,$t);
}
var tree846 = $tree846;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step844) {
case 0: $step844 = 1;
$al848 = L[319];
R._checkAnn(L[319],AVLTree101,tree846);
break;
case 1: var left$left869 = {"$var":D};
var right$right893 = {"$var":D};
var left$right931 = {"$var":D};
var right$left968 = {"$var":D};
var $temp_lam850 = function($t851) {
var $step849 = 0;
var $ans852 = D;
var $al853 = L[239];
try {
if(R.isActivationRecord($t851)) {
$step849 = $t851.step;
$al853 = $t851.from;
$ans852 = $t851.ans;
t851 = $t851.args[0];
anf_fun113 = $t851.vars[0];
anf_arg862 = $t851.vars[1];
anf_arg863 = $t851.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[239],1,$t);
}
var t851 = $t851;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step849) {
case 0: var anf_fun113 = mkbranch91.$var;
$al853 = L[229];
var anf_bracket854 = G(t851,"left",L[229]);
$al853 = L[230];
var anf_arg862 = G(anf_bracket854,"value",L[230]);
$al853 = L[231];
var anf_bracket855 = G(t851,"left",L[231]);
$al853 = L[232];
var anf_arg863 = G(anf_bracket855,"left",L[232]);
var anf_fun857 = mkbranch91.$var;
$al853 = L[233];
var anf_arg859 = G(t851,"value",L[233]);
$al853 = L[234];
var anf_bracket856 = G(t851,"left",L[234]);
$al853 = L[235];
var anf_arg860 = G(anf_bracket856,"right",L[235]);
$al853 = L[236];
var anf_arg861 = G(t851,"right",L[236]);
$step849 = 1;
$al853 = L[238];
if(!(R.isFunction(anf_fun857))) {
R.ffi.throwNonFunApp($al853,anf_fun857);
}
$ans852 = anf_fun857.app(anf_arg859,anf_arg860,anf_arg861);
break;
case 1: var anf_arg864 = $ans852;
$step849 = 2;
$al853 = L[237];
if(!(R.isFunction(anf_fun113))) {
R.ffi.throwNonFunApp($al853,anf_fun113);
}
$ans852 = anf_fun113.app(anf_arg862,anf_arg863,anf_arg864);
break;
case 2: ++R.GAS;
return $ans852;
default: throw "No case numbered " + $step849 + " in $temp_lam850";
}
}
} catch($e867) {
if(R.isCont($e867) && ($step849 !== 2)) {
$e867.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al853,$temp_lam850,$step849,[t851],[anf_fun113,anf_arg862,anf_arg863]);
}
if(R.isPyretException($e867)) {
$e867.pyretStack.push($al853);
}
throw $e867;
}
};
var anf_assign868 = R.makeFunction($temp_lam850,"left-left");
left$left869.$var = anf_assign868;
var $temp_lam871 = function($t872) {
var $step870 = 0;
var $ans873 = D;
var $al874 = L[250];
try {
if(R.isActivationRecord($t872)) {
$step870 = $t872.step;
$al874 = $t872.from;
$ans873 = $t872.ans;
t872 = $t872.args[0];
anf_fun884 = $t872.vars[0];
anf_arg885 = $t872.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[250],1,$t);
}
var t872 = $t872;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step870) {
case 0: var anf_fun884 = mkbranch91.$var;
$al874 = L[240];
var anf_bracket875 = G(t872,"right",L[240]);
$al874 = L[241];
var anf_arg885 = G(anf_bracket875,"value",L[241]);
var anf_fun877 = mkbranch91.$var;
$al874 = L[242];
var anf_arg878 = G(t872,"value",L[242]);
$al874 = L[243];
var anf_arg880 = G(t872,"left",L[243]);
$al874 = L[244];
var anf_bracket876 = G(t872,"right",L[244]);
$al874 = L[245];
var anf_arg882 = G(anf_bracket876,"left",L[245]);
$step870 = 1;
$al874 = L[249];
if(!(R.isFunction(anf_fun877))) {
R.ffi.throwNonFunApp($al874,anf_fun877);
}
$ans873 = anf_fun877.app(anf_arg878,anf_arg880,anf_arg882);
break;
case 1: var anf_arg889 = $ans873;
$al874 = L[246];
var anf_bracket883 = G(t872,"right",L[246]);
$al874 = L[247];
var anf_arg890 = G(anf_bracket883,"right",L[247]);
$step870 = 2;
$al874 = L[248];
if(!(R.isFunction(anf_fun884))) {
R.ffi.throwNonFunApp($al874,anf_fun884);
}
$ans873 = anf_fun884.app(anf_arg885,anf_arg889,anf_arg890);
break;
case 2: ++R.GAS;
return $ans873;
default: throw "No case numbered " + $step870 + " in $temp_lam871";
}
}
} catch($e891) {
if(R.isCont($e891) && ($step870 !== 2)) {
$e891.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al874,$temp_lam871,$step870,[t872],[anf_fun884,anf_arg885]);
}
if(R.isPyretException($e891)) {
$e891.pyretStack.push($al874);
}
throw $e891;
}
};
var anf_assign892 = R.makeFunction($temp_lam871,"right-right");
right$right893.$var = anf_assign892;
var $temp_lam895 = function($t896) {
var $step894 = 0;
var $ans898 = D;
var $al899 = L[269];
try {
if(R.isActivationRecord($t896)) {
$step894 = $t896.step;
$al899 = $t896.from;
$ans898 = $t896.ans;
t896 = $t896.args[0];
anf_fun920 = $t896.vars[0];
anf_arg921 = $t896.vars[1];
anf_arg923 = $t896.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[269],1,$t);
}
var t896 = $t896;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step894) {
case 0: var anf_fun920 = mkbranch91.$var;
$al899 = L[251];
var anf_bracket900 = G(t896,"left",L[251]);
$al899 = L[252];
var anf_bracket901 = G(anf_bracket900,"right",L[252]);
$al899 = L[253];
var anf_arg921 = G(anf_bracket901,"value",L[253]);
var anf_fun907 = mkbranch91.$var;
$al899 = L[254];
var anf_bracket902 = G(t896,"left",L[254]);
$al899 = L[255];
var anf_arg908 = G(anf_bracket902,"value",L[255]);
$al899 = L[256];
var anf_bracket903 = G(t896,"left",L[256]);
$al899 = L[257];
var anf_arg909 = G(anf_bracket903,"left",L[257]);
$al899 = L[258];
var anf_bracket904 = G(t896,"left",L[258]);
$al899 = L[259];
var anf_bracket905 = G(anf_bracket904,"right",L[259]);
$al899 = L[260];
var anf_arg911 = G(anf_bracket905,"left",L[260]);
$step894 = 1;
$al899 = L[268];
if(!(R.isFunction(anf_fun907))) {
R.ffi.throwNonFunApp($al899,anf_fun907);
}
$ans898 = anf_fun907.app(anf_arg908,anf_arg909,anf_arg911);
break;
case 1: var anf_arg923 = $ans898;
var anf_fun914 = mkbranch91.$var;
$al899 = L[261];
var anf_arg915 = G(t896,"value",L[261]);
$al899 = L[262];
var anf_bracket912 = G(t896,"left",L[262]);
$al899 = L[263];
var anf_bracket913 = G(anf_bracket912,"right",L[263]);
$al899 = L[264];
var anf_arg916 = G(anf_bracket913,"right",L[264]);
$al899 = L[265];
var anf_arg919 = G(t896,"right",L[265]);
$step894 = 2;
$al899 = L[267];
if(!(R.isFunction(anf_fun914))) {
R.ffi.throwNonFunApp($al899,anf_fun914);
}
$ans898 = anf_fun914.app(anf_arg915,anf_arg916,anf_arg919);
break;
case 2: var anf_arg928 = $ans898;
$step894 = 3;
$al899 = L[266];
if(!(R.isFunction(anf_fun920))) {
R.ffi.throwNonFunApp($al899,anf_fun920);
}
$ans898 = anf_fun920.app(anf_arg921,anf_arg923,anf_arg928);
break;
case 3: ++R.GAS;
return $ans898;
default: throw "No case numbered " + $step894 + " in $temp_lam895";
}
}
} catch($e929) {
if(R.isCont($e929) && ($step894 !== 3)) {
$e929.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al899,$temp_lam895,$step894,[t896],[anf_fun920,anf_arg921,anf_arg923]);
}
if(R.isPyretException($e929)) {
$e929.pyretStack.push($al899);
}
throw $e929;
}
};
var anf_assign930 = R.makeFunction($temp_lam895,"left-right");
left$right931.$var = anf_assign930;
var $temp_lam934 = function($t935) {
var $step933 = 0;
var $ans936 = D;
var $al937 = L[288];
try {
if(R.isActivationRecord($t935)) {
$step933 = $t935.step;
$al937 = $t935.from;
$ans936 = $t935.ans;
t935 = $t935.args[0];
anf_fun957 = $t935.vars[0];
anf_arg963 = $t935.vars[1];
anf_arg965 = $t935.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[288],1,$t);
}
var t935 = $t935;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step933) {
case 0: var anf_fun957 = mkbranch91.$var;
$al937 = L[270];
var anf_bracket938 = G(t935,"right",L[270]);
$al937 = L[271];
var anf_bracket939 = G(anf_bracket938,"left",L[271]);
$al937 = L[272];
var anf_arg963 = G(anf_bracket939,"value",L[272]);
var anf_fun942 = mkbranch91.$var;
$al937 = L[273];
var anf_arg307 = G(t935,"value",L[273]);
$al937 = L[274];
var anf_arg943 = G(t935,"left",L[274]);
$al937 = L[275];
var anf_bracket940 = G(t935,"right",L[275]);
$al937 = L[276];
var anf_bracket941 = G(anf_bracket940,"left",L[276]);
$al937 = L[277];
var anf_arg946 = G(anf_bracket941,"left",L[277]);
$step933 = 1;
$al937 = L[287];
if(!(R.isFunction(anf_fun942))) {
R.ffi.throwNonFunApp($al937,anf_fun942);
}
$ans936 = anf_fun942.app(anf_arg307,anf_arg943,anf_arg946);
break;
case 1: var anf_arg965 = $ans936;
var anf_fun327 = mkbranch91.$var;
$al937 = L[278];
var anf_bracket947 = G(t935,"right",L[278]);
$al937 = L[279];
var anf_arg954 = G(anf_bracket947,"value",L[279]);
$al937 = L[280];
var anf_bracket948 = G(t935,"right",L[280]);
$al937 = L[281];
var anf_bracket949 = G(anf_bracket948,"left",L[281]);
$al937 = L[282];
var anf_arg955 = G(anf_bracket949,"right",L[282]);
$al937 = L[283];
var anf_bracket950 = G(t935,"right",L[283]);
$al937 = L[284];
var anf_arg956 = G(anf_bracket950,"right",L[284]);
$step933 = 2;
$al937 = L[286];
if(!(R.isFunction(anf_fun327))) {
R.ffi.throwNonFunApp($al937,anf_fun327);
}
$ans936 = anf_fun327.app(anf_arg954,anf_arg955,anf_arg956);
break;
case 2: var anf_arg347 = $ans936;
$step933 = 3;
$al937 = L[285];
if(!(R.isFunction(anf_fun957))) {
R.ffi.throwNonFunApp($al937,anf_fun957);
}
$ans936 = anf_fun957.app(anf_arg963,anf_arg965,anf_arg347);
break;
case 3: ++R.GAS;
return $ans936;
default: throw "No case numbered " + $step933 + " in $temp_lam934";
}
}
} catch($e966) {
if(R.isCont($e966) && ($step933 !== 3)) {
$e966.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al937,$temp_lam934,$step933,[t935],[anf_fun957,anf_arg963,anf_arg965]);
}
if(R.isPyretException($e966)) {
$e966.pyretStack.push($al937);
}
throw $e966;
}
};
var anf_assign967 = R.makeFunction($temp_lam934,"right-left");
right$left968.$var = anf_assign967;
$al848 = L[289];
var anf_method_obj969 = G(tree846,"left",L[289]);
$step844 = 2;
$al848 = L[290];
$field970 = R.getColonFieldLoc(anf_method_obj969,"height",L[290]);
if(R.isMethod($field970)) {
$ans847 = $field970.full_meth(anf_method_obj969);
} else {
if(!(R.isFunction($field970))) {
R.ffi.throwNonFunApp(L[290],$field970);
}
$ans847 = $field970.app();
}
break;
case 2: var lh973 = $ans847;
$al848 = L[291];
var anf_method_obj971 = G(tree846,"right",L[291]);
$step844 = 3;
$al848 = L[292];
$field972 = R.getColonFieldLoc(anf_method_obj971,"height",L[292]);
if(R.isMethod($field972)) {
$ans847 = $field972.full_meth(anf_method_obj971);
} else {
if(!(R.isFunction($field972))) {
R.ffi.throwNonFunApp(L[292],$field972);
}
$ans847 = $field972.app();
}
break;
case 3: var rh974 = $ans847;
$step844 = 4;
$al848 = L[318];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al848,_minus9);
}
$ans847 = _minus9.app(lh973,rh974);
break;
case 4: var anf_arg975 = $ans847;
$step844 = 5;
$al848 = L[317];
if(!(R.isFunction(num$abs5))) {
R.ffi.throwNonFunApp($al848,num$abs5);
}
$ans847 = num$abs5.app(anf_arg975);
break;
case 5: var anf_arg979 = $ans847;
$step844 = 6;
$al848 = L[293];
if(!(R.isFunction(_lessequal3))) {
R.ffi.throwNonFunApp($al848,_lessequal3);
}
$ans847 = _lessequal3.app(anf_arg979,(1));
break;
case 6: var anf_arg983 = $ans847;
$al848 = L[293];
var anf_if1016 = R.checkWrapBoolean(anf_arg983);
$step844 = R.isPyretTrue(anf_if1016)?7:8;
break;
case 7: $step844 = 27;
$ans847 = tree846;
break;
case 8: $step844 = 9;
$al848 = L[316];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al848,_minus9);
}
$ans847 = _minus9.app(lh973,rh974);
break;
case 9: var anf_arg984 = $ans847;
$step844 = 10;
$al848 = L[294];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al848,equal$always2);
}
$ans847 = equal$always2.app(anf_arg984,(2));
break;
case 10: var anf_arg986 = $ans847;
$al848 = L[294];
var anf_if1015 = R.checkWrapBoolean(anf_arg986);
$step844 = R.isPyretTrue(anf_if1015)?11:17;
break;
case 11: $al848 = L[295];
var anf_bracket987 = G(tree846,"left",L[295]);
$al848 = L[296];
var anf_method_obj988 = G(anf_bracket987,"left",L[296]);
$step844 = 12;
$al848 = L[297];
$field989 = R.getColonFieldLoc(anf_method_obj988,"height",L[297]);
if(R.isMethod($field989)) {
$ans847 = $field989.full_meth(anf_method_obj988);
} else {
if(!(R.isFunction($field989))) {
R.ffi.throwNonFunApp(L[297],$field989);
}
$ans847 = $field989.app();
}
break;
case 12: var anf_arg993 = $ans847;
$al848 = L[298];
var anf_bracket990 = G(tree846,"left",L[298]);
$al848 = L[299];
var anf_method_obj991 = G(anf_bracket990,"right",L[299]);
$step844 = 13;
$al848 = L[300];
$field992 = R.getColonFieldLoc(anf_method_obj991,"height",L[300]);
if(R.isMethod($field992)) {
$ans847 = $field992.full_meth(anf_method_obj991);
} else {
if(!(R.isFunction($field992))) {
R.ffi.throwNonFunApp(L[300],$field992);
}
$ans847 = $field992.app();
}
break;
case 13: var anf_arg996 = $ans847;
$step844 = 14;
$al848 = L[301];
if(!(R.isFunction(_greaterequal4))) {
R.ffi.throwNonFunApp($al848,_greaterequal4);
}
$ans847 = _greaterequal4.app(anf_arg993,anf_arg996);
break;
case 14: var anf_arg404 = $ans847;
$al848 = L[301];
var anf_if999 = R.checkWrapBoolean(anf_arg404);
$step844 = R.isPyretTrue(anf_if999)?15:16;
break;
case 15: var anf_fun997 = left$left869.$var;
$step844 = 27;
$al848 = L[302];
if(!(R.isFunction(anf_fun997))) {
R.ffi.throwNonFunApp($al848,anf_fun997);
}
$ans847 = anf_fun997.app(tree846);
break;
case 16: var anf_fun998 = left$right931.$var;
$step844 = 27;
$al848 = L[303];
if(!(R.isFunction(anf_fun998))) {
R.ffi.throwNonFunApp($al848,anf_fun998);
}
$ans847 = anf_fun998.app(tree846);
break;
case 17: $step844 = 18;
$al848 = L[315];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al848,_minus9);
}
$ans847 = _minus9.app(rh974,lh973);
break;
case 18: var anf_arg1000 = $ans847;
$step844 = 19;
$al848 = L[304];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al848,equal$always2);
}
$ans847 = equal$always2.app(anf_arg1000,(2));
break;
case 19: var anf_arg1001 = $ans847;
$al848 = L[304];
var anf_if1014 = R.checkWrapBoolean(anf_arg1001);
$step844 = R.isPyretTrue(anf_if1014)?20:26;
break;
case 20: $al848 = L[305];
var anf_bracket1002 = G(tree846,"right",L[305]);
$al848 = L[306];
var anf_method_obj1003 = G(anf_bracket1002,"right",L[306]);
$step844 = 21;
$al848 = L[307];
$field1004 = R.getColonFieldLoc(anf_method_obj1003,"height",L[307]);
if(R.isMethod($field1004)) {
$ans847 = $field1004.full_meth(anf_method_obj1003);
} else {
if(!(R.isFunction($field1004))) {
R.ffi.throwNonFunApp(L[307],$field1004);
}
$ans847 = $field1004.app();
}
break;
case 21: var anf_arg1010 = $ans847;
$al848 = L[308];
var anf_bracket1005 = G(tree846,"right",L[308]);
$al848 = L[309];
var anf_method_obj1006 = G(anf_bracket1005,"left",L[309]);
$step844 = 22;
$al848 = L[310];
$field1009 = R.getColonFieldLoc(anf_method_obj1006,"height",L[310]);
if(R.isMethod($field1009)) {
$ans847 = $field1009.full_meth(anf_method_obj1006);
} else {
if(!(R.isFunction($field1009))) {
R.ffi.throwNonFunApp(L[310],$field1009);
}
$ans847 = $field1009.app();
}
break;
case 22: var anf_arg56 = $ans847;
$step844 = 23;
$al848 = L[311];
if(!(R.isFunction(_greaterequal4))) {
R.ffi.throwNonFunApp($al848,_greaterequal4);
}
$ans847 = _greaterequal4.app(anf_arg1010,anf_arg56);
break;
case 23: var anf_arg58 = $ans847;
$al848 = L[311];
var anf_if1013 = R.checkWrapBoolean(anf_arg58);
$step844 = R.isPyretTrue(anf_if1013)?24:25;
break;
case 24: var anf_fun1011 = right$right893.$var;
$step844 = 27;
$al848 = L[312];
if(!(R.isFunction(anf_fun1011))) {
R.ffi.throwNonFunApp($al848,anf_fun1011);
}
$ans847 = anf_fun1011.app(tree846);
break;
case 25: var anf_fun1012 = right$left968.$var;
$step844 = 27;
$al848 = L[313];
if(!(R.isFunction(anf_fun1012))) {
R.ffi.throwNonFunApp($al848,anf_fun1012);
}
$ans847 = anf_fun1012.app(tree846);
break;
case 26: $step844 = 27;
$al848 = L[314];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al848,raise1);
}
$ans847 = raise1.app(("AVL tree invariant has been broken!"));
break;
case 27: ++R.GAS;
return $ans847;
default: throw "No case numbered " + $step844 + " in $temp_lam845";
}
}
} catch($e1017) {
if(R.isCont($e1017) && ($step844 !== 27)) {
$e1017.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al848,$temp_lam845,$step844,[tree846],[left$left869,right$right893,left$right931,right$left968,lh973,rh974,anf_arg993,anf_arg1010]);
}
if(R.isPyretException($e1017)) {
$e1017.pyretStack.push($al848);
}
throw $e1017;
}
};
var anf_assign1018 = R.makeFunction($temp_lam845,"rebalance");
rebalance293.$var = anf_assign1018;
var $temp_lam1020 = function($tree1021) {
var $step1019 = 0;
var $ans1022 = D;
var $al1023 = L[332];
try {
if(R.isActivationRecord($tree1021)) {
$step1019 = $tree1021.step;
$al1023 = $tree1021.from;
$ans1022 = $tree1021.ans;
tree1021 = $tree1021.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[332],1,$t);
}
var tree1021 = $tree1021;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1019) {
case 0: $step1019 = 1;
$al1023 = L[331];
R._checkAnn(L[331],AVLTree101,tree1021);
break;
case 1: var anf_fun1024 = is$leaf781.$var;
$al1023 = L[321];
var anf_arg72 = G(tree1021,"left",L[321]);
$step1019 = 2;
$al1023 = L[322];
if(!(R.isFunction(anf_fun1024))) {
R.ffi.throwNonFunApp($al1023,anf_fun1024);
}
$ans1022 = anf_fun1024.app(anf_arg72);
break;
case 2: var anf_arg77 = $ans1022;
$al1023 = L[322];
var anf_if1038 = R.checkWrapBoolean(anf_arg77);
$step1019 = R.isPyretTrue(anf_if1038)?3:7;
break;
case 3: var anf_fun1025 = is$leaf781.$var;
$al1023 = L[323];
var anf_arg1031 = G(tree1021,"right",L[323]);
$step1019 = 4;
$al1023 = L[324];
if(!(R.isFunction(anf_fun1025))) {
R.ffi.throwNonFunApp($al1023,anf_fun1025);
}
$ans1022 = anf_fun1025.app(anf_arg1031);
break;
case 4: var anf_arg81 = $ans1022;
$al1023 = L[324];
var anf_if1032 = R.checkWrapBoolean(anf_arg81);
$step1019 = R.isPyretTrue(anf_if1032)?5:6;
break;
case 5: $step1019 = 11;
$ans1022 = leaf92.$var;
break;
case 6: $step1019 = 11;
$al1023 = L[325];
$ans1022 = G(tree1021,"right",L[325]);
break;
case 7: var anf_fun1034 = is$leaf781.$var;
$al1023 = L[326];
var anf_arg89 = G(tree1021,"right",L[326]);
$step1019 = 8;
$al1023 = L[327];
if(!(R.isFunction(anf_fun1034))) {
R.ffi.throwNonFunApp($al1023,anf_fun1034);
}
$ans1022 = anf_fun1034.app(anf_arg89);
break;
case 8: var anf_arg90 = $ans1022;
$al1023 = L[327];
var anf_if1037 = R.checkWrapBoolean(anf_arg90);
$step1019 = R.isPyretTrue(anf_if1037)?9:10;
break;
case 9: $step1019 = 11;
$al1023 = L[328];
$ans1022 = G(tree1021,"left",L[328]);
break;
case 10: var anf_fun1036 = swap$next$lowest1035.$var === D?U(L[329],"swap-next-lowest"):swap$next$lowest1035.$var;
$step1019 = 11;
$al1023 = L[330];
if(!(R.isFunction(anf_fun1036))) {
R.ffi.throwNonFunApp($al1023,anf_fun1036);
}
$ans1022 = anf_fun1036.app(tree1021);
break;
case 11: ++R.GAS;
return $ans1022;
default: throw "No case numbered " + $step1019 + " in $temp_lam1020";
}
}
} catch($e1039) {
if(R.isCont($e1039) && ($step1019 !== 11)) {
$e1039.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1023,$temp_lam1020,$step1019,[tree1021],[]);
}
if(R.isPyretException($e1039)) {
$e1039.pyretStack.push($al1023);
}
throw $e1039;
}
};
var anf_assign1040 = R.makeFunction($temp_lam1020,"remove-root");
remove$root354.$var = anf_assign1040;
var $temp_lam1043 = function($tree1044) {
var $step1042 = 0;
var $ans1045 = D;
var $al1046 = L[362];
try {
if(R.isActivationRecord($tree1044)) {
$step1042 = $tree1044.step;
$al1046 = $tree1044.from;
$ans1045 = $tree1044.ans;
tree1044 = $tree1044.args[0];
remove$greatest$and$rebalance1074 = $tree1044.vars[0];
anf_fun1095 = $tree1044.vars[1];
anf_fun1093 = $tree1044.vars[2];
anf_arg1094 = $tree1044.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[362],1,$t);
}
var tree1044 = $tree1044;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1042) {
case 0: $step1042 = 1;
$al1046 = L[361];
R._checkAnn(L[361],AVLTree101,tree1044);
break;
case 1: var greatest1056 = {"$var":D};
var remove$greatest$and$rebalance1074 = {"$var":D};
var $temp_lam1048 = function($t1049) {
var $step1047 = 0;
var $ans1050 = D;
var $al1051 = L[340];
try {
if(R.isActivationRecord($t1049)) {
$step1047 = $t1049.step;
$al1051 = $t1049.from;
$ans1050 = $t1049.ans;
t1049 = $t1049.args[0];
cases1052 = $t1049.vars[0];
right1054 = $t1049.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[340],1,$t);
}
var t1049 = $t1049;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1047) {
case 0: var cases1052 = t1049;
$step1047 = 1;
$al1051 = L[339];
R._checkAnn(L[339],AVLTree101,cases1052);
break;
case 1: var $cases_dispatch1062 = {"leaf":2,
"branch":3};
$al1051 = L[335];
$step1047 = $cases_dispatch1062[cases1052.$name] || 7;
break;
case 2: if(cases1052.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[334],false,L[335]);
}
$step1047 = 8;
$al1051 = L[333];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al1051,raise1);
}
$ans1050 = raise1.app(("Went too far in traversal step"));
break;
case 3: if(cases1052.$arity !== 4) {
if(cases1052.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[338],4,cases1052.$arity,L[335]);
} else {
R.ffi.throwCasesSingletonErrorC(L[338],true,L[335]);
}
}
var $fn187 = cases1052.$constructor.$fieldNames;
R.derefField(cases1052.dict[$fn187[0]],cases1052.$mut_fields_mask[0],false);
R.derefField(cases1052.dict[$fn187[1]],cases1052.$mut_fields_mask[1],false);
R.derefField(cases1052.dict[$fn187[2]],cases1052.$mut_fields_mask[2],false);
var right1054 = R.derefField(cases1052.dict[$fn187[3]],cases1052.$mut_fields_mask[3],false);
var anf_fun1053 = is$leaf781.$var;
$step1047 = 4;
$al1051 = L[336];
if(!(R.isFunction(anf_fun1053))) {
R.ffi.throwNonFunApp($al1051,anf_fun1053);
}
$ans1050 = anf_fun1053.app(right1054);
break;
case 4: var anf_arg1055 = $ans1050;
$al1051 = L[336];
var anf_if1058 = R.checkWrapBoolean(anf_arg1055);
$step1047 = R.isPyretTrue(anf_if1058)?5:6;
break;
case 5: $step1047 = 8;
$ans1050 = t1049;
break;
case 6: var anf_fun1057 = greatest1056.$var;
$step1047 = 8;
$al1051 = L[337];
if(!(R.isFunction(anf_fun1057))) {
R.ffi.throwNonFunApp($al1051,anf_fun1057);
}
$ans1050 = anf_fun1057.app(right1054);
break;
case 7: $step1047 = 8;
$al1051 = L[335];
$ans1050 = R.throwNoCasesMatched(L[335],cases1052);
break;
case 8: ++R.GAS;
return $ans1050;
default: throw "No case numbered " + $step1047 + " in $temp_lam1048";
}
}
} catch($e1063) {
if(R.isCont($e1063) && ($step1047 !== 8)) {
$e1063.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1051,$temp_lam1048,$step1047,[t1049],[cases1052,right1054]);
}
if(R.isPyretException($e1063)) {
$e1063.pyretStack.push($al1051);
}
throw $e1063;
}
};
var anf_assign1064 = R.makeFunction($temp_lam1048,"greatest");
greatest1056.$var = anf_assign1064;
var $temp_lam1066 = function($t1067) {
var $step1065 = 0;
var $ans1068 = D;
var $al1069 = L[352];
try {
if(R.isActivationRecord($t1067)) {
$step1065 = $t1067.step;
$al1069 = $t1067.from;
$ans1068 = $t1067.ans;
t1067 = $t1067.args[0];
cases1070 = $t1067.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[352],1,$t);
}
var t1067 = $t1067;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1065) {
case 0: var cases1070 = t1067;
$step1065 = 1;
$al1069 = L[351];
R._checkAnn(L[351],AVLTree101,cases1070);
break;
case 1: var $cases_dispatch1085 = {"leaf":2,
"branch":3};
$al1069 = L[343];
$step1065 = $cases_dispatch1085[cases1070.$name] || 4;
break;
case 2: if(cases1070.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[342],false,L[343]);
}
$step1065 = 5;
$al1069 = L[341];
if(!(R.isFunction(raise1))) {
R.ffi.throwNonFunApp($al1069,raise1);
}
$ans1068 = raise1.app(("Went too far in removal step"));
break;
case 3: if(cases1070.$arity !== 4) {
if(cases1070.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[349],4,cases1070.$arity,L[343]);
} else {
R.ffi.throwCasesSingletonErrorC(L[349],true,L[343]);
}
}
$step1065 = 5;
$al1069 = L[350];
var $temp_branch1079 = function($val1077,$$underscore1083,$left1073,$right1072) {
var $step1080 = 0;
var $ans1081 = D;
var $al1082 = L[348];
try {
if(R.isActivationRecord($val1077)) {
$step1080 = $val1077.step;
$al1082 = $val1077.from;
$ans1081 = $val1077.ans;
val1077 = $val1077.args[0];
$underscore1083 = $val1077.args[1];
left1073 = $val1077.args[2];
right1072 = $val1077.args[3];
anf_fun505 = $val1077.vars[0];
anf_fun1076 = $val1077.vars[1];
} else {
var val1077 = $val1077;
var $underscore1083 = $$underscore1083;
var left1073 = $left1073;
var right1072 = $right1072;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1080) {
case 0: var anf_fun1071 = is$leaf781.$var;
$step1080 = 1;
$al1082 = L[344];
if(!(R.isFunction(anf_fun1071))) {
R.ffi.throwNonFunApp($al1082,anf_fun1071);
}
$ans1081 = anf_fun1071.app(right1072);
break;
case 1: var anf_arg117 = $ans1081;
$al1082 = L[344];
var anf_if1078 = R.checkWrapBoolean(anf_arg117);
$step1080 = R.isPyretTrue(anf_if1078)?2:3;
break;
case 2: $step1080 = 6;
$ans1081 = left1073;
break;
case 3: var anf_fun505 = rebalance293.$var;
var anf_fun1076 = mkbranch91.$var;
var anf_fun1075 = remove$greatest$and$rebalance1074.$var;
$step1080 = 4;
$al1082 = L[347];
if(!(R.isFunction(anf_fun1075))) {
R.ffi.throwNonFunApp($al1082,anf_fun1075);
}
$ans1081 = anf_fun1075.app(right1072);
break;
case 4: var anf_arg508 = $ans1081;
$step1080 = 5;
$al1082 = L[346];
if(!(R.isFunction(anf_fun1076))) {
R.ffi.throwNonFunApp($al1082,anf_fun1076);
}
$ans1081 = anf_fun1076.app(val1077,left1073,anf_arg508);
break;
case 5: var anf_arg149 = $ans1081;
$step1080 = 6;
$al1082 = L[345];
if(!(R.isFunction(anf_fun505))) {
R.ffi.throwNonFunApp($al1082,anf_fun505);
}
$ans1081 = anf_fun505.app(anf_arg149);
break;
case 6: ++R.GAS;
return $ans1081;
default: throw "No case numbered " + $step1080 + " in $temp_branch1079";
}
}
} catch($e1084) {
if(R.isCont($e1084) && ($step1080 !== 6)) {
$e1084.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1082,$temp_branch1079,$step1080,[val1077,$underscore1083,left1073,right1072],[anf_fun505,anf_fun1076]);
}
if(R.isPyretException($e1084)) {
$e1084.pyretStack.push($al1082);
}
throw $e1084;
}
};
$ans1068 = cases1070.$app_fields($temp_branch1079,[false,false,false,false]);
break;
case 4: $step1065 = 5;
$al1069 = L[343];
$ans1068 = R.throwNoCasesMatched(L[343],cases1070);
break;
case 5: ++R.GAS;
return $ans1068;
default: throw "No case numbered " + $step1065 + " in $temp_lam1066";
}
}
} catch($e1087) {
if(R.isCont($e1087) && ($step1065 !== 5)) {
$e1087.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1069,$temp_lam1066,$step1065,[t1067],[cases1070]);
}
if(R.isPyretException($e1087)) {
$e1087.pyretStack.push($al1069);
}
throw $e1087;
}
};
var anf_assign1088 = R.makeFunction($temp_lam1066,"remove-greatest-and-rebalance");
remove$greatest$and$rebalance1074.$var = anf_assign1088;
var anf_fun1095 = rebalance293.$var;
var anf_fun1093 = mkbranch91.$var;
var anf_fun1089 = greatest1056.$var;
$al1046 = L[353];
var anf_arg1090 = G(tree1044,"left",L[353]);
$step1042 = 2;
$al1046 = L[360];
if(!(R.isFunction(anf_fun1089))) {
R.ffi.throwNonFunApp($al1046,anf_fun1089);
}
$ans1045 = anf_fun1089.app(anf_arg1090);
break;
case 2: var anf_bracket1091 = $ans1045;
$al1046 = L[354];
var anf_arg1094 = G(anf_bracket1091,"value",L[354]);
var anf_fun1092 = remove$greatest$and$rebalance1074.$var;
$al1046 = L[355];
var anf_arg184 = G(tree1044,"left",L[355]);
$step1042 = 3;
$al1046 = L[359];
if(!(R.isFunction(anf_fun1092))) {
R.ffi.throwNonFunApp($al1046,anf_fun1092);
}
$ans1045 = anf_fun1092.app(anf_arg184);
break;
case 3: var anf_arg535 = $ans1045;
$al1046 = L[356];
var anf_arg185 = G(tree1044,"right",L[356]);
$step1042 = 4;
$al1046 = L[358];
if(!(R.isFunction(anf_fun1093))) {
R.ffi.throwNonFunApp($al1046,anf_fun1093);
}
$ans1045 = anf_fun1093.app(anf_arg1094,anf_arg535,anf_arg185);
break;
case 4: var anf_arg536 = $ans1045;
$step1042 = 5;
$al1046 = L[357];
if(!(R.isFunction(anf_fun1095))) {
R.ffi.throwNonFunApp($al1046,anf_fun1095);
}
$ans1045 = anf_fun1095.app(anf_arg536);
break;
case 5: ++R.GAS;
return $ans1045;
default: throw "No case numbered " + $step1042 + " in $temp_lam1043";
}
}
} catch($e1096) {
if(R.isCont($e1096) && ($step1042 !== 5)) {
$e1096.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1046,$temp_lam1043,$step1042,[tree1044],[remove$greatest$and$rebalance1074,anf_fun1095,anf_fun1093,anf_arg1094]);
}
if(R.isPyretException($e1096)) {
$e1096.pyretStack.push($al1046);
}
throw $e1096;
}
};
var anf_assign1097 = R.makeFunction($temp_lam1043,"swap-next-lowest");
swap$next$lowest1035.$var = anf_assign1097;
nothing2;
var Set1656 = {"$var":D};
var is$Set1124 = {"$var":D};
var is$list$set1661 = {"$var":D};
var list$set1162 = {"$var":D};
var is$tree$set1666 = {"$var":D};
var tree$set1415 = {"$var":D};
var set$to$sorted$elems1683 = {"$var":D};
var elems$to$balanced$avl1712 = {"$var":D};
var merge$no$dups1723 = {"$var":D};
var tree$set$union1536 = {"$var":D};
var merge$only$dups1757 = {"$var":D};
var tree$set$intersect1545 = {"$var":D};
var merge$drop$l21793 = {"$var":D};
var tree$set$difference1562 = {"$var":D};
var set$all1833 = {"$var":D};
var set$any1844 = {"$var":D};
var set$fold1857 = {"$var":D};
var list$to$set1879 = {"$var":D};
var list$to$list$set1890 = {"$var":D};
var list$to$tree$set1902 = {"$var":D};
var list$to$tree1920 = {"$var":D};
var arr$to$list$set1940 = {"$var":D};
var arr$to$tree$set1960 = {"$var":D};
var $temp_full1099 = function($self1100,$other1101) {
var $step1098 = 0;
var $ans1102 = D;
var $al1103 = L[369];
try {
if(R.isActivationRecord($self1100)) {
$step1098 = $self1100.step;
$al1103 = $self1100.from;
$ans1102 = $self1100.ans;
self1100 = $self1100.args[0];
other1101 = $self1100.args[1];
anf_method_obj1109 = $self1100.vars[0];
ann_check_temp1114 = $self1100.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[369],2,$t);
}
var self1100 = $self1100;
var other1101 = $other1101;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1098) {
case 0: $step1098 = 1;
$al1103 = L[367];
R._checkAnn(L[367],Set1115,self1100);
break;
case 1: $step1098 = 2;
$al1103 = L[368];
R._checkAnn(L[368],Set1115,other1101);
break;
case 2: $step1098 = 3;
$al1103 = L[363];
$field1105 = R.getColonFieldLoc(self1100,"union",L[363]);
if(R.isMethod($field1105)) {
$ans1102 = $field1105.full_meth(self1100,other1101);
} else {
if(!(R.isFunction($field1105))) {
R.ffi.throwNonFunApp(L[363],$field1105);
}
$ans1102 = $field1105.app(other1101);
}
break;
case 3: var anf_method_obj1109 = $ans1102;
$step1098 = 4;
$al1103 = L[364];
$field1108 = R.getColonFieldLoc(self1100,"intersect",L[364]);
if(R.isMethod($field1108)) {
$ans1102 = $field1108.full_meth(self1100,other1101);
} else {
if(!(R.isFunction($field1108))) {
R.ffi.throwNonFunApp(L[364],$field1108);
}
$ans1102 = $field1108.app(other1101);
}
break;
case 4: var anf_arg1112 = $ans1102;
$step1098 = 5;
$al1103 = L[365];
$field1113 = R.getColonFieldLoc(anf_method_obj1109,"difference",L[365]);
if(R.isMethod($field1113)) {
$ans1102 = $field1113.full_meth(anf_method_obj1109,anf_arg1112);
} else {
if(!(R.isFunction($field1113))) {
R.ffi.throwNonFunApp(L[365],$field1113);
}
$ans1102 = $field1113.app(anf_arg1112);
}
break;
case 5: var ann_check_temp1114 = $ans1102;
$step1098 = 6;
$al1103 = L[366];
R._checkAnn(L[366],Set1115,ann_check_temp1114);
break;
case 6: $step1098 = 7;
$ans1102 = ann_check_temp1114;
break;
case 7: ++R.GAS;
return $ans1102;
default: throw "No case numbered " + $step1098 + " in $temp_full1099";
}
}
} catch($e1116) {
if(R.isCont($e1116) && ($step1098 !== 7)) {
$e1116.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1103,$temp_full1099,$step1098,[self1100,other1101],[anf_method_obj1109,ann_check_temp1114]);
}
if(R.isPyretException($e1116)) {
$e1116.pyretStack.push($al1103);
}
throw $e1116;
}
};
var anf_shared1604 = R.makeMethod1($temp_full1099,"symmetric-difference");
var $temp_full1118 = function($self1119,$other1120,$eq1121) {
var $step1117 = 0;
var $ans1122 = D;
var $al1123 = L[385];
try {
if(R.isActivationRecord($self1119)) {
$step1117 = $self1119.step;
$al1123 = $self1119.from;
$ans1122 = $self1119.ans;
self1119 = $self1119.args[0];
other1120 = $self1119.args[1];
eq1121 = $self1119.args[2];
self$list1133 = $self1119.vars[0];
other$list1130 = $self1119.vars[1];
anf_arg223 = $self1119.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[385],3,$t);
}
var self1119 = $self1119;
var other1120 = $other1120;
var eq1121 = $eq1121;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1117) {
case 0: var anf_fun1125 = is$Set1124.$var === D?U(L[370],"is-Set"):is$Set1124.$var;
$step1117 = 1;
$al1123 = L[384];
if(!(R.isFunction(anf_fun1125))) {
R.ffi.throwNonFunApp($al1123,anf_fun1125);
}
$ans1122 = anf_fun1125.app(other1120);
break;
case 1: var anf_arg1126 = $ans1122;
$step1117 = 2;
$al1123 = L[371];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al1123,not4);
}
$ans1122 = not4.app(anf_arg1126);
break;
case 2: var anf_arg217 = $ans1122;
$al1123 = L[371];
var anf_if1151 = R.checkWrapBoolean(anf_arg217);
$step1117 = R.isPyretTrue(anf_if1151)?3:4;
break;
case 3: $step1117 = 13;
$al1123 = L[372];
$field1127 = R.getColonFieldLoc(equality7,"NotEqual",L[372]);
if(R.isMethod($field1127)) {
$ans1122 = $field1127.full_meth(equality7,("Non-Set"),self1119,other1120);
} else {
if(!(R.isFunction($field1127))) {
R.ffi.throwNonFunApp(L[372],$field1127);
}
$ans1122 = $field1127.app(("Non-Set"),self1119,other1120);
}
break;
case 4: $step1117 = 5;
$al1123 = L[373];
$field1128 = R.getColonFieldLoc(self1119,"to-list",L[373]);
if(R.isMethod($field1128)) {
$ans1122 = $field1128.full_meth(self1119);
} else {
if(!(R.isFunction($field1128))) {
R.ffi.throwNonFunApp(L[373],$field1128);
}
$ans1122 = $field1128.app();
}
break;
case 5: var self$list1133 = $ans1122;
$step1117 = 6;
$al1123 = L[374];
$field1129 = R.getColonFieldLoc(other1120,"to-list",L[374]);
if(R.isMethod($field1129)) {
$ans1122 = $field1129.full_meth(other1120);
} else {
if(!(R.isFunction($field1129))) {
R.ffi.throwNonFunApp(L[374],$field1129);
}
$ans1122 = $field1129.app();
}
break;
case 6: var other$list1130 = $ans1122;
$step1117 = 7;
$al1123 = L[375];
$field1132 = R.getColonFieldLoc(other$list1130,"length",L[375]);
if(R.isMethod($field1132)) {
$ans1122 = $field1132.full_meth(other$list1130);
} else {
if(!(R.isFunction($field1132))) {
R.ffi.throwNonFunApp(L[375],$field1132);
}
$ans1122 = $field1132.app();
}
break;
case 7: var anf_arg223 = $ans1122;
$step1117 = 8;
$al1123 = L[376];
$field1134 = R.getColonFieldLoc(self$list1133,"length",L[376]);
if(R.isMethod($field1134)) {
$ans1122 = $field1134.full_meth(self$list1133);
} else {
if(!(R.isFunction($field1134))) {
R.ffi.throwNonFunApp(L[376],$field1134);
}
$ans1122 = $field1134.app();
}
break;
case 8: var anf_arg1135 = $ans1122;
$step1117 = 9;
$al1123 = L[383];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1123,equal$always2);
}
$ans1122 = equal$always2.app(anf_arg223,anf_arg1135);
break;
case 9: var anf_arg231 = $ans1122;
$step1117 = 10;
$al1123 = L[377];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al1123,not4);
}
$ans1122 = not4.app(anf_arg231);
break;
case 10: var anf_arg1136 = $ans1122;
$al1123 = L[377];
var anf_if1150 = R.checkWrapBoolean(anf_arg1136);
$step1117 = R.isPyretTrue(anf_if1150)?11:12;
break;
case 11: $step1117 = 13;
$al1123 = L[378];
$field1137 = R.getColonFieldLoc(equality7,"NotEqual",L[378]);
if(R.isMethod($field1137)) {
$ans1122 = $field1137.full_meth(equality7,("set size"),self1119,other1120);
} else {
if(!(R.isFunction($field1137))) {
R.ffi.throwNonFunApp(L[378],$field1137);
}
$ans1122 = $field1137.app(("set size"),self1119,other1120);
}
break;
case 12: var $temp_lam1139 = function($result1140,$elt1141) {
var $step1138 = 0;
var $ans1142 = D;
var $al1143 = L[381];
try {
if(R.isActivationRecord($result1140)) {
$step1138 = $result1140.step;
$al1143 = $result1140.from;
$ans1142 = $result1140.ans;
result1140 = $result1140.args[0];
elt1141 = $result1140.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[381],2,$t);
}
var result1140 = $result1140;
var elt1141 = $elt1141;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1138) {
case 0: $step1138 = 1;
$al1143 = L[379];
$field1144 = R.getColonFieldLoc(lists18,"member-with",L[379]);
if(R.isMethod($field1144)) {
$ans1142 = $field1144.full_meth(lists18,other$list1130,elt1141,eq1121);
} else {
if(!(R.isFunction($field1144))) {
R.ffi.throwNonFunApp(L[379],$field1144);
}
$ans1142 = $field1144.app(other$list1130,elt1141,eq1121);
}
break;
case 1: var result$for$elt1145 = $ans1142;
$step1138 = 2;
$al1143 = L[380];
$field1146 = R.getColonFieldLoc(equality7,"equal-and",L[380]);
if(R.isMethod($field1146)) {
$ans1142 = $field1146.full_meth(equality7,result1140,result$for$elt1145);
} else {
if(!(R.isFunction($field1146))) {
R.ffi.throwNonFunApp(L[380],$field1146);
}
$ans1142 = $field1146.app(result1140,result$for$elt1145);
}
break;
case 2: ++R.GAS;
return $ans1142;
default: throw "No case numbered " + $step1138 + " in $temp_lam1139";
}
}
} catch($e1147) {
if(R.isCont($e1147) && ($step1138 !== 2)) {
$e1147.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1143,$temp_lam1139,$step1138,[result1140,elt1141],[]);
}
if(R.isPyretException($e1147)) {
$e1147.pyretStack.push($al1143);
}
throw $e1147;
}
};
var anf_arg244 = R.makeFunction($temp_lam1139,"for-body<line 493, column 8>");
$al1123 = L[382];
var anf_arg1149 = G(equality7,"Equal",L[382]);
$step1117 = 13;
$al1123 = L[381];
if(!(R.isFunction(fold1148))) {
R.ffi.throwNonFunApp($al1123,fold1148);
}
$ans1122 = fold1148.app(anf_arg244,anf_arg1149,self$list1133);
break;
case 13: ++R.GAS;
return $ans1122;
default: throw "No case numbered " + $step1117 + " in $temp_full1118";
}
}
} catch($e1152) {
if(R.isCont($e1152) && ($step1117 !== 13)) {
$e1152.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1123,$temp_full1118,$step1117,[self1119,other1120,eq1121],[self$list1133,other$list1130,anf_arg223]);
}
if(R.isPyretException($e1152)) {
$e1152.pyretStack.push($al1123);
}
throw $e1152;
}
};
var anf_shared1605 = R.makeMethod2($temp_full1118,"_equals");
var $temp_full1154 = function($self789) {
var $step1153 = 0;
var $ans1155 = D;
var $al1156 = L[410];
try {
if(R.isActivationRecord($self789)) {
$step1153 = $self789.step;
$al1156 = $self789.from;
$ans1155 = $self789.ans;
self789 = $self789.args[0];
cases1158 = $self789.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[410],1,$t);
}
var self789 = $self789;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1153) {
case 0: $al1156 = L[386];
var lst1157 = G(self789,"elems",L[386]);
var cases1158 = lst1157;
$step1153 = 1;
$al1156 = L[409];
R._checkAnn(L[409],List1179,cases1158);
break;
case 1: var $cases_dispatch1192 = {"empty":2,
"link":3};
$al1156 = L[388];
$step1153 = $cases_dispatch1192[cases1158.$name] || 4;
break;
case 2: if(cases1158.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[387],false,L[388]);
}
$step1153 = 5;
$ans1155 = pick$none1159;
break;
case 3: if(cases1158.$arity !== 2) {
if(cases1158.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[407],2,cases1158.$arity,L[388]);
} else {
R.ffi.throwCasesSingletonErrorC(L[407],true,L[388]);
}
}
$step1153 = 5;
$al1156 = L[408];
var $temp_branch1180 = function($f1164,$r1160) {
var $step1181 = 0;
var $ans1182 = D;
var $al1183 = L[393];
try {
if(R.isActivationRecord($f1164)) {
$step1181 = $f1164.step;
$al1183 = $f1164.from;
$ans1182 = $f1164.ans;
f1164 = $f1164.args[0];
r1160 = $f1164.args[1];
cases1161 = $f1164.vars[0];
} else {
var f1164 = $f1164;
var r1160 = $r1160;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1181) {
case 0: var cases1161 = r1160;
$step1181 = 1;
$al1183 = L[406];
R._checkAnn(L[406],List1179,cases1161);
break;
case 1: var $cases_dispatch1189 = {"empty":2,
"link":4};
$al1183 = L[393];
$step1181 = $cases_dispatch1189[cases1161.$name] || 5;
break;
case 2: if(cases1161.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[392],false,L[393]);
}
var anf_fun245 = list$set1162.$var === D?U(L[389],"list-set"):list$set1162.$var;
$step1181 = 3;
$al1183 = L[391];
if(!(R.isFunction(anf_fun245))) {
R.ffi.throwNonFunApp($al1183,anf_fun245);
}
$ans1182 = anf_fun245.app(empty122);
break;
case 3: var anf_arg246 = $ans1182;
$step1181 = 6;
$al1183 = L[390];
if(!(R.isFunction(pick$some1163))) {
R.ffi.throwNonFunApp($al1183,pick$some1163);
}
$ans1182 = pick$some1163.app(f1164,anf_arg246);
break;
case 4: if(cases1161.$arity !== 2) {
if(cases1161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[404],2,cases1161.$arity,L[393]);
} else {
R.ffi.throwCasesSingletonErrorC(L[404],true,L[393]);
}
}
$step1181 = 6;
$al1183 = L[405];
var $temp_branch1184 = function($f21169,$r21167) {
var $step1185 = 0;
var $ans1186 = D;
var $al1187 = L[403];
try {
if(R.isActivationRecord($f21169)) {
$step1185 = $f21169.step;
$al1187 = $f21169.from;
$ans1186 = $f21169.ans;
f21169 = $f21169.args[0];
r21167 = $f21169.args[1];
anf_fun1168 = $f21169.vars[0];
} else {
var f21169 = $f21169;
var r21167 = $r21167;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1185) {
case 0: $step1185 = 1;
$al1187 = L[402];
if(!(R.isFunction(random4))) {
R.ffi.throwNonFunApp($al1187,random4);
}
$ans1186 = random4.app((2));
break;
case 1: var get$first1165 = $ans1186;
$step1185 = 2;
$al1187 = L[394];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1187,equal$always2);
}
$ans1186 = equal$always2.app(get$first1165,(0));
break;
case 2: var anf_arg254 = $ans1186;
$al1187 = L[394];
var anf_if1172 = R.checkWrapBoolean(anf_arg254);
$step1185 = R.isPyretTrue(anf_if1172)?3:5;
break;
case 3: var anf_fun1166 = list$set1162.$var === D?U(L[395],"list-set"):list$set1162.$var;
$step1185 = 4;
$al1187 = L[397];
if(!(R.isFunction(anf_fun1166))) {
R.ffi.throwNonFunApp($al1187,anf_fun1166);
}
$ans1186 = anf_fun1166.app(r1160);
break;
case 4: var anf_arg256 = $ans1186;
$step1185 = 8;
$al1187 = L[396];
if(!(R.isFunction(pick$some1163))) {
R.ffi.throwNonFunApp($al1187,pick$some1163);
}
$ans1186 = pick$some1163.app(f1164,anf_arg256);
break;
case 5: var anf_fun1168 = list$set1162.$var === D?U(L[398],"list-set"):list$set1162.$var;
$step1185 = 6;
$al1187 = L[401];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1187,link70);
}
$ans1186 = link70.app(f1164,r21167);
break;
case 6: var anf_arg257 = $ans1186;
$step1185 = 7;
$al1187 = L[400];
if(!(R.isFunction(anf_fun1168))) {
R.ffi.throwNonFunApp($al1187,anf_fun1168);
}
$ans1186 = anf_fun1168.app(anf_arg257);
break;
case 7: var anf_arg1171 = $ans1186;
$step1185 = 8;
$al1187 = L[399];
if(!(R.isFunction(pick$some1163))) {
R.ffi.throwNonFunApp($al1187,pick$some1163);
}
$ans1186 = pick$some1163.app(f21169,anf_arg1171);
break;
case 8: ++R.GAS;
return $ans1186;
default: throw "No case numbered " + $step1185 + " in $temp_branch1184";
}
}
} catch($e1188) {
if(R.isCont($e1188) && ($step1185 !== 8)) {
$e1188.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1187,$temp_branch1184,$step1185,[f21169,r21167],[anf_fun1168]);
}
if(R.isPyretException($e1188)) {
$e1188.pyretStack.push($al1187);
}
throw $e1188;
}
};
$ans1182 = cases1161.$app_fields($temp_branch1184,[false,false]);
break;
case 5: $step1181 = 6;
$al1183 = L[393];
$ans1182 = R.throwNoCasesMatched(L[393],cases1161);
break;
case 6: ++R.GAS;
return $ans1182;
default: throw "No case numbered " + $step1181 + " in $temp_branch1180";
}
}
} catch($e1191) {
if(R.isCont($e1191) && ($step1181 !== 6)) {
$e1191.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1183,$temp_branch1180,$step1181,[f1164,r1160],[cases1161]);
}
if(R.isPyretException($e1191)) {
$e1191.pyretStack.push($al1183);
}
throw $e1191;
}
};
$ans1155 = cases1158.$app_fields($temp_branch1180,[false,false]);
break;
case 4: $step1153 = 5;
$al1156 = L[388];
$ans1155 = R.throwNoCasesMatched(L[388],cases1158);
break;
case 5: ++R.GAS;
return $ans1155;
default: throw "No case numbered " + $step1153 + " in $temp_full1154";
}
}
} catch($e1193) {
if(R.isCont($e1193) && ($step1153 !== 5)) {
$e1193.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1156,$temp_full1154,$step1153,[self789],[cases1158]);
}
if(R.isPyretException($e1193)) {
$e1193.pyretStack.push($al1156);
}
throw $e1193;
}
};
var anf_variant_member1609 = R.makeMethod0($temp_full1154,"pick");
var $temp_full1195 = function($self858,$tostring1196) {
var $step1194 = 0;
var $ans1197 = D;
var $al1198 = L[421];
try {
if(R.isActivationRecord($self858)) {
$step1194 = $self858.step;
$al1198 = $self858.from;
$ans1197 = $self858.ans;
self858 = $self858.args[0];
tostring1196 = $self858.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[421],2,$t);
}
var self858 = $self858;
var tostring1196 = $tostring1196;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1194) {
case 0: $al1198 = L[411];
var anf_method_obj1209 = G(self858,"elems",L[411]);
var $temp_lam1200 = function($elem1201,$acc782) {
var $step1199 = 0;
var $ans1202 = D;
var $al1203 = L[417];
try {
if(R.isActivationRecord($elem1201)) {
$step1199 = $elem1201.step;
$al1203 = $elem1201.from;
$ans1202 = $elem1201.ans;
elem1201 = $elem1201.args[0];
acc782 = $elem1201.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[417],2,$t);
}
var elem1201 = $elem1201;
var acc782 = $acc782;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1199) {
case 0: $step1199 = 1;
$al1203 = L[412];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1203,equal$always2);
}
$ans1202 = equal$always2.app(acc782,(""));
break;
case 1: var anf_arg282 = $ans1202;
$al1203 = L[412];
var anf_if1207 = R.checkWrapBoolean(anf_arg282);
$step1199 = R.isPyretTrue(anf_if1207)?2:3;
break;
case 2: $step1199 = 6;
$al1203 = L[413];
if(!(R.isFunction(tostring1196))) {
R.ffi.throwNonFunApp($al1203,tostring1196);
}
$ans1202 = tostring1196.app(elem1201);
break;
case 3: $step1199 = 4;
$al1203 = L[416];
if(!(R.isFunction(tostring1196))) {
R.ffi.throwNonFunApp($al1203,tostring1196);
}
$ans1202 = tostring1196.app(elem1201);
break;
case 4: var anf_arg283 = $ans1202;
$step1199 = 5;
$al1203 = L[415];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1203,_plus1);
}
$ans1202 = _plus1.app(anf_arg283,(", "));
break;
case 5: var anf_arg1205 = $ans1202;
$step1199 = 6;
$al1203 = L[414];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1203,_plus1);
}
$ans1202 = _plus1.app(anf_arg1205,acc782);
break;
case 6: ++R.GAS;
return $ans1202;
default: throw "No case numbered " + $step1199 + " in $temp_lam1200";
}
}
} catch($e1208) {
if(R.isCont($e1208) && ($step1199 !== 6)) {
$e1208.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1203,$temp_lam1200,$step1199,[elem1201,acc782],[]);
}
if(R.isPyretException($e1208)) {
$e1208.pyretStack.push($al1203);
}
throw $e1208;
}
};
var anf_arg274 = R.makeFunction($temp_lam1200,"");
$step1194 = 1;
$al1198 = L[418];
$field1210 = R.getColonFieldLoc(anf_method_obj1209,"foldl",L[418]);
if(R.isMethod($field1210)) {
$ans1197 = $field1210.full_meth(anf_method_obj1209,anf_arg274,(""));
} else {
if(!(R.isFunction($field1210))) {
R.ffi.throwNonFunApp(L[418],$field1210);
}
$ans1197 = $field1210.app(anf_arg274,(""));
}
break;
case 1: var anf_arg269 = $ans1197;
$step1194 = 2;
$al1198 = L[420];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1198,_plus1);
}
$ans1197 = _plus1.app(("[set: "),anf_arg269);
break;
case 2: var anf_arg1211 = $ans1197;
$step1194 = 3;
$al1198 = L[419];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1198,_plus1);
}
$ans1197 = _plus1.app(anf_arg1211,("]"));
break;
case 3: ++R.GAS;
return $ans1197;
default: throw "No case numbered " + $step1194 + " in $temp_full1195";
}
}
} catch($e1212) {
if(R.isCont($e1212) && ($step1194 !== 3)) {
$e1212.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1198,$temp_full1195,$step1194,[self858,tostring1196],[]);
}
if(R.isPyretException($e1212)) {
$e1212.pyretStack.push($al1198);
}
throw $e1212;
}
};
var anf_variant_member1610 = R.makeMethod1($temp_full1195,"_tostring");
var $temp_full1214 = function($self868,$torepr1215) {
var $step1213 = 0;
var $ans1216 = D;
var $al1217 = L[432];
try {
if(R.isActivationRecord($self868)) {
$step1213 = $self868.step;
$al1217 = $self868.from;
$ans1216 = $self868.ans;
self868 = $self868.args[0];
torepr1215 = $self868.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[432],2,$t);
}
var self868 = $self868;
var torepr1215 = $torepr1215;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1213) {
case 0: $al1217 = L[422];
var anf_method_obj1227 = G(self868,"elems",L[422]);
var $temp_lam1219 = function($elem1220,$acc1221) {
var $step1218 = 0;
var $ans1222 = D;
var $al1223 = L[428];
try {
if(R.isActivationRecord($elem1220)) {
$step1218 = $elem1220.step;
$al1223 = $elem1220.from;
$ans1222 = $elem1220.ans;
elem1220 = $elem1220.args[0];
acc1221 = $elem1220.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[428],2,$t);
}
var elem1220 = $elem1220;
var acc1221 = $acc1221;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1218) {
case 0: $step1218 = 1;
$al1223 = L[423];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1223,equal$always2);
}
$ans1222 = equal$always2.app(acc1221,(""));
break;
case 1: var anf_arg275 = $ans1222;
$al1223 = L[423];
var anf_if1224 = R.checkWrapBoolean(anf_arg275);
$step1218 = R.isPyretTrue(anf_if1224)?2:3;
break;
case 2: $step1218 = 6;
$al1223 = L[424];
if(!(R.isFunction(torepr1215))) {
R.ffi.throwNonFunApp($al1223,torepr1215);
}
$ans1222 = torepr1215.app(elem1220);
break;
case 3: $step1218 = 4;
$al1223 = L[427];
if(!(R.isFunction(torepr1215))) {
R.ffi.throwNonFunApp($al1223,torepr1215);
}
$ans1222 = torepr1215.app(elem1220);
break;
case 4: var anf_arg284 = $ans1222;
$step1218 = 5;
$al1223 = L[426];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1223,_plus1);
}
$ans1222 = _plus1.app(anf_arg284,(", "));
break;
case 5: var anf_arg279 = $ans1222;
$step1218 = 6;
$al1223 = L[425];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1223,_plus1);
}
$ans1222 = _plus1.app(anf_arg279,acc1221);
break;
case 6: ++R.GAS;
return $ans1222;
default: throw "No case numbered " + $step1218 + " in $temp_lam1219";
}
}
} catch($e1225) {
if(R.isCont($e1225) && ($step1218 !== 6)) {
$e1225.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1223,$temp_lam1219,$step1218,[elem1220,acc1221],[]);
}
if(R.isPyretException($e1225)) {
$e1225.pyretStack.push($al1223);
}
throw $e1225;
}
};
var anf_arg285 = R.makeFunction($temp_lam1219,"");
$step1213 = 1;
$al1217 = L[429];
$field1228 = R.getColonFieldLoc(anf_method_obj1227,"foldl",L[429]);
if(R.isMethod($field1228)) {
$ans1216 = $field1228.full_meth(anf_method_obj1227,anf_arg285,(""));
} else {
if(!(R.isFunction($field1228))) {
R.ffi.throwNonFunApp(L[429],$field1228);
}
$ans1216 = $field1228.app(anf_arg285,(""));
}
break;
case 1: var anf_arg1230 = $ans1216;
$step1213 = 2;
$al1217 = L[431];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1217,_plus1);
}
$ans1216 = _plus1.app(("[list-set: "),anf_arg1230);
break;
case 2: var anf_arg1234 = $ans1216;
$step1213 = 3;
$al1217 = L[430];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1217,_plus1);
}
$ans1216 = _plus1.app(anf_arg1234,("]"));
break;
case 3: ++R.GAS;
return $ans1216;
default: throw "No case numbered " + $step1213 + " in $temp_full1214";
}
}
} catch($e1235) {
if(R.isCont($e1235) && ($step1213 !== 3)) {
$e1235.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1217,$temp_full1214,$step1213,[self868,torepr1215],[]);
}
if(R.isPyretException($e1235)) {
$e1235.pyretStack.push($al1217);
}
throw $e1235;
}
};
var anf_variant_member1611 = R.makeMethod1($temp_full1214,"_torepr");
var $temp_full1237 = function($self1238) {
var $step1236 = 0;
var $ans1239 = D;
var $al1240 = L[437];
try {
if(R.isActivationRecord($self1238)) {
$step1236 = $self1238.step;
$al1240 = $self1238.from;
$ans1239 = $self1238.ans;
self1238 = $self1238.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[437],1,$t);
}
var self1238 = $self1238;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1236) {
case 0: $step1236 = 1;
$al1240 = L[433];
$field1241 = R.getColonFieldLoc(self1238,"to-list",L[433]);
if(R.isMethod($field1241)) {
$ans1239 = $field1241.full_meth(self1238);
} else {
if(!(R.isFunction($field1241))) {
R.ffi.throwNonFunApp(L[433],$field1241);
}
$ans1239 = $field1241.app();
}
break;
case 1: var anf_method_obj1242 = $ans1239;
$al1240 = L[434];
var anf_arg304 = G(VS21,"vs-value",L[434]);
$step1236 = 2;
$al1240 = L[435];
$field1243 = R.getColonFieldLoc(anf_method_obj1242,"map",L[435]);
if(R.isMethod($field1243)) {
$ans1239 = $field1243.full_meth(anf_method_obj1242,anf_arg304);
} else {
if(!(R.isFunction($field1243))) {
R.ffi.throwNonFunApp(L[435],$field1243);
}
$ans1239 = $field1243.app(anf_arg304);
}
break;
case 2: var anf_arg1245 = $ans1239;
$step1236 = 3;
$al1240 = L[436];
$field1246 = R.getColonFieldLoc(VS21,"vs-collection",L[436]);
if(R.isMethod($field1246)) {
$ans1239 = $field1246.full_meth(VS21,("list-set"),anf_arg1245);
} else {
if(!(R.isFunction($field1246))) {
R.ffi.throwNonFunApp(L[436],$field1246);
}
$ans1239 = $field1246.app(("list-set"),anf_arg1245);
}
break;
case 3: ++R.GAS;
return $ans1239;
default: throw "No case numbered " + $step1236 + " in $temp_full1237";
}
}
} catch($e1247) {
if(R.isCont($e1247) && ($step1236 !== 3)) {
$e1247.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1240,$temp_full1237,$step1236,[self1238],[]);
}
if(R.isPyretException($e1247)) {
$e1247.pyretStack.push($al1240);
}
throw $e1247;
}
};
var anf_variant_member1612 = R.makeMethod0($temp_full1237,"_output");
var $temp_full1249 = function($self1250,$f1251,$base1252) {
var $step1248 = 0;
var $ans1253 = D;
var $al1254 = L[441];
try {
if(R.isActivationRecord($self1250)) {
$step1248 = $self1250.step;
$al1254 = $self1250.from;
$ans1253 = $self1250.ans;
self1250 = $self1250.args[0];
f1251 = $self1250.args[1];
base1252 = $self1250.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[441],3,$t);
}
var self1250 = $self1250;
var f1251 = $f1251;
var base1252 = $base1252;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1248) {
case 0: $step1248 = 1;
$al1254 = L[440];
R._checkAnn(L[440],R.Function,f1251);
break;
case 1: $al1254 = L[438];
var anf_arg305 = G(self1250,"elems",L[438]);
$step1248 = 2;
$al1254 = L[439];
if(!(R.isFunction(fold1148))) {
R.ffi.throwNonFunApp($al1254,fold1148);
}
$ans1253 = fold1148.app(f1251,base1252,anf_arg305);
break;
case 2: ++R.GAS;
return $ans1253;
default: throw "No case numbered " + $step1248 + " in $temp_full1249";
}
}
} catch($e1255) {
if(R.isCont($e1255) && ($step1248 !== 2)) {
$e1255.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1254,$temp_full1249,$step1248,[self1250,f1251,base1252],[]);
}
if(R.isPyretException($e1255)) {
$e1255.pyretStack.push($al1254);
}
throw $e1255;
}
};
var anf_variant_member1613 = R.makeMethod2($temp_full1249,"fold");
var $temp_full1257 = function($self1258,$elem1259) {
var $step1256 = 0;
var $ans1260 = D;
var $al1261 = L[445];
try {
if(R.isActivationRecord($self1258)) {
$step1256 = $self1258.step;
$al1261 = $self1258.from;
$ans1260 = $self1258.ans;
self1258 = $self1258.args[0];
elem1259 = $self1258.args[1];
ann_check_temp1264 = $self1258.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[445],2,$t);
}
var self1258 = $self1258;
var elem1259 = $elem1259;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1256) {
case 0: $al1261 = L[442];
var anf_method_obj1262 = G(self1258,"elems",L[442]);
$step1256 = 1;
$al1261 = L[443];
$field1263 = R.getColonFieldLoc(anf_method_obj1262,"member",L[443]);
if(R.isMethod($field1263)) {
$ans1260 = $field1263.full_meth(anf_method_obj1262,elem1259);
} else {
if(!(R.isFunction($field1263))) {
R.ffi.throwNonFunApp(L[443],$field1263);
}
$ans1260 = $field1263.app(elem1259);
}
break;
case 1: var ann_check_temp1264 = $ans1260;
$step1256 = 2;
$al1261 = L[444];
R._checkAnn(L[444],$type$Boolean9,ann_check_temp1264);
break;
case 2: $step1256 = 3;
$ans1260 = ann_check_temp1264;
break;
case 3: ++R.GAS;
return $ans1260;
default: throw "No case numbered " + $step1256 + " in $temp_full1257";
}
}
} catch($e1265) {
if(R.isCont($e1265) && ($step1256 !== 3)) {
$e1265.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1261,$temp_full1257,$step1256,[self1258,elem1259],[ann_check_temp1264]);
}
if(R.isPyretException($e1265)) {
$e1265.pyretStack.push($al1261);
}
throw $e1265;
}
};
var anf_variant_member1614 = R.makeMethod1($temp_full1257,"member");
var $temp_full1267 = function($self950,$elem1268) {
var $step1266 = 0;
var $ans1269 = D;
var $al1270 = L[454];
try {
if(R.isActivationRecord($self950)) {
$step1266 = $self950.step;
$al1270 = $self950.from;
$ans1269 = $self950.ans;
self950 = $self950.args[0];
elem1268 = $self950.args[1];
anf_fun1278 = $self950.vars[0];
ann_check_temp1281 = $self950.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[454],2,$t);
}
var self950 = $self950;
var elem1268 = $elem1268;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1266) {
case 0: $al1270 = L[446];
var anf_method_obj1271 = G(self950,"elems",L[446]);
$step1266 = 1;
$al1270 = L[447];
$field1276 = R.getColonFieldLoc(anf_method_obj1271,"member",L[447]);
if(R.isMethod($field1276)) {
$ans1269 = $field1276.full_meth(anf_method_obj1271,elem1268);
} else {
if(!(R.isFunction($field1276))) {
R.ffi.throwNonFunApp(L[447],$field1276);
}
$ans1269 = $field1276.app(elem1268);
}
break;
case 1: var anf_arg1277 = $ans1269;
$al1270 = L[448];
var anf_if1282 = R.checkWrapBoolean(anf_arg1277);
$step1266 = R.isPyretTrue(anf_if1282)?2:3;
break;
case 2: $step1266 = 5;
$ans1269 = self950;
break;
case 3: var anf_fun1278 = list$set1162.$var === D?U(L[449],"list-set"):list$set1162.$var;
$al1270 = L[450];
var anf_arg325 = G(self950,"elems",L[450]);
$step1266 = 4;
$al1270 = L[452];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1270,link70);
}
$ans1269 = link70.app(elem1268,anf_arg325);
break;
case 4: var anf_arg1280 = $ans1269;
$step1266 = 5;
$al1270 = L[451];
if(!(R.isFunction(anf_fun1278))) {
R.ffi.throwNonFunApp($al1270,anf_fun1278);
}
$ans1269 = anf_fun1278.app(anf_arg1280);
break;
case 5: var ann_check_temp1281 = $ans1269;
$step1266 = 6;
$al1270 = L[453];
R._checkAnn(L[453],Set1115,ann_check_temp1281);
break;
case 6: $step1266 = 7;
$ans1269 = ann_check_temp1281;
break;
case 7: ++R.GAS;
return $ans1269;
default: throw "No case numbered " + $step1266 + " in $temp_full1267";
}
}
} catch($e1283) {
if(R.isCont($e1283) && ($step1266 !== 7)) {
$e1283.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1270,$temp_full1267,$step1266,[self950,elem1268],[anf_fun1278,ann_check_temp1281]);
}
if(R.isPyretException($e1283)) {
$e1283.pyretStack.push($al1270);
}
throw $e1283;
}
};
var anf_variant_member1615 = R.makeMethod1($temp_full1267,"add");
var $temp_full1285 = function($self1286,$elem1287) {
var $step1284 = 0;
var $ans1288 = D;
var $al1289 = L[460];
try {
if(R.isActivationRecord($self1286)) {
$step1284 = $self1286.step;
$al1289 = $self1286.from;
$ans1288 = $self1286.ans;
self1286 = $self1286.args[0];
elem1287 = $self1286.args[1];
anf_fun1292 = $self1286.vars[0];
ann_check_temp1293 = $self1286.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[460],2,$t);
}
var self1286 = $self1286;
var elem1287 = $elem1287;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1284) {
case 0: var anf_fun1292 = list$set1162.$var === D?U(L[455],"list-set"):list$set1162.$var;
$al1289 = L[456];
var anf_method_obj1290 = G(self1286,"elems",L[456]);
$step1284 = 1;
$al1289 = L[457];
$field1291 = R.getColonFieldLoc(anf_method_obj1290,"remove",L[457]);
if(R.isMethod($field1291)) {
$ans1288 = $field1291.full_meth(anf_method_obj1290,elem1287);
} else {
if(!(R.isFunction($field1291))) {
R.ffi.throwNonFunApp(L[457],$field1291);
}
$ans1288 = $field1291.app(elem1287);
}
break;
case 1: var anf_arg328 = $ans1288;
$step1284 = 2;
$al1289 = L[459];
if(!(R.isFunction(anf_fun1292))) {
R.ffi.throwNonFunApp($al1289,anf_fun1292);
}
$ans1288 = anf_fun1292.app(anf_arg328);
break;
case 2: var ann_check_temp1293 = $ans1288;
$step1284 = 3;
$al1289 = L[458];
R._checkAnn(L[458],Set1115,ann_check_temp1293);
break;
case 3: $step1284 = 4;
$ans1288 = ann_check_temp1293;
break;
case 4: ++R.GAS;
return $ans1288;
default: throw "No case numbered " + $step1284 + " in $temp_full1285";
}
}
} catch($e1294) {
if(R.isCont($e1294) && ($step1284 !== 4)) {
$e1294.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1289,$temp_full1285,$step1284,[self1286,elem1287],[anf_fun1292,ann_check_temp1293]);
}
if(R.isPyretException($e1294)) {
$e1294.pyretStack.push($al1289);
}
throw $e1294;
}
};
var anf_variant_member1616 = R.makeMethod1($temp_full1285,"remove");
var $temp_full1296 = function($self1297) {
var $step1295 = 0;
var $ans1298 = D;
var $al1299 = L[463];
try {
if(R.isActivationRecord($self1297)) {
$step1295 = $self1297.step;
$al1299 = $self1297.from;
$ans1298 = $self1297.ans;
self1297 = $self1297.args[0];
ann_check_temp1300 = $self1297.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[463],1,$t);
}
var self1297 = $self1297;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1295) {
case 0: $al1299 = L[461];
var ann_check_temp1300 = G(self1297,"elems",L[461]);
$step1295 = 1;
$al1299 = L[462];
R._checkAnn(L[462],R.getDotAnn(L[462],"lists",lists27,"List"),ann_check_temp1300);
break;
case 1: $step1295 = 2;
$ans1298 = ann_check_temp1300;
break;
case 2: ++R.GAS;
return $ans1298;
default: throw "No case numbered " + $step1295 + " in $temp_full1296";
}
}
} catch($e1301) {
if(R.isCont($e1301) && ($step1295 !== 2)) {
$e1301.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1299,$temp_full1296,$step1295,[self1297],[ann_check_temp1300]);
}
if(R.isPyretException($e1301)) {
$e1301.pyretStack.push($al1299);
}
throw $e1301;
}
};
var anf_variant_member1617 = R.makeMethod0($temp_full1296,"to-list");
var $temp_full1303 = function($self1304,$other1305) {
var $step1302 = 0;
var $ans1306 = D;
var $al1307 = L[470];
try {
if(R.isActivationRecord($self1304)) {
$step1302 = $self1304.step;
$al1307 = $self1304.from;
$ans1306 = $self1304.ans;
self1304 = $self1304.args[0];
other1305 = $self1304.args[1];
ann_check_temp1318 = $self1304.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[470],2,$t);
}
var self1304 = $self1304;
var other1305 = $other1305;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1302) {
case 0: $step1302 = 1;
$al1307 = L[468];
R._checkAnn(L[468],Set1115,self1304);
break;
case 1: $step1302 = 2;
$al1307 = L[469];
R._checkAnn(L[469],Set1115,other1305);
break;
case 2: var $temp_lam1309 = function($u1310,$elem1311) {
var $step1308 = 0;
var $ans1312 = D;
var $al1313 = L[465];
try {
if(R.isActivationRecord($u1310)) {
$step1308 = $u1310.step;
$al1313 = $u1310.from;
$ans1312 = $u1310.ans;
u1310 = $u1310.args[0];
elem1311 = $u1310.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[465],2,$t);
}
var u1310 = $u1310;
var elem1311 = $elem1311;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1308) {
case 0: $step1308 = 1;
$al1313 = L[464];
$field1314 = R.getColonFieldLoc(u1310,"add",L[464]);
if(R.isMethod($field1314)) {
$ans1312 = $field1314.full_meth(u1310,elem1311);
} else {
if(!(R.isFunction($field1314))) {
R.ffi.throwNonFunApp(L[464],$field1314);
}
$ans1312 = $field1314.app(elem1311);
}
break;
case 1: ++R.GAS;
return $ans1312;
default: throw "No case numbered " + $step1308 + " in $temp_lam1309";
}
}
} catch($e1315) {
if(R.isCont($e1315) && ($step1308 !== 1)) {
$e1315.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1313,$temp_lam1309,$step1308,[u1310,elem1311],[]);
}
if(R.isPyretException($e1315)) {
$e1315.pyretStack.push($al1313);
}
throw $e1315;
}
};
var anf_arg1316 = R.makeFunction($temp_lam1309,"");
$step1302 = 3;
$al1307 = L[466];
$field1317 = R.getColonFieldLoc(other1305,"fold",L[466]);
if(R.isMethod($field1317)) {
$ans1306 = $field1317.full_meth(other1305,anf_arg1316,self1304);
} else {
if(!(R.isFunction($field1317))) {
R.ffi.throwNonFunApp(L[466],$field1317);
}
$ans1306 = $field1317.app(anf_arg1316,self1304);
}
break;
case 3: var ann_check_temp1318 = $ans1306;
$step1302 = 4;
$al1307 = L[467];
R._checkAnn(L[467],Set1115,ann_check_temp1318);
break;
case 4: $step1302 = 5;
$ans1306 = ann_check_temp1318;
break;
case 5: ++R.GAS;
return $ans1306;
default: throw "No case numbered " + $step1302 + " in $temp_full1303";
}
}
} catch($e1320) {
if(R.isCont($e1320) && ($step1302 !== 5)) {
$e1320.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1307,$temp_full1303,$step1302,[self1304,other1305],[ann_check_temp1318]);
}
if(R.isPyretException($e1320)) {
$e1320.pyretStack.push($al1307);
}
throw $e1320;
}
};
var anf_variant_member1618 = R.makeMethod1($temp_full1303,"union");
var $temp_full1322 = function($self1323,$other1324) {
var $step1321 = 0;
var $ans1325 = D;
var $al1326 = L[481];
try {
if(R.isActivationRecord($self1323)) {
$step1321 = $self1323.step;
$al1326 = $self1323.from;
$ans1325 = $self1323.ans;
self1323 = $self1323.args[0];
other1324 = $self1323.args[1];
ann_check_temp1340 = $self1323.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[481],2,$t);
}
var self1323 = $self1323;
var other1324 = $other1324;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1321) {
case 0: $step1321 = 1;
$al1326 = L[479];
R._checkAnn(L[479],Set1115,self1323);
break;
case 1: $step1321 = 2;
$al1326 = L[480];
R._checkAnn(L[480],Set1115,other1324);
break;
case 2: var $temp_lam1329 = function($elems1330,$elem1331) {
var $step1328 = 0;
var $ans1333 = D;
var $al1334 = L[473];
try {
if(R.isActivationRecord($elems1330)) {
$step1328 = $elems1330.step;
$al1334 = $elems1330.from;
$ans1333 = $elems1330.ans;
elems1330 = $elems1330.args[0];
elem1331 = $elems1330.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[473],2,$t);
}
var elems1330 = $elems1330;
var elem1331 = $elem1331;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1328) {
case 0: $step1328 = 1;
$al1334 = L[471];
$field1335 = R.getColonFieldLoc(other1324,"member",L[471]);
if(R.isMethod($field1335)) {
$ans1333 = $field1335.full_meth(other1324,elem1331);
} else {
if(!(R.isFunction($field1335))) {
R.ffi.throwNonFunApp(L[471],$field1335);
}
$ans1333 = $field1335.app(elem1331);
}
break;
case 1: var anf_arg350 = $ans1333;
$al1334 = L[471];
var anf_if754 = R.checkWrapBoolean(anf_arg350);
$step1328 = R.isPyretTrue(anf_if754)?2:3;
break;
case 2: $step1328 = 4;
$ans1333 = elems1330;
break;
case 3: $step1328 = 4;
$al1334 = L[472];
$field1336 = R.getColonFieldLoc(elems1330,"remove",L[472]);
if(R.isMethod($field1336)) {
$ans1333 = $field1336.full_meth(elems1330,elem1331);
} else {
if(!(R.isFunction($field1336))) {
R.ffi.throwNonFunApp(L[472],$field1336);
}
$ans1333 = $field1336.app(elem1331);
}
break;
case 4: ++R.GAS;
return $ans1333;
default: throw "No case numbered " + $step1328 + " in $temp_lam1329";
}
}
} catch($e1337) {
if(R.isCont($e1337) && ($step1328 !== 4)) {
$e1337.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1334,$temp_lam1329,$step1328,[elems1330,elem1331],[]);
}
if(R.isPyretException($e1337)) {
$e1337.pyretStack.push($al1334);
}
throw $e1337;
}
};
var anf_arg344 = R.makeFunction($temp_lam1329,"for-body<line 349, column 18>");
$al1326 = L[474];
var anf_arg736 = G(self1323,"elems",L[474]);
$al1326 = L[475];
var anf_arg342 = G(self1323,"elems",L[475]);
$step1321 = 3;
$al1326 = L[473];
if(!(R.isFunction(fold1148))) {
R.ffi.throwNonFunApp($al1326,fold1148);
}
$ans1325 = fold1148.app(anf_arg344,anf_arg736,anf_arg342);
break;
case 3: var new$elems1339 = $ans1325;
var anf_fun1338 = list$set1162.$var === D?U(L[476],"list-set"):list$set1162.$var;
$step1321 = 4;
$al1326 = L[478];
if(!(R.isFunction(anf_fun1338))) {
R.ffi.throwNonFunApp($al1326,anf_fun1338);
}
$ans1325 = anf_fun1338.app(new$elems1339);
break;
case 4: var ann_check_temp1340 = $ans1325;
$step1321 = 5;
$al1326 = L[477];
R._checkAnn(L[477],Set1115,ann_check_temp1340);
break;
case 5: $step1321 = 6;
$ans1325 = ann_check_temp1340;
break;
case 6: ++R.GAS;
return $ans1325;
default: throw "No case numbered " + $step1321 + " in $temp_full1322";
}
}
} catch($e1341) {
if(R.isCont($e1341) && ($step1321 !== 6)) {
$e1341.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1326,$temp_full1322,$step1321,[self1323,other1324],[ann_check_temp1340]);
}
if(R.isPyretException($e1341)) {
$e1341.pyretStack.push($al1326);
}
throw $e1341;
}
};
var anf_variant_member1619 = R.makeMethod1($temp_full1322,"intersect");
var $temp_full1343 = function($self1344,$other1345) {
var $step1342 = 0;
var $ans1346 = D;
var $al1347 = L[487];
try {
if(R.isActivationRecord($self1344)) {
$step1342 = $self1344.step;
$al1347 = $self1344.from;
$ans1346 = $self1344.ans;
self1344 = $self1344.args[0];
other1345 = $self1344.args[1];
ann_check_temp1350 = $self1344.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[487],2,$t);
}
var self1344 = $self1344;
var other1345 = $other1345;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1342) {
case 0: $step1342 = 1;
$al1347 = L[485];
R._checkAnn(L[485],Set1115,self1344);
break;
case 1: $step1342 = 2;
$al1347 = L[486];
R._checkAnn(L[486],Set1115,other1345);
break;
case 2: $al1347 = L[482];
var anf_arg354 = G(other1345,"member",L[482]);
$step1342 = 3;
$al1347 = L[483];
$field1349 = R.getColonFieldLoc(self1344,"any",L[483]);
if(R.isMethod($field1349)) {
$ans1346 = $field1349.full_meth(self1344,anf_arg354);
} else {
if(!(R.isFunction($field1349))) {
R.ffi.throwNonFunApp(L[483],$field1349);
}
$ans1346 = $field1349.app(anf_arg354);
}
break;
case 3: var ann_check_temp1350 = $ans1346;
$step1342 = 4;
$al1347 = L[484];
R._checkAnn(L[484],$type$Boolean9,ann_check_temp1350);
break;
case 4: $step1342 = 5;
$ans1346 = ann_check_temp1350;
break;
case 5: ++R.GAS;
return $ans1346;
default: throw "No case numbered " + $step1342 + " in $temp_full1343";
}
}
} catch($e1351) {
if(R.isCont($e1351) && ($step1342 !== 5)) {
$e1351.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1347,$temp_full1343,$step1342,[self1344,other1345],[ann_check_temp1350]);
}
if(R.isPyretException($e1351)) {
$e1351.pyretStack.push($al1347);
}
throw $e1351;
}
};
var anf_variant_member1620 = R.makeMethod1($temp_full1343,"overlaps");
var $temp_full1353 = function($self1152,$other1354) {
var $step1352 = 0;
var $ans1355 = D;
var $al1356 = L[498];
try {
if(R.isActivationRecord($self1152)) {
$step1352 = $self1152.step;
$al1356 = $self1152.from;
$ans1355 = $self1152.ans;
self1152 = $self1152.args[0];
other1354 = $self1152.args[1];
ann_check_temp1371 = $self1152.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[498],2,$t);
}
var self1152 = $self1152;
var other1354 = $other1354;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1352) {
case 0: $step1352 = 1;
$al1356 = L[496];
R._checkAnn(L[496],Set1115,self1152);
break;
case 1: $step1352 = 2;
$al1356 = L[497];
R._checkAnn(L[497],Set1115,other1354);
break;
case 2: var $temp_lam1359 = function($elems1360,$elem1361) {
var $step1358 = 0;
var $ans1362 = D;
var $al1363 = L[490];
try {
if(R.isActivationRecord($elems1360)) {
$step1358 = $elems1360.step;
$al1363 = $elems1360.from;
$ans1362 = $elems1360.ans;
elems1360 = $elems1360.args[0];
elem1361 = $elems1360.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[490],2,$t);
}
var elems1360 = $elems1360;
var elem1361 = $elem1361;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1358) {
case 0: $step1358 = 1;
$al1363 = L[488];
$field1364 = R.getColonFieldLoc(other1354,"member",L[488]);
if(R.isMethod($field1364)) {
$ans1362 = $field1364.full_meth(other1354,elem1361);
} else {
if(!(R.isFunction($field1364))) {
R.ffi.throwNonFunApp(L[488],$field1364);
}
$ans1362 = $field1364.app(elem1361);
}
break;
case 1: var anf_arg750 = $ans1362;
$al1363 = L[488];
var anf_if1367 = R.checkWrapBoolean(anf_arg750);
$step1358 = R.isPyretTrue(anf_if1367)?2:3;
break;
case 2: $step1358 = 4;
$al1363 = L[489];
$field1366 = R.getColonFieldLoc(elems1360,"remove",L[489]);
if(R.isMethod($field1366)) {
$ans1362 = $field1366.full_meth(elems1360,elem1361);
} else {
if(!(R.isFunction($field1366))) {
R.ffi.throwNonFunApp(L[489],$field1366);
}
$ans1362 = $field1366.app(elem1361);
}
break;
case 3: $step1358 = 4;
$ans1362 = elems1360;
break;
case 4: ++R.GAS;
return $ans1362;
default: throw "No case numbered " + $step1358 + " in $temp_lam1359";
}
}
} catch($e1368) {
if(R.isCont($e1368) && ($step1358 !== 4)) {
$e1368.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1363,$temp_lam1359,$step1358,[elems1360,elem1361],[]);
}
if(R.isPyretException($e1368)) {
$e1368.pyretStack.push($al1363);
}
throw $e1368;
}
};
var anf_arg379 = R.makeFunction($temp_lam1359,"for-body<line 366, column 18>");
$al1356 = L[491];
var anf_arg757 = G(self1152,"elems",L[491]);
$al1356 = L[492];
var anf_arg372 = G(self1152,"elems",L[492]);
$step1352 = 3;
$al1356 = L[490];
if(!(R.isFunction(fold1148))) {
R.ffi.throwNonFunApp($al1356,fold1148);
}
$ans1355 = fold1148.app(anf_arg379,anf_arg757,anf_arg372);
break;
case 3: var new$elems1370 = $ans1355;
var anf_fun1369 = list$set1162.$var === D?U(L[493],"list-set"):list$set1162.$var;
$step1352 = 4;
$al1356 = L[495];
if(!(R.isFunction(anf_fun1369))) {
R.ffi.throwNonFunApp($al1356,anf_fun1369);
}
$ans1355 = anf_fun1369.app(new$elems1370);
break;
case 4: var ann_check_temp1371 = $ans1355;
$step1352 = 5;
$al1356 = L[494];
R._checkAnn(L[494],Set1115,ann_check_temp1371);
break;
case 5: $step1352 = 6;
$ans1355 = ann_check_temp1371;
break;
case 6: ++R.GAS;
return $ans1355;
default: throw "No case numbered " + $step1352 + " in $temp_full1353";
}
}
} catch($e1372) {
if(R.isCont($e1372) && ($step1352 !== 6)) {
$e1372.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1356,$temp_full1353,$step1352,[self1152,other1354],[ann_check_temp1371]);
}
if(R.isPyretException($e1372)) {
$e1372.pyretStack.push($al1356);
}
throw $e1372;
}
};
var anf_variant_member1621 = R.makeMethod1($temp_full1353,"difference");
var $temp_full1374 = function($self1375) {
var $step1373 = 0;
var $ans1376 = D;
var $al1377 = L[503];
try {
if(R.isActivationRecord($self1375)) {
$step1373 = $self1375.step;
$al1377 = $self1375.from;
$ans1376 = $self1375.ans;
self1375 = $self1375.args[0];
ann_check_temp1380 = $self1375.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[503],1,$t);
}
var self1375 = $self1375;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1373) {
case 0: $step1373 = 1;
$al1377 = L[502];
R._checkAnn(L[502],Set1115,self1375);
break;
case 1: $al1377 = L[499];
var anf_method_obj1378 = G(self1375,"elems",L[499]);
$step1373 = 2;
$al1377 = L[500];
$field1379 = R.getColonFieldLoc(anf_method_obj1378,"length",L[500]);
if(R.isMethod($field1379)) {
$ans1376 = $field1379.full_meth(anf_method_obj1378);
} else {
if(!(R.isFunction($field1379))) {
R.ffi.throwNonFunApp(L[500],$field1379);
}
$ans1376 = $field1379.app();
}
break;
case 2: var ann_check_temp1380 = $ans1376;
$step1373 = 3;
$al1377 = L[501];
R._checkAnn(L[501],$type$Number8,ann_check_temp1380);
break;
case 3: $step1373 = 4;
$ans1376 = ann_check_temp1380;
break;
case 4: ++R.GAS;
return $ans1376;
default: throw "No case numbered " + $step1373 + " in $temp_full1374";
}
}
} catch($e1381) {
if(R.isCont($e1381) && ($step1373 !== 4)) {
$e1381.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1377,$temp_full1374,$step1373,[self1375],[ann_check_temp1380]);
}
if(R.isPyretException($e1381)) {
$e1381.pyretStack.push($al1377);
}
throw $e1381;
}
};
var anf_variant_member1622 = R.makeMethod0($temp_full1374,"size");
var $temp_full1383 = function($self1384) {
var $step1382 = 0;
var $ans1385 = D;
var $al1386 = L[506];
try {
if(R.isActivationRecord($self1384)) {
$step1382 = $self1384.step;
$al1386 = $self1384.from;
$ans1385 = $self1384.ans;
self1384 = $self1384.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[506],1,$t);
}
var self1384 = $self1384;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1382) {
case 0: $al1386 = L[504];
var anf_arg376 = G(self1384,"elems",L[504]);
$step1382 = 1;
$al1386 = L[505];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1386,is$empty1387);
}
$ans1385 = is$empty1387.app(anf_arg376);
break;
case 1: ++R.GAS;
return $ans1385;
default: throw "No case numbered " + $step1382 + " in $temp_full1383";
}
}
} catch($e1388) {
if(R.isCont($e1388) && ($step1382 !== 1)) {
$e1388.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1386,$temp_full1383,$step1382,[self1384],[]);
}
if(R.isPyretException($e1388)) {
$e1388.pyretStack.push($al1386);
}
throw $e1388;
}
};
var anf_variant_member1623 = R.makeMethod0($temp_full1383,"is-empty");
var $temp_full1390 = function($self1391,$f1392) {
var $step1389 = 0;
var $ans1393 = D;
var $al1394 = L[510];
try {
if(R.isActivationRecord($self1391)) {
$step1389 = $self1391.step;
$al1394 = $self1391.from;
$ans1393 = $self1391.ans;
self1391 = $self1391.args[0];
f1392 = $self1391.args[1];
ann_check_temp790 = $self1391.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[510],2,$t);
}
var self1391 = $self1391;
var f1392 = $f1392;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1389) {
case 0: $al1394 = L[507];
var anf_method_obj408 = G(self1391,"elems",L[507]);
$step1389 = 1;
$al1394 = L[508];
$field1396 = R.getColonFieldLoc(anf_method_obj408,"all",L[508]);
if(R.isMethod($field1396)) {
$ans1393 = $field1396.full_meth(anf_method_obj408,f1392);
} else {
if(!(R.isFunction($field1396))) {
R.ffi.throwNonFunApp(L[508],$field1396);
}
$ans1393 = $field1396.app(f1392);
}
break;
case 1: var ann_check_temp790 = $ans1393;
$step1389 = 2;
$al1394 = L[509];
R._checkAnn(L[509],$type$Boolean9,ann_check_temp790);
break;
case 2: $step1389 = 3;
$ans1393 = ann_check_temp790;
break;
case 3: ++R.GAS;
return $ans1393;
default: throw "No case numbered " + $step1389 + " in $temp_full1390";
}
}
} catch($e1397) {
if(R.isCont($e1397) && ($step1389 !== 3)) {
$e1397.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1394,$temp_full1390,$step1389,[self1391,f1392],[ann_check_temp790]);
}
if(R.isPyretException($e1397)) {
$e1397.pyretStack.push($al1394);
}
throw $e1397;
}
};
var anf_variant_member1624 = R.makeMethod1($temp_full1390,"all");
var $temp_full1399 = function($self1400,$f1401) {
var $step1398 = 0;
var $ans1402 = D;
var $al1403 = L[514];
try {
if(R.isActivationRecord($self1400)) {
$step1398 = $self1400.step;
$al1403 = $self1400.from;
$ans1402 = $self1400.ans;
self1400 = $self1400.args[0];
f1401 = $self1400.args[1];
ann_check_temp1406 = $self1400.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[514],2,$t);
}
var self1400 = $self1400;
var f1401 = $f1401;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1398) {
case 0: $al1403 = L[511];
var anf_method_obj1404 = G(self1400,"elems",L[511]);
$step1398 = 1;
$al1403 = L[512];
$field1405 = R.getColonFieldLoc(anf_method_obj1404,"any",L[512]);
if(R.isMethod($field1405)) {
$ans1402 = $field1405.full_meth(anf_method_obj1404,f1401);
} else {
if(!(R.isFunction($field1405))) {
R.ffi.throwNonFunApp(L[512],$field1405);
}
$ans1402 = $field1405.app(f1401);
}
break;
case 1: var ann_check_temp1406 = $ans1402;
$step1398 = 2;
$al1403 = L[513];
R._checkAnn(L[513],$type$Boolean9,ann_check_temp1406);
break;
case 2: $step1398 = 3;
$ans1402 = ann_check_temp1406;
break;
case 3: ++R.GAS;
return $ans1402;
default: throw "No case numbered " + $step1398 + " in $temp_full1399";
}
}
} catch($e1407) {
if(R.isCont($e1407) && ($step1398 !== 3)) {
$e1407.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1403,$temp_full1399,$step1398,[self1400,f1401],[ann_check_temp1406]);
}
if(R.isPyretException($e1407)) {
$e1407.pyretStack.push($al1403);
}
throw $e1407;
}
};
var anf_variant_member1625 = R.makeMethod1($temp_full1399,"any");
var $temp_full1409 = function($self1410) {
var $step1408 = 0;
var $ans1411 = D;
var $al1412 = L[524];
try {
if(R.isActivationRecord($self1410)) {
$step1408 = $self1410.step;
$al1412 = $self1410.from;
$ans1411 = $self1410.ans;
self1410 = $self1410.args[0];
t1413 = $self1410.vars[0];
cases1414 = $self1410.vars[1];
v1416 = $self1410.vars[2];
anf_fun1419 = $self1410.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[524],1,$t);
}
var self1410 = $self1410;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1408) {
case 0: $al1412 = L[515];
var t1413 = G(self1410,"elems",L[515]);
var cases1414 = t1413;
$step1408 = 1;
$al1412 = L[523];
R._checkAnn(L[523],AVLTree101,cases1414);
break;
case 1: var $cases_dispatch1423 = {"leaf":2,
"branch":3};
$al1412 = L[517];
$step1408 = $cases_dispatch1423[cases1414.$name] || 6;
break;
case 2: if(cases1414.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[516],false,L[517]);
}
$step1408 = 7;
$ans1411 = pick$none1159;
break;
case 3: if(cases1414.$arity !== 4) {
if(cases1414.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[522],4,cases1414.$arity,L[517]);
} else {
R.ffi.throwCasesSingletonErrorC(L[522],true,L[517]);
}
}
var $fn187 = cases1414.$constructor.$fieldNames;
var v1416 = R.derefField(cases1414.dict[$fn187[0]],cases1414.$mut_fields_mask[0],false);
R.derefField(cases1414.dict[$fn187[1]],cases1414.$mut_fields_mask[1],false);
R.derefField(cases1414.dict[$fn187[2]],cases1414.$mut_fields_mask[2],false);
R.derefField(cases1414.dict[$fn187[3]],cases1414.$mut_fields_mask[3],false);
var anf_fun1419 = tree$set1415.$var === D?U(L[518],"tree-set"):tree$set1415.$var;
$step1408 = 4;
$al1412 = L[519];
$field1418 = R.getColonFieldLoc(t1413,"remove",L[519]);
if(R.isMethod($field1418)) {
$ans1411 = $field1418.full_meth(t1413,v1416);
} else {
if(!(R.isFunction($field1418))) {
R.ffi.throwNonFunApp(L[519],$field1418);
}
$ans1411 = $field1418.app(v1416);
}
break;
case 4: var anf_arg395 = $ans1411;
$step1408 = 5;
$al1412 = L[521];
if(!(R.isFunction(anf_fun1419))) {
R.ffi.throwNonFunApp($al1412,anf_fun1419);
}
$ans1411 = anf_fun1419.app(anf_arg395);
break;
case 5: var anf_arg397 = $ans1411;
$step1408 = 7;
$al1412 = L[520];
if(!(R.isFunction(pick$some1163))) {
R.ffi.throwNonFunApp($al1412,pick$some1163);
}
$ans1411 = pick$some1163.app(v1416,anf_arg397);
break;
case 6: $step1408 = 7;
$al1412 = L[517];
$ans1411 = R.throwNoCasesMatched(L[517],cases1414);
break;
case 7: ++R.GAS;
return $ans1411;
default: throw "No case numbered " + $step1408 + " in $temp_full1409";
}
}
} catch($e1424) {
if(R.isCont($e1424) && ($step1408 !== 7)) {
$e1424.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1412,$temp_full1409,$step1408,[self1410],[t1413,cases1414,v1416,anf_fun1419]);
}
if(R.isPyretException($e1424)) {
$e1424.pyretStack.push($al1412);
}
throw $e1424;
}
};
var anf_variant_member1634 = R.makeMethod0($temp_full1409,"pick");
var $temp_full1426 = function($self1341,$tostring1427) {
var $step1425 = 0;
var $ans1428 = D;
var $al1429 = L[535];
try {
if(R.isActivationRecord($self1341)) {
$step1425 = $self1341.step;
$al1429 = $self1341.from;
$ans1428 = $self1341.ans;
self1341 = $self1341.args[0];
tostring1427 = $self1341.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[535],2,$t);
}
var self1341 = $self1341;
var tostring1427 = $tostring1427;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1425) {
case 0: $al1429 = L[525];
var anf_method_obj1439 = G(self1341,"elems",L[525]);
var $temp_lam1431 = function($acc1432,$elem1433) {
var $step1430 = 0;
var $ans1434 = D;
var $al1435 = L[531];
try {
if(R.isActivationRecord($acc1432)) {
$step1430 = $acc1432.step;
$al1435 = $acc1432.from;
$ans1434 = $acc1432.ans;
acc1432 = $acc1432.args[0];
elem1433 = $acc1432.args[1];
anf_arg411 = $acc1432.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[531],2,$t);
}
var acc1432 = $acc1432;
var elem1433 = $elem1433;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1430) {
case 0: $step1430 = 1;
$al1435 = L[526];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1435,equal$always2);
}
$ans1434 = equal$always2.app(acc1432,(""));
break;
case 1: var anf_arg410 = $ans1434;
$al1435 = L[526];
var anf_if1437 = R.checkWrapBoolean(anf_arg410);
$step1430 = R.isPyretTrue(anf_if1437)?2:3;
break;
case 2: $step1430 = 6;
$al1435 = L[527];
if(!(R.isFunction(tostring1427))) {
R.ffi.throwNonFunApp($al1435,tostring1427);
}
$ans1434 = tostring1427.app(elem1433);
break;
case 3: $step1430 = 4;
$al1435 = L[530];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1435,_plus1);
}
$ans1434 = _plus1.app(acc1432,(", "));
break;
case 4: var anf_arg411 = $ans1434;
$step1430 = 5;
$al1435 = L[529];
if(!(R.isFunction(tostring1427))) {
R.ffi.throwNonFunApp($al1435,tostring1427);
}
$ans1434 = tostring1427.app(elem1433);
break;
case 5: var anf_arg1436 = $ans1434;
$step1430 = 6;
$al1435 = L[528];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1435,_plus1);
}
$ans1434 = _plus1.app(anf_arg411,anf_arg1436);
break;
case 6: ++R.GAS;
return $ans1434;
default: throw "No case numbered " + $step1430 + " in $temp_lam1431";
}
}
} catch($e1438) {
if(R.isCont($e1438) && ($step1430 !== 6)) {
$e1438.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1435,$temp_lam1431,$step1430,[acc1432,elem1433],[anf_arg411]);
}
if(R.isPyretException($e1438)) {
$e1438.pyretStack.push($al1435);
}
throw $e1438;
}
};
var anf_arg834 = R.makeFunction($temp_lam1431,"");
$step1425 = 1;
$al1429 = L[532];
$field1440 = R.getColonFieldLoc(anf_method_obj1439,"fold",L[532]);
if(R.isMethod($field1440)) {
$ans1428 = $field1440.full_meth(anf_method_obj1439,anf_arg834,(""));
} else {
if(!(R.isFunction($field1440))) {
R.ffi.throwNonFunApp(L[532],$field1440);
}
$ans1428 = $field1440.app(anf_arg834,(""));
}
break;
case 1: var anf_arg424 = $ans1428;
$step1425 = 2;
$al1429 = L[534];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1429,_plus1);
}
$ans1428 = _plus1.app(("[tree-set: "),anf_arg424);
break;
case 2: var anf_arg425 = $ans1428;
$step1425 = 3;
$al1429 = L[533];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1429,_plus1);
}
$ans1428 = _plus1.app(anf_arg425,("]"));
break;
case 3: ++R.GAS;
return $ans1428;
default: throw "No case numbered " + $step1425 + " in $temp_full1426";
}
}
} catch($e1441) {
if(R.isCont($e1441) && ($step1425 !== 3)) {
$e1441.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1429,$temp_full1426,$step1425,[self1341,tostring1427],[]);
}
if(R.isPyretException($e1441)) {
$e1441.pyretStack.push($al1429);
}
throw $e1441;
}
};
var anf_variant_member1635 = R.makeMethod1($temp_full1426,"_tostring");
var $temp_full1443 = function($self1444,$torepr1445) {
var $step1442 = 0;
var $ans1446 = D;
var $al1447 = L[546];
try {
if(R.isActivationRecord($self1444)) {
$step1442 = $self1444.step;
$al1447 = $self1444.from;
$ans1446 = $self1444.ans;
self1444 = $self1444.args[0];
torepr1445 = $self1444.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[546],2,$t);
}
var self1444 = $self1444;
var torepr1445 = $torepr1445;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1442) {
case 0: $al1447 = L[536];
var anf_method_obj1456 = G(self1444,"elems",L[536]);
var $temp_lam1449 = function($acc1450,$elem1451) {
var $step1448 = 0;
var $ans1452 = D;
var $al1453 = L[542];
try {
if(R.isActivationRecord($acc1450)) {
$step1448 = $acc1450.step;
$al1453 = $acc1450.from;
$ans1452 = $acc1450.ans;
acc1450 = $acc1450.args[0];
elem1451 = $acc1450.args[1];
anf_arg842 = $acc1450.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[542],2,$t);
}
var acc1450 = $acc1450;
var elem1451 = $elem1451;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1448) {
case 0: $step1448 = 1;
$al1453 = L[537];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1453,equal$always2);
}
$ans1452 = equal$always2.app(acc1450,(""));
break;
case 1: var anf_arg427 = $ans1452;
$al1453 = L[537];
var anf_if1454 = R.checkWrapBoolean(anf_arg427);
$step1448 = R.isPyretTrue(anf_if1454)?2:3;
break;
case 2: $step1448 = 6;
$al1453 = L[538];
if(!(R.isFunction(torepr1445))) {
R.ffi.throwNonFunApp($al1453,torepr1445);
}
$ans1452 = torepr1445.app(elem1451);
break;
case 3: $step1448 = 4;
$al1453 = L[541];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1453,_plus1);
}
$ans1452 = _plus1.app(acc1450,(", "));
break;
case 4: var anf_arg842 = $ans1452;
$step1448 = 5;
$al1453 = L[540];
if(!(R.isFunction(torepr1445))) {
R.ffi.throwNonFunApp($al1453,torepr1445);
}
$ans1452 = torepr1445.app(elem1451);
break;
case 5: var anf_arg844 = $ans1452;
$step1448 = 6;
$al1453 = L[539];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1453,_plus1);
}
$ans1452 = _plus1.app(anf_arg842,anf_arg844);
break;
case 6: ++R.GAS;
return $ans1452;
default: throw "No case numbered " + $step1448 + " in $temp_lam1449";
}
}
} catch($e1455) {
if(R.isCont($e1455) && ($step1448 !== 6)) {
$e1455.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1453,$temp_lam1449,$step1448,[acc1450,elem1451],[anf_arg842]);
}
if(R.isPyretException($e1455)) {
$e1455.pyretStack.push($al1453);
}
throw $e1455;
}
};
var anf_arg1457 = R.makeFunction($temp_lam1449,"");
$step1442 = 1;
$al1447 = L[543];
$field1458 = R.getColonFieldLoc(anf_method_obj1456,"fold",L[543]);
if(R.isMethod($field1458)) {
$ans1446 = $field1458.full_meth(anf_method_obj1456,anf_arg1457,(""));
} else {
if(!(R.isFunction($field1458))) {
R.ffi.throwNonFunApp(L[543],$field1458);
}
$ans1446 = $field1458.app(anf_arg1457,(""));
}
break;
case 1: var anf_arg431 = $ans1446;
$step1442 = 2;
$al1447 = L[545];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1447,_plus1);
}
$ans1446 = _plus1.app(("[tree-set: "),anf_arg431);
break;
case 2: var anf_arg461 = $ans1446;
$step1442 = 3;
$al1447 = L[544];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1447,_plus1);
}
$ans1446 = _plus1.app(anf_arg461,("]"));
break;
case 3: ++R.GAS;
return $ans1446;
default: throw "No case numbered " + $step1442 + " in $temp_full1443";
}
}
} catch($e1459) {
if(R.isCont($e1459) && ($step1442 !== 3)) {
$e1459.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1447,$temp_full1443,$step1442,[self1444,torepr1445],[]);
}
if(R.isPyretException($e1459)) {
$e1459.pyretStack.push($al1447);
}
throw $e1459;
}
};
var anf_variant_member1636 = R.makeMethod1($temp_full1443,"_torepr");
var $temp_full1461 = function($self1535) {
var $step1460 = 0;
var $ans1462 = D;
var $al1463 = L[551];
try {
if(R.isActivationRecord($self1535)) {
$step1460 = $self1535.step;
$al1463 = $self1535.from;
$ans1462 = $self1535.ans;
self1535 = $self1535.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[551],1,$t);
}
var self1535 = $self1535;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1460) {
case 0: $step1460 = 1;
$al1463 = L[547];
$field1464 = R.getColonFieldLoc(self1535,"to-list",L[547]);
if(R.isMethod($field1464)) {
$ans1462 = $field1464.full_meth(self1535);
} else {
if(!(R.isFunction($field1464))) {
R.ffi.throwNonFunApp(L[547],$field1464);
}
$ans1462 = $field1464.app();
}
break;
case 1: var anf_method_obj1465 = $ans1462;
$al1463 = L[548];
var anf_arg1466 = G(VS21,"vs-value",L[548]);
$step1460 = 2;
$al1463 = L[549];
$field1467 = R.getColonFieldLoc(anf_method_obj1465,"map",L[549]);
if(R.isMethod($field1467)) {
$ans1462 = $field1467.full_meth(anf_method_obj1465,anf_arg1466);
} else {
if(!(R.isFunction($field1467))) {
R.ffi.throwNonFunApp(L[549],$field1467);
}
$ans1462 = $field1467.app(anf_arg1466);
}
break;
case 2: var anf_arg453 = $ans1462;
$step1460 = 3;
$al1463 = L[550];
$field1476 = R.getColonFieldLoc(VS21,"vs-collection",L[550]);
if(R.isMethod($field1476)) {
$ans1462 = $field1476.full_meth(VS21,("tree-set"),anf_arg453);
} else {
if(!(R.isFunction($field1476))) {
R.ffi.throwNonFunApp(L[550],$field1476);
}
$ans1462 = $field1476.app(("tree-set"),anf_arg453);
}
break;
case 3: ++R.GAS;
return $ans1462;
default: throw "No case numbered " + $step1460 + " in $temp_full1461";
}
}
} catch($e1478) {
if(R.isCont($e1478) && ($step1460 !== 3)) {
$e1478.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1463,$temp_full1461,$step1460,[self1535],[]);
}
if(R.isPyretException($e1478)) {
$e1478.pyretStack.push($al1463);
}
throw $e1478;
}
};
var anf_variant_member1637 = R.makeMethod0($temp_full1461,"_output");
var $temp_full1480 = function($self1481,$f1482,$base1483) {
var $step1479 = 0;
var $ans1484 = D;
var $al1485 = L[555];
try {
if(R.isActivationRecord($self1481)) {
$step1479 = $self1481.step;
$al1485 = $self1481.from;
$ans1484 = $self1481.ans;
self1481 = $self1481.args[0];
f1482 = $self1481.args[1];
base1483 = $self1481.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[555],3,$t);
}
var self1481 = $self1481;
var f1482 = $f1482;
var base1483 = $base1483;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1479) {
case 0: $step1479 = 1;
$al1485 = L[554];
R._checkAnn(L[554],R.Function,f1482);
break;
case 1: var anf_fun1486 = tree$fold803.$var;
$al1485 = L[552];
var anf_arg438 = G(self1481,"elems",L[552]);
$step1479 = 2;
$al1485 = L[553];
if(!(R.isFunction(anf_fun1486))) {
R.ffi.throwNonFunApp($al1485,anf_fun1486);
}
$ans1484 = anf_fun1486.app(f1482,base1483,anf_arg438);
break;
case 2: ++R.GAS;
return $ans1484;
default: throw "No case numbered " + $step1479 + " in $temp_full1480";
}
}
} catch($e1487) {
if(R.isCont($e1487) && ($step1479 !== 2)) {
$e1487.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1485,$temp_full1480,$step1479,[self1481,f1482,base1483],[]);
}
if(R.isPyretException($e1487)) {
$e1487.pyretStack.push($al1485);
}
throw $e1487;
}
};
var anf_variant_member1638 = R.makeMethod2($temp_full1480,"fold");
var $temp_full1489 = function($self1490,$elem1491) {
var $step1488 = 0;
var $ans1492 = D;
var $al1493 = L[559];
try {
if(R.isActivationRecord($self1490)) {
$step1488 = $self1490.step;
$al1493 = $self1490.from;
$ans1492 = $self1490.ans;
self1490 = $self1490.args[0];
elem1491 = $self1490.args[1];
ann_check_temp1497 = $self1490.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[559],2,$t);
}
var self1490 = $self1490;
var elem1491 = $elem1491;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1488) {
case 0: $al1493 = L[556];
var anf_method_obj1494 = G(self1490,"elems",L[556]);
$step1488 = 1;
$al1493 = L[557];
$field1496 = R.getColonFieldLoc(anf_method_obj1494,"contains",L[557]);
if(R.isMethod($field1496)) {
$ans1492 = $field1496.full_meth(anf_method_obj1494,elem1491);
} else {
if(!(R.isFunction($field1496))) {
R.ffi.throwNonFunApp(L[557],$field1496);
}
$ans1492 = $field1496.app(elem1491);
}
break;
case 1: var ann_check_temp1497 = $ans1492;
$step1488 = 2;
$al1493 = L[558];
R._checkAnn(L[558],$type$Boolean9,ann_check_temp1497);
break;
case 2: $step1488 = 3;
$ans1492 = ann_check_temp1497;
break;
case 3: ++R.GAS;
return $ans1492;
default: throw "No case numbered " + $step1488 + " in $temp_full1489";
}
}
} catch($e1498) {
if(R.isCont($e1498) && ($step1488 !== 3)) {
$e1498.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1493,$temp_full1489,$step1488,[self1490,elem1491],[ann_check_temp1497]);
}
if(R.isPyretException($e1498)) {
$e1498.pyretStack.push($al1493);
}
throw $e1498;
}
};
var anf_variant_member1639 = R.makeMethod1($temp_full1489,"member");
var $temp_full1500 = function($self1501,$elem1502) {
var $step1499 = 0;
var $ans1503 = D;
var $al1504 = L[565];
try {
if(R.isActivationRecord($self1501)) {
$step1499 = $self1501.step;
$al1504 = $self1501.from;
$ans1503 = $self1501.ans;
self1501 = $self1501.args[0];
elem1502 = $self1501.args[1];
anf_fun1507 = $self1501.vars[0];
ann_check_temp1508 = $self1501.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[565],2,$t);
}
var self1501 = $self1501;
var elem1502 = $elem1502;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1499) {
case 0: var anf_fun1507 = tree$set1415.$var === D?U(L[560],"tree-set"):tree$set1415.$var;
$al1504 = L[561];
var anf_method_obj1505 = G(self1501,"elems",L[561]);
$step1499 = 1;
$al1504 = L[562];
$field1506 = R.getColonFieldLoc(anf_method_obj1505,"insert",L[562]);
if(R.isMethod($field1506)) {
$ans1503 = $field1506.full_meth(anf_method_obj1505,elem1502);
} else {
if(!(R.isFunction($field1506))) {
R.ffi.throwNonFunApp(L[562],$field1506);
}
$ans1503 = $field1506.app(elem1502);
}
break;
case 1: var anf_arg456 = $ans1503;
$step1499 = 2;
$al1504 = L[564];
if(!(R.isFunction(anf_fun1507))) {
R.ffi.throwNonFunApp($al1504,anf_fun1507);
}
$ans1503 = anf_fun1507.app(anf_arg456);
break;
case 2: var ann_check_temp1508 = $ans1503;
$step1499 = 3;
$al1504 = L[563];
R._checkAnn(L[563],Set1115,ann_check_temp1508);
break;
case 3: $step1499 = 4;
$ans1503 = ann_check_temp1508;
break;
case 4: ++R.GAS;
return $ans1503;
default: throw "No case numbered " + $step1499 + " in $temp_full1500";
}
}
} catch($e1509) {
if(R.isCont($e1509) && ($step1499 !== 4)) {
$e1509.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1504,$temp_full1500,$step1499,[self1501,elem1502],[anf_fun1507,ann_check_temp1508]);
}
if(R.isPyretException($e1509)) {
$e1509.pyretStack.push($al1504);
}
throw $e1509;
}
};
var anf_variant_member1640 = R.makeMethod1($temp_full1500,"add");
var $temp_full1511 = function($self1512,$elem1513) {
var $step1510 = 0;
var $ans1514 = D;
var $al1515 = L[571];
try {
if(R.isActivationRecord($self1512)) {
$step1510 = $self1512.step;
$al1515 = $self1512.from;
$ans1514 = $self1512.ans;
self1512 = $self1512.args[0];
elem1513 = $self1512.args[1];
anf_fun1517 = $self1512.vars[0];
ann_check_temp1520 = $self1512.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[571],2,$t);
}
var self1512 = $self1512;
var elem1513 = $elem1513;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1510) {
case 0: var anf_fun1517 = tree$set1415.$var === D?U(L[566],"tree-set"):tree$set1415.$var;
$al1515 = L[567];
var anf_method_obj482 = G(self1512,"elems",L[567]);
$step1510 = 1;
$al1515 = L[568];
$field1516 = R.getColonFieldLoc(anf_method_obj482,"remove",L[568]);
if(R.isMethod($field1516)) {
$ans1514 = $field1516.full_meth(anf_method_obj482,elem1513);
} else {
if(!(R.isFunction($field1516))) {
R.ffi.throwNonFunApp(L[568],$field1516);
}
$ans1514 = $field1516.app(elem1513);
}
break;
case 1: var anf_arg1518 = $ans1514;
$step1510 = 2;
$al1515 = L[570];
if(!(R.isFunction(anf_fun1517))) {
R.ffi.throwNonFunApp($al1515,anf_fun1517);
}
$ans1514 = anf_fun1517.app(anf_arg1518);
break;
case 2: var ann_check_temp1520 = $ans1514;
$step1510 = 3;
$al1515 = L[569];
R._checkAnn(L[569],Set1115,ann_check_temp1520);
break;
case 3: $step1510 = 4;
$ans1514 = ann_check_temp1520;
break;
case 4: ++R.GAS;
return $ans1514;
default: throw "No case numbered " + $step1510 + " in $temp_full1511";
}
}
} catch($e1521) {
if(R.isCont($e1521) && ($step1510 !== 4)) {
$e1521.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1515,$temp_full1511,$step1510,[self1512,elem1513],[anf_fun1517,ann_check_temp1520]);
}
if(R.isPyretException($e1521)) {
$e1521.pyretStack.push($al1515);
}
throw $e1521;
}
};
var anf_variant_member1641 = R.makeMethod1($temp_full1511,"remove");
var $temp_full1523 = function($self1681) {
var $step1522 = 0;
var $ans1524 = D;
var $al1525 = L[575];
try {
if(R.isActivationRecord($self1681)) {
$step1522 = $self1681.step;
$al1525 = $self1681.from;
$ans1524 = $self1681.ans;
self1681 = $self1681.args[0];
ann_check_temp1528 = $self1681.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[575],1,$t);
}
var self1681 = $self1681;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1522) {
case 0: $al1525 = L[572];
var anf_method_obj475 = G(self1681,"elems",L[572]);
$step1522 = 1;
$al1525 = L[573];
$field1527 = R.getColonFieldLoc(anf_method_obj475,"inorder",L[573]);
if(R.isMethod($field1527)) {
$ans1524 = $field1527.full_meth(anf_method_obj475);
} else {
if(!(R.isFunction($field1527))) {
R.ffi.throwNonFunApp(L[573],$field1527);
}
$ans1524 = $field1527.app();
}
break;
case 1: var ann_check_temp1528 = $ans1524;
$step1522 = 2;
$al1525 = L[574];
R._checkAnn(L[574],R.getDotAnn(L[574],"lists",lists27,"List"),ann_check_temp1528);
break;
case 2: $step1522 = 3;
$ans1524 = ann_check_temp1528;
break;
case 3: ++R.GAS;
return $ans1524;
default: throw "No case numbered " + $step1522 + " in $temp_full1523";
}
}
} catch($e1529) {
if(R.isCont($e1529) && ($step1522 !== 3)) {
$e1529.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1525,$temp_full1523,$step1522,[self1681],[ann_check_temp1528]);
}
if(R.isPyretException($e1529)) {
$e1529.pyretStack.push($al1525);
}
throw $e1529;
}
};
var anf_variant_member1642 = R.makeMethod0($temp_full1523,"to-list");
var $temp_full1531 = function($self1532,$other1533) {
var $step1530 = 0;
var $ans1534 = D;
var $al1535 = L[578];
try {
if(R.isActivationRecord($self1532)) {
$step1530 = $self1532.step;
$al1535 = $self1532.from;
$ans1534 = $self1532.ans;
self1532 = $self1532.args[0];
other1533 = $self1532.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[578],2,$t);
}
var self1532 = $self1532;
var other1533 = $other1533;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1530) {
case 0: var anf_fun1537 = tree$set$union1536.$var === D?U(L[576],"tree-set-union"):tree$set$union1536.$var;
$step1530 = 1;
$al1535 = L[577];
if(!(R.isFunction(anf_fun1537))) {
R.ffi.throwNonFunApp($al1535,anf_fun1537);
}
$ans1534 = anf_fun1537.app(self1532,other1533);
break;
case 1: ++R.GAS;
return $ans1534;
default: throw "No case numbered " + $step1530 + " in $temp_full1531";
}
}
} catch($e1538) {
if(R.isCont($e1538) && ($step1530 !== 1)) {
$e1538.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1535,$temp_full1531,$step1530,[self1532,other1533],[]);
}
if(R.isPyretException($e1538)) {
$e1538.pyretStack.push($al1535);
}
throw $e1538;
}
};
var anf_variant_member1643 = R.makeMethod1($temp_full1531,"union");
var $temp_full1540 = function($self1541,$other1542) {
var $step1539 = 0;
var $ans1543 = D;
var $al1544 = L[581];
try {
if(R.isActivationRecord($self1541)) {
$step1539 = $self1541.step;
$al1544 = $self1541.from;
$ans1543 = $self1541.ans;
self1541 = $self1541.args[0];
other1542 = $self1541.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[581],2,$t);
}
var self1541 = $self1541;
var other1542 = $other1542;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1539) {
case 0: var anf_fun1546 = tree$set$intersect1545.$var === D?U(L[579],"tree-set-intersect"):tree$set$intersect1545.$var;
$step1539 = 1;
$al1544 = L[580];
if(!(R.isFunction(anf_fun1546))) {
R.ffi.throwNonFunApp($al1544,anf_fun1546);
}
$ans1543 = anf_fun1546.app(self1541,other1542);
break;
case 1: ++R.GAS;
return $ans1543;
default: throw "No case numbered " + $step1539 + " in $temp_full1540";
}
}
} catch($e1547) {
if(R.isCont($e1547) && ($step1539 !== 1)) {
$e1547.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1544,$temp_full1540,$step1539,[self1541,other1542],[]);
}
if(R.isPyretException($e1547)) {
$e1547.pyretStack.push($al1544);
}
throw $e1547;
}
};
var anf_variant_member1644 = R.makeMethod1($temp_full1540,"intersect");
var $temp_full1549 = function($self1838,$other1550) {
var $step1548 = 0;
var $ans1551 = D;
var $al1552 = L[587];
try {
if(R.isActivationRecord($self1838)) {
$step1548 = $self1838.step;
$al1552 = $self1838.from;
$ans1551 = $self1838.ans;
self1838 = $self1838.args[0];
other1550 = $self1838.args[1];
ann_check_temp1554 = $self1838.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[587],2,$t);
}
var self1838 = $self1838;
var other1550 = $other1550;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1548) {
case 0: $step1548 = 1;
$al1552 = L[585];
R._checkAnn(L[585],Set1115,self1838);
break;
case 1: $step1548 = 2;
$al1552 = L[586];
R._checkAnn(L[586],Set1115,other1550);
break;
case 2: $al1552 = L[582];
var anf_arg480 = G(other1550,"member",L[582]);
$step1548 = 3;
$al1552 = L[583];
$field1553 = R.getColonFieldLoc(self1838,"any",L[583]);
if(R.isMethod($field1553)) {
$ans1551 = $field1553.full_meth(self1838,anf_arg480);
} else {
if(!(R.isFunction($field1553))) {
R.ffi.throwNonFunApp(L[583],$field1553);
}
$ans1551 = $field1553.app(anf_arg480);
}
break;
case 3: var ann_check_temp1554 = $ans1551;
$step1548 = 4;
$al1552 = L[584];
R._checkAnn(L[584],$type$Boolean9,ann_check_temp1554);
break;
case 4: $step1548 = 5;
$ans1551 = ann_check_temp1554;
break;
case 5: ++R.GAS;
return $ans1551;
default: throw "No case numbered " + $step1548 + " in $temp_full1549";
}
}
} catch($e1555) {
if(R.isCont($e1555) && ($step1548 !== 5)) {
$e1555.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1552,$temp_full1549,$step1548,[self1838,other1550],[ann_check_temp1554]);
}
if(R.isPyretException($e1555)) {
$e1555.pyretStack.push($al1552);
}
throw $e1555;
}
};
var anf_variant_member1645 = R.makeMethod1($temp_full1549,"overlaps");
var $temp_full1557 = function($self1558,$other1559) {
var $step1556 = 0;
var $ans1560 = D;
var $al1561 = L[593];
try {
if(R.isActivationRecord($self1558)) {
$step1556 = $self1558.step;
$al1561 = $self1558.from;
$ans1560 = $self1558.ans;
self1558 = $self1558.args[0];
other1559 = $self1558.args[1];
ann_check_temp1564 = $self1558.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[593],2,$t);
}
var self1558 = $self1558;
var other1559 = $other1559;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1556) {
case 0: $step1556 = 1;
$al1561 = L[591];
R._checkAnn(L[591],Set1115,self1558);
break;
case 1: $step1556 = 2;
$al1561 = L[592];
R._checkAnn(L[592],Set1115,other1559);
break;
case 2: var anf_fun1563 = tree$set$difference1562.$var === D?U(L[588],"tree-set-difference"):tree$set$difference1562.$var;
$step1556 = 3;
$al1561 = L[590];
if(!(R.isFunction(anf_fun1563))) {
R.ffi.throwNonFunApp($al1561,anf_fun1563);
}
$ans1560 = anf_fun1563.app(self1558,other1559);
break;
case 3: var ann_check_temp1564 = $ans1560;
$step1556 = 4;
$al1561 = L[589];
R._checkAnn(L[589],Set1115,ann_check_temp1564);
break;
case 4: $step1556 = 5;
$ans1560 = ann_check_temp1564;
break;
case 5: ++R.GAS;
return $ans1560;
default: throw "No case numbered " + $step1556 + " in $temp_full1557";
}
}
} catch($e1565) {
if(R.isCont($e1565) && ($step1556 !== 5)) {
$e1565.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1561,$temp_full1557,$step1556,[self1558,other1559],[ann_check_temp1564]);
}
if(R.isPyretException($e1565)) {
$e1565.pyretStack.push($al1561);
}
throw $e1565;
}
};
var anf_variant_member1646 = R.makeMethod1($temp_full1557,"difference");
var $temp_full1567 = function($self1888) {
var $step1566 = 0;
var $ans1568 = D;
var $al1569 = L[598];
try {
if(R.isActivationRecord($self1888)) {
$step1566 = $self1888.step;
$al1569 = $self1888.from;
$ans1568 = $self1888.ans;
self1888 = $self1888.args[0];
ann_check_temp1574 = $self1888.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[598],1,$t);
}
var self1888 = $self1888;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1566) {
case 0: $step1566 = 1;
$al1569 = L[597];
R._checkAnn(L[597],Set1115,self1888);
break;
case 1: $al1569 = L[594];
var anf_method_obj1571 = G(self1888,"elems",L[594]);
$step1566 = 2;
$al1569 = L[595];
$field1573 = R.getColonFieldLoc(anf_method_obj1571,"count",L[595]);
if(R.isMethod($field1573)) {
$ans1568 = $field1573.full_meth(anf_method_obj1571);
} else {
if(!(R.isFunction($field1573))) {
R.ffi.throwNonFunApp(L[595],$field1573);
}
$ans1568 = $field1573.app();
}
break;
case 2: var ann_check_temp1574 = $ans1568;
$step1566 = 3;
$al1569 = L[596];
R._checkAnn(L[596],$type$Number8,ann_check_temp1574);
break;
case 3: $step1566 = 4;
$ans1568 = ann_check_temp1574;
break;
case 4: ++R.GAS;
return $ans1568;
default: throw "No case numbered " + $step1566 + " in $temp_full1567";
}
}
} catch($e1575) {
if(R.isCont($e1575) && ($step1566 !== 4)) {
$e1575.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1569,$temp_full1567,$step1566,[self1888],[ann_check_temp1574]);
}
if(R.isPyretException($e1575)) {
$e1575.pyretStack.push($al1569);
}
throw $e1575;
}
};
var anf_variant_member1647 = R.makeMethod0($temp_full1567,"size");
var $temp_full1577 = function($self1578) {
var $step1576 = 0;
var $ans1579 = D;
var $al1580 = L[601];
try {
if(R.isActivationRecord($self1578)) {
$step1576 = $self1578.step;
$al1580 = $self1578.from;
$ans1579 = $self1578.ans;
self1578 = $self1578.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[601],1,$t);
}
var self1578 = $self1578;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1576) {
case 0: var anf_fun1581 = is$leaf781.$var;
$al1580 = L[599];
var anf_arg498 = G(self1578,"elems",L[599]);
$step1576 = 1;
$al1580 = L[600];
if(!(R.isFunction(anf_fun1581))) {
R.ffi.throwNonFunApp($al1580,anf_fun1581);
}
$ans1579 = anf_fun1581.app(anf_arg498);
break;
case 1: ++R.GAS;
return $ans1579;
default: throw "No case numbered " + $step1576 + " in $temp_full1577";
}
}
} catch($e1582) {
if(R.isCont($e1582) && ($step1576 !== 1)) {
$e1582.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1580,$temp_full1577,$step1576,[self1578],[]);
}
if(R.isPyretException($e1582)) {
$e1582.pyretStack.push($al1580);
}
throw $e1582;
}
};
var anf_variant_member1648 = R.makeMethod0($temp_full1577,"is-empty");
var $temp_full1584 = function($self1585,$f1122) {
var $step1583 = 0;
var $ans1586 = D;
var $al1587 = L[605];
try {
if(R.isActivationRecord($self1585)) {
$step1583 = $self1585.step;
$al1587 = $self1585.from;
$ans1586 = $self1585.ans;
self1585 = $self1585.args[0];
f1122 = $self1585.args[1];
ann_check_temp1591 = $self1585.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[605],2,$t);
}
var self1585 = $self1585;
var f1122 = $f1122;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1583) {
case 0: $al1587 = L[602];
var anf_method_obj1588 = G(self1585,"elems",L[602]);
$step1583 = 1;
$al1587 = L[603];
$field1590 = R.getColonFieldLoc(anf_method_obj1588,"all",L[603]);
if(R.isMethod($field1590)) {
$ans1586 = $field1590.full_meth(anf_method_obj1588,f1122);
} else {
if(!(R.isFunction($field1590))) {
R.ffi.throwNonFunApp(L[603],$field1590);
}
$ans1586 = $field1590.app(f1122);
}
break;
case 1: var ann_check_temp1591 = $ans1586;
$step1583 = 2;
$al1587 = L[604];
R._checkAnn(L[604],$type$Boolean9,ann_check_temp1591);
break;
case 2: $step1583 = 3;
$ans1586 = ann_check_temp1591;
break;
case 3: ++R.GAS;
return $ans1586;
default: throw "No case numbered " + $step1583 + " in $temp_full1584";
}
}
} catch($e1592) {
if(R.isCont($e1592) && ($step1583 !== 3)) {
$e1592.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1587,$temp_full1584,$step1583,[self1585,f1122],[ann_check_temp1591]);
}
if(R.isPyretException($e1592)) {
$e1592.pyretStack.push($al1587);
}
throw $e1592;
}
};
var anf_variant_member1649 = R.makeMethod1($temp_full1584,"all");
var $temp_full1594 = function($self1595,$f1596) {
var $step1593 = 0;
var $ans1597 = D;
var $al1598 = L[609];
try {
if(R.isActivationRecord($self1595)) {
$step1593 = $self1595.step;
$al1598 = $self1595.from;
$ans1597 = $self1595.ans;
self1595 = $self1595.args[0];
f1596 = $self1595.args[1];
ann_check_temp1602 = $self1595.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[609],2,$t);
}
var self1595 = $self1595;
var f1596 = $f1596;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1593) {
case 0: $al1598 = L[606];
var anf_method_obj1599 = G(self1595,"elems",L[606]);
$step1593 = 1;
$al1598 = L[607];
$field1601 = R.getColonFieldLoc(anf_method_obj1599,"any",L[607]);
if(R.isMethod($field1601)) {
$ans1597 = $field1601.full_meth(anf_method_obj1599,f1596);
} else {
if(!(R.isFunction($field1601))) {
R.ffi.throwNonFunApp(L[607],$field1601);
}
$ans1597 = $field1601.app(f1596);
}
break;
case 1: var ann_check_temp1602 = $ans1597;
$step1593 = 2;
$al1598 = L[608];
R._checkAnn(L[608],$type$Boolean9,ann_check_temp1602);
break;
case 2: $step1593 = 3;
$ans1597 = ann_check_temp1602;
break;
case 3: ++R.GAS;
return $ans1597;
default: throw "No case numbered " + $step1593 + " in $temp_full1594";
}
}
} catch($e1603) {
if(R.isCont($e1603) && ($step1593 !== 3)) {
$e1603.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1598,$temp_full1594,$step1593,[self1595,f1596],[ann_check_temp1602]);
}
if(R.isPyretException($e1603)) {
$e1603.pyretStack.push($al1598);
}
throw $e1603;
}
};
var anf_variant_member6131 = R.makeMethod1($temp_full1594,"any");
var $list$set_getfields1628 = function(f) {
return f(this.dict["elems"]);
};
var $list$set_getfieldsref1626 = function(f,refmask) {
return f(R.derefField(this.dict["elems"],false,refmask[0]));
};
var $list$set_mutablemask1627 = [false];
var $list$set$base1606 = {"$fieldNames":["elems"],
"symmetric-difference":anf_shared1604,
"_equals":anf_shared1605,
"pick":anf_variant_member1609,
"_tostring":anf_variant_member1610,
"_torepr":anf_variant_member1611,
"_output":anf_variant_member1612,
"fold":anf_variant_member1613,
"member":anf_variant_member1614,
"add":anf_variant_member1615,
"remove":anf_variant_member1616,
"to-list":anf_variant_member1617,
"union":anf_variant_member1618,
"intersect":anf_variant_member1619,
"overlaps":anf_variant_member1620,
"difference":anf_variant_member1621,
"size":anf_variant_member1622,
"is-empty":anf_variant_member1623,
"all":anf_variant_member1624,
"any":anf_variant_member1625,
"_match":R.makeMatch("list-set",1)};
var $list$set$brander1607 = R.namedBrander("list-set",L[610]);
var $list$set$brands1608 = {};
$list$set$brands1608[Set42._brand] = true;
$list$set$brands1608[$list$set$brander1607._brand] = true;
var list$set1629 = R.makeVariantConstructor(L[612],function() {
return [R.getDotAnn(L[611],"lists",lists27,"List")];
},["elems1630"],[L[611]],[false],["elems1630"],$list$set_mutablemask1627,$list$set$base1606,$list$set$brands1608,"list-set",$list$set_getfieldsref1626,$list$set_getfields1628,$list$set$base1606);
var $tree$set_getfields1652 = function(f) {
return f(this.dict["elems"]);
};
var $tree$set_getfieldsref1650 = function(f,refmask) {
return f(R.derefField(this.dict["elems"],false,refmask[0]));
};
var $tree$set_mutablemask1651 = [false];
var $tree$set$base1631 = {"$fieldNames":["elems"],
"symmetric-difference":anf_shared1604,
"_equals":anf_shared1605,
"pick":anf_variant_member1634,
"_tostring":anf_variant_member1635,
"_torepr":anf_variant_member1636,
"_output":anf_variant_member1637,
"fold":anf_variant_member1638,
"member":anf_variant_member1639,
"add":anf_variant_member1640,
"remove":anf_variant_member1641,
"to-list":anf_variant_member1642,
"union":anf_variant_member1643,
"intersect":anf_variant_member1644,
"overlaps":anf_variant_member1645,
"difference":anf_variant_member1646,
"size":anf_variant_member1647,
"is-empty":anf_variant_member1648,
"all":anf_variant_member1649,
"any":anf_variant_member6131,
"_match":R.makeMatch("tree-set",1)};
var $tree$set$brander1632 = R.namedBrander("tree-set",L[613]);
var $tree$set$brands1633 = {};
$tree$set$brands1633[Set42._brand] = true;
$tree$set$brands1633[$tree$set$brander1632._brand] = true;
var tree$set1653 = R.makeVariantConstructor(L[615],function() {
return [AVLTree101];
},["elems1654"],[L[614]],[false],["elems1654"],$tree$set_mutablemask1651,$tree$set$base1631,$tree$set$brands1633,"tree-set",$tree$set_getfieldsref1650,$tree$set_getfields1652,$tree$set$base1631);
var anf_assign1655 = R.makeObject({"Set":G(Set42,"test",L[616]),
"is-list-set":G($list$set$brander1607,"test",L[610]),
"list-set":list$set1629,
"is-tree-set":G($tree$set$brander1632,"test",L[613]),
"tree-set":tree$set1653});
Set1656.$var = anf_assign1655;
var anf_bracket1657 = Set1656.$var;
$al40 = L[616];
var anf_assign1658 = G(anf_bracket1657,"Set",L[616]);
is$Set1124.$var = anf_assign1658;
var anf_bracket1659 = Set1656.$var;
$al40 = L[610];
var anf_assign1660 = G(anf_bracket1659,"is-list-set",L[610]);
is$list$set1661.$var = anf_assign1660;
var anf_bracket1662 = Set1656.$var;
$al40 = L[610];
var anf_assign1663 = G(anf_bracket1662,"list-set",L[610]);
list$set1162.$var = anf_assign1663;
var anf_bracket1664 = Set1656.$var;
$al40 = L[613];
var anf_assign1665 = G(anf_bracket1664,"is-tree-set",L[613]);
is$tree$set1666.$var = anf_assign1665;
var anf_bracket1667 = Set1656.$var;
$al40 = L[613];
var anf_assign1668 = G(anf_bracket1667,"tree-set",L[613]);
tree$set1415.$var = anf_assign1668;
var $temp_lam1670 = function($s1671) {
var $step1669 = 0;
var $ans1672 = D;
var $al1673 = L[623];
try {
if(R.isActivationRecord($s1671)) {
$step1669 = $s1671.step;
$al1673 = $s1671.from;
$ans1672 = $s1671.ans;
s1671 = $s1671.args[0];
cases1674 = $s1671.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[623],1,$t);
}
var s1671 = $s1671;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1669) {
case 0: var cases1674 = s1671;
$step1669 = 1;
$al1673 = L[622];
R._checkAnn(L[622],Set1115,cases1674);
break;
case 1: var $cases_dispatch1680 = {"list-set":2,
"tree-set":3};
$al1673 = L[619];
$step1669 = $cases_dispatch1680[cases1674.$name] || 4;
break;
case 2: if(cases1674.$arity !== 1) {
if(cases1674.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[618],1,cases1674.$arity,L[619]);
} else {
R.ffi.throwCasesSingletonErrorC(L[618],true,L[619]);
}
}
var $fn187 = cases1674.$constructor.$fieldNames;
var elems1675 = R.derefField(cases1674.dict[$fn187[0]],cases1674.$mut_fields_mask[0],false);
$step1669 = 5;
$al1673 = L[617];
$field1677 = R.getColonFieldLoc(elems1675,"sort",L[617]);
if(R.isMethod($field1677)) {
$ans1672 = $field1677.full_meth(elems1675);
} else {
if(!(R.isFunction($field1677))) {
R.ffi.throwNonFunApp(L[617],$field1677);
}
$ans1672 = $field1677.app();
}
break;
case 3: if(cases1674.$arity !== 1) {
if(cases1674.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[621],1,cases1674.$arity,L[619]);
} else {
R.ffi.throwCasesSingletonErrorC(L[621],true,L[619]);
}
}
var $fn187 = cases1674.$constructor.$fieldNames;
var elems1678 = R.derefField(cases1674.dict[$fn187[0]],cases1674.$mut_fields_mask[0],false);
$step1669 = 5;
$al1673 = L[620];
$field1679 = R.getColonFieldLoc(elems1678,"inorder",L[620]);
if(R.isMethod($field1679)) {
$ans1672 = $field1679.full_meth(elems1678);
} else {
if(!(R.isFunction($field1679))) {
R.ffi.throwNonFunApp(L[620],$field1679);
}
$ans1672 = $field1679.app();
}
break;
case 4: $step1669 = 5;
$al1673 = L[619];
$ans1672 = R.throwNoCasesMatched(L[619],cases1674);
break;
case 5: ++R.GAS;
return $ans1672;
default: throw "No case numbered " + $step1669 + " in $temp_lam1670";
}
}
} catch($e1681) {
if(R.isCont($e1681) && ($step1669 !== 5)) {
$e1681.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1673,$temp_lam1670,$step1669,[s1671],[cases1674]);
}
if(R.isPyretException($e1681)) {
$e1681.pyretStack.push($al1673);
}
throw $e1681;
}
};
var anf_assign1682 = R.makeFunction($temp_lam1670,"set-to-sorted-elems");
set$to$sorted$elems1683.$var = anf_assign1682;
var $temp_lam1685 = function($elems1686) {
var $step1684 = 0;
var $ans1687 = D;
var $al1688 = L[641];
try {
if(R.isActivationRecord($elems1686)) {
$step1684 = $elems1686.step;
$al1688 = $elems1686.from;
$ans1687 = $elems1686.ans;
elems1686 = $elems1686.args[0];
head1695 = $elems1686.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[641],1,$t);
}
var elems1686 = $elems1686;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1684) {
case 0: var head1695 = {"$var":elems1686};
$step1684 = 1;
$al1688 = L[624];
$field1689 = R.getColonFieldLoc(elems1686,"length",L[624]);
if(R.isMethod($field1689)) {
$ans1687 = $field1689.full_meth(elems1686);
} else {
if(!(R.isFunction($field1689))) {
R.ffi.throwNonFunApp(L[624],$field1689);
}
$ans1687 = $field1689.app();
}
break;
case 1: var len1709 = $ans1687;
var helper1696 = {"$var":D};
var $temp_lam1691 = function($l1692) {
var $step1690 = 0;
var $ans1693 = D;
var $al1694 = L[639];
try {
if(R.isActivationRecord($l1692)) {
$step1690 = $l1692.step;
$al1694 = $l1692.from;
$ans1693 = $l1692.ans;
l1692 = $l1692.args[0];
anf_fun550 = $l1692.vars[0];
left1700 = $l1692.vars[1];
item1704 = $l1692.vars[2];
anf_fun1703 = $l1692.vars[3];
anf_arg985 = $l1692.vars[4];
anf_fun1702 = $l1692.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[639],1,$t);
}
var l1692 = $l1692;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1690) {
case 0: $step1690 = 1;
$al1694 = L[625];
if(!(R.isFunction(_lessequal3))) {
R.ffi.throwNonFunApp($al1694,_lessequal3);
}
$ans1693 = _lessequal3.app(l1692,(0));
break;
case 1: var anf_arg540 = $ans1693;
$al1694 = L[625];
var anf_if1705 = R.checkWrapBoolean(anf_arg540);
$step1690 = R.isPyretTrue(anf_if1705)?2:3;
break;
case 2: $step1690 = 16;
$ans1693 = leaf92.$var;
break;
case 3: var anf_arg542 = head1695.$var;
$step1690 = 4;
$al1694 = L[626];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1694,is$empty1387);
}
$ans1693 = is$empty1387.app(anf_arg542);
break;
case 4: var anf_arg548 = $ans1693;
$al1694 = L[626];
var anf_if976 = R.checkWrapBoolean(anf_arg548);
$step1690 = R.isPyretTrue(anf_if976)?5:6;
break;
case 5: $step1690 = 16;
$ans1693 = leaf92.$var;
break;
case 6: var anf_fun550 = helper1696.$var;
$step1690 = 7;
$al1694 = L[638];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al1694,_divide15);
}
$ans1693 = _divide15.app(l1692,(2));
break;
case 7: var anf_arg551 = $ans1693;
$step1690 = 8;
$al1694 = L[637];
if(!(R.isFunction(num$floor2))) {
R.ffi.throwNonFunApp($al1694,num$floor2);
}
$ans1693 = num$floor2.app(anf_arg551);
break;
case 8: var anf_arg582 = $ans1693;
$step1690 = 9;
$al1694 = L[636];
if(!(R.isFunction(anf_fun550))) {
R.ffi.throwNonFunApp($al1694,anf_fun550);
}
$ans1693 = anf_fun550.app(anf_arg582);
break;
case 9: var left1700 = $ans1693;
var anf_bracket1697 = head1695.$var;
$al1694 = L[627];
var item1704 = G(anf_bracket1697,"first",L[627]);
var anf_bracket1698 = head1695.$var;
$al1694 = L[628];
var anf_assign1699 = G(anf_bracket1698,"rest",L[628]);
head1695.$var = anf_assign1699;
var anf_fun1703 = branch789.$var;
$step1690 = 10;
$al1694 = L[629];
$field1701 = R.getColonFieldLoc(left1700,"height",L[629]);
if(R.isMethod($field1701)) {
$ans1693 = $field1701.full_meth(left1700);
} else {
if(!(R.isFunction($field1701))) {
R.ffi.throwNonFunApp(L[629],$field1701);
}
$ans1693 = $field1701.app();
}
break;
case 10: var anf_arg559 = $ans1693;
$step1690 = 11;
$al1694 = L[635];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al1694,_plus1);
}
$ans1693 = _plus1.app(anf_arg559,(1));
break;
case 11: var anf_arg985 = $ans1693;
var anf_fun1702 = helper1696.$var;
$step1690 = 12;
$al1694 = L[634];
if(!(R.isFunction(_divide15))) {
R.ffi.throwNonFunApp($al1694,_divide15);
}
$ans1693 = _divide15.app(l1692,(2));
break;
case 12: var anf_arg560 = $ans1693;
$step1690 = 13;
$al1694 = L[633];
if(!(R.isFunction(_minus9))) {
R.ffi.throwNonFunApp($al1694,_minus9);
}
$ans1693 = _minus9.app(anf_arg560,(1));
break;
case 13: var anf_arg573 = $ans1693;
$step1690 = 14;
$al1694 = L[632];
if(!(R.isFunction(num$ceiling14))) {
R.ffi.throwNonFunApp($al1694,num$ceiling14);
}
$ans1693 = num$ceiling14.app(anf_arg573);
break;
case 14: var anf_arg575 = $ans1693;
$step1690 = 15;
$al1694 = L[631];
if(!(R.isFunction(anf_fun1702))) {
R.ffi.throwNonFunApp($al1694,anf_fun1702);
}
$ans1693 = anf_fun1702.app(anf_arg575);
break;
case 15: var anf_arg568 = $ans1693;
$step1690 = 16;
$al1694 = L[630];
if(!(R.isFunction(anf_fun1703))) {
R.ffi.throwNonFunApp($al1694,anf_fun1703);
}
$ans1693 = anf_fun1703.app(item1704,anf_arg985,left1700,anf_arg568);
break;
case 16: ++R.GAS;
return $ans1693;
default: throw "No case numbered " + $step1690 + " in $temp_lam1691";
}
}
} catch($e1706) {
if(R.isCont($e1706) && ($step1690 !== 16)) {
$e1706.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1694,$temp_lam1691,$step1690,[l1692],[anf_fun550,left1700,item1704,anf_fun1703,anf_arg985,anf_fun1702]);
}
if(R.isPyretException($e1706)) {
$e1706.pyretStack.push($al1694);
}
throw $e1706;
}
};
var anf_assign1707 = R.makeFunction($temp_lam1691,"helper");
helper1696.$var = anf_assign1707;
var anf_fun1708 = helper1696.$var;
$step1684 = 2;
$al1688 = L[640];
if(!(R.isFunction(anf_fun1708))) {
R.ffi.throwNonFunApp($al1688,anf_fun1708);
}
$ans1687 = anf_fun1708.app(len1709);
break;
case 2: ++R.GAS;
return $ans1687;
default: throw "No case numbered " + $step1684 + " in $temp_lam1685";
}
}
} catch($e1710) {
if(R.isCont($e1710) && ($step1684 !== 2)) {
$e1710.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1688,$temp_lam1685,$step1684,[elems1686],[head1695]);
}
if(R.isPyretException($e1710)) {
$e1710.pyretStack.push($al1688);
}
throw $e1710;
}
};
var anf_assign1711 = R.makeFunction($temp_lam1685,"elems-to-balanced-avl");
elems$to$balanced$avl1712.$var = anf_assign1711;
var $temp_lam1714 = function($l11715,$l21716) {
var $step1713 = 0;
var $ans1717 = D;
var $al1718 = L[660];
try {
if(R.isActivationRecord($l11715)) {
$step1713 = $l11715.step;
$al1718 = $l11715.from;
$ans1717 = $l11715.ans;
l11715 = $l11715.args[0];
l21716 = $l11715.args[1];
anf_arg611 = $l11715.vars[0];
anf_arg1727 = $l11715.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[660],2,$t);
}
var l11715 = $l11715;
var l21716 = $l21716;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1713) {
case 0: $step1713 = 1;
$al1718 = L[642];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1718,is$empty1387);
}
$ans1717 = is$empty1387.app(l11715);
break;
case 1: var anf_arg577 = $ans1717;
$al1718 = L[642];
var anf_if1732 = R.checkWrapBoolean(anf_arg577);
$step1713 = R.isPyretTrue(anf_if1732)?2:3;
break;
case 2: $step1713 = 15;
$ans1717 = l21716;
break;
case 3: $step1713 = 4;
$al1718 = L[643];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1718,is$empty1387);
}
$ans1717 = is$empty1387.app(l21716);
break;
case 4: var anf_arg579 = $ans1717;
$al1718 = L[643];
var anf_if1731 = R.checkWrapBoolean(anf_arg579);
$step1713 = R.isPyretTrue(anf_if1731)?5:6;
break;
case 5: $step1713 = 15;
$ans1717 = l11715;
break;
case 6: $al1718 = L[644];
var anf_arg1719 = G(l11715,"first",L[644]);
$al1718 = L[645];
var anf_arg1721 = G(l21716,"first",L[645]);
$step1713 = 7;
$al1718 = L[646];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al1718,_lessthan10);
}
$ans1717 = _lessthan10.app(anf_arg1719,anf_arg1721);
break;
case 7: var anf_arg1722 = $ans1717;
$al1718 = L[646];
var anf_if1730 = R.checkWrapBoolean(anf_arg1722);
$step1713 = R.isPyretTrue(anf_if1730)?8:10;
break;
case 8: $al1718 = L[647];
var anf_arg611 = G(l11715,"first",L[647]);
var anf_fun1724 = merge$no$dups1723.$var;
$al1718 = L[648];
var anf_arg604 = G(l11715,"rest",L[648]);
$step1713 = 9;
$al1718 = L[650];
if(!(R.isFunction(anf_fun1724))) {
R.ffi.throwNonFunApp($al1718,anf_fun1724);
}
$ans1717 = anf_fun1724.app(anf_arg604,l21716);
break;
case 9: var anf_arg597 = $ans1717;
$step1713 = 15;
$al1718 = L[649];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1718,link70);
}
$ans1717 = link70.app(anf_arg611,anf_arg597);
break;
case 10: $al1718 = L[651];
var anf_arg600 = G(l11715,"first",L[651]);
$al1718 = L[652];
var anf_arg605 = G(l21716,"first",L[652]);
$step1713 = 11;
$al1718 = L[653];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1718,equal$always2);
}
$ans1717 = equal$always2.app(anf_arg600,anf_arg605);
break;
case 11: var anf_arg606 = $ans1717;
$al1718 = L[653];
var anf_if1729 = R.checkWrapBoolean(anf_arg606);
$step1713 = R.isPyretTrue(anf_if1729)?12:13;
break;
case 12: var anf_fun1725 = merge$no$dups1723.$var;
$al1718 = L[654];
var anf_arg614 = G(l11715,"rest",L[654]);
$step1713 = 15;
$al1718 = L[655];
if(!(R.isFunction(anf_fun1725))) {
R.ffi.throwNonFunApp($al1718,anf_fun1725);
}
$ans1717 = anf_fun1725.app(anf_arg614,l21716);
break;
case 13: $al1718 = L[656];
var anf_arg1727 = G(l21716,"first",L[656]);
var anf_fun1726 = merge$no$dups1723.$var;
$al1718 = L[657];
var anf_arg628 = G(l21716,"rest",L[657]);
$step1713 = 14;
$al1718 = L[659];
if(!(R.isFunction(anf_fun1726))) {
R.ffi.throwNonFunApp($al1718,anf_fun1726);
}
$ans1717 = anf_fun1726.app(l11715,anf_arg628);
break;
case 14: var anf_arg1728 = $ans1717;
$step1713 = 15;
$al1718 = L[658];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1718,link70);
}
$ans1717 = link70.app(anf_arg1727,anf_arg1728);
break;
case 15: ++R.GAS;
return $ans1717;
default: throw "No case numbered " + $step1713 + " in $temp_lam1714";
}
}
} catch($e1733) {
if(R.isCont($e1733) && ($step1713 !== 15)) {
$e1733.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1718,$temp_lam1714,$step1713,[l11715,l21716],[anf_arg611,anf_arg1727]);
}
if(R.isPyretException($e1733)) {
$e1733.pyretStack.push($al1718);
}
throw $e1733;
}
};
var anf_assign1734 = R.makeFunction($temp_lam1714,"merge-no-dups");
merge$no$dups1723.$var = anf_assign1734;
var $temp_lam1736 = function($s11737,$s21738) {
var $step1735 = 0;
var $ans1739 = D;
var $al1740 = L[667];
try {
if(R.isActivationRecord($s11737)) {
$step1735 = $s11737.step;
$al1740 = $s11737.from;
$ans1739 = $s11737.ans;
s11737 = $s11737.args[0];
s21738 = $s11737.args[1];
s1$elems1743 = $s11737.vars[0];
anf_fun1746 = $s11737.vars[1];
ann_check_temp1747 = $s11737.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[667],2,$t);
}
var s11737 = $s11737;
var s21738 = $s21738;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1735) {
case 0: var anf_fun1741 = set$to$sorted$elems1683.$var;
$step1735 = 1;
$al1740 = L[666];
if(!(R.isFunction(anf_fun1741))) {
R.ffi.throwNonFunApp($al1740,anf_fun1741);
}
$ans1739 = anf_fun1741.app(s11737);
break;
case 1: var s1$elems1743 = $ans1739;
var anf_fun1103 = set$to$sorted$elems1683.$var;
$step1735 = 2;
$al1740 = L[665];
if(!(R.isFunction(anf_fun1103))) {
R.ffi.throwNonFunApp($al1740,anf_fun1103);
}
$ans1739 = anf_fun1103.app(s21738);
break;
case 2: var s2$elems1744 = $ans1739;
var anf_fun1742 = merge$no$dups1723.$var;
$step1735 = 3;
$al1740 = L[664];
if(!(R.isFunction(anf_fun1742))) {
R.ffi.throwNonFunApp($al1740,anf_fun1742);
}
$ans1739 = anf_fun1742.app(s1$elems1743,s2$elems1744);
break;
case 3: var new$elems1745 = $ans1739;
var anf_fun1746 = tree$set1415.$var;
var anf_fun635 = elems$to$balanced$avl1712.$var;
$step1735 = 4;
$al1740 = L[663];
if(!(R.isFunction(anf_fun635))) {
R.ffi.throwNonFunApp($al1740,anf_fun635);
}
$ans1739 = anf_fun635.app(new$elems1745);
break;
case 4: var anf_arg636 = $ans1739;
$step1735 = 5;
$al1740 = L[662];
if(!(R.isFunction(anf_fun1746))) {
R.ffi.throwNonFunApp($al1740,anf_fun1746);
}
$ans1739 = anf_fun1746.app(anf_arg636);
break;
case 5: var ann_check_temp1747 = $ans1739;
$step1735 = 6;
$al1740 = L[661];
R._checkAnn(L[661],Set1115,ann_check_temp1747);
break;
case 6: $step1735 = 7;
$ans1739 = ann_check_temp1747;
break;
case 7: ++R.GAS;
return $ans1739;
default: throw "No case numbered " + $step1735 + " in $temp_lam1736";
}
}
} catch($e1748) {
if(R.isCont($e1748) && ($step1735 !== 7)) {
$e1748.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1740,$temp_lam1736,$step1735,[s11737,s21738],[s1$elems1743,anf_fun1746,ann_check_temp1747]);
}
if(R.isPyretException($e1748)) {
$e1748.pyretStack.push($al1740);
}
throw $e1748;
}
};
var anf_assign1749 = R.makeFunction($temp_lam1736,"tree-set-union");
tree$set$union1536.$var = anf_assign1749;
var $temp_lam1751 = function($l11752,$l21753) {
var $step1750 = 0;
var $ans1754 = D;
var $al1755 = L[686];
try {
if(R.isActivationRecord($l11752)) {
$step1750 = $l11752.step;
$al1755 = $l11752.from;
$ans1754 = $l11752.ans;
l11752 = $l11752.args[0];
l21753 = $l11752.args[1];
anf_arg1762 = $l11752.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[686],2,$t);
}
var l11752 = $l11752;
var l21753 = $l21753;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1750) {
case 0: $step1750 = 1;
$al1755 = L[668];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1755,is$empty1387);
}
$ans1754 = is$empty1387.app(l11752);
break;
case 1: var anf_arg1107 = $ans1754;
$al1755 = L[668];
var anf_if1110 = R.checkWrapBoolean(anf_arg1107);
$step1750 = R.isPyretTrue(anf_if1110)?2:3;
break;
case 2: $step1750 = 5;
$ans1754 = (true);
break;
case 3: $step1750 = 4;
$al1755 = L[669];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1755,is$empty1387);
}
$ans1754 = is$empty1387.app(l21753);
break;
case 4: var anf_arg646 = $ans1754;
$step1750 = 5;
$al1755 = L[669];
$ans1754 = R.checkWrapBoolean(anf_arg646);
break;
case 5: var anf_arg642 = $ans1754;
$al1755 = L[670];
var anf_if1765 = R.checkWrapBoolean(anf_arg642);
$step1750 = R.isPyretTrue(anf_if1765)?6:7;
break;
case 6: $step1750 = 15;
$ans1754 = empty122;
break;
case 7: $al1755 = L[671];
var anf_arg649 = G(l11752,"first",L[671]);
$al1755 = L[672];
var anf_arg650 = G(l21753,"first",L[672]);
$step1750 = 8;
$al1755 = L[673];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al1755,_lessthan10);
}
$ans1754 = _lessthan10.app(anf_arg649,anf_arg650);
break;
case 8: var anf_arg1756 = $ans1754;
$al1755 = L[673];
var anf_if1764 = R.checkWrapBoolean(anf_arg1756);
$step1750 = R.isPyretTrue(anf_if1764)?9:10;
break;
case 9: var anf_fun1758 = merge$only$dups1757.$var;
$al1755 = L[674];
var anf_arg1759 = G(l11752,"rest",L[674]);
$step1750 = 15;
$al1755 = L[675];
if(!(R.isFunction(anf_fun1758))) {
R.ffi.throwNonFunApp($al1755,anf_fun1758);
}
$ans1754 = anf_fun1758.app(anf_arg1759,l21753);
break;
case 10: $al1755 = L[676];
var anf_arg656 = G(l11752,"first",L[676]);
$al1755 = L[677];
var anf_arg698 = G(l21753,"first",L[677]);
$step1750 = 11;
$al1755 = L[678];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1755,equal$always2);
}
$ans1754 = equal$always2.app(anf_arg656,anf_arg698);
break;
case 11: var anf_arg657 = $ans1754;
$al1755 = L[678];
var anf_if1147 = R.checkWrapBoolean(anf_arg657);
$step1750 = R.isPyretTrue(anf_if1147)?12:14;
break;
case 12: $al1755 = L[679];
var anf_arg1762 = G(l11752,"first",L[679]);
var anf_fun1760 = merge$only$dups1757.$var;
$al1755 = L[680];
var anf_arg671 = G(l11752,"rest",L[680]);
$al1755 = L[681];
var anf_arg1761 = G(l21753,"rest",L[681]);
$step1750 = 13;
$al1755 = L[683];
if(!(R.isFunction(anf_fun1760))) {
R.ffi.throwNonFunApp($al1755,anf_fun1760);
}
$ans1754 = anf_fun1760.app(anf_arg671,anf_arg1761);
break;
case 13: var anf_arg669 = $ans1754;
$step1750 = 15;
$al1755 = L[682];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1755,link70);
}
$ans1754 = link70.app(anf_arg1762,anf_arg669);
break;
case 14: var anf_fun1763 = merge$only$dups1757.$var;
$al1755 = L[684];
var anf_arg688 = G(l21753,"rest",L[684]);
$step1750 = 15;
$al1755 = L[685];
if(!(R.isFunction(anf_fun1763))) {
R.ffi.throwNonFunApp($al1755,anf_fun1763);
}
$ans1754 = anf_fun1763.app(l11752,anf_arg688);
break;
case 15: ++R.GAS;
return $ans1754;
default: throw "No case numbered " + $step1750 + " in $temp_lam1751";
}
}
} catch($e1766) {
if(R.isCont($e1766) && ($step1750 !== 15)) {
$e1766.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1755,$temp_lam1751,$step1750,[l11752,l21753],[anf_arg1762]);
}
if(R.isPyretException($e1766)) {
$e1766.pyretStack.push($al1755);
}
throw $e1766;
}
};
var anf_assign1767 = R.makeFunction($temp_lam1751,"merge-only-dups");
merge$only$dups1757.$var = anf_assign1767;
var $temp_lam1769 = function($s11770,$s21771) {
var $step1768 = 0;
var $ans1772 = D;
var $al1773 = L[693];
try {
if(R.isActivationRecord($s11770)) {
$step1768 = $s11770.step;
$al1773 = $s11770.from;
$ans1772 = $s11770.ans;
s11770 = $s11770.args[0];
s21771 = $s11770.args[1];
s1$elems1777 = $s11770.vars[0];
anf_fun1780 = $s11770.vars[1];
ann_check_temp1781 = $s11770.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[693],2,$t);
}
var s11770 = $s11770;
var s21771 = $s21771;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1768) {
case 0: var anf_fun1774 = set$to$sorted$elems1683.$var;
$step1768 = 1;
$al1773 = L[692];
if(!(R.isFunction(anf_fun1774))) {
R.ffi.throwNonFunApp($al1773,anf_fun1774);
}
$ans1772 = anf_fun1774.app(s11770);
break;
case 1: var s1$elems1777 = $ans1772;
var anf_fun1775 = set$to$sorted$elems1683.$var;
$step1768 = 2;
$al1773 = L[691];
if(!(R.isFunction(anf_fun1775))) {
R.ffi.throwNonFunApp($al1773,anf_fun1775);
}
$ans1772 = anf_fun1775.app(s21771);
break;
case 2: var s2$elems1778 = $ans1772;
var anf_fun1776 = merge$only$dups1757.$var;
$step1768 = 3;
$al1773 = L[690];
if(!(R.isFunction(anf_fun1776))) {
R.ffi.throwNonFunApp($al1773,anf_fun1776);
}
$ans1772 = anf_fun1776.app(s1$elems1777,s2$elems1778);
break;
case 3: var new$elems1779 = $ans1772;
var anf_fun1780 = tree$set1415.$var;
var anf_fun1159 = elems$to$balanced$avl1712.$var;
$step1768 = 4;
$al1773 = L[689];
if(!(R.isFunction(anf_fun1159))) {
R.ffi.throwNonFunApp($al1773,anf_fun1159);
}
$ans1772 = anf_fun1159.app(new$elems1779);
break;
case 4: var anf_arg691 = $ans1772;
$step1768 = 5;
$al1773 = L[688];
if(!(R.isFunction(anf_fun1780))) {
R.ffi.throwNonFunApp($al1773,anf_fun1780);
}
$ans1772 = anf_fun1780.app(anf_arg691);
break;
case 5: var ann_check_temp1781 = $ans1772;
$step1768 = 6;
$al1773 = L[687];
R._checkAnn(L[687],Set1115,ann_check_temp1781);
break;
case 6: $step1768 = 7;
$ans1772 = ann_check_temp1781;
break;
case 7: ++R.GAS;
return $ans1772;
default: throw "No case numbered " + $step1768 + " in $temp_lam1769";
}
}
} catch($e1782) {
if(R.isCont($e1782) && ($step1768 !== 7)) {
$e1782.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1773,$temp_lam1769,$step1768,[s11770,s21771],[s1$elems1777,anf_fun1780,ann_check_temp1781]);
}
if(R.isPyretException($e1782)) {
$e1782.pyretStack.push($al1773);
}
throw $e1782;
}
};
var anf_assign1783 = R.makeFunction($temp_lam1769,"tree-set-intersect");
tree$set$intersect1545.$var = anf_assign1783;
var $temp_lam1785 = function($l11786,$l21787) {
var $step1784 = 0;
var $ans1788 = D;
var $al1789 = L[712];
try {
if(R.isActivationRecord($l11786)) {
$step1784 = $l11786.step;
$al1789 = $l11786.from;
$ans1788 = $l11786.ans;
l11786 = $l11786.args[0];
l21787 = $l11786.args[1];
anf_arg772 = $l11786.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[712],2,$t);
}
var l11786 = $l11786;
var l21787 = $l21787;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1784) {
case 0: $step1784 = 1;
$al1789 = L[694];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1789,is$empty1387);
}
$ans1788 = is$empty1387.app(l11786);
break;
case 1: var anf_arg694 = $ans1788;
$al1789 = L[694];
var anf_if1804 = R.checkWrapBoolean(anf_arg694);
$step1784 = R.isPyretTrue(anf_if1804)?2:3;
break;
case 2: $step1784 = 5;
$ans1788 = (true);
break;
case 3: $step1784 = 4;
$al1789 = L[695];
if(!(R.isFunction(is$empty1387))) {
R.ffi.throwNonFunApp($al1789,is$empty1387);
}
$ans1788 = is$empty1387.app(l21787);
break;
case 4: var anf_arg1790 = $ans1788;
$step1784 = 5;
$al1789 = L[695];
$ans1788 = R.checkWrapBoolean(anf_arg1790);
break;
case 5: var anf_arg1792 = $ans1788;
$al1789 = L[696];
var anf_if1803 = R.checkWrapBoolean(anf_arg1792);
$step1784 = R.isPyretTrue(anf_if1803)?6:7;
break;
case 6: $step1784 = 15;
$ans1788 = l11786;
break;
case 7: $al1789 = L[697];
var anf_arg742 = G(l11786,"first",L[697]);
$al1789 = L[698];
var anf_arg733 = G(l21787,"first",L[698]);
$step1784 = 8;
$al1789 = L[699];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1789,equal$always2);
}
$ans1788 = equal$always2.app(anf_arg742,anf_arg733);
break;
case 8: var anf_arg743 = $ans1788;
$al1789 = L[699];
var anf_if1802 = R.checkWrapBoolean(anf_arg743);
$step1784 = R.isPyretTrue(anf_if1802)?9:10;
break;
case 9: var anf_fun1795 = merge$drop$l21793.$var;
$al1789 = L[700];
var anf_arg745 = G(l11786,"rest",L[700]);
$al1789 = L[701];
var anf_arg739 = G(l21787,"rest",L[701]);
$step1784 = 15;
$al1789 = L[702];
if(!(R.isFunction(anf_fun1795))) {
R.ffi.throwNonFunApp($al1789,anf_fun1795);
}
$ans1788 = anf_fun1795.app(anf_arg745,anf_arg739);
break;
case 10: $al1789 = L[703];
var anf_arg749 = G(l11786,"first",L[703]);
$al1789 = L[704];
var anf_arg1168 = G(l21787,"first",L[704]);
$step1784 = 11;
$al1789 = L[705];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al1789,_lessthan10);
}
$ans1788 = _lessthan10.app(anf_arg749,anf_arg1168);
break;
case 11: var anf_arg1170 = $ans1788;
$al1789 = L[705];
var anf_if1801 = R.checkWrapBoolean(anf_arg1170);
$step1784 = R.isPyretTrue(anf_if1801)?12:14;
break;
case 12: $al1789 = L[706];
var anf_arg772 = G(l11786,"first",L[706]);
var anf_fun1796 = merge$drop$l21793.$var;
$al1789 = L[707];
var anf_arg1799 = G(l11786,"rest",L[707]);
$step1784 = 13;
$al1789 = L[709];
if(!(R.isFunction(anf_fun1796))) {
R.ffi.throwNonFunApp($al1789,anf_fun1796);
}
$ans1788 = anf_fun1796.app(anf_arg1799,l21787);
break;
case 13: var anf_arg775 = $ans1788;
$step1784 = 15;
$al1789 = L[708];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1789,link70);
}
$ans1788 = link70.app(anf_arg772,anf_arg775);
break;
case 14: var anf_fun1800 = merge$drop$l21793.$var;
$al1789 = L[710];
var anf_arg777 = G(l21787,"rest",L[710]);
$step1784 = 15;
$al1789 = L[711];
if(!(R.isFunction(anf_fun1800))) {
R.ffi.throwNonFunApp($al1789,anf_fun1800);
}
$ans1788 = anf_fun1800.app(l11786,anf_arg777);
break;
case 15: ++R.GAS;
return $ans1788;
default: throw "No case numbered " + $step1784 + " in $temp_lam1785";
}
}
} catch($e1805) {
if(R.isCont($e1805) && ($step1784 !== 15)) {
$e1805.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1789,$temp_lam1785,$step1784,[l11786,l21787],[anf_arg772]);
}
if(R.isPyretException($e1805)) {
$e1805.pyretStack.push($al1789);
}
throw $e1805;
}
};
var anf_assign1806 = R.makeFunction($temp_lam1785,"merge-drop-l2");
merge$drop$l21793.$var = anf_assign1806;
var $temp_lam1808 = function($s11809,$s21810) {
var $step1807 = 0;
var $ans1811 = D;
var $al1812 = L[719];
try {
if(R.isActivationRecord($s11809)) {
$step1807 = $s11809.step;
$al1812 = $s11809.from;
$ans1811 = $s11809.ans;
s11809 = $s11809.args[0];
s21810 = $s11809.args[1];
s1$elems1815 = $s11809.vars[0];
anf_fun1192 = $s11809.vars[1];
ann_check_temp1819 = $s11809.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[719],2,$t);
}
var s11809 = $s11809;
var s21810 = $s21810;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1807) {
case 0: var anf_fun1191 = set$to$sorted$elems1683.$var;
$step1807 = 1;
$al1812 = L[718];
if(!(R.isFunction(anf_fun1191))) {
R.ffi.throwNonFunApp($al1812,anf_fun1191);
}
$ans1811 = anf_fun1191.app(s11809);
break;
case 1: var s1$elems1815 = $ans1811;
var anf_fun1813 = set$to$sorted$elems1683.$var;
$step1807 = 2;
$al1812 = L[717];
if(!(R.isFunction(anf_fun1813))) {
R.ffi.throwNonFunApp($al1812,anf_fun1813);
}
$ans1811 = anf_fun1813.app(s21810);
break;
case 2: var s2$elems1816 = $ans1811;
var anf_fun1814 = merge$drop$l21793.$var;
$step1807 = 3;
$al1812 = L[716];
if(!(R.isFunction(anf_fun1814))) {
R.ffi.throwNonFunApp($al1812,anf_fun1814);
}
$ans1811 = anf_fun1814.app(s1$elems1815,s2$elems1816);
break;
case 3: var new$elems1818 = $ans1811;
var anf_fun1192 = tree$set1415.$var;
var anf_fun1817 = elems$to$balanced$avl1712.$var;
$step1807 = 4;
$al1812 = L[715];
if(!(R.isFunction(anf_fun1817))) {
R.ffi.throwNonFunApp($al1812,anf_fun1817);
}
$ans1811 = anf_fun1817.app(new$elems1818);
break;
case 4: var anf_arg800 = $ans1811;
$step1807 = 5;
$al1812 = L[714];
if(!(R.isFunction(anf_fun1192))) {
R.ffi.throwNonFunApp($al1812,anf_fun1192);
}
$ans1811 = anf_fun1192.app(anf_arg800);
break;
case 5: var ann_check_temp1819 = $ans1811;
$step1807 = 6;
$al1812 = L[713];
R._checkAnn(L[713],Set1115,ann_check_temp1819);
break;
case 6: $step1807 = 7;
$ans1811 = ann_check_temp1819;
break;
case 7: ++R.GAS;
return $ans1811;
default: throw "No case numbered " + $step1807 + " in $temp_lam1808";
}
}
} catch($e1820) {
if(R.isCont($e1820) && ($step1807 !== 7)) {
$e1820.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1812,$temp_lam1808,$step1807,[s11809,s21810],[s1$elems1815,anf_fun1192,ann_check_temp1819]);
}
if(R.isPyretException($e1820)) {
$e1820.pyretStack.push($al1812);
}
throw $e1820;
}
};
var anf_assign1821 = R.makeFunction($temp_lam1808,"tree-set-difference");
tree$set$difference1562.$var = anf_assign1821;
var $temp_lam1823 = function($f1824,$s1825) {
var $step1822 = 0;
var $ans1826 = D;
var $al1827 = L[723];
try {
if(R.isActivationRecord($f1824)) {
$step1822 = $f1824.step;
$al1827 = $f1824.from;
$ans1826 = $f1824.ans;
f1824 = $f1824.args[0];
s1825 = $f1824.args[1];
ann_check_temp1830 = $f1824.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[723],2,$t);
}
var f1824 = $f1824;
var s1825 = $s1825;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1822) {
case 0: $step1822 = 1;
$al1827 = L[722];
R._checkAnn(L[722],Set1115,s1825);
break;
case 1: $step1822 = 2;
$al1827 = L[720];
$field1829 = R.getColonFieldLoc(s1825,"all",L[720]);
if(R.isMethod($field1829)) {
$ans1826 = $field1829.full_meth(s1825,f1824);
} else {
if(!(R.isFunction($field1829))) {
R.ffi.throwNonFunApp(L[720],$field1829);
}
$ans1826 = $field1829.app(f1824);
}
break;
case 2: var ann_check_temp1830 = $ans1826;
$step1822 = 3;
$al1827 = L[721];
R._checkAnn(L[721],$type$Boolean9,ann_check_temp1830);
break;
case 3: $step1822 = 4;
$ans1826 = ann_check_temp1830;
break;
case 4: ++R.GAS;
return $ans1826;
default: throw "No case numbered " + $step1822 + " in $temp_lam1823";
}
}
} catch($e1831) {
if(R.isCont($e1831) && ($step1822 !== 4)) {
$e1831.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1827,$temp_lam1823,$step1822,[f1824,s1825],[ann_check_temp1830]);
}
if(R.isPyretException($e1831)) {
$e1831.pyretStack.push($al1827);
}
throw $e1831;
}
};
var anf_assign1832 = R.makeFunction($temp_lam1823,"set-all");
set$all1833.$var = anf_assign1832;
var $temp_lam1835 = function($f1836,$s1837) {
var $step1834 = 0;
var $ans1838 = D;
var $al1839 = L[727];
try {
if(R.isActivationRecord($f1836)) {
$step1834 = $f1836.step;
$al1839 = $f1836.from;
$ans1838 = $f1836.ans;
f1836 = $f1836.args[0];
s1837 = $f1836.args[1];
ann_check_temp1841 = $f1836.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[727],2,$t);
}
var f1836 = $f1836;
var s1837 = $s1837;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1834) {
case 0: $step1834 = 1;
$al1839 = L[726];
R._checkAnn(L[726],Set1115,s1837);
break;
case 1: $step1834 = 2;
$al1839 = L[724];
$field1840 = R.getColonFieldLoc(s1837,"any",L[724]);
if(R.isMethod($field1840)) {
$ans1838 = $field1840.full_meth(s1837,f1836);
} else {
if(!(R.isFunction($field1840))) {
R.ffi.throwNonFunApp(L[724],$field1840);
}
$ans1838 = $field1840.app(f1836);
}
break;
case 2: var ann_check_temp1841 = $ans1838;
$step1834 = 3;
$al1839 = L[725];
R._checkAnn(L[725],$type$Boolean9,ann_check_temp1841);
break;
case 3: $step1834 = 4;
$ans1838 = ann_check_temp1841;
break;
case 4: ++R.GAS;
return $ans1838;
default: throw "No case numbered " + $step1834 + " in $temp_lam1835";
}
}
} catch($e1842) {
if(R.isCont($e1842) && ($step1834 !== 4)) {
$e1842.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1839,$temp_lam1835,$step1834,[f1836,s1837],[ann_check_temp1841]);
}
if(R.isPyretException($e1842)) {
$e1842.pyretStack.push($al1839);
}
throw $e1842;
}
};
var anf_assign1843 = R.makeFunction($temp_lam1835,"set-any");
set$any1844.$var = anf_assign1843;
var $temp_lam1846 = function($f1847,$base1848,$s1849) {
var $step1845 = 0;
var $ans1850 = D;
var $al1851 = L[730];
try {
if(R.isActivationRecord($f1847)) {
$step1845 = $f1847.step;
$al1851 = $f1847.from;
$ans1850 = $f1847.ans;
f1847 = $f1847.args[0];
base1848 = $f1847.args[1];
s1849 = $f1847.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[730],3,$t);
}
var f1847 = $f1847;
var base1848 = $base1848;
var s1849 = $s1849;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1845) {
case 0: $step1845 = 1;
$al1851 = L[729];
R._checkAnn(L[729],Set1115,s1849);
break;
case 1: $step1845 = 2;
$al1851 = L[728];
$field1854 = R.getColonFieldLoc(s1849,"fold",L[728]);
if(R.isMethod($field1854)) {
$ans1850 = $field1854.full_meth(s1849,f1847,base1848);
} else {
if(!(R.isFunction($field1854))) {
R.ffi.throwNonFunApp(L[728],$field1854);
}
$ans1850 = $field1854.app(f1847,base1848);
}
break;
case 2: ++R.GAS;
return $ans1850;
default: throw "No case numbered " + $step1845 + " in $temp_lam1846";
}
}
} catch($e1855) {
if(R.isCont($e1855) && ($step1845 !== 2)) {
$e1855.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1851,$temp_lam1846,$step1845,[f1847,base1848,s1849],[]);
}
if(R.isPyretException($e1855)) {
$e1855.pyretStack.push($al1851);
}
throw $e1855;
}
};
var anf_assign1856 = R.makeFunction($temp_lam1846,"set-fold");
set$fold1857.$var = anf_assign1856;
var $temp_lam1859 = function($lst1860,$base$set1861) {
var $step1858 = 0;
var $ans1862 = D;
var $al1863 = L[736];
try {
if(R.isActivationRecord($lst1860)) {
$step1858 = $lst1860.step;
$al1863 = $lst1860.from;
$ans1862 = $lst1860.ans;
lst1860 = $lst1860.args[0];
base$set1861 = $lst1860.args[1];
ann_check_temp1876 = $lst1860.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[736],2,$t);
}
var lst1860 = $lst1860;
var base$set1861 = $base$set1861;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1858) {
case 0: $step1858 = 1;
$al1863 = L[734];
R._checkAnn(L[734],R.getDotAnn(L[734],"lists",lists27,"List"),lst1860);
break;
case 1: $step1858 = 2;
$al1863 = L[735];
R._checkAnn(L[735],Set1115,base$set1861);
break;
case 2: var $temp_lam1865 = function($s1866,$elem1867) {
var $step1864 = 0;
var $ans1868 = D;
var $al1869 = L[732];
try {
if(R.isActivationRecord($s1866)) {
$step1864 = $s1866.step;
$al1869 = $s1866.from;
$ans1868 = $s1866.ans;
s1866 = $s1866.args[0];
elem1867 = $s1866.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[732],2,$t);
}
var s1866 = $s1866;
var elem1867 = $elem1867;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1864) {
case 0: $step1864 = 1;
$al1869 = L[731];
$field1872 = R.getColonFieldLoc(s1866,"add",L[731]);
if(R.isMethod($field1872)) {
$ans1868 = $field1872.full_meth(s1866,elem1867);
} else {
if(!(R.isFunction($field1872))) {
R.ffi.throwNonFunApp(L[731],$field1872);
}
$ans1868 = $field1872.app(elem1867);
}
break;
case 1: ++R.GAS;
return $ans1868;
default: throw "No case numbered " + $step1864 + " in $temp_lam1865";
}
}
} catch($e1873) {
if(R.isCont($e1873) && ($step1864 !== 1)) {
$e1873.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1869,$temp_lam1865,$step1864,[s1866,elem1867],[]);
}
if(R.isPyretException($e1873)) {
$e1873.pyretStack.push($al1869);
}
throw $e1873;
}
};
var anf_arg816 = R.makeFunction($temp_lam1865,"for-body<line 607, column 2>");
$step1858 = 3;
$al1863 = L[732];
$field1875 = R.getColonFieldLoc(lists18,"fold",L[732]);
if(R.isMethod($field1875)) {
$ans1862 = $field1875.full_meth(lists18,anf_arg816,base$set1861,lst1860);
} else {
if(!(R.isFunction($field1875))) {
R.ffi.throwNonFunApp(L[732],$field1875);
}
$ans1862 = $field1875.app(anf_arg816,base$set1861,lst1860);
}
break;
case 3: var ann_check_temp1876 = $ans1862;
$step1858 = 4;
$al1863 = L[733];
R._checkAnn(L[733],Set1115,ann_check_temp1876);
break;
case 4: $step1858 = 5;
$ans1862 = ann_check_temp1876;
break;
case 5: ++R.GAS;
return $ans1862;
default: throw "No case numbered " + $step1858 + " in $temp_lam1859";
}
}
} catch($e1877) {
if(R.isCont($e1877) && ($step1858 !== 5)) {
$e1877.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1863,$temp_lam1859,$step1858,[lst1860,base$set1861],[ann_check_temp1876]);
}
if(R.isPyretException($e1877)) {
$e1877.pyretStack.push($al1863);
}
throw $e1877;
}
};
var anf_assign1878 = R.makeFunction($temp_lam1859,"list-to-set");
list$to$set1879.$var = anf_assign1878;
var $temp_lam1881 = function($lst1882) {
var $step1880 = 0;
var $ans1883 = D;
var $al1884 = L[741];
try {
if(R.isActivationRecord($lst1882)) {
$step1880 = $lst1882.step;
$al1884 = $lst1882.from;
$ans1883 = $lst1882.ans;
lst1882 = $lst1882.args[0];
anf_fun1886 = $lst1882.vars[0];
ann_check_temp1887 = $lst1882.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[741],1,$t);
}
var lst1882 = $lst1882;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1880) {
case 0: $step1880 = 1;
$al1884 = L[740];
R._checkAnn(L[740],R.getDotAnn(L[740],"lists",lists27,"List"),lst1882);
break;
case 1: var anf_fun1886 = list$to$set1879.$var;
var anf_fun1885 = list$set1162.$var;
$step1880 = 2;
$al1884 = L[739];
if(!(R.isFunction(anf_fun1885))) {
R.ffi.throwNonFunApp($al1884,anf_fun1885);
}
$ans1883 = anf_fun1885.app(empty122);
break;
case 2: var anf_arg818 = $ans1883;
$step1880 = 3;
$al1884 = L[738];
if(!(R.isFunction(anf_fun1886))) {
R.ffi.throwNonFunApp($al1884,anf_fun1886);
}
$ans1883 = anf_fun1886.app(lst1882,anf_arg818);
break;
case 3: var ann_check_temp1887 = $ans1883;
$step1880 = 4;
$al1884 = L[737];
R._checkAnn(L[737],Set1115,ann_check_temp1887);
break;
case 4: $step1880 = 5;
$ans1883 = ann_check_temp1887;
break;
case 5: ++R.GAS;
return $ans1883;
default: throw "No case numbered " + $step1880 + " in $temp_lam1881";
}
}
} catch($e1888) {
if(R.isCont($e1888) && ($step1880 !== 5)) {
$e1888.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1884,$temp_lam1881,$step1880,[lst1882],[anf_fun1886,ann_check_temp1887]);
}
if(R.isPyretException($e1888)) {
$e1888.pyretStack.push($al1884);
}
throw $e1888;
}
};
var anf_assign1889 = R.makeFunction($temp_lam1881,"list-to-list-set");
list$to$list$set1890.$var = anf_assign1889;
var $temp_lam1892 = function($lst1893) {
var $step1891 = 0;
var $ans1894 = D;
var $al1895 = L[746];
try {
if(R.isActivationRecord($lst1893)) {
$step1891 = $lst1893.step;
$al1895 = $lst1893.from;
$ans1894 = $lst1893.ans;
lst1893 = $lst1893.args[0];
anf_fun1898 = $lst1893.vars[0];
ann_check_temp1899 = $lst1893.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[746],1,$t);
}
var lst1893 = $lst1893;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1891) {
case 0: $step1891 = 1;
$al1895 = L[745];
R._checkAnn(L[745],R.getDotAnn(L[745],"lists",lists27,"List"),lst1893);
break;
case 1: var anf_fun1898 = list$to$set1879.$var;
var anf_fun1896 = tree$set1415.$var;
var anf_arg823 = leaf92.$var;
$step1891 = 2;
$al1895 = L[744];
if(!(R.isFunction(anf_fun1896))) {
R.ffi.throwNonFunApp($al1895,anf_fun1896);
}
$ans1894 = anf_fun1896.app(anf_arg823);
break;
case 2: var anf_arg831 = $ans1894;
$step1891 = 3;
$al1895 = L[743];
if(!(R.isFunction(anf_fun1898))) {
R.ffi.throwNonFunApp($al1895,anf_fun1898);
}
$ans1894 = anf_fun1898.app(lst1893,anf_arg831);
break;
case 3: var ann_check_temp1899 = $ans1894;
$step1891 = 4;
$al1895 = L[742];
R._checkAnn(L[742],Set1115,ann_check_temp1899);
break;
case 4: $step1891 = 5;
$ans1894 = ann_check_temp1899;
break;
case 5: ++R.GAS;
return $ans1894;
default: throw "No case numbered " + $step1891 + " in $temp_lam1892";
}
}
} catch($e1900) {
if(R.isCont($e1900) && ($step1891 !== 5)) {
$e1900.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1895,$temp_lam1892,$step1891,[lst1893],[anf_fun1898,ann_check_temp1899]);
}
if(R.isPyretException($e1900)) {
$e1900.pyretStack.push($al1895);
}
throw $e1900;
}
};
var anf_assign1901 = R.makeFunction($temp_lam1892,"list-to-tree-set");
list$to$tree$set1902.$var = anf_assign1901;
var $temp_lam1904 = function($lst1905) {
var $step1903 = 0;
var $ans1906 = D;
var $al1907 = L[750];
try {
if(R.isActivationRecord($lst1905)) {
$step1903 = $lst1905.step;
$al1907 = $lst1905.from;
$ans1906 = $lst1905.ans;
lst1905 = $lst1905.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[750],1,$t);
}
var lst1905 = $lst1905;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1903) {
case 0: $step1903 = 1;
$al1907 = L[749];
R._checkAnn(L[749],R.getDotAnn(L[749],"lists",lists27,"List"),lst1905);
break;
case 1: var $temp_lam1910 = function($tree1911,$elt1912) {
var $step1909 = 0;
var $ans1913 = D;
var $al1914 = L[748];
try {
if(R.isActivationRecord($tree1911)) {
$step1909 = $tree1911.step;
$al1914 = $tree1911.from;
$ans1913 = $tree1911.ans;
tree1911 = $tree1911.args[0];
elt1912 = $tree1911.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[748],2,$t);
}
var tree1911 = $tree1911;
var elt1912 = $elt1912;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1909) {
case 0: $step1909 = 1;
$al1914 = L[747];
$field1915 = R.getColonFieldLoc(tree1911,"insert",L[747]);
if(R.isMethod($field1915)) {
$ans1913 = $field1915.full_meth(tree1911,elt1912);
} else {
if(!(R.isFunction($field1915))) {
R.ffi.throwNonFunApp(L[747],$field1915);
}
$ans1913 = $field1915.app(elt1912);
}
break;
case 1: ++R.GAS;
return $ans1913;
default: throw "No case numbered " + $step1909 + " in $temp_lam1910";
}
}
} catch($e1916) {
if(R.isCont($e1916) && ($step1909 !== 1)) {
$e1916.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1914,$temp_lam1910,$step1909,[tree1911,elt1912],[]);
}
if(R.isPyretException($e1916)) {
$e1916.pyretStack.push($al1914);
}
throw $e1916;
}
};
var anf_arg827 = R.makeFunction($temp_lam1910,"for-body<line 623, column 2>");
var anf_arg833 = leaf92.$var;
$step1903 = 2;
$al1907 = L[748];
$field1917 = R.getColonFieldLoc(lists18,"fold",L[748]);
if(R.isMethod($field1917)) {
$ans1906 = $field1917.full_meth(lists18,anf_arg827,anf_arg833,lst1905);
} else {
if(!(R.isFunction($field1917))) {
R.ffi.throwNonFunApp(L[748],$field1917);
}
$ans1906 = $field1917.app(anf_arg827,anf_arg833,lst1905);
}
break;
case 2: ++R.GAS;
return $ans1906;
default: throw "No case numbered " + $step1903 + " in $temp_lam1904";
}
}
} catch($e1918) {
if(R.isCont($e1918) && ($step1903 !== 2)) {
$e1918.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1907,$temp_lam1904,$step1903,[lst1905],[]);
}
if(R.isPyretException($e1918)) {
$e1918.pyretStack.push($al1907);
}
throw $e1918;
}
};
var anf_assign1919 = R.makeFunction($temp_lam1904,"list-to-tree");
list$to$tree1920.$var = anf_assign1919;
var $temp_lam1922 = function($arr1923) {
var $step1921 = 0;
var $ans1924 = D;
var $al1925 = L[756];
try {
if(R.isActivationRecord($arr1923)) {
$step1921 = $arr1923.step;
$al1925 = $arr1923.from;
$ans1924 = $arr1923.ans;
arr1923 = $arr1923.args[0];
anf_arg1936 = $arr1923.vars[0];
ann_check_temp1937 = $arr1923.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[756],1,$t);
}
var arr1923 = $arr1923;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1921) {
case 0: $step1921 = 1;
$al1925 = L[755];
R._checkAnn(L[755],$type$RawArray1,arr1923);
break;
case 1: var $temp_lam1927 = function($ls1928,$elt1319,$$underscore1930) {
var $step1926 = 0;
var $ans1931 = D;
var $al1932 = L[752];
try {
if(R.isActivationRecord($ls1928)) {
$step1926 = $ls1928.step;
$al1932 = $ls1928.from;
$ans1931 = $ls1928.ans;
ls1928 = $ls1928.args[0];
elt1319 = $ls1928.args[1];
$underscore1930 = $ls1928.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[752],3,$t);
}
var ls1928 = $ls1928;
var elt1319 = $elt1319;
var $underscore1930 = $$underscore1930;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1926) {
case 0: $step1926 = 1;
$al1932 = L[751];
$field1934 = R.getColonFieldLoc(ls1928,"add",L[751]);
if(R.isMethod($field1934)) {
$ans1931 = $field1934.full_meth(ls1928,elt1319);
} else {
if(!(R.isFunction($field1934))) {
R.ffi.throwNonFunApp(L[751],$field1934);
}
$ans1931 = $field1934.app(elt1319);
}
break;
case 1: ++R.GAS;
return $ans1931;
default: throw "No case numbered " + $step1926 + " in $temp_lam1927";
}
}
} catch($e1935) {
if(R.isCont($e1935) && ($step1926 !== 1)) {
$e1935.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1932,$temp_lam1927,$step1926,[ls1928,elt1319,$underscore1930],[]);
}
if(R.isPyretException($e1935)) {
$e1935.pyretStack.push($al1932);
}
throw $e1935;
}
};
var anf_arg1936 = R.makeFunction($temp_lam1927,"for-body<line 629, column 2>");
var anf_fun1234 = list$set1162.$var;
$step1921 = 2;
$al1925 = L[754];
if(!(R.isFunction(anf_fun1234))) {
R.ffi.throwNonFunApp($al1925,anf_fun1234);
}
$ans1924 = anf_fun1234.app(empty122);
break;
case 2: var anf_arg845 = $ans1924;
$step1921 = 3;
$al1925 = L[752];
if(!(R.isFunction(raw$array$fold1))) {
R.ffi.throwNonFunApp($al1925,raw$array$fold1);
}
$ans1924 = raw$array$fold1.app(anf_arg1936,anf_arg845,arr1923,(0));
break;
case 3: var ann_check_temp1937 = $ans1924;
$step1921 = 4;
$al1925 = L[753];
R._checkAnn(L[753],Set1115,ann_check_temp1937);
break;
case 4: $step1921 = 5;
$ans1924 = ann_check_temp1937;
break;
case 5: ++R.GAS;
return $ans1924;
default: throw "No case numbered " + $step1921 + " in $temp_lam1922";
}
}
} catch($e1938) {
if(R.isCont($e1938) && ($step1921 !== 5)) {
$e1938.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1925,$temp_lam1922,$step1921,[arr1923],[anf_arg1936,ann_check_temp1937]);
}
if(R.isPyretException($e1938)) {
$e1938.pyretStack.push($al1925);
}
throw $e1938;
}
};
var anf_assign1939 = R.makeFunction($temp_lam1922,"arr-to-list-set");
arr$to$list$set1940.$var = anf_assign1939;
var $temp_lam1942 = function($arr1943) {
var $step1941 = 0;
var $ans1944 = D;
var $al1945 = L[762];
try {
if(R.isActivationRecord($arr1943)) {
$step1941 = $arr1943.step;
$al1945 = $arr1943.from;
$ans1944 = $arr1943.ans;
arr1943 = $arr1943.args[0];
ann_check_temp1957 = $arr1943.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[762],1,$t);
}
var arr1943 = $arr1943;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1941) {
case 0: $step1941 = 1;
$al1945 = L[761];
R._checkAnn(L[761],$type$RawArray1,arr1943);
break;
case 1: var $temp_lam1947 = function($t1948,$elt1949,$$underscore1950) {
var $step1946 = 0;
var $ans1951 = D;
var $al1952 = L[758];
try {
if(R.isActivationRecord($t1948)) {
$step1946 = $t1948.step;
$al1952 = $t1948.from;
$ans1951 = $t1948.ans;
t1948 = $t1948.args[0];
elt1949 = $t1948.args[1];
$underscore1950 = $t1948.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[758],3,$t);
}
var t1948 = $t1948;
var elt1949 = $elt1949;
var $underscore1950 = $$underscore1950;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1946) {
case 0: $step1946 = 1;
$al1952 = L[757];
$field1953 = R.getColonFieldLoc(t1948,"insert",L[757]);
if(R.isMethod($field1953)) {
$ans1951 = $field1953.full_meth(t1948,elt1949);
} else {
if(!(R.isFunction($field1953))) {
R.ffi.throwNonFunApp(L[757],$field1953);
}
$ans1951 = $field1953.app(elt1949);
}
break;
case 1: ++R.GAS;
return $ans1951;
default: throw "No case numbered " + $step1946 + " in $temp_lam1947";
}
}
} catch($e1954) {
if(R.isCont($e1954) && ($step1946 !== 1)) {
$e1954.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1952,$temp_lam1947,$step1946,[t1948,elt1949,$underscore1950],[]);
}
if(R.isPyretException($e1954)) {
$e1954.pyretStack.push($al1952);
}
throw $e1954;
}
};
var anf_arg1238 = R.makeFunction($temp_lam1947,"for-body<line 635, column 9>");
var anf_arg849 = leaf92.$var;
$step1941 = 2;
$al1945 = L[758];
if(!(R.isFunction(raw$array$fold1))) {
R.ffi.throwNonFunApp($al1945,raw$array$fold1);
}
$ans1944 = raw$array$fold1.app(anf_arg1238,anf_arg849,arr1943,(0));
break;
case 2: var tree1956 = $ans1944;
var anf_fun1955 = tree$set1415.$var;
$step1941 = 3;
$al1945 = L[760];
if(!(R.isFunction(anf_fun1955))) {
R.ffi.throwNonFunApp($al1945,anf_fun1955);
}
$ans1944 = anf_fun1955.app(tree1956);
break;
case 3: var ann_check_temp1957 = $ans1944;
$step1941 = 4;
$al1945 = L[759];
R._checkAnn(L[759],Set1115,ann_check_temp1957);
break;
case 4: $step1941 = 5;
$ans1944 = ann_check_temp1957;
break;
case 5: ++R.GAS;
return $ans1944;
default: throw "No case numbered " + $step1941 + " in $temp_lam1942";
}
}
} catch($e1958) {
if(R.isCont($e1958) && ($step1941 !== 5)) {
$e1958.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1945,$temp_lam1942,$step1941,[arr1943],[ann_check_temp1957]);
}
if(R.isPyretException($e1958)) {
$e1958.pyretStack.push($al1945);
}
throw $e1958;
}
};
var anf_assign1959 = R.makeFunction($temp_lam1942,"arr-to-tree-set");
arr$to$tree$set1960.$var = anf_assign1959;
var anf_fun1961 = list$set1162.$var;
$step36 = 1;
$al40 = L[834];
if(!(R.isFunction(anf_fun1961))) {
R.ffi.throwNonFunApp($al40,anf_fun1961);
}
$ans39 = anf_fun1961.app(empty122);
break;
case 1: var empty$list$set2035 = $ans39;
var anf_fun1243 = tree$set1415.$var;
var anf_arg1962 = leaf92.$var;
$step36 = 2;
$al40 = L[833];
if(!(R.isFunction(anf_fun1243))) {
R.ffi.throwNonFunApp($al40,anf_fun1243);
}
$ans39 = anf_fun1243.app(anf_arg1962);
break;
case 2: var empty$tree$set2120 = $ans39;
var makeSet21972 = {"$var":D};
var makeSet31987 = {"$var":D};
var makeSet42011 = {"$var":D};
var makeSet52030 = {"$var":D};
var $temp_lam1964 = function($a1965,$b1966) {
var $step1963 = 0;
var $ans1967 = D;
var $al1968 = L[767];
try {
if(R.isActivationRecord($a1965)) {
$step1963 = $a1965.step;
$al1968 = $a1965.from;
$ans1967 = $a1965.ans;
a1965 = $a1965.args[0];
b1966 = $a1965.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[767],2,$t);
}
var a1965 = $a1965;
var b1966 = $b1966;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1963) {
case 0: $step1963 = 1;
$al1968 = L[763];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1968,equal$always2);
}
$ans1967 = equal$always2.app(a1965,b1966);
break;
case 1: var anf_arg875 = $ans1967;
$al1968 = L[763];
var anf_if1969 = R.checkWrapBoolean(anf_arg875);
$step1963 = R.isPyretTrue(anf_if1969)?2:3;
break;
case 2: $step1963 = 5;
$al1968 = L[764];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1968,link70);
}
$ans1967 = link70.app(a1965,empty122);
break;
case 3: $step1963 = 4;
$al1968 = L[766];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1968,link70);
}
$ans1967 = link70.app(b1966,empty122);
break;
case 4: var anf_arg876 = $ans1967;
$step1963 = 5;
$al1968 = L[765];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1968,link70);
}
$ans1967 = link70.app(a1965,anf_arg876);
break;
case 5: ++R.GAS;
return $ans1967;
default: throw "No case numbered " + $step1963 + " in $temp_lam1964";
}
}
} catch($e1970) {
if(R.isCont($e1970) && ($step1963 !== 5)) {
$e1970.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1968,$temp_lam1964,$step1963,[a1965,b1966],[]);
}
if(R.isPyretException($e1970)) {
$e1970.pyretStack.push($al1968);
}
throw $e1970;
}
};
var anf_assign1971 = R.makeFunction($temp_lam1964,"makeSet2");
makeSet21972.$var = anf_assign1971;
var $temp_lam1974 = function($a1975,$b1976,$c1977) {
var $step1973 = 0;
var $ans1979 = D;
var $al1980 = L[774];
try {
if(R.isActivationRecord($a1975)) {
$step1973 = $a1975.step;
$al1980 = $a1975.from;
$ans1979 = $a1975.ans;
a1975 = $a1975.args[0];
b1976 = $a1975.args[1];
c1977 = $a1975.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[774],3,$t);
}
var a1975 = $a1975;
var b1976 = $b1976;
var c1977 = $c1977;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1973) {
case 0: $step1973 = 1;
$al1980 = L[768];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1980,equal$always2);
}
$ans1979 = equal$always2.app(a1975,b1976);
break;
case 1: var anf_arg1981 = $ans1979;
$al1980 = L[768];
var anf_if1984 = R.checkWrapBoolean(anf_arg1981);
$step1973 = R.isPyretTrue(anf_if1984)?2:3;
break;
case 2: var anf_fun1259 = makeSet21972.$var;
$step1973 = 8;
$al1980 = L[769];
if(!(R.isFunction(anf_fun1259))) {
R.ffi.throwNonFunApp($al1980,anf_fun1259);
}
$ans1979 = anf_fun1259.app(b1976,c1977);
break;
case 3: $step1973 = 4;
$al1980 = L[770];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1980,equal$always2);
}
$ans1979 = equal$always2.app(a1975,c1977);
break;
case 4: var anf_arg1262 = $ans1979;
$al1980 = L[770];
var anf_if1275 = R.checkWrapBoolean(anf_arg1262);
$step1973 = R.isPyretTrue(anf_if1275)?5:6;
break;
case 5: var anf_fun1263 = makeSet21972.$var;
$step1973 = 8;
$al1980 = L[771];
if(!(R.isFunction(anf_fun1263))) {
R.ffi.throwNonFunApp($al1980,anf_fun1263);
}
$ans1979 = anf_fun1263.app(a1975,b1976);
break;
case 6: var anf_fun1982 = makeSet21972.$var;
$step1973 = 7;
$al1980 = L[773];
if(!(R.isFunction(anf_fun1982))) {
R.ffi.throwNonFunApp($al1980,anf_fun1982);
}
$ans1979 = anf_fun1982.app(b1976,c1977);
break;
case 7: var anf_arg1983 = $ans1979;
$step1973 = 8;
$al1980 = L[772];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1980,link70);
}
$ans1979 = link70.app(a1975,anf_arg1983);
break;
case 8: ++R.GAS;
return $ans1979;
default: throw "No case numbered " + $step1973 + " in $temp_lam1974";
}
}
} catch($e1985) {
if(R.isCont($e1985) && ($step1973 !== 8)) {
$e1985.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1980,$temp_lam1974,$step1973,[a1975,b1976,c1977],[]);
}
if(R.isPyretException($e1985)) {
$e1985.pyretStack.push($al1980);
}
throw $e1985;
}
};
var anf_assign1986 = R.makeFunction($temp_lam1974,"makeSet3");
makeSet31987.$var = anf_assign1986;
var $temp_lam1989 = function($a1990,$b1991,$c1992,$d1993) {
var $step1988 = 0;
var $ans1994 = D;
var $al1995 = L[783];
try {
if(R.isActivationRecord($a1990)) {
$step1988 = $a1990.step;
$al1995 = $a1990.from;
$ans1994 = $a1990.ans;
a1990 = $a1990.args[0];
b1991 = $a1990.args[1];
c1992 = $a1990.args[2];
d1993 = $a1990.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[783],4,$t);
}
var a1990 = $a1990;
var b1991 = $b1991;
var c1992 = $c1992;
var d1993 = $d1993;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1988) {
case 0: $step1988 = 1;
$al1995 = L[775];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1995,equal$always2);
}
$ans1994 = equal$always2.app(a1990,b1991);
break;
case 1: var anf_arg1266 = $ans1994;
$al1995 = L[775];
var anf_if2008 = R.checkWrapBoolean(anf_arg1266);
$step1988 = R.isPyretTrue(anf_if2008)?2:3;
break;
case 2: var anf_fun1996 = makeSet31987.$var;
$step1988 = 11;
$al1995 = L[776];
if(!(R.isFunction(anf_fun1996))) {
R.ffi.throwNonFunApp($al1995,anf_fun1996);
}
$ans1994 = anf_fun1996.app(b1991,c1992,d1993);
break;
case 3: $step1988 = 4;
$al1995 = L[777];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1995,equal$always2);
}
$ans1994 = equal$always2.app(a1990,c1992);
break;
case 4: var anf_arg904 = $ans1994;
$al1995 = L[777];
var anf_if2005 = R.checkWrapBoolean(anf_arg904);
$step1988 = R.isPyretTrue(anf_if2005)?5:6;
break;
case 5: var anf_fun1997 = makeSet31987.$var;
$step1988 = 11;
$al1995 = L[778];
if(!(R.isFunction(anf_fun1997))) {
R.ffi.throwNonFunApp($al1995,anf_fun1997);
}
$ans1994 = anf_fun1997.app(a1990,b1991,d1993);
break;
case 6: $step1988 = 7;
$al1995 = L[779];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al1995,equal$always2);
}
$ans1994 = equal$always2.app(a1990,d1993);
break;
case 7: var anf_arg1998 = $ans1994;
$al1995 = L[779];
var anf_if2004 = R.checkWrapBoolean(anf_arg1998);
$step1988 = R.isPyretTrue(anf_if2004)?8:9;
break;
case 8: var anf_fun1999 = makeSet31987.$var;
$step1988 = 11;
$al1995 = L[780];
if(!(R.isFunction(anf_fun1999))) {
R.ffi.throwNonFunApp($al1995,anf_fun1999);
}
$ans1994 = anf_fun1999.app(a1990,b1991,c1992);
break;
case 9: var anf_fun2003 = makeSet31987.$var;
$step1988 = 10;
$al1995 = L[782];
if(!(R.isFunction(anf_fun2003))) {
R.ffi.throwNonFunApp($al1995,anf_fun2003);
}
$ans1994 = anf_fun2003.app(b1991,c1992,d1993);
break;
case 10: var anf_arg1270 = $ans1994;
$step1988 = 11;
$al1995 = L[781];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al1995,link70);
}
$ans1994 = link70.app(a1990,anf_arg1270);
break;
case 11: ++R.GAS;
return $ans1994;
default: throw "No case numbered " + $step1988 + " in $temp_lam1989";
}
}
} catch($e2009) {
if(R.isCont($e2009) && ($step1988 !== 11)) {
$e2009.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1995,$temp_lam1989,$step1988,[a1990,b1991,c1992,d1993],[]);
}
if(R.isPyretException($e2009)) {
$e2009.pyretStack.push($al1995);
}
throw $e2009;
}
};
var anf_assign2010 = R.makeFunction($temp_lam1989,"makeSet4");
makeSet42011.$var = anf_assign2010;
var $temp_lam2013 = function($a2014,$b2015,$c2016,$d2017,$e2018) {
var $step2012 = 0;
var $ans2019 = D;
var $al2020 = L[794];
try {
if(R.isActivationRecord($a2014)) {
$step2012 = $a2014.step;
$al2020 = $a2014.from;
$ans2019 = $a2014.ans;
a2014 = $a2014.args[0];
b2015 = $a2014.args[1];
c2016 = $a2014.args[2];
d2017 = $a2014.args[3];
e2018 = $a2014.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[794],5,$t);
}
var a2014 = $a2014;
var b2015 = $b2015;
var c2016 = $c2016;
var d2017 = $d2017;
var e2018 = $e2018;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2012) {
case 0: $step2012 = 1;
$al2020 = L[784];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al2020,equal$always2);
}
$ans2019 = equal$always2.app(a2014,b2015);
break;
case 1: var anf_arg914 = $ans2019;
$al2020 = L[784];
var anf_if2027 = R.checkWrapBoolean(anf_arg914);
$step2012 = R.isPyretTrue(anf_if2027)?2:3;
break;
case 2: var anf_fun916 = makeSet42011.$var;
$step2012 = 14;
$al2020 = L[785];
if(!(R.isFunction(anf_fun916))) {
R.ffi.throwNonFunApp($al2020,anf_fun916);
}
$ans2019 = anf_fun916.app(b2015,c2016,d2017,e2018);
break;
case 3: $step2012 = 4;
$al2020 = L[786];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al2020,equal$always2);
}
$ans2019 = equal$always2.app(a2014,c2016);
break;
case 4: var anf_arg917 = $ans2019;
$al2020 = L[786];
var anf_if2026 = R.checkWrapBoolean(anf_arg917);
$step2012 = R.isPyretTrue(anf_if2026)?5:6;
break;
case 5: var anf_fun2021 = makeSet42011.$var;
$step2012 = 14;
$al2020 = L[787];
if(!(R.isFunction(anf_fun2021))) {
R.ffi.throwNonFunApp($al2020,anf_fun2021);
}
$ans2019 = anf_fun2021.app(a2014,b2015,d2017,e2018);
break;
case 6: $step2012 = 7;
$al2020 = L[788];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al2020,equal$always2);
}
$ans2019 = equal$always2.app(a2014,d2017);
break;
case 7: var anf_arg926 = $ans2019;
$al2020 = L[788];
var anf_if2025 = R.checkWrapBoolean(anf_arg926);
$step2012 = R.isPyretTrue(anf_if2025)?8:9;
break;
case 8: var anf_fun2022 = makeSet42011.$var;
$step2012 = 14;
$al2020 = L[789];
if(!(R.isFunction(anf_fun2022))) {
R.ffi.throwNonFunApp($al2020,anf_fun2022);
}
$ans2019 = anf_fun2022.app(a2014,b2015,c2016,e2018);
break;
case 9: $step2012 = 10;
$al2020 = L[790];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al2020,equal$always2);
}
$ans2019 = equal$always2.app(a2014,e2018);
break;
case 10: var anf_arg927 = $ans2019;
$al2020 = L[790];
var anf_if2024 = R.checkWrapBoolean(anf_arg927);
$step2012 = R.isPyretTrue(anf_if2024)?11:12;
break;
case 11: var anf_fun2023 = makeSet42011.$var;
$step2012 = 14;
$al2020 = L[791];
if(!(R.isFunction(anf_fun2023))) {
R.ffi.throwNonFunApp($al2020,anf_fun2023);
}
$ans2019 = anf_fun2023.app(a2014,b2015,c2016,d2017);
break;
case 12: var anf_fun937 = makeSet42011.$var;
$step2012 = 13;
$al2020 = L[793];
if(!(R.isFunction(anf_fun937))) {
R.ffi.throwNonFunApp($al2020,anf_fun937);
}
$ans2019 = anf_fun937.app(b2015,c2016,d2017,e2018);
break;
case 13: var anf_arg938 = $ans2019;
$step2012 = 14;
$al2020 = L[792];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al2020,link70);
}
$ans2019 = link70.app(a2014,anf_arg938);
break;
case 14: ++R.GAS;
return $ans2019;
default: throw "No case numbered " + $step2012 + " in $temp_lam2013";
}
}
} catch($e2028) {
if(R.isCont($e2028) && ($step2012 !== 14)) {
$e2028.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2020,$temp_lam2013,$step2012,[a2014,b2015,c2016,d2017,e2018],[]);
}
if(R.isPyretException($e2028)) {
$e2028.pyretStack.push($al2020);
}
throw $e2028;
}
};
var anf_assign2029 = R.makeFunction($temp_lam2013,"makeSet5");
makeSet52030.$var = anf_assign2029;
var anf_obj2099 = arr$to$list$set1940.$var;
var $temp_lam2032 = function($$resumer101) {
var $step2031 = 0;
var $ans2033 = D;
var $al2034 = L[795];
try {
if(R.isActivationRecord($$resumer101)) {
$step2031 = $$resumer101.step;
$al2034 = $$resumer101.from;
$ans2033 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[795],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2031) {
case 0: $step2031 = 1;
$ans2033 = empty$list$set2035;
break;
case 1: ++R.GAS;
return $ans2033;
default: throw "No case numbered " + $step2031 + " in $temp_lam2032";
}
}
} catch($e2036) {
if(R.isCont($e2036) && ($step2031 !== 1)) {
$e2036.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2034,$temp_lam2032,$step2031,[],[]);
}
if(R.isPyretException($e2036)) {
$e2036.pyretStack.push($al2034);
}
throw $e2036;
}
};
var anf_obj2100 = R.makeFunction($temp_lam2032,"");
var $temp_lam2038 = function($a2039) {
var $step2037 = 0;
var $ans2040 = D;
var $al2041 = L[798];
try {
if(R.isActivationRecord($a2039)) {
$step2037 = $a2039.step;
$al2041 = $a2039.from;
$ans2040 = $a2039.ans;
a2039 = $a2039.args[0];
anf_fun2042 = $a2039.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[798],1,$t);
}
var a2039 = $a2039;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2037) {
case 0: var anf_fun2042 = list$set1162.$var;
$step2037 = 1;
$al2041 = L[797];
if(!(R.isFunction(link70))) {
R.ffi.throwNonFunApp($al2041,link70);
}
$ans2040 = link70.app(a2039,empty122);
break;
case 1: var anf_arg1297 = $ans2040;
$step2037 = 2;
$al2041 = L[796];
if(!(R.isFunction(anf_fun2042))) {
R.ffi.throwNonFunApp($al2041,anf_fun2042);
}
$ans2040 = anf_fun2042.app(anf_arg1297);
break;
case 2: ++R.GAS;
return $ans2040;
default: throw "No case numbered " + $step2037 + " in $temp_lam2038";
}
}
} catch($e2043) {
if(R.isCont($e2043) && ($step2037 !== 2)) {
$e2043.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2041,$temp_lam2038,$step2037,[a2039],[anf_fun2042]);
}
if(R.isPyretException($e2043)) {
$e2043.pyretStack.push($al2041);
}
throw $e2043;
}
};
var anf_obj2111 = R.makeFunction($temp_lam2038,"");
var $temp_lam2045 = function($a2046,$b2047) {
var $step2044 = 0;
var $ans2048 = D;
var $al2049 = L[801];
try {
if(R.isActivationRecord($a2046)) {
$step2044 = $a2046.step;
$al2049 = $a2046.from;
$ans2048 = $a2046.ans;
a2046 = $a2046.args[0];
b2047 = $a2046.args[1];
anf_fun1302 = $a2046.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[801],2,$t);
}
var a2046 = $a2046;
var b2047 = $b2047;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2044) {
case 0: var anf_fun1302 = list$set1162.$var;
var anf_fun1300 = makeSet21972.$var;
$step2044 = 1;
$al2049 = L[800];
if(!(R.isFunction(anf_fun1300))) {
R.ffi.throwNonFunApp($al2049,anf_fun1300);
}
$ans2048 = anf_fun1300.app(a2046,b2047);
break;
case 1: var anf_arg959 = $ans2048;
$step2044 = 2;
$al2049 = L[799];
if(!(R.isFunction(anf_fun1302))) {
R.ffi.throwNonFunApp($al2049,anf_fun1302);
}
$ans2048 = anf_fun1302.app(anf_arg959);
break;
case 2: ++R.GAS;
return $ans2048;
default: throw "No case numbered " + $step2044 + " in $temp_lam2045";
}
}
} catch($e2050) {
if(R.isCont($e2050) && ($step2044 !== 2)) {
$e2050.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2049,$temp_lam2045,$step2044,[a2046,b2047],[anf_fun1302]);
}
if(R.isPyretException($e2050)) {
$e2050.pyretStack.push($al2049);
}
throw $e2050;
}
};
var anf_obj2112 = R.makeFunction($temp_lam2045,"");
var $temp_lam2052 = function($a2053,$b2054,$c2055) {
var $step2051 = 0;
var $ans2056 = D;
var $al2057 = L[804];
try {
if(R.isActivationRecord($a2053)) {
$step2051 = $a2053.step;
$al2057 = $a2053.from;
$ans2056 = $a2053.ans;
a2053 = $a2053.args[0];
b2054 = $a2053.args[1];
c2055 = $a2053.args[2];
anf_fun2059 = $a2053.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[804],3,$t);
}
var a2053 = $a2053;
var b2054 = $b2054;
var c2055 = $c2055;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2051) {
case 0: var anf_fun2059 = list$set1162.$var;
var anf_fun2058 = makeSet31987.$var;
$step2051 = 1;
$al2057 = L[803];
if(!(R.isFunction(anf_fun2058))) {
R.ffi.throwNonFunApp($al2057,anf_fun2058);
}
$ans2056 = anf_fun2058.app(a2053,b2054,c2055);
break;
case 1: var anf_arg1301 = $ans2056;
$step2051 = 2;
$al2057 = L[802];
if(!(R.isFunction(anf_fun2059))) {
R.ffi.throwNonFunApp($al2057,anf_fun2059);
}
$ans2056 = anf_fun2059.app(anf_arg1301);
break;
case 2: ++R.GAS;
return $ans2056;
default: throw "No case numbered " + $step2051 + " in $temp_lam2052";
}
}
} catch($e2060) {
if(R.isCont($e2060) && ($step2051 !== 2)) {
$e2060.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2057,$temp_lam2052,$step2051,[a2053,b2054,c2055],[anf_fun2059]);
}
if(R.isPyretException($e2060)) {
$e2060.pyretStack.push($al2057);
}
throw $e2060;
}
};
var anf_obj2113 = R.makeFunction($temp_lam2052,"");
var $temp_lam2062 = function($a2063,$b2064,$c2065,$d2066) {
var $step2061 = 0;
var $ans2067 = D;
var $al2068 = L[807];
try {
if(R.isActivationRecord($a2063)) {
$step2061 = $a2063.step;
$al2068 = $a2063.from;
$ans2067 = $a2063.ans;
a2063 = $a2063.args[0];
b2064 = $a2063.args[1];
c2065 = $a2063.args[2];
d2066 = $a2063.args[3];
anf_fun963 = $a2063.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[807],4,$t);
}
var a2063 = $a2063;
var b2064 = $b2064;
var c2065 = $c2065;
var d2066 = $d2066;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2061) {
case 0: var anf_fun963 = list$set1162.$var;
var anf_fun2069 = makeSet42011.$var;
$step2061 = 1;
$al2068 = L[806];
if(!(R.isFunction(anf_fun2069))) {
R.ffi.throwNonFunApp($al2068,anf_fun2069);
}
$ans2067 = anf_fun2069.app(a2063,b2064,c2065,d2066);
break;
case 1: var anf_arg976 = $ans2067;
$step2061 = 2;
$al2068 = L[805];
if(!(R.isFunction(anf_fun963))) {
R.ffi.throwNonFunApp($al2068,anf_fun963);
}
$ans2067 = anf_fun963.app(anf_arg976);
break;
case 2: ++R.GAS;
return $ans2067;
default: throw "No case numbered " + $step2061 + " in $temp_lam2062";
}
}
} catch($e2070) {
if(R.isCont($e2070) && ($step2061 !== 2)) {
$e2070.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2068,$temp_lam2062,$step2061,[a2063,b2064,c2065,d2066],[anf_fun963]);
}
if(R.isPyretException($e2070)) {
$e2070.pyretStack.push($al2068);
}
throw $e2070;
}
};
var anf_obj2114 = R.makeFunction($temp_lam2062,"");
var $temp_lam2072 = function($a2073,$b2074,$c2075,$d2076,$e2077) {
var $step2071 = 0;
var $ans2078 = D;
var $al2079 = L[810];
try {
if(R.isActivationRecord($a2073)) {
$step2071 = $a2073.step;
$al2079 = $a2073.from;
$ans2078 = $a2073.ans;
a2073 = $a2073.args[0];
b2074 = $a2073.args[1];
c2075 = $a2073.args[2];
d2076 = $a2073.args[3];
e2077 = $a2073.args[4];
anf_fun2080 = $a2073.vars[0];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[810],5,$t);
}
var a2073 = $a2073;
var b2074 = $b2074;
var c2075 = $c2075;
var d2076 = $d2076;
var e2077 = $e2077;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2071) {
case 0: var anf_fun2080 = list$set1162.$var;
var anf_fun1340 = makeSet52030.$var;
$step2071 = 1;
$al2079 = L[809];
if(!(R.isFunction(anf_fun1340))) {
R.ffi.throwNonFunApp($al2079,anf_fun1340);
}
$ans2078 = anf_fun1340.app(a2073,b2074,c2075,d2076,e2077);
break;
case 1: var anf_arg968 = $ans2078;
$step2071 = 2;
$al2079 = L[808];
if(!(R.isFunction(anf_fun2080))) {
R.ffi.throwNonFunApp($al2079,anf_fun2080);
}
$ans2078 = anf_fun2080.app(anf_arg968);
break;
case 2: ++R.GAS;
return $ans2078;
default: throw "No case numbered " + $step2071 + " in $temp_lam2072";
}
}
} catch($e2081) {
if(R.isCont($e2081) && ($step2071 !== 2)) {
$e2081.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2079,$temp_lam2072,$step2071,[a2073,b2074,c2075,d2076,e2077],[anf_fun2080]);
}
if(R.isPyretException($e2081)) {
$e2081.pyretStack.push($al2079);
}
throw $e2081;
}
};
var anf_obj2115 = R.makeFunction($temp_lam2072,"");
var list$set$maker2200 = R.makeObject({"make":anf_obj2099,
"make0":anf_obj2100,
"make1":anf_obj2111,
"make2":anf_obj2112,
"make3":anf_obj2113,
"make4":anf_obj2114,
"make5":anf_obj2115});
var anf_obj2192 = arr$to$tree$set1960.$var;
var $temp_lam2117 = function($$resumer101) {
var $step2116 = 0;
var $ans2118 = D;
var $al2119 = L[811];
try {
if(R.isActivationRecord($$resumer101)) {
$step2116 = $$resumer101.step;
$al2119 = $$resumer101.from;
$ans2118 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[811],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2116) {
case 0: $step2116 = 1;
$ans2118 = empty$tree$set2120;
break;
case 1: ++R.GAS;
return $ans2118;
default: throw "No case numbered " + $step2116 + " in $temp_lam2117";
}
}
} catch($e2121) {
if(R.isCont($e2121) && ($step2116 !== 1)) {
$e2121.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2119,$temp_lam2117,$step2116,[],[]);
}
if(R.isPyretException($e2121)) {
$e2121.pyretStack.push($al2119);
}
throw $e2121;
}
};
var anf_obj2193 = R.makeFunction($temp_lam2117,"");
var $temp_lam2123 = function($a2124) {
var $step2122 = 0;
var $ans2125 = D;
var $al2126 = L[813];
try {
if(R.isActivationRecord($a2124)) {
$step2122 = $a2124.step;
$al2126 = $a2124.from;
$ans2125 = $a2124.ans;
a2124 = $a2124.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[813],1,$t);
}
var a2124 = $a2124;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2122) {
case 0: $step2122 = 1;
$al2126 = L[812];
$field2127 = R.getColonFieldLoc(empty$tree$set2120,"add",L[812]);
if(R.isMethod($field2127)) {
$ans2125 = $field2127.full_meth(empty$tree$set2120,a2124);
} else {
if(!(R.isFunction($field2127))) {
R.ffi.throwNonFunApp(L[812],$field2127);
}
$ans2125 = $field2127.app(a2124);
}
break;
case 1: ++R.GAS;
return $ans2125;
default: throw "No case numbered " + $step2122 + " in $temp_lam2123";
}
}
} catch($e2128) {
if(R.isCont($e2128) && ($step2122 !== 1)) {
$e2128.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2126,$temp_lam2123,$step2122,[a2124],[]);
}
if(R.isPyretException($e2128)) {
$e2128.pyretStack.push($al2126);
}
throw $e2128;
}
};
var anf_obj2194 = R.makeFunction($temp_lam2123,"");
var $temp_lam2130 = function($a2131,$b2132) {
var $step2129 = 0;
var $ans2133 = D;
var $al2134 = L[816];
try {
if(R.isActivationRecord($a2131)) {
$step2129 = $a2131.step;
$al2134 = $a2131.from;
$ans2133 = $a2131.ans;
a2131 = $a2131.args[0];
b2132 = $a2131.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[816],2,$t);
}
var a2131 = $a2131;
var b2132 = $b2132;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2129) {
case 0: $step2129 = 1;
$al2134 = L[814];
$field2135 = R.getColonFieldLoc(empty$tree$set2120,"add",L[814]);
if(R.isMethod($field2135)) {
$ans2133 = $field2135.full_meth(empty$tree$set2120,a2131);
} else {
if(!(R.isFunction($field2135))) {
R.ffi.throwNonFunApp(L[814],$field2135);
}
$ans2133 = $field2135.app(a2131);
}
break;
case 1: var anf_method_obj2136 = $ans2133;
$step2129 = 2;
$al2134 = L[815];
$field2138 = R.getColonFieldLoc(anf_method_obj2136,"add",L[815]);
if(R.isMethod($field2138)) {
$ans2133 = $field2138.full_meth(anf_method_obj2136,b2132);
} else {
if(!(R.isFunction($field2138))) {
R.ffi.throwNonFunApp(L[815],$field2138);
}
$ans2133 = $field2138.app(b2132);
}
break;
case 2: ++R.GAS;
return $ans2133;
default: throw "No case numbered " + $step2129 + " in $temp_lam2130";
}
}
} catch($e2139) {
if(R.isCont($e2139) && ($step2129 !== 2)) {
$e2139.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2134,$temp_lam2130,$step2129,[a2131,b2132],[]);
}
if(R.isPyretException($e2139)) {
$e2139.pyretStack.push($al2134);
}
throw $e2139;
}
};
var anf_obj2195 = R.makeFunction($temp_lam2130,"");
var $temp_lam2141 = function($a2142,$b2143,$c2144) {
var $step2140 = 0;
var $ans2145 = D;
var $al2146 = L[820];
try {
if(R.isActivationRecord($a2142)) {
$step2140 = $a2142.step;
$al2146 = $a2142.from;
$ans2145 = $a2142.ans;
a2142 = $a2142.args[0];
b2143 = $a2142.args[1];
c2144 = $a2142.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[820],3,$t);
}
var a2142 = $a2142;
var b2143 = $b2143;
var c2144 = $c2144;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2140) {
case 0: $step2140 = 1;
$al2146 = L[817];
$field2148 = R.getColonFieldLoc(empty$tree$set2120,"add",L[817]);
if(R.isMethod($field2148)) {
$ans2145 = $field2148.full_meth(empty$tree$set2120,a2142);
} else {
if(!(R.isFunction($field2148))) {
R.ffi.throwNonFunApp(L[817],$field2148);
}
$ans2145 = $field2148.app(a2142);
}
break;
case 1: var anf_method_obj2149 = $ans2145;
$step2140 = 2;
$al2146 = L[818];
$field2150 = R.getColonFieldLoc(anf_method_obj2149,"add",L[818]);
if(R.isMethod($field2150)) {
$ans2145 = $field2150.full_meth(anf_method_obj2149,b2143);
} else {
if(!(R.isFunction($field2150))) {
R.ffi.throwNonFunApp(L[818],$field2150);
}
$ans2145 = $field2150.app(b2143);
}
break;
case 2: var anf_method_obj2151 = $ans2145;
$step2140 = 3;
$al2146 = L[819];
$field2152 = R.getColonFieldLoc(anf_method_obj2151,"add",L[819]);
if(R.isMethod($field2152)) {
$ans2145 = $field2152.full_meth(anf_method_obj2151,c2144);
} else {
if(!(R.isFunction($field2152))) {
R.ffi.throwNonFunApp(L[819],$field2152);
}
$ans2145 = $field2152.app(c2144);
}
break;
case 3: ++R.GAS;
return $ans2145;
default: throw "No case numbered " + $step2140 + " in $temp_lam2141";
}
}
} catch($e2153) {
if(R.isCont($e2153) && ($step2140 !== 3)) {
$e2153.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2146,$temp_lam2141,$step2140,[a2142,b2143,c2144],[]);
}
if(R.isPyretException($e2153)) {
$e2153.pyretStack.push($al2146);
}
throw $e2153;
}
};
var anf_obj2196 = R.makeFunction($temp_lam2141,"");
var $temp_lam2155 = function($a2156,$b2157,$c2158,$d2159) {
var $step2154 = 0;
var $ans2160 = D;
var $al2161 = L[825];
try {
if(R.isActivationRecord($a2156)) {
$step2154 = $a2156.step;
$al2161 = $a2156.from;
$ans2160 = $a2156.ans;
a2156 = $a2156.args[0];
b2157 = $a2156.args[1];
c2158 = $a2156.args[2];
d2159 = $a2156.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[825],4,$t);
}
var a2156 = $a2156;
var b2157 = $b2157;
var c2158 = $c2158;
var d2159 = $d2159;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2154) {
case 0: $step2154 = 1;
$al2161 = L[821];
$field2162 = R.getColonFieldLoc(empty$tree$set2120,"add",L[821]);
if(R.isMethod($field2162)) {
$ans2160 = $field2162.full_meth(empty$tree$set2120,a2156);
} else {
if(!(R.isFunction($field2162))) {
R.ffi.throwNonFunApp(L[821],$field2162);
}
$ans2160 = $field2162.app(a2156);
}
break;
case 1: var anf_method_obj2163 = $ans2160;
$step2154 = 2;
$al2161 = L[822];
$field2164 = R.getColonFieldLoc(anf_method_obj2163,"add",L[822]);
if(R.isMethod($field2164)) {
$ans2160 = $field2164.full_meth(anf_method_obj2163,b2157);
} else {
if(!(R.isFunction($field2164))) {
R.ffi.throwNonFunApp(L[822],$field2164);
}
$ans2160 = $field2164.app(b2157);
}
break;
case 2: var anf_method_obj2165 = $ans2160;
$step2154 = 3;
$al2161 = L[823];
$field2166 = R.getColonFieldLoc(anf_method_obj2165,"add",L[823]);
if(R.isMethod($field2166)) {
$ans2160 = $field2166.full_meth(anf_method_obj2165,c2158);
} else {
if(!(R.isFunction($field2166))) {
R.ffi.throwNonFunApp(L[823],$field2166);
}
$ans2160 = $field2166.app(c2158);
}
break;
case 3: var anf_method_obj2167 = $ans2160;
$step2154 = 4;
$al2161 = L[824];
$field2169 = R.getColonFieldLoc(anf_method_obj2167,"add",L[824]);
if(R.isMethod($field2169)) {
$ans2160 = $field2169.full_meth(anf_method_obj2167,d2159);
} else {
if(!(R.isFunction($field2169))) {
R.ffi.throwNonFunApp(L[824],$field2169);
}
$ans2160 = $field2169.app(d2159);
}
break;
case 4: ++R.GAS;
return $ans2160;
default: throw "No case numbered " + $step2154 + " in $temp_lam2155";
}
}
} catch($e2170) {
if(R.isCont($e2170) && ($step2154 !== 4)) {
$e2170.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2161,$temp_lam2155,$step2154,[a2156,b2157,c2158,d2159],[]);
}
if(R.isPyretException($e2170)) {
$e2170.pyretStack.push($al2161);
}
throw $e2170;
}
};
var anf_obj2197 = R.makeFunction($temp_lam2155,"");
var $temp_lam2172 = function($a2173,$b2174,$c2175,$d2176,$e2177) {
var $step2171 = 0;
var $ans2178 = D;
var $al2179 = L[831];
try {
if(R.isActivationRecord($a2173)) {
$step2171 = $a2173.step;
$al2179 = $a2173.from;
$ans2178 = $a2173.ans;
a2173 = $a2173.args[0];
b2174 = $a2173.args[1];
c2175 = $a2173.args[2];
d2176 = $a2173.args[3];
e2177 = $a2173.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[831],5,$t);
}
var a2173 = $a2173;
var b2174 = $b2174;
var c2175 = $c2175;
var d2176 = $d2176;
var e2177 = $e2177;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2171) {
case 0: $step2171 = 1;
$al2179 = L[826];
$field2180 = R.getColonFieldLoc(empty$tree$set2120,"add",L[826]);
if(R.isMethod($field2180)) {
$ans2178 = $field2180.full_meth(empty$tree$set2120,a2173);
} else {
if(!(R.isFunction($field2180))) {
R.ffi.throwNonFunApp(L[826],$field2180);
}
$ans2178 = $field2180.app(a2173);
}
break;
case 1: var anf_method_obj2181 = $ans2178;
$step2171 = 2;
$al2179 = L[827];
$field2182 = R.getColonFieldLoc(anf_method_obj2181,"add",L[827]);
if(R.isMethod($field2182)) {
$ans2178 = $field2182.full_meth(anf_method_obj2181,b2174);
} else {
if(!(R.isFunction($field2182))) {
R.ffi.throwNonFunApp(L[827],$field2182);
}
$ans2178 = $field2182.app(b2174);
}
break;
case 2: var anf_method_obj1025 = $ans2178;
$step2171 = 3;
$al2179 = L[828];
$field2183 = R.getColonFieldLoc(anf_method_obj1025,"add",L[828]);
if(R.isMethod($field2183)) {
$ans2178 = $field2183.full_meth(anf_method_obj1025,c2175);
} else {
if(!(R.isFunction($field2183))) {
R.ffi.throwNonFunApp(L[828],$field2183);
}
$ans2178 = $field2183.app(c2175);
}
break;
case 3: var anf_method_obj2184 = $ans2178;
$step2171 = 4;
$al2179 = L[829];
$field2186 = R.getColonFieldLoc(anf_method_obj2184,"add",L[829]);
if(R.isMethod($field2186)) {
$ans2178 = $field2186.full_meth(anf_method_obj2184,d2176);
} else {
if(!(R.isFunction($field2186))) {
R.ffi.throwNonFunApp(L[829],$field2186);
}
$ans2178 = $field2186.app(d2176);
}
break;
case 4: var anf_method_obj2187 = $ans2178;
$step2171 = 5;
$al2179 = L[830];
$field2190 = R.getColonFieldLoc(anf_method_obj2187,"add",L[830]);
if(R.isMethod($field2190)) {
$ans2178 = $field2190.full_meth(anf_method_obj2187,e2177);
} else {
if(!(R.isFunction($field2190))) {
R.ffi.throwNonFunApp(L[830],$field2190);
}
$ans2178 = $field2190.app(e2177);
}
break;
case 5: ++R.GAS;
return $ans2178;
default: throw "No case numbered " + $step2171 + " in $temp_lam2172";
}
}
} catch($e2191) {
if(R.isCont($e2191) && ($step2171 !== 5)) {
$e2191.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2179,$temp_lam2172,$step2171,[a2173,b2174,c2175,d2176,e2177],[]);
}
if(R.isPyretException($e2191)) {
$e2191.pyretStack.push($al2179);
}
throw $e2191;
}
};
var anf_obj2198 = R.makeFunction($temp_lam2172,"");
var tree$set$maker2201 = R.makeObject({"make":anf_obj2192,
"make0":anf_obj2193,
"make1":anf_obj2194,
"make2":anf_obj2195,
"make3":anf_obj2196,
"make4":anf_obj2197,
"make5":anf_obj2198});
var defined_value2215 = arr$to$tree$set1960.$var;
var defined_value2216 = makeSet52030.$var;
var defined_value2217 = arr$to$list$set1940.$var;
var defined_value2218 = makeSet42011.$var;
var defined_value2219 = makeSet31987.$var;
var defined_value2220 = makeSet21972.$var;
var defined_value2221 = tree$set1415.$var;
var defined_value2222 = leaf92.$var;
var defined_value2223 = list$set1162.$var;
var defined_value2224 = list$to$tree1920.$var;
var defined_value2225 = list$to$tree$set1902.$var;
var defined_value2226 = list$to$list$set1890.$var;
var defined_value2227 = list$to$set1879.$var;
var defined_value2228 = set$fold1857.$var;
var defined_value2229 = set$any1844.$var;
var defined_value2230 = set$all1833.$var;
var defined_value2231 = tree$set$difference1562.$var;
var defined_value2232 = merge$drop$l21793.$var;
var defined_value2233 = tree$set$intersect1545.$var;
var defined_value2234 = merge$only$dups1757.$var;
var defined_value2235 = tree$set$union1536.$var;
var defined_value2236 = merge$no$dups1723.$var;
var defined_value2237 = elems$to$balanced$avl1712.$var;
var defined_value2238 = set$to$sorted$elems1683.$var;
var defined_value2239 = is$tree$set1666.$var;
var defined_value2240 = is$list$set1661.$var;
var defined_value2241 = is$Set1124.$var;
var defined_value2242 = swap$next$lowest1035.$var;
var defined_value2243 = remove$root354.$var;
var defined_value2244 = rebalance293.$var;
var defined_value2245 = mkbranch91.$var;
var defined_value2246 = tree$any825.$var;
var defined_value2247 = tree$all815.$var;
var defined_value2248 = tree$fold803.$var;
var defined_value2249 = branch789.$var;
var defined_value2250 = is$branch786.$var;
var defined_value2251 = is$leaf781.$var;
var defined_value2252 = is$AVLTree60.$var;
$step36 = 3;
$al40 = L[832];
$field2199 = R.getColonFieldLoc(builtins1,"trace-value",L[832]);
if(R.isMethod($field2199)) {
$ans39 = $field2199.full_meth(builtins1,L[832],nothing2);
} else {
if(!(R.isFunction($field2199))) {
R.ffi.throwNonFunApp(L[832],$field2199);
}
$ans39 = $field2199.app(L[832],nothing2);
}
break;
case 3: var answer2213 = $ans39;
var anf_obj2202 = list$to$list$set1890.$var;
var anf_obj2203 = list$to$list$set1890.$var;
var anf_obj2204 = list$to$tree$set1902.$var;
var anf_obj2205 = set$fold1857.$var;
var anf_obj2206 = set$all1833.$var;
var anf_obj2207 = set$any1844.$var;
var provides2212 = R.makeObject({"set":list$set$maker2200,
"list-set":list$set$maker2200,
"tree-set":tree$set$maker2201,
"empty-set":empty$list$set2035,
"empty-list-set":empty$list$set2035,
"empty-tree-set":empty$tree$set2120,
"list-to-set":anf_obj2202,
"list-to-list-set":anf_obj2203,
"list-to-tree-set":anf_obj2204,
"fold":anf_obj2205,
"all":anf_obj2206,
"any":anf_obj2207});
$step36 = 4;
$al40 = L[214];
$field2208 = R.getColonFieldLoc(builtins1,"current-checker",L[214]);
if(R.isMethod($field2208)) {
$ans39 = $field2208.full_meth(builtins1);
} else {
if(!(R.isFunction($field2208))) {
R.ffi.throwNonFunApp(L[214],$field2208);
}
$ans39 = $field2208.app();
}
break;
case 4: var anf_method_obj2209 = $ans39;
$step36 = 5;
$al40 = L[214];
$field2210 = R.getColonFieldLoc(anf_method_obj2209,"results",L[214]);
if(R.isMethod($field2210)) {
$ans39 = $field2210.full_meth(anf_method_obj2209);
} else {
if(!(R.isFunction($field2210))) {
R.ffi.throwNonFunApp(L[214],$field2210);
}
$ans39 = $field2210.app();
}
break;
case 5: var checks2214 = $ans39;
$step36 = 6;
$ans39 = R.makeObject({"answer":answer2213,
"namespace":NAMESPACE,
"defined-values":{"tree-set-maker":tree$set$maker2201,
"list-set-maker":list$set$maker2200,
"arr-to-tree-set":defined_value2215,
"empty-tree-set":empty$tree$set2120,
"makeSet5":defined_value2216,
"arr-to-list-set":defined_value2217,
"empty-list-set":empty$list$set2035,
"makeSet4":defined_value2218,
"makeSet3":defined_value2219,
"makeSet2":defined_value2220,
"tree-set":defined_value2221,
"leaf":defined_value2222,
"list-set":defined_value2223,
"empty":empty122,
"list-to-tree":defined_value2224,
"list-to-tree-set":defined_value2225,
"list-to-list-set":defined_value2226,
"list-to-set":defined_value2227,
"set-fold":defined_value2228,
"set-any":defined_value2229,
"set-all":defined_value2230,
"tree-set-difference":defined_value2231,
"merge-drop-l2":defined_value2232,
"tree-set-intersect":defined_value2233,
"merge-only-dups":defined_value2234,
"tree-set-union":defined_value2235,
"merge-no-dups":defined_value2236,
"elems-to-balanced-avl":defined_value2237,
"set-to-sorted-elems":defined_value2238,
"is-tree-set":defined_value2239,
"is-list-set":defined_value2240,
"is-Set":defined_value2241,
"swap-next-lowest":defined_value2242,
"remove-root":defined_value2243,
"rebalance":defined_value2244,
"mkbranch":defined_value2245,
"tree-any":defined_value2246,
"tree-all":defined_value2247,
"tree-fold":defined_value2248,
"branch":defined_value2249,
"is-branch":defined_value2250,
"is-leaf":defined_value2251,
"is-AVLTree":defined_value2252,
"pick-some":pick$some1163,
"pick-none":pick$none1159,
"pick":pick20,
"fold":fold1148,
"is-empty":is$empty1387,
"lists":lists18,
"link":link70,
"List":List2253,
"VS":VS21,
"equality":equality7,
"arrays":arrays6,
"option":option19,
"error":error8},
"defined-types":{"Pick":Pick2211,
"AVLTree":AVLTree101,
"lists":lists27,
"List":List1179,
"Set":Set1115,
"pick":pick29,
"VS":VS30,
"equality":equality23,
"arrays":arrays22,
"option":option28,
"error":error24},
"provide-plus-types":R.makeObject({"values":provides2212,
"types":{"List":List1179,
"Pick":Pick2211,
"AVLTree":AVLTree101,
"Set":Set1115}}),
"checks":checks2214});
break;
case 6: ++R.GAS;
return $ans39;
default: throw "No case numbered " + $step36 + " in $toplevel37";
}
}
} catch($e2254) {
if(R.isCont($e2254) && ($step36 !== 6)) {
$e2254.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al40,$toplevel37,$step36,[],[AVLTree101,Set1115,List1179,List2253,empty122,link70,is$empty1387,fold1148,Pick2211,pick$none1159,pick$some1163,is$AVLTree60,is$leaf781,leaf92,is$branch786,branch789,tree$fold803,tree$all815,tree$any825,mkbranch91,rebalance293,remove$root354,swap$next$lowest1035,is$Set1124,is$list$set1661,list$set1162,is$tree$set1666,tree$set1415,set$to$sorted$elems1683,elems$to$balanced$avl1712,merge$no$dups1723,tree$set$union1536,merge$only$dups1757,tree$set$intersect1545,merge$drop$l21793,tree$set$difference1562,set$all1833,set$any1844,set$fold1857,list$to$set1879,list$to$list$set1890,list$to$tree$set1902,list$to$tree1920,arr$to$list$set1940,arr$to$tree$set1960,empty$list$set2035,empty$tree$set2120,list$set$maker2200,tree$set$maker2201,defined_value2215,defined_value2216,defined_value2217,defined_value2218,defined_value2219,defined_value2220,defined_value2221,defined_value2222,defined_value2223,defined_value2224,defined_value2225,defined_value2226,defined_value2227,defined_value2228,defined_value2229,defined_value2230,defined_value2231,defined_value2232,defined_value2233,defined_value2234,defined_value2235,defined_value2236,defined_value2237,defined_value2238,defined_value2239,defined_value2240,defined_value2241,defined_value2242,defined_value2243,defined_value2244,defined_value2245,defined_value2246,defined_value2247,defined_value2248,defined_value2249,defined_value2250,defined_value2251,defined_value2252,answer2213,provides2212]);
}
if(R.isPyretException($e2254)) {
$e2254.pyretStack.push($al40);
}
throw $e2254;
}
};
return R.safeCall($toplevel37,function(moduleVal) {
R.modules["$builtin://sets31"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://contracts":({"requires":[{"import-type":"builtin",
"name":"error-display"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"}],
"provides":{"values":{"ann-failure":"tany",
"dot-ann-not-present":"tany",
"draw-and-highlight":"tany",
"fail":"tany",
"fail-arg":"tany",
"failure-at-arg":"tany",
"field-failure":"tany",
"is-ContractResult":"tany",
"is-FailureReason":"tany",
"is-FieldFailure":"tany",
"is-ann-failure":"tany",
"is-dot-ann-not-present":"tany",
"is-fail":"tany",
"is-fail-arg":"tany",
"is-failure-at-arg":"tany",
"is-field-failure":"tany",
"is-missing-field":"tany",
"is-ok":"tany",
"is-predicate-failure":"tany",
"is-record-fields-fail":"tany",
"is-ref-init":"tany",
"is-tup-length-mismatch":"tany",
"is-tuple-anns-fail":"tany",
"is-type-mismatch":"tany",
"missing-field":"tany",
"ok":"tany",
"predicate-failure":"tany",
"record-fields-fail":"tany",
"ref-init":"tany",
"tup-length-mismatch":"tany",
"tuple-anns-fail":"tany",
"type-mismatch":"tany"},
"datatypes":{"atom#ContractResult#1":["data","ContractResult",[],[["ok"],["fail",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://contracts"},
"name":"FailureReason"}],["loc",
"tany"]]],["fail-arg",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://contracts"},
"name":"FailureReason"}],["loc",
"tany"]]]],{"render-reason":["arrow",
["tany"],
"tany"]}],
"atom#FailureReason#3":["data","FailureReason",[],[["failure-at-arg",
[["reason",
"tany"],["args",
"tany"],["function-name",
"tany"],["index",
"tany"],["loc",
"tany"]]],["ref-init",
[["reason",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://contracts"},
"name":"FailureReason"}],["loc",
"tany"]]],["type-mismatch",
[["name",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["val",
"tany"]]],["predicate-failure",
[["name",
"tany"],["val",
"tany"]]],["record-fields-fail",
[["field-failures",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://contracts"},
"name":"FieldFailure"}]]],["val",
"tany"]]],["tuple-anns-fail",
[["anns-failures",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://lists"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://contracts"},
"name":"FieldFailure"}]]],["val",
"tany"]]],["tup-length-mismatch",
[["tupleLength",
"tany"],["annLength",
"tany"],["val",
"tany"],["loc",
"tany"]]],["dot-ann-not-present",
[["field",
"tany"],["name",
"tany"]]]],{"render-fancy-reason":["arrow",
["tany",
"tany",
"tany",
"tany",
"tany",
"tany"],
"tany"],
"render-reason":["arrow",
["tany",
"tany",
"tany"],
"tany"]}],
"atom#FieldFailure#2":["data","FieldFailure",[],[["field-failure",
[["reason",
"tany"],["field",
"tany"],["loc",
"tany"]]],["ann-failure",
[["reason",
"tany"],["ann",
"tany"],["loc",
"tany"]]],["missing-field",
[["field",
"tany"],["loc",
"tany"]]]],{"render-reason":["arrow",
["tany",
"tany",
"tany"],
"tany"]}]},
"aliases":{"ContractResult":"tany",
"FailureReason":"tany",
"FieldFailure":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$ED16,$$import26,$L27,$O18) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://contracts";
var D = R.undefined;
var L = [[M,11,39,193,11,48,202],
[M,11,2,156,11,49,203],
[M,10,0,127,12,3,207],
[M,16,32,275,16,63,306],
[M,16,4,247,16,67,310],
[M,19,6,443,19,17,454],
[M,19,38,475,19,46,483],
[M,19,6,443,19,96,533],
[M,18,4,360,20,7,541],
[M,22,6,581,22,17,592],
[M,22,32,607,22,40,615],
[M,22,6,581,22,48,623],
[M,21,4,547,23,7,631],
[M,26,6,768,26,17,779],
[M,26,38,800,26,46,808],
[M,26,6,768,26,96,858],
[M,25,4,685,27,7,866],
[M,29,6,906,29,17,917],
[M,29,32,932,29,40,940],
[M,29,6,906,29,47,947],
[M,28,4,872,30,7,955],
[M,15,2,232,16,67,310],
[M,17,2,313,23,7,631],
[M,17,24,335,17,37,348],
[M,17,4,315,17,38,349],
[M,24,2,634,30,7,955],
[M,24,28,660,24,41,673],
[M,24,4,636,24,42,674],
[M,14,0,209,31,3,959],
[M,37,7,1129,37,15,1137],
[M,38,9,1148,38,24,1163],
[M,38,26,1165,38,40,1179],
[M,38,61,1200,38,69,1208],
[M,39,10,1221,39,29,1240],
[M,39,47,1258,39,57,1268],
[M,39,39,1250,39,58,1269],
[M,39,31,1242,39,59,1270],
[M,39,61,1272,39,87,1298],
[M,40,8,1309,40,19,1320],
[M,40,8,1309,40,53,1354],
[M,38,42,1181,38,70,1209],
[M,36,4,1074,41,7,1363],
[M,44,7,1463,44,15,1471],
[M,45,9,1482,45,24,1497],
[M,45,26,1499,45,55,1528],
[M,46,9,1564,46,35,1590],
[M,47,8,1601,47,19,1612],
[M,47,34,1627,47,42,1635],
[M,47,8,1601,47,58,1651],
[M,45,57,1530,45,80,1553],
[M,43,4,1408,48,7,1660],
[M,51,7,1756,51,15,1764],
[M,52,9,1775,52,16,1782],
[M,52,18,1784,52,43,1809],
[M,52,61,1827,52,71,1837],
[M,52,53,1819,52,72,1838],
[M,52,45,1811,52,73,1839],
[M,53,10,1851,53,36,1877],
[M,53,57,1898,53,65,1906],
[M,53,38,1879,53,66,1907],
[M,50,4,1701,54,7,1917],
[M,35,2,1028,41,7,1363],
[M,35,4,1030,35,37,1063],
[M,42,2,1366,48,7,1660],
[M,42,4,1368,42,33,1397],
[M,49,2,1663,54,7,1917],
[M,49,4,1665,49,29,1690],
[M,34,0,1007,55,3,1921],
[M,62,13,2198,62,35,2220],
[M,65,17,2316,65,25,2324],
[M,66,19,2345,66,26,2352],
[M,67,20,2374,67,35,2389],
[M,68,33,2424,68,64,2455],
[M,68,67,2458,68,74,2465],
[M,68,20,2411,68,89,2480],
[M,69,19,2502,69,37,2520],
[M,70,19,2541,70,26,2548],
[M,71,20,2570,71,50,2600],
[M,73,23,2659,73,34,2670],
[M,73,46,2682,73,56,2692],
[M,73,36,2672,73,61,2697],
[M,73,63,2699,73,83,2719],
[M,74,23,2746,74,30,2753],
[M,74,32,2755,74,40,2763],
[M,74,45,2768,74,55,2778],
[M,74,32,2755,74,56,2779],
[M,74,32,2755,74,58,2781],
[M,72,20,2622,74,63,2786],
[M,75,20,2808,75,65,2853],
[M,76,18,2874,76,29,2885],
[M,76,18,2874,76,104,2960],
[M,73,46,2682,73,60,2696],
[M,64,16,2286,64,25,2295],
[M,63,12,2234,88,15,3538],
[M,64,14,2284,76,105,2961],
[M,78,17,3008,78,25,3016],
[M,79,19,3037,79,26,3044],
[M,80,20,3066,80,35,3081],
[M,81,33,3116,81,64,3147],
[M,81,67,3150,81,74,3157],
[M,81,20,3103,81,88,3171],
[M,82,19,3193,82,37,3211],
[M,83,19,3232,83,26,3239],
[M,84,20,3261,84,50,3291],
[M,85,30,3323,85,40,3333],
[M,85,20,3313,85,45,3338],
[M,86,20,3360,86,74,3414],
[M,87,18,3435,87,29,3446],
[M,87,18,3435,87,104,3521],
[M,85,30,3323,85,44,3337],
[M,77,16,2978,77,20,2982],
[M,77,14,2976,87,105,3522],
[M,63,18,2240,63,26,2248],
[M,63,28,2250,63,46,2268],
[M,90,13,3568,90,21,3576],
[M,91,15,3593,91,22,3600],
[M,92,16,3618,92,55,3657],
[M,93,16,3675,93,31,3690],
[M,94,16,3708,94,47,3739],
[M,95,26,3767,95,36,3777],
[M,95,16,3757,95,41,3782],
[M,96,16,3800,96,70,3854],
[M,97,14,3871,97,25,3882],
[M,97,14,3871,97,108,3965],
[M,95,26,3767,95,40,3781],
[M,61,10,2168,61,23,2181],
[M,60,6,2116,108,9,4424],
[M,61,8,2166,98,13,3980],
[M,100,11,4019,100,19,4027],
[M,101,13,4042,101,20,4049],
[M,102,14,4065,102,43,4094],
[M,103,30,4126,103,48,4144],
[M,103,22,4118,103,49,4145],
[M,103,14,4110,103,50,4146],
[M,104,14,4162,104,45,4193],
[M,105,24,4219,105,34,4229],
[M,105,14,4209,105,39,4234],
[M,106,14,4250,106,68,4304],
[M,107,12,4319,107,23,4330],
[M,107,12,4319,107,106,4413],
[M,105,24,4219,105,38,4233],
[M,99,10,3991,99,14,3995],
[M,99,8,3989,107,107,4414],
[M,60,12,2122,60,20,2130],
[M,60,22,2132,60,46,2156],
[M,59,4,2013,109,7,4432],
[M,111,7,4493,111,15,4501],
[M,112,9,4512,112,16,4519],
[M,113,26,4547,113,44,4565],
[M,113,18,4539,113,45,4566],
[M,113,10,4531,113,46,4567],
[M,114,60,4629,114,70,4639],
[M,114,10,4579,114,76,4645],
[M,115,10,4657,115,43,4690],
[M,116,8,4701,116,19,4712],
[M,116,8,4701,116,53,4746],
[M,117,9,4757,117,16,4764],
[M,118,10,4776,118,46,4812],
[M,119,30,4844,119,38,4852],
[M,119,40,4854,119,49,4863],
[M,119,24,4838,119,50,4864],
[M,119,10,4824,119,56,4870],
[M,114,18,4587,114,75,4644],
[M,114,51,4620,114,75,4644],
[M,114,60,4629,114,74,4643],
[M,110,4,4438,120,7,4880],
[M,124,6,5067,124,44,5105],
[M,123,6,5043,123,23,5060],
[M,122,4,4934,125,7,5113],
[M,129,11,5235,129,19,5243],
[M,130,13,5258,130,20,5265],
[M,130,22,5267,130,69,5314],
[M,131,14,5360,131,33,5379],
[M,132,12,5394,132,23,5405],
[M,132,12,5394,132,49,5431],
[M,130,71,5316,130,99,5344],
[M,128,8,5209,133,11,5444],
[M,134,9,5455,134,17,5463],
[M,135,11,5476,135,18,5483],
[M,135,20,5485,135,74,5539],
[M,136,10,5552,136,21,5563],
[M,136,10,5552,136,47,5589],
[M,127,6,5173,136,49,5591],
[M,126,4,5119,137,7,5599],
[M,140,7,5753,140,15,5761],
[M,141,11,5774,141,27,5790],
[M,142,11,5803,142,18,5810],
[M,143,12,5824,143,38,5850],
[M,144,28,5880,144,37,5889],
[M,144,20,5872,144,38,5890],
[M,144,12,5864,144,39,5891],
[M,145,12,5905,145,28,5921],
[M,146,12,5935,146,23,5946],
[M,147,16,5964,147,34,5982],
[M,148,11,5995,148,22,6006],
[M,149,13,6021,149,20,6028],
[M,150,14,6044,150,29,6059],
[M,151,27,6088,151,48,6109],
[M,151,51,6112,151,58,6119],
[M,151,14,6075,151,68,6129],
[M,152,12,6144,152,26,6158],
[M,154,11,6185,154,18,6192],
[M,155,12,6206,155,39,6233],
[M,156,28,6263,156,37,6272],
[M,156,20,6255,156,38,6273],
[M,156,12,6247,156,39,6274],
[M,157,12,6288,157,28,6304],
[M,158,12,6318,158,23,6329],
[M,160,9,6353,160,16,6360],
[M,161,10,6372,161,51,6413],
[M,162,17,6433,162,25,6441],
[M,162,8,6424,162,26,6442],
[M,163,11,6455,163,24,6468],
[M,166,17,6569,166,38,6590],
[M,167,17,6609,167,28,6620],
[M,168,19,6641,168,26,6648],
[M,169,20,6670,169,57,6707],
[M,170,19,6729,170,36,6746],
[M,172,17,6785,172,24,6792],
[M,173,18,6812,173,56,6850],
[M,174,18,6870,174,32,6884],
[M,165,14,6536,165,26,6548],
[M,164,10,6480,178,13,6968],
[M,165,12,6534,175,17,6903],
[M,177,15,6941,177,26,6952],
[M,176,14,6918,176,18,6922],
[M,164,16,6486,164,24,6494],
[M,164,26,6496,164,50,6520],
[M,179,15,6984,179,26,6995],
[M,139,4,5649,180,7,7010],
[M,182,17,7081,182,24,7088],
[M,183,8,7098,183,35,7125],
[M,183,53,7143,183,62,7152],
[M,183,45,7135,183,63,7153],
[M,183,37,7127,183,64,7154],
[M,184,8,7164,184,49,7205],
[M,185,8,7240,185,28,7260],
[M,186,9,7271,186,22,7284],
[M,189,13,7354,189,21,7362],
[M,189,41,7382,189,49,7390],
[M,189,32,7373,189,50,7391],
[M,190,15,7408,190,22,7415],
[M,190,24,7417,190,54,7447],
[M,190,56,7449,190,77,7470],
[M,188,10,7333,191,13,7486],
[M,192,11,7499,192,19,7507],
[M,192,39,7527,192,47,7535],
[M,192,30,7518,192,48,7536],
[M,187,8,7294,192,50,7538],
[M,194,9,7560,194,17,7568],
[M,194,37,7588,194,45,7596],
[M,194,28,7579,194,46,7597],
[M,184,51,7207,184,74,7230],
[M,181,4,7016,196,7,7616],
[M,199,7,7764,199,15,7772],
[M,200,11,7785,200,27,7801],
[M,201,11,7814,201,18,7821],
[M,202,12,7835,202,36,7859],
[M,203,28,7889,203,37,7898],
[M,203,20,7881,203,38,7899],
[M,203,12,7873,203,39,7900],
[M,204,12,7914,204,28,7930],
[M,205,12,7944,205,23,7955],
[M,206,16,7973,206,34,7991],
[M,207,11,8004,207,22,8015],
[M,208,13,8030,208,20,8037],
[M,209,14,8053,209,39,8078],
[M,210,30,8110,210,39,8119],
[M,210,22,8102,210,40,8120],
[M,210,14,8094,210,41,8121],
[M,211,14,8137,211,33,8156],
[M,212,27,8185,212,48,8206],
[M,212,51,8209,212,58,8216],
[M,212,14,8172,212,68,8226],
[M,213,12,8241,213,26,8255],
[M,215,11,8282,215,18,8289],
[M,216,14,8305,216,40,8331],
[M,217,30,8363,217,39,8372],
[M,217,22,8355,217,40,8373],
[M,217,14,8347,217,41,8374],
[M,218,14,8390,218,30,8406],
[M,219,14,8422,219,25,8433],
[M,221,9,8457,221,16,8464],
[M,222,10,8476,222,51,8517],
[M,223,17,8537,223,25,8545],
[M,223,8,8528,223,26,8546],
[M,224,11,8559,224,24,8572],
[M,227,17,8673,227,38,8694],
[M,228,17,8713,228,28,8724],
[M,229,19,8745,229,26,8752],
[M,230,20,8774,230,57,8811],
[M,231,19,8833,231,36,8850],
[M,233,17,8889,233,24,8896],
[M,234,18,8916,234,56,8954],
[M,235,18,8974,235,32,8988],
[M,226,14,8640,226,26,8652],
[M,225,10,8584,239,13,9072],
[M,226,12,8638,236,17,9007],
[M,238,15,9045,238,26,9056],
[M,237,14,9022,237,18,9026],
[M,225,16,8590,225,24,8598],
[M,225,26,8600,225,50,8624],
[M,240,15,9088,240,26,9099],
[M,198,4,7660,241,7,9114],
[M,243,17,9185,243,24,9192],
[M,244,8,9202,244,32,9226],
[M,244,50,9244,244,59,9253],
[M,244,42,9236,244,60,9254],
[M,244,34,9228,244,61,9255],
[M,245,8,9265,245,39,9296],
[M,245,66,9323,245,107,9364],
[M,246,9,9375,246,22,9388],
[M,249,13,9458,249,21,9466],
[M,249,41,9486,249,49,9494],
[M,249,32,9477,249,50,9495],
[M,250,15,9512,250,22,9519],
[M,250,24,9521,250,53,9550],
[M,250,55,9552,250,76,9573],
[M,248,10,9437,251,13,9589],
[M,252,11,9602,252,19,9610],
[M,252,39,9630,252,47,9638],
[M,252,30,9621,252,48,9639],
[M,247,8,9398,252,50,9641],
[M,254,9,9663,254,17,9671],
[M,254,37,9691,254,45,9699],
[M,254,28,9682,254,46,9700],
[M,245,41,9298,245,64,9321],
[M,242,4,9120,256,7,9719],
[M,259,7,9902,259,15,9910],
[M,260,11,9923,260,27,9939],
[M,261,11,9952,261,18,9959],
[M,262,12,9973,262,46,10007],
[M,263,12,10021,263,23,10032],
[M,264,16,10050,264,34,10068],
[M,265,11,10081,265,22,10092],
[M,266,13,10107,266,20,10114],
[M,267,14,10130,267,29,10145],
[M,268,27,10174,268,55,10202],
[M,268,58,10205,268,65,10212],
[M,268,14,10161,268,76,10223],
[M,269,12,10238,269,26,10252],
[M,271,11,10279,271,18,10286],
[M,272,12,10300,272,48,10336],
[M,273,12,10350,273,23,10361],
[M,275,9,10385,275,16,10392],
[M,276,10,10404,276,51,10445],
[M,277,17,10465,277,25,10473],
[M,277,8,10456,277,26,10474],
[M,278,11,10487,278,24,10500],
[M,281,17,10601,281,38,10622],
[M,282,17,10641,282,28,10652],
[M,283,19,10673,283,26,10680],
[M,284,20,10702,284,57,10739],
[M,285,19,10761,285,36,10778],
[M,287,17,10817,287,24,10824],
[M,288,18,10844,288,56,10882],
[M,289,18,10902,289,32,10916],
[M,280,14,10568,280,26,10580],
[M,279,10,10512,293,13,11000],
[M,280,12,10566,290,17,10935],
[M,292,15,10973,292,26,10984],
[M,291,14,10950,291,18,10954],
[M,279,16,10518,279,24,10526],
[M,279,26,10528,279,50,10552],
[M,294,15,11016,294,26,11027],
[M,295,9,11044,295,16,11051],
[M,296,10,11063,296,30,11083],
[M,300,19,11227,300,36,11244],
[M,301,19,11265,301,30,11276],
[M,302,20,11298,302,45,11323],
[M,303,33,11358,303,52,11377],
[M,303,55,11380,303,62,11387],
[M,303,20,11345,303,71,11396],
[M,304,20,11418,304,54,11452],
[M,305,28,11482,305,39,11493],
[M,305,20,11474,305,40,11494],
[M,307,19,11538,307,30,11549],
[M,308,20,11571,308,76,11627],
[M,309,28,11657,309,39,11668],
[M,309,20,11649,309,40,11669],
[M,310,20,11691,310,61,11732],
[M,311,20,11754,311,30,11764],
[M,299,16,11183,299,37,11204],
[M,298,12,11132,314,15,11885],
[M,299,14,11181,312,19,11785],
[M,313,42,11828,313,83,11869],
[M,313,16,11802,313,38,11824],
[M,298,18,11138,298,30,11150],
[M,297,18,11103,315,13,11899],
[M,315,18,11904,315,37,11923],
[M,297,10,11095,315,38,11924],
[M,315,41,11927,315,61,11947],
[M,258,4,9798,316,7,11957],
[M,318,7,12018,318,15,12026],
[M,319,9,12037,319,16,12044],
[M,320,10,12056,320,46,12092],
[M,321,57,12151,321,83,12177],
[M,321,49,12143,321,84,12178],
[M,321,10,12104,321,85,12179],
[M,322,10,12191,322,42,12223],
[M,323,17,12243,323,25,12251],
[M,323,8,12234,323,26,12252],
[M,324,9,12263,324,16,12270],
[M,324,18,12272,324,37,12291],
[M,325,29,12323,325,48,12342],
[M,325,53,12347,325,80,12374],
[M,325,29,12323,325,81,12375],
[M,325,8,12302,325,82,12376],
[M,317,4,11963,327,7,12392],
[M,330,7,12571,330,15,12579],
[M,331,11,12592,331,27,12608],
[M,332,11,12621,332,18,12628],
[M,333,12,12642,333,43,12673],
[M,335,12,12729,335,28,12745],
[M,336,12,12759,336,23,12770],
[M,337,16,12788,337,34,12806],
[M,338,11,12819,338,22,12830],
[M,339,13,12845,339,20,12852],
[M,340,14,12868,340,46,12900],
[M,342,14,12960,342,33,12979],
[M,343,27,13008,343,48,13029],
[M,343,51,13032,343,58,13039],
[M,343,14,12995,343,68,13049],
[M,344,12,13064,344,26,13078],
[M,346,11,13105,346,18,13112],
[M,347,14,13128,347,47,13161],
[M,349,14,13221,349,30,13237],
[M,350,14,13253,350,25,13264],
[M,352,9,13288,352,16,13295],
[M,353,10,13307,353,51,13348],
[M,354,17,13368,354,25,13376],
[M,354,8,13359,354,26,13377],
[M,355,11,13390,355,24,13403],
[M,358,17,13504,358,38,13525],
[M,359,17,13544,359,28,13555],
[M,360,19,13576,360,26,13583],
[M,361,20,13605,361,57,13642],
[M,362,19,13664,362,36,13681],
[M,364,17,13720,364,24,13727],
[M,365,18,13747,365,56,13785],
[M,366,18,13805,366,32,13819],
[M,357,14,13471,357,26,13483],
[M,356,10,13415,370,13,13903],
[M,357,12,13469,367,17,13838],
[M,369,15,13876,369,26,13887],
[M,368,14,13853,368,18,13857],
[M,356,16,13421,356,24,13429],
[M,356,26,13431,356,50,13455],
[M,371,15,13919,371,26,13930],
[M,372,9,13947,372,16,13954],
[M,373,10,13966,373,30,13986],
[M,377,19,14130,377,36,14147],
[M,378,19,14168,378,30,14179],
[M,379,20,14201,379,45,14226],
[M,380,33,14261,380,52,14280],
[M,380,55,14283,380,62,14290],
[M,380,20,14248,380,71,14299],
[M,381,20,14321,381,54,14355],
[M,382,28,14385,382,39,14396],
[M,382,20,14377,382,40,14397],
[M,384,19,14441,384,30,14452],
[M,385,20,14474,385,76,14530],
[M,386,28,14560,386,39,14571],
[M,386,20,14552,386,40,14572],
[M,387,20,14594,387,61,14635],
[M,388,20,14657,388,30,14667],
[M,376,16,14086,376,37,14107],
[M,375,12,14035,392,15,14870],
[M,376,14,14084,389,19,14688],
[M,390,42,14731,390,83,14772],
[M,390,16,14705,390,38,14727],
[M,391,40,14813,391,81,14854],
[M,391,16,14789,391,36,14809],
[M,375,18,14041,375,30,14053],
[M,374,18,14006,393,13,14884],
[M,393,18,14889,393,36,14907],
[M,374,10,13998,393,37,14908],
[M,393,40,14911,393,60,14931],
[M,329,4,12467,394,7,14941],
[M,396,7,15002,396,15,15010],
[M,397,9,15021,397,16,15028],
[M,398,10,15040,398,42,15072],
[M,399,49,15123,399,75,15149],
[M,399,10,15084,399,76,15150],
[M,400,10,15162,400,42,15194],
[M,401,17,15214,401,25,15222],
[M,401,8,15205,401,26,15223],
[M,402,9,15234,402,16,15241],
[M,402,18,15243,402,37,15262],
[M,403,29,15294,403,47,15312],
[M,403,52,15317,403,79,15344],
[M,403,29,15294,403,80,15345],
[M,403,8,15273,403,81,15346],
[M,395,4,14947,405,7,15362],
[M,408,7,15535,408,15,15543],
[M,409,13,15558,409,29,15574],
[M,410,13,15589,410,20,15596],
[M,411,14,15612,411,45,15643],
[M,412,30,15675,412,39,15684],
[M,412,22,15667,412,40,15685],
[M,412,14,15659,412,41,15686],
[M,413,14,15702,413,30,15718],
[M,414,14,15734,414,25,15745],
[M,415,18,15765,415,36,15783],
[M,416,13,15798,416,24,15809],
[M,417,15,15826,417,22,15833],
[M,418,16,15851,418,31,15866],
[M,419,29,15897,419,56,15924],
[M,419,59,15927,419,66,15934],
[M,419,16,15884,419,76,15944],
[M,420,14,15961,420,28,15975],
[M,422,13,16006,422,20,16013],
[M,423,16,16031,423,49,16064],
[M,424,32,16098,424,41,16107],
[M,424,24,16090,424,42,16108],
[M,424,16,16082,424,43,16109],
[M,425,16,16127,425,32,16143],
[M,426,16,16161,426,27,16172],
[M,428,11,16200,428,18,16207],
[M,429,12,16221,429,64,16273],
[M,430,29,16304,430,43,16318],
[M,430,12,16287,430,44,16319],
[M,431,12,16333,431,49,16370],
[M,432,21,16393,432,37,16409],
[M,432,12,16384,432,38,16410],
[M,433,12,16424,433,40,16452],
[M,434,19,16474,434,27,16482],
[M,434,10,16465,434,28,16483],
[M,435,13,16498,435,26,16511],
[M,438,19,16618,438,40,16639],
[M,439,19,16660,439,30,16671],
[M,440,21,16694,440,28,16701],
[M,441,22,16725,441,59,16762],
[M,442,21,16786,442,38,16803],
[M,444,19,16846,444,26,16853],
[M,445,20,16875,445,58,16913],
[M,446,20,16935,446,34,16949],
[M,437,16,16583,437,28,16595],
[M,436,12,16525,450,15,17041],
[M,437,14,16581,447,19,16970],
[M,449,17,17012,449,28,17023],
[M,448,16,16987,448,20,16991],
[M,436,18,16531,436,26,16539],
[M,436,28,16541,436,52,16565],
[M,451,17,17059,451,28,17070],
[M,407,4,15431,452,7,17085],
[M,454,7,17146,454,15,17154],
[M,455,9,17165,455,16,17172],
[M,456,10,17184,456,45,17219],
[M,457,10,17231,457,23,17244],
[M,458,10,17256,458,63,17309],
[M,459,19,17330,459,33,17344],
[M,459,10,17321,459,34,17345],
[M,460,9,17357,460,16,17364],
[M,461,10,17376,461,65,17431],
[M,462,19,17452,462,35,17468],
[M,462,10,17443,462,36,17469],
[M,453,4,17091,464,7,17487],
[M,467,9,17641,467,25,17657],
[M,468,9,17668,468,17,17676],
[M,469,11,17689,469,18,17696],
[M,470,12,17710,470,42,17740],
[M,472,15,17778,472,26,17789],
[M,473,24,17815,473,33,17824],
[M,473,16,17807,473,34,17825],
[M,474,16,17843,474,28,17855],
[M,475,24,17881,475,34,17891],
[M,475,16,17873,475,35,17892],
[M,471,12,17754,475,37,17894],
[M,476,12,17908,476,27,17923],
[M,477,12,17937,477,23,17948],
[M,478,11,17962,478,18,17969],
[M,478,10,17961,485,44,18277],
[M,479,12,17983,479,51,18022],
[M,480,28,18052,480,38,18062],
[M,480,20,18044,480,39,18063],
[M,480,12,18036,480,40,18064],
[M,481,12,18078,481,51,18117],
[M,482,28,18147,482,37,18156],
[M,482,20,18139,482,38,18157],
[M,482,12,18131,482,39,18158],
[M,483,12,18172,483,29,18189],
[M,484,28,18219,484,38,18229],
[M,484,20,18211,484,39,18230],
[M,484,12,18203,484,40,18231],
[M,485,12,18245,485,43,18276],
[M,486,14,18293,486,32,18311],
[M,487,9,18322,487,17,18330],
[M,488,11,18343,488,18,18350],
[M,489,12,18364,489,27,18379],
[M,490,25,18406,490,50,18431],
[M,490,53,18434,490,60,18441],
[M,490,12,18393,490,70,18451],
[M,491,10,18464,491,24,18478],
[M,492,11,18491,492,18,18498],
[M,492,10,18490,499,44,18806],
[M,493,12,18512,493,51,18551],
[M,494,28,18581,494,38,18591],
[M,494,20,18573,494,39,18592],
[M,494,12,18565,494,40,18593],
[M,495,12,18607,495,51,18646],
[M,496,28,18676,496,37,18685],
[M,496,20,18668,496,38,18686],
[M,496,12,18660,496,39,18687],
[M,497,12,18701,497,29,18718],
[M,498,28,18748,498,38,18758],
[M,498,20,18740,498,39,18759],
[M,498,12,18732,498,40,18760],
[M,499,12,18774,499,43,18805],
[M,501,9,18829,501,17,18837],
[M,502,11,18850,502,18,18857],
[M,503,12,18871,503,42,18901],
[M,505,15,18939,505,26,18950],
[M,506,24,18976,506,33,18985],
[M,506,16,18968,506,34,18986],
[M,507,16,19004,507,28,19016],
[M,508,24,19042,508,34,19052],
[M,508,16,19034,508,35,19053],
[M,504,12,18915,508,37,19055],
[M,509,12,19069,509,27,19084],
[M,510,12,19098,510,23,19109],
[M,511,11,19123,511,18,19130],
[M,511,10,19122,518,44,19438],
[M,512,12,19144,512,51,19183],
[M,513,28,19213,513,38,19223],
[M,513,20,19205,513,39,19224],
[M,513,12,19197,513,40,19225],
[M,514,12,19239,514,51,19278],
[M,515,28,19308,515,37,19317],
[M,515,20,19300,515,38,19318],
[M,515,12,19292,515,39,19319],
[M,516,12,19333,516,29,19350],
[M,517,28,19380,517,38,19390],
[M,517,20,19372,517,39,19391],
[M,517,12,19364,517,40,19392],
[M,518,12,19406,518,43,19437],
[M,466,4,17535,520,7,19457],
[M,522,7,19518,522,15,19526],
[M,523,9,19537,523,16,19544],
[M,523,18,19546,523,42,19570],
[M,524,83,19655,524,93,19665],
[M,524,49,19621,524,94,19666],
[M,524,10,19582,524,95,19667],
[M,525,10,19679,525,44,19713],
[M,525,62,19731,525,71,19740],
[M,525,54,19723,525,72,19741],
[M,525,46,19715,525,73,19742],
[M,524,57,19629,524,93,19665],
[M,521,4,19463,526,7,19752],
[M,58,2,1945,120,7,4880],
[M,58,4,1947,58,59,2002],
[M,121,2,4883,137,7,5599],
[M,121,28,4909,121,41,4922],
[M,121,4,4885,121,42,4923],
[M,138,2,5602,196,7,7616],
[M,138,31,5631,138,37,5637],
[M,138,4,5604,138,38,5638],
[M,197,2,7619,256,7,9719],
[M,197,4,7621,197,32,7649],
[M,257,2,9722,327,7,12392],
[M,257,46,9766,257,52,9772],
[M,257,46,9766,257,66,9786],
[M,257,4,9724,257,67,9787],
[M,328,2,12395,405,7,15362],
[M,328,42,12435,328,48,12441],
[M,328,42,12435,328,62,12455],
[M,328,4,12397,328,63,12456],
[M,406,2,15365,464,7,17487],
[M,406,4,15367,406,57,15420],
[M,465,2,17490,526,7,19752],
[M,465,4,17492,465,36,17524],
[M,57,0,1923,527,3,19756],
["dummy location"],
[M,3,0,17,527,3,19756]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var print1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"print");
var tostring1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var ED2 = R.getField($ED16,"values");
var L19 = R.getField($L27,"values");
var O20 = R.getField($O18,"values");
var ED21 = R.getField($ED16,"types");
var L23 = R.getField($L27,"types");
var O24 = R.getField($O18,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$ED16);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import26);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$L27);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$O18);
var $toplevel29 = function($$resumer101) {
var $step28 = 0;
var $ans31 = D;
var $al32 = L[673];
try {
if(R.isActivationRecord($$resumer101)) {
$step28 = $$resumer101.step;
$al32 = $$resumer101.from;
$ans31 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
ContractResult2433 = $$resumer101.vars[0];
FieldFailure1581 = $$resumer101.vars[1];
FailureReason138 = $$resumer101.vars[2];
draw$and$highlight48 = $$resumer101.vars[3];
is$ContractResult158 = $$resumer101.vars[4];
is$ok161 = $$resumer101.vars[5];
ok164 = $$resumer101.vars[6];
is$fail167 = $$resumer101.vars[7];
fail170 = $$resumer101.vars[8];
is$fail$arg173 = $$resumer101.vars[9];
fail$arg176 = $$resumer101.vars[10];
is$FieldFailure292 = $$resumer101.vars[11];
is$field$failure295 = $$resumer101.vars[12];
field$failure298 = $$resumer101.vars[13];
is$ann$failure301 = $$resumer101.vars[14];
ann$failure304 = $$resumer101.vars[15];
is$missing$field307 = $$resumer101.vars[16];
missing$field310 = $$resumer101.vars[17];
is$FailureReason2352 = $$resumer101.vars[18];
is$failure$at$arg2354 = $$resumer101.vars[19];
failure$at$arg2357 = $$resumer101.vars[20];
is$ref$init2360 = $$resumer101.vars[21];
ref$init2363 = $$resumer101.vars[22];
is$type$mismatch2366 = $$resumer101.vars[23];
type$mismatch2369 = $$resumer101.vars[24];
is$predicate$failure2372 = $$resumer101.vars[25];
predicate$failure2375 = $$resumer101.vars[26];
is$record$fields$fail2378 = $$resumer101.vars[27];
record$fields$fail2381 = $$resumer101.vars[28];
is$tuple$anns$fail2384 = $$resumer101.vars[29];
tuple$anns$fail2386 = $$resumer101.vars[30];
is$tup$length$mismatch2389 = $$resumer101.vars[31];
tup$length$mismatch2392 = $$resumer101.vars[32];
is$dot$ann$not$present2395 = $$resumer101.vars[33];
dot$ann$not$present2397 = $$resumer101.vars[34];
defined_value2437 = $$resumer101.vars[35];
defined_value2438 = $$resumer101.vars[36];
defined_value2439 = $$resumer101.vars[37];
defined_value2440 = $$resumer101.vars[38];
defined_value2441 = $$resumer101.vars[39];
defined_value2442 = $$resumer101.vars[40];
defined_value2443 = $$resumer101.vars[41];
defined_value2444 = $$resumer101.vars[42];
defined_value2445 = $$resumer101.vars[43];
defined_value2446 = $$resumer101.vars[44];
defined_value2447 = $$resumer101.vars[45];
defined_value2448 = $$resumer101.vars[46];
defined_value2449 = $$resumer101.vars[47];
defined_value2450 = $$resumer101.vars[48];
defined_value2451 = $$resumer101.vars[49];
defined_value2452 = $$resumer101.vars[50];
defined_value2453 = $$resumer101.vars[51];
defined_value2454 = $$resumer101.vars[52];
defined_value2455 = $$resumer101.vars[53];
defined_value2456 = $$resumer101.vars[54];
defined_value2457 = $$resumer101.vars[55];
defined_value2458 = $$resumer101.vars[56];
defined_value2459 = $$resumer101.vars[57];
defined_value2460 = $$resumer101.vars[58];
defined_value2461 = $$resumer101.vars[59];
defined_value2462 = $$resumer101.vars[60];
defined_value2463 = $$resumer101.vars[61];
defined_value2464 = $$resumer101.vars[62];
defined_value2465 = $$resumer101.vars[63];
defined_value2466 = $$resumer101.vars[64];
defined_value2467 = $$resumer101.vars[65];
defined_value2468 = $$resumer101.vars[66];
answer2435 = $$resumer101.vars[67];
provides2434 = $$resumer101.vars[68];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step28) {
case 0: var ContractResult33 = R.namedBrander("ContractResult",L[28]);
var ContractResult2433 = R.makeBranderAnn(ContractResult33,"ContractResult");
var FieldFailure34 = R.namedBrander("FieldFailure",L[67]);
var FieldFailure1581 = R.makeBranderAnn(FieldFailure34,"FieldFailure");
var FailureReason35 = R.namedBrander("FailureReason",L[671]);
var FailureReason138 = R.makeBranderAnn(FailureReason35,"FailureReason");
var draw$and$highlight48 = {"$var":D};
var ContractResult154 = {"$var":D};
var is$ContractResult158 = {"$var":D};
var is$ok161 = {"$var":D};
var ok164 = {"$var":D};
var is$fail167 = {"$var":D};
var fail170 = {"$var":D};
var is$fail$arg173 = {"$var":D};
var fail$arg176 = {"$var":D};
var FieldFailure289 = {"$var":D};
var is$FieldFailure292 = {"$var":D};
var is$field$failure295 = {"$var":D};
var field$failure298 = {"$var":D};
var is$ann$failure301 = {"$var":D};
var ann$failure304 = {"$var":D};
var is$missing$field307 = {"$var":D};
var missing$field310 = {"$var":D};
var FailureReason2350 = {"$var":D};
var is$FailureReason2352 = {"$var":D};
var is$failure$at$arg2354 = {"$var":D};
var failure$at$arg2357 = {"$var":D};
var is$ref$init2360 = {"$var":D};
var ref$init2363 = {"$var":D};
var is$type$mismatch2366 = {"$var":D};
var type$mismatch2369 = {"$var":D};
var is$predicate$failure2372 = {"$var":D};
var predicate$failure2375 = {"$var":D};
var is$record$fields$fail2378 = {"$var":D};
var record$fields$fail2381 = {"$var":D};
var is$tuple$anns$fail2384 = {"$var":D};
var tuple$anns$fail2386 = {"$var":D};
var is$tup$length$mismatch2389 = {"$var":D};
var tup$length$mismatch2392 = {"$var":D};
var is$dot$ann$not$present2395 = {"$var":D};
var dot$ann$not$present2397 = {"$var":D};
var $temp_lam38 = function($l39) {
var $step37 = 0;
var $ans40 = D;
var $al41 = L[2];
try {
if(R.isActivationRecord($l39)) {
$step37 = $l39.step;
$al41 = $l39.from;
$ans40 = $l39.ans;
l39 = $l39.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[2],1,$t);
}
var l39 = $l39;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step37) {
case 0: $step37 = 1;
$al41 = L[0];
$field42 = R.getColonFieldLoc(ED2,"loc",L[0]);
if(R.isMethod($field42)) {
$ans40 = $field42.full_meth(ED2,l39);
} else {
if(!(R.isFunction($field42))) {
R.ffi.throwNonFunApp(L[0],$field42);
}
$ans40 = $field42.app(l39);
}
break;
case 1: var anf_arg43 = $ans40;
$step37 = 2;
$al41 = L[1];
$field45 = R.getColonFieldLoc(ED2,"loc-display",L[1]);
if(R.isMethod($field45)) {
$ans40 = $field45.full_meth(ED2,l39,("error-highlight"),anf_arg43);
} else {
if(!(R.isFunction($field45))) {
R.ffi.throwNonFunApp(L[1],$field45);
}
$ans40 = $field45.app(l39,("error-highlight"),anf_arg43);
}
break;
case 2: ++R.GAS;
return $ans40;
default: throw "No case numbered " + $step37 + " in $temp_lam38";
}
}
} catch($e46) {
if(R.isCont($e46) && ($step37 !== 2)) {
$e46.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al41,$temp_lam38,$step37,[l39],[]);
}
if(R.isPyretException($e46)) {
$e46.pyretStack.push($al41);
}
throw $e46;
}
};
var anf_assign47 = R.makeFunction($temp_lam38,"draw-and-highlight");
draw$and$highlight48.$var = anf_assign47;
var $temp_full50 = function($self119) {
var $step49 = 0;
var $ans51 = D;
var $al52 = L[4];
try {
if(R.isActivationRecord($self119)) {
$step49 = $self119.step;
$al52 = $self119.from;
$ans51 = $self119.ans;
self119 = $self119.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[4],1,$t);
}
var self119 = $self119;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step49) {
case 0: $step49 = 1;
$al52 = L[3];
$field58 = R.getColonFieldLoc(ED2,"text",L[3]);
if(R.isMethod($field58)) {
$ans51 = $field58.full_meth(ED2,("There were no errors"));
} else {
if(!(R.isFunction($field58))) {
R.ffi.throwNonFunApp(L[3],$field58);
}
$ans51 = $field58.app(("There were no errors"));
}
break;
case 1: ++R.GAS;
return $ans51;
default: throw "No case numbered " + $step49 + " in $temp_full50";
}
}
} catch($e61) {
if(R.isCont($e61) && ($step49 !== 1)) {
$e61.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al52,$temp_full50,$step49,[self119],[]);
}
if(R.isPyretException($e61)) {
$e61.pyretStack.push($al52);
}
throw $e61;
}
};
var anf_singleton_variant_member125 = R.makeMethod0($temp_full50,"render-reason");
var $temp_full63 = function($self145,$maybe$stack$loc64,$src$available65,$maybe$ast66) {
var $step62 = 0;
var $ans69 = D;
var $al70 = L[8];
try {
if(R.isActivationRecord($self145)) {
$step62 = $self145.step;
$al70 = $self145.from;
$ans69 = $self145.ans;
self145 = $self145.args[0];
maybe$stack$loc64 = $self145.args[1];
src$available65 = $self145.args[2];
maybe$ast66 = $self145.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[8],4,$t);
}
var self145 = $self145;
var maybe$stack$loc64 = $maybe$stack$loc64;
var src$available65 = $src$available65;
var maybe$ast66 = $maybe$ast66;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step62) {
case 0: $al70 = L[5];
var anf_method_obj71 = G(self145,"reason",L[5]);
$al70 = L[6];
var anf_arg74 = G(self145,"loc",L[6]);
$step62 = 1;
$al70 = L[7];
$field76 = R.getColonFieldLoc(anf_method_obj71,"render-fancy-reason",L[7]);
if(R.isMethod($field76)) {
$ans69 = $field76.full_meth(anf_method_obj71,anf_arg74,(true),maybe$stack$loc64,src$available65,maybe$ast66);
} else {
if(!(R.isFunction($field76))) {
R.ffi.throwNonFunApp(L[7],$field76);
}
$ans69 = $field76.app(anf_arg74,(true),maybe$stack$loc64,src$available65,maybe$ast66);
}
break;
case 1: ++R.GAS;
return $ans69;
default: throw "No case numbered " + $step62 + " in $temp_full63";
}
}
} catch($e77) {
if(R.isCont($e77) && ($step62 !== 1)) {
$e77.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al70,$temp_full63,$step62,[self145,maybe$stack$loc64,src$available65,maybe$ast66],[]);
}
if(R.isPyretException($e77)) {
$e77.pyretStack.push($al70);
}
throw $e77;
}
};
var anf_variant_member132 = R.makeMethod3($temp_full63,"render-fancy-reason");
var $temp_full79 = function($self80) {
var $step78 = 0;
var $ans81 = D;
var $al82 = L[12];
try {
if(R.isActivationRecord($self80)) {
$step78 = $self80.step;
$al82 = $self80.from;
$ans81 = $self80.ans;
self80 = $self80.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[12],1,$t);
}
var self80 = $self80;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step78) {
case 0: $al82 = L[9];
var anf_method_obj83 = G(self80,"reason",L[9]);
$al82 = L[10];
var anf_arg84 = G(self80,"loc",L[10]);
$step78 = 1;
$al82 = L[11];
$field87 = R.getColonFieldLoc(anf_method_obj83,"render-reason",L[11]);
if(R.isMethod($field87)) {
$ans81 = $field87.full_meth(anf_method_obj83,anf_arg84,(false));
} else {
if(!(R.isFunction($field87))) {
R.ffi.throwNonFunApp(L[11],$field87);
}
$ans81 = $field87.app(anf_arg84,(false));
}
break;
case 1: ++R.GAS;
return $ans81;
default: throw "No case numbered " + $step78 + " in $temp_full79";
}
}
} catch($e88) {
if(R.isCont($e88) && ($step78 !== 1)) {
$e88.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al82,$temp_full79,$step78,[self80],[]);
}
if(R.isPyretException($e88)) {
$e88.pyretStack.push($al82);
}
throw $e88;
}
};
var anf_variant_member133 = R.makeMethod0($temp_full79,"render-reason");
var $temp_full90 = function($self91,$maybe$stack$loc92,$src$available93,$maybe$ast94) {
var $step89 = 0;
var $ans95 = D;
var $al96 = L[16];
try {
if(R.isActivationRecord($self91)) {
$step89 = $self91.step;
$al96 = $self91.from;
$ans95 = $self91.ans;
self91 = $self91.args[0];
maybe$stack$loc92 = $self91.args[1];
src$available93 = $self91.args[2];
maybe$ast94 = $self91.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[16],4,$t);
}
var self91 = $self91;
var maybe$stack$loc92 = $maybe$stack$loc92;
var src$available93 = $src$available93;
var maybe$ast94 = $maybe$ast94;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step89) {
case 0: $al96 = L[13];
var anf_method_obj97 = G(self91,"reason",L[13]);
$al96 = L[14];
var anf_arg100 = G(self91,"loc",L[14]);
$step89 = 1;
$al96 = L[15];
$field101 = R.getColonFieldLoc(anf_method_obj97,"render-fancy-reason",L[15]);
if(R.isMethod($field101)) {
$ans95 = $field101.full_meth(anf_method_obj97,anf_arg100,(true),maybe$stack$loc92,src$available93,maybe$ast94);
} else {
if(!(R.isFunction($field101))) {
R.ffi.throwNonFunApp(L[15],$field101);
}
$ans95 = $field101.app(anf_arg100,(true),maybe$stack$loc92,src$available93,maybe$ast94);
}
break;
case 1: ++R.GAS;
return $ans95;
default: throw "No case numbered " + $step89 + " in $temp_full90";
}
}
} catch($e106) {
if(R.isCont($e106) && ($step89 !== 1)) {
$e106.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al96,$temp_full90,$step89,[self91,maybe$stack$loc92,src$available93,maybe$ast94],[]);
}
if(R.isPyretException($e106)) {
$e106.pyretStack.push($al96);
}
throw $e106;
}
};
var anf_variant_member144 = R.makeMethod3($temp_full90,"render-fancy-reason");
var $temp_full109 = function($self110) {
var $step108 = 0;
var $ans112 = D;
var $al113 = L[20];
try {
if(R.isActivationRecord($self110)) {
$step108 = $self110.step;
$al113 = $self110.from;
$ans112 = $self110.ans;
self110 = $self110.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[20],1,$t);
}
var self110 = $self110;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step108) {
case 0: $al113 = L[17];
var anf_method_obj115 = G(self110,"reason",L[17]);
$al113 = L[18];
var anf_arg119 = G(self110,"loc",L[18]);
$step108 = 1;
$al113 = L[19];
$field120 = R.getColonFieldLoc(anf_method_obj115,"render-reason",L[19]);
if(R.isMethod($field120)) {
$ans112 = $field120.full_meth(anf_method_obj115,anf_arg119,(true));
} else {
if(!(R.isFunction($field120))) {
R.ffi.throwNonFunApp(L[19],$field120);
}
$ans112 = $field120.app(anf_arg119,(true));
}
break;
case 1: ++R.GAS;
return $ans112;
default: throw "No case numbered " + $step108 + " in $temp_full109";
}
}
} catch($e121) {
if(R.isCont($e121) && ($step108 !== 1)) {
$e121.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al113,$temp_full109,$step108,[self110],[]);
}
if(R.isPyretException($e121)) {
$e121.pyretStack.push($al113);
}
throw $e121;
}
};
var anf_variant_member145 = R.makeMethod0($temp_full109,"render-reason");
var $ok_getfields128 = function(f) {
return f();
};
var $ok_getfieldsref126 = function(f) {
return f();
};
var $ok_mutablemask127 = [];
var $ok$base122 = {"render-reason":anf_singleton_variant_member125,
"_match":R.makeMatch("ok",0)};
var $ok$brander123 = R.namedBrander("ok",L[21]);
var $ok$brands124 = {};
$ok$brands124[ContractResult33._brand] = true;
$ok$brands124[$ok$brander123._brand] = true;
var $fail_getfields136 = function(f) {
return f(this.dict["loc"],this.dict["reason"]);
};
var $fail_getfieldsref134 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["reason"],false,refmask[1]));
};
var $fail_mutablemask135 = [false,false];
var $fail$base129 = {"$fieldNames":["loc","reason"],
"render-fancy-reason":anf_variant_member132,
"render-reason":anf_variant_member133,
"_match":R.makeMatch("fail",2)};
var $fail$brander130 = R.namedBrander("fail",L[22]);
var $fail$brands131 = {};
$fail$brands131[ContractResult33._brand] = true;
$fail$brands131[$fail$brander130._brand] = true;
var fail137 = R.makeVariantConstructor(L[24],function() {
return [FailureReason138];
},["reason139"],[L[23]],[false,false],["loc140","reason139"],$fail_mutablemask135,$fail$base129,$fail$brands131,"fail",$fail_getfieldsref134,$fail_getfields136,$fail$base129);
var $fail$arg_getfields148 = function(f) {
return f(this.dict["loc"],this.dict["reason"]);
};
var $fail$arg_getfieldsref146 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["reason"],false,refmask[1]));
};
var $fail$arg_mutablemask147 = [false,false];
var $fail$arg$base141 = {"$fieldNames":["loc","reason"],
"render-fancy-reason":anf_variant_member144,
"render-reason":anf_variant_member145,
"_match":R.makeMatch("fail-arg",2)};
var $fail$arg$brander142 = R.namedBrander("fail-arg",L[25]);
var $fail$arg$brands143 = {};
$fail$arg$brands143[ContractResult33._brand] = true;
$fail$arg$brands143[$fail$arg$brander142._brand] = true;
var fail$arg149 = R.makeVariantConstructor(L[27],function() {
return [FailureReason138];
},["reason150"],[L[26]],[false,false],["loc151","reason150"],$fail$arg_mutablemask147,$fail$arg$base141,$fail$arg$brands143,"fail-arg",$fail$arg_getfieldsref146,$fail$arg_getfields148,$fail$arg$base141);
var anf_assign153 = R.makeObject({"ContractResult":G(ContractResult33,"test",L[28]),
"is-ok":G($ok$brander123,"test",L[21]),
"ok":R.makeDataValue($ok$base122,$ok$brands124,"ok",$ok_getfieldsref126,$ok_getfields128,-1,$ok_mutablemask127,$ok$base122),
"is-fail":G($fail$brander130,"test",L[22]),
"fail":fail137,
"is-fail-arg":G($fail$arg$brander142,"test",L[25]),
"fail-arg":fail$arg149});
ContractResult154.$var = anf_assign153;
var anf_bracket155 = ContractResult154.$var;
$al32 = L[28];
var anf_assign157 = G(anf_bracket155,"ContractResult",L[28]);
is$ContractResult158.$var = anf_assign157;
var anf_bracket159 = ContractResult154.$var;
$al32 = L[21];
var anf_assign160 = G(anf_bracket159,"is-ok",L[21]);
is$ok161.$var = anf_assign160;
var anf_bracket162 = ContractResult154.$var;
$al32 = L[21];
var anf_assign163 = G(anf_bracket162,"ok",L[21]);
ok164.$var = anf_assign163;
var anf_bracket165 = ContractResult154.$var;
$al32 = L[22];
var anf_assign166 = G(anf_bracket165,"is-fail",L[22]);
is$fail167.$var = anf_assign166;
var anf_bracket168 = ContractResult154.$var;
$al32 = L[22];
var anf_assign169 = G(anf_bracket168,"fail",L[22]);
fail170.$var = anf_assign169;
var anf_bracket171 = ContractResult154.$var;
$al32 = L[25];
var anf_assign172 = G(anf_bracket171,"is-fail-arg",L[25]);
is$fail$arg173.$var = anf_assign172;
var anf_bracket174 = ContractResult154.$var;
$al32 = L[25];
var anf_assign175 = G(anf_bracket174,"fail-arg",L[25]);
fail$arg176.$var = anf_assign175;
var $temp_full178 = function($self200,$loc179,$from$fail$arg180) {
var $step177 = 0;
var $ans181 = D;
var $al182 = L[41];
try {
if(R.isActivationRecord($self200)) {
$step177 = $self200.step;
$al182 = $self200.from;
$ans181 = $self200.ans;
self200 = $self200.args[0];
loc179 = $self200.args[1];
from$fail$arg180 = $self200.args[2];
anf_method_obj199 = $self200.vars[0];
anf_method_obj193 = $self200.vars[1];
anf_arg310 = $self200.vars[2];
anf_arg194 = $self200.vars[3];
anf_arg321 = $self200.vars[4];
anf_arg195 = $self200.vars[5];
anf_arg335 = $self200.vars[6];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[41],3,$t);
}
var self200 = $self200;
var loc179 = $loc179;
var from$fail$arg180 = $from$fail$arg180;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step177) {
case 0: $al182 = L[29];
var anf_method_obj199 = G(ED2,"error",L[29]);
$al182 = L[30];
var anf_method_obj193 = G(ED2,"para-nospace",L[30]);
$step177 = 1;
$al182 = L[31];
$field183 = R.getColonFieldLoc(ED2,"text",L[31]);
if(R.isMethod($field183)) {
$ans181 = $field183.full_meth(ED2,("At "));
} else {
if(!(R.isFunction($field183))) {
R.ffi.throwNonFunApp(L[31],$field183);
}
$ans181 = $field183.app(("At "));
}
break;
case 1: var anf_arg310 = $ans181;
var anf_fun184 = draw$and$highlight48.$var;
$al182 = L[32];
var anf_arg186 = G(self200,"loc",L[32]);
$step177 = 2;
$al182 = L[40];
if(!(R.isFunction(anf_fun184))) {
R.ffi.throwNonFunApp($al182,anf_fun184);
}
$ans181 = anf_fun184.app(anf_arg186);
break;
case 2: var anf_arg194 = $ans181;
$step177 = 3;
$al182 = L[33];
$field187 = R.getColonFieldLoc(ED2,"text",L[33]);
if(R.isMethod($field187)) {
$ans181 = $field187.full_meth(ED2,(", field "));
} else {
if(!(R.isFunction($field187))) {
R.ffi.throwNonFunApp(L[33],$field187);
}
$ans181 = $field187.app((", field "));
}
break;
case 3: var anf_arg321 = $ans181;
$al182 = L[34];
var anf_arg323 = G(self200,"field",L[34]);
$step177 = 4;
$al182 = L[35];
$field188 = R.getColonFieldLoc(ED2,"text",L[35]);
if(R.isMethod($field188)) {
$ans181 = $field188.full_meth(ED2,anf_arg323);
} else {
if(!(R.isFunction($field188))) {
R.ffi.throwNonFunApp(L[35],$field188);
}
$ans181 = $field188.app(anf_arg323);
}
break;
case 4: var anf_arg189 = $ans181;
$step177 = 5;
$al182 = L[36];
$field190 = R.getColonFieldLoc(ED2,"code",L[36]);
if(R.isMethod($field190)) {
$ans181 = $field190.full_meth(ED2,anf_arg189);
} else {
if(!(R.isFunction($field190))) {
R.ffi.throwNonFunApp(L[36],$field190);
}
$ans181 = $field190.app(anf_arg189);
}
break;
case 5: var anf_arg195 = $ans181;
$step177 = 6;
$al182 = L[37];
$field192 = R.getColonFieldLoc(ED2,"text",L[37]);
if(R.isMethod($field192)) {
$ans181 = $field192.full_meth(ED2,(" failed because"));
} else {
if(!(R.isFunction($field192))) {
R.ffi.throwNonFunApp(L[37],$field192);
}
$ans181 = $field192.app((" failed because"));
}
break;
case 6: var anf_arg333 = $ans181;
$step177 = 7;
$al182 = L[30];
$field196 = R.getColonFieldLoc(anf_method_obj193,"make5",L[30]);
if(R.isMethod($field196)) {
$ans181 = $field196.full_meth(anf_method_obj193,anf_arg310,anf_arg194,anf_arg321,anf_arg195,anf_arg333);
} else {
if(!(R.isFunction($field196))) {
R.ffi.throwNonFunApp(L[30],$field196);
}
$ans181 = $field196.app(anf_arg310,anf_arg194,anf_arg321,anf_arg195,anf_arg333);
}
break;
case 7: var anf_arg335 = $ans181;
$al182 = L[38];
var anf_method_obj197 = G(self200,"reason",L[38]);
$step177 = 8;
$al182 = L[39];
$field198 = R.getColonFieldLoc(anf_method_obj197,"render-reason",L[39]);
if(R.isMethod($field198)) {
$ans181 = $field198.full_meth(anf_method_obj197,loc179,from$fail$arg180);
} else {
if(!(R.isFunction($field198))) {
R.ffi.throwNonFunApp(L[39],$field198);
}
$ans181 = $field198.app(loc179,from$fail$arg180);
}
break;
case 8: var anf_arg201 = $ans181;
$step177 = 9;
$al182 = L[29];
$field202 = R.getColonFieldLoc(anf_method_obj199,"make2",L[29]);
if(R.isMethod($field202)) {
$ans181 = $field202.full_meth(anf_method_obj199,anf_arg335,anf_arg201);
} else {
if(!(R.isFunction($field202))) {
R.ffi.throwNonFunApp(L[29],$field202);
}
$ans181 = $field202.app(anf_arg335,anf_arg201);
}
break;
case 9: ++R.GAS;
return $ans181;
default: throw "No case numbered " + $step177 + " in $temp_full178";
}
}
} catch($e203) {
if(R.isCont($e203) && ($step177 !== 9)) {
$e203.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al182,$temp_full178,$step177,[self200,loc179,from$fail$arg180],[anf_method_obj199,anf_method_obj193,anf_arg310,anf_arg194,anf_arg321,anf_arg195,anf_arg335]);
}
if(R.isPyretException($e203)) {
$e203.pyretStack.push($al182);
}
throw $e203;
}
};
var anf_variant_member259 = R.makeMethod2($temp_full178,"render-reason");
var $temp_full205 = function($self220,$loc206,$from$fail$arg207) {
var $step204 = 0;
var $ans209 = D;
var $al210 = L[50];
try {
if(R.isActivationRecord($self220)) {
$step204 = $self220.step;
$al210 = $self220.from;
$ans209 = $self220.ans;
self220 = $self220.args[0];
loc206 = $self220.args[1];
from$fail$arg207 = $self220.args[2];
anf_method_obj221 = $self220.vars[0];
anf_method_obj214 = $self220.vars[1];
anf_arg215 = $self220.vars[2];
anf_arg362 = $self220.vars[3];
anf_arg222 = $self220.vars[4];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],3,$t);
}
var self220 = $self220;
var loc206 = $loc206;
var from$fail$arg207 = $from$fail$arg207;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step204) {
case 0: $al210 = L[42];
var anf_method_obj221 = G(ED2,"error",L[42]);
$al210 = L[43];
var anf_method_obj214 = G(ED2,"para-nospace",L[43]);
$step204 = 1;
$al210 = L[44];
$field211 = R.getColonFieldLoc(ED2,"text",L[44]);
if(R.isMethod($field211)) {
$ans209 = $field211.full_meth(ED2,("The annotation at "));
} else {
if(!(R.isFunction($field211))) {
R.ffi.throwNonFunApp(L[44],$field211);
}
$ans209 = $field211.app(("The annotation at "));
}
break;
case 1: var anf_arg215 = $ans209;
var anf_fun212 = draw$and$highlight48.$var;
$step204 = 2;
$al210 = L[49];
if(!(R.isFunction(anf_fun212))) {
R.ffi.throwNonFunApp($al210,anf_fun212);
}
$ans209 = anf_fun212.app(loc206);
break;
case 2: var anf_arg362 = $ans209;
$step204 = 3;
$al210 = L[45];
$field213 = R.getColonFieldLoc(ED2,"text",L[45]);
if(R.isMethod($field213)) {
$ans209 = $field213.full_meth(ED2,(" failed because"));
} else {
if(!(R.isFunction($field213))) {
R.ffi.throwNonFunApp(L[45],$field213);
}
$ans209 = $field213.app((" failed because"));
}
break;
case 3: var anf_arg216 = $ans209;
$step204 = 4;
$al210 = L[43];
$field217 = R.getColonFieldLoc(anf_method_obj214,"make3",L[43]);
if(R.isMethod($field217)) {
$ans209 = $field217.full_meth(anf_method_obj214,anf_arg215,anf_arg362,anf_arg216);
} else {
if(!(R.isFunction($field217))) {
R.ffi.throwNonFunApp(L[43],$field217);
}
$ans209 = $field217.app(anf_arg215,anf_arg362,anf_arg216);
}
break;
case 4: var anf_arg222 = $ans209;
$al210 = L[46];
var anf_method_obj218 = G(self220,"reason",L[46]);
$al210 = L[47];
var anf_arg219 = G(self220,"loc",L[47]);
$step204 = 5;
$al210 = L[48];
$field220 = R.getColonFieldLoc(anf_method_obj218,"render-reason",L[48]);
if(R.isMethod($field220)) {
$ans209 = $field220.full_meth(anf_method_obj218,anf_arg219,from$fail$arg207);
} else {
if(!(R.isFunction($field220))) {
R.ffi.throwNonFunApp(L[48],$field220);
}
$ans209 = $field220.app(anf_arg219,from$fail$arg207);
}
break;
case 5: var anf_arg224 = $ans209;
$step204 = 6;
$al210 = L[42];
$field225 = R.getColonFieldLoc(anf_method_obj221,"make2",L[42]);
if(R.isMethod($field225)) {
$ans209 = $field225.full_meth(anf_method_obj221,anf_arg222,anf_arg224);
} else {
if(!(R.isFunction($field225))) {
R.ffi.throwNonFunApp(L[42],$field225);
}
$ans209 = $field225.app(anf_arg222,anf_arg224);
}
break;
case 6: ++R.GAS;
return $ans209;
default: throw "No case numbered " + $step204 + " in $temp_full205";
}
}
} catch($e226) {
if(R.isCont($e226) && ($step204 !== 6)) {
$e226.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al210,$temp_full205,$step204,[self220,loc206,from$fail$arg207],[anf_method_obj221,anf_method_obj214,anf_arg215,anf_arg362,anf_arg222]);
}
if(R.isPyretException($e226)) {
$e226.pyretStack.push($al210);
}
throw $e226;
}
};
var anf_variant_member270 = R.makeMethod2($temp_full205,"render-reason");
var $temp_full228 = function($self229,$loc230,$from$fail$arg231) {
var $step227 = 0;
var $ans232 = D;
var $al233 = L[60];
try {
if(R.isActivationRecord($self229)) {
$step227 = $self229.step;
$al233 = $self229.from;
$ans232 = $self229.ans;
self229 = $self229.args[0];
loc230 = $self229.args[1];
from$fail$arg231 = $self229.args[2];
anf_method_obj249 = $self229.vars[0];
anf_method_obj240 = $self229.vars[1];
anf_arg241 = $self229.vars[2];
anf_arg242 = $self229.vars[3];
anf_arg243 = $self229.vars[4];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[60],3,$t);
}
var self229 = $self229;
var loc230 = $loc230;
var from$fail$arg231 = $from$fail$arg231;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step227) {
case 0: $al233 = L[51];
var anf_method_obj249 = G(ED2,"error",L[51]);
$al233 = L[52];
var anf_method_obj240 = G(ED2,"para",L[52]);
$step227 = 1;
$al233 = L[53];
$field234 = R.getColonFieldLoc(ED2,"text",L[53]);
if(R.isMethod($field234)) {
$ans232 = $field234.full_meth(ED2,("Missing field "));
} else {
if(!(R.isFunction($field234))) {
R.ffi.throwNonFunApp(L[53],$field234);
}
$ans232 = $field234.app(("Missing field "));
}
break;
case 1: var anf_arg241 = $ans232;
$al233 = L[54];
var anf_arg394 = G(self229,"field",L[54]);
$step227 = 2;
$al233 = L[55];
$field236 = R.getColonFieldLoc(ED2,"text",L[55]);
if(R.isMethod($field236)) {
$ans232 = $field236.full_meth(ED2,anf_arg394);
} else {
if(!(R.isFunction($field236))) {
R.ffi.throwNonFunApp(L[55],$field236);
}
$ans232 = $field236.app(anf_arg394);
}
break;
case 2: var anf_arg396 = $ans232;
$step227 = 3;
$al233 = L[56];
$field237 = R.getColonFieldLoc(ED2,"code",L[56]);
if(R.isMethod($field237)) {
$ans232 = $field237.full_meth(ED2,anf_arg396);
} else {
if(!(R.isFunction($field237))) {
R.ffi.throwNonFunApp(L[56],$field237);
}
$ans232 = $field237.app(anf_arg396);
}
break;
case 3: var anf_arg242 = $ans232;
$step227 = 4;
$al233 = L[57];
$field238 = R.getColonFieldLoc(ED2,"text",L[57]);
if(R.isMethod($field238)) {
$ans232 = $field238.full_meth(ED2,("is required at "));
} else {
if(!(R.isFunction($field238))) {
R.ffi.throwNonFunApp(L[57],$field238);
}
$ans232 = $field238.app(("is required at "));
}
break;
case 4: var anf_arg243 = $ans232;
var anf_fun239 = draw$and$highlight48.$var;
$al233 = L[58];
var anf_arg407 = G(self229,"loc",L[58]);
$step227 = 5;
$al233 = L[59];
if(!(R.isFunction(anf_fun239))) {
R.ffi.throwNonFunApp($al233,anf_fun239);
}
$ans232 = anf_fun239.app(anf_arg407);
break;
case 5: var anf_arg247 = $ans232;
$step227 = 6;
$al233 = L[52];
$field248 = R.getColonFieldLoc(anf_method_obj240,"make4",L[52]);
if(R.isMethod($field248)) {
$ans232 = $field248.full_meth(anf_method_obj240,anf_arg241,anf_arg242,anf_arg243,anf_arg247);
} else {
if(!(R.isFunction($field248))) {
R.ffi.throwNonFunApp(L[52],$field248);
}
$ans232 = $field248.app(anf_arg241,anf_arg242,anf_arg243,anf_arg247);
}
break;
case 6: var anf_arg250 = $ans232;
$step227 = 7;
$al233 = L[51];
$field253 = R.getColonFieldLoc(anf_method_obj249,"make1",L[51]);
if(R.isMethod($field253)) {
$ans232 = $field253.full_meth(anf_method_obj249,anf_arg250);
} else {
if(!(R.isFunction($field253))) {
R.ffi.throwNonFunApp(L[51],$field253);
}
$ans232 = $field253.app(anf_arg250);
}
break;
case 7: ++R.GAS;
return $ans232;
default: throw "No case numbered " + $step227 + " in $temp_full228";
}
}
} catch($e255) {
if(R.isCont($e255) && ($step227 !== 7)) {
$e255.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al233,$temp_full228,$step227,[self229,loc230,from$fail$arg231],[anf_method_obj249,anf_method_obj240,anf_arg241,anf_arg242,anf_arg243]);
}
if(R.isPyretException($e255)) {
$e255.pyretStack.push($al233);
}
throw $e255;
}
};
var anf_variant_member281 = R.makeMethod2($temp_full228,"render-reason");
var $field$failure_getfields262 = function(f) {
return f(this.dict["loc"],this.dict["field"],this.dict["reason"]);
};
var $field$failure_getfieldsref260 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["field"],false,refmask[1]),R.derefField(this.dict["reason"],false,refmask[2]));
};
var $field$failure_mutablemask261 = [false,false,false];
var $field$failure$base256 = {"$fieldNames":["loc","field","reason"],
"render-reason":anf_variant_member259,
"_match":R.makeMatch("field-failure",3)};
var $field$failure$brander257 = R.namedBrander("field-failure",L[61]);
var $field$failure$brands258 = {};
$field$failure$brands258[FieldFailure34._brand] = true;
$field$failure$brands258[$field$failure$brander257._brand] = true;
var field$failure263 = R.makeVariantConstructor(L[62],function() {
return [];
},[],[],[false,false,false],["loc264","field265","reason266"],$field$failure_mutablemask261,$field$failure$base256,$field$failure$brands258,"field-failure",$field$failure_getfieldsref260,$field$failure_getfields262,$field$failure$base256);
var $ann$failure_getfields273 = function(f) {
return f(this.dict["loc"],this.dict["ann"],this.dict["reason"]);
};
var $ann$failure_getfieldsref271 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["ann"],false,refmask[1]),R.derefField(this.dict["reason"],false,refmask[2]));
};
var $ann$failure_mutablemask272 = [false,false,false];
var $ann$failure$base267 = {"$fieldNames":["loc","ann","reason"],
"render-reason":anf_variant_member270,
"_match":R.makeMatch("ann-failure",3)};
var $ann$failure$brander268 = R.namedBrander("ann-failure",L[63]);
var $ann$failure$brands269 = {};
$ann$failure$brands269[FieldFailure34._brand] = true;
$ann$failure$brands269[$ann$failure$brander268._brand] = true;
var ann$failure274 = R.makeVariantConstructor(L[64],function() {
return [];
},[],[],[false,false,false],["loc275","ann276","reason277"],$ann$failure_mutablemask272,$ann$failure$base267,$ann$failure$brands269,"ann-failure",$ann$failure_getfieldsref271,$ann$failure_getfields273,$ann$failure$base267);
var $missing$field_getfields284 = function(f) {
return f(this.dict["loc"],this.dict["field"]);
};
var $missing$field_getfieldsref282 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["field"],false,refmask[1]));
};
var $missing$field_mutablemask283 = [false,false];
var $missing$field$base278 = {"$fieldNames":["loc","field"],
"render-reason":anf_variant_member281,
"_match":R.makeMatch("missing-field",2)};
var $missing$field$brander279 = R.namedBrander("missing-field",L[65]);
var $missing$field$brands280 = {};
$missing$field$brands280[FieldFailure34._brand] = true;
$missing$field$brands280[$missing$field$brander279._brand] = true;
var missing$field285 = R.makeVariantConstructor(L[66],function() {
return [];
},[],[],[false,false],["loc286","field287"],$missing$field_mutablemask283,$missing$field$base278,$missing$field$brands280,"missing-field",$missing$field_getfieldsref282,$missing$field_getfields284,$missing$field$base278);
var anf_assign288 = R.makeObject({"FieldFailure":G(FieldFailure34,"test",L[67]),
"is-field-failure":G($field$failure$brander257,"test",L[61]),
"field-failure":field$failure263,
"is-ann-failure":G($ann$failure$brander268,"test",L[63]),
"ann-failure":ann$failure274,
"is-missing-field":G($missing$field$brander279,"test",L[65]),
"missing-field":missing$field285});
FieldFailure289.$var = anf_assign288;
var anf_bracket290 = FieldFailure289.$var;
$al32 = L[67];
var anf_assign291 = G(anf_bracket290,"FieldFailure",L[67]);
is$FieldFailure292.$var = anf_assign291;
var anf_bracket293 = FieldFailure289.$var;
$al32 = L[61];
var anf_assign294 = G(anf_bracket293,"is-field-failure",L[61]);
is$field$failure295.$var = anf_assign294;
var anf_bracket296 = FieldFailure289.$var;
$al32 = L[61];
var anf_assign297 = G(anf_bracket296,"field-failure",L[61]);
field$failure298.$var = anf_assign297;
var anf_bracket299 = FieldFailure289.$var;
$al32 = L[63];
var anf_assign300 = G(anf_bracket299,"is-ann-failure",L[63]);
is$ann$failure301.$var = anf_assign300;
var anf_bracket302 = FieldFailure289.$var;
$al32 = L[63];
var anf_assign303 = G(anf_bracket302,"ann-failure",L[63]);
ann$failure304.$var = anf_assign303;
var anf_bracket305 = FieldFailure289.$var;
$al32 = L[65];
var anf_assign306 = G(anf_bracket305,"is-missing-field",L[65]);
is$missing$field307.$var = anf_assign306;
var anf_bracket308 = FieldFailure289.$var;
$al32 = L[65];
var anf_assign309 = G(anf_bracket308,"missing-field",L[65]);
missing$field310.$var = anf_assign309;
var $temp_full312 = function($self313,$loc314,$from$fail$arg315,$maybe$stack$loc316,$src$available317,$maybe$ast318) {
var $step311 = 0;
var $ans320 = D;
var $al321 = L[145];
try {
if(R.isActivationRecord($self313)) {
$step311 = $self313.step;
$al321 = $self313.from;
$ans320 = $self313.ans;
self313 = $self313.args[0];
loc314 = $self313.args[1];
from$fail$arg315 = $self313.args[2];
maybe$stack$loc316 = $self313.args[3];
src$available317 = $self313.args[4];
maybe$ast318 = $self313.args[5];
cases322 = $self313.vars[0];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[145],6,$t);
}
var self313 = $self313;
var loc314 = $loc314;
var from$fail$arg315 = $from$fail$arg315;
var maybe$stack$loc316 = $maybe$stack$loc316;
var src$available317 = $src$available317;
var maybe$ast318 = $maybe$ast318;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step311) {
case 0: $step311 = 1;
$al321 = L[144];
if(!(R.isFunction(maybe$stack$loc316))) {
R.ffi.throwNonFunApp($al321,maybe$stack$loc316);
}
$ans320 = maybe$stack$loc316.app((0),(true));
break;
case 1: var cases322 = $ans320;
$step311 = 2;
$al321 = L[143];
R._checkAnn(L[143],R.getDotAnn(L[143],"O",O24,"Option"),cases322);
break;
case 2: var $cases_dispatch787 = {"some":3,
"none":4};
$al321 = L[126];
$step311 = $cases_dispatch787[cases322.$name] || 5;
break;
case 3: if(cases322.$arity !== 1) {
if(cases322.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[125],1,cases322.$arity,L[126]);
} else {
R.ffi.throwCasesSingletonErrorC(L[125],true,L[126]);
}
}
$step311 = 6;
$al321 = L[127];
var $temp_branch594 = function($app$loc323) {
var $step595 = 0;
var $ans599 = D;
var $al600 = L[68];
try {
if(R.isActivationRecord($app$loc323)) {
$step595 = $app$loc323.step;
$al600 = $app$loc323.from;
$ans599 = $app$loc323.ans;
app$loc323 = $app$loc323.args[0];
cases324 = $app$loc323.vars[0];
anf_method_obj590 = $app$loc323.vars[1];
anf_method_obj575 = $app$loc323.vars[2];
anf_arg578 = $app$loc323.vars[3];
anf_arg630 = $app$loc323.vars[4];
anf_arg632 = $app$loc323.vars[5];
anf_arg580 = $app$loc323.vars[6];
anf_arg641 = $app$loc323.vars[7];
} else {
var app$loc323 = $app$loc323;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step595) {
case 0: $step595 = 1;
$al600 = L[68];
if(!(R.isFunction(src$available317))) {
R.ffi.throwNonFunApp($al600,src$available317);
}
$ans599 = src$available317.app(app$loc323);
break;
case 1: var anf_arg471 = $ans599;
$al600 = L[68];
var anf_if593 = R.checkWrapBoolean(anf_arg471);
$step595 = R.isPyretTrue(anf_if593)?2:8;
break;
case 2: $step595 = 3;
$al600 = L[113];
if(!(R.isFunction(maybe$ast318))) {
R.ffi.throwNonFunApp($al600,maybe$ast318);
}
$ans599 = maybe$ast318.app(app$loc323);
break;
case 3: var cases324 = $ans599;
$step595 = 4;
$al600 = L[112];
R._checkAnn(L[112],R.getDotAnn(L[112],"O",O24,"Option"),cases324);
break;
case 4: var $cases_dispatch717 = {"some":5,
"none":6};
$al600 = L[93];
$step595 = $cases_dispatch717[cases324.$name] || 7;
break;
case 5: if(cases324.$arity !== 1) {
if(cases324.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[92],1,cases324.$arity,L[93]);
} else {
R.ffi.throwCasesSingletonErrorC(L[92],true,L[93]);
}
}
$step595 = 17;
$al600 = L[94];
var $temp_branch631 = function($ast369) {
var $step632 = 0;
var $ans633 = D;
var $al634 = L[69];
try {
if(R.isActivationRecord($ast369)) {
$step632 = $ast369.step;
$al634 = $ast369.from;
$ans633 = $ast369.ans;
ast369 = $ast369.args[0];
anf_method_obj404 = $ast369.vars[0];
anf_method_obj334 = $ast369.vars[1];
anf_arg481 = $ast369.vars[2];
anf_arg330 = $ast369.vars[3];
anf_arg413 = $ast369.vars[4];
anf_arg414 = $ast369.vars[5];
anf_method_obj399 = $ast369.vars[6];
anf_arg504 = $ast369.vars[7];
anf_method_obj358 = $ast369.vars[8];
anf_arg517 = $ast369.vars[9];
anf_arg390 = $ast369.vars[10];
anf_method_obj381 = $ast369.vars[11];
anf_arg400 = $ast369.vars[12];
anf_arg555 = $ast369.vars[13];
} else {
var ast369 = $ast369;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step632) {
case 0: $al634 = L[69];
var anf_method_obj404 = G(ED2,"error",L[69]);
$al634 = L[70];
var anf_method_obj334 = G(ED2,"para",L[70]);
$step632 = 1;
$al634 = L[71];
$field635 = R.getColonFieldLoc(ED2,"text",L[71]);
if(R.isMethod($field635)) {
$ans633 = $field635.full_meth(ED2,("The "));
} else {
if(!(R.isFunction($field635))) {
R.ffi.throwNonFunApp(L[71],$field635);
}
$ans633 = $field635.app(("The "));
}
break;
case 1: var anf_arg481 = $ans633;
$step632 = 2;
$al634 = L[72];
$field636 = R.getColonFieldLoc(ED2,"text",L[72]);
if(R.isMethod($field636)) {
$ans633 = $field636.full_meth(ED2,("function application"));
} else {
if(!(R.isFunction($field636))) {
R.ffi.throwNonFunApp(L[72],$field636);
}
$ans633 = $field636.app(("function application"));
}
break;
case 2: var anf_arg330 = $ans633;
$al634 = L[73];
var anf_method_obj327 = G(ED2,"locs",L[73]);
$step632 = 3;
$al634 = L[73];
$field640 = R.getColonFieldLoc(anf_method_obj327,"make1",L[73]);
if(R.isMethod($field640)) {
$ans633 = $field640.full_meth(anf_method_obj327,app$loc323);
} else {
if(!(R.isFunction($field640))) {
R.ffi.throwNonFunApp(L[73],$field640);
}
$ans633 = $field640.app(app$loc323);
}
break;
case 3: var anf_arg490 = $ans633;
$step632 = 4;
$al634 = L[74];
$field642 = R.getColonFieldLoc(ED2,"highlight",L[74]);
if(R.isMethod($field642)) {
$ans633 = $field642.full_meth(ED2,anf_arg330,anf_arg490,(-1));
} else {
if(!(R.isFunction($field642))) {
R.ffi.throwNonFunApp(L[74],$field642);
}
$ans633 = $field642.app(anf_arg330,anf_arg490,(-1));
}
break;
case 4: var anf_arg492 = $ans633;
$step632 = 5;
$al634 = L[70];
$field644 = R.getColonFieldLoc(anf_method_obj334,"make2",L[70]);
if(R.isMethod($field644)) {
$ans633 = $field644.full_meth(anf_method_obj334,anf_arg481,anf_arg492);
} else {
if(!(R.isFunction($field644))) {
R.ffi.throwNonFunApp(L[70],$field644);
}
$ans633 = $field644.app(anf_arg481,anf_arg492);
}
break;
case 5: var anf_arg413 = $ans633;
$step632 = 6;
$al634 = L[75];
$field645 = R.getColonFieldLoc(ED2,"cmcode",L[75]);
if(R.isMethod($field645)) {
$ans633 = $field645.full_meth(ED2,app$loc323);
} else {
if(!(R.isFunction($field645))) {
R.ffi.throwNonFunApp(L[75],$field645);
}
$ans633 = $field645.app(app$loc323);
}
break;
case 6: var anf_arg414 = $ans633;
$al634 = L[76];
var anf_method_obj399 = G(ED2,"para",L[76]);
$step632 = 7;
$al634 = L[77];
$field646 = R.getColonFieldLoc(ED2,"text",L[77]);
if(R.isMethod($field646)) {
$ans633 = $field646.full_meth(ED2,("failed because the "));
} else {
if(!(R.isFunction($field646))) {
R.ffi.throwNonFunApp(L[77],$field646);
}
$ans633 = $field646.app(("failed because the "));
}
break;
case 7: var anf_arg504 = $ans633;
$al634 = L[78];
var anf_method_obj358 = G(ED2,"sequence",L[78]);
$al634 = L[79];
var anf_arg355 = G(self313,"index",L[79]);
$step632 = 8;
$al634 = L[91];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al634,_plus1);
}
$ans633 = _plus1.app(anf_arg355,(1));
break;
case 8: var anf_arg515 = $ans633;
$step632 = 9;
$al634 = L[80];
$field647 = R.getColonFieldLoc(ED2,"ed-nth",L[80]);
if(R.isMethod($field647)) {
$ans633 = $field647.full_meth(ED2,anf_arg515);
} else {
if(!(R.isFunction($field647))) {
R.ffi.throwNonFunApp(L[80],$field647);
}
$ans633 = $field647.app(anf_arg515);
}
break;
case 9: var anf_arg517 = $ans633;
$step632 = 10;
$al634 = L[81];
$field649 = R.getColonFieldLoc(ED2,"text",L[81]);
if(R.isMethod($field649)) {
$ans633 = $field649.full_meth(ED2,(" argument"));
} else {
if(!(R.isFunction($field649))) {
R.ffi.throwNonFunApp(L[81],$field649);
}
$ans633 = $field649.app((" argument"));
}
break;
case 10: var anf_arg365 = $ans633;
$step632 = 11;
$al634 = L[78];
$field651 = R.getColonFieldLoc(anf_method_obj358,"make2",L[78]);
if(R.isMethod($field651)) {
$ans633 = $field651.full_meth(anf_method_obj358,anf_arg517,anf_arg365);
} else {
if(!(R.isFunction($field651))) {
R.ffi.throwNonFunApp(L[78],$field651);
}
$ans633 = $field651.app(anf_arg517,anf_arg365);
}
break;
case 11: var anf_arg390 = $ans633;
$al634 = L[82];
var anf_method_obj381 = G(ED2,"locs",L[82]);
$al634 = L[83];
var anf_method_obj370 = G(ast369,"args",L[83]);
$al634 = L[84];
var anf_arg378 = G(self313,"index",L[84]);
$step632 = 12;
$al634 = L[85];
$field652 = R.getColonFieldLoc(anf_method_obj370,"get",L[85]);
if(R.isMethod($field652)) {
$ans633 = $field652.full_meth(anf_method_obj370,anf_arg378);
} else {
if(!(R.isFunction($field652))) {
R.ffi.throwNonFunApp(L[85],$field652);
}
$ans633 = $field652.app(anf_arg378);
}
break;
case 12: var anf_bracket380 = $ans633;
$al634 = L[86];
var anf_arg546 = G(anf_bracket380,"l",L[86]);
$step632 = 13;
$al634 = L[82];
$field653 = R.getColonFieldLoc(anf_method_obj381,"make1",L[82]);
if(R.isMethod($field653)) {
$ans633 = $field653.full_meth(anf_method_obj381,anf_arg546);
} else {
if(!(R.isFunction($field653))) {
R.ffi.throwNonFunApp(L[82],$field653);
}
$ans633 = $field653.app(anf_arg546);
}
break;
case 13: var anf_arg393 = $ans633;
$step632 = 14;
$al634 = L[87];
$field654 = R.getColonFieldLoc(ED2,"highlight",L[87]);
if(R.isMethod($field654)) {
$ans633 = $field654.full_meth(ED2,anf_arg390,anf_arg393,(0));
} else {
if(!(R.isFunction($field654))) {
R.ffi.throwNonFunApp(L[87],$field654);
}
$ans633 = $field654.app(anf_arg390,anf_arg393,(0));
}
break;
case 14: var anf_arg400 = $ans633;
$step632 = 15;
$al634 = L[88];
$field655 = R.getColonFieldLoc(ED2,"text",L[88]);
if(R.isMethod($field655)) {
$ans633 = $field655.full_meth(ED2,(" evaluated to an unexpected value."));
} else {
if(!(R.isFunction($field655))) {
R.ffi.throwNonFunApp(L[88],$field655);
}
$ans633 = $field655.app((" evaluated to an unexpected value."));
}
break;
case 15: var anf_arg553 = $ans633;
$step632 = 16;
$al634 = L[76];
$field657 = R.getColonFieldLoc(anf_method_obj399,"make3",L[76]);
if(R.isMethod($field657)) {
$ans633 = $field657.full_meth(anf_method_obj399,anf_arg504,anf_arg400,anf_arg553);
} else {
if(!(R.isFunction($field657))) {
R.ffi.throwNonFunApp(L[76],$field657);
}
$ans633 = $field657.app(anf_arg504,anf_arg400,anf_arg553);
}
break;
case 16: var anf_arg555 = $ans633;
$al634 = L[89];
var anf_method_obj402 = G(self313,"reason",L[89]);
$step632 = 17;
$al634 = L[90];
$field662 = R.getColonFieldLoc(anf_method_obj402,"render-fancy-reason",L[90]);
if(R.isMethod($field662)) {
$ans633 = $field662.full_meth(anf_method_obj402,loc314,(false),maybe$stack$loc316,src$available317,maybe$ast318);
} else {
if(!(R.isFunction($field662))) {
R.ffi.throwNonFunApp(L[90],$field662);
}
$ans633 = $field662.app(loc314,(false),maybe$stack$loc316,src$available317,maybe$ast318);
}
break;
case 17: var anf_arg415 = $ans633;
$step632 = 18;
$al634 = L[69];
$field664 = R.getColonFieldLoc(anf_method_obj404,"make4",L[69]);
if(R.isMethod($field664)) {
$ans633 = $field664.full_meth(anf_method_obj404,anf_arg413,anf_arg414,anf_arg555,anf_arg415);
} else {
if(!(R.isFunction($field664))) {
R.ffi.throwNonFunApp(L[69],$field664);
}
$ans633 = $field664.app(anf_arg413,anf_arg414,anf_arg555,anf_arg415);
}
break;
case 18: ++R.GAS;
return $ans633;
default: throw "No case numbered " + $step632 + " in $temp_branch631";
}
}
} catch($e665) {
if(R.isCont($e665) && ($step632 !== 18)) {
$e665.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al634,$temp_branch631,$step632,[ast369],[anf_method_obj404,anf_method_obj334,anf_arg481,anf_arg330,anf_arg413,anf_arg414,anf_method_obj399,anf_arg504,anf_method_obj358,anf_arg517,anf_arg390,anf_method_obj381,anf_arg400,anf_arg555]);
}
if(R.isPyretException($e665)) {
$e665.pyretStack.push($al634);
}
throw $e665;
}
};
$ans599 = cases324.$app_fields($temp_branch631,[false]);
break;
case 6: if(cases324.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[110],false,L[93]);
}
$step595 = 17;
$al600 = L[111];
var $temp_branch688 = function($$resumer101) {
var $step689 = 0;
var $ans692 = D;
var $al693 = L[95];
try {
if(R.isActivationRecord($$resumer101)) {
$step689 = $$resumer101.step;
$al693 = $$resumer101.from;
$ans692 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj499 = $$resumer101.vars[0];
anf_method_obj468 = $$resumer101.vars[1];
anf_arg473 = $$resumer101.vars[2];
anf_arg466 = $$resumer101.vars[3];
anf_arg501 = $$resumer101.vars[4];
anf_arg586 = $$resumer101.vars[5];
anf_method_obj489 = $$resumer101.vars[6];
anf_arg491 = $$resumer101.vars[7];
anf_arg601 = $$resumer101.vars[8];
anf_arg519 = $$resumer101.vars[9];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step689) {
case 0: $al693 = L[95];
var anf_method_obj499 = G(ED2,"error",L[95]);
$al693 = L[96];
var anf_method_obj468 = G(ED2,"para",L[96]);
$step689 = 1;
$al693 = L[97];
$field694 = R.getColonFieldLoc(ED2,"text",L[97]);
if(R.isMethod($field694)) {
$ans692 = $field694.full_meth(ED2,("The "));
} else {
if(!(R.isFunction($field694))) {
R.ffi.throwNonFunApp(L[97],$field694);
}
$ans692 = $field694.app(("The "));
}
break;
case 1: var anf_arg473 = $ans692;
$step689 = 2;
$al693 = L[98];
$field696 = R.getColonFieldLoc(ED2,"text",L[98]);
if(R.isMethod($field696)) {
$ans692 = $field696.full_meth(ED2,("function application"));
} else {
if(!(R.isFunction($field696))) {
R.ffi.throwNonFunApp(L[98],$field696);
}
$ans692 = $field696.app(("function application"));
}
break;
case 2: var anf_arg466 = $ans692;
$al693 = L[99];
var anf_method_obj457 = G(ED2,"locs",L[99]);
$step689 = 3;
$al693 = L[99];
$field697 = R.getColonFieldLoc(anf_method_obj457,"make1",L[99]);
if(R.isMethod($field697)) {
$ans692 = $field697.full_meth(anf_method_obj457,app$loc323);
} else {
if(!(R.isFunction($field697))) {
R.ffi.throwNonFunApp(L[99],$field697);
}
$ans692 = $field697.app(app$loc323);
}
break;
case 3: var anf_arg576 = $ans692;
$step689 = 4;
$al693 = L[100];
$field698 = R.getColonFieldLoc(ED2,"highlight",L[100]);
if(R.isMethod($field698)) {
$ans692 = $field698.full_meth(ED2,anf_arg466,anf_arg576,(0));
} else {
if(!(R.isFunction($field698))) {
R.ffi.throwNonFunApp(L[100],$field698);
}
$ans692 = $field698.app(anf_arg466,anf_arg576,(0));
}
break;
case 4: var anf_arg482 = $ans692;
$step689 = 5;
$al693 = L[96];
$field699 = R.getColonFieldLoc(anf_method_obj468,"make2",L[96]);
if(R.isMethod($field699)) {
$ans692 = $field699.full_meth(anf_method_obj468,anf_arg473,anf_arg482);
} else {
if(!(R.isFunction($field699))) {
R.ffi.throwNonFunApp(L[96],$field699);
}
$ans692 = $field699.app(anf_arg473,anf_arg482);
}
break;
case 5: var anf_arg501 = $ans692;
$step689 = 6;
$al693 = L[101];
$field700 = R.getColonFieldLoc(ED2,"cmcode",L[101]);
if(R.isMethod($field700)) {
$ans692 = $field700.full_meth(ED2,app$loc323);
} else {
if(!(R.isFunction($field700))) {
R.ffi.throwNonFunApp(L[101],$field700);
}
$ans692 = $field700.app(app$loc323);
}
break;
case 6: var anf_arg586 = $ans692;
$al693 = L[102];
var anf_method_obj489 = G(ED2,"para",L[102]);
$step689 = 7;
$al693 = L[103];
$field701 = R.getColonFieldLoc(ED2,"text",L[103]);
if(R.isMethod($field701)) {
$ans692 = $field701.full_meth(ED2,("failed because the "));
} else {
if(!(R.isFunction($field701))) {
R.ffi.throwNonFunApp(L[103],$field701);
}
$ans692 = $field701.app(("failed because the "));
}
break;
case 7: var anf_arg491 = $ans692;
$al693 = L[104];
var anf_arg486 = G(self313,"index",L[104]);
$step689 = 8;
$al693 = L[109];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al693,_plus1);
}
$ans692 = _plus1.app(anf_arg486,(1));
break;
case 8: var anf_arg599 = $ans692;
$step689 = 9;
$al693 = L[105];
$field703 = R.getColonFieldLoc(ED2,"ed-nth",L[105]);
if(R.isMethod($field703)) {
$ans692 = $field703.full_meth(ED2,anf_arg599);
} else {
if(!(R.isFunction($field703))) {
R.ffi.throwNonFunApp(L[105],$field703);
}
$ans692 = $field703.app(anf_arg599);
}
break;
case 9: var anf_arg601 = $ans692;
$step689 = 10;
$al693 = L[106];
$field705 = R.getColonFieldLoc(ED2,"text",L[106]);
if(R.isMethod($field705)) {
$ans692 = $field705.full_meth(ED2,(" argument evaluated to an unexpected value."));
} else {
if(!(R.isFunction($field705))) {
R.ffi.throwNonFunApp(L[106],$field705);
}
$ans692 = $field705.app((" argument evaluated to an unexpected value."));
}
break;
case 10: var anf_arg494 = $ans692;
$step689 = 11;
$al693 = L[102];
$field706 = R.getColonFieldLoc(anf_method_obj489,"make3",L[102]);
if(R.isMethod($field706)) {
$ans692 = $field706.full_meth(anf_method_obj489,anf_arg491,anf_arg601,anf_arg494);
} else {
if(!(R.isFunction($field706))) {
R.ffi.throwNonFunApp(L[102],$field706);
}
$ans692 = $field706.app(anf_arg491,anf_arg601,anf_arg494);
}
break;
case 11: var anf_arg519 = $ans692;
$al693 = L[107];
var anf_method_obj496 = G(self313,"reason",L[107]);
$step689 = 12;
$al693 = L[108];
$field712 = R.getColonFieldLoc(anf_method_obj496,"render-fancy-reason",L[108]);
if(R.isMethod($field712)) {
$ans692 = $field712.full_meth(anf_method_obj496,loc314,(false),maybe$stack$loc316,src$available317,maybe$ast318);
} else {
if(!(R.isFunction($field712))) {
R.ffi.throwNonFunApp(L[108],$field712);
}
$ans692 = $field712.app(loc314,(false),maybe$stack$loc316,src$available317,maybe$ast318);
}
break;
case 12: var anf_arg615 = $ans692;
$step689 = 13;
$al693 = L[95];
$field713 = R.getColonFieldLoc(anf_method_obj499,"make4",L[95]);
if(R.isMethod($field713)) {
$ans692 = $field713.full_meth(anf_method_obj499,anf_arg501,anf_arg586,anf_arg519,anf_arg615);
} else {
if(!(R.isFunction($field713))) {
R.ffi.throwNonFunApp(L[95],$field713);
}
$ans692 = $field713.app(anf_arg501,anf_arg586,anf_arg519,anf_arg615);
}
break;
case 13: ++R.GAS;
return $ans692;
default: throw "No case numbered " + $step689 + " in $temp_branch688";
}
}
} catch($e716) {
if(R.isCont($e716) && ($step689 !== 13)) {
$e716.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al693,$temp_branch688,$step689,[],[anf_method_obj499,anf_method_obj468,anf_arg473,anf_arg466,anf_arg501,anf_arg586,anf_method_obj489,anf_arg491,anf_arg601,anf_arg519]);
}
if(R.isPyretException($e716)) {
$e716.pyretStack.push($al693);
}
throw $e716;
}
};
$ans599 = cases324.$app_fields($temp_branch688,[]);
break;
case 7: $step595 = 17;
$al600 = L[93];
$ans599 = R.throwNoCasesMatched(L[93],cases324);
break;
case 8: $al600 = L[114];
var anf_method_obj590 = G(ED2,"error",L[114]);
$al600 = L[115];
var anf_method_obj575 = G(ED2,"para",L[115]);
$step595 = 9;
$al600 = L[116];
$field726 = R.getColonFieldLoc(ED2,"text",L[116]);
if(R.isMethod($field726)) {
$ans599 = $field726.full_meth(ED2,("The function application at "));
} else {
if(!(R.isFunction($field726))) {
R.ffi.throwNonFunApp(L[116],$field726);
}
$ans599 = $field726.app(("The function application at "));
}
break;
case 9: var anf_arg578 = $ans599;
$step595 = 10;
$al600 = L[117];
$field727 = R.getColonFieldLoc(ED2,"loc",L[117]);
if(R.isMethod($field727)) {
$ans599 = $field727.full_meth(ED2,app$loc323);
} else {
if(!(R.isFunction($field727))) {
R.ffi.throwNonFunApp(L[117],$field727);
}
$ans599 = $field727.app(app$loc323);
}
break;
case 10: var anf_arg630 = $ans599;
$step595 = 11;
$al600 = L[118];
$field728 = R.getColonFieldLoc(ED2,"text",L[118]);
if(R.isMethod($field728)) {
$ans599 = $field728.full_meth(ED2,(" failed because the "));
} else {
if(!(R.isFunction($field728))) {
R.ffi.throwNonFunApp(L[118],$field728);
}
$ans599 = $field728.app((" failed because the "));
}
break;
case 11: var anf_arg632 = $ans599;
$al600 = L[119];
var anf_arg558 = G(self313,"index",L[119]);
$step595 = 12;
$al600 = L[124];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al600,_plus1);
}
$ans599 = _plus1.app(anf_arg558,(1));
break;
case 12: var anf_arg571 = $ans599;
$step595 = 13;
$al600 = L[120];
$field729 = R.getColonFieldLoc(ED2,"ed-nth",L[120]);
if(R.isMethod($field729)) {
$ans599 = $field729.full_meth(ED2,anf_arg571);
} else {
if(!(R.isFunction($field729))) {
R.ffi.throwNonFunApp(L[120],$field729);
}
$ans599 = $field729.app(anf_arg571);
}
break;
case 13: var anf_arg580 = $ans599;
$step595 = 14;
$al600 = L[121];
$field730 = R.getColonFieldLoc(ED2,"text",L[121]);
if(R.isMethod($field730)) {
$ans599 = $field730.full_meth(ED2,(" argument evaluated to an unexpected value."));
} else {
if(!(R.isFunction($field730))) {
R.ffi.throwNonFunApp(L[121],$field730);
}
$ans599 = $field730.app((" argument evaluated to an unexpected value."));
}
break;
case 14: var anf_arg639 = $ans599;
$step595 = 15;
$al600 = L[115];
$field731 = R.getColonFieldLoc(anf_method_obj575,"make5",L[115]);
if(R.isMethod($field731)) {
$ans599 = $field731.full_meth(anf_method_obj575,anf_arg578,anf_arg630,anf_arg632,anf_arg580,anf_arg639);
} else {
if(!(R.isFunction($field731))) {
R.ffi.throwNonFunApp(L[115],$field731);
}
$ans599 = $field731.app(anf_arg578,anf_arg630,anf_arg632,anf_arg580,anf_arg639);
}
break;
case 15: var anf_arg641 = $ans599;
$al600 = L[122];
var anf_method_obj583 = G(self313,"reason",L[122]);
$step595 = 16;
$al600 = L[123];
$field732 = R.getColonFieldLoc(anf_method_obj583,"render-fancy-reason",L[123]);
if(R.isMethod($field732)) {
$ans599 = $field732.full_meth(anf_method_obj583,loc314,from$fail$arg315,maybe$stack$loc316,src$available317,maybe$ast318);
} else {
if(!(R.isFunction($field732))) {
R.ffi.throwNonFunApp(L[123],$field732);
}
$ans599 = $field732.app(loc314,from$fail$arg315,maybe$stack$loc316,src$available317,maybe$ast318);
}
break;
case 16: var anf_arg591 = $ans599;
$step595 = 17;
$al600 = L[114];
$field736 = R.getColonFieldLoc(anf_method_obj590,"make2",L[114]);
if(R.isMethod($field736)) {
$ans599 = $field736.full_meth(anf_method_obj590,anf_arg641,anf_arg591);
} else {
if(!(R.isFunction($field736))) {
R.ffi.throwNonFunApp(L[114],$field736);
}
$ans599 = $field736.app(anf_arg641,anf_arg591);
}
break;
case 17: ++R.GAS;
return $ans599;
default: throw "No case numbered " + $step595 + " in $temp_branch594";
}
}
} catch($e737) {
if(R.isCont($e737) && ($step595 !== 17)) {
$e737.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al600,$temp_branch594,$step595,[app$loc323],[cases324,anf_method_obj590,anf_method_obj575,anf_arg578,anf_arg630,anf_arg632,anf_arg580,anf_arg641]);
}
if(R.isPyretException($e737)) {
$e737.pyretStack.push($al600);
}
throw $e737;
}
};
$ans320 = cases322.$app_fields($temp_branch594,[false]);
break;
case 4: if(cases322.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[141],false,L[126]);
}
$step311 = 6;
$al321 = L[142];
var $temp_branch768 = function($$resumer101) {
var $step769 = 0;
var $ans770 = D;
var $al771 = L[128];
try {
if(R.isActivationRecord($$resumer101)) {
$step769 = $$resumer101.step;
$al771 = $$resumer101.from;
$ans770 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
anf_method_obj763 = $$resumer101.vars[0];
anf_method_obj754 = $$resumer101.vars[1];
anf_arg651 = $$resumer101.vars[2];
anf_arg755 = $$resumer101.vars[3];
anf_arg756 = $$resumer101.vars[4];
anf_arg666 = $$resumer101.vars[5];
anf_arg765 = $$resumer101.vars[6];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step769) {
case 0: $al771 = L[128];
var anf_method_obj763 = G(ED2,"error",L[128]);
$al771 = L[129];
var anf_method_obj754 = G(ED2,"para",L[129]);
$step769 = 1;
$al771 = L[130];
$field772 = R.getColonFieldLoc(ED2,"text",L[130]);
if(R.isMethod($field772)) {
$ans770 = $field772.full_meth(ED2,("An application of "));
} else {
if(!(R.isFunction($field772))) {
R.ffi.throwNonFunApp(L[130],$field772);
}
$ans770 = $field772.app(("An application of "));
}
break;
case 1: var anf_arg651 = $ans770;
$al771 = L[131];
var anf_arg653 = G(self313,"function-name",L[131]);
$step769 = 2;
$al771 = L[132];
$field774 = R.getColonFieldLoc(ED2,"text",L[132]);
if(R.isMethod($field774)) {
$ans770 = $field774.full_meth(ED2,anf_arg653);
} else {
if(!(R.isFunction($field774))) {
R.ffi.throwNonFunApp(L[132],$field774);
}
$ans770 = $field774.app(anf_arg653);
}
break;
case 2: var anf_arg655 = $ans770;
$step769 = 3;
$al771 = L[133];
$field775 = R.getColonFieldLoc(ED2,"code",L[133]);
if(R.isMethod($field775)) {
$ans770 = $field775.full_meth(ED2,anf_arg655);
} else {
if(!(R.isFunction($field775))) {
R.ffi.throwNonFunApp(L[133],$field775);
}
$ans770 = $field775.app(anf_arg655);
}
break;
case 3: var anf_arg755 = $ans770;
$step769 = 4;
$al771 = L[134];
$field777 = R.getColonFieldLoc(ED2,"text",L[134]);
if(R.isMethod($field777)) {
$ans770 = $field777.full_meth(ED2,(" failed because the "));
} else {
if(!(R.isFunction($field777))) {
R.ffi.throwNonFunApp(L[134],$field777);
}
$ans770 = $field777.app((" failed because the "));
}
break;
case 4: var anf_arg756 = $ans770;
$al771 = L[135];
var anf_arg751 = G(self313,"index",L[135]);
$step769 = 5;
$al771 = L[140];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al771,_plus1);
}
$ans770 = _plus1.app(anf_arg751,(1));
break;
case 5: var anf_arg664 = $ans770;
$step769 = 6;
$al771 = L[136];
$field779 = R.getColonFieldLoc(ED2,"ed-nth",L[136]);
if(R.isMethod($field779)) {
$ans770 = $field779.full_meth(ED2,anf_arg664);
} else {
if(!(R.isFunction($field779))) {
R.ffi.throwNonFunApp(L[136],$field779);
}
$ans770 = $field779.app(anf_arg664);
}
break;
case 6: var anf_arg666 = $ans770;
$step769 = 7;
$al771 = L[137];
$field780 = R.getColonFieldLoc(ED2,"text",L[137]);
if(R.isMethod($field780)) {
$ans770 = $field780.full_meth(ED2,(" argument evaluated to an unexpected value."));
} else {
if(!(R.isFunction($field780))) {
R.ffi.throwNonFunApp(L[137],$field780);
}
$ans770 = $field780.app((" argument evaluated to an unexpected value."));
}
break;
case 7: var anf_arg668 = $ans770;
$step769 = 8;
$al771 = L[129];
$field782 = R.getColonFieldLoc(anf_method_obj754,"make5",L[129]);
if(R.isMethod($field782)) {
$ans770 = $field782.full_meth(anf_method_obj754,anf_arg651,anf_arg755,anf_arg756,anf_arg666,anf_arg668);
} else {
if(!(R.isFunction($field782))) {
R.ffi.throwNonFunApp(L[129],$field782);
}
$ans770 = $field782.app(anf_arg651,anf_arg755,anf_arg756,anf_arg666,anf_arg668);
}
break;
case 8: var anf_arg765 = $ans770;
$al771 = L[138];
var anf_method_obj761 = G(self313,"reason",L[138]);
$step769 = 9;
$al771 = L[139];
$field783 = R.getColonFieldLoc(anf_method_obj761,"render-fancy-reason",L[139]);
if(R.isMethod($field783)) {
$ans770 = $field783.full_meth(anf_method_obj761,loc314,from$fail$arg315,maybe$stack$loc316,src$available317,maybe$ast318);
} else {
if(!(R.isFunction($field783))) {
R.ffi.throwNonFunApp(L[139],$field783);
}
$ans770 = $field783.app(loc314,from$fail$arg315,maybe$stack$loc316,src$available317,maybe$ast318);
}
break;
case 9: var anf_arg766 = $ans770;
$step769 = 10;
$al771 = L[128];
$field785 = R.getColonFieldLoc(anf_method_obj763,"make2",L[128]);
if(R.isMethod($field785)) {
$ans770 = $field785.full_meth(anf_method_obj763,anf_arg765,anf_arg766);
} else {
if(!(R.isFunction($field785))) {
R.ffi.throwNonFunApp(L[128],$field785);
}
$ans770 = $field785.app(anf_arg765,anf_arg766);
}
break;
case 10: ++R.GAS;
return $ans770;
default: throw "No case numbered " + $step769 + " in $temp_branch768";
}
}
} catch($e786) {
if(R.isCont($e786) && ($step769 !== 10)) {
$e786.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al771,$temp_branch768,$step769,[],[anf_method_obj763,anf_method_obj754,anf_arg651,anf_arg755,anf_arg756,anf_arg666,anf_arg765]);
}
if(R.isPyretException($e786)) {
$e786.pyretStack.push($al771);
}
throw $e786;
}
};
$ans320 = cases322.$app_fields($temp_branch768,[]);
break;
case 5: $step311 = 6;
$al321 = L[126];
$ans320 = R.throwNoCasesMatched(L[126],cases322);
break;
case 6: ++R.GAS;
return $ans320;
default: throw "No case numbered " + $step311 + " in $temp_full312";
}
}
} catch($e788) {
if(R.isCont($e788) && ($step311 !== 6)) {
$e788.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al321,$temp_full312,$step311,[self313,loc314,from$fail$arg315,maybe$stack$loc316,src$available317,maybe$ast318],[cases322]);
}
if(R.isPyretException($e788)) {
$e788.pyretStack.push($al321);
}
throw $e788;
}
};
var anf_variant_member2261 = R.makeMethod5($temp_full312,"render-fancy-reason");
var $temp_full790 = function($self791,$loc792,$from$fail$arg793) {
var $step789 = 0;
var $ans795 = D;
var $al796 = L[165];
try {
if(R.isActivationRecord($self791)) {
$step789 = $self791.step;
$al796 = $self791.from;
$ans795 = $self791.ans;
self791 = $self791.args[0];
loc792 = $self791.args[1];
from$fail$arg793 = $self791.args[2];
anf_method_obj850 = $self791.vars[0];
anf_method_obj817 = $self791.vars[1];
anf_arg819 = $self791.vars[2];
anf_arg821 = $self791.vars[3];
anf_arg709 = $self791.vars[4];
anf_arg713 = $self791.vars[5];
anf_method_obj842 = $self791.vars[6];
anf_arg847 = $self791.vars[7];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[165],3,$t);
}
var self791 = $self791;
var loc792 = $loc792;
var from$fail$arg793 = $from$fail$arg793;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step789) {
case 0: $al796 = L[146];
var anf_method_obj850 = G(ED2,"error",L[146]);
$al796 = L[147];
var anf_method_obj817 = G(ED2,"para",L[147]);
$al796 = L[148];
var anf_arg803 = G(self791,"function-name",L[148]);
$step789 = 1;
$al796 = L[149];
$field804 = R.getColonFieldLoc(ED2,"text",L[149]);
if(R.isMethod($field804)) {
$ans795 = $field804.full_meth(ED2,anf_arg803);
} else {
if(!(R.isFunction($field804))) {
R.ffi.throwNonFunApp(L[149],$field804);
}
$ans795 = $field804.app(anf_arg803);
}
break;
case 1: var anf_arg807 = $ans795;
$step789 = 2;
$al796 = L[150];
$field809 = R.getColonFieldLoc(ED2,"code",L[150]);
if(R.isMethod($field809)) {
$ans795 = $field809.full_meth(ED2,anf_arg807);
} else {
if(!(R.isFunction($field809))) {
R.ffi.throwNonFunApp(L[150],$field809);
}
$ans795 = $field809.app(anf_arg807);
}
break;
case 2: var anf_arg819 = $ans795;
$al796 = L[151];
var anf_arg693 = G(self791,"index",L[151]);
$step789 = 3;
$al796 = L[164];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al796,_plus1);
}
$ans795 = _plus1.app(anf_arg693,(1));
break;
case 3: var anf_arg695 = $ans795;
$step789 = 4;
$al796 = L[163];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al796,tostring1);
}
$ans795 = tostring1.app(anf_arg695);
break;
case 4: var anf_arg697 = $ans795;
$step789 = 5;
$al796 = L[162];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al796,_plus1);
}
$ans795 = _plus1.app((" : The argument at position "),anf_arg697);
break;
case 5: var anf_arg814 = $ans795;
$step789 = 6;
$al796 = L[152];
$field815 = R.getColonFieldLoc(ED2,"text",L[152]);
if(R.isMethod($field815)) {
$ans795 = $field815.full_meth(ED2,anf_arg814);
} else {
if(!(R.isFunction($field815))) {
R.ffi.throwNonFunApp(L[152],$field815);
}
$ans795 = $field815.app(anf_arg814);
}
break;
case 6: var anf_arg821 = $ans795;
$step789 = 7;
$al796 = L[153];
$field816 = R.getColonFieldLoc(ED2,"text",L[153]);
if(R.isMethod($field816)) {
$ans795 = $field816.full_meth(ED2,(" was invalid because: "));
} else {
if(!(R.isFunction($field816))) {
R.ffi.throwNonFunApp(L[153],$field816);
}
$ans795 = $field816.app((" was invalid because: "));
}
break;
case 7: var anf_arg828 = $ans795;
$step789 = 8;
$al796 = L[147];
$field829 = R.getColonFieldLoc(anf_method_obj817,"make3",L[147]);
if(R.isMethod($field829)) {
$ans795 = $field829.full_meth(anf_method_obj817,anf_arg819,anf_arg821,anf_arg828);
} else {
if(!(R.isFunction($field829))) {
R.ffi.throwNonFunApp(L[147],$field829);
}
$ans795 = $field829.app(anf_arg819,anf_arg821,anf_arg828);
}
break;
case 8: var anf_arg709 = $ans795;
$al796 = L[154];
var anf_method_obj830 = G(self791,"reason",L[154]);
$step789 = 9;
$al796 = L[155];
$field831 = R.getColonFieldLoc(anf_method_obj830,"render-reason",L[155]);
if(R.isMethod($field831)) {
$ans795 = $field831.full_meth(anf_method_obj830,loc792,from$fail$arg793);
} else {
if(!(R.isFunction($field831))) {
R.ffi.throwNonFunApp(L[155],$field831);
}
$ans795 = $field831.app(loc792,from$fail$arg793);
}
break;
case 9: var anf_arg713 = $ans795;
$al796 = L[156];
var anf_method_obj842 = G(ED2,"para",L[156]);
$step789 = 10;
$al796 = L[157];
$field832 = R.getColonFieldLoc(ED2,"text",L[157]);
if(R.isMethod($field832)) {
$ans795 = $field832.full_meth(ED2,("The other arguments were:"));
} else {
if(!(R.isFunction($field832))) {
R.ffi.throwNonFunApp(L[157],$field832);
}
$ans795 = $field832.app(("The other arguments were:"));
}
break;
case 10: var anf_arg847 = $ans795;
$al796 = L[158];
var anf_arg731 = G(ED2,"embed",L[158]);
$al796 = L[159];
var anf_arg839 = G(self791,"args",L[159]);
$step789 = 11;
$al796 = L[160];
$field840 = R.getColonFieldLoc(L19,"map",L[160]);
if(R.isMethod($field840)) {
$ans795 = $field840.full_meth(L19,anf_arg731,anf_arg839);
} else {
if(!(R.isFunction($field840))) {
R.ffi.throwNonFunApp(L[160],$field840);
}
$ans795 = $field840.app(anf_arg731,anf_arg839);
}
break;
case 11: var anf_arg728 = $ans795;
$step789 = 12;
$al796 = L[161];
$field841 = R.getColonFieldLoc(ED2,"h-sequence",L[161]);
if(R.isMethod($field841)) {
$ans795 = $field841.full_meth(ED2,anf_arg728,(" "));
} else {
if(!(R.isFunction($field841))) {
R.ffi.throwNonFunApp(L[161],$field841);
}
$ans795 = $field841.app(anf_arg728,(" "));
}
break;
case 12: var anf_arg848 = $ans795;
$step789 = 13;
$al796 = L[156];
$field849 = R.getColonFieldLoc(anf_method_obj842,"make2",L[156]);
if(R.isMethod($field849)) {
$ans795 = $field849.full_meth(anf_method_obj842,anf_arg847,anf_arg848);
} else {
if(!(R.isFunction($field849))) {
R.ffi.throwNonFunApp(L[156],$field849);
}
$ans795 = $field849.app(anf_arg847,anf_arg848);
}
break;
case 13: var anf_arg730 = $ans795;
$step789 = 14;
$al796 = L[146];
$field851 = R.getColonFieldLoc(anf_method_obj850,"make3",L[146]);
if(R.isMethod($field851)) {
$ans795 = $field851.full_meth(anf_method_obj850,anf_arg709,anf_arg713,anf_arg730);
} else {
if(!(R.isFunction($field851))) {
R.ffi.throwNonFunApp(L[146],$field851);
}
$ans795 = $field851.app(anf_arg709,anf_arg713,anf_arg730);
}
break;
case 14: ++R.GAS;
return $ans795;
default: throw "No case numbered " + $step789 + " in $temp_full790";
}
}
} catch($e852) {
if(R.isCont($e852) && ($step789 !== 14)) {
$e852.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al796,$temp_full790,$step789,[self791,loc792,from$fail$arg793],[anf_method_obj850,anf_method_obj817,anf_arg819,anf_arg821,anf_arg709,anf_arg713,anf_method_obj842,anf_arg847]);
}
if(R.isPyretException($e852)) {
$e852.pyretStack.push($al796);
}
throw $e852;
}
};
var anf_variant_member2262 = R.makeMethod2($temp_full790,"render-reason");
var $temp_full854 = function($self224,$loc855,$from$fail$arg856,$maybe$stack$loc857,$src$available858,$maybe$ast859) {
var $step853 = 0;
var $ans860 = D;
var $al861 = L[168];
try {
if(R.isActivationRecord($self224)) {
$step853 = $self224.step;
$al861 = $self224.from;
$ans860 = $self224.ans;
self224 = $self224.args[0];
loc855 = $self224.args[1];
from$fail$arg856 = $self224.args[2];
maybe$stack$loc857 = $self224.args[3];
src$available858 = $self224.args[4];
maybe$ast859 = $self224.args[5];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[168],6,$t);
}
var self224 = $self224;
var loc855 = $loc855;
var from$fail$arg856 = $from$fail$arg856;
var maybe$stack$loc857 = $maybe$stack$loc857;
var src$available858 = $src$available858;
var maybe$ast859 = $maybe$ast859;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step853) {
case 0: $step853 = 1;
$al861 = L[167];
if(!(R.isFunction(print1))) {
R.ffi.throwNonFunApp($al861,print1);
}
$ans860 = print1.app(("ref-init"));
break;
case 1: $step853 = 2;
$al861 = L[166];
$field862 = R.getColonFieldLoc(self224,"render-reason",L[166]);
if(R.isMethod($field862)) {
$ans860 = $field862.full_meth(self224,loc855,from$fail$arg856);
} else {
if(!(R.isFunction($field862))) {
R.ffi.throwNonFunApp(L[166],$field862);
}
$ans860 = $field862.app(loc855,from$fail$arg856);
}
break;
case 2: ++R.GAS;
return $ans860;
default: throw "No case numbered " + $step853 + " in $temp_full854";
}
}
} catch($e863) {
if(R.isCont($e863) && ($step853 !== 2)) {
$e863.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al861,$temp_full854,$step853,[self224,loc855,from$fail$arg856,maybe$stack$loc857,src$available858,maybe$ast859],[]);
}
if(R.isPyretException($e863)) {
$e863.pyretStack.push($al861);
}
throw $e863;
}
};
var anf_variant_member2275 = R.makeMethod5($temp_full854,"render-fancy-reason");
var $temp_full865 = function($self257,$loc866,$from$fail$arg867) {
var $step864 = 0;
var $ans868 = D;
var $al869 = L[183];
try {
if(R.isActivationRecord($self257)) {
$step864 = $self257.step;
$al869 = $self257.from;
$ans868 = $self257.ans;
self257 = $self257.args[0];
loc866 = $self257.args[1];
from$fail$arg867 = $self257.args[2];
anf_arg763 = $self257.vars[0];
anf_method_obj910 = $self257.vars[1];
anf_method_obj900 = $self257.vars[2];
anf_arg762 = $self257.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[183],3,$t);
}
var self257 = $self257;
var loc866 = $loc866;
var from$fail$arg867 = $from$fail$arg867;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step864) {
case 0: var $temp_lam872 = function($user$loc873) {
var $step871 = 0;
var $ans874 = D;
var $al875 = L[176];
try {
if(R.isActivationRecord($user$loc873)) {
$step871 = $user$loc873.step;
$al875 = $user$loc873.from;
$ans874 = $user$loc873.ans;
user$loc873 = $user$loc873.args[0];
anf_method_obj895 = $user$loc873.vars[0];
anf_method_obj882 = $user$loc873.vars[1];
anf_arg883 = $user$loc873.vars[2];
anf_arg891 = $user$loc873.vars[3];
anf_arg748 = $user$loc873.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[176],1,$t);
}
var user$loc873 = $user$loc873;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step871) {
case 0: $al875 = L[169];
var anf_method_obj895 = G(ED2,"error",L[169]);
$al875 = L[170];
var anf_method_obj882 = G(ED2,"para",L[170]);
$step871 = 1;
$al875 = L[171];
$field876 = R.getColonFieldLoc(ED2,"text",L[171]);
if(R.isMethod($field876)) {
$ans874 = $field876.full_meth(ED2,("Failed while initializing a graph at"));
} else {
if(!(R.isFunction($field876))) {
R.ffi.throwNonFunApp(L[171],$field876);
}
$ans874 = $field876.app(("Failed while initializing a graph at"));
}
break;
case 1: var anf_arg883 = $ans874;
var anf_fun878 = draw$and$highlight48.$var;
$step871 = 2;
$al875 = L[175];
if(!(R.isFunction(anf_fun878))) {
R.ffi.throwNonFunApp($al875,anf_fun878);
}
$ans874 = anf_fun878.app(user$loc873);
break;
case 2: var anf_arg891 = $ans874;
$step871 = 3;
$al875 = L[172];
$field881 = R.getColonFieldLoc(ED2,"text",L[172]);
if(R.isMethod($field881)) {
$ans874 = $field881.full_meth(ED2,("because:"));
} else {
if(!(R.isFunction($field881))) {
R.ffi.throwNonFunApp(L[172],$field881);
}
$ans874 = $field881.app(("because:"));
}
break;
case 3: var anf_arg746 = $ans874;
$step871 = 4;
$al875 = L[170];
$field892 = R.getColonFieldLoc(anf_method_obj882,"make3",L[170]);
if(R.isMethod($field892)) {
$ans874 = $field892.full_meth(anf_method_obj882,anf_arg883,anf_arg891,anf_arg746);
} else {
if(!(R.isFunction($field892))) {
R.ffi.throwNonFunApp(L[170],$field892);
}
$ans874 = $field892.app(anf_arg883,anf_arg891,anf_arg746);
}
break;
case 4: var anf_arg748 = $ans874;
$al875 = L[173];
var anf_method_obj893 = G(self257,"reason",L[173]);
$step871 = 5;
$al875 = L[174];
$field894 = R.getColonFieldLoc(anf_method_obj893,"render-reason",L[174]);
if(R.isMethod($field894)) {
$ans874 = $field894.full_meth(anf_method_obj893,loc866,(false));
} else {
if(!(R.isFunction($field894))) {
R.ffi.throwNonFunApp(L[174],$field894);
}
$ans874 = $field894.app(loc866,(false));
}
break;
case 5: var anf_arg896 = $ans874;
$step871 = 6;
$al875 = L[169];
$field897 = R.getColonFieldLoc(anf_method_obj895,"make2",L[169]);
if(R.isMethod($field897)) {
$ans874 = $field897.full_meth(anf_method_obj895,anf_arg748,anf_arg896);
} else {
if(!(R.isFunction($field897))) {
R.ffi.throwNonFunApp(L[169],$field897);
}
$ans874 = $field897.app(anf_arg748,anf_arg896);
}
break;
case 6: ++R.GAS;
return $ans874;
default: throw "No case numbered " + $step871 + " in $temp_lam872";
}
}
} catch($e898) {
if(R.isCont($e898) && ($step871 !== 6)) {
$e898.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al875,$temp_lam872,$step871,[user$loc873],[anf_method_obj895,anf_method_obj882,anf_arg883,anf_arg891,anf_arg748]);
}
if(R.isPyretException($e898)) {
$e898.pyretStack.push($al875);
}
throw $e898;
}
};
var anf_arg763 = R.makeFunction($temp_lam872,"");
$al869 = L[177];
var anf_method_obj910 = G(ED2,"error",L[177]);
$al869 = L[178];
var anf_method_obj900 = G(ED2,"para",L[178]);
$step864 = 1;
$al869 = L[179];
$field899 = R.getColonFieldLoc(ED2,"text",L[179]);
if(R.isMethod($field899)) {
$ans868 = $field899.full_meth(ED2,("Failed while initializing a graph, because:"));
} else {
if(!(R.isFunction($field899))) {
R.ffi.throwNonFunApp(L[179],$field899);
}
$ans868 = $field899.app(("Failed while initializing a graph, because:"));
}
break;
case 1: var anf_arg906 = $ans868;
$step864 = 2;
$al869 = L[178];
$field907 = R.getColonFieldLoc(anf_method_obj900,"make1",L[178]);
if(R.isMethod($field907)) {
$ans868 = $field907.full_meth(anf_method_obj900,anf_arg906);
} else {
if(!(R.isFunction($field907))) {
R.ffi.throwNonFunApp(L[178],$field907);
}
$ans868 = $field907.app(anf_arg906);
}
break;
case 2: var anf_arg762 = $ans868;
$al869 = L[180];
var anf_method_obj908 = G(self257,"reason",L[180]);
$step864 = 3;
$al869 = L[181];
$field909 = R.getColonFieldLoc(anf_method_obj908,"render-reason",L[181]);
if(R.isMethod($field909)) {
$ans868 = $field909.full_meth(anf_method_obj908,loc866,(false));
} else {
if(!(R.isFunction($field909))) {
R.ffi.throwNonFunApp(L[181],$field909);
}
$ans868 = $field909.app(loc866,(false));
}
break;
case 3: var anf_arg912 = $ans868;
$step864 = 4;
$al869 = L[177];
$field913 = R.getColonFieldLoc(anf_method_obj910,"make2",L[177]);
if(R.isMethod($field913)) {
$ans868 = $field913.full_meth(anf_method_obj910,anf_arg762,anf_arg912);
} else {
if(!(R.isFunction($field913))) {
R.ffi.throwNonFunApp(L[177],$field913);
}
$ans868 = $field913.app(anf_arg762,anf_arg912);
}
break;
case 4: var anf_arg920 = $ans868;
$step864 = 5;
$al869 = L[182];
$field921 = R.getColonFieldLoc(ED2,"maybe-stack-loc",L[182]);
if(R.isMethod($field921)) {
$ans868 = $field921.full_meth(ED2,(0),(true),anf_arg763,anf_arg920);
} else {
if(!(R.isFunction($field921))) {
R.ffi.throwNonFunApp(L[182],$field921);
}
$ans868 = $field921.app((0),(true),anf_arg763,anf_arg920);
}
break;
case 5: ++R.GAS;
return $ans868;
default: throw "No case numbered " + $step864 + " in $temp_full865";
}
}
} catch($e922) {
if(R.isCont($e922) && ($step864 !== 5)) {
$e922.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al869,$temp_full865,$step864,[self257,loc866,from$fail$arg867],[anf_arg763,anf_method_obj910,anf_method_obj900,anf_arg762]);
}
if(R.isPyretException($e922)) {
$e922.pyretStack.push($al869);
}
throw $e922;
}
};
var anf_variant_member2276 = R.makeMethod2($temp_full865,"render-reason");
var $temp_full924 = function($self925,$loc926,$from$fail$arg927,$maybe$stack$loc928,$src$available929,$maybe$ast930) {
var $step923 = 0;
var $ans931 = D;
var $al932 = L[229];
try {
if(R.isActivationRecord($self925)) {
$step923 = $self925.step;
$al932 = $self925.from;
$ans931 = $self925.ans;
self925 = $self925.args[0];
loc926 = $self925.args[1];
from$fail$arg927 = $self925.args[2];
maybe$stack$loc928 = $self925.args[3];
src$available929 = $self925.args[4];
maybe$ast930 = $self925.args[5];
anf_method_obj1064 = $self925.vars[0];
anf_method_obj942 = $self925.vars[1];
anf_arg780 = $self925.vars[2];
anf_arg795 = $self925.vars[3];
anf_arg947 = $self925.vars[4];
anf_method_obj972 = $self925.vars[5];
anf_method_obj955 = $self925.vars[6];
anf_arg957 = $self925.vars[7];
anf_arg811 = $self925.vars[8];
anf_arg810 = $self925.vars[9];
anf_method_obj981 = $self925.vars[10];
anf_arg987 = $self925.vars[11];
anf_arg988 = $self925.vars[12];
anf_arg825 = $self925.vars[13];
anf_arg826 = $self925.vars[14];
anf_method_obj994 = $self925.vars[15];
anf_arg832 = $self925.vars[16];
anf_arg1066 = $self925.vars[17];
cases1000 = $self925.vars[18];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[229],6,$t);
}
var self925 = $self925;
var loc926 = $loc926;
var from$fail$arg927 = $from$fail$arg927;
var maybe$stack$loc928 = $maybe$stack$loc928;
var src$available929 = $src$available929;
var maybe$ast930 = $maybe$ast930;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step923) {
case 0: $al932 = L[184];
var anf_method_obj1064 = G(ED2,"error",L[184]);
$step923 = 1;
$al932 = L[185];
$field933 = R.getColonFieldLoc(loc926,"is-builtin",L[185]);
if(R.isMethod($field933)) {
$ans931 = $field933.full_meth(loc926);
} else {
if(!(R.isFunction($field933))) {
R.ffi.throwNonFunApp(L[185],$field933);
}
$ans931 = $field933.app();
}
break;
case 1: var anf_arg776 = $ans931;
$al932 = L[185];
var anf_if782 = R.checkWrapBoolean(anf_arg776);
$step923 = R.isPyretTrue(anf_if782)?2:8;
break;
case 2: $al932 = L[186];
var anf_method_obj942 = G(ED2,"para",L[186]);
$step923 = 3;
$al932 = L[187];
$field934 = R.getColonFieldLoc(ED2,"text",L[187]);
if(R.isMethod($field934)) {
$ans931 = $field934.full_meth(ED2,("An annotation, "));
} else {
if(!(R.isFunction($field934))) {
R.ffi.throwNonFunApp(L[187],$field934);
}
$ans931 = $field934.app(("An annotation, "));
}
break;
case 3: var anf_arg780 = $ans931;
$al932 = L[188];
var anf_arg935 = G(self925,"name",L[188]);
$step923 = 4;
$al932 = L[189];
$field936 = R.getColonFieldLoc(ED2,"text",L[189]);
if(R.isMethod($field936)) {
$ans931 = $field936.full_meth(ED2,anf_arg935);
} else {
if(!(R.isFunction($field936))) {
R.ffi.throwNonFunApp(L[189],$field936);
}
$ans931 = $field936.app(anf_arg935);
}
break;
case 4: var anf_arg937 = $ans931;
$step923 = 5;
$al932 = L[190];
$field938 = R.getColonFieldLoc(ED2,"code",L[190]);
if(R.isMethod($field938)) {
$ans931 = $field938.full_meth(ED2,anf_arg937);
} else {
if(!(R.isFunction($field938))) {
R.ffi.throwNonFunApp(L[190],$field938);
}
$ans931 = $field938.app(anf_arg937);
}
break;
case 5: var anf_arg795 = $ans931;
$step923 = 6;
$al932 = L[191];
$field940 = R.getColonFieldLoc(ED2,"text",L[191]);
if(R.isMethod($field940)) {
$ans931 = $field940.full_meth(ED2,(", in "));
} else {
if(!(R.isFunction($field940))) {
R.ffi.throwNonFunApp(L[191],$field940);
}
$ans931 = $field940.app((", in "));
}
break;
case 6: var anf_arg947 = $ans931;
$step923 = 7;
$al932 = L[192];
$field941 = R.getColonFieldLoc(ED2,"loc",L[192]);
if(R.isMethod($field941)) {
$ans931 = $field941.full_meth(ED2,loc926);
} else {
if(!(R.isFunction($field941))) {
R.ffi.throwNonFunApp(L[192],$field941);
}
$ans931 = $field941.app(loc926);
}
break;
case 7: var anf_arg792 = $ans931;
$step923 = 23;
$al932 = L[186];
$field948 = R.getColonFieldLoc(anf_method_obj942,"make4",L[186]);
if(R.isMethod($field948)) {
$ans931 = $field948.full_meth(anf_method_obj942,anf_arg780,anf_arg795,anf_arg947,anf_arg792);
} else {
if(!(R.isFunction($field948))) {
R.ffi.throwNonFunApp(L[186],$field948);
}
$ans931 = $field948.app(anf_arg780,anf_arg795,anf_arg947,anf_arg792);
}
break;
case 8: $step923 = 9;
$al932 = L[193];
if(!(R.isFunction(src$available929))) {
R.ffi.throwNonFunApp($al932,src$available929);
}
$ans931 = src$available929.app(loc926);
break;
case 9: var anf_arg949 = $ans931;
$al932 = L[193];
var anf_if991 = R.checkWrapBoolean(anf_arg949);
$step923 = R.isPyretTrue(anf_if991)?10:17;
break;
case 10: $al932 = L[194];
var anf_method_obj972 = G(ED2,"sequence",L[194]);
$al932 = L[195];
var anf_method_obj955 = G(ED2,"para",L[195]);
$step923 = 11;
$al932 = L[196];
$field950 = R.getColonFieldLoc(ED2,"text",L[196]);
if(R.isMethod($field950)) {
$ans931 = $field950.full_meth(ED2,("The "));
} else {
if(!(R.isFunction($field950))) {
R.ffi.throwNonFunApp(L[196],$field950);
}
$ans931 = $field950.app(("The "));
}
break;
case 11: var anf_arg957 = $ans931;
$step923 = 12;
$al932 = L[197];
$field951 = R.getColonFieldLoc(ED2,"text",L[197]);
if(R.isMethod($field951)) {
$ans931 = $field951.full_meth(ED2,("annotation"));
} else {
if(!(R.isFunction($field951))) {
R.ffi.throwNonFunApp(L[197],$field951);
}
$ans931 = $field951.app(("annotation"));
}
break;
case 12: var anf_arg811 = $ans931;
$al932 = L[198];
var anf_method_obj952 = G(ED2,"locs",L[198]);
$step923 = 13;
$al932 = L[198];
$field953 = R.getColonFieldLoc(anf_method_obj952,"make1",L[198]);
if(R.isMethod($field953)) {
$ans931 = $field953.full_meth(anf_method_obj952,loc926);
} else {
if(!(R.isFunction($field953))) {
R.ffi.throwNonFunApp(L[198],$field953);
}
$ans931 = $field953.app(loc926);
}
break;
case 13: var anf_arg808 = $ans931;
$step923 = 14;
$al932 = L[199];
$field954 = R.getColonFieldLoc(ED2,"highlight",L[199]);
if(R.isMethod($field954)) {
$ans931 = $field954.full_meth(ED2,anf_arg811,anf_arg808,(0));
} else {
if(!(R.isFunction($field954))) {
R.ffi.throwNonFunApp(L[199],$field954);
}
$ans931 = $field954.app(anf_arg811,anf_arg808,(0));
}
break;
case 14: var anf_arg967 = $ans931;
$step923 = 15;
$al932 = L[195];
$field968 = R.getColonFieldLoc(anf_method_obj955,"make2",L[195]);
if(R.isMethod($field968)) {
$ans931 = $field968.full_meth(anf_method_obj955,anf_arg957,anf_arg967);
} else {
if(!(R.isFunction($field968))) {
R.ffi.throwNonFunApp(L[195],$field968);
}
$ans931 = $field968.app(anf_arg957,anf_arg967);
}
break;
case 15: var anf_arg810 = $ans931;
$step923 = 16;
$al932 = L[200];
$field971 = R.getColonFieldLoc(ED2,"cmcode",L[200]);
if(R.isMethod($field971)) {
$ans931 = $field971.full_meth(ED2,loc926);
} else {
if(!(R.isFunction($field971))) {
R.ffi.throwNonFunApp(L[200],$field971);
}
$ans931 = $field971.app(loc926);
}
break;
case 16: var anf_arg812 = $ans931;
$step923 = 23;
$al932 = L[194];
$field974 = R.getColonFieldLoc(anf_method_obj972,"make2",L[194]);
if(R.isMethod($field974)) {
$ans931 = $field974.full_meth(anf_method_obj972,anf_arg810,anf_arg812);
} else {
if(!(R.isFunction($field974))) {
R.ffi.throwNonFunApp(L[194],$field974);
}
$ans931 = $field974.app(anf_arg810,anf_arg812);
}
break;
case 17: $al932 = L[201];
var anf_method_obj981 = G(ED2,"para",L[201]);
$step923 = 18;
$al932 = L[202];
$field975 = R.getColonFieldLoc(ED2,"text",L[202]);
if(R.isMethod($field975)) {
$ans931 = $field975.full_meth(ED2,("The annotation, "));
} else {
if(!(R.isFunction($field975))) {
R.ffi.throwNonFunApp(L[202],$field975);
}
$ans931 = $field975.app(("The annotation, "));
}
break;
case 18: var anf_arg987 = $ans931;
$al932 = L[203];
var anf_arg829 = G(self925,"name",L[203]);
$step923 = 19;
$al932 = L[204];
$field976 = R.getColonFieldLoc(ED2,"text",L[204]);
if(R.isMethod($field976)) {
$ans931 = $field976.full_meth(ED2,anf_arg829);
} else {
if(!(R.isFunction($field976))) {
R.ffi.throwNonFunApp(L[204],$field976);
}
$ans931 = $field976.app(anf_arg829);
}
break;
case 19: var anf_arg824 = $ans931;
$step923 = 20;
$al932 = L[205];
$field977 = R.getColonFieldLoc(ED2,"code",L[205]);
if(R.isMethod($field977)) {
$ans931 = $field977.full_meth(ED2,anf_arg824);
} else {
if(!(R.isFunction($field977))) {
R.ffi.throwNonFunApp(L[205],$field977);
}
$ans931 = $field977.app(anf_arg824);
}
break;
case 20: var anf_arg988 = $ans931;
$step923 = 21;
$al932 = L[206];
$field978 = R.getColonFieldLoc(ED2,"text",L[206]);
if(R.isMethod($field978)) {
$ans931 = $field978.full_meth(ED2,(", at "));
} else {
if(!(R.isFunction($field978))) {
R.ffi.throwNonFunApp(L[206],$field978);
}
$ans931 = $field978.app((", at "));
}
break;
case 21: var anf_arg825 = $ans931;
$step923 = 22;
$al932 = L[207];
$field980 = R.getColonFieldLoc(ED2,"loc",L[207]);
if(R.isMethod($field980)) {
$ans931 = $field980.full_meth(ED2,loc926);
} else {
if(!(R.isFunction($field980))) {
R.ffi.throwNonFunApp(L[207],$field980);
}
$ans931 = $field980.app(loc926);
}
break;
case 22: var anf_arg989 = $ans931;
$step923 = 23;
$al932 = L[201];
$field990 = R.getColonFieldLoc(anf_method_obj981,"make4",L[201]);
if(R.isMethod($field990)) {
$ans931 = $field990.full_meth(anf_method_obj981,anf_arg987,anf_arg988,anf_arg825,anf_arg989);
} else {
if(!(R.isFunction($field990))) {
R.ffi.throwNonFunApp(L[201],$field990);
}
$ans931 = $field990.app(anf_arg987,anf_arg988,anf_arg825,anf_arg989);
}
break;
case 23: var anf_arg826 = $ans931;
$al932 = L[208];
var anf_method_obj994 = G(ED2,"para",L[208]);
$step923 = 24;
$al932 = L[209];
$field993 = R.getColonFieldLoc(ED2,"text",L[209]);
if(R.isMethod($field993)) {
$ans931 = $field993.full_meth(ED2,("was not satisfied by the value"));
} else {
if(!(R.isFunction($field993))) {
R.ffi.throwNonFunApp(L[209],$field993);
}
$ans931 = $field993.app(("was not satisfied by the value"));
}
break;
case 24: var anf_arg830 = $ans931;
$step923 = 25;
$al932 = L[208];
$field995 = R.getColonFieldLoc(anf_method_obj994,"make1",L[208]);
if(R.isMethod($field995)) {
$ans931 = $field995.full_meth(anf_method_obj994,anf_arg830);
} else {
if(!(R.isFunction($field995))) {
R.ffi.throwNonFunApp(L[208],$field995);
}
$ans931 = $field995.app(anf_arg830);
}
break;
case 25: var anf_arg832 = $ans931;
$al932 = L[210];
var anf_arg997 = G(self925,"val",L[210]);
$step923 = 26;
$al932 = L[211];
$field999 = R.getColonFieldLoc(ED2,"embed",L[211]);
if(R.isMethod($field999)) {
$ans931 = $field999.full_meth(ED2,anf_arg997);
} else {
if(!(R.isFunction($field999))) {
R.ffi.throwNonFunApp(L[211],$field999);
}
$ans931 = $field999.app(anf_arg997);
}
break;
case 26: var anf_arg1066 = $ans931;
$al932 = L[212];
var anf_if1069 = R.checkWrapBoolean(from$fail$arg927);
$step923 = R.isPyretTrue(anf_if1069)?27:33;
break;
case 27: $step923 = 28;
$al932 = L[227];
if(!(R.isFunction(maybe$stack$loc928))) {
R.ffi.throwNonFunApp($al932,maybe$stack$loc928);
}
$ans931 = maybe$stack$loc928.app((1),(true));
break;
case 28: var cases1000 = $ans931;
$step923 = 29;
$al932 = L[226];
R._checkAnn(L[226],R.getDotAnn(L[226],"O",O24,"Option"),cases1000);
break;
case 29: var $cases_dispatch1045 = {"some":30,
"none":31};
$al932 = L[222];
$step923 = $cases_dispatch1045[cases1000.$name] || 32;
break;
case 30: if(cases1000.$arity !== 1) {
if(cases1000.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[221],1,cases1000.$arity,L[222]);
} else {
R.ffi.throwCasesSingletonErrorC(L[221],true,L[222]);
}
}
$step923 = 34;
$al932 = L[223];
var $temp_branch1027 = function($sender1001) {
var $step1028 = 0;
var $ans1029 = D;
var $al1030 = L[213];
try {
if(R.isActivationRecord($sender1001)) {
$step1028 = $sender1001.step;
$al1030 = $sender1001.from;
$ans1029 = $sender1001.ans;
sender1001 = $sender1001.args[0];
anf_method_obj1014 = $sender1001.vars[0];
anf_method_obj1007 = $sender1001.vars[1];
anf_arg1016 = $sender1001.vars[2];
anf_method_obj1022 = $sender1001.vars[3];
anf_arg1023 = $sender1001.vars[4];
} else {
var sender1001 = $sender1001;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1028) {
case 0: $step1028 = 1;
$al1030 = L[213];
if(!(R.isFunction(src$available929))) {
R.ffi.throwNonFunApp($al1030,src$available929);
}
$ans1029 = src$available929.app(sender1001);
break;
case 1: var anf_arg1003 = $ans1029;
$al1030 = L[213];
var anf_if1026 = R.checkWrapBoolean(anf_arg1003);
$step1028 = R.isPyretTrue(anf_if1026)?2:6;
break;
case 2: $al1030 = L[214];
var anf_method_obj1014 = G(ED2,"sequence",L[214]);
$al1030 = L[215];
var anf_method_obj1007 = G(ED2,"para",L[215]);
$step1028 = 3;
$al1030 = L[216];
$field1032 = R.getColonFieldLoc(ED2,"text",L[216]);
if(R.isMethod($field1032)) {
$ans1029 = $field1032.full_meth(ED2,("which was sent from around"));
} else {
if(!(R.isFunction($field1032))) {
R.ffi.throwNonFunApp(L[216],$field1032);
}
$ans1029 = $field1032.app(("which was sent from around"));
}
break;
case 3: var anf_arg1008 = $ans1029;
$step1028 = 4;
$al1030 = L[215];
$field1034 = R.getColonFieldLoc(anf_method_obj1007,"make1",L[215]);
if(R.isMethod($field1034)) {
$ans1029 = $field1034.full_meth(anf_method_obj1007,anf_arg1008);
} else {
if(!(R.isFunction($field1034))) {
R.ffi.throwNonFunApp(L[215],$field1034);
}
$ans1029 = $field1034.app(anf_arg1008);
}
break;
case 4: var anf_arg1016 = $ans1029;
$step1028 = 5;
$al1030 = L[217];
$field1035 = R.getColonFieldLoc(ED2,"cmcode",L[217]);
if(R.isMethod($field1035)) {
$ans1029 = $field1035.full_meth(ED2,sender1001);
} else {
if(!(R.isFunction($field1035))) {
R.ffi.throwNonFunApp(L[217],$field1035);
}
$ans1029 = $field1035.app(sender1001);
}
break;
case 5: var anf_arg258 = $ans1029;
$step1028 = 9;
$al1030 = L[214];
$field1036 = R.getColonFieldLoc(anf_method_obj1014,"make2",L[214]);
if(R.isMethod($field1036)) {
$ans1029 = $field1036.full_meth(anf_method_obj1014,anf_arg1016,anf_arg258);
} else {
if(!(R.isFunction($field1036))) {
R.ffi.throwNonFunApp(L[214],$field1036);
}
$ans1029 = $field1036.app(anf_arg1016,anf_arg258);
}
break;
case 6: $al1030 = L[218];
var anf_method_obj1022 = G(ED2,"para",L[218]);
$step1028 = 7;
$al1030 = L[219];
$field1037 = R.getColonFieldLoc(ED2,"text",L[219]);
if(R.isMethod($field1037)) {
$ans1029 = $field1037.full_meth(ED2,("which was sent from around "));
} else {
if(!(R.isFunction($field1037))) {
R.ffi.throwNonFunApp(L[219],$field1037);
}
$ans1029 = $field1037.app(("which was sent from around "));
}
break;
case 7: var anf_arg1023 = $ans1029;
$step1028 = 8;
$al1030 = L[220];
$field1038 = R.getColonFieldLoc(ED2,"loc",L[220]);
if(R.isMethod($field1038)) {
$ans1029 = $field1038.full_meth(ED2,sender1001);
} else {
if(!(R.isFunction($field1038))) {
R.ffi.throwNonFunApp(L[220],$field1038);
}
$ans1029 = $field1038.app(sender1001);
}
break;
case 8: var anf_arg262 = $ans1029;
$step1028 = 9;
$al1030 = L[218];
$field1040 = R.getColonFieldLoc(anf_method_obj1022,"make2",L[218]);
if(R.isMethod($field1040)) {
$ans1029 = $field1040.full_meth(anf_method_obj1022,anf_arg1023,anf_arg262);
} else {
if(!(R.isFunction($field1040))) {
R.ffi.throwNonFunApp(L[218],$field1040);
}
$ans1029 = $field1040.app(anf_arg1023,anf_arg262);
}
break;
case 9: ++R.GAS;
return $ans1029;
default: throw "No case numbered " + $step1028 + " in $temp_branch1027";
}
}
} catch($e1041) {
if(R.isCont($e1041) && ($step1028 !== 9)) {
$e1041.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1030,$temp_branch1027,$step1028,[sender1001],[anf_method_obj1014,anf_method_obj1007,anf_arg1016,anf_method_obj1022,anf_arg1023]);
}
if(R.isPyretException($e1041)) {
$e1041.pyretStack.push($al1030);
}
throw $e1041;
}
};
$ans931 = cases1000.$app_fields($temp_branch1027,[false]);
break;
case 31: if(cases1000.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[225],false,L[222]);
}
$al932 = L[224];
var anf_method_obj1042 = G(ED2,"sequence",L[224]);
$step923 = 34;
$al932 = L[224];
$field1043 = R.getColonFieldLoc(anf_method_obj1042,"make0",L[224]);
if(R.isMethod($field1043)) {
$ans931 = $field1043.full_meth(anf_method_obj1042);
} else {
if(!(R.isFunction($field1043))) {
R.ffi.throwNonFunApp(L[224],$field1043);
}
$ans931 = $field1043.app();
}
break;
case 32: $step923 = 34;
$al932 = L[222];
$ans931 = R.throwNoCasesMatched(L[222],cases1000);
break;
case 33: $al932 = L[228];
var anf_method_obj1046 = G(ED2,"sequence",L[228]);
$step923 = 34;
$al932 = L[228];
$field1063 = R.getColonFieldLoc(anf_method_obj1046,"make0",L[228]);
if(R.isMethod($field1063)) {
$ans931 = $field1063.full_meth(anf_method_obj1046);
} else {
if(!(R.isFunction($field1063))) {
R.ffi.throwNonFunApp(L[228],$field1063);
}
$ans931 = $field1063.app();
}
break;
case 34: var anf_arg1067 = $ans931;
$step923 = 35;
$al932 = L[184];
$field1068 = R.getColonFieldLoc(anf_method_obj1064,"make4",L[184]);
if(R.isMethod($field1068)) {
$ans931 = $field1068.full_meth(anf_method_obj1064,anf_arg826,anf_arg832,anf_arg1066,anf_arg1067);
} else {
if(!(R.isFunction($field1068))) {
R.ffi.throwNonFunApp(L[184],$field1068);
}
$ans931 = $field1068.app(anf_arg826,anf_arg832,anf_arg1066,anf_arg1067);
}
break;
case 35: ++R.GAS;
return $ans931;
default: throw "No case numbered " + $step923 + " in $temp_full924";
}
}
} catch($e1070) {
if(R.isCont($e1070) && ($step923 !== 35)) {
$e1070.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al932,$temp_full924,$step923,[self925,loc926,from$fail$arg927,maybe$stack$loc928,src$available929,maybe$ast930],[anf_method_obj1064,anf_method_obj942,anf_arg780,anf_arg795,anf_arg947,anf_method_obj972,anf_method_obj955,anf_arg957,anf_arg811,anf_arg810,anf_method_obj981,anf_arg987,anf_arg988,anf_arg825,anf_arg826,anf_method_obj994,anf_arg832,anf_arg1066,cases1000]);
}
if(R.isPyretException($e1070)) {
$e1070.pyretStack.push($al932);
}
throw $e1070;
}
};
var anf_variant_member2286 = R.makeMethod5($temp_full924,"render-fancy-reason");
var $temp_full1072 = function($self312,$loc1073,$from$fail$arg1074) {
var $step1071 = 0;
var $ans1075 = D;
var $al1076 = L[253];
try {
if(R.isActivationRecord($self312)) {
$step1071 = $self312.step;
$al1076 = $self312.from;
$ans1075 = $self312.ans;
self312 = $self312.args[0];
loc1073 = $self312.args[1];
from$fail$arg1074 = $self312.args[2];
anf_method_obj1087 = $self312.vars[0];
anf_arg1088 = $self312.vars[1];
anf_arg1089 = $self312.vars[2];
anf_arg1091 = $self312.vars[3];
anf_arg290 = $self312.vars[4];
message1117 = $self312.vars[5];
anf_arg1125 = $self312.vars[6];
anf_method_obj1123 = $self312.vars[7];
anf_method_obj1139 = $self312.vars[8];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[253],3,$t);
}
var self312 = $self312;
var loc1073 = $loc1073;
var from$fail$arg1074 = $from$fail$arg1074;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1071) {
case 0: $al1076 = L[230];
var anf_method_obj1087 = G(ED2,"para",L[230]);
$step1071 = 1;
$al1076 = L[231];
$field1078 = R.getColonFieldLoc(ED2,"text",L[231]);
if(R.isMethod($field1078)) {
$ans1075 = $field1078.full_meth(ED2,("Expected to get "));
} else {
if(!(R.isFunction($field1078))) {
R.ffi.throwNonFunApp(L[231],$field1078);
}
$ans1075 = $field1078.app(("Expected to get "));
}
break;
case 1: var anf_arg1088 = $ans1075;
$al1076 = L[232];
var anf_arg281 = G(self312,"name",L[232]);
$step1071 = 2;
$al1076 = L[233];
$field1080 = R.getColonFieldLoc(ED2,"text",L[233]);
if(R.isMethod($field1080)) {
$ans1075 = $field1080.full_meth(ED2,anf_arg281);
} else {
if(!(R.isFunction($field1080))) {
R.ffi.throwNonFunApp(L[233],$field1080);
}
$ans1075 = $field1080.app(anf_arg281);
}
break;
case 2: var anf_arg286 = $ans1075;
$step1071 = 3;
$al1076 = L[234];
$field1081 = R.getColonFieldLoc(ED2,"code",L[234]);
if(R.isMethod($field1081)) {
$ans1075 = $field1081.full_meth(ED2,anf_arg286);
} else {
if(!(R.isFunction($field1081))) {
R.ffi.throwNonFunApp(L[234],$field1081);
}
$ans1075 = $field1081.app(anf_arg286);
}
break;
case 3: var anf_arg1089 = $ans1075;
$step1071 = 4;
$al1076 = L[235];
$field1082 = R.getColonFieldLoc(ED2,"text",L[235]);
if(R.isMethod($field1082)) {
$ans1075 = $field1082.full_meth(ED2,(" because of the annotation at "));
} else {
if(!(R.isFunction($field1082))) {
R.ffi.throwNonFunApp(L[235],$field1082);
}
$ans1075 = $field1082.app((" because of the annotation at "));
}
break;
case 4: var anf_arg1091 = $ans1075;
var anf_fun1083 = draw$and$highlight48.$var;
$step1071 = 5;
$al1076 = L[252];
if(!(R.isFunction(anf_fun1083))) {
R.ffi.throwNonFunApp($al1076,anf_fun1083);
}
$ans1075 = anf_fun1083.app(loc1073);
break;
case 5: var anf_arg290 = $ans1075;
$step1071 = 6;
$al1076 = L[236];
$field1086 = R.getColonFieldLoc(ED2,"text",L[236]);
if(R.isMethod($field1086)) {
$ans1075 = $field1086.full_meth(ED2,(" but got:"));
} else {
if(!(R.isFunction($field1086))) {
R.ffi.throwNonFunApp(L[236],$field1086);
}
$ans1075 = $field1086.app((" but got:"));
}
break;
case 6: var anf_arg291 = $ans1075;
$step1071 = 7;
$al1076 = L[230];
$field1098 = R.getColonFieldLoc(anf_method_obj1087,"make5",L[230]);
if(R.isMethod($field1098)) {
$ans1075 = $field1098.full_meth(anf_method_obj1087,anf_arg1088,anf_arg1089,anf_arg1091,anf_arg290,anf_arg291);
} else {
if(!(R.isFunction($field1098))) {
R.ffi.throwNonFunApp(L[230],$field1098);
}
$ans1075 = $field1098.app(anf_arg1088,anf_arg1089,anf_arg1091,anf_arg290,anf_arg291);
}
break;
case 7: var message1117 = $ans1075;
$al1076 = L[237];
var anf_if1148 = R.checkWrapBoolean(from$fail$arg1074);
$step1071 = R.isPyretTrue(anf_if1148)?8:11;
break;
case 8: var $temp_lam1100 = function($l1101) {
var $step1099 = 0;
var $ans1103 = D;
var $al1104 = L[244];
try {
if(R.isActivationRecord($l1101)) {
$step1099 = $l1101.step;
$al1104 = $l1101.from;
$ans1103 = $l1101.ans;
l1101 = $l1101.args[0];
anf_method_obj1116 = $l1101.vars[0];
anf_arg1119 = $l1101.vars[1];
anf_method_obj1112 = $l1101.vars[2];
anf_arg1114 = $l1101.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[244],1,$t);
}
var l1101 = $l1101;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1099) {
case 0: $al1104 = L[238];
var anf_method_obj1116 = G(ED2,"error",L[238]);
$al1104 = L[239];
var anf_arg1108 = G(self312,"val",L[239]);
$step1099 = 1;
$al1104 = L[240];
$field1109 = R.getColonFieldLoc(ED2,"embed",L[240]);
if(R.isMethod($field1109)) {
$ans1103 = $field1109.full_meth(ED2,anf_arg1108);
} else {
if(!(R.isFunction($field1109))) {
R.ffi.throwNonFunApp(L[240],$field1109);
}
$ans1103 = $field1109.app(anf_arg1108);
}
break;
case 1: var anf_arg1119 = $ans1103;
$al1104 = L[241];
var anf_method_obj1112 = G(ED2,"para",L[241]);
$step1099 = 2;
$al1104 = L[242];
$field1110 = R.getColonFieldLoc(ED2,"text",L[242]);
if(R.isMethod($field1110)) {
$ans1103 = $field1110.full_meth(ED2,("called from around "));
} else {
if(!(R.isFunction($field1110))) {
R.ffi.throwNonFunApp(L[242],$field1110);
}
$ans1103 = $field1110.app(("called from around "));
}
break;
case 2: var anf_arg1114 = $ans1103;
var anf_fun1111 = draw$and$highlight48.$var;
$step1099 = 3;
$al1104 = L[243];
if(!(R.isFunction(anf_fun1111))) {
R.ffi.throwNonFunApp($al1104,anf_fun1111);
}
$ans1103 = anf_fun1111.app(l1101);
break;
case 3: var anf_arg308 = $ans1103;
$step1099 = 4;
$al1104 = L[241];
$field1115 = R.getColonFieldLoc(anf_method_obj1112,"make2",L[241]);
if(R.isMethod($field1115)) {
$ans1103 = $field1115.full_meth(anf_method_obj1112,anf_arg1114,anf_arg308);
} else {
if(!(R.isFunction($field1115))) {
R.ffi.throwNonFunApp(L[241],$field1115);
}
$ans1103 = $field1115.app(anf_arg1114,anf_arg308);
}
break;
case 4: var anf_arg313 = $ans1103;
$step1099 = 5;
$al1104 = L[238];
$field1120 = R.getColonFieldLoc(anf_method_obj1116,"make3",L[238]);
if(R.isMethod($field1120)) {
$ans1103 = $field1120.full_meth(anf_method_obj1116,message1117,anf_arg1119,anf_arg313);
} else {
if(!(R.isFunction($field1120))) {
R.ffi.throwNonFunApp(L[238],$field1120);
}
$ans1103 = $field1120.app(message1117,anf_arg1119,anf_arg313);
}
break;
case 5: ++R.GAS;
return $ans1103;
default: throw "No case numbered " + $step1099 + " in $temp_lam1100";
}
}
} catch($e1121) {
if(R.isCont($e1121) && ($step1099 !== 5)) {
$e1121.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1104,$temp_lam1100,$step1099,[l1101],[anf_method_obj1116,anf_arg1119,anf_method_obj1112,anf_arg1114]);
}
if(R.isPyretException($e1121)) {
$e1121.pyretStack.push($al1104);
}
throw $e1121;
}
};
var anf_arg1125 = R.makeFunction($temp_lam1100,"");
$al1076 = L[245];
var anf_method_obj1123 = G(ED2,"error",L[245]);
$al1076 = L[246];
var anf_arg317 = G(self312,"val",L[246]);
$step1071 = 9;
$al1076 = L[247];
$field1122 = R.getColonFieldLoc(ED2,"embed",L[247]);
if(R.isMethod($field1122)) {
$ans1075 = $field1122.full_meth(ED2,anf_arg317);
} else {
if(!(R.isFunction($field1122))) {
R.ffi.throwNonFunApp(L[247],$field1122);
}
$ans1075 = $field1122.app(anf_arg317);
}
break;
case 9: var anf_arg318 = $ans1075;
$step1071 = 10;
$al1076 = L[245];
$field1124 = R.getColonFieldLoc(anf_method_obj1123,"make2",L[245]);
if(R.isMethod($field1124)) {
$ans1075 = $field1124.full_meth(anf_method_obj1123,message1117,anf_arg318);
} else {
if(!(R.isFunction($field1124))) {
R.ffi.throwNonFunApp(L[245],$field1124);
}
$ans1075 = $field1124.app(message1117,anf_arg318);
}
break;
case 10: var anf_arg1127 = $ans1075;
$step1071 = 13;
$al1076 = L[248];
$field1130 = R.getColonFieldLoc(ED2,"maybe-stack-loc",L[248]);
if(R.isMethod($field1130)) {
$ans1075 = $field1130.full_meth(ED2,(0),(true),anf_arg1125,anf_arg1127);
} else {
if(!(R.isFunction($field1130))) {
R.ffi.throwNonFunApp(L[248],$field1130);
}
$ans1075 = $field1130.app((0),(true),anf_arg1125,anf_arg1127);
}
break;
case 11: $al1076 = L[249];
var anf_method_obj1139 = G(ED2,"error",L[249]);
$al1076 = L[250];
var anf_arg331 = G(self312,"val",L[250]);
$step1071 = 12;
$al1076 = L[251];
$field1138 = R.getColonFieldLoc(ED2,"embed",L[251]);
if(R.isMethod($field1138)) {
$ans1075 = $field1138.full_meth(ED2,anf_arg331);
} else {
if(!(R.isFunction($field1138))) {
R.ffi.throwNonFunApp(L[251],$field1138);
}
$ans1075 = $field1138.app(anf_arg331);
}
break;
case 12: var anf_arg1143 = $ans1075;
$step1071 = 13;
$al1076 = L[249];
$field1145 = R.getColonFieldLoc(anf_method_obj1139,"make2",L[249]);
if(R.isMethod($field1145)) {
$ans1075 = $field1145.full_meth(anf_method_obj1139,message1117,anf_arg1143);
} else {
if(!(R.isFunction($field1145))) {
R.ffi.throwNonFunApp(L[249],$field1145);
}
$ans1075 = $field1145.app(message1117,anf_arg1143);
}
break;
case 13: ++R.GAS;
return $ans1075;
default: throw "No case numbered " + $step1071 + " in $temp_full1072";
}
}
} catch($e1150) {
if(R.isCont($e1150) && ($step1071 !== 13)) {
$e1150.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1076,$temp_full1072,$step1071,[self312,loc1073,from$fail$arg1074],[anf_method_obj1087,anf_arg1088,anf_arg1089,anf_arg1091,anf_arg290,message1117,anf_arg1125,anf_method_obj1123,anf_method_obj1139]);
}
if(R.isPyretException($e1150)) {
$e1150.pyretStack.push($al1076);
}
throw $e1150;
}
};
var anf_variant_member2287 = R.makeMethod2($temp_full1072,"render-reason");
var $temp_full1153 = function($self355,$loc99,$from$fail$arg1154,$maybe$stack$loc1155,$src$available1156,$maybe$ast1157) {
var $step1152 = 0;
var $ans1158 = D;
var $al1159 = L[303];
try {
if(R.isActivationRecord($self355)) {
$step1152 = $self355.step;
$al1159 = $self355.from;
$ans1158 = $self355.ans;
self355 = $self355.args[0];
loc99 = $self355.args[1];
from$fail$arg1154 = $self355.args[2];
maybe$stack$loc1155 = $self355.args[3];
src$available1156 = $self355.args[4];
maybe$ast1157 = $self355.args[5];
anf_method_obj1308 = $self355.vars[0];
anf_method_obj1172 = $self355.vars[1];
anf_arg356 = $self355.vars[2];
anf_arg1175 = $self355.vars[3];
anf_arg1178 = $self355.vars[4];
anf_method_obj1210 = $self355.vars[5];
anf_method_obj1196 = $self355.vars[6];
anf_arg1199 = $self355.vars[7];
anf_arg388 = $self355.vars[8];
anf_arg1202 = $self355.vars[9];
anf_arg389 = $self355.vars[10];
anf_arg1212 = $self355.vars[11];
anf_method_obj1222 = $self355.vars[12];
anf_arg1223 = $self355.vars[13];
anf_arg1225 = $self355.vars[14];
anf_arg1226 = $self355.vars[15];
anf_arg457 = $self355.vars[16];
anf_method_obj1244 = $self355.vars[17];
anf_arg1309 = $self355.vars[18];
anf_arg1311 = $self355.vars[19];
cases1252 = $self355.vars[20];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[303],6,$t);
}
var self355 = $self355;
var loc99 = $loc99;
var from$fail$arg1154 = $from$fail$arg1154;
var maybe$stack$loc1155 = $maybe$stack$loc1155;
var src$available1156 = $src$available1156;
var maybe$ast1157 = $maybe$ast1157;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1152) {
case 0: $al1159 = L[254];
var anf_method_obj1308 = G(ED2,"error",L[254]);
$step1152 = 1;
$al1159 = L[255];
$field1160 = R.getColonFieldLoc(loc99,"is-builtin",L[255]);
if(R.isMethod($field1160)) {
$ans1158 = $field1160.full_meth(loc99);
} else {
if(!(R.isFunction($field1160))) {
R.ffi.throwNonFunApp(L[255],$field1160);
}
$ans1158 = $field1160.app();
}
break;
case 1: var anf_arg353 = $ans1158;
$al1159 = L[255];
var anf_if394 = R.checkWrapBoolean(anf_arg353);
$step1152 = R.isPyretTrue(anf_if394)?2:8;
break;
case 2: $al1159 = L[256];
var anf_method_obj1172 = G(ED2,"para",L[256]);
$step1152 = 3;
$al1159 = L[257];
$field1161 = R.getColonFieldLoc(ED2,"text",L[257]);
if(R.isMethod($field1161)) {
$ans1158 = $field1161.full_meth(ED2,("A predicate, "));
} else {
if(!(R.isFunction($field1161))) {
R.ffi.throwNonFunApp(L[257],$field1161);
}
$ans1158 = $field1161.app(("A predicate, "));
}
break;
case 3: var anf_arg356 = $ans1158;
$al1159 = L[258];
var anf_arg363 = G(self355,"name",L[258]);
$step1152 = 4;
$al1159 = L[259];
$field1162 = R.getColonFieldLoc(ED2,"text",L[259]);
if(R.isMethod($field1162)) {
$ans1158 = $field1162.full_meth(ED2,anf_arg363);
} else {
if(!(R.isFunction($field1162))) {
R.ffi.throwNonFunApp(L[259],$field1162);
}
$ans1158 = $field1162.app(anf_arg363);
}
break;
case 4: var anf_arg1167 = $ans1158;
$step1152 = 5;
$al1159 = L[260];
$field1168 = R.getColonFieldLoc(ED2,"code",L[260]);
if(R.isMethod($field1168)) {
$ans1158 = $field1168.full_meth(ED2,anf_arg1167);
} else {
if(!(R.isFunction($field1168))) {
R.ffi.throwNonFunApp(L[260],$field1168);
}
$ans1158 = $field1168.app(anf_arg1167);
}
break;
case 5: var anf_arg1175 = $ans1158;
$step1152 = 6;
$al1159 = L[261];
$field1169 = R.getColonFieldLoc(ED2,"text",L[261]);
if(R.isMethod($field1169)) {
$ans1158 = $field1169.full_meth(ED2,(", in "));
} else {
if(!(R.isFunction($field1169))) {
R.ffi.throwNonFunApp(L[261],$field1169);
}
$ans1158 = $field1169.app((", in "));
}
break;
case 6: var anf_arg1178 = $ans1158;
$step1152 = 7;
$al1159 = L[262];
$field1171 = R.getColonFieldLoc(ED2,"loc",L[262]);
if(R.isMethod($field1171)) {
$ans1158 = $field1171.full_meth(ED2,loc99);
} else {
if(!(R.isFunction($field1171))) {
R.ffi.throwNonFunApp(L[262],$field1171);
}
$ans1158 = $field1171.app(loc99);
}
break;
case 7: var anf_arg369 = $ans1158;
$step1152 = 26;
$al1159 = L[256];
$field1180 = R.getColonFieldLoc(anf_method_obj1172,"make4",L[256]);
if(R.isMethod($field1180)) {
$ans1158 = $field1180.full_meth(anf_method_obj1172,anf_arg356,anf_arg1175,anf_arg1178,anf_arg369);
} else {
if(!(R.isFunction($field1180))) {
R.ffi.throwNonFunApp(L[256],$field1180);
}
$ans1158 = $field1180.app(anf_arg356,anf_arg1175,anf_arg1178,anf_arg369);
}
break;
case 8: $step1152 = 9;
$al1159 = L[263];
if(!(R.isFunction(src$available1156))) {
R.ffi.throwNonFunApp($al1159,src$available1156);
}
$ans1158 = src$available1156.app(loc99);
break;
case 9: var anf_arg1182 = $ans1158;
$al1159 = L[263];
var anf_if1237 = R.checkWrapBoolean(anf_arg1182);
$step1152 = R.isPyretTrue(anf_if1237)?10:20;
break;
case 10: $al1159 = L[264];
var anf_method_obj1210 = G(ED2,"sequence",L[264]);
$al1159 = L[265];
var anf_method_obj1196 = G(ED2,"para",L[265]);
$step1152 = 11;
$al1159 = L[266];
$field1183 = R.getColonFieldLoc(ED2,"text",L[266]);
if(R.isMethod($field1183)) {
$ans1158 = $field1183.full_meth(ED2,("The predicate "));
} else {
if(!(R.isFunction($field1183))) {
R.ffi.throwNonFunApp(L[266],$field1183);
}
$ans1158 = $field1183.app(("The predicate "));
}
break;
case 11: var anf_arg1199 = $ans1158;
$al1159 = L[267];
var anf_arg1187 = G(self355,"name",L[267]);
$step1152 = 12;
$al1159 = L[268];
$field1188 = R.getColonFieldLoc(ED2,"text",L[268]);
if(R.isMethod($field1188)) {
$ans1158 = $field1188.full_meth(ED2,anf_arg1187);
} else {
if(!(R.isFunction($field1188))) {
R.ffi.throwNonFunApp(L[268],$field1188);
}
$ans1158 = $field1188.app(anf_arg1187);
}
break;
case 12: var anf_arg385 = $ans1158;
$step1152 = 13;
$al1159 = L[269];
$field1189 = R.getColonFieldLoc(ED2,"code",L[269]);
if(R.isMethod($field1189)) {
$ans1158 = $field1189.full_meth(ED2,anf_arg385);
} else {
if(!(R.isFunction($field1189))) {
R.ffi.throwNonFunApp(L[269],$field1189);
}
$ans1158 = $field1189.app(anf_arg385);
}
break;
case 13: var anf_arg388 = $ans1158;
$step1152 = 14;
$al1159 = L[270];
$field1190 = R.getColonFieldLoc(ED2,"text",L[270]);
if(R.isMethod($field1190)) {
$ans1158 = $field1190.full_meth(ED2,(" in the "));
} else {
if(!(R.isFunction($field1190))) {
R.ffi.throwNonFunApp(L[270],$field1190);
}
$ans1158 = $field1190.app((" in the "));
}
break;
case 14: var anf_arg1202 = $ans1158;
$step1152 = 15;
$al1159 = L[271];
$field1191 = R.getColonFieldLoc(ED2,"text",L[271]);
if(R.isMethod($field1191)) {
$ans1158 = $field1191.full_meth(ED2,("annotation"));
} else {
if(!(R.isFunction($field1191))) {
R.ffi.throwNonFunApp(L[271],$field1191);
}
$ans1158 = $field1191.app(("annotation"));
}
break;
case 15: var anf_arg389 = $ans1158;
$al1159 = L[272];
var anf_method_obj1192 = G(ED2,"locs",L[272]);
$step1152 = 16;
$al1159 = L[272];
$field1193 = R.getColonFieldLoc(anf_method_obj1192,"make1",L[272]);
if(R.isMethod($field1193)) {
$ans1158 = $field1193.full_meth(anf_method_obj1192,loc99);
} else {
if(!(R.isFunction($field1193))) {
R.ffi.throwNonFunApp(L[272],$field1193);
}
$ans1158 = $field1193.app(loc99);
}
break;
case 16: var anf_arg1194 = $ans1158;
$step1152 = 17;
$al1159 = L[273];
$field1195 = R.getColonFieldLoc(ED2,"highlight",L[273]);
if(R.isMethod($field1195)) {
$ans1158 = $field1195.full_meth(ED2,anf_arg389,anf_arg1194,(0));
} else {
if(!(R.isFunction($field1195))) {
R.ffi.throwNonFunApp(L[273],$field1195);
}
$ans1158 = $field1195.app(anf_arg389,anf_arg1194,(0));
}
break;
case 17: var anf_arg1206 = $ans1158;
$step1152 = 18;
$al1159 = L[265];
$field1207 = R.getColonFieldLoc(anf_method_obj1196,"make4",L[265]);
if(R.isMethod($field1207)) {
$ans1158 = $field1207.full_meth(anf_method_obj1196,anf_arg1199,anf_arg388,anf_arg1202,anf_arg1206);
} else {
if(!(R.isFunction($field1207))) {
R.ffi.throwNonFunApp(L[265],$field1207);
}
$ans1158 = $field1207.app(anf_arg1199,anf_arg388,anf_arg1202,anf_arg1206);
}
break;
case 18: var anf_arg1212 = $ans1158;
$step1152 = 19;
$al1159 = L[274];
$field1208 = R.getColonFieldLoc(ED2,"cmcode",L[274]);
if(R.isMethod($field1208)) {
$ans1158 = $field1208.full_meth(ED2,loc99);
} else {
if(!(R.isFunction($field1208))) {
R.ffi.throwNonFunApp(L[274],$field1208);
}
$ans1158 = $field1208.app(loc99);
}
break;
case 19: var anf_arg412 = $ans1158;
$step1152 = 26;
$al1159 = L[264];
$field1213 = R.getColonFieldLoc(anf_method_obj1210,"make2",L[264]);
if(R.isMethod($field1213)) {
$ans1158 = $field1213.full_meth(anf_method_obj1210,anf_arg1212,anf_arg412);
} else {
if(!(R.isFunction($field1213))) {
R.ffi.throwNonFunApp(L[264],$field1213);
}
$ans1158 = $field1213.app(anf_arg1212,anf_arg412);
}
break;
case 20: $al1159 = L[275];
var anf_method_obj1222 = G(ED2,"para",L[275]);
$step1152 = 21;
$al1159 = L[276];
$field1214 = R.getColonFieldLoc(ED2,"text",L[276]);
if(R.isMethod($field1214)) {
$ans1158 = $field1214.full_meth(ED2,("The predicate, "));
} else {
if(!(R.isFunction($field1214))) {
R.ffi.throwNonFunApp(L[276],$field1214);
}
$ans1158 = $field1214.app(("The predicate, "));
}
break;
case 21: var anf_arg1223 = $ans1158;
$al1159 = L[277];
var anf_arg1215 = G(self355,"name",L[277]);
$step1152 = 22;
$al1159 = L[278];
$field1217 = R.getColonFieldLoc(ED2,"text",L[278]);
if(R.isMethod($field1217)) {
$ans1158 = $field1217.full_meth(ED2,anf_arg1215);
} else {
if(!(R.isFunction($field1217))) {
R.ffi.throwNonFunApp(L[278],$field1217);
}
$ans1158 = $field1217.app(anf_arg1215);
}
break;
case 22: var anf_arg435 = $ans1158;
$step1152 = 23;
$al1159 = L[279];
$field1218 = R.getColonFieldLoc(ED2,"code",L[279]);
if(R.isMethod($field1218)) {
$ans1158 = $field1218.full_meth(ED2,anf_arg435);
} else {
if(!(R.isFunction($field1218))) {
R.ffi.throwNonFunApp(L[279],$field1218);
}
$ans1158 = $field1218.app(anf_arg435);
}
break;
case 23: var anf_arg1225 = $ans1158;
$step1152 = 24;
$al1159 = L[280];
$field1219 = R.getColonFieldLoc(ED2,"text",L[280]);
if(R.isMethod($field1219)) {
$ans1158 = $field1219.full_meth(ED2,(", at "));
} else {
if(!(R.isFunction($field1219))) {
R.ffi.throwNonFunApp(L[280],$field1219);
}
$ans1158 = $field1219.app((", at "));
}
break;
case 24: var anf_arg1226 = $ans1158;
$step1152 = 25;
$al1159 = L[281];
$field1221 = R.getColonFieldLoc(ED2,"loc",L[281]);
if(R.isMethod($field1221)) {
$ans1158 = $field1221.full_meth(ED2,loc99);
} else {
if(!(R.isFunction($field1221))) {
R.ffi.throwNonFunApp(L[281],$field1221);
}
$ans1158 = $field1221.app(loc99);
}
break;
case 25: var anf_arg1235 = $ans1158;
$step1152 = 26;
$al1159 = L[275];
$field1236 = R.getColonFieldLoc(anf_method_obj1222,"make4",L[275]);
if(R.isMethod($field1236)) {
$ans1158 = $field1236.full_meth(anf_method_obj1222,anf_arg1223,anf_arg1225,anf_arg1226,anf_arg1235);
} else {
if(!(R.isFunction($field1236))) {
R.ffi.throwNonFunApp(L[275],$field1236);
}
$ans1158 = $field1236.app(anf_arg1223,anf_arg1225,anf_arg1226,anf_arg1235);
}
break;
case 26: var anf_arg457 = $ans1158;
$al1159 = L[282];
var anf_method_obj1244 = G(ED2,"para",L[282]);
$step1152 = 27;
$al1159 = L[283];
$field1242 = R.getColonFieldLoc(ED2,"text",L[283]);
if(R.isMethod($field1242)) {
$ans1158 = $field1242.full_meth(ED2,("was not satisfied by the value"));
} else {
if(!(R.isFunction($field1242))) {
R.ffi.throwNonFunApp(L[283],$field1242);
}
$ans1158 = $field1242.app(("was not satisfied by the value"));
}
break;
case 27: var anf_arg1248 = $ans1158;
$step1152 = 28;
$al1159 = L[282];
$field1250 = R.getColonFieldLoc(anf_method_obj1244,"make1",L[282]);
if(R.isMethod($field1250)) {
$ans1158 = $field1250.full_meth(anf_method_obj1244,anf_arg1248);
} else {
if(!(R.isFunction($field1250))) {
R.ffi.throwNonFunApp(L[282],$field1250);
}
$ans1158 = $field1250.app(anf_arg1248);
}
break;
case 28: var anf_arg1309 = $ans1158;
$al1159 = L[284];
var anf_arg474 = G(self355,"val",L[284]);
$step1152 = 29;
$al1159 = L[285];
$field1251 = R.getColonFieldLoc(ED2,"embed",L[285]);
if(R.isMethod($field1251)) {
$ans1158 = $field1251.full_meth(ED2,anf_arg474);
} else {
if(!(R.isFunction($field1251))) {
R.ffi.throwNonFunApp(L[285],$field1251);
}
$ans1158 = $field1251.app(anf_arg474);
}
break;
case 29: var anf_arg1311 = $ans1158;
$al1159 = L[286];
var anf_if1314 = R.checkWrapBoolean(from$fail$arg1154);
$step1152 = R.isPyretTrue(anf_if1314)?30:36;
break;
case 30: $step1152 = 31;
$al1159 = L[301];
if(!(R.isFunction(maybe$stack$loc1155))) {
R.ffi.throwNonFunApp($al1159,maybe$stack$loc1155);
}
$ans1158 = maybe$stack$loc1155.app((1),(true));
break;
case 31: var cases1252 = $ans1158;
$step1152 = 32;
$al1159 = L[300];
R._checkAnn(L[300],R.getDotAnn(L[300],"O",O24,"Option"),cases1252);
break;
case 32: var $cases_dispatch1304 = {"some":33,
"none":34};
$al1159 = L[296];
$step1152 = $cases_dispatch1304[cases1252.$name] || 35;
break;
case 33: if(cases1252.$arity !== 1) {
if(cases1252.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[295],1,cases1252.$arity,L[296]);
} else {
R.ffi.throwCasesSingletonErrorC(L[295],true,L[296]);
}
}
$step1152 = 37;
$al1159 = L[297];
var $temp_branch1279 = function($sender1253) {
var $step1280 = 0;
var $ans1281 = D;
var $al1282 = L[287];
try {
if(R.isActivationRecord($sender1253)) {
$step1280 = $sender1253.step;
$al1282 = $sender1253.from;
$ans1281 = $sender1253.ans;
sender1253 = $sender1253.args[0];
anf_method_obj1260 = $sender1253.vars[0];
anf_method_obj1256 = $sender1253.vars[1];
anf_arg518 = $sender1253.vars[2];
anf_method_obj545 = $sender1253.vars[3];
anf_arg1267 = $sender1253.vars[4];
} else {
var sender1253 = $sender1253;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1280) {
case 0: $step1280 = 1;
$al1282 = L[287];
if(!(R.isFunction(src$available1156))) {
R.ffi.throwNonFunApp($al1282,src$available1156);
}
$ans1281 = src$available1156.app(sender1253);
break;
case 1: var anf_arg1254 = $ans1281;
$al1282 = L[287];
var anf_if1278 = R.checkWrapBoolean(anf_arg1254);
$step1280 = R.isPyretTrue(anf_if1278)?2:6;
break;
case 2: $al1282 = L[288];
var anf_method_obj1260 = G(ED2,"sequence",L[288]);
$al1282 = L[289];
var anf_method_obj1256 = G(ED2,"para",L[289]);
$step1280 = 3;
$al1282 = L[290];
$field1283 = R.getColonFieldLoc(ED2,"text",L[290]);
if(R.isMethod($field1283)) {
$ans1281 = $field1283.full_meth(ED2,("which was sent from around"));
} else {
if(!(R.isFunction($field1283))) {
R.ffi.throwNonFunApp(L[290],$field1283);
}
$ans1281 = $field1283.app(("which was sent from around"));
}
break;
case 3: var anf_arg1257 = $ans1281;
$step1280 = 4;
$al1282 = L[289];
$field1285 = R.getColonFieldLoc(anf_method_obj1256,"make1",L[289]);
if(R.isMethod($field1285)) {
$ans1281 = $field1285.full_meth(anf_method_obj1256,anf_arg1257);
} else {
if(!(R.isFunction($field1285))) {
R.ffi.throwNonFunApp(L[289],$field1285);
}
$ans1281 = $field1285.app(anf_arg1257);
}
break;
case 4: var anf_arg518 = $ans1281;
$step1280 = 5;
$al1282 = L[291];
$field1287 = R.getColonFieldLoc(ED2,"cmcode",L[291]);
if(R.isMethod($field1287)) {
$ans1281 = $field1287.full_meth(ED2,sender1253);
} else {
if(!(R.isFunction($field1287))) {
R.ffi.throwNonFunApp(L[291],$field1287);
}
$ans1281 = $field1287.app(sender1253);
}
break;
case 5: var anf_arg1263 = $ans1281;
$step1280 = 9;
$al1282 = L[288];
$field1288 = R.getColonFieldLoc(anf_method_obj1260,"make2",L[288]);
if(R.isMethod($field1288)) {
$ans1281 = $field1288.full_meth(anf_method_obj1260,anf_arg518,anf_arg1263);
} else {
if(!(R.isFunction($field1288))) {
R.ffi.throwNonFunApp(L[288],$field1288);
}
$ans1281 = $field1288.app(anf_arg518,anf_arg1263);
}
break;
case 6: $al1282 = L[292];
var anf_method_obj545 = G(ED2,"para",L[292]);
$step1280 = 7;
$al1282 = L[293];
$field1289 = R.getColonFieldLoc(ED2,"text",L[293]);
if(R.isMethod($field1289)) {
$ans1281 = $field1289.full_meth(ED2,("which was sent from around "));
} else {
if(!(R.isFunction($field1289))) {
R.ffi.throwNonFunApp(L[293],$field1289);
}
$ans1281 = $field1289.app(("which was sent from around "));
}
break;
case 7: var anf_arg1267 = $ans1281;
$step1280 = 8;
$al1282 = L[294];
$field1290 = R.getColonFieldLoc(ED2,"loc",L[294]);
if(R.isMethod($field1290)) {
$ans1281 = $field1290.full_meth(ED2,sender1253);
} else {
if(!(R.isFunction($field1290))) {
R.ffi.throwNonFunApp(L[294],$field1290);
}
$ans1281 = $field1290.app(sender1253);
}
break;
case 8: var anf_arg533 = $ans1281;
$step1280 = 9;
$al1282 = L[292];
$field1293 = R.getColonFieldLoc(anf_method_obj545,"make2",L[292]);
if(R.isMethod($field1293)) {
$ans1281 = $field1293.full_meth(anf_method_obj545,anf_arg1267,anf_arg533);
} else {
if(!(R.isFunction($field1293))) {
R.ffi.throwNonFunApp(L[292],$field1293);
}
$ans1281 = $field1293.app(anf_arg1267,anf_arg533);
}
break;
case 9: ++R.GAS;
return $ans1281;
default: throw "No case numbered " + $step1280 + " in $temp_branch1279";
}
}
} catch($e1295) {
if(R.isCont($e1295) && ($step1280 !== 9)) {
$e1295.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1282,$temp_branch1279,$step1280,[sender1253],[anf_method_obj1260,anf_method_obj1256,anf_arg518,anf_method_obj545,anf_arg1267]);
}
if(R.isPyretException($e1295)) {
$e1295.pyretStack.push($al1282);
}
throw $e1295;
}
};
$ans1158 = cases1252.$app_fields($temp_branch1279,[false]);
break;
case 34: if(cases1252.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[299],false,L[296]);
}
$al1159 = L[298];
var anf_method_obj1296 = G(ED2,"sequence",L[298]);
$step1152 = 37;
$al1159 = L[298];
$field1302 = R.getColonFieldLoc(anf_method_obj1296,"make0",L[298]);
if(R.isMethod($field1302)) {
$ans1158 = $field1302.full_meth(anf_method_obj1296);
} else {
if(!(R.isFunction($field1302))) {
R.ffi.throwNonFunApp(L[298],$field1302);
}
$ans1158 = $field1302.app();
}
break;
case 35: $step1152 = 37;
$al1159 = L[296];
$ans1158 = R.throwNoCasesMatched(L[296],cases1252);
break;
case 36: $al1159 = L[302];
var anf_method_obj1305 = G(ED2,"sequence",L[302]);
$step1152 = 37;
$al1159 = L[302];
$field1307 = R.getColonFieldLoc(anf_method_obj1305,"make0",L[302]);
if(R.isMethod($field1307)) {
$ans1158 = $field1307.full_meth(anf_method_obj1305);
} else {
if(!(R.isFunction($field1307))) {
R.ffi.throwNonFunApp(L[302],$field1307);
}
$ans1158 = $field1307.app();
}
break;
case 37: var anf_arg1312 = $ans1158;
$step1152 = 38;
$al1159 = L[254];
$field1313 = R.getColonFieldLoc(anf_method_obj1308,"make4",L[254]);
if(R.isMethod($field1313)) {
$ans1158 = $field1313.full_meth(anf_method_obj1308,anf_arg457,anf_arg1309,anf_arg1311,anf_arg1312);
} else {
if(!(R.isFunction($field1313))) {
R.ffi.throwNonFunApp(L[254],$field1313);
}
$ans1158 = $field1313.app(anf_arg457,anf_arg1309,anf_arg1311,anf_arg1312);
}
break;
case 38: ++R.GAS;
return $ans1158;
default: throw "No case numbered " + $step1152 + " in $temp_full1153";
}
}
} catch($e1316) {
if(R.isCont($e1316) && ($step1152 !== 38)) {
$e1316.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1159,$temp_full1153,$step1152,[self355,loc99,from$fail$arg1154,maybe$stack$loc1155,src$available1156,maybe$ast1157],[anf_method_obj1308,anf_method_obj1172,anf_arg356,anf_arg1175,anf_arg1178,anf_method_obj1210,anf_method_obj1196,anf_arg1199,anf_arg388,anf_arg1202,anf_arg389,anf_arg1212,anf_method_obj1222,anf_arg1223,anf_arg1225,anf_arg1226,anf_arg457,anf_method_obj1244,anf_arg1309,anf_arg1311,cases1252]);
}
if(R.isPyretException($e1316)) {
$e1316.pyretStack.push($al1159);
}
throw $e1316;
}
};
var anf_variant_member2297 = R.makeMethod5($temp_full1153,"render-fancy-reason");
var $temp_full1318 = function($self393,$loc1319,$from$fail$arg1320) {
var $step1317 = 0;
var $ans1321 = D;
var $al1322 = L[327];
try {
if(R.isActivationRecord($self393)) {
$step1317 = $self393.step;
$al1322 = $self393.from;
$ans1321 = $self393.ans;
self393 = $self393.args[0];
loc1319 = $self393.args[1];
from$fail$arg1320 = $self393.args[2];
anf_method_obj559 = $self393.vars[0];
anf_arg562 = $self393.vars[1];
anf_arg1332 = $self393.vars[2];
anf_arg1333 = $self393.vars[3];
anf_arg587 = $self393.vars[4];
message1352 = $self393.vars[5];
anf_arg1365 = $self393.vars[6];
anf_method_obj1359 = $self393.vars[7];
anf_method_obj635 = $self393.vars[8];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[327],3,$t);
}
var self393 = $self393;
var loc1319 = $loc1319;
var from$fail$arg1320 = $from$fail$arg1320;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1317) {
case 0: $al1322 = L[304];
var anf_method_obj559 = G(ED2,"para",L[304]);
$step1317 = 1;
$al1322 = L[305];
$field1324 = R.getColonFieldLoc(ED2,"text",L[305]);
if(R.isMethod($field1324)) {
$ans1321 = $field1324.full_meth(ED2,("The predicate"));
} else {
if(!(R.isFunction($field1324))) {
R.ffi.throwNonFunApp(L[305],$field1324);
}
$ans1321 = $field1324.app(("The predicate"));
}
break;
case 1: var anf_arg562 = $ans1321;
$al1322 = L[306];
var anf_arg564 = G(self393,"name",L[306]);
$step1317 = 2;
$al1322 = L[307];
$field1325 = R.getColonFieldLoc(ED2,"text",L[307]);
if(R.isMethod($field1325)) {
$ans1321 = $field1325.full_meth(ED2,anf_arg564);
} else {
if(!(R.isFunction($field1325))) {
R.ffi.throwNonFunApp(L[307],$field1325);
}
$ans1321 = $field1325.app(anf_arg564);
}
break;
case 2: var anf_arg570 = $ans1321;
$step1317 = 3;
$al1322 = L[308];
$field1326 = R.getColonFieldLoc(ED2,"code",L[308]);
if(R.isMethod($field1326)) {
$ans1321 = $field1326.full_meth(ED2,anf_arg570);
} else {
if(!(R.isFunction($field1326))) {
R.ffi.throwNonFunApp(L[308],$field1326);
}
$ans1321 = $field1326.app(anf_arg570);
}
break;
case 3: var anf_arg1332 = $ans1321;
$step1317 = 4;
$al1322 = L[309];
$field1328 = R.getColonFieldLoc(ED2,"text",L[309]);
if(R.isMethod($field1328)) {
$ans1321 = $field1328.full_meth(ED2,("in the annotation at"));
} else {
if(!(R.isFunction($field1328))) {
R.ffi.throwNonFunApp(L[309],$field1328);
}
$ans1321 = $field1328.app(("in the annotation at"));
}
break;
case 4: var anf_arg1333 = $ans1321;
var anf_fun1329 = draw$and$highlight48.$var;
$step1317 = 5;
$al1322 = L[326];
if(!(R.isFunction(anf_fun1329))) {
R.ffi.throwNonFunApp($al1322,anf_fun1329);
}
$ans1321 = anf_fun1329.app(loc1319);
break;
case 5: var anf_arg587 = $ans1321;
$step1317 = 6;
$al1322 = L[310];
$field1331 = R.getColonFieldLoc(ED2,"text",L[310]);
if(R.isMethod($field1331)) {
$ans1321 = $field1331.full_meth(ED2,("returned false for this value:"));
} else {
if(!(R.isFunction($field1331))) {
R.ffi.throwNonFunApp(L[310],$field1331);
}
$ans1321 = $field1331.app(("returned false for this value:"));
}
break;
case 6: var anf_arg589 = $ans1321;
$step1317 = 7;
$al1322 = L[304];
$field1334 = R.getColonFieldLoc(anf_method_obj559,"make5",L[304]);
if(R.isMethod($field1334)) {
$ans1321 = $field1334.full_meth(anf_method_obj559,anf_arg562,anf_arg1332,anf_arg1333,anf_arg587,anf_arg589);
} else {
if(!(R.isFunction($field1334))) {
R.ffi.throwNonFunApp(L[304],$field1334);
}
$ans1321 = $field1334.app(anf_arg562,anf_arg1332,anf_arg1333,anf_arg587,anf_arg589);
}
break;
case 7: var message1352 = $ans1321;
$al1322 = L[311];
var anf_if1375 = R.checkWrapBoolean(from$fail$arg1320);
$step1317 = R.isPyretTrue(anf_if1375)?8:11;
break;
case 8: var $temp_lam1336 = function($l1337) {
var $step1335 = 0;
var $ans1339 = D;
var $al1340 = L[318];
try {
if(R.isActivationRecord($l1337)) {
$step1335 = $l1337.step;
$al1340 = $l1337.from;
$ans1339 = $l1337.ans;
l1337 = $l1337.args[0];
anf_method_obj1351 = $l1337.vars[0];
anf_arg1354 = $l1337.vars[1];
anf_method_obj1345 = $l1337.vars[2];
anf_arg607 = $l1337.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[318],1,$t);
}
var l1337 = $l1337;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1335) {
case 0: $al1340 = L[312];
var anf_method_obj1351 = G(ED2,"error",L[312]);
$al1340 = L[313];
var anf_arg1341 = G(self393,"val",L[313]);
$step1335 = 1;
$al1340 = L[314];
$field1342 = R.getColonFieldLoc(ED2,"embed",L[314]);
if(R.isMethod($field1342)) {
$ans1339 = $field1342.full_meth(ED2,anf_arg1341);
} else {
if(!(R.isFunction($field1342))) {
R.ffi.throwNonFunApp(L[314],$field1342);
}
$ans1339 = $field1342.app(anf_arg1341);
}
break;
case 1: var anf_arg1354 = $ans1339;
$al1340 = L[315];
var anf_method_obj1345 = G(ED2,"para",L[315]);
$step1335 = 2;
$al1340 = L[316];
$field1343 = R.getColonFieldLoc(ED2,"text",L[316]);
if(R.isMethod($field1343)) {
$ans1339 = $field1343.full_meth(ED2,("called from around"));
} else {
if(!(R.isFunction($field1343))) {
R.ffi.throwNonFunApp(L[316],$field1343);
}
$ans1339 = $field1343.app(("called from around"));
}
break;
case 2: var anf_arg607 = $ans1339;
var anf_fun1344 = draw$and$highlight48.$var;
$step1335 = 3;
$al1340 = L[317];
if(!(R.isFunction(anf_fun1344))) {
R.ffi.throwNonFunApp($al1340,anf_fun1344);
}
$ans1339 = anf_fun1344.app(l1337);
break;
case 3: var anf_arg1348 = $ans1339;
$step1335 = 4;
$al1340 = L[315];
$field1350 = R.getColonFieldLoc(anf_method_obj1345,"make2",L[315]);
if(R.isMethod($field1350)) {
$ans1339 = $field1350.full_meth(anf_method_obj1345,anf_arg607,anf_arg1348);
} else {
if(!(R.isFunction($field1350))) {
R.ffi.throwNonFunApp(L[315],$field1350);
}
$ans1339 = $field1350.app(anf_arg607,anf_arg1348);
}
break;
case 4: var anf_arg1355 = $ans1339;
$step1335 = 5;
$al1340 = L[312];
$field1356 = R.getColonFieldLoc(anf_method_obj1351,"make3",L[312]);
if(R.isMethod($field1356)) {
$ans1339 = $field1356.full_meth(anf_method_obj1351,message1352,anf_arg1354,anf_arg1355);
} else {
if(!(R.isFunction($field1356))) {
R.ffi.throwNonFunApp(L[312],$field1356);
}
$ans1339 = $field1356.app(message1352,anf_arg1354,anf_arg1355);
}
break;
case 5: ++R.GAS;
return $ans1339;
default: throw "No case numbered " + $step1335 + " in $temp_lam1336";
}
}
} catch($e1357) {
if(R.isCont($e1357) && ($step1335 !== 5)) {
$e1357.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1340,$temp_lam1336,$step1335,[l1337],[anf_method_obj1351,anf_arg1354,anf_method_obj1345,anf_arg607]);
}
if(R.isPyretException($e1357)) {
$e1357.pyretStack.push($al1340);
}
throw $e1357;
}
};
var anf_arg1365 = R.makeFunction($temp_lam1336,"");
$al1322 = L[319];
var anf_method_obj1359 = G(ED2,"error",L[319]);
$al1322 = L[320];
var anf_arg621 = G(self393,"val",L[320]);
$step1317 = 9;
$al1322 = L[321];
$field1358 = R.getColonFieldLoc(ED2,"embed",L[321]);
if(R.isMethod($field1358)) {
$ans1321 = $field1358.full_meth(ED2,anf_arg621);
} else {
if(!(R.isFunction($field1358))) {
R.ffi.throwNonFunApp(L[321],$field1358);
}
$ans1321 = $field1358.app(anf_arg621);
}
break;
case 9: var anf_arg623 = $ans1321;
$step1317 = 10;
$al1322 = L[319];
$field1360 = R.getColonFieldLoc(anf_method_obj1359,"make2",L[319]);
if(R.isMethod($field1360)) {
$ans1321 = $field1360.full_meth(anf_method_obj1359,message1352,anf_arg623);
} else {
if(!(R.isFunction($field1360))) {
R.ffi.throwNonFunApp(L[319],$field1360);
}
$ans1321 = $field1360.app(message1352,anf_arg623);
}
break;
case 10: var anf_arg1367 = $ans1321;
$step1317 = 13;
$al1322 = L[322];
$field1368 = R.getColonFieldLoc(ED2,"maybe-stack-loc",L[322]);
if(R.isMethod($field1368)) {
$ans1321 = $field1368.full_meth(ED2,(0),(true),anf_arg1365,anf_arg1367);
} else {
if(!(R.isFunction($field1368))) {
R.ffi.throwNonFunApp(L[322],$field1368);
}
$ans1321 = $field1368.app((0),(true),anf_arg1365,anf_arg1367);
}
break;
case 11: $al1322 = L[323];
var anf_method_obj635 = G(ED2,"error",L[323]);
$al1322 = L[324];
var anf_arg1372 = G(self393,"val",L[324]);
$step1317 = 12;
$al1322 = L[325];
$field1373 = R.getColonFieldLoc(ED2,"embed",L[325]);
if(R.isMethod($field1373)) {
$ans1321 = $field1373.full_meth(ED2,anf_arg1372);
} else {
if(!(R.isFunction($field1373))) {
R.ffi.throwNonFunApp(L[325],$field1373);
}
$ans1321 = $field1373.app(anf_arg1372);
}
break;
case 12: var anf_arg637 = $ans1321;
$step1317 = 13;
$al1322 = L[323];
$field1374 = R.getColonFieldLoc(anf_method_obj635,"make2",L[323]);
if(R.isMethod($field1374)) {
$ans1321 = $field1374.full_meth(anf_method_obj635,message1352,anf_arg637);
} else {
if(!(R.isFunction($field1374))) {
R.ffi.throwNonFunApp(L[323],$field1374);
}
$ans1321 = $field1374.app(message1352,anf_arg637);
}
break;
case 13: ++R.GAS;
return $ans1321;
default: throw "No case numbered " + $step1317 + " in $temp_full1318";
}
}
} catch($e1376) {
if(R.isCont($e1376) && ($step1317 !== 13)) {
$e1376.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1322,$temp_full1318,$step1317,[self393,loc1319,from$fail$arg1320],[anf_method_obj559,anf_arg562,anf_arg1332,anf_arg1333,anf_arg587,message1352,anf_arg1365,anf_method_obj1359,anf_method_obj635]);
}
if(R.isPyretException($e1376)) {
$e1376.pyretStack.push($al1322);
}
throw $e1376;
}
};
var anf_variant_member2298 = R.makeMethod2($temp_full1318,"render-reason");
var $temp_full1378 = function($self426,$loc1379,$from$fail$arg1380,$maybe$stack$loc1381,$src$available1382,$maybe$ast1383) {
var $step1377 = 0;
var $ans1384 = D;
var $al1385 = L[392];
try {
if(R.isActivationRecord($self426)) {
$step1377 = $self426.step;
$al1385 = $self426.from;
$ans1384 = $self426.ans;
self426 = $self426.args[0];
loc1379 = $self426.args[1];
from$fail$arg1380 = $self426.args[2];
maybe$stack$loc1381 = $self426.args[3];
src$available1382 = $self426.args[4];
maybe$ast1383 = $self426.args[5];
anf_method_obj1597 = $self426.vars[0];
anf_method_obj1390 = $self426.vars[1];
anf_arg662 = $self426.vars[2];
anf_method_obj1421 = $self426.vars[3];
anf_method_obj1409 = $self426.vars[4];
anf_arg1412 = $self426.vars[5];
anf_arg1406 = $self426.vars[6];
anf_arg684 = $self426.vars[7];
anf_method_obj1440 = $self426.vars[8];
anf_arg702 = $self426.vars[9];
anf_arg1600 = $self426.vars[10];
anf_method_obj1447 = $self426.vars[11];
anf_arg1602 = $self426.vars[12];
anf_arg1603 = $self426.vars[13];
cases1452 = $self426.vars[14];
anf_arg1606 = $self426.vars[15];
anf_method_obj1594 = $self426.vars[16];
anf_arg836 = $self426.vars[17];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[392],6,$t);
}
var self426 = $self426;
var loc1379 = $loc1379;
var from$fail$arg1380 = $from$fail$arg1380;
var maybe$stack$loc1381 = $maybe$stack$loc1381;
var src$available1382 = $src$available1382;
var maybe$ast1383 = $maybe$ast1383;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1377) {
case 0: $al1385 = L[328];
var anf_method_obj1597 = G(ED2,"error",L[328]);
$step1377 = 1;
$al1385 = L[329];
$field1386 = R.getColonFieldLoc(loc1379,"is-builtin",L[329]);
if(R.isMethod($field1386)) {
$ans1384 = $field1386.full_meth(loc1379);
} else {
if(!(R.isFunction($field1386))) {
R.ffi.throwNonFunApp(L[329],$field1386);
}
$ans1384 = $field1386.app();
}
break;
case 1: var anf_arg1387 = $ans1384;
$al1385 = L[329];
var anf_if1609 = R.checkWrapBoolean(anf_arg1387);
$step1377 = R.isPyretTrue(anf_if1609)?2:5;
break;
case 2: $al1385 = L[330];
var anf_method_obj1390 = G(ED2,"para",L[330]);
$step1377 = 3;
$al1385 = L[331];
$field1388 = R.getColonFieldLoc(ED2,"text",L[331]);
if(R.isMethod($field1388)) {
$ans1384 = $field1388.full_meth(ED2,("A record annotation in "));
} else {
if(!(R.isFunction($field1388))) {
R.ffi.throwNonFunApp(L[331],$field1388);
}
$ans1384 = $field1388.app(("A record annotation in "));
}
break;
case 3: var anf_arg662 = $ans1384;
$step1377 = 4;
$al1385 = L[332];
$field1389 = R.getColonFieldLoc(ED2,"loc",L[332]);
if(R.isMethod($field1389)) {
$ans1384 = $field1389.full_meth(ED2,loc1379);
} else {
if(!(R.isFunction($field1389))) {
R.ffi.throwNonFunApp(L[332],$field1389);
}
$ans1384 = $field1389.app(loc1379);
}
break;
case 4: var anf_arg1391 = $ans1384;
$step1377 = 17;
$al1385 = L[330];
$field1392 = R.getColonFieldLoc(anf_method_obj1390,"make2",L[330]);
if(R.isMethod($field1392)) {
$ans1384 = $field1392.full_meth(anf_method_obj1390,anf_arg662,anf_arg1391);
} else {
if(!(R.isFunction($field1392))) {
R.ffi.throwNonFunApp(L[330],$field1392);
}
$ans1384 = $field1392.app(anf_arg662,anf_arg1391);
}
break;
case 5: $step1377 = 6;
$al1385 = L[333];
if(!(R.isFunction(src$available1382))) {
R.ffi.throwNonFunApp($al1385,src$available1382);
}
$ans1384 = src$available1382.app(loc1379);
break;
case 6: var anf_arg663 = $ans1384;
$al1385 = L[333];
var anf_if1444 = R.checkWrapBoolean(anf_arg663);
$step1377 = R.isPyretTrue(anf_if1444)?7:14;
break;
case 7: $al1385 = L[334];
var anf_method_obj1421 = G(ED2,"sequence",L[334]);
$al1385 = L[335];
var anf_method_obj1409 = G(ED2,"para",L[335]);
$step1377 = 8;
$al1385 = L[336];
$field1397 = R.getColonFieldLoc(ED2,"text",L[336]);
if(R.isMethod($field1397)) {
$ans1384 = $field1397.full_meth(ED2,("The "));
} else {
if(!(R.isFunction($field1397))) {
R.ffi.throwNonFunApp(L[336],$field1397);
}
$ans1384 = $field1397.app(("The "));
}
break;
case 8: var anf_arg1412 = $ans1384;
$step1377 = 9;
$al1385 = L[337];
$field1399 = R.getColonFieldLoc(ED2,"text",L[337]);
if(R.isMethod($field1399)) {
$ans1384 = $field1399.full_meth(ED2,("record annotation"));
} else {
if(!(R.isFunction($field1399))) {
R.ffi.throwNonFunApp(L[337],$field1399);
}
$ans1384 = $field1399.app(("record annotation"));
}
break;
case 9: var anf_arg1406 = $ans1384;
$al1385 = L[338];
var anf_method_obj1400 = G(ED2,"locs",L[338]);
$step1377 = 10;
$al1385 = L[338];
$field1402 = R.getColonFieldLoc(anf_method_obj1400,"make1",L[338]);
if(R.isMethod($field1402)) {
$ans1384 = $field1402.full_meth(anf_method_obj1400,loc1379);
} else {
if(!(R.isFunction($field1402))) {
R.ffi.throwNonFunApp(L[338],$field1402);
}
$ans1384 = $field1402.app(loc1379);
}
break;
case 10: var anf_arg1407 = $ans1384;
$step1377 = 11;
$al1385 = L[339];
$field1408 = R.getColonFieldLoc(ED2,"highlight",L[339]);
if(R.isMethod($field1408)) {
$ans1384 = $field1408.full_meth(ED2,anf_arg1406,anf_arg1407,(-1));
} else {
if(!(R.isFunction($field1408))) {
R.ffi.throwNonFunApp(L[339],$field1408);
}
$ans1384 = $field1408.app(anf_arg1406,anf_arg1407,(-1));
}
break;
case 11: var anf_arg1417 = $ans1384;
$step1377 = 12;
$al1385 = L[335];
$field1419 = R.getColonFieldLoc(anf_method_obj1409,"make2",L[335]);
if(R.isMethod($field1419)) {
$ans1384 = $field1419.full_meth(anf_method_obj1409,anf_arg1412,anf_arg1417);
} else {
if(!(R.isFunction($field1419))) {
R.ffi.throwNonFunApp(L[335],$field1419);
}
$ans1384 = $field1419.app(anf_arg1412,anf_arg1417);
}
break;
case 12: var anf_arg684 = $ans1384;
$step1377 = 13;
$al1385 = L[340];
$field1420 = R.getColonFieldLoc(ED2,"cmcode",L[340]);
if(R.isMethod($field1420)) {
$ans1384 = $field1420.full_meth(ED2,loc1379);
} else {
if(!(R.isFunction($field1420))) {
R.ffi.throwNonFunApp(L[340],$field1420);
}
$ans1384 = $field1420.app(loc1379);
}
break;
case 13: var anf_arg1422 = $ans1384;
$step1377 = 17;
$al1385 = L[334];
$field1437 = R.getColonFieldLoc(anf_method_obj1421,"make2",L[334]);
if(R.isMethod($field1437)) {
$ans1384 = $field1437.full_meth(anf_method_obj1421,anf_arg684,anf_arg1422);
} else {
if(!(R.isFunction($field1437))) {
R.ffi.throwNonFunApp(L[334],$field1437);
}
$ans1384 = $field1437.app(anf_arg684,anf_arg1422);
}
break;
case 14: $al1385 = L[341];
var anf_method_obj1440 = G(ED2,"para",L[341]);
$step1377 = 15;
$al1385 = L[342];
$field1438 = R.getColonFieldLoc(ED2,"text",L[342]);
if(R.isMethod($field1438)) {
$ans1384 = $field1438.full_meth(ED2,("The record annotation at "));
} else {
if(!(R.isFunction($field1438))) {
R.ffi.throwNonFunApp(L[342],$field1438);
}
$ans1384 = $field1438.app(("The record annotation at "));
}
break;
case 15: var anf_arg702 = $ans1384;
$step1377 = 16;
$al1385 = L[343];
$field1439 = R.getColonFieldLoc(ED2,"loc",L[343]);
if(R.isMethod($field1439)) {
$ans1384 = $field1439.full_meth(ED2,loc1379);
} else {
if(!(R.isFunction($field1439))) {
R.ffi.throwNonFunApp(L[343],$field1439);
}
$ans1384 = $field1439.app(loc1379);
}
break;
case 16: var anf_arg1441 = $ans1384;
$step1377 = 17;
$al1385 = L[341];
$field1443 = R.getColonFieldLoc(anf_method_obj1440,"make2",L[341]);
if(R.isMethod($field1443)) {
$ans1384 = $field1443.full_meth(anf_method_obj1440,anf_arg702,anf_arg1441);
} else {
if(!(R.isFunction($field1443))) {
R.ffi.throwNonFunApp(L[341],$field1443);
}
$ans1384 = $field1443.app(anf_arg702,anf_arg1441);
}
break;
case 17: var anf_arg1600 = $ans1384;
$al1385 = L[344];
var anf_method_obj1447 = G(ED2,"para",L[344]);
$step1377 = 18;
$al1385 = L[345];
$field1446 = R.getColonFieldLoc(ED2,"text",L[345]);
if(R.isMethod($field1446)) {
$ans1384 = $field1446.full_meth(ED2,("was not satisfied by the value"));
} else {
if(!(R.isFunction($field1446))) {
R.ffi.throwNonFunApp(L[345],$field1446);
}
$ans1384 = $field1446.app(("was not satisfied by the value"));
}
break;
case 18: var anf_arg1449 = $ans1384;
$step1377 = 19;
$al1385 = L[344];
$field1450 = R.getColonFieldLoc(anf_method_obj1447,"make1",L[344]);
if(R.isMethod($field1450)) {
$ans1384 = $field1450.full_meth(anf_method_obj1447,anf_arg1449);
} else {
if(!(R.isFunction($field1450))) {
R.ffi.throwNonFunApp(L[344],$field1450);
}
$ans1384 = $field1450.app(anf_arg1449);
}
break;
case 19: var anf_arg1602 = $ans1384;
$al1385 = L[346];
var anf_arg714 = G(self426,"val",L[346]);
$step1377 = 20;
$al1385 = L[347];
$field1451 = R.getColonFieldLoc(ED2,"embed",L[347]);
if(R.isMethod($field1451)) {
$ans1384 = $field1451.full_meth(ED2,anf_arg714);
} else {
if(!(R.isFunction($field1451))) {
R.ffi.throwNonFunApp(L[347],$field1451);
}
$ans1384 = $field1451.app(anf_arg714);
}
break;
case 20: var anf_arg1603 = $ans1384;
$al1385 = L[348];
var anf_if1608 = R.checkWrapBoolean(from$fail$arg1380);
$step1377 = R.isPyretTrue(anf_if1608)?21:27;
break;
case 21: $step1377 = 22;
$al1385 = L[363];
if(!(R.isFunction(maybe$stack$loc1381))) {
R.ffi.throwNonFunApp($al1385,maybe$stack$loc1381);
}
$ans1384 = maybe$stack$loc1381.app((1),(true));
break;
case 22: var cases1452 = $ans1384;
$step1377 = 23;
$al1385 = L[362];
R._checkAnn(L[362],R.getDotAnn(L[362],"O",O24,"Option"),cases1452);
break;
case 23: var $cases_dispatch1503 = {"some":24,
"none":25};
$al1385 = L[358];
$step1377 = $cases_dispatch1503[cases1452.$name] || 26;
break;
case 24: if(cases1452.$arity !== 1) {
if(cases1452.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[357],1,cases1452.$arity,L[358]);
} else {
R.ffi.throwCasesSingletonErrorC(L[357],true,L[358]);
}
}
$step1377 = 28;
$al1385 = L[359];
var $temp_branch1486 = function($sender1453) {
var $step1487 = 0;
var $ans1488 = D;
var $al1489 = L[349];
try {
if(R.isActivationRecord($sender1453)) {
$step1487 = $sender1453.step;
$al1489 = $sender1453.from;
$ans1488 = $sender1453.ans;
sender1453 = $sender1453.args[0];
anf_method_obj1461 = $sender1453.vars[0];
anf_method_obj1455 = $sender1453.vars[1];
anf_arg1463 = $sender1453.vars[2];
anf_method_obj1478 = $sender1453.vars[3];
anf_arg1480 = $sender1453.vars[4];
} else {
var sender1453 = $sender1453;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1487) {
case 0: $step1487 = 1;
$al1489 = L[349];
if(!(R.isFunction(src$available1382))) {
R.ffi.throwNonFunApp($al1489,src$available1382);
}
$ans1488 = src$available1382.app(sender1453);
break;
case 1: var anf_arg48 = $ans1488;
$al1489 = L[349];
var anf_if1485 = R.checkWrapBoolean(anf_arg48);
$step1487 = R.isPyretTrue(anf_if1485)?2:6;
break;
case 2: $al1489 = L[350];
var anf_method_obj1461 = G(ED2,"sequence",L[350]);
$al1489 = L[351];
var anf_method_obj1455 = G(ED2,"para",L[351]);
$step1487 = 3;
$al1489 = L[352];
$field1490 = R.getColonFieldLoc(ED2,"text",L[352]);
if(R.isMethod($field1490)) {
$ans1488 = $field1490.full_meth(ED2,("which was sent from around"));
} else {
if(!(R.isFunction($field1490))) {
R.ffi.throwNonFunApp(L[352],$field1490);
}
$ans1488 = $field1490.app(("which was sent from around"));
}
break;
case 3: var anf_arg1458 = $ans1488;
$step1487 = 4;
$al1489 = L[351];
$field1491 = R.getColonFieldLoc(anf_method_obj1455,"make1",L[351]);
if(R.isMethod($field1491)) {
$ans1488 = $field1491.full_meth(anf_method_obj1455,anf_arg1458);
} else {
if(!(R.isFunction($field1491))) {
R.ffi.throwNonFunApp(L[351],$field1491);
}
$ans1488 = $field1491.app(anf_arg1458);
}
break;
case 4: var anf_arg1463 = $ans1488;
$step1487 = 5;
$al1489 = L[353];
$field1492 = R.getColonFieldLoc(ED2,"cmcode",L[353]);
if(R.isMethod($field1492)) {
$ans1488 = $field1492.full_meth(ED2,sender1453);
} else {
if(!(R.isFunction($field1492))) {
R.ffi.throwNonFunApp(L[353],$field1492);
}
$ans1488 = $field1492.app(sender1453);
}
break;
case 5: var anf_arg1464 = $ans1488;
$step1487 = 9;
$al1489 = L[350];
$field1494 = R.getColonFieldLoc(anf_method_obj1461,"make2",L[350]);
if(R.isMethod($field1494)) {
$ans1488 = $field1494.full_meth(anf_method_obj1461,anf_arg1463,anf_arg1464);
} else {
if(!(R.isFunction($field1494))) {
R.ffi.throwNonFunApp(L[350],$field1494);
}
$ans1488 = $field1494.app(anf_arg1463,anf_arg1464);
}
break;
case 6: $al1489 = L[354];
var anf_method_obj1478 = G(ED2,"para",L[354]);
$step1487 = 7;
$al1489 = L[355];
$field1497 = R.getColonFieldLoc(ED2,"text",L[355]);
if(R.isMethod($field1497)) {
$ans1488 = $field1497.full_meth(ED2,("which was sent from around "));
} else {
if(!(R.isFunction($field1497))) {
R.ffi.throwNonFunApp(L[355],$field1497);
}
$ans1488 = $field1497.app(("which was sent from around "));
}
break;
case 7: var anf_arg1480 = $ans1488;
$step1487 = 8;
$al1489 = L[356];
$field1498 = R.getColonFieldLoc(ED2,"loc",L[356]);
if(R.isMethod($field1498)) {
$ans1488 = $field1498.full_meth(ED2,sender1453);
} else {
if(!(R.isFunction($field1498))) {
R.ffi.throwNonFunApp(L[356],$field1498);
}
$ans1488 = $field1498.app(sender1453);
}
break;
case 8: var anf_arg1482 = $ans1488;
$step1487 = 9;
$al1489 = L[354];
$field1499 = R.getColonFieldLoc(anf_method_obj1478,"make2",L[354]);
if(R.isMethod($field1499)) {
$ans1488 = $field1499.full_meth(anf_method_obj1478,anf_arg1480,anf_arg1482);
} else {
if(!(R.isFunction($field1499))) {
R.ffi.throwNonFunApp(L[354],$field1499);
}
$ans1488 = $field1499.app(anf_arg1480,anf_arg1482);
}
break;
case 9: ++R.GAS;
return $ans1488;
default: throw "No case numbered " + $step1487 + " in $temp_branch1486";
}
}
} catch($e1500) {
if(R.isCont($e1500) && ($step1487 !== 9)) {
$e1500.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1489,$temp_branch1486,$step1487,[sender1453],[anf_method_obj1461,anf_method_obj1455,anf_arg1463,anf_method_obj1478,anf_arg1480]);
}
if(R.isPyretException($e1500)) {
$e1500.pyretStack.push($al1489);
}
throw $e1500;
}
};
$ans1384 = cases1452.$app_fields($temp_branch1486,[false]);
break;
case 25: if(cases1452.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[361],false,L[358]);
}
$al1385 = L[360];
var anf_method_obj1501 = G(ED2,"sequence",L[360]);
$step1377 = 28;
$al1385 = L[360];
$field1502 = R.getColonFieldLoc(anf_method_obj1501,"make0",L[360]);
if(R.isMethod($field1502)) {
$ans1384 = $field1502.full_meth(anf_method_obj1501);
} else {
if(!(R.isFunction($field1502))) {
R.ffi.throwNonFunApp(L[360],$field1502);
}
$ans1384 = $field1502.app();
}
break;
case 26: $step1377 = 28;
$al1385 = L[358];
$ans1384 = R.throwNoCasesMatched(L[358],cases1452);
break;
case 27: $al1385 = L[364];
var anf_method_obj1504 = G(ED2,"sequence",L[364]);
$step1377 = 28;
$al1385 = L[364];
$field1505 = R.getColonFieldLoc(anf_method_obj1504,"make0",L[364]);
if(R.isMethod($field1505)) {
$ans1384 = $field1505.full_meth(anf_method_obj1504);
} else {
if(!(R.isFunction($field1505))) {
R.ffi.throwNonFunApp(L[364],$field1505);
}
$ans1384 = $field1505.app();
}
break;
case 28: var anf_arg1606 = $ans1384;
$al1385 = L[365];
var anf_method_obj1594 = G(ED2,"para",L[365]);
$step1377 = 29;
$al1385 = L[366];
$field1507 = R.getColonFieldLoc(ED2,"text",L[366]);
if(R.isMethod($field1507)) {
$ans1384 = $field1507.full_meth(ED2,("because, "));
} else {
if(!(R.isFunction($field1507))) {
R.ffi.throwNonFunApp(L[366],$field1507);
}
$ans1384 = $field1507.app(("because, "));
}
break;
case 29: var anf_arg836 = $ans1384;
var $temp_lam1509 = function($n1510,$failure1511) {
var $step1508 = 0;
var $ans1512 = D;
var $al1513 = L[388];
try {
if(R.isActivationRecord($n1510)) {
$step1508 = $n1510.step;
$al1513 = $n1510.from;
$ans1512 = $n1510.ans;
n1510 = $n1510.args[0];
failure1511 = $n1510.args[1];
cases1514 = $n1510.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[388],2,$t);
}
var n1510 = $n1510;
var failure1511 = $failure1511;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1508) {
case 0: var cases1514 = failure1511;
$step1508 = 1;
$al1513 = L[387];
R._checkAnn(L[387],FieldFailure1581,cases1514);
break;
case 1: var $cases_dispatch1580 = {"missing-field":2,
"field-failure":3};
$al1513 = L[383];
$step1508 = $cases_dispatch1580[cases1514.$name] || 4;
break;
case 2: if(cases1514.$arity !== 2) {
if(cases1514.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[382],2,cases1514.$arity,L[383]);
} else {
R.ffi.throwCasesSingletonErrorC(L[382],true,L[383]);
}
}
$step1508 = 5;
$al1513 = L[384];
var $temp_branch1551 = function($fl1515,$ff1529) {
var $step1552 = 0;
var $ans1553 = D;
var $al1554 = L[367];
try {
if(R.isActivationRecord($fl1515)) {
$step1552 = $fl1515.step;
$al1554 = $fl1515.from;
$ans1553 = $fl1515.ans;
fl1515 = $fl1515.args[0];
ff1529 = $fl1515.args[1];
anf_method_obj1533 = $fl1515.vars[0];
anf_arg1534 = $fl1515.vars[1];
anf_arg1524 = $fl1515.vars[2];
anf_arg1535 = $fl1515.vars[3];
anf_arg863 = $fl1515.vars[4];
anf_method_obj1542 = $fl1515.vars[5];
anf_arg860 = $fl1515.vars[6];
anf_arg864 = $fl1515.vars[7];
anf_arg1544 = $fl1515.vars[8];
} else {
var fl1515 = $fl1515;
var ff1529 = $ff1529;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1552) {
case 0: $step1552 = 1;
$al1554 = L[367];
if(!(R.isFunction(src$available1382))) {
R.ffi.throwNonFunApp($al1554,src$available1382);
}
$ans1553 = src$available1382.app(fl1515);
break;
case 1: var anf_arg837 = $ans1553;
$al1554 = L[367];
var anf_if1550 = R.checkWrapBoolean(anf_arg837);
$step1552 = R.isPyretTrue(anf_if1550)?2:10;
break;
case 2: $al1554 = L[368];
var anf_method_obj1533 = G(ED2,"sequence",L[368]);
$step1552 = 3;
$al1554 = L[369];
$field1555 = R.getColonFieldLoc(ED2,"text",L[369]);
if(R.isMethod($field1555)) {
$ans1553 = $field1555.full_meth(ED2,("The value was "));
} else {
if(!(R.isFunction($field1555))) {
R.ffi.throwNonFunApp(L[369],$field1555);
}
$ans1553 = $field1555.app(("The value was "));
}
break;
case 3: var anf_arg1534 = $ans1553;
$step1552 = 4;
$al1554 = L[370];
$field1556 = R.getColonFieldLoc(ED2,"text",L[370]);
if(R.isMethod($field1556)) {
$ans1553 = $field1556.full_meth(ED2,("expected"));
} else {
if(!(R.isFunction($field1556))) {
R.ffi.throwNonFunApp(L[370],$field1556);
}
$ans1553 = $field1556.app(("expected"));
}
break;
case 4: var anf_arg1524 = $ans1553;
$al1554 = L[371];
var anf_method_obj1520 = G(ED2,"locs",L[371]);
$step1552 = 5;
$al1554 = L[371];
$field1557 = R.getColonFieldLoc(anf_method_obj1520,"make1",L[371]);
if(R.isMethod($field1557)) {
$ans1553 = $field1557.full_meth(anf_method_obj1520,fl1515);
} else {
if(!(R.isFunction($field1557))) {
R.ffi.throwNonFunApp(L[371],$field1557);
}
$ans1553 = $field1557.app(fl1515);
}
break;
case 5: var anf_arg862 = $ans1553;
$step1552 = 6;
$al1554 = L[372];
$field1558 = R.getColonFieldLoc(ED2,"highlight",L[372]);
if(R.isMethod($field1558)) {
$ans1553 = $field1558.full_meth(ED2,anf_arg1524,anf_arg862,n1510);
} else {
if(!(R.isFunction($field1558))) {
R.ffi.throwNonFunApp(L[372],$field1558);
}
$ans1553 = $field1558.app(anf_arg1524,anf_arg862,n1510);
}
break;
case 6: var anf_arg1535 = $ans1553;
$step1552 = 7;
$al1554 = L[373];
$field1559 = R.getColonFieldLoc(ED2,"text",L[373]);
if(R.isMethod($field1559)) {
$ans1553 = $field1559.full_meth(ED2,(" to have a field named "));
} else {
if(!(R.isFunction($field1559))) {
R.ffi.throwNonFunApp(L[373],$field1559);
}
$ans1553 = $field1559.app((" to have a field named "));
}
break;
case 7: var anf_arg863 = $ans1553;
$step1552 = 8;
$al1554 = L[374];
$field1561 = R.getColonFieldLoc(ED2,"text",L[374]);
if(R.isMethod($field1561)) {
$ans1553 = $field1561.full_meth(ED2,ff1529);
} else {
if(!(R.isFunction($field1561))) {
R.ffi.throwNonFunApp(L[374],$field1561);
}
$ans1553 = $field1561.app(ff1529);
}
break;
case 8: var anf_arg1531 = $ans1553;
$step1552 = 9;
$al1554 = L[375];
$field1562 = R.getColonFieldLoc(ED2,"code",L[375]);
if(R.isMethod($field1562)) {
$ans1553 = $field1562.full_meth(ED2,anf_arg1531);
} else {
if(!(R.isFunction($field1562))) {
R.ffi.throwNonFunApp(L[375],$field1562);
}
$ans1553 = $field1562.app(anf_arg1531);
}
break;
case 9: var anf_arg859 = $ans1553;
$step1552 = 16;
$al1554 = L[368];
$field1563 = R.getColonFieldLoc(anf_method_obj1533,"make4",L[368]);
if(R.isMethod($field1563)) {
$ans1553 = $field1563.full_meth(anf_method_obj1533,anf_arg1534,anf_arg1535,anf_arg863,anf_arg859);
} else {
if(!(R.isFunction($field1563))) {
R.ffi.throwNonFunApp(L[368],$field1563);
}
$ans1553 = $field1563.app(anf_arg1534,anf_arg1535,anf_arg863,anf_arg859);
}
break;
case 10: $al1554 = L[376];
var anf_method_obj1542 = G(ED2,"sequence",L[376]);
$step1552 = 11;
$al1554 = L[377];
$field1564 = R.getColonFieldLoc(ED2,"text",L[377]);
if(R.isMethod($field1564)) {
$ans1553 = $field1564.full_meth(ED2,("The value was expected to have a field named "));
} else {
if(!(R.isFunction($field1564))) {
R.ffi.throwNonFunApp(L[377],$field1564);
}
$ans1553 = $field1564.app(("The value was expected to have a field named "));
}
break;
case 11: var anf_arg860 = $ans1553;
$step1552 = 12;
$al1554 = L[378];
$field1565 = R.getColonFieldLoc(ED2,"text",L[378]);
if(R.isMethod($field1565)) {
$ans1553 = $field1565.full_meth(ED2,ff1529);
} else {
if(!(R.isFunction($field1565))) {
R.ffi.throwNonFunApp(L[378],$field1565);
}
$ans1553 = $field1565.app(ff1529);
}
break;
case 12: var anf_arg861 = $ans1553;
$step1552 = 13;
$al1554 = L[379];
$field1566 = R.getColonFieldLoc(ED2,"code",L[379]);
if(R.isMethod($field1566)) {
$ans1553 = $field1566.full_meth(ED2,anf_arg861);
} else {
if(!(R.isFunction($field1566))) {
R.ffi.throwNonFunApp(L[379],$field1566);
}
$ans1553 = $field1566.app(anf_arg861);
}
break;
case 13: var anf_arg864 = $ans1553;
$step1552 = 14;
$al1554 = L[380];
$field1567 = R.getColonFieldLoc(ED2,"text",L[380]);
if(R.isMethod($field1567)) {
$ans1553 = $field1567.full_meth(ED2,(" because of the annotation at "));
} else {
if(!(R.isFunction($field1567))) {
R.ffi.throwNonFunApp(L[380],$field1567);
}
$ans1553 = $field1567.app((" because of the annotation at "));
}
break;
case 14: var anf_arg1544 = $ans1553;
$step1552 = 15;
$al1554 = L[381];
$field1570 = R.getColonFieldLoc(ED2,"loc",L[381]);
if(R.isMethod($field1570)) {
$ans1553 = $field1570.full_meth(ED2,fl1515);
} else {
if(!(R.isFunction($field1570))) {
R.ffi.throwNonFunApp(L[381],$field1570);
}
$ans1553 = $field1570.app(fl1515);
}
break;
case 15: var anf_arg1547 = $ans1553;
$step1552 = 16;
$al1554 = L[376];
$field1571 = R.getColonFieldLoc(anf_method_obj1542,"make4",L[376]);
if(R.isMethod($field1571)) {
$ans1553 = $field1571.full_meth(anf_method_obj1542,anf_arg860,anf_arg864,anf_arg1544,anf_arg1547);
} else {
if(!(R.isFunction($field1571))) {
R.ffi.throwNonFunApp(L[376],$field1571);
}
$ans1553 = $field1571.app(anf_arg860,anf_arg864,anf_arg1544,anf_arg1547);
}
break;
case 16: ++R.GAS;
return $ans1553;
default: throw "No case numbered " + $step1552 + " in $temp_branch1551";
}
}
} catch($e1572) {
if(R.isCont($e1572) && ($step1552 !== 16)) {
$e1572.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1554,$temp_branch1551,$step1552,[fl1515,ff1529],[anf_method_obj1533,anf_arg1534,anf_arg1524,anf_arg1535,anf_arg863,anf_method_obj1542,anf_arg860,anf_arg864,anf_arg1544]);
}
if(R.isPyretException($e1572)) {
$e1572.pyretStack.push($al1554);
}
throw $e1572;
}
};
$ans1512 = cases1514.$app_fields($temp_branch1551,[false,false]);
break;
case 3: if(cases1514.$arity !== 3) {
if(cases1514.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[386],3,cases1514.$arity,L[383]);
} else {
R.ffi.throwCasesSingletonErrorC(L[386],true,L[383]);
}
}
var $fn187 = cases1514.$constructor.$fieldNames;
R.derefField(cases1514.dict[$fn187[0]],cases1514.$mut_fields_mask[0],false);
R.derefField(cases1514.dict[$fn187[1]],cases1514.$mut_fields_mask[1],false);
R.derefField(cases1514.dict[$fn187[2]],cases1514.$mut_fields_mask[2],false);
$step1508 = 5;
$al1513 = L[385];
$field1575 = R.getColonFieldLoc(failure1511,"render-reason",L[385]);
if(R.isMethod($field1575)) {
$ans1512 = $field1575.full_meth(failure1511,loc1379,from$fail$arg1380);
} else {
if(!(R.isFunction($field1575))) {
R.ffi.throwNonFunApp(L[385],$field1575);
}
$ans1512 = $field1575.app(loc1379,from$fail$arg1380);
}
break;
case 4: $step1508 = 5;
$al1513 = L[383];
$ans1512 = R.throwNoCasesMatched(L[383],cases1514);
break;
case 5: ++R.GAS;
return $ans1512;
default: throw "No case numbered " + $step1508 + " in $temp_lam1509";
}
}
} catch($e1583) {
if(R.isCont($e1583) && ($step1508 !== 5)) {
$e1583.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1513,$temp_lam1509,$step1508,[n1510,failure1511],[cases1514]);
}
if(R.isPyretException($e1583)) {
$e1583.pyretStack.push($al1513);
}
throw $e1583;
}
};
var anf_arg1584 = R.makeFunction($temp_lam1509,"");
$al1385 = L[389];
var anf_arg885 = G(self426,"field-failures",L[389]);
$step1377 = 30;
$al1385 = L[390];
$field1591 = R.getColonFieldLoc(L19,"map_n",L[390]);
if(R.isMethod($field1591)) {
$ans1384 = $field1591.full_meth(L19,anf_arg1584,(1),anf_arg885);
} else {
if(!(R.isFunction($field1591))) {
R.ffi.throwNonFunApp(L[390],$field1591);
}
$ans1384 = $field1591.app(anf_arg1584,(1),anf_arg885);
}
break;
case 30: var anf_arg1592 = $ans1384;
$step1377 = 31;
$al1385 = L[391];
$field1593 = R.getColonFieldLoc(ED2,"bulleted-sequence",L[391]);
if(R.isMethod($field1593)) {
$ans1384 = $field1593.full_meth(ED2,anf_arg1592);
} else {
if(!(R.isFunction($field1593))) {
R.ffi.throwNonFunApp(L[391],$field1593);
}
$ans1384 = $field1593.app(anf_arg1592);
}
break;
case 31: var anf_arg878 = $ans1384;
$step1377 = 32;
$al1385 = L[365];
$field1596 = R.getColonFieldLoc(anf_method_obj1594,"make2",L[365]);
if(R.isMethod($field1596)) {
$ans1384 = $field1596.full_meth(anf_method_obj1594,anf_arg836,anf_arg878);
} else {
if(!(R.isFunction($field1596))) {
R.ffi.throwNonFunApp(L[365],$field1596);
}
$ans1384 = $field1596.app(anf_arg836,anf_arg878);
}
break;
case 32: var anf_arg880 = $ans1384;
$step1377 = 33;
$al1385 = L[328];
$field1607 = R.getColonFieldLoc(anf_method_obj1597,"make5",L[328]);
if(R.isMethod($field1607)) {
$ans1384 = $field1607.full_meth(anf_method_obj1597,anf_arg1600,anf_arg1602,anf_arg1603,anf_arg1606,anf_arg880);
} else {
if(!(R.isFunction($field1607))) {
R.ffi.throwNonFunApp(L[328],$field1607);
}
$ans1384 = $field1607.app(anf_arg1600,anf_arg1602,anf_arg1603,anf_arg1606,anf_arg880);
}
break;
case 33: ++R.GAS;
return $ans1384;
default: throw "No case numbered " + $step1377 + " in $temp_full1378";
}
}
} catch($e1610) {
if(R.isCont($e1610) && ($step1377 !== 33)) {
$e1610.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1385,$temp_full1378,$step1377,[self426,loc1379,from$fail$arg1380,maybe$stack$loc1381,src$available1382,maybe$ast1383],[anf_method_obj1597,anf_method_obj1390,anf_arg662,anf_method_obj1421,anf_method_obj1409,anf_arg1412,anf_arg1406,anf_arg684,anf_method_obj1440,anf_arg702,anf_arg1600,anf_method_obj1447,anf_arg1602,anf_arg1603,cases1452,anf_arg1606,anf_method_obj1594,anf_arg836]);
}
if(R.isPyretException($e1610)) {
$e1610.pyretStack.push($al1385);
}
throw $e1610;
}
};
var anf_variant_member2308 = R.makeMethod5($temp_full1378,"render-fancy-reason");
var $temp_full1612 = function($self236,$loc1613,$from$fail$arg1614) {
var $step1611 = 0;
var $ans1615 = D;
var $al1616 = L[408];
try {
if(R.isActivationRecord($self236)) {
$step1611 = $self236.step;
$al1616 = $self236.from;
$ans1615 = $self236.ans;
self236 = $self236.args[0];
loc1613 = $self236.args[1];
from$fail$arg1614 = $self236.args[2];
anf_method_obj1658 = $self236.vars[0];
anf_method_obj1625 = $self236.vars[1];
anf_arg1627 = $self236.vars[2];
anf_arg1630 = $self236.vars[3];
anf_arg1666 = $self236.vars[4];
anf_arg1670 = $self236.vars[5];
anf_method_obj1638 = $self236.vars[6];
anf_arg1672 = $self236.vars[7];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[408],3,$t);
}
var self236 = $self236;
var loc1613 = $loc1613;
var from$fail$arg1614 = $from$fail$arg1614;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1611) {
case 0: $al1616 = L[393];
var anf_method_obj1658 = G(ED2,"error",L[393]);
$al1616 = L[394];
var anf_method_obj1625 = G(ED2,"para",L[394]);
$step1611 = 1;
$al1616 = L[395];
$field1617 = R.getColonFieldLoc(ED2,"text",L[395]);
if(R.isMethod($field1617)) {
$ans1615 = $field1617.full_meth(ED2,("The record annotation at "));
} else {
if(!(R.isFunction($field1617))) {
R.ffi.throwNonFunApp(L[395],$field1617);
}
$ans1615 = $field1617.app(("The record annotation at "));
}
break;
case 1: var anf_arg1627 = $ans1615;
$step1611 = 2;
$al1616 = L[396];
$field1618 = R.getColonFieldLoc(ED2,"text",L[396]);
if(R.isMethod($field1618)) {
$ans1615 = $field1618.full_meth(ED2,("this annotation"));
} else {
if(!(R.isFunction($field1618))) {
R.ffi.throwNonFunApp(L[396],$field1618);
}
$ans1615 = $field1618.app(("this annotation"));
}
break;
case 2: var anf_arg890 = $ans1615;
$step1611 = 3;
$al1616 = L[397];
$field1620 = R.getColonFieldLoc(ED2,"code",L[397]);
if(R.isMethod($field1620)) {
$ans1615 = $field1620.full_meth(ED2,anf_arg890);
} else {
if(!(R.isFunction($field1620))) {
R.ffi.throwNonFunApp(L[397],$field1620);
}
$ans1615 = $field1620.app(anf_arg890);
}
break;
case 3: var anf_arg1621 = $ans1615;
$step1611 = 4;
$al1616 = L[398];
$field1623 = R.getColonFieldLoc(ED2,"loc-display",L[398]);
if(R.isMethod($field1623)) {
$ans1615 = $field1623.full_meth(ED2,loc1613,("error-highlight"),anf_arg1621);
} else {
if(!(R.isFunction($field1623))) {
R.ffi.throwNonFunApp(L[398],$field1623);
}
$ans1615 = $field1623.app(loc1613,("error-highlight"),anf_arg1621);
}
break;
case 4: var anf_arg1630 = $ans1615;
$step1611 = 5;
$al1616 = L[399];
$field1624 = R.getColonFieldLoc(ED2,"text",L[399]);
if(R.isMethod($field1624)) {
$ans1615 = $field1624.full_meth(ED2,("failed on this value:"));
} else {
if(!(R.isFunction($field1624))) {
R.ffi.throwNonFunApp(L[399],$field1624);
}
$ans1615 = $field1624.app(("failed on this value:"));
}
break;
case 5: var anf_arg1634 = $ans1615;
$step1611 = 6;
$al1616 = L[394];
$field1635 = R.getColonFieldLoc(anf_method_obj1625,"make3",L[394]);
if(R.isMethod($field1635)) {
$ans1615 = $field1635.full_meth(anf_method_obj1625,anf_arg1627,anf_arg1630,anf_arg1634);
} else {
if(!(R.isFunction($field1635))) {
R.ffi.throwNonFunApp(L[394],$field1635);
}
$ans1615 = $field1635.app(anf_arg1627,anf_arg1630,anf_arg1634);
}
break;
case 6: var anf_arg1666 = $ans1615;
$al1616 = L[400];
var anf_arg921 = G(self236,"val",L[400]);
$step1611 = 7;
$al1616 = L[401];
$field1636 = R.getColonFieldLoc(ED2,"embed",L[401]);
if(R.isMethod($field1636)) {
$ans1615 = $field1636.full_meth(ED2,anf_arg921);
} else {
if(!(R.isFunction($field1636))) {
R.ffi.throwNonFunApp(L[401],$field1636);
}
$ans1615 = $field1636.app(anf_arg921);
}
break;
case 7: var anf_arg1670 = $ans1615;
$al1616 = L[402];
var anf_method_obj1638 = G(ED2,"para",L[402]);
$step1611 = 8;
$al1616 = L[403];
$field1637 = R.getColonFieldLoc(ED2,"text",L[403]);
if(R.isMethod($field1637)) {
$ans1615 = $field1637.full_meth(ED2,("Because:"));
} else {
if(!(R.isFunction($field1637))) {
R.ffi.throwNonFunApp(L[403],$field1637);
}
$ans1615 = $field1637.app(("Because:"));
}
break;
case 8: var anf_arg908 = $ans1615;
$step1611 = 9;
$al1616 = L[402];
$field1639 = R.getColonFieldLoc(anf_method_obj1638,"make1",L[402]);
if(R.isMethod($field1639)) {
$ans1615 = $field1639.full_meth(anf_method_obj1638,anf_arg908);
} else {
if(!(R.isFunction($field1639))) {
R.ffi.throwNonFunApp(L[402],$field1639);
}
$ans1615 = $field1639.app(anf_arg908);
}
break;
case 9: var anf_arg1672 = $ans1615;
$al1616 = L[404];
var anf_method_obj1648 = G(self236,"field-failures",L[404]);
var $temp_lam1642 = function($recv_1643) {
var $step1641 = 0;
var $ans1644 = D;
var $al1645 = L[405];
try {
if(R.isActivationRecord($recv_1643)) {
$step1641 = $recv_1643.step;
$al1645 = $recv_1643.from;
$ans1644 = $recv_1643.ans;
recv_1643 = $recv_1643.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[405],1,$t);
}
var recv_1643 = $recv_1643;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1641) {
case 0: $step1641 = 1;
$al1645 = L[405];
$field1646 = R.getColonFieldLoc(recv_1643,"render-reason",L[405]);
if(R.isMethod($field1646)) {
$ans1644 = $field1646.full_meth(recv_1643,loc1613,(false));
} else {
if(!(R.isFunction($field1646))) {
R.ffi.throwNonFunApp(L[405],$field1646);
}
$ans1644 = $field1646.app(loc1613,(false));
}
break;
case 1: ++R.GAS;
return $ans1644;
default: throw "No case numbered " + $step1641 + " in $temp_lam1642";
}
}
} catch($e1647) {
if(R.isCont($e1647) && ($step1641 !== 1)) {
$e1647.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1645,$temp_lam1642,$step1641,[recv_1643],[]);
}
if(R.isPyretException($e1647)) {
$e1647.pyretStack.push($al1645);
}
throw $e1647;
}
};
var anf_arg1649 = R.makeFunction($temp_lam1642,"");
$step1611 = 10;
$al1616 = L[406];
$field1650 = R.getColonFieldLoc(anf_method_obj1648,"map",L[406]);
if(R.isMethod($field1650)) {
$ans1615 = $field1650.full_meth(anf_method_obj1648,anf_arg1649);
} else {
if(!(R.isFunction($field1650))) {
R.ffi.throwNonFunApp(L[406],$field1650);
}
$ans1615 = $field1650.app(anf_arg1649);
}
break;
case 10: var anf_arg1655 = $ans1615;
$step1611 = 11;
$al1616 = L[407];
$field1656 = R.getColonFieldLoc(ED2,"bulleted-sequence",L[407]);
if(R.isMethod($field1656)) {
$ans1615 = $field1656.full_meth(ED2,anf_arg1655);
} else {
if(!(R.isFunction($field1656))) {
R.ffi.throwNonFunApp(L[407],$field1656);
}
$ans1615 = $field1656.app(anf_arg1655);
}
break;
case 11: var anf_arg911 = $ans1615;
$step1611 = 12;
$al1616 = L[393];
$field1673 = R.getColonFieldLoc(anf_method_obj1658,"make4",L[393]);
if(R.isMethod($field1673)) {
$ans1615 = $field1673.full_meth(anf_method_obj1658,anf_arg1666,anf_arg1670,anf_arg1672,anf_arg911);
} else {
if(!(R.isFunction($field1673))) {
R.ffi.throwNonFunApp(L[393],$field1673);
}
$ans1615 = $field1673.app(anf_arg1666,anf_arg1670,anf_arg1672,anf_arg911);
}
break;
case 12: ++R.GAS;
return $ans1615;
default: throw "No case numbered " + $step1611 + " in $temp_full1612";
}
}
} catch($e1674) {
if(R.isCont($e1674) && ($step1611 !== 12)) {
$e1674.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1616,$temp_full1612,$step1611,[self236,loc1613,from$fail$arg1614],[anf_method_obj1658,anf_method_obj1625,anf_arg1627,anf_arg1630,anf_arg1666,anf_arg1670,anf_method_obj1638,anf_arg1672]);
}
if(R.isPyretException($e1674)) {
$e1674.pyretStack.push($al1616);
}
throw $e1674;
}
};
var anf_variant_member2309 = R.makeMethod2($temp_full1612,"render-reason");
var $temp_full1676 = function($self1677,$loc1678,$from$fail$arg1679,$maybe$stack$loc1680,$src$available1681,$maybe$ast1682) {
var $step1675 = 0;
var $ans1683 = D;
var $al1684 = L[478];
try {
if(R.isActivationRecord($self1677)) {
$step1675 = $self1677.step;
$al1684 = $self1677.from;
$ans1683 = $self1677.ans;
self1677 = $self1677.args[0];
loc1678 = $self1677.args[1];
from$fail$arg1679 = $self1677.args[2];
maybe$stack$loc1680 = $self1677.args[3];
src$available1681 = $self1677.args[4];
maybe$ast1682 = $self1677.args[5];
anf_method_obj1895 = $self1677.vars[0];
anf_method_obj1692 = $self1677.vars[1];
anf_arg916 = $self1677.vars[2];
anf_arg919 = $self1677.vars[3];
anf_method_obj1717 = $self1677.vars[4];
anf_method_obj1708 = $self1677.vars[5];
anf_arg963 = $self1677.vars[6];
anf_arg1710 = $self1677.vars[7];
anf_arg307 = $self1677.vars[8];
anf_arg946 = $self1677.vars[9];
anf_method_obj1725 = $self1677.vars[10];
anf_arg1726 = $self1677.vars[11];
anf_arg954 = $self1677.vars[12];
anf_arg339 = $self1677.vars[13];
anf_method_obj1730 = $self1677.vars[14];
anf_arg956 = $self1677.vars[15];
anf_arg1897 = $self1677.vars[16];
cases1734 = $self1677.vars[17];
anf_arg1899 = $self1677.vars[18];
anf_method_obj1892 = $self1677.vars[19];
anf_arg404 = $self1677.vars[20];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[478],6,$t);
}
var self1677 = $self1677;
var loc1678 = $loc1678;
var from$fail$arg1679 = $from$fail$arg1679;
var maybe$stack$loc1680 = $maybe$stack$loc1680;
var src$available1681 = $src$available1681;
var maybe$ast1682 = $maybe$ast1682;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1675) {
case 0: $al1684 = L[409];
var anf_method_obj1895 = G(ED2,"error",L[409]);
$step1675 = 1;
$al1684 = L[410];
$field1685 = R.getColonFieldLoc(loc1678,"is-builtin",L[410]);
if(R.isMethod($field1685)) {
$ans1683 = $field1685.full_meth(loc1678);
} else {
if(!(R.isFunction($field1685))) {
R.ffi.throwNonFunApp(L[410],$field1685);
}
$ans1683 = $field1685.app();
}
break;
case 1: var anf_arg915 = $ans1683;
$al1684 = L[410];
var anf_if1902 = R.checkWrapBoolean(anf_arg915);
$step1675 = R.isPyretTrue(anf_if1902)?2:6;
break;
case 2: $al1684 = L[411];
var anf_method_obj1692 = G(ED2,"para",L[411]);
$step1675 = 3;
$al1684 = L[412];
$field1686 = R.getColonFieldLoc(ED2,"text",L[412]);
if(R.isMethod($field1686)) {
$ans1683 = $field1686.full_meth(ED2,("A tuple annotation, "));
} else {
if(!(R.isFunction($field1686))) {
R.ffi.throwNonFunApp(L[412],$field1686);
}
$ans1683 = $field1686.app(("A tuple annotation, "));
}
break;
case 3: var anf_arg916 = $ans1683;
$step1675 = 4;
$al1684 = L[413];
$field1687 = R.getColonFieldLoc(ED2,"text",L[413]);
if(R.isMethod($field1687)) {
$ans1683 = $field1687.full_meth(ED2,(", in "));
} else {
if(!(R.isFunction($field1687))) {
R.ffi.throwNonFunApp(L[413],$field1687);
}
$ans1683 = $field1687.app((", in "));
}
break;
case 4: var anf_arg919 = $ans1683;
$step1675 = 5;
$al1684 = L[414];
$field1691 = R.getColonFieldLoc(ED2,"loc",L[414]);
if(R.isMethod($field1691)) {
$ans1683 = $field1691.full_meth(ED2,loc1678);
} else {
if(!(R.isFunction($field1691))) {
R.ffi.throwNonFunApp(L[414],$field1691);
}
$ans1683 = $field1691.app(loc1678);
}
break;
case 5: var anf_arg928 = $ans1683;
$step1675 = 20;
$al1684 = L[411];
$field1694 = R.getColonFieldLoc(anf_method_obj1692,"make3",L[411]);
if(R.isMethod($field1694)) {
$ans1683 = $field1694.full_meth(anf_method_obj1692,anf_arg916,anf_arg919,anf_arg928);
} else {
if(!(R.isFunction($field1694))) {
R.ffi.throwNonFunApp(L[411],$field1694);
}
$ans1683 = $field1694.app(anf_arg916,anf_arg919,anf_arg928);
}
break;
case 6: $step1675 = 7;
$al1684 = L[415];
if(!(R.isFunction(src$available1681))) {
R.ffi.throwNonFunApp($al1684,src$available1681);
}
$ans1683 = src$available1681.app(loc1678);
break;
case 7: var anf_arg1695 = $ans1683;
$al1684 = L[415];
var anf_if1728 = R.checkWrapBoolean(anf_arg1695);
$step1675 = R.isPyretTrue(anf_if1728)?8:16;
break;
case 8: $al1684 = L[416];
var anf_method_obj1717 = G(ED2,"sequence",L[416]);
$al1684 = L[417];
var anf_method_obj1708 = G(ED2,"para",L[417]);
$step1675 = 9;
$al1684 = L[418];
$field1697 = R.getColonFieldLoc(ED2,"text",L[418]);
if(R.isMethod($field1697)) {
$ans1683 = $field1697.full_meth(ED2,("The tuple annotation "));
} else {
if(!(R.isFunction($field1697))) {
R.ffi.throwNonFunApp(L[418],$field1697);
}
$ans1683 = $field1697.app(("The tuple annotation "));
}
break;
case 9: var anf_arg963 = $ans1683;
$step1675 = 10;
$al1684 = L[419];
$field1700 = R.getColonFieldLoc(ED2,"text",L[419]);
if(R.isMethod($field1700)) {
$ans1683 = $field1700.full_meth(ED2,(" in the "));
} else {
if(!(R.isFunction($field1700))) {
R.ffi.throwNonFunApp(L[419],$field1700);
}
$ans1683 = $field1700.app((" in the "));
}
break;
case 10: var anf_arg1710 = $ans1683;
$step1675 = 11;
$al1684 = L[420];
$field1703 = R.getColonFieldLoc(ED2,"text",L[420]);
if(R.isMethod($field1703)) {
$ans1683 = $field1703.full_meth(ED2,("annotation"));
} else {
if(!(R.isFunction($field1703))) {
R.ffi.throwNonFunApp(L[420],$field1703);
}
$ans1683 = $field1703.app(("annotation"));
}
break;
case 11: var anf_arg307 = $ans1683;
$al1684 = L[421];
var anf_method_obj1704 = G(ED2,"locs",L[421]);
$step1675 = 12;
$al1684 = L[421];
$field1705 = R.getColonFieldLoc(anf_method_obj1704,"make1",L[421]);
if(R.isMethod($field1705)) {
$ans1683 = $field1705.full_meth(anf_method_obj1704,loc1678);
} else {
if(!(R.isFunction($field1705))) {
R.ffi.throwNonFunApp(L[421],$field1705);
}
$ans1683 = $field1705.app(loc1678);
}
break;
case 12: var anf_arg1706 = $ans1683;
$step1675 = 13;
$al1684 = L[422];
$field1707 = R.getColonFieldLoc(ED2,"highlight",L[422]);
if(R.isMethod($field1707)) {
$ans1683 = $field1707.full_meth(ED2,anf_arg307,anf_arg1706,(0));
} else {
if(!(R.isFunction($field1707))) {
R.ffi.throwNonFunApp(L[422],$field1707);
}
$ans1683 = $field1707.app(anf_arg307,anf_arg1706,(0));
}
break;
case 13: var anf_arg1714 = $ans1683;
$step1675 = 14;
$al1684 = L[417];
$field1715 = R.getColonFieldLoc(anf_method_obj1708,"make3",L[417]);
if(R.isMethod($field1715)) {
$ans1683 = $field1715.full_meth(anf_method_obj1708,anf_arg963,anf_arg1710,anf_arg1714);
} else {
if(!(R.isFunction($field1715))) {
R.ffi.throwNonFunApp(L[417],$field1715);
}
$ans1683 = $field1715.app(anf_arg963,anf_arg1710,anf_arg1714);
}
break;
case 14: var anf_arg946 = $ans1683;
$step1675 = 15;
$al1684 = L[423];
$field1716 = R.getColonFieldLoc(ED2,"cmcode",L[423]);
if(R.isMethod($field1716)) {
$ans1683 = $field1716.full_meth(ED2,loc1678);
} else {
if(!(R.isFunction($field1716))) {
R.ffi.throwNonFunApp(L[423],$field1716);
}
$ans1683 = $field1716.app(loc1678);
}
break;
case 15: var anf_arg965 = $ans1683;
$step1675 = 20;
$al1684 = L[416];
$field1720 = R.getColonFieldLoc(anf_method_obj1717,"make2",L[416]);
if(R.isMethod($field1720)) {
$ans1683 = $field1720.full_meth(anf_method_obj1717,anf_arg946,anf_arg965);
} else {
if(!(R.isFunction($field1720))) {
R.ffi.throwNonFunApp(L[416],$field1720);
}
$ans1683 = $field1720.app(anf_arg946,anf_arg965);
}
break;
case 16: $al1684 = L[424];
var anf_method_obj1725 = G(ED2,"para",L[424]);
$step1675 = 17;
$al1684 = L[425];
$field1722 = R.getColonFieldLoc(ED2,"text",L[425]);
if(R.isMethod($field1722)) {
$ans1683 = $field1722.full_meth(ED2,("The tuple annotation, "));
} else {
if(!(R.isFunction($field1722))) {
R.ffi.throwNonFunApp(L[425],$field1722);
}
$ans1683 = $field1722.app(("The tuple annotation, "));
}
break;
case 17: var anf_arg1726 = $ans1683;
$step1675 = 18;
$al1684 = L[426];
$field1723 = R.getColonFieldLoc(ED2,"text",L[426]);
if(R.isMethod($field1723)) {
$ans1683 = $field1723.full_meth(ED2,(", at "));
} else {
if(!(R.isFunction($field1723))) {
R.ffi.throwNonFunApp(L[426],$field1723);
}
$ans1683 = $field1723.app((", at "));
}
break;
case 18: var anf_arg954 = $ans1683;
$step1675 = 19;
$al1684 = L[427];
$field1724 = R.getColonFieldLoc(ED2,"loc",L[427]);
if(R.isMethod($field1724)) {
$ans1683 = $field1724.full_meth(ED2,loc1678);
} else {
if(!(R.isFunction($field1724))) {
R.ffi.throwNonFunApp(L[427],$field1724);
}
$ans1683 = $field1724.app(loc1678);
}
break;
case 19: var anf_arg338 = $ans1683;
$step1675 = 20;
$al1684 = L[424];
$field1727 = R.getColonFieldLoc(anf_method_obj1725,"make3",L[424]);
if(R.isMethod($field1727)) {
$ans1683 = $field1727.full_meth(anf_method_obj1725,anf_arg1726,anf_arg954,anf_arg338);
} else {
if(!(R.isFunction($field1727))) {
R.ffi.throwNonFunApp(L[424],$field1727);
}
$ans1683 = $field1727.app(anf_arg1726,anf_arg954,anf_arg338);
}
break;
case 20: var anf_arg339 = $ans1683;
$al1684 = L[428];
var anf_method_obj1730 = G(ED2,"para",L[428]);
$step1675 = 21;
$al1684 = L[429];
$field1729 = R.getColonFieldLoc(ED2,"text",L[429]);
if(R.isMethod($field1729)) {
$ans1683 = $field1729.full_meth(ED2,("was not satisfied by the value"));
} else {
if(!(R.isFunction($field1729))) {
R.ffi.throwNonFunApp(L[429],$field1729);
}
$ans1683 = $field1729.app(("was not satisfied by the value"));
}
break;
case 21: var anf_arg1731 = $ans1683;
$step1675 = 22;
$al1684 = L[428];
$field1732 = R.getColonFieldLoc(anf_method_obj1730,"make1",L[428]);
if(R.isMethod($field1732)) {
$ans1683 = $field1732.full_meth(anf_method_obj1730,anf_arg1731);
} else {
if(!(R.isFunction($field1732))) {
R.ffi.throwNonFunApp(L[428],$field1732);
}
$ans1683 = $field1732.app(anf_arg1731);
}
break;
case 22: var anf_arg956 = $ans1683;
$al1684 = L[430];
var anf_arg347 = G(self1677,"val",L[430]);
$step1675 = 23;
$al1684 = L[431];
$field1733 = R.getColonFieldLoc(ED2,"embed",L[431]);
if(R.isMethod($field1733)) {
$ans1683 = $field1733.full_meth(ED2,anf_arg347);
} else {
if(!(R.isFunction($field1733))) {
R.ffi.throwNonFunApp(L[431],$field1733);
}
$ans1683 = $field1733.app(anf_arg347);
}
break;
case 23: var anf_arg1897 = $ans1683;
$al1684 = L[432];
var anf_if1901 = R.checkWrapBoolean(from$fail$arg1679);
$step1675 = R.isPyretTrue(anf_if1901)?24:30;
break;
case 24: $step1675 = 25;
$al1684 = L[447];
if(!(R.isFunction(maybe$stack$loc1680))) {
R.ffi.throwNonFunApp($al1684,maybe$stack$loc1680);
}
$ans1683 = maybe$stack$loc1680.app((1),(true));
break;
case 25: var cases1734 = $ans1683;
$step1675 = 26;
$al1684 = L[446];
R._checkAnn(L[446],R.getDotAnn(L[446],"O",O24,"Option"),cases1734);
break;
case 26: var $cases_dispatch1779 = {"some":27,
"none":28};
$al1684 = L[442];
$step1675 = $cases_dispatch1779[cases1734.$name] || 29;
break;
case 27: if(cases1734.$arity !== 1) {
if(cases1734.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[441],1,cases1734.$arity,L[442]);
} else {
R.ffi.throwCasesSingletonErrorC(L[441],true,L[442]);
}
}
$step1675 = 31;
$al1684 = L[443];
var $temp_branch1754 = function($sender1735) {
var $step1755 = 0;
var $ans1756 = D;
var $al1757 = L[433];
try {
if(R.isActivationRecord($sender1735)) {
$step1755 = $sender1735.step;
$al1757 = $sender1735.from;
$ans1756 = $sender1735.ans;
sender1735 = $sender1735.args[0];
anf_method_obj1746 = $sender1735.vars[0];
anf_method_obj1741 = $sender1735.vars[1];
anf_arg984 = $sender1735.vars[2];
anf_method_obj1750 = $sender1735.vars[3];
anf_arg383 = $sender1735.vars[4];
} else {
var sender1735 = $sender1735;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1755) {
case 0: $step1755 = 1;
$al1757 = L[433];
if(!(R.isFunction(src$available1681))) {
R.ffi.throwNonFunApp($al1757,src$available1681);
}
$ans1756 = src$available1681.app(sender1735);
break;
case 1: var anf_arg1736 = $ans1756;
$al1757 = L[433];
var anf_if1753 = R.checkWrapBoolean(anf_arg1736);
$step1755 = R.isPyretTrue(anf_if1753)?2:6;
break;
case 2: $al1757 = L[434];
var anf_method_obj1746 = G(ED2,"sequence",L[434]);
$al1757 = L[435];
var anf_method_obj1741 = G(ED2,"para",L[435]);
$step1755 = 3;
$al1757 = L[436];
$field1758 = R.getColonFieldLoc(ED2,"text",L[436]);
if(R.isMethod($field1758)) {
$ans1756 = $field1758.full_meth(ED2,("which was sent from around"));
} else {
if(!(R.isFunction($field1758))) {
R.ffi.throwNonFunApp(L[436],$field1758);
}
$ans1756 = $field1758.app(("which was sent from around"));
}
break;
case 3: var anf_arg1742 = $ans1756;
$step1755 = 4;
$al1757 = L[435];
$field1759 = R.getColonFieldLoc(anf_method_obj1741,"make1",L[435]);
if(R.isMethod($field1759)) {
$ans1756 = $field1759.full_meth(anf_method_obj1741,anf_arg1742);
} else {
if(!(R.isFunction($field1759))) {
R.ffi.throwNonFunApp(L[435],$field1759);
}
$ans1756 = $field1759.app(anf_arg1742);
}
break;
case 4: var anf_arg984 = $ans1756;
$step1755 = 5;
$al1757 = L[437];
$field1760 = R.getColonFieldLoc(ED2,"cmcode",L[437]);
if(R.isMethod($field1760)) {
$ans1756 = $field1760.full_meth(ED2,sender1735);
} else {
if(!(R.isFunction($field1760))) {
R.ffi.throwNonFunApp(L[437],$field1760);
}
$ans1756 = $field1760.app(sender1735);
}
break;
case 5: var anf_arg986 = $ans1756;
$step1755 = 9;
$al1757 = L[434];
$field1761 = R.getColonFieldLoc(anf_method_obj1746,"make2",L[434]);
if(R.isMethod($field1761)) {
$ans1756 = $field1761.full_meth(anf_method_obj1746,anf_arg984,anf_arg986);
} else {
if(!(R.isFunction($field1761))) {
R.ffi.throwNonFunApp(L[434],$field1761);
}
$ans1756 = $field1761.app(anf_arg984,anf_arg986);
}
break;
case 6: $al1757 = L[438];
var anf_method_obj1750 = G(ED2,"para",L[438]);
$step1755 = 7;
$al1757 = L[439];
$field1762 = R.getColonFieldLoc(ED2,"text",L[439]);
if(R.isMethod($field1762)) {
$ans1756 = $field1762.full_meth(ED2,("which was sent from around "));
} else {
if(!(R.isFunction($field1762))) {
R.ffi.throwNonFunApp(L[439],$field1762);
}
$ans1756 = $field1762.app(("which was sent from around "));
}
break;
case 7: var anf_arg383 = $ans1756;
$step1755 = 8;
$al1757 = L[440];
$field1773 = R.getColonFieldLoc(ED2,"loc",L[440]);
if(R.isMethod($field1773)) {
$ans1756 = $field1773.full_meth(ED2,sender1735);
} else {
if(!(R.isFunction($field1773))) {
R.ffi.throwNonFunApp(L[440],$field1773);
}
$ans1756 = $field1773.app(sender1735);
}
break;
case 8: var anf_arg1751 = $ans1756;
$step1755 = 9;
$al1757 = L[438];
$field1774 = R.getColonFieldLoc(anf_method_obj1750,"make2",L[438]);
if(R.isMethod($field1774)) {
$ans1756 = $field1774.full_meth(anf_method_obj1750,anf_arg383,anf_arg1751);
} else {
if(!(R.isFunction($field1774))) {
R.ffi.throwNonFunApp(L[438],$field1774);
}
$ans1756 = $field1774.app(anf_arg383,anf_arg1751);
}
break;
case 9: ++R.GAS;
return $ans1756;
default: throw "No case numbered " + $step1755 + " in $temp_branch1754";
}
}
} catch($e1775) {
if(R.isCont($e1775) && ($step1755 !== 9)) {
$e1775.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1757,$temp_branch1754,$step1755,[sender1735],[anf_method_obj1746,anf_method_obj1741,anf_arg984,anf_method_obj1750,anf_arg383]);
}
if(R.isPyretException($e1775)) {
$e1775.pyretStack.push($al1757);
}
throw $e1775;
}
};
$ans1683 = cases1734.$app_fields($temp_branch1754,[false]);
break;
case 28: if(cases1734.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[445],false,L[442]);
}
$al1684 = L[444];
var anf_method_obj384 = G(ED2,"sequence",L[444]);
$step1675 = 31;
$al1684 = L[444];
$field1778 = R.getColonFieldLoc(anf_method_obj384,"make0",L[444]);
if(R.isMethod($field1778)) {
$ans1683 = $field1778.full_meth(anf_method_obj384);
} else {
if(!(R.isFunction($field1778))) {
R.ffi.throwNonFunApp(L[444],$field1778);
}
$ans1683 = $field1778.app();
}
break;
case 29: $step1675 = 31;
$al1684 = L[442];
$ans1683 = R.throwNoCasesMatched(L[442],cases1734);
break;
case 30: $al1684 = L[448];
var anf_method_obj1780 = G(ED2,"sequence",L[448]);
$step1675 = 31;
$al1684 = L[448];
$field1781 = R.getColonFieldLoc(anf_method_obj1780,"make0",L[448]);
if(R.isMethod($field1781)) {
$ans1683 = $field1781.full_meth(anf_method_obj1780);
} else {
if(!(R.isFunction($field1781))) {
R.ffi.throwNonFunApp(L[448],$field1781);
}
$ans1683 = $field1781.app();
}
break;
case 31: var anf_arg1899 = $ans1683;
$al1684 = L[449];
var anf_method_obj1892 = G(ED2,"para",L[449]);
$step1675 = 32;
$al1684 = L[450];
$field1784 = R.getColonFieldLoc(ED2,"text",L[450]);
if(R.isMethod($field1784)) {
$ans1683 = $field1784.full_meth(ED2,("because, "));
} else {
if(!(R.isFunction($field1784))) {
R.ffi.throwNonFunApp(L[450],$field1784);
}
$ans1683 = $field1784.app(("because, "));
}
break;
case 32: var anf_arg404 = $ans1683;
var $temp_lam1786 = function($n772,$failure1787) {
var $step1785 = 0;
var $ans1789 = D;
var $al1790 = L[474];
try {
if(R.isActivationRecord($n772)) {
$step1785 = $n772.step;
$al1790 = $n772.from;
$ans1789 = $n772.ans;
n772 = $n772.args[0];
failure1787 = $n772.args[1];
cases1791 = $n772.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[474],2,$t);
}
var n772 = $n772;
var failure1787 = $failure1787;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1785) {
case 0: var cases1791 = failure1787;
$step1785 = 1;
$al1790 = L[473];
R._checkAnn(L[473],FieldFailure1581,cases1791);
break;
case 1: var $cases_dispatch1887 = {"missing-field":2,
"field-failure":3,
"ann-failure":4};
$al1790 = L[467];
$step1785 = $cases_dispatch1887[cases1791.$name] || 5;
break;
case 2: if(cases1791.$arity !== 2) {
if(cases1791.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[466],2,cases1791.$arity,L[467]);
} else {
R.ffi.throwCasesSingletonErrorC(L[466],true,L[467]);
}
}
$step1785 = 6;
$al1790 = L[468];
var $temp_branch1836 = function($fl1792,$ff1802) {
var $step1837 = 0;
var $ans1841 = D;
var $al1842 = L[451];
try {
if(R.isActivationRecord($fl1792)) {
$step1837 = $fl1792.step;
$al1842 = $fl1792.from;
$ans1841 = $fl1792.ans;
fl1792 = $fl1792.args[0];
ff1802 = $fl1792.args[1];
anf_method_obj1814 = $fl1792.vars[0];
anf_arg1000 = $fl1792.vars[1];
anf_arg1001 = $fl1792.vars[2];
anf_arg33 = $fl1792.vars[3];
anf_arg1010 = $fl1792.vars[4];
anf_method_obj1831 = $fl1792.vars[5];
anf_arg58 = $fl1792.vars[6];
anf_arg70 = $fl1792.vars[7];
anf_arg1832 = $fl1792.vars[8];
} else {
var fl1792 = $fl1792;
var ff1802 = $ff1802;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1837) {
case 0: $step1837 = 1;
$al1842 = L[451];
if(!(R.isFunction(src$available1681))) {
R.ffi.throwNonFunApp($al1842,src$available1681);
}
$ans1841 = src$available1681.app(fl1792);
break;
case 1: var anf_arg1793 = $ans1841;
$al1842 = L[451];
var anf_if1835 = R.checkWrapBoolean(anf_arg1793);
$step1837 = R.isPyretTrue(anf_if1835)?2:10;
break;
case 2: $al1842 = L[452];
var anf_method_obj1814 = G(ED2,"sequence",L[452]);
$step1837 = 3;
$al1842 = L[453];
$field1843 = R.getColonFieldLoc(ED2,"text",L[453]);
if(R.isMethod($field1843)) {
$ans1841 = $field1843.full_meth(ED2,("The value was "));
} else {
if(!(R.isFunction($field1843))) {
R.ffi.throwNonFunApp(L[453],$field1843);
}
$ans1841 = $field1843.app(("The value was "));
}
break;
case 3: var anf_arg1000 = $ans1841;
$step1837 = 4;
$al1842 = L[454];
$field1848 = R.getColonFieldLoc(ED2,"text",L[454]);
if(R.isMethod($field1848)) {
$ans1841 = $field1848.full_meth(ED2,("expected"));
} else {
if(!(R.isFunction($field1848))) {
R.ffi.throwNonFunApp(L[454],$field1848);
}
$ans1841 = $field1848.app(("expected"));
}
break;
case 4: var anf_arg1001 = $ans1841;
$al1842 = L[455];
var anf_method_obj1796 = G(ED2,"locs",L[455]);
$step1837 = 5;
$al1842 = L[455];
$field1851 = R.getColonFieldLoc(anf_method_obj1796,"make1",L[455]);
if(R.isMethod($field1851)) {
$ans1841 = $field1851.full_meth(anf_method_obj1796,fl1792);
} else {
if(!(R.isFunction($field1851))) {
R.ffi.throwNonFunApp(L[455],$field1851);
}
$ans1841 = $field1851.app(fl1792);
}
break;
case 5: var anf_arg420 = $ans1841;
$step1837 = 6;
$al1842 = L[456];
$field1855 = R.getColonFieldLoc(ED2,"highlight",L[456]);
if(R.isMethod($field1855)) {
$ans1841 = $field1855.full_meth(ED2,anf_arg1001,anf_arg420,n772);
} else {
if(!(R.isFunction($field1855))) {
R.ffi.throwNonFunApp(L[456],$field1855);
}
$ans1841 = $field1855.app(anf_arg1001,anf_arg420,n772);
}
break;
case 6: var anf_arg33 = $ans1841;
$step1837 = 7;
$al1842 = L[457];
$field1857 = R.getColonFieldLoc(ED2,"text",L[457]);
if(R.isMethod($field1857)) {
$ans1841 = $field1857.full_meth(ED2,(" to have a field named "));
} else {
if(!(R.isFunction($field1857))) {
R.ffi.throwNonFunApp(L[457],$field1857);
}
$ans1841 = $field1857.app((" to have a field named "));
}
break;
case 7: var anf_arg1010 = $ans1841;
$step1837 = 8;
$al1842 = L[458];
$field1859 = R.getColonFieldLoc(ED2,"text",L[458]);
if(R.isMethod($field1859)) {
$ans1841 = $field1859.full_meth(ED2,ff1802);
} else {
if(!(R.isFunction($field1859))) {
R.ffi.throwNonFunApp(L[458],$field1859);
}
$ans1841 = $field1859.app(ff1802);
}
break;
case 8: var anf_arg434 = $ans1841;
$step1837 = 9;
$al1842 = L[459];
$field1860 = R.getColonFieldLoc(ED2,"code",L[459]);
if(R.isMethod($field1860)) {
$ans1841 = $field1860.full_meth(ED2,anf_arg434);
} else {
if(!(R.isFunction($field1860))) {
R.ffi.throwNonFunApp(L[459],$field1860);
}
$ans1841 = $field1860.app(anf_arg434);
}
break;
case 9: var anf_arg53 = $ans1841;
$step1837 = 16;
$al1842 = L[452];
$field1861 = R.getColonFieldLoc(anf_method_obj1814,"make4",L[452]);
if(R.isMethod($field1861)) {
$ans1841 = $field1861.full_meth(anf_method_obj1814,anf_arg1000,anf_arg33,anf_arg1010,anf_arg53);
} else {
if(!(R.isFunction($field1861))) {
R.ffi.throwNonFunApp(L[452],$field1861);
}
$ans1841 = $field1861.app(anf_arg1000,anf_arg33,anf_arg1010,anf_arg53);
}
break;
case 10: $al1842 = L[460];
var anf_method_obj1831 = G(ED2,"sequence",L[460]);
$step1837 = 11;
$al1842 = L[461];
$field1862 = R.getColonFieldLoc(ED2,"text",L[461]);
if(R.isMethod($field1862)) {
$ans1841 = $field1862.full_meth(ED2,("The value was expected to have a field named "));
} else {
if(!(R.isFunction($field1862))) {
R.ffi.throwNonFunApp(L[461],$field1862);
}
$ans1841 = $field1862.app(("The value was expected to have a field named "));
}
break;
case 11: var anf_arg58 = $ans1841;
$step1837 = 12;
$al1842 = L[462];
$field1863 = R.getColonFieldLoc(ED2,"text",L[462]);
if(R.isMethod($field1863)) {
$ans1841 = $field1863.full_meth(ED2,ff1802);
} else {
if(!(R.isFunction($field1863))) {
R.ffi.throwNonFunApp(L[462],$field1863);
}
$ans1841 = $field1863.app(ff1802);
}
break;
case 12: var anf_arg439 = $ans1841;
$step1837 = 13;
$al1842 = L[463];
$field1866 = R.getColonFieldLoc(ED2,"code",L[463]);
if(R.isMethod($field1866)) {
$ans1841 = $field1866.full_meth(ED2,anf_arg439);
} else {
if(!(R.isFunction($field1866))) {
R.ffi.throwNonFunApp(L[463],$field1866);
}
$ans1841 = $field1866.app(anf_arg439);
}
break;
case 13: var anf_arg70 = $ans1841;
$step1837 = 14;
$al1842 = L[464];
$field1869 = R.getColonFieldLoc(ED2,"text",L[464]);
if(R.isMethod($field1869)) {
$ans1841 = $field1869.full_meth(ED2,(" because of the annotation at "));
} else {
if(!(R.isFunction($field1869))) {
R.ffi.throwNonFunApp(L[464],$field1869);
}
$ans1841 = $field1869.app((" because of the annotation at "));
}
break;
case 14: var anf_arg1832 = $ans1841;
$step1837 = 15;
$al1842 = L[465];
$field1876 = R.getColonFieldLoc(ED2,"loc",L[465]);
if(R.isMethod($field1876)) {
$ans1841 = $field1876.full_meth(ED2,fl1792);
} else {
if(!(R.isFunction($field1876))) {
R.ffi.throwNonFunApp(L[465],$field1876);
}
$ans1841 = $field1876.app(fl1792);
}
break;
case 15: var anf_arg451 = $ans1841;
$step1837 = 16;
$al1842 = L[460];
$field1878 = R.getColonFieldLoc(anf_method_obj1831,"make4",L[460]);
if(R.isMethod($field1878)) {
$ans1841 = $field1878.full_meth(anf_method_obj1831,anf_arg58,anf_arg70,anf_arg1832,anf_arg451);
} else {
if(!(R.isFunction($field1878))) {
R.ffi.throwNonFunApp(L[460],$field1878);
}
$ans1841 = $field1878.app(anf_arg58,anf_arg70,anf_arg1832,anf_arg451);
}
break;
case 16: ++R.GAS;
return $ans1841;
default: throw "No case numbered " + $step1837 + " in $temp_branch1836";
}
}
} catch($e1879) {
if(R.isCont($e1879) && ($step1837 !== 16)) {
$e1879.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1842,$temp_branch1836,$step1837,[fl1792,ff1802],[anf_method_obj1814,anf_arg1000,anf_arg1001,anf_arg33,anf_arg1010,anf_method_obj1831,anf_arg58,anf_arg70,anf_arg1832]);
}
if(R.isPyretException($e1879)) {
$e1879.pyretStack.push($al1842);
}
throw $e1879;
}
};
$ans1789 = cases1791.$app_fields($temp_branch1836,[false,false]);
break;
case 3: if(cases1791.$arity !== 3) {
if(cases1791.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[470],3,cases1791.$arity,L[467]);
} else {
R.ffi.throwCasesSingletonErrorC(L[470],true,L[467]);
}
}
var $fn187 = cases1791.$constructor.$fieldNames;
R.derefField(cases1791.dict[$fn187[0]],cases1791.$mut_fields_mask[0],false);
R.derefField(cases1791.dict[$fn187[1]],cases1791.$mut_fields_mask[1],false);
R.derefField(cases1791.dict[$fn187[2]],cases1791.$mut_fields_mask[2],false);
$step1785 = 6;
$al1790 = L[469];
$field1880 = R.getColonFieldLoc(failure1787,"render-reason",L[469]);
if(R.isMethod($field1880)) {
$ans1789 = $field1880.full_meth(failure1787,loc1678,from$fail$arg1679);
} else {
if(!(R.isFunction($field1880))) {
R.ffi.throwNonFunApp(L[469],$field1880);
}
$ans1789 = $field1880.app(loc1678,from$fail$arg1679);
}
break;
case 4: if(cases1791.$arity !== 3) {
if(cases1791.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[472],3,cases1791.$arity,L[467]);
} else {
R.ffi.throwCasesSingletonErrorC(L[472],true,L[467]);
}
}
var $fn187 = cases1791.$constructor.$fieldNames;
R.derefField(cases1791.dict[$fn187[0]],cases1791.$mut_fields_mask[0],false);
R.derefField(cases1791.dict[$fn187[1]],cases1791.$mut_fields_mask[1],false);
R.derefField(cases1791.dict[$fn187[2]],cases1791.$mut_fields_mask[2],false);
$step1785 = 6;
$al1790 = L[471];
$field1884 = R.getColonFieldLoc(failure1787,"render-reason",L[471]);
if(R.isMethod($field1884)) {
$ans1789 = $field1884.full_meth(failure1787,loc1678,from$fail$arg1679);
} else {
if(!(R.isFunction($field1884))) {
R.ffi.throwNonFunApp(L[471],$field1884);
}
$ans1789 = $field1884.app(loc1678,from$fail$arg1679);
}
break;
case 5: $step1785 = 6;
$al1790 = L[467];
$ans1789 = R.throwNoCasesMatched(L[467],cases1791);
break;
case 6: ++R.GAS;
return $ans1789;
default: throw "No case numbered " + $step1785 + " in $temp_lam1786";
}
}
} catch($e1889) {
if(R.isCont($e1889) && ($step1785 !== 6)) {
$e1889.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1790,$temp_lam1786,$step1785,[n772,failure1787],[cases1791]);
}
if(R.isPyretException($e1889)) {
$e1889.pyretStack.push($al1790);
}
throw $e1889;
}
};
var anf_arg71 = R.makeFunction($temp_lam1786,"");
$al1684 = L[475];
var anf_arg72 = G(self1677,"anns-failures",L[475]);
$step1675 = 33;
$al1684 = L[476];
$field1890 = R.getColonFieldLoc(L19,"map_n",L[476]);
if(R.isMethod($field1890)) {
$ans1683 = $field1890.full_meth(L19,anf_arg71,(0),anf_arg72);
} else {
if(!(R.isFunction($field1890))) {
R.ffi.throwNonFunApp(L[476],$field1890);
}
$ans1683 = $field1890.app(anf_arg71,(0),anf_arg72);
}
break;
case 33: var anf_arg77 = $ans1683;
$step1675 = 34;
$al1684 = L[477];
$field1891 = R.getColonFieldLoc(ED2,"bulleted-sequence",L[477]);
if(R.isMethod($field1891)) {
$ans1683 = $field1891.full_meth(ED2,anf_arg77);
} else {
if(!(R.isFunction($field1891))) {
R.ffi.throwNonFunApp(L[477],$field1891);
}
$ans1683 = $field1891.app(anf_arg77);
}
break;
case 34: var anf_arg78 = $ans1683;
$step1675 = 35;
$al1684 = L[449];
$field1893 = R.getColonFieldLoc(anf_method_obj1892,"make2",L[449]);
if(R.isMethod($field1893)) {
$ans1683 = $field1893.full_meth(anf_method_obj1892,anf_arg404,anf_arg78);
} else {
if(!(R.isFunction($field1893))) {
R.ffi.throwNonFunApp(L[449],$field1893);
}
$ans1683 = $field1893.app(anf_arg404,anf_arg78);
}
break;
case 35: var anf_arg79 = $ans1683;
$step1675 = 36;
$al1684 = L[409];
$field1900 = R.getColonFieldLoc(anf_method_obj1895,"make5",L[409]);
if(R.isMethod($field1900)) {
$ans1683 = $field1900.full_meth(anf_method_obj1895,anf_arg339,anf_arg956,anf_arg1897,anf_arg1899,anf_arg79);
} else {
if(!(R.isFunction($field1900))) {
R.ffi.throwNonFunApp(L[409],$field1900);
}
$ans1683 = $field1900.app(anf_arg339,anf_arg956,anf_arg1897,anf_arg1899,anf_arg79);
}
break;
case 36: ++R.GAS;
return $ans1683;
default: throw "No case numbered " + $step1675 + " in $temp_full1676";
}
}
} catch($e1904) {
if(R.isCont($e1904) && ($step1675 !== 36)) {
$e1904.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1684,$temp_full1676,$step1675,[self1677,loc1678,from$fail$arg1679,maybe$stack$loc1680,src$available1681,maybe$ast1682],[anf_method_obj1895,anf_method_obj1692,anf_arg916,anf_arg919,anf_method_obj1717,anf_method_obj1708,anf_arg963,anf_arg1710,anf_arg307,anf_arg946,anf_method_obj1725,anf_arg1726,anf_arg954,anf_arg339,anf_method_obj1730,anf_arg956,anf_arg1897,cases1734,anf_arg1899,anf_method_obj1892,anf_arg404]);
}
if(R.isPyretException($e1904)) {
$e1904.pyretStack.push($al1684);
}
throw $e1904;
}
};
var anf_variant_member2319 = R.makeMethod5($temp_full1676,"render-fancy-reason");
var $temp_full1906 = function($self1907,$loc1908,$from$fail$arg1909) {
var $step1905 = 0;
var $ans1910 = D;
var $al1911 = L[493];
try {
if(R.isActivationRecord($self1907)) {
$step1905 = $self1907.step;
$al1911 = $self1907.from;
$ans1910 = $self1907.ans;
self1907 = $self1907.args[0];
loc1908 = $self1907.args[1];
from$fail$arg1909 = $self1907.args[2];
anf_method_obj1939 = $self1907.vars[0];
anf_method_obj463 = $self1907.vars[1];
anf_arg88 = $self1907.vars[2];
anf_arg90 = $self1907.vars[3];
anf_arg475 = $self1907.vars[4];
anf_arg108 = $self1907.vars[5];
anf_method_obj106 = $self1907.vars[6];
anf_arg116 = $self1907.vars[7];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[493],3,$t);
}
var self1907 = $self1907;
var loc1908 = $loc1908;
var from$fail$arg1909 = $from$fail$arg1909;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1905) {
case 0: $al1911 = L[479];
var anf_method_obj1939 = G(ED2,"error",L[479]);
$al1911 = L[480];
var anf_method_obj463 = G(ED2,"para",L[480]);
$step1905 = 1;
$al1911 = L[481];
$field1912 = R.getColonFieldLoc(ED2,"text",L[481]);
if(R.isMethod($field1912)) {
$ans1910 = $field1912.full_meth(ED2,("The tuple annotation "));
} else {
if(!(R.isFunction($field1912))) {
R.ffi.throwNonFunApp(L[481],$field1912);
}
$ans1910 = $field1912.app(("The tuple annotation "));
}
break;
case 1: var anf_arg88 = $ans1910;
$step1905 = 2;
$al1911 = L[482];
$field1913 = R.getColonFieldLoc(ED2,"text",L[482]);
if(R.isMethod($field1913)) {
$ans1910 = $field1913.full_meth(ED2,("this annotation"));
} else {
if(!(R.isFunction($field1913))) {
R.ffi.throwNonFunApp(L[482],$field1913);
}
$ans1910 = $field1913.app(("this annotation"));
}
break;
case 2: var anf_arg89 = $ans1910;
$step1905 = 3;
$al1911 = L[483];
$field1914 = R.getColonFieldLoc(ED2,"loc-display",L[483]);
if(R.isMethod($field1914)) {
$ans1910 = $field1914.full_meth(ED2,loc1908,("error-highlight"),anf_arg89);
} else {
if(!(R.isFunction($field1914))) {
R.ffi.throwNonFunApp(L[483],$field1914);
}
$ans1910 = $field1914.app(loc1908,("error-highlight"),anf_arg89);
}
break;
case 3: var anf_arg90 = $ans1910;
$step1905 = 4;
$al1911 = L[484];
$field1916 = R.getColonFieldLoc(ED2,"text",L[484]);
if(R.isMethod($field1916)) {
$ans1910 = $field1916.full_meth(ED2,("failed on this value:"));
} else {
if(!(R.isFunction($field1916))) {
R.ffi.throwNonFunApp(L[484],$field1916);
}
$ans1910 = $field1916.app(("failed on this value:"));
}
break;
case 4: var anf_arg1917 = $ans1910;
$step1905 = 5;
$al1911 = L[480];
$field1918 = R.getColonFieldLoc(anf_method_obj463,"make3",L[480]);
if(R.isMethod($field1918)) {
$ans1910 = $field1918.full_meth(anf_method_obj463,anf_arg88,anf_arg90,anf_arg1917);
} else {
if(!(R.isFunction($field1918))) {
R.ffi.throwNonFunApp(L[480],$field1918);
}
$ans1910 = $field1918.app(anf_arg88,anf_arg90,anf_arg1917);
}
break;
case 5: var anf_arg475 = $ans1910;
$al1911 = L[485];
var anf_arg115 = G(self1907,"val",L[485]);
$step1905 = 6;
$al1911 = L[486];
$field1919 = R.getColonFieldLoc(ED2,"embed",L[486]);
if(R.isMethod($field1919)) {
$ans1910 = $field1919.full_meth(ED2,anf_arg115);
} else {
if(!(R.isFunction($field1919))) {
R.ffi.throwNonFunApp(L[486],$field1919);
}
$ans1910 = $field1919.app(anf_arg115);
}
break;
case 6: var anf_arg108 = $ans1910;
$al1911 = L[487];
var anf_method_obj106 = G(ED2,"para",L[487]);
$step1905 = 7;
$al1911 = L[488];
$field1920 = R.getColonFieldLoc(ED2,"text",L[488]);
if(R.isMethod($field1920)) {
$ans1910 = $field1920.full_meth(ED2,("Because:"));
} else {
if(!(R.isFunction($field1920))) {
R.ffi.throwNonFunApp(L[488],$field1920);
}
$ans1910 = $field1920.app(("Because:"));
}
break;
case 7: var anf_arg109 = $ans1910;
$step1905 = 8;
$al1911 = L[487];
$field1921 = R.getColonFieldLoc(anf_method_obj106,"make1",L[487]);
if(R.isMethod($field1921)) {
$ans1910 = $field1921.full_meth(anf_method_obj106,anf_arg109);
} else {
if(!(R.isFunction($field1921))) {
R.ffi.throwNonFunApp(L[487],$field1921);
}
$ans1910 = $field1921.app(anf_arg109);
}
break;
case 8: var anf_arg116 = $ans1910;
$al1911 = L[489];
var anf_method_obj1932 = G(self1907,"anns-failures",L[489]);
var $temp_lam1923 = function($recv_1924) {
var $step1922 = 0;
var $ans1925 = D;
var $al1926 = L[490];
try {
if(R.isActivationRecord($recv_1924)) {
$step1922 = $recv_1924.step;
$al1926 = $recv_1924.from;
$ans1925 = $recv_1924.ans;
recv_1924 = $recv_1924.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[490],1,$t);
}
var recv_1924 = $recv_1924;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1922) {
case 0: $step1922 = 1;
$al1926 = L[490];
$field1929 = R.getColonFieldLoc(recv_1924,"render-reason",L[490]);
if(R.isMethod($field1929)) {
$ans1925 = $field1929.full_meth(recv_1924,loc1908,(false));
} else {
if(!(R.isFunction($field1929))) {
R.ffi.throwNonFunApp(L[490],$field1929);
}
$ans1925 = $field1929.app(loc1908,(false));
}
break;
case 1: ++R.GAS;
return $ans1925;
default: throw "No case numbered " + $step1922 + " in $temp_lam1923";
}
}
} catch($e1930) {
if(R.isCont($e1930) && ($step1922 !== 1)) {
$e1930.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1926,$temp_lam1923,$step1922,[recv_1924],[]);
}
if(R.isPyretException($e1930)) {
$e1930.pyretStack.push($al1926);
}
throw $e1930;
}
};
var anf_arg111 = R.makeFunction($temp_lam1923,"");
$step1905 = 9;
$al1911 = L[491];
$field1935 = R.getColonFieldLoc(anf_method_obj1932,"map",L[491]);
if(R.isMethod($field1935)) {
$ans1910 = $field1935.full_meth(anf_method_obj1932,anf_arg111);
} else {
if(!(R.isFunction($field1935))) {
R.ffi.throwNonFunApp(L[491],$field1935);
}
$ans1910 = $field1935.app(anf_arg111);
}
break;
case 9: var anf_arg117 = $ans1910;
$step1905 = 10;
$al1911 = L[492];
$field1938 = R.getColonFieldLoc(ED2,"bulleted-sequence",L[492]);
if(R.isMethod($field1938)) {
$ans1910 = $field1938.full_meth(ED2,anf_arg117);
} else {
if(!(R.isFunction($field1938))) {
R.ffi.throwNonFunApp(L[492],$field1938);
}
$ans1910 = $field1938.app(anf_arg117);
}
break;
case 10: var anf_arg1942 = $ans1910;
$step1905 = 11;
$al1911 = L[479];
$field1943 = R.getColonFieldLoc(anf_method_obj1939,"make4",L[479]);
if(R.isMethod($field1943)) {
$ans1910 = $field1943.full_meth(anf_method_obj1939,anf_arg475,anf_arg108,anf_arg116,anf_arg1942);
} else {
if(!(R.isFunction($field1943))) {
R.ffi.throwNonFunApp(L[479],$field1943);
}
$ans1910 = $field1943.app(anf_arg475,anf_arg108,anf_arg116,anf_arg1942);
}
break;
case 11: ++R.GAS;
return $ans1910;
default: throw "No case numbered " + $step1905 + " in $temp_full1906";
}
}
} catch($e1944) {
if(R.isCont($e1944) && ($step1905 !== 11)) {
$e1944.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1911,$temp_full1906,$step1905,[self1907,loc1908,from$fail$arg1909],[anf_method_obj1939,anf_method_obj463,anf_arg88,anf_arg90,anf_arg475,anf_arg108,anf_method_obj106,anf_arg116]);
}
if(R.isPyretException($e1944)) {
$e1944.pyretStack.push($al1911);
}
throw $e1944;
}
};
var anf_variant_member2320 = R.makeMethod2($temp_full1906,"render-reason");
var $temp_full1946 = function($self107,$loc1947,$from$fail$arg1948,$maybe$stack$loc1949,$src$available1950,$maybe$ast1951) {
var $step1945 = 0;
var $ans1952 = D;
var $al1953 = L[545];
try {
if(R.isActivationRecord($self107)) {
$step1945 = $self107.step;
$al1953 = $self107.from;
$ans1952 = $self107.ans;
self107 = $self107.args[0];
loc1947 = $self107.args[1];
from$fail$arg1948 = $self107.args[2];
maybe$stack$loc1949 = $self107.args[3];
src$available1950 = $self107.args[4];
maybe$ast1951 = $self107.args[5];
anf_method_obj2050 = $self107.vars[0];
anf_method_obj1972 = $self107.vars[1];
anf_arg510 = $self107.vars[2];
anf_arg516 = $self107.vars[3];
anf_arg1090 = $self107.vars[4];
anf_method_obj1984 = $self107.vars[5];
anf_method_obj1980 = $self107.vars[6];
anf_arg185 = $self107.vars[7];
anf_arg536 = $self107.vars[8];
anf_arg1112 = $self107.vars[9];
anf_method_obj222 = $self107.vars[10];
anf_arg1126 = $self107.vars[11];
anf_arg223 = $self107.vars[12];
anf_arg1135 = $self107.vars[13];
anf_arg1136 = $self107.vars[14];
anf_method_obj242 = $self107.vars[15];
anf_arg244 = $self107.vars[16];
anf_arg567 = $self107.vars[17];
anf_arg2007 = $self107.vars[18];
anf_arg254 = $self107.vars[19];
anf_arg249 = $self107.vars[20];
anf_arg251 = $self107.vars[21];
cases2011 = $self107.vars[22];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[545],6,$t);
}
var self107 = $self107;
var loc1947 = $loc1947;
var from$fail$arg1948 = $from$fail$arg1948;
var maybe$stack$loc1949 = $maybe$stack$loc1949;
var src$available1950 = $src$available1950;
var maybe$ast1951 = $maybe$ast1951;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1945) {
case 0: $al1953 = L[494];
var anf_method_obj2050 = G(ED2,"error",L[494]);
$step1945 = 1;
$al1953 = L[495];
$field1954 = R.getColonFieldLoc(loc1947,"is-builtin",L[495]);
if(R.isMethod($field1954)) {
$ans1952 = $field1954.full_meth(loc1947);
} else {
if(!(R.isFunction($field1954))) {
R.ffi.throwNonFunApp(L[495],$field1954);
}
$ans1952 = $field1954.app();
}
break;
case 1: var anf_arg503 = $ans1952;
$al1953 = L[495];
var anf_if2054 = R.checkWrapBoolean(anf_arg503);
$step1945 = R.isPyretTrue(anf_if2054)?2:8;
break;
case 2: $al1953 = L[496];
var anf_method_obj1972 = G(ED2,"para",L[496]);
$step1945 = 3;
$al1953 = L[497];
$field1955 = R.getColonFieldLoc(ED2,"text",L[497]);
if(R.isMethod($field1955)) {
$ans1952 = $field1955.full_meth(ED2,("A tuple annotation, "));
} else {
if(!(R.isFunction($field1955))) {
R.ffi.throwNonFunApp(L[497],$field1955);
}
$ans1952 = $field1955.app(("A tuple annotation, "));
}
break;
case 3: var anf_arg510 = $ans1952;
$al1953 = L[498];
var anf_arg511 = G(self107,"name",L[498]);
$step1945 = 4;
$al1953 = L[499];
$field1966 = R.getColonFieldLoc(ED2,"text",L[499]);
if(R.isMethod($field1966)) {
$ans1952 = $field1966.full_meth(ED2,anf_arg511);
} else {
if(!(R.isFunction($field1966))) {
R.ffi.throwNonFunApp(L[499],$field1966);
}
$ans1952 = $field1966.app(anf_arg511);
}
break;
case 4: var anf_arg167 = $ans1952;
$step1945 = 5;
$al1953 = L[500];
$field1967 = R.getColonFieldLoc(ED2,"code",L[500]);
if(R.isMethod($field1967)) {
$ans1952 = $field1967.full_meth(ED2,anf_arg167);
} else {
if(!(R.isFunction($field1967))) {
R.ffi.throwNonFunApp(L[500],$field1967);
}
$ans1952 = $field1967.app(anf_arg167);
}
break;
case 5: var anf_arg516 = $ans1952;
$step1945 = 6;
$al1953 = L[501];
$field1968 = R.getColonFieldLoc(ED2,"text",L[501]);
if(R.isMethod($field1968)) {
$ans1952 = $field1968.full_meth(ED2,(", in "));
} else {
if(!(R.isFunction($field1968))) {
R.ffi.throwNonFunApp(L[501],$field1968);
}
$ans1952 = $field1968.app((", in "));
}
break;
case 6: var anf_arg1090 = $ans1952;
$step1945 = 7;
$al1953 = L[502];
$field1971 = R.getColonFieldLoc(ED2,"loc",L[502]);
if(R.isMethod($field1971)) {
$ans1952 = $field1971.full_meth(ED2,loc1947);
} else {
if(!(R.isFunction($field1971))) {
R.ffi.throwNonFunApp(L[502],$field1971);
}
$ans1952 = $field1971.app(loc1947);
}
break;
case 7: var anf_arg182 = $ans1952;
$step1945 = 23;
$al1953 = L[496];
$field1974 = R.getColonFieldLoc(anf_method_obj1972,"make4",L[496]);
if(R.isMethod($field1974)) {
$ans1952 = $field1974.full_meth(anf_method_obj1972,anf_arg510,anf_arg516,anf_arg1090,anf_arg182);
} else {
if(!(R.isFunction($field1974))) {
R.ffi.throwNonFunApp(L[496],$field1974);
}
$ans1952 = $field1974.app(anf_arg510,anf_arg516,anf_arg1090,anf_arg182);
}
break;
case 8: $step1945 = 9;
$al1953 = L[503];
if(!(R.isFunction(src$available1950))) {
R.ffi.throwNonFunApp($al1953,src$available1950);
}
$ans1952 = src$available1950.app(loc1947);
break;
case 9: var anf_arg1094 = $ans1952;
$al1953 = L[503];
var anf_if2000 = R.checkWrapBoolean(anf_arg1094);
$step1945 = R.isPyretTrue(anf_if2000)?10:17;
break;
case 10: $al1953 = L[504];
var anf_method_obj1984 = G(ED2,"sequence",L[504]);
$al1953 = L[505];
var anf_method_obj1980 = G(ED2,"para",L[505]);
$step1945 = 11;
$al1953 = L[506];
$field1976 = R.getColonFieldLoc(ED2,"text",L[506]);
if(R.isMethod($field1976)) {
$ans1952 = $field1976.full_meth(ED2,("The "));
} else {
if(!(R.isFunction($field1976))) {
R.ffi.throwNonFunApp(L[506],$field1976);
}
$ans1952 = $field1976.app(("The "));
}
break;
case 11: var anf_arg185 = $ans1952;
$step1945 = 12;
$al1953 = L[507];
$field1977 = R.getColonFieldLoc(ED2,"text",L[507]);
if(R.isMethod($field1977)) {
$ans1952 = $field1977.full_meth(ED2,("tuple annotation"));
} else {
if(!(R.isFunction($field1977))) {
R.ffi.throwNonFunApp(L[507],$field1977);
}
$ans1952 = $field1977.app(("tuple annotation"));
}
break;
case 12: var anf_arg536 = $ans1952;
$al1953 = L[508];
var anf_method_obj198 = G(ED2,"locs",L[508]);
$step1945 = 13;
$al1953 = L[508];
$field1978 = R.getColonFieldLoc(anf_method_obj198,"make1",L[508]);
if(R.isMethod($field1978)) {
$ans1952 = $field1978.full_meth(anf_method_obj198,loc1947);
} else {
if(!(R.isFunction($field1978))) {
R.ffi.throwNonFunApp(L[508],$field1978);
}
$ans1952 = $field1978.app(loc1947);
}
break;
case 13: var anf_arg200 = $ans1952;
$step1945 = 14;
$al1953 = L[509];
$field1979 = R.getColonFieldLoc(ED2,"highlight",L[509]);
if(R.isMethod($field1979)) {
$ans1952 = $field1979.full_meth(ED2,anf_arg536,anf_arg200,(0));
} else {
if(!(R.isFunction($field1979))) {
R.ffi.throwNonFunApp(L[509],$field1979);
}
$ans1952 = $field1979.app(anf_arg536,anf_arg200,(0));
}
break;
case 14: var anf_arg541 = $ans1952;
$step1945 = 15;
$al1953 = L[505];
$field1982 = R.getColonFieldLoc(anf_method_obj1980,"make2",L[505]);
if(R.isMethod($field1982)) {
$ans1952 = $field1982.full_meth(anf_method_obj1980,anf_arg185,anf_arg541);
} else {
if(!(R.isFunction($field1982))) {
R.ffi.throwNonFunApp(L[505],$field1982);
}
$ans1952 = $field1982.app(anf_arg185,anf_arg541);
}
break;
case 15: var anf_arg1112 = $ans1952;
$step1945 = 16;
$al1953 = L[510];
$field1983 = R.getColonFieldLoc(ED2,"cmcode",L[510]);
if(R.isMethod($field1983)) {
$ans1952 = $field1983.full_meth(ED2,loc1947);
} else {
if(!(R.isFunction($field1983))) {
R.ffi.throwNonFunApp(L[510],$field1983);
}
$ans1952 = $field1983.app(loc1947);
}
break;
case 16: var anf_arg1985 = $ans1952;
$step1945 = 23;
$al1953 = L[504];
$field1991 = R.getColonFieldLoc(anf_method_obj1984,"make2",L[504]);
if(R.isMethod($field1991)) {
$ans1952 = $field1991.full_meth(anf_method_obj1984,anf_arg1112,anf_arg1985);
} else {
if(!(R.isFunction($field1991))) {
R.ffi.throwNonFunApp(L[504],$field1991);
}
$ans1952 = $field1991.app(anf_arg1112,anf_arg1985);
}
break;
case 17: $al1953 = L[511];
var anf_method_obj222 = G(ED2,"para",L[511]);
$step1945 = 18;
$al1953 = L[512];
$field1992 = R.getColonFieldLoc(ED2,"text",L[512]);
if(R.isMethod($field1992)) {
$ans1952 = $field1992.full_meth(ED2,("The tuple annotation, "));
} else {
if(!(R.isFunction($field1992))) {
R.ffi.throwNonFunApp(L[512],$field1992);
}
$ans1952 = $field1992.app(("The tuple annotation, "));
}
break;
case 18: var anf_arg1126 = $ans1952;
$al1953 = L[513];
var anf_arg217 = G(self107,"name",L[513]);
$step1945 = 19;
$al1953 = L[514];
$field1993 = R.getColonFieldLoc(ED2,"text",L[514]);
if(R.isMethod($field1993)) {
$ans1952 = $field1993.full_meth(ED2,anf_arg217);
} else {
if(!(R.isFunction($field1993))) {
R.ffi.throwNonFunApp(L[514],$field1993);
}
$ans1952 = $field1993.app(anf_arg217);
}
break;
case 19: var anf_arg220 = $ans1952;
$step1945 = 20;
$al1953 = L[515];
$field1994 = R.getColonFieldLoc(ED2,"code",L[515]);
if(R.isMethod($field1994)) {
$ans1952 = $field1994.full_meth(ED2,anf_arg220);
} else {
if(!(R.isFunction($field1994))) {
R.ffi.throwNonFunApp(L[515],$field1994);
}
$ans1952 = $field1994.app(anf_arg220);
}
break;
case 20: var anf_arg223 = $ans1952;
$step1945 = 21;
$al1953 = L[516];
$field1996 = R.getColonFieldLoc(ED2,"text",L[516]);
if(R.isMethod($field1996)) {
$ans1952 = $field1996.full_meth(ED2,(", at "));
} else {
if(!(R.isFunction($field1996))) {
R.ffi.throwNonFunApp(L[516],$field1996);
}
$ans1952 = $field1996.app((", at "));
}
break;
case 21: var anf_arg1135 = $ans1952;
$step1945 = 22;
$al1953 = L[517];
$field1997 = R.getColonFieldLoc(ED2,"loc",L[517]);
if(R.isMethod($field1997)) {
$ans1952 = $field1997.full_meth(ED2,loc1947);
} else {
if(!(R.isFunction($field1997))) {
R.ffi.throwNonFunApp(L[517],$field1997);
}
$ans1952 = $field1997.app(loc1947);
}
break;
case 22: var anf_arg231 = $ans1952;
$step1945 = 23;
$al1953 = L[511];
$field1999 = R.getColonFieldLoc(anf_method_obj222,"make4",L[511]);
if(R.isMethod($field1999)) {
$ans1952 = $field1999.full_meth(anf_method_obj222,anf_arg1126,anf_arg223,anf_arg1135,anf_arg231);
} else {
if(!(R.isFunction($field1999))) {
R.ffi.throwNonFunApp(L[511],$field1999);
}
$ans1952 = $field1999.app(anf_arg1126,anf_arg223,anf_arg1135,anf_arg231);
}
break;
case 23: var anf_arg1136 = $ans1952;
$al1953 = L[518];
var anf_method_obj242 = G(ED2,"para",L[518]);
$step1945 = 24;
$al1953 = L[519];
$field2001 = R.getColonFieldLoc(ED2,"text",L[519]);
if(R.isMethod($field2001)) {
$ans1952 = $field2001.full_meth(ED2,("which expects a tuple containing exactly "));
} else {
if(!(R.isFunction($field2001))) {
R.ffi.throwNonFunApp(L[519],$field2001);
}
$ans1952 = $field2001.app(("which expects a tuple containing exactly "));
}
break;
case 24: var anf_arg244 = $ans1952;
$al1953 = L[520];
var anf_arg1149 = G(self107,"annLength",L[520]);
$step1945 = 25;
$al1953 = L[521];
$field2002 = R.getColonFieldLoc(ED2,"ed-components",L[521]);
if(R.isMethod($field2002)) {
$ans1952 = $field2002.full_meth(ED2,anf_arg1149);
} else {
if(!(R.isFunction($field2002))) {
R.ffi.throwNonFunApp(L[521],$field2002);
}
$ans1952 = $field2002.app(anf_arg1149);
}
break;
case 25: var anf_arg567 = $ans1952;
$step1945 = 26;
$al1953 = L[522];
$field2003 = R.getColonFieldLoc(ED2,"text",L[522]);
if(R.isMethod($field2003)) {
$ans1952 = $field2003.full_meth(ED2,(" was not satisfied by the "));
} else {
if(!(R.isFunction($field2003))) {
R.ffi.throwNonFunApp(L[522],$field2003);
}
$ans1952 = $field2003.app((" was not satisfied by the "));
}
break;
case 26: var anf_arg2007 = $ans1952;
$al1953 = L[523];
var anf_arg246 = G(self107,"tupleLength",L[523]);
$step1945 = 27;
$al1953 = L[524];
$field2004 = R.getColonFieldLoc(ED2,"embed",L[524]);
if(R.isMethod($field2004)) {
$ans1952 = $field2004.full_meth(ED2,anf_arg246);
} else {
if(!(R.isFunction($field2004))) {
R.ffi.throwNonFunApp(L[524],$field2004);
}
$ans1952 = $field2004.app(anf_arg246);
}
break;
case 27: var anf_arg254 = $ans1952;
$step1945 = 28;
$al1953 = L[525];
$field2006 = R.getColonFieldLoc(ED2,"text",L[525]);
if(R.isMethod($field2006)) {
$ans1952 = $field2006.full_meth(ED2,(" component tuple:"));
} else {
if(!(R.isFunction($field2006))) {
R.ffi.throwNonFunApp(L[525],$field2006);
}
$ans1952 = $field2006.app((" component tuple:"));
}
break;
case 28: var anf_arg2008 = $ans1952;
$step1945 = 29;
$al1953 = L[518];
$field2009 = R.getColonFieldLoc(anf_method_obj242,"make5",L[518]);
if(R.isMethod($field2009)) {
$ans1952 = $field2009.full_meth(anf_method_obj242,anf_arg244,anf_arg567,anf_arg2007,anf_arg254,anf_arg2008);
} else {
if(!(R.isFunction($field2009))) {
R.ffi.throwNonFunApp(L[518],$field2009);
}
$ans1952 = $field2009.app(anf_arg244,anf_arg567,anf_arg2007,anf_arg254,anf_arg2008);
}
break;
case 29: var anf_arg249 = $ans1952;
$al1953 = L[526];
var anf_arg256 = G(self107,"val",L[526]);
$step1945 = 30;
$al1953 = L[527];
$field2010 = R.getColonFieldLoc(ED2,"embed",L[527]);
if(R.isMethod($field2010)) {
$ans1952 = $field2010.full_meth(ED2,anf_arg256);
} else {
if(!(R.isFunction($field2010))) {
R.ffi.throwNonFunApp(L[527],$field2010);
}
$ans1952 = $field2010.app(anf_arg256);
}
break;
case 30: var anf_arg251 = $ans1952;
$al1953 = L[528];
var anf_if2053 = R.checkWrapBoolean(from$fail$arg1948);
$step1945 = R.isPyretTrue(anf_if2053)?31:37;
break;
case 31: $step1945 = 32;
$al1953 = L[543];
if(!(R.isFunction(maybe$stack$loc1949))) {
R.ffi.throwNonFunApp($al1953,maybe$stack$loc1949);
}
$ans1952 = maybe$stack$loc1949.app((1),(true));
break;
case 32: var cases2011 = $ans1952;
$step1945 = 33;
$al1953 = L[542];
R._checkAnn(L[542],R.getDotAnn(L[542],"O",O24,"Option"),cases2011);
break;
case 33: var $cases_dispatch2048 = {"some":34,
"none":35};
$al1953 = L[538];
$step1945 = $cases_dispatch2048[cases2011.$name] || 36;
break;
case 34: if(cases2011.$arity !== 1) {
if(cases2011.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[537],1,cases2011.$arity,L[538]);
} else {
R.ffi.throwCasesSingletonErrorC(L[537],true,L[538]);
}
}
$step1945 = 38;
$al1953 = L[539];
var $temp_branch2029 = function($sender2012) {
var $step2030 = 0;
var $ans2031 = D;
var $al2032 = L[529];
try {
if(R.isActivationRecord($sender2012)) {
$step2030 = $sender2012.step;
$al2032 = $sender2012.from;
$ans2031 = $sender2012.ans;
sender2012 = $sender2012.args[0];
anf_method_obj1209 = $sender2012.vars[0];
anf_method_obj2014 = $sender2012.vars[1];
anf_arg283 = $sender2012.vars[2];
anf_method_obj2023 = $sender2012.vars[3];
anf_arg269 = $sender2012.vars[4];
} else {
var sender2012 = $sender2012;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2030) {
case 0: $step2030 = 1;
$al2032 = L[529];
if(!(R.isFunction(src$available1950))) {
R.ffi.throwNonFunApp($al2032,src$available1950);
}
$ans2031 = src$available1950.app(sender2012);
break;
case 1: var anf_arg1171 = $ans2031;
$al2032 = L[529];
var anf_if2028 = R.checkWrapBoolean(anf_arg1171);
$step2030 = R.isPyretTrue(anf_if2028)?2:6;
break;
case 2: $al2032 = L[530];
var anf_method_obj1209 = G(ED2,"sequence",L[530]);
$al2032 = L[531];
var anf_method_obj2014 = G(ED2,"para",L[531]);
$step2030 = 3;
$al2032 = L[532];
$field2033 = R.getColonFieldLoc(ED2,"text",L[532]);
if(R.isMethod($field2033)) {
$ans2031 = $field2033.full_meth(ED2,("which was sent from around"));
} else {
if(!(R.isFunction($field2033))) {
R.ffi.throwNonFunApp(L[532],$field2033);
}
$ans2031 = $field2033.app(("which was sent from around"));
}
break;
case 3: var anf_arg261 = $ans2031;
$step2030 = 4;
$al2032 = L[531];
$field2034 = R.getColonFieldLoc(anf_method_obj2014,"make1",L[531]);
if(R.isMethod($field2034)) {
$ans2031 = $field2034.full_meth(anf_method_obj2014,anf_arg261);
} else {
if(!(R.isFunction($field2034))) {
R.ffi.throwNonFunApp(L[531],$field2034);
}
$ans2031 = $field2034.app(anf_arg261);
}
break;
case 4: var anf_arg283 = $ans2031;
$step2030 = 5;
$al2032 = L[533];
$field2035 = R.getColonFieldLoc(ED2,"cmcode",L[533]);
if(R.isMethod($field2035)) {
$ans2031 = $field2035.full_meth(ED2,sender2012);
} else {
if(!(R.isFunction($field2035))) {
R.ffi.throwNonFunApp(L[533],$field2035);
}
$ans2031 = $field2035.app(sender2012);
}
break;
case 5: var anf_arg1205 = $ans2031;
$step2030 = 9;
$al2032 = L[530];
$field2036 = R.getColonFieldLoc(anf_method_obj1209,"make2",L[530]);
if(R.isMethod($field2036)) {
$ans2031 = $field2036.full_meth(anf_method_obj1209,anf_arg283,anf_arg1205);
} else {
if(!(R.isFunction($field2036))) {
R.ffi.throwNonFunApp(L[530],$field2036);
}
$ans2031 = $field2036.app(anf_arg283,anf_arg1205);
}
break;
case 6: $al2032 = L[534];
var anf_method_obj2023 = G(ED2,"para",L[534]);
$step2030 = 7;
$al2032 = L[535];
$field2038 = R.getColonFieldLoc(ED2,"text",L[535]);
if(R.isMethod($field2038)) {
$ans2031 = $field2038.full_meth(ED2,("which was sent from around "));
} else {
if(!(R.isFunction($field2038))) {
R.ffi.throwNonFunApp(L[535],$field2038);
}
$ans2031 = $field2038.app(("which was sent from around "));
}
break;
case 7: var anf_arg269 = $ans2031;
$step2030 = 8;
$al2032 = L[536];
$field2039 = R.getColonFieldLoc(ED2,"loc",L[536]);
if(R.isMethod($field2039)) {
$ans2031 = $field2039.full_meth(ED2,sender2012);
} else {
if(!(R.isFunction($field2039))) {
R.ffi.throwNonFunApp(L[536],$field2039);
}
$ans2031 = $field2039.app(sender2012);
}
break;
case 8: var anf_arg1211 = $ans2031;
$step2030 = 9;
$al2032 = L[534];
$field2042 = R.getColonFieldLoc(anf_method_obj2023,"make2",L[534]);
if(R.isMethod($field2042)) {
$ans2031 = $field2042.full_meth(anf_method_obj2023,anf_arg269,anf_arg1211);
} else {
if(!(R.isFunction($field2042))) {
R.ffi.throwNonFunApp(L[534],$field2042);
}
$ans2031 = $field2042.app(anf_arg269,anf_arg1211);
}
break;
case 9: ++R.GAS;
return $ans2031;
default: throw "No case numbered " + $step2030 + " in $temp_branch2029";
}
}
} catch($e2044) {
if(R.isCont($e2044) && ($step2030 !== 9)) {
$e2044.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2032,$temp_branch2029,$step2030,[sender2012],[anf_method_obj1209,anf_method_obj2014,anf_arg283,anf_method_obj2023,anf_arg269]);
}
if(R.isPyretException($e2044)) {
$e2044.pyretStack.push($al2032);
}
throw $e2044;
}
};
$ans1952 = cases2011.$app_fields($temp_branch2029,[false]);
break;
case 35: if(cases2011.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[541],false,L[538]);
}
$al1953 = L[540];
var anf_method_obj2045 = G(ED2,"sequence",L[540]);
$step1945 = 38;
$al1953 = L[540];
$field2047 = R.getColonFieldLoc(anf_method_obj2045,"make0",L[540]);
if(R.isMethod($field2047)) {
$ans1952 = $field2047.full_meth(anf_method_obj2045);
} else {
if(!(R.isFunction($field2047))) {
R.ffi.throwNonFunApp(L[540],$field2047);
}
$ans1952 = $field2047.app();
}
break;
case 36: $step1945 = 38;
$al1953 = L[538];
$ans1952 = R.throwNoCasesMatched(L[538],cases2011);
break;
case 37: $al1953 = L[544];
var anf_method_obj1227 = G(ED2,"sequence",L[544]);
$step1945 = 38;
$al1953 = L[544];
$field2049 = R.getColonFieldLoc(anf_method_obj1227,"make0",L[544]);
if(R.isMethod($field2049)) {
$ans1952 = $field2049.full_meth(anf_method_obj1227);
} else {
if(!(R.isFunction($field2049))) {
R.ffi.throwNonFunApp(L[544],$field2049);
}
$ans1952 = $field2049.app();
}
break;
case 38: var anf_arg275 = $ans1952;
$step1945 = 39;
$al1953 = L[494];
$field2052 = R.getColonFieldLoc(anf_method_obj2050,"make4",L[494]);
if(R.isMethod($field2052)) {
$ans1952 = $field2052.full_meth(anf_method_obj2050,anf_arg1136,anf_arg249,anf_arg251,anf_arg275);
} else {
if(!(R.isFunction($field2052))) {
R.ffi.throwNonFunApp(L[494],$field2052);
}
$ans1952 = $field2052.app(anf_arg1136,anf_arg249,anf_arg251,anf_arg275);
}
break;
case 39: ++R.GAS;
return $ans1952;
default: throw "No case numbered " + $step1945 + " in $temp_full1946";
}
}
} catch($e2055) {
if(R.isCont($e2055) && ($step1945 !== 39)) {
$e2055.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1953,$temp_full1946,$step1945,[self107,loc1947,from$fail$arg1948,maybe$stack$loc1949,src$available1950,maybe$ast1951],[anf_method_obj2050,anf_method_obj1972,anf_arg510,anf_arg516,anf_arg1090,anf_method_obj1984,anf_method_obj1980,anf_arg185,anf_arg536,anf_arg1112,anf_method_obj222,anf_arg1126,anf_arg223,anf_arg1135,anf_arg1136,anf_method_obj242,anf_arg244,anf_arg567,anf_arg2007,anf_arg254,anf_arg249,anf_arg251,cases2011]);
}
if(R.isPyretException($e2055)) {
$e2055.pyretStack.push($al1953);
}
throw $e2055;
}
};
var anf_variant_member2330 = R.makeMethod5($temp_full1946,"render-fancy-reason");
var $temp_full2057 = function($self2058,$loc2059,$fail$from$arg2060) {
var $step2056 = 0;
var $ans2061 = D;
var $al2062 = L[557];
try {
if(R.isActivationRecord($self2058)) {
$step2056 = $self2058.step;
$al2062 = $self2058.from;
$ans2061 = $self2058.ans;
self2058 = $self2058.args[0];
loc2059 = $self2058.args[1];
fail$from$arg2060 = $self2058.args[2];
anf_method_obj2078 = $self2058.vars[0];
anf_method_obj2072 = $self2058.vars[1];
anf_arg285 = $self2058.vars[2];
anf_arg1230 = $self2058.vars[3];
anf_arg1234 = $self2058.vars[4];
anf_arg304 = $self2058.vars[5];
anf_method_obj297 = $self2058.vars[6];
anf_arg298 = $self2058.vars[7];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[557],3,$t);
}
var self2058 = $self2058;
var loc2059 = $loc2059;
var fail$from$arg2060 = $fail$from$arg2060;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2056) {
case 0: $al2062 = L[546];
var anf_method_obj2078 = G(ED2,"error",L[546]);
$al2062 = L[547];
var anf_method_obj2072 = G(ED2,"para",L[547]);
$step2056 = 1;
$al2062 = L[548];
$field2063 = R.getColonFieldLoc(ED2,"text",L[548]);
if(R.isMethod($field2063)) {
$ans2061 = $field2063.full_meth(ED2,("The tuple annotation at "));
} else {
if(!(R.isFunction($field2063))) {
R.ffi.throwNonFunApp(L[548],$field2063);
}
$ans2061 = $field2063.app(("The tuple annotation at "));
}
break;
case 1: var anf_arg285 = $ans2061;
$step2056 = 2;
$al2062 = L[549];
$field2064 = R.getColonFieldLoc(ED2,"embed",L[549]);
if(R.isMethod($field2064)) {
$ans2061 = $field2064.full_meth(ED2,loc2059);
} else {
if(!(R.isFunction($field2064))) {
R.ffi.throwNonFunApp(L[549],$field2064);
}
$ans2061 = $field2064.app(loc2059);
}
break;
case 2: var anf_arg1230 = $ans2061;
$step2056 = 3;
$al2062 = L[550];
$field2065 = R.getColonFieldLoc(ED2,"text",L[550]);
if(R.isMethod($field2065)) {
$ans2061 = $field2065.full_meth(ED2,(" expected the given tuple to be of length "));
} else {
if(!(R.isFunction($field2065))) {
R.ffi.throwNonFunApp(L[550],$field2065);
}
$ans2061 = $field2065.app((" expected the given tuple to be of length "));
}
break;
case 3: var anf_arg1234 = $ans2061;
$al2062 = L[551];
var anf_arg2068 = G(self2058,"annLength",L[551]);
$step2056 = 4;
$al2062 = L[552];
$field2071 = R.getColonFieldLoc(ED2,"embed",L[552]);
if(R.isMethod($field2071)) {
$ans2061 = $field2071.full_meth(ED2,anf_arg2068);
} else {
if(!(R.isFunction($field2071))) {
R.ffi.throwNonFunApp(L[552],$field2071);
}
$ans2061 = $field2071.app(anf_arg2068);
}
break;
case 4: var anf_arg295 = $ans2061;
$step2056 = 5;
$al2062 = L[547];
$field2073 = R.getColonFieldLoc(anf_method_obj2072,"make4",L[547]);
if(R.isMethod($field2073)) {
$ans2061 = $field2073.full_meth(anf_method_obj2072,anf_arg285,anf_arg1230,anf_arg1234,anf_arg295);
} else {
if(!(R.isFunction($field2073))) {
R.ffi.throwNonFunApp(L[547],$field2073);
}
$ans2061 = $field2073.app(anf_arg285,anf_arg1230,anf_arg1234,anf_arg295);
}
break;
case 5: var anf_arg304 = $ans2061;
$al2062 = L[553];
var anf_method_obj297 = G(ED2,"para",L[553]);
$step2056 = 6;
$al2062 = L[554];
$field2074 = R.getColonFieldLoc(ED2,"text",L[554]);
if(R.isMethod($field2074)) {
$ans2061 = $field2074.full_meth(ED2,("The given tuple had the incorrect length of "));
} else {
if(!(R.isFunction($field2074))) {
R.ffi.throwNonFunApp(L[554],$field2074);
}
$ans2061 = $field2074.app(("The given tuple had the incorrect length of "));
}
break;
case 6: var anf_arg298 = $ans2061;
$al2062 = L[555];
var anf_arg305 = G(self2058,"tupleLength",L[555]);
$step2056 = 7;
$al2062 = L[556];
$field2076 = R.getColonFieldLoc(ED2,"embed",L[556]);
if(R.isMethod($field2076)) {
$ans2061 = $field2076.full_meth(ED2,anf_arg305);
} else {
if(!(R.isFunction($field2076))) {
R.ffi.throwNonFunApp(L[556],$field2076);
}
$ans2061 = $field2076.app(anf_arg305);
}
break;
case 7: var anf_arg301 = $ans2061;
$step2056 = 8;
$al2062 = L[553];
$field2077 = R.getColonFieldLoc(anf_method_obj297,"make2",L[553]);
if(R.isMethod($field2077)) {
$ans2061 = $field2077.full_meth(anf_method_obj297,anf_arg298,anf_arg301);
} else {
if(!(R.isFunction($field2077))) {
R.ffi.throwNonFunApp(L[553],$field2077);
}
$ans2061 = $field2077.app(anf_arg298,anf_arg301);
}
break;
case 8: var anf_arg306 = $ans2061;
$step2056 = 9;
$al2062 = L[546];
$field2080 = R.getColonFieldLoc(anf_method_obj2078,"make2",L[546]);
if(R.isMethod($field2080)) {
$ans2061 = $field2080.full_meth(anf_method_obj2078,anf_arg304,anf_arg306);
} else {
if(!(R.isFunction($field2080))) {
R.ffi.throwNonFunApp(L[546],$field2080);
}
$ans2061 = $field2080.app(anf_arg304,anf_arg306);
}
break;
case 9: ++R.GAS;
return $ans2061;
default: throw "No case numbered " + $step2056 + " in $temp_full2057";
}
}
} catch($e2082) {
if(R.isCont($e2082) && ($step2056 !== 9)) {
$e2082.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2062,$temp_full2057,$step2056,[self2058,loc2059,fail$from$arg2060],[anf_method_obj2078,anf_method_obj2072,anf_arg285,anf_arg1230,anf_arg1234,anf_arg304,anf_method_obj297,anf_arg298]);
}
if(R.isPyretException($e2082)) {
$e2082.pyretStack.push($al2062);
}
throw $e2082;
}
};
var anf_variant_member6105 = R.makeMethod2($temp_full2057,"render-reason");
var $temp_full2084 = function($self2085,$loc2086,$from$fail$arg2087,$maybe$stack$loc2088,$src$available2089,$maybe$ast2090) {
var $step2083 = 0;
var $ans2091 = D;
var $al2092 = L[636];
try {
if(R.isActivationRecord($self2085)) {
$step2083 = $self2085.step;
$al2092 = $self2085.from;
$ans2091 = $self2085.ans;
self2085 = $self2085.args[0];
loc2086 = $self2085.args[1];
from$fail$arg2087 = $self2085.args[2];
maybe$stack$loc2088 = $self2085.args[3];
src$available2089 = $self2085.args[4];
maybe$ast2090 = $self2085.args[5];
anf_method_obj1271 = $self2085.vars[0];
anf_method_obj2121 = $self2085.vars[1];
anf_arg322 = $self2085.vars[2];
anf_method_obj2108 = $self2085.vars[3];
anf_arg1280 = $self2085.vars[4];
anf_arg2111 = $self2085.vars[5];
anf_arg328 = $self2085.vars[6];
anf_arg358 = $self2085.vars[7];
anf_arg349 = $self2085.vars[8];
anf_method_obj2145 = $self2085.vars[9];
anf_array2146 = $self2085.vars[10];
anf_method_obj2194 = $self2085.vars[11];
anf_method_obj2158 = $self2085.vars[12];
anf_arg361 = $self2085.vars[13];
anf_arg741 = $self2085.vars[14];
anf_arg757 = $self2085.vars[15];
anf_arg372 = $self2085.vars[16];
anf_method_obj2180 = $self2085.vars[17];
anf_array2181 = $self2085.vars[18];
anf_method_obj2233 = $self2085.vars[19];
anf_method_obj2212 = $self2085.vars[20];
anf_arg409 = $self2085.vars[21];
anf_method_obj400 = $self2085.vars[22];
anf_arg395 = $self2085.vars[23];
anf_arg397 = $self2085.vars[24];
anf_arg406 = $self2085.vars[25];
anf_arg411 = $self2085.vars[26];
anf_arg834 = $self2085.vars[27];
anf_method_obj2230 = $self2085.vars[28];
anf_array2231 = $self2085.vars[29];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[636],6,$t);
}
var self2085 = $self2085;
var loc2086 = $loc2086;
var from$fail$arg2087 = $from$fail$arg2087;
var maybe$stack$loc2088 = $maybe$stack$loc2088;
var src$available2089 = $src$available2089;
var maybe$ast2090 = $maybe$ast2090;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2083) {
case 0: $step2083 = 1;
$al2092 = L[558];
$field2093 = R.getColonFieldLoc(loc2086,"is-builtin",L[558]);
if(R.isMethod($field2093)) {
$ans2091 = $field2093.full_meth(loc2086);
} else {
if(!(R.isFunction($field2093))) {
R.ffi.throwNonFunApp(L[558],$field2093);
}
$ans2091 = $field2093.app();
}
break;
case 1: var anf_arg2094 = $ans2091;
$al2092 = L[558];
var anf_if2237 = R.checkWrapBoolean(anf_arg2094);
$step2083 = R.isPyretTrue(anf_if2237)?2:23;
break;
case 2: $al2092 = L[559];
var anf_method_obj1271 = G(ED2,"error",L[559]);
$al2092 = L[560];
var anf_method_obj2121 = G(ED2,"para",L[560]);
$step2083 = 3;
$al2092 = L[561];
$field2095 = R.getColonFieldLoc(ED2,"text",L[561]);
if(R.isMethod($field2095)) {
$ans2091 = $field2095.full_meth(ED2,("The dot-annotation "));
} else {
if(!(R.isFunction($field2095))) {
R.ffi.throwNonFunApp(L[561],$field2095);
}
$ans2091 = $field2095.app(("The dot-annotation "));
}
break;
case 3: var anf_arg322 = $ans2091;
$al2092 = L[562];
var anf_method_obj2108 = G(ED2,"sequence",L[562]);
$al2092 = L[563];
var anf_arg325 = G(self2085,"name",L[563]);
$step2083 = 4;
$al2092 = L[564];
$field2096 = R.getColonFieldLoc(ED2,"text",L[564]);
if(R.isMethod($field2096)) {
$ans2091 = $field2096.full_meth(ED2,anf_arg325);
} else {
if(!(R.isFunction($field2096))) {
R.ffi.throwNonFunApp(L[564],$field2096);
}
$ans2091 = $field2096.app(anf_arg325);
}
break;
case 4: var anf_arg1280 = $ans2091;
$step2083 = 5;
$al2092 = L[565];
$field2097 = R.getColonFieldLoc(ED2,"text",L[565]);
if(R.isMethod($field2097)) {
$ans2091 = $field2097.full_meth(ED2,("."));
} else {
if(!(R.isFunction($field2097))) {
R.ffi.throwNonFunApp(L[565],$field2097);
}
$ans2091 = $field2097.app(("."));
}
break;
case 5: var anf_arg2111 = $ans2091;
$al2092 = L[566];
var anf_arg712 = G(self2085,"field",L[566]);
$step2083 = 6;
$al2092 = L[567];
$field2107 = R.getColonFieldLoc(ED2,"text",L[567]);
if(R.isMethod($field2107)) {
$ans2091 = $field2107.full_meth(ED2,anf_arg712);
} else {
if(!(R.isFunction($field2107))) {
R.ffi.throwNonFunApp(L[567],$field2107);
}
$ans2091 = $field2107.app(anf_arg712);
}
break;
case 6: var anf_arg327 = $ans2091;
$step2083 = 7;
$al2092 = L[562];
$field2114 = R.getColonFieldLoc(anf_method_obj2108,"make3",L[562]);
if(R.isMethod($field2114)) {
$ans2091 = $field2114.full_meth(anf_method_obj2108,anf_arg1280,anf_arg2111,anf_arg327);
} else {
if(!(R.isFunction($field2114))) {
R.ffi.throwNonFunApp(L[562],$field2114);
}
$ans2091 = $field2114.app(anf_arg1280,anf_arg2111,anf_arg327);
}
break;
case 7: var anf_arg357 = $ans2091;
$step2083 = 8;
$al2092 = L[568];
$field2118 = R.getColonFieldLoc(ED2,"code",L[568]);
if(R.isMethod($field2118)) {
$ans2091 = $field2118.full_meth(ED2,anf_arg357);
} else {
if(!(R.isFunction($field2118))) {
R.ffi.throwNonFunApp(L[568],$field2118);
}
$ans2091 = $field2118.app(anf_arg357);
}
break;
case 8: var anf_arg328 = $ans2091;
$step2083 = 9;
$al2092 = L[569];
$field2119 = R.getColonFieldLoc(ED2,"text",L[569]);
if(R.isMethod($field2119)) {
$ans2091 = $field2119.full_meth(ED2,(" in "));
} else {
if(!(R.isFunction($field2119))) {
R.ffi.throwNonFunApp(L[569],$field2119);
}
$ans2091 = $field2119.app((" in "));
}
break;
case 9: var anf_arg358 = $ans2091;
$step2083 = 10;
$al2092 = L[570];
$field2120 = R.getColonFieldLoc(ED2,"loc",L[570]);
if(R.isMethod($field2120)) {
$ans2091 = $field2120.full_meth(ED2,loc2086);
} else {
if(!(R.isFunction($field2120))) {
R.ffi.throwNonFunApp(L[570],$field2120);
}
$ans2091 = $field2120.app(loc2086);
}
break;
case 10: var anf_arg715 = $ans2091;
$step2083 = 11;
$al2092 = L[560];
$field2122 = R.getColonFieldLoc(anf_method_obj2121,"make4",L[560]);
if(R.isMethod($field2122)) {
$ans2091 = $field2122.full_meth(anf_method_obj2121,anf_arg322,anf_arg328,anf_arg358,anf_arg715);
} else {
if(!(R.isFunction($field2122))) {
R.ffi.throwNonFunApp(L[560],$field2122);
}
$ans2091 = $field2122.app(anf_arg322,anf_arg328,anf_arg358,anf_arg715);
}
break;
case 11: var anf_arg349 = $ans2091;
$al2092 = L[571];
var anf_method_obj2145 = G(ED2,"para",L[571]);
$al2092 = L[572];
var anf_array2146 = R.makeArrayN((7));
$step2083 = 12;
$al2092 = L[573];
$field2124 = R.getColonFieldLoc(ED2,"text",L[573]);
if(R.isMethod($field2124)) {
$ans2091 = $field2124.full_meth(ED2,("expects that the type named "));
} else {
if(!(R.isFunction($field2124))) {
R.ffi.throwNonFunApp(L[573],$field2124);
}
$ans2091 = $field2124.app(("expects that the type named "));
}
break;
case 12: anf_array2146[0] = $ans2091;
$al2092 = L[574];
var anf_arg334 = G(self2085,"field",L[574]);
$step2083 = 13;
$al2092 = L[575];
$field2125 = R.getColonFieldLoc(ED2,"text",L[575]);
if(R.isMethod($field2125)) {
$ans2091 = $field2125.full_meth(ED2,anf_arg334);
} else {
if(!(R.isFunction($field2125))) {
R.ffi.throwNonFunApp(L[575],$field2125);
}
$ans2091 = $field2125.app(anf_arg334);
}
break;
case 13: var anf_arg337 = $ans2091;
$step2083 = 14;
$al2092 = L[576];
$field2126 = R.getColonFieldLoc(ED2,"code",L[576]);
if(R.isMethod($field2126)) {
$ans2091 = $field2126.full_meth(ED2,anf_arg337);
} else {
if(!(R.isFunction($field2126))) {
R.ffi.throwNonFunApp(L[576],$field2126);
}
$ans2091 = $field2126.app(anf_arg337);
}
break;
case 14: anf_array2146[1] = $ans2091;
$step2083 = 15;
$al2092 = L[577];
$field2133 = R.getColonFieldLoc(ED2,"text",L[577]);
if(R.isMethod($field2133)) {
$ans2091 = $field2133.full_meth(ED2,(" exists in the object named "));
} else {
if(!(R.isFunction($field2133))) {
R.ffi.throwNonFunApp(L[577],$field2133);
}
$ans2091 = $field2133.app((" exists in the object named "));
}
break;
case 15: anf_array2146[2] = $ans2091;
$al2092 = L[578];
var anf_arg350 = G(self2085,"name",L[578]);
$step2083 = 16;
$al2092 = L[579];
$field2134 = R.getColonFieldLoc(ED2,"text",L[579]);
if(R.isMethod($field2134)) {
$ans2091 = $field2134.full_meth(ED2,anf_arg350);
} else {
if(!(R.isFunction($field2134))) {
R.ffi.throwNonFunApp(L[579],$field2134);
}
$ans2091 = $field2134.app(anf_arg350);
}
break;
case 16: var anf_arg351 = $ans2091;
$step2083 = 17;
$al2092 = L[580];
$field2136 = R.getColonFieldLoc(ED2,"code",L[580]);
if(R.isMethod($field2136)) {
$ans2091 = $field2136.full_meth(ED2,anf_arg351);
} else {
if(!(R.isFunction($field2136))) {
R.ffi.throwNonFunApp(L[580],$field2136);
}
$ans2091 = $field2136.app(anf_arg351);
}
break;
case 17: anf_array2146[3] = $ans2091;
$step2083 = 18;
$al2092 = L[581];
$field2139 = R.getColonFieldLoc(ED2,"text",L[581]);
if(R.isMethod($field2139)) {
$ans2091 = $field2139.full_meth(ED2,(", but "));
} else {
if(!(R.isFunction($field2139))) {
R.ffi.throwNonFunApp(L[581],$field2139);
}
$ans2091 = $field2139.app((", but "));
}
break;
case 18: anf_array2146[4] = $ans2091;
$al2092 = L[582];
var anf_arg344 = G(self2085,"field",L[582]);
$step2083 = 19;
$al2092 = L[583];
$field2141 = R.getColonFieldLoc(ED2,"text",L[583]);
if(R.isMethod($field2141)) {
$ans2091 = $field2141.full_meth(ED2,anf_arg344);
} else {
if(!(R.isFunction($field2141))) {
R.ffi.throwNonFunApp(L[583],$field2141);
}
$ans2091 = $field2141.app(anf_arg344);
}
break;
case 19: var anf_arg736 = $ans2091;
$step2083 = 20;
$al2092 = L[584];
$field2143 = R.getColonFieldLoc(ED2,"code",L[584]);
if(R.isMethod($field2143)) {
$ans2091 = $field2143.full_meth(ED2,anf_arg736);
} else {
if(!(R.isFunction($field2143))) {
R.ffi.throwNonFunApp(L[584],$field2143);
}
$ans2091 = $field2143.app(anf_arg736);
}
break;
case 20: anf_array2146[5] = $ans2091;
$step2083 = 21;
$al2092 = L[585];
$field2144 = R.getColonFieldLoc(ED2,"text",L[585]);
if(R.isMethod($field2144)) {
$ans2091 = $field2144.full_meth(ED2,(" could not be found."));
} else {
if(!(R.isFunction($field2144))) {
R.ffi.throwNonFunApp(L[585],$field2144);
}
$ans2091 = $field2144.app((" could not be found."));
}
break;
case 21: anf_array2146[6] = $ans2091;
$step2083 = 22;
$al2092 = L[571];
$field2149 = R.getColonFieldLoc(anf_method_obj2145,"make",L[571]);
if(R.isMethod($field2149)) {
$ans2091 = $field2149.full_meth(anf_method_obj2145,anf_array2146);
} else {
if(!(R.isFunction($field2149))) {
R.ffi.throwNonFunApp(L[571],$field2149);
}
$ans2091 = $field2149.app(anf_array2146);
}
break;
case 22: var anf_arg342 = $ans2091;
$step2083 = 64;
$al2092 = L[559];
$field2151 = R.getColonFieldLoc(anf_method_obj1271,"make2",L[559]);
if(R.isMethod($field2151)) {
$ans2091 = $field2151.full_meth(anf_method_obj1271,anf_arg349,anf_arg342);
} else {
if(!(R.isFunction($field2151))) {
R.ffi.throwNonFunApp(L[559],$field2151);
}
$ans2091 = $field2151.app(anf_arg349,anf_arg342);
}
break;
case 23: $step2083 = 24;
$al2092 = L[586];
if(!(R.isFunction(src$available2089))) {
R.ffi.throwNonFunApp($al2092,src$available2089);
}
$ans2091 = src$available2089.app(loc2086);
break;
case 24: var anf_arg345 = $ans2091;
$al2092 = L[586];
var anf_if2236 = R.checkWrapBoolean(anf_arg345);
$step2083 = R.isPyretTrue(anf_if2236)?25:43;
break;
case 25: $al2092 = L[587];
var anf_method_obj2194 = G(ED2,"error",L[587]);
$al2092 = L[588];
var anf_method_obj2158 = G(ED2,"para",L[588]);
$step2083 = 26;
$al2092 = L[589];
$field2153 = R.getColonFieldLoc(ED2,"text",L[589]);
if(R.isMethod($field2153)) {
$ans2091 = $field2153.full_meth(ED2,("The "));
} else {
if(!(R.isFunction($field2153))) {
R.ffi.throwNonFunApp(L[589],$field2153);
}
$ans2091 = $field2153.app(("The "));
}
break;
case 26: var anf_arg361 = $ans2091;
$step2083 = 27;
$al2092 = L[590];
$field2154 = R.getColonFieldLoc(ED2,"text",L[590]);
if(R.isMethod($field2154)) {
$ans2091 = $field2154.full_meth(ED2,("dot-annotation"));
} else {
if(!(R.isFunction($field2154))) {
R.ffi.throwNonFunApp(L[590],$field2154);
}
$ans2091 = $field2154.app(("dot-annotation"));
}
break;
case 27: var anf_arg741 = $ans2091;
$al2092 = L[591];
var anf_method_obj2155 = G(ED2,"locs",L[591]);
$step2083 = 28;
$al2092 = L[591];
$field2156 = R.getColonFieldLoc(anf_method_obj2155,"make1",L[591]);
if(R.isMethod($field2156)) {
$ans2091 = $field2156.full_meth(anf_method_obj2155,loc2086);
} else {
if(!(R.isFunction($field2156))) {
R.ffi.throwNonFunApp(L[591],$field2156);
}
$ans2091 = $field2156.app(loc2086);
}
break;
case 28: var anf_arg364 = $ans2091;
$step2083 = 29;
$al2092 = L[592];
$field2157 = R.getColonFieldLoc(ED2,"highlight",L[592]);
if(R.isMethod($field2157)) {
$ans2091 = $field2157.full_meth(ED2,anf_arg741,anf_arg364,(0));
} else {
if(!(R.isFunction($field2157))) {
R.ffi.throwNonFunApp(L[592],$field2157);
}
$ans2091 = $field2157.app(anf_arg741,anf_arg364,(0));
}
break;
case 29: var anf_arg379 = $ans2091;
$step2083 = 30;
$al2092 = L[588];
$field2159 = R.getColonFieldLoc(anf_method_obj2158,"make2",L[588]);
if(R.isMethod($field2159)) {
$ans2091 = $field2159.full_meth(anf_method_obj2158,anf_arg361,anf_arg379);
} else {
if(!(R.isFunction($field2159))) {
R.ffi.throwNonFunApp(L[588],$field2159);
}
$ans2091 = $field2159.app(anf_arg361,anf_arg379);
}
break;
case 30: var anf_arg757 = $ans2091;
$step2083 = 31;
$al2092 = L[593];
$field2160 = R.getColonFieldLoc(ED2,"cmcode",L[593]);
if(R.isMethod($field2160)) {
$ans2091 = $field2160.full_meth(ED2,loc2086);
} else {
if(!(R.isFunction($field2160))) {
R.ffi.throwNonFunApp(L[593],$field2160);
}
$ans2091 = $field2160.app(loc2086);
}
break;
case 31: var anf_arg372 = $ans2091;
$al2092 = L[594];
var anf_method_obj2180 = G(ED2,"para",L[594]);
$al2092 = L[595];
var anf_array2181 = R.makeArrayN((7));
$step2083 = 32;
$al2092 = L[596];
$field2165 = R.getColonFieldLoc(ED2,"text",L[596]);
if(R.isMethod($field2165)) {
$ans2091 = $field2165.full_meth(ED2,("expects that the type named "));
} else {
if(!(R.isFunction($field2165))) {
R.ffi.throwNonFunApp(L[596],$field2165);
}
$ans2091 = $field2165.app(("expects that the type named "));
}
break;
case 32: anf_array2181[0] = $ans2091;
$al2092 = L[597];
var anf_arg373 = G(self2085,"field",L[597]);
$step2083 = 33;
$al2092 = L[598];
$field2167 = R.getColonFieldLoc(ED2,"text",L[598]);
if(R.isMethod($field2167)) {
$ans2091 = $field2167.full_meth(ED2,anf_arg373);
} else {
if(!(R.isFunction($field2167))) {
R.ffi.throwNonFunApp(L[598],$field2167);
}
$ans2091 = $field2167.app(anf_arg373);
}
break;
case 33: var anf_arg374 = $ans2091;
$step2083 = 34;
$al2092 = L[599];
$field2170 = R.getColonFieldLoc(ED2,"code",L[599]);
if(R.isMethod($field2170)) {
$ans2091 = $field2170.full_meth(ED2,anf_arg374);
} else {
if(!(R.isFunction($field2170))) {
R.ffi.throwNonFunApp(L[599],$field2170);
}
$ans2091 = $field2170.app(anf_arg374);
}
break;
case 34: anf_array2181[1] = $ans2091;
$step2083 = 35;
$al2092 = L[600];
$field2171 = R.getColonFieldLoc(ED2,"text",L[600]);
if(R.isMethod($field2171)) {
$ans2091 = $field2171.full_meth(ED2,(" exists in the object named "));
} else {
if(!(R.isFunction($field2171))) {
R.ffi.throwNonFunApp(L[600],$field2171);
}
$ans2091 = $field2171.app((" exists in the object named "));
}
break;
case 35: anf_array2181[2] = $ans2091;
$al2092 = L[601];
var anf_arg380 = G(self2085,"name",L[601]);
$step2083 = 36;
$al2092 = L[602];
$field2172 = R.getColonFieldLoc(ED2,"text",L[602]);
if(R.isMethod($field2172)) {
$ans2091 = $field2172.full_meth(ED2,anf_arg380);
} else {
if(!(R.isFunction($field2172))) {
R.ffi.throwNonFunApp(L[602],$field2172);
}
$ans2091 = $field2172.app(anf_arg380);
}
break;
case 36: var anf_arg376 = $ans2091;
$step2083 = 37;
$al2092 = L[603];
$field2173 = R.getColonFieldLoc(ED2,"code",L[603]);
if(R.isMethod($field2173)) {
$ans2091 = $field2173.full_meth(ED2,anf_arg376);
} else {
if(!(R.isFunction($field2173))) {
R.ffi.throwNonFunApp(L[603],$field2173);
}
$ans2091 = $field2173.app(anf_arg376);
}
break;
case 37: anf_array2181[3] = $ans2091;
$step2083 = 38;
$al2092 = L[604];
$field2174 = R.getColonFieldLoc(ED2,"text",L[604]);
if(R.isMethod($field2174)) {
$ans2091 = $field2174.full_meth(ED2,(", but "));
} else {
if(!(R.isFunction($field2174))) {
R.ffi.throwNonFunApp(L[604],$field2174);
}
$ans2091 = $field2174.app((", but "));
}
break;
case 38: anf_array2181[4] = $ans2091;
$al2092 = L[605];
var anf_arg381 = G(self2085,"field",L[605]);
$step2083 = 39;
$al2092 = L[606];
$field2175 = R.getColonFieldLoc(ED2,"text",L[606]);
if(R.isMethod($field2175)) {
$ans2091 = $field2175.full_meth(ED2,anf_arg381);
} else {
if(!(R.isFunction($field2175))) {
R.ffi.throwNonFunApp(L[606],$field2175);
}
$ans2091 = $field2175.app(anf_arg381);
}
break;
case 39: var anf_arg2176 = $ans2091;
$step2083 = 40;
$al2092 = L[607];
$field2178 = R.getColonFieldLoc(ED2,"code",L[607]);
if(R.isMethod($field2178)) {
$ans2091 = $field2178.full_meth(ED2,anf_arg2176);
} else {
if(!(R.isFunction($field2178))) {
R.ffi.throwNonFunApp(L[607],$field2178);
}
$ans2091 = $field2178.app(anf_arg2176);
}
break;
case 40: anf_array2181[5] = $ans2091;
$step2083 = 41;
$al2092 = L[608];
$field2179 = R.getColonFieldLoc(ED2,"text",L[608]);
if(R.isMethod($field2179)) {
$ans2091 = $field2179.full_meth(ED2,(" could not be found."));
} else {
if(!(R.isFunction($field2179))) {
R.ffi.throwNonFunApp(L[608],$field2179);
}
$ans2091 = $field2179.app((" could not be found."));
}
break;
case 41: anf_array2181[6] = $ans2091;
$step2083 = 42;
$al2092 = L[594];
$field2193 = R.getColonFieldLoc(anf_method_obj2180,"make",L[594]);
if(R.isMethod($field2193)) {
$ans2091 = $field2193.full_meth(anf_method_obj2180,anf_array2181);
} else {
if(!(R.isFunction($field2193))) {
R.ffi.throwNonFunApp(L[594],$field2193);
}
$ans2091 = $field2193.app(anf_array2181);
}
break;
case 42: var anf_arg2195 = $ans2091;
$step2083 = 64;
$al2092 = L[587];
$field2196 = R.getColonFieldLoc(anf_method_obj2194,"make3",L[587]);
if(R.isMethod($field2196)) {
$ans2091 = $field2196.full_meth(anf_method_obj2194,anf_arg757,anf_arg372,anf_arg2195);
} else {
if(!(R.isFunction($field2196))) {
R.ffi.throwNonFunApp(L[587],$field2196);
}
$ans2091 = $field2196.app(anf_arg757,anf_arg372,anf_arg2195);
}
break;
case 43: $al2092 = L[609];
var anf_method_obj2233 = G(ED2,"error",L[609]);
$al2092 = L[610];
var anf_method_obj2212 = G(ED2,"para",L[610]);
$step2083 = 44;
$al2092 = L[611];
$field2197 = R.getColonFieldLoc(ED2,"text",L[611]);
if(R.isMethod($field2197)) {
$ans2091 = $field2197.full_meth(ED2,("The dot-annotation "));
} else {
if(!(R.isFunction($field2197))) {
R.ffi.throwNonFunApp(L[611],$field2197);
}
$ans2091 = $field2197.app(("The dot-annotation "));
}
break;
case 44: var anf_arg409 = $ans2091;
$al2092 = L[612];
var anf_method_obj400 = G(ED2,"sequence",L[612]);
$al2092 = L[613];
var anf_arg401 = G(self2085,"name",L[613]);
$step2083 = 45;
$al2092 = L[614];
$field2200 = R.getColonFieldLoc(ED2,"text",L[614]);
if(R.isMethod($field2200)) {
$ans2091 = $field2200.full_meth(ED2,anf_arg401);
} else {
if(!(R.isFunction($field2200))) {
R.ffi.throwNonFunApp(L[614],$field2200);
}
$ans2091 = $field2200.app(anf_arg401);
}
break;
case 45: var anf_arg395 = $ans2091;
$step2083 = 46;
$al2092 = L[615];
$field2202 = R.getColonFieldLoc(ED2,"text",L[615]);
if(R.isMethod($field2202)) {
$ans2091 = $field2202.full_meth(ED2,("."));
} else {
if(!(R.isFunction($field2202))) {
R.ffi.throwNonFunApp(L[615],$field2202);
}
$ans2091 = $field2202.app(("."));
}
break;
case 46: var anf_arg397 = $ans2091;
$al2092 = L[616];
var anf_arg402 = G(self2085,"field",L[616]);
$step2083 = 47;
$al2092 = L[617];
$field2204 = R.getColonFieldLoc(ED2,"text",L[617]);
if(R.isMethod($field2204)) {
$ans2091 = $field2204.full_meth(ED2,anf_arg402);
} else {
if(!(R.isFunction($field2204))) {
R.ffi.throwNonFunApp(L[617],$field2204);
}
$ans2091 = $field2204.app(anf_arg402);
}
break;
case 47: var anf_arg403 = $ans2091;
$step2083 = 48;
$al2092 = L[612];
$field2205 = R.getColonFieldLoc(anf_method_obj400,"make3",L[612]);
if(R.isMethod($field2205)) {
$ans2091 = $field2205.full_meth(anf_method_obj400,anf_arg395,anf_arg397,anf_arg403);
} else {
if(!(R.isFunction($field2205))) {
R.ffi.throwNonFunApp(L[612],$field2205);
}
$ans2091 = $field2205.app(anf_arg395,anf_arg397,anf_arg403);
}
break;
case 48: var anf_arg410 = $ans2091;
$step2083 = 49;
$al2092 = L[618];
$field2206 = R.getColonFieldLoc(ED2,"code",L[618]);
if(R.isMethod($field2206)) {
$ans2091 = $field2206.full_meth(ED2,anf_arg410);
} else {
if(!(R.isFunction($field2206))) {
R.ffi.throwNonFunApp(L[618],$field2206);
}
$ans2091 = $field2206.app(anf_arg410);
}
break;
case 49: var anf_arg406 = $ans2091;
$step2083 = 50;
$al2092 = L[619];
$field2209 = R.getColonFieldLoc(ED2,"text",L[619]);
if(R.isMethod($field2209)) {
$ans2091 = $field2209.full_meth(ED2,(" at "));
} else {
if(!(R.isFunction($field2209))) {
R.ffi.throwNonFunApp(L[619],$field2209);
}
$ans2091 = $field2209.app((" at "));
}
break;
case 50: var anf_arg411 = $ans2091;
$step2083 = 51;
$al2092 = L[620];
$field2211 = R.getColonFieldLoc(ED2,"loc",L[620]);
if(R.isMethod($field2211)) {
$ans2091 = $field2211.full_meth(ED2,loc2086);
} else {
if(!(R.isFunction($field2211))) {
R.ffi.throwNonFunApp(L[620],$field2211);
}
$ans2091 = $field2211.app(loc2086);
}
break;
case 51: var anf_arg1436 = $ans2091;
$step2083 = 52;
$al2092 = L[610];
$field2213 = R.getColonFieldLoc(anf_method_obj2212,"make4",L[610]);
if(R.isMethod($field2213)) {
$ans2091 = $field2213.full_meth(anf_method_obj2212,anf_arg409,anf_arg406,anf_arg411,anf_arg1436);
} else {
if(!(R.isFunction($field2213))) {
R.ffi.throwNonFunApp(L[610],$field2213);
}
$ans2091 = $field2213.app(anf_arg409,anf_arg406,anf_arg411,anf_arg1436);
}
break;
case 52: var anf_arg834 = $ans2091;
$al2092 = L[621];
var anf_method_obj2230 = G(ED2,"para",L[621]);
$al2092 = L[622];
var anf_array2231 = R.makeArrayN((7));
$step2083 = 53;
$al2092 = L[623];
$field2214 = R.getColonFieldLoc(ED2,"text",L[623]);
if(R.isMethod($field2214)) {
$ans2091 = $field2214.full_meth(ED2,("expects that the type named "));
} else {
if(!(R.isFunction($field2214))) {
R.ffi.throwNonFunApp(L[623],$field2214);
}
$ans2091 = $field2214.app(("expects that the type named "));
}
break;
case 53: anf_array2231[0] = $ans2091;
$al2092 = L[624];
var anf_arg835 = G(self2085,"field",L[624]);
$step2083 = 54;
$al2092 = L[625];
$field2215 = R.getColonFieldLoc(ED2,"text",L[625]);
if(R.isMethod($field2215)) {
$ans2091 = $field2215.full_meth(ED2,anf_arg835);
} else {
if(!(R.isFunction($field2215))) {
R.ffi.throwNonFunApp(L[625],$field2215);
}
$ans2091 = $field2215.app(anf_arg835);
}
break;
case 54: var anf_arg426 = $ans2091;
$step2083 = 55;
$al2092 = L[626];
$field2217 = R.getColonFieldLoc(ED2,"code",L[626]);
if(R.isMethod($field2217)) {
$ans2091 = $field2217.full_meth(ED2,anf_arg426);
} else {
if(!(R.isFunction($field2217))) {
R.ffi.throwNonFunApp(L[626],$field2217);
}
$ans2091 = $field2217.app(anf_arg426);
}
break;
case 55: anf_array2231[1] = $ans2091;
$step2083 = 56;
$al2092 = L[627];
$field2218 = R.getColonFieldLoc(ED2,"text",L[627]);
if(R.isMethod($field2218)) {
$ans2091 = $field2218.full_meth(ED2,(" exists in the object named "));
} else {
if(!(R.isFunction($field2218))) {
R.ffi.throwNonFunApp(L[627],$field2218);
}
$ans2091 = $field2218.app((" exists in the object named "));
}
break;
case 56: anf_array2231[2] = $ans2091;
$al2092 = L[628];
var anf_arg427 = G(self2085,"name",L[628]);
$step2083 = 57;
$al2092 = L[629];
$field2219 = R.getColonFieldLoc(ED2,"text",L[629]);
if(R.isMethod($field2219)) {
$ans2091 = $field2219.full_meth(ED2,anf_arg427);
} else {
if(!(R.isFunction($field2219))) {
R.ffi.throwNonFunApp(L[629],$field2219);
}
$ans2091 = $field2219.app(anf_arg427);
}
break;
case 57: var anf_arg428 = $ans2091;
$step2083 = 58;
$al2092 = L[630];
$field2220 = R.getColonFieldLoc(ED2,"code",L[630]);
if(R.isMethod($field2220)) {
$ans2091 = $field2220.full_meth(ED2,anf_arg428);
} else {
if(!(R.isFunction($field2220))) {
R.ffi.throwNonFunApp(L[630],$field2220);
}
$ans2091 = $field2220.app(anf_arg428);
}
break;
case 58: anf_array2231[3] = $ans2091;
$step2083 = 59;
$al2092 = L[631];
$field2221 = R.getColonFieldLoc(ED2,"text",L[631]);
if(R.isMethod($field2221)) {
$ans2091 = $field2221.full_meth(ED2,(", but "));
} else {
if(!(R.isFunction($field2221))) {
R.ffi.throwNonFunApp(L[631],$field2221);
}
$ans2091 = $field2221.app((", but "));
}
break;
case 59: anf_array2231[4] = $ans2091;
$al2092 = L[632];
var anf_arg842 = G(self2085,"field",L[632]);
$step2083 = 60;
$al2092 = L[633];
$field2222 = R.getColonFieldLoc(ED2,"text",L[633]);
if(R.isMethod($field2222)) {
$ans2091 = $field2222.full_meth(ED2,anf_arg842);
} else {
if(!(R.isFunction($field2222))) {
R.ffi.throwNonFunApp(L[633],$field2222);
}
$ans2091 = $field2222.app(anf_arg842);
}
break;
case 60: var anf_arg844 = $ans2091;
$step2083 = 61;
$al2092 = L[634];
$field2225 = R.getColonFieldLoc(ED2,"code",L[634]);
if(R.isMethod($field2225)) {
$ans2091 = $field2225.full_meth(ED2,anf_arg844);
} else {
if(!(R.isFunction($field2225))) {
R.ffi.throwNonFunApp(L[634],$field2225);
}
$ans2091 = $field2225.app(anf_arg844);
}
break;
case 61: anf_array2231[5] = $ans2091;
$step2083 = 62;
$al2092 = L[635];
$field2229 = R.getColonFieldLoc(ED2,"text",L[635]);
if(R.isMethod($field2229)) {
$ans2091 = $field2229.full_meth(ED2,(" could not be found."));
} else {
if(!(R.isFunction($field2229))) {
R.ffi.throwNonFunApp(L[635],$field2229);
}
$ans2091 = $field2229.app((" could not be found."));
}
break;
case 62: anf_array2231[6] = $ans2091;
$step2083 = 63;
$al2092 = L[621];
$field2232 = R.getColonFieldLoc(anf_method_obj2230,"make",L[621]);
if(R.isMethod($field2232)) {
$ans2091 = $field2232.full_meth(anf_method_obj2230,anf_array2231);
} else {
if(!(R.isFunction($field2232))) {
R.ffi.throwNonFunApp(L[621],$field2232);
}
$ans2091 = $field2232.app(anf_array2231);
}
break;
case 63: var anf_arg1457 = $ans2091;
$step2083 = 64;
$al2092 = L[609];
$field2235 = R.getColonFieldLoc(anf_method_obj2233,"make2",L[609]);
if(R.isMethod($field2235)) {
$ans2091 = $field2235.full_meth(anf_method_obj2233,anf_arg834,anf_arg1457);
} else {
if(!(R.isFunction($field2235))) {
R.ffi.throwNonFunApp(L[609],$field2235);
}
$ans2091 = $field2235.app(anf_arg834,anf_arg1457);
}
break;
case 64: ++R.GAS;
return $ans2091;
default: throw "No case numbered " + $step2083 + " in $temp_full2084";
}
}
} catch($e2238) {
if(R.isCont($e2238) && ($step2083 !== 64)) {
$e2238.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2092,$temp_full2084,$step2083,[self2085,loc2086,from$fail$arg2087,maybe$stack$loc2088,src$available2089,maybe$ast2090],[anf_method_obj1271,anf_method_obj2121,anf_arg322,anf_method_obj2108,anf_arg1280,anf_arg2111,anf_arg328,anf_arg358,anf_arg349,anf_method_obj2145,anf_array2146,anf_method_obj2194,anf_method_obj2158,anf_arg361,anf_arg741,anf_arg757,anf_arg372,anf_method_obj2180,anf_array2181,anf_method_obj2233,anf_method_obj2212,anf_arg409,anf_method_obj400,anf_arg395,anf_arg397,anf_arg406,anf_arg411,anf_arg834,anf_method_obj2230,anf_array2231]);
}
if(R.isPyretException($e2238)) {
$e2238.pyretStack.push($al2092);
}
throw $e2238;
}
};
var anf_variant_member2341 = R.makeMethod5($temp_full2084,"render-fancy-reason");
var $temp_full2240 = function($self2241,$loc2242,$from$fail$arg2243) {
var $step2239 = 0;
var $ans2244 = D;
var $al2245 = L[648];
try {
if(R.isActivationRecord($self2241)) {
$step2239 = $self2241.step;
$al2245 = $self2241.from;
$ans2244 = $self2241.ans;
self2241 = $self2241.args[0];
loc2242 = $self2241.args[1];
from$fail$arg2243 = $self2241.args[2];
anf_method_obj2255 = $self2241.vars[0];
anf_method_obj2253 = $self2241.vars[1];
anf_arg463 = $self2241.vars[2];
anf_arg858 = $self2241.vars[3];
anf_arg438 = $self2241.vars[4];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[648],3,$t);
}
var self2241 = $self2241;
var loc2242 = $loc2242;
var from$fail$arg2243 = $from$fail$arg2243;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2239) {
case 0: $al2245 = L[637];
var anf_method_obj2255 = G(ED2,"error",L[637]);
$al2245 = L[638];
var anf_method_obj2253 = G(ED2,"para",L[638]);
$step2239 = 1;
$al2245 = L[639];
$field2246 = R.getColonFieldLoc(ED2,"text",L[639]);
if(R.isMethod($field2246)) {
$ans2244 = $field2246.full_meth(ED2,("Couldn't find"));
} else {
if(!(R.isFunction($field2246))) {
R.ffi.throwNonFunApp(L[639],$field2246);
}
$ans2244 = $field2246.app(("Couldn't find"));
}
break;
case 1: var anf_arg463 = $ans2244;
$al2245 = L[640];
var anf_arg1466 = G(self2241,"field",L[640]);
$step2239 = 2;
$al2245 = L[647];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al2245,_plus1);
}
$ans2244 = _plus1.app(("the annotation named "),anf_arg1466);
break;
case 2: var anf_arg453 = $ans2244;
$step2239 = 3;
$al2245 = L[641];
$field2247 = R.getColonFieldLoc(ED2,"text",L[641]);
if(R.isMethod($field2247)) {
$ans2244 = $field2247.full_meth(ED2,anf_arg453);
} else {
if(!(R.isFunction($field2247))) {
R.ffi.throwNonFunApp(L[641],$field2247);
}
$ans2244 = $field2247.app(anf_arg453);
}
break;
case 3: var anf_arg440 = $ans2244;
$step2239 = 4;
$al2245 = L[642];
$field2248 = R.getColonFieldLoc(ED2,"loc-display",L[642]);
if(R.isMethod($field2248)) {
$ans2244 = $field2248.full_meth(ED2,loc2242,("error-highlight"),anf_arg440);
} else {
if(!(R.isFunction($field2248))) {
R.ffi.throwNonFunApp(L[642],$field2248);
}
$ans2244 = $field2248.app(loc2242,("error-highlight"),anf_arg440);
}
break;
case 4: var anf_arg858 = $ans2244;
$step2239 = 5;
$al2245 = L[643];
$field2250 = R.getColonFieldLoc(ED2,"text",L[643]);
if(R.isMethod($field2250)) {
$ans2244 = $field2250.full_meth(ED2,("in the annotations from"));
} else {
if(!(R.isFunction($field2250))) {
R.ffi.throwNonFunApp(L[643],$field2250);
}
$ans2244 = $field2250.app(("in the annotations from"));
}
break;
case 5: var anf_arg438 = $ans2244;
$al2245 = L[644];
var anf_arg441 = G(self2241,"name",L[644]);
$step2239 = 6;
$al2245 = L[645];
$field2251 = R.getColonFieldLoc(ED2,"text",L[645]);
if(R.isMethod($field2251)) {
$ans2244 = $field2251.full_meth(ED2,anf_arg441);
} else {
if(!(R.isFunction($field2251))) {
R.ffi.throwNonFunApp(L[645],$field2251);
}
$ans2244 = $field2251.app(anf_arg441);
}
break;
case 6: var anf_arg454 = $ans2244;
$step2239 = 7;
$al2245 = L[646];
$field2252 = R.getColonFieldLoc(ED2,"code",L[646]);
if(R.isMethod($field2252)) {
$ans2244 = $field2252.full_meth(ED2,anf_arg454);
} else {
if(!(R.isFunction($field2252))) {
R.ffi.throwNonFunApp(L[646],$field2252);
}
$ans2244 = $field2252.app(anf_arg454);
}
break;
case 7: var anf_arg455 = $ans2244;
$step2239 = 8;
$al2245 = L[638];
$field2254 = R.getColonFieldLoc(anf_method_obj2253,"make4",L[638]);
if(R.isMethod($field2254)) {
$ans2244 = $field2254.full_meth(anf_method_obj2253,anf_arg463,anf_arg858,anf_arg438,anf_arg455);
} else {
if(!(R.isFunction($field2254))) {
R.ffi.throwNonFunApp(L[638],$field2254);
}
$ans2244 = $field2254.app(anf_arg463,anf_arg858,anf_arg438,anf_arg455);
}
break;
case 8: var anf_arg449 = $ans2244;
$step2239 = 9;
$al2245 = L[637];
$field2256 = R.getColonFieldLoc(anf_method_obj2255,"make1",L[637]);
if(R.isMethod($field2256)) {
$ans2244 = $field2256.full_meth(anf_method_obj2255,anf_arg449);
} else {
if(!(R.isFunction($field2256))) {
R.ffi.throwNonFunApp(L[637],$field2256);
}
$ans2244 = $field2256.app(anf_arg449);
}
break;
case 9: ++R.GAS;
return $ans2244;
default: throw "No case numbered " + $step2239 + " in $temp_full2240";
}
}
} catch($e2257) {
if(R.isCont($e2257) && ($step2239 !== 9)) {
$e2257.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2245,$temp_full2240,$step2239,[self2241,loc2242,from$fail$arg2243],[anf_method_obj2255,anf_method_obj2253,anf_arg463,anf_arg858,anf_arg438]);
}
if(R.isPyretException($e2257)) {
$e2257.pyretStack.push($al2245);
}
throw $e2257;
}
};
var anf_variant_member2342 = R.makeMethod2($temp_full2240,"render-reason");
var $failure$at$arg_getfields2265 = function(f) {
return f(this.dict["loc"],this.dict["index"],this.dict["function-name"],this.dict["args"],this.dict["reason"]);
};
var $failure$at$arg_getfieldsref2263 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["index"],false,refmask[1]),R.derefField(this.dict["function-name"],false,refmask[2]),R.derefField(this.dict["args"],false,refmask[3]),R.derefField(this.dict["reason"],false,refmask[4]));
};
var $failure$at$arg_mutablemask2264 = [false,false,false,false,false];
var $failure$at$arg$base2258 = {"$fieldNames":["loc","index","function-name","args","reason"],
"render-fancy-reason":anf_variant_member2261,
"render-reason":anf_variant_member2262,
"_match":R.makeMatch("failure-at-arg",5)};
var $failure$at$arg$brander2259 = R.namedBrander("failure-at-arg",L[649]);
var $failure$at$arg$brands2260 = {};
$failure$at$arg$brands2260[FailureReason35._brand] = true;
$failure$at$arg$brands2260[$failure$at$arg$brander2259._brand] = true;
var failure$at$arg2266 = R.makeVariantConstructor(L[650],function() {
return [];
},[],[],[false,false,false,false,false],["loc2267","index2268","function$name2269","args2270","reason2271"],$failure$at$arg_mutablemask2264,$failure$at$arg$base2258,$failure$at$arg$brands2260,"failure-at-arg",$failure$at$arg_getfieldsref2263,$failure$at$arg_getfields2265,$failure$at$arg$base2258);
var $ref$init_getfields2279 = function(f) {
return f(this.dict["loc"],this.dict["reason"]);
};
var $ref$init_getfieldsref2277 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["reason"],false,refmask[1]));
};
var $ref$init_mutablemask2278 = [false,false];
var $ref$init$base2272 = {"$fieldNames":["loc","reason"],
"render-fancy-reason":anf_variant_member2275,
"render-reason":anf_variant_member2276,
"_match":R.makeMatch("ref-init",2)};
var $ref$init$brander2273 = R.namedBrander("ref-init",L[651]);
var $ref$init$brands2274 = {};
$ref$init$brands2274[FailureReason35._brand] = true;
$ref$init$brands2274[$ref$init$brander2273._brand] = true;
var ref$init2280 = R.makeVariantConstructor(L[653],function() {
return [FailureReason138];
},["reason2281"],[L[652]],[false,false],["loc2282","reason2281"],$ref$init_mutablemask2278,$ref$init$base2272,$ref$init$brands2274,"ref-init",$ref$init_getfieldsref2277,$ref$init_getfields2279,$ref$init$base2272);
var $type$mismatch_getfields2290 = function(f) {
return f(this.dict["val"],this.dict["name"]);
};
var $type$mismatch_getfieldsref2288 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["name"],false,refmask[1]));
};
var $type$mismatch_mutablemask2289 = [false,false];
var $type$mismatch$base2283 = {"$fieldNames":["val","name"],
"render-fancy-reason":anf_variant_member2286,
"render-reason":anf_variant_member2287,
"_match":R.makeMatch("type-mismatch",2)};
var $type$mismatch$brander2284 = R.namedBrander("type-mismatch",L[654]);
var $type$mismatch$brands2285 = {};
$type$mismatch$brands2285[FailureReason35._brand] = true;
$type$mismatch$brands2285[$type$mismatch$brander2284._brand] = true;
var type$mismatch2291 = R.makeVariantConstructor(L[656],function() {
return [$type$String7];
},["name2292"],[L[655]],[false,false],["val2293","name2292"],$type$mismatch_mutablemask2289,$type$mismatch$base2283,$type$mismatch$brands2285,"type-mismatch",$type$mismatch_getfieldsref2288,$type$mismatch_getfields2290,$type$mismatch$base2283);
var $predicate$failure_getfields2301 = function(f) {
return f(this.dict["val"],this.dict["name"]);
};
var $predicate$failure_getfieldsref2299 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["name"],false,refmask[1]));
};
var $predicate$failure_mutablemask2300 = [false,false];
var $predicate$failure$base2294 = {"$fieldNames":["val","name"],
"render-fancy-reason":anf_variant_member2297,
"render-reason":anf_variant_member2298,
"_match":R.makeMatch("predicate-failure",2)};
var $predicate$failure$brander2295 = R.namedBrander("predicate-failure",L[657]);
var $predicate$failure$brands2296 = {};
$predicate$failure$brands2296[FailureReason35._brand] = true;
$predicate$failure$brands2296[$predicate$failure$brander2295._brand] = true;
var predicate$failure2302 = R.makeVariantConstructor(L[658],function() {
return [];
},[],[],[false,false],["val2303","name2304"],$predicate$failure_mutablemask2300,$predicate$failure$base2294,$predicate$failure$brands2296,"predicate-failure",$predicate$failure_getfieldsref2299,$predicate$failure_getfields2301,$predicate$failure$base2294);
var $record$fields$fail_getfields2312 = function(f) {
return f(this.dict["val"],this.dict["field-failures"]);
};
var $record$fields$fail_getfieldsref2310 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["field-failures"],false,refmask[1]));
};
var $record$fields$fail_mutablemask2311 = [false,false];
var $record$fields$fail$base2305 = {"$fieldNames":["val","field-failures"],
"render-fancy-reason":anf_variant_member2308,
"render-reason":anf_variant_member2309,
"_match":R.makeMatch("record-fields-fail",2)};
var $record$fields$fail$brander2306 = R.namedBrander("record-fields-fail",L[659]);
var $record$fields$fail$brands2307 = {};
$record$fields$fail$brands2307[FailureReason35._brand] = true;
$record$fields$fail$brands2307[$record$fields$fail$brander2306._brand] = true;
var record$fields$fail2313 = R.makeVariantConstructor(L[662],function() {
return [R.getDotAnn(L[660],"L",L23,"List")];
},["field$failures2314"],[L[661]],[false,false],["val2315","field$failures2314"],$record$fields$fail_mutablemask2311,$record$fields$fail$base2305,$record$fields$fail$brands2307,"record-fields-fail",$record$fields$fail_getfieldsref2310,$record$fields$fail_getfields2312,$record$fields$fail$base2305);
var $tuple$anns$fail_getfields2323 = function(f) {
return f(this.dict["val"],this.dict["anns-failures"]);
};
var $tuple$anns$fail_getfieldsref2321 = function(f,refmask) {
return f(R.derefField(this.dict["val"],false,refmask[0]),R.derefField(this.dict["anns-failures"],false,refmask[1]));
};
var $tuple$anns$fail_mutablemask2322 = [false,false];
var $tuple$anns$fail$base2316 = {"$fieldNames":["val","anns-failures"],
"render-fancy-reason":anf_variant_member2319,
"render-reason":anf_variant_member2320,
"_match":R.makeMatch("tuple-anns-fail",2)};
var $tuple$anns$fail$brander2317 = R.namedBrander("tuple-anns-fail",L[663]);
var $tuple$anns$fail$brands2318 = {};
$tuple$anns$fail$brands2318[FailureReason35._brand] = true;
$tuple$anns$fail$brands2318[$tuple$anns$fail$brander2317._brand] = true;
var tuple$anns$fail2324 = R.makeVariantConstructor(L[666],function() {
return [R.getDotAnn(L[664],"L",L23,"List")];
},["anns$failures2325"],[L[665]],[false,false],["val2326","anns$failures2325"],$tuple$anns$fail_mutablemask2322,$tuple$anns$fail$base2316,$tuple$anns$fail$brands2318,"tuple-anns-fail",$tuple$anns$fail_getfieldsref2321,$tuple$anns$fail_getfields2323,$tuple$anns$fail$base2316);
var $tup$length$mismatch_getfields2333 = function(f) {
return f(this.dict["loc"],this.dict["val"],this.dict["annLength"],this.dict["tupleLength"]);
};
var $tup$length$mismatch_getfieldsref2331 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["val"],false,refmask[1]),R.derefField(this.dict["annLength"],false,refmask[2]),R.derefField(this.dict["tupleLength"],false,refmask[3]));
};
var $tup$length$mismatch_mutablemask2332 = [false,false,false,false];
var $tup$length$mismatch$base2327 = {"$fieldNames":["loc","val","annLength","tupleLength"],
"render-fancy-reason":anf_variant_member2330,
"render-reason":anf_variant_member6105,
"_match":R.makeMatch("tup-length-mismatch",4)};
var $tup$length$mismatch$brander2328 = R.namedBrander("tup-length-mismatch",L[667]);
var $tup$length$mismatch$brands2329 = {};
$tup$length$mismatch$brands2329[FailureReason35._brand] = true;
$tup$length$mismatch$brands2329[$tup$length$mismatch$brander2328._brand] = true;
var tup$length$mismatch2334 = R.makeVariantConstructor(L[668],function() {
return [];
},[],[],[false,false,false,false],["loc6150","val2335","annLength2336","tupleLength2337"],$tup$length$mismatch_mutablemask2332,$tup$length$mismatch$base2327,$tup$length$mismatch$brands2329,"tup-length-mismatch",$tup$length$mismatch_getfieldsref2331,$tup$length$mismatch_getfields2333,$tup$length$mismatch$base2327);
var $dot$ann$not$present_getfields2345 = function(f) {
return f(this.dict["name"],this.dict["field"]);
};
var $dot$ann$not$present_getfieldsref2343 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["field"],false,refmask[1]));
};
var $dot$ann$not$present_mutablemask2344 = [false,false];
var $dot$ann$not$present$base2338 = {"$fieldNames":["name","field"],
"render-fancy-reason":anf_variant_member2341,
"render-reason":anf_variant_member2342,
"_match":R.makeMatch("dot-ann-not-present",2)};
var $dot$ann$not$present$brander2339 = R.namedBrander("dot-ann-not-present",L[669]);
var $dot$ann$not$present$brands2340 = {};
$dot$ann$not$present$brands2340[FailureReason35._brand] = true;
$dot$ann$not$present$brands2340[$dot$ann$not$present$brander2339._brand] = true;
var dot$ann$not$present2346 = R.makeVariantConstructor(L[670],function() {
return [];
},[],[],[false,false],["name2347","field2348"],$dot$ann$not$present_mutablemask2344,$dot$ann$not$present$base2338,$dot$ann$not$present$brands2340,"dot-ann-not-present",$dot$ann$not$present_getfieldsref2343,$dot$ann$not$present_getfields2345,$dot$ann$not$present$base2338);
var anf_assign2349 = R.makeObject({"FailureReason":G(FailureReason35,"test",L[671]),
"is-failure-at-arg":G($failure$at$arg$brander2259,"test",L[649]),
"failure-at-arg":failure$at$arg2266,
"is-ref-init":G($ref$init$brander2273,"test",L[651]),
"ref-init":ref$init2280,
"is-type-mismatch":G($type$mismatch$brander2284,"test",L[654]),
"type-mismatch":type$mismatch2291,
"is-predicate-failure":G($predicate$failure$brander2295,"test",L[657]),
"predicate-failure":predicate$failure2302,
"is-record-fields-fail":G($record$fields$fail$brander2306,"test",L[659]),
"record-fields-fail":record$fields$fail2313,
"is-tuple-anns-fail":G($tuple$anns$fail$brander2317,"test",L[663]),
"tuple-anns-fail":tuple$anns$fail2324,
"is-tup-length-mismatch":G($tup$length$mismatch$brander2328,"test",L[667]),
"tup-length-mismatch":tup$length$mismatch2334,
"is-dot-ann-not-present":G($dot$ann$not$present$brander2339,"test",L[669]),
"dot-ann-not-present":dot$ann$not$present2346});
FailureReason2350.$var = anf_assign2349;
var anf_bracket2351 = FailureReason2350.$var;
$al32 = L[671];
var anf_assign883 = G(anf_bracket2351,"FailureReason",L[671]);
is$FailureReason2352.$var = anf_assign883;
var anf_bracket2353 = FailureReason2350.$var;
$al32 = L[649];
var anf_assign893 = G(anf_bracket2353,"is-failure-at-arg",L[649]);
is$failure$at$arg2354.$var = anf_assign893;
var anf_bracket2355 = FailureReason2350.$var;
$al32 = L[649];
var anf_assign2356 = G(anf_bracket2355,"failure-at-arg",L[649]);
failure$at$arg2357.$var = anf_assign2356;
var anf_bracket2358 = FailureReason2350.$var;
$al32 = L[651];
var anf_assign2359 = G(anf_bracket2358,"is-ref-init",L[651]);
is$ref$init2360.$var = anf_assign2359;
var anf_bracket2361 = FailureReason2350.$var;
$al32 = L[651];
var anf_assign2362 = G(anf_bracket2361,"ref-init",L[651]);
ref$init2363.$var = anf_assign2362;
var anf_bracket2364 = FailureReason2350.$var;
$al32 = L[654];
var anf_assign2365 = G(anf_bracket2364,"is-type-mismatch",L[654]);
is$type$mismatch2366.$var = anf_assign2365;
var anf_bracket2367 = FailureReason2350.$var;
$al32 = L[654];
var anf_assign2368 = G(anf_bracket2367,"type-mismatch",L[654]);
type$mismatch2369.$var = anf_assign2368;
var anf_bracket2370 = FailureReason2350.$var;
$al32 = L[657];
var anf_assign2371 = G(anf_bracket2370,"is-predicate-failure",L[657]);
is$predicate$failure2372.$var = anf_assign2371;
var anf_bracket2373 = FailureReason2350.$var;
$al32 = L[657];
var anf_assign2374 = G(anf_bracket2373,"predicate-failure",L[657]);
predicate$failure2375.$var = anf_assign2374;
var anf_bracket2376 = FailureReason2350.$var;
$al32 = L[659];
var anf_assign2377 = G(anf_bracket2376,"is-record-fields-fail",L[659]);
is$record$fields$fail2378.$var = anf_assign2377;
var anf_bracket2379 = FailureReason2350.$var;
$al32 = L[659];
var anf_assign2380 = G(anf_bracket2379,"record-fields-fail",L[659]);
record$fields$fail2381.$var = anf_assign2380;
var anf_bracket2382 = FailureReason2350.$var;
$al32 = L[663];
var anf_assign2383 = G(anf_bracket2382,"is-tuple-anns-fail",L[663]);
is$tuple$anns$fail2384.$var = anf_assign2383;
var anf_bracket2385 = FailureReason2350.$var;
$al32 = L[663];
var anf_assign931 = G(anf_bracket2385,"tuple-anns-fail",L[663]);
tuple$anns$fail2386.$var = anf_assign931;
var anf_bracket2387 = FailureReason2350.$var;
$al32 = L[667];
var anf_assign2388 = G(anf_bracket2387,"is-tup-length-mismatch",L[667]);
is$tup$length$mismatch2389.$var = anf_assign2388;
var anf_bracket2390 = FailureReason2350.$var;
$al32 = L[667];
var anf_assign2391 = G(anf_bracket2390,"tup-length-mismatch",L[667]);
tup$length$mismatch2392.$var = anf_assign2391;
var anf_bracket2393 = FailureReason2350.$var;
$al32 = L[669];
var anf_assign2394 = G(anf_bracket2393,"is-dot-ann-not-present",L[669]);
is$dot$ann$not$present2395.$var = anf_assign2394;
var anf_bracket2396 = FailureReason2350.$var;
$al32 = L[669];
var anf_assign1655 = G(anf_bracket2396,"dot-ann-not-present",L[669]);
dot$ann$not$present2397.$var = anf_assign1655;
var defined_value2437 = dot$ann$not$present2397.$var;
var defined_value2438 = is$dot$ann$not$present2395.$var;
var defined_value2439 = tup$length$mismatch2392.$var;
var defined_value2440 = is$tup$length$mismatch2389.$var;
var defined_value2441 = tuple$anns$fail2386.$var;
var defined_value2442 = is$tuple$anns$fail2384.$var;
var defined_value2443 = record$fields$fail2381.$var;
var defined_value2444 = is$record$fields$fail2378.$var;
var defined_value2445 = predicate$failure2375.$var;
var defined_value2446 = is$predicate$failure2372.$var;
var defined_value2447 = type$mismatch2369.$var;
var defined_value2448 = is$type$mismatch2366.$var;
var defined_value2449 = ref$init2363.$var;
var defined_value2450 = is$ref$init2360.$var;
var defined_value2451 = failure$at$arg2357.$var;
var defined_value2452 = is$failure$at$arg2354.$var;
var defined_value2453 = is$FailureReason2352.$var;
var defined_value2454 = missing$field310.$var;
var defined_value2455 = is$missing$field307.$var;
var defined_value2456 = ann$failure304.$var;
var defined_value2457 = is$ann$failure301.$var;
var defined_value2458 = field$failure298.$var;
var defined_value2459 = is$field$failure295.$var;
var defined_value2460 = is$FieldFailure292.$var;
var defined_value2461 = fail$arg176.$var;
var defined_value2462 = is$fail$arg173.$var;
var defined_value2463 = fail170.$var;
var defined_value2464 = is$fail167.$var;
var defined_value2465 = ok164.$var;
var defined_value2466 = is$ok161.$var;
var defined_value2467 = is$ContractResult158.$var;
var defined_value2468 = draw$and$highlight48.$var;
$step28 = 1;
$al32 = L[672];
$field2398 = R.getColonFieldLoc(builtins1,"trace-value",L[672]);
if(R.isMethod($field2398)) {
$ans31 = $field2398.full_meth(builtins1,L[672],nothing2);
} else {
if(!(R.isFunction($field2398))) {
R.ffi.throwNonFunApp(L[672],$field2398);
}
$ans31 = $field2398.app(L[672],nothing2);
}
break;
case 1: var answer2435 = $ans31;
var anf_obj2399 = draw$and$highlight48.$var;
var anf_obj2400 = is$ContractResult158.$var;
var anf_obj2401 = ok164.$var;
var anf_obj2402 = is$ok161.$var;
var anf_obj1007 = fail170.$var;
var anf_obj1008 = is$fail167.$var;
var anf_obj2403 = fail$arg176.$var;
var anf_obj2404 = is$fail$arg173.$var;
var anf_obj2405 = is$FieldFailure292.$var;
var anf_obj2406 = field$failure298.$var;
var anf_obj2407 = is$field$failure295.$var;
var anf_obj2408 = ann$failure304.$var;
var anf_obj2409 = is$ann$failure301.$var;
var anf_obj2410 = missing$field310.$var;
var anf_obj2411 = is$missing$field307.$var;
var anf_obj2412 = is$FailureReason2352.$var;
var anf_obj2413 = failure$at$arg2357.$var;
var anf_obj2414 = is$failure$at$arg2354.$var;
var anf_obj2415 = ref$init2363.$var;
var anf_obj2416 = is$ref$init2360.$var;
var anf_obj2417 = type$mismatch2369.$var;
var anf_obj2418 = is$type$mismatch2366.$var;
var anf_obj2419 = predicate$failure2375.$var;
var anf_obj2420 = is$predicate$failure2372.$var;
var anf_obj2421 = record$fields$fail2381.$var;
var anf_obj2422 = is$record$fields$fail2378.$var;
var anf_obj2423 = tuple$anns$fail2386.$var;
var anf_obj2424 = is$tuple$anns$fail2384.$var;
var anf_obj2425 = tup$length$mismatch2392.$var;
var anf_obj2426 = is$tup$length$mismatch2389.$var;
var anf_obj2427 = dot$ann$not$present2397.$var;
var anf_obj2428 = is$dot$ann$not$present2395.$var;
var provides2434 = R.makeObject({"draw-and-highlight":anf_obj2399,
"is-ContractResult":anf_obj2400,
"ok":anf_obj2401,
"is-ok":anf_obj2402,
"fail":anf_obj1007,
"is-fail":anf_obj1008,
"fail-arg":anf_obj2403,
"is-fail-arg":anf_obj2404,
"is-FieldFailure":anf_obj2405,
"field-failure":anf_obj2406,
"is-field-failure":anf_obj2407,
"ann-failure":anf_obj2408,
"is-ann-failure":anf_obj2409,
"missing-field":anf_obj2410,
"is-missing-field":anf_obj2411,
"is-FailureReason":anf_obj2412,
"failure-at-arg":anf_obj2413,
"is-failure-at-arg":anf_obj2414,
"ref-init":anf_obj2415,
"is-ref-init":anf_obj2416,
"type-mismatch":anf_obj2417,
"is-type-mismatch":anf_obj2418,
"predicate-failure":anf_obj2419,
"is-predicate-failure":anf_obj2420,
"record-fields-fail":anf_obj2421,
"is-record-fields-fail":anf_obj2422,
"tuple-anns-fail":anf_obj2423,
"is-tuple-anns-fail":anf_obj2424,
"tup-length-mismatch":anf_obj2425,
"is-tup-length-mismatch":anf_obj2426,
"dot-ann-not-present":anf_obj2427,
"is-dot-ann-not-present":anf_obj2428});
$step28 = 2;
$al32 = L[28];
$field2429 = R.getColonFieldLoc(builtins1,"current-checker",L[28]);
if(R.isMethod($field2429)) {
$ans31 = $field2429.full_meth(builtins1);
} else {
if(!(R.isFunction($field2429))) {
R.ffi.throwNonFunApp(L[28],$field2429);
}
$ans31 = $field2429.app();
}
break;
case 2: var anf_method_obj2430 = $ans31;
$step28 = 3;
$al32 = L[28];
$field2432 = R.getColonFieldLoc(anf_method_obj2430,"results",L[28]);
if(R.isMethod($field2432)) {
$ans31 = $field2432.full_meth(anf_method_obj2430);
} else {
if(!(R.isFunction($field2432))) {
R.ffi.throwNonFunApp(L[28],$field2432);
}
$ans31 = $field2432.app();
}
break;
case 3: var checks2436 = $ans31;
$step28 = 4;
$ans31 = R.makeObject({"answer":answer2435,
"namespace":NAMESPACE,
"defined-values":{"dot-ann-not-present":defined_value2437,
"is-dot-ann-not-present":defined_value2438,
"tup-length-mismatch":defined_value2439,
"is-tup-length-mismatch":defined_value2440,
"tuple-anns-fail":defined_value2441,
"is-tuple-anns-fail":defined_value2442,
"record-fields-fail":defined_value2443,
"is-record-fields-fail":defined_value2444,
"predicate-failure":defined_value2445,
"is-predicate-failure":defined_value2446,
"type-mismatch":defined_value2447,
"is-type-mismatch":defined_value2448,
"ref-init":defined_value2449,
"is-ref-init":defined_value2450,
"failure-at-arg":defined_value2451,
"is-failure-at-arg":defined_value2452,
"is-FailureReason":defined_value2453,
"missing-field":defined_value2454,
"is-missing-field":defined_value2455,
"ann-failure":defined_value2456,
"is-ann-failure":defined_value2457,
"field-failure":defined_value2458,
"is-field-failure":defined_value2459,
"is-FieldFailure":defined_value2460,
"fail-arg":defined_value2461,
"is-fail-arg":defined_value2462,
"fail":defined_value2463,
"is-fail":defined_value2464,
"ok":defined_value2465,
"is-ok":defined_value2466,
"is-ContractResult":defined_value2467,
"draw-and-highlight":defined_value2468,
"ED":ED2,
"O":O20,
"L":L19},
"defined-types":{"FailureReason":FailureReason138,
"O":O24,
"L":L23,
"FieldFailure":FieldFailure1581,
"ContractResult":ContractResult2433,
"ED":ED21},
"provide-plus-types":R.makeObject({"values":provides2434,
"types":{"ContractResult":ContractResult2433,
"FieldFailure":FieldFailure1581,
"FailureReason":FailureReason138}}),
"checks":checks2436});
break;
case 4: ++R.GAS;
return $ans31;
default: throw "No case numbered " + $step28 + " in $toplevel29";
}
}
} catch($e2469) {
if(R.isCont($e2469) && ($step28 !== 4)) {
$e2469.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al32,$toplevel29,$step28,[],[ContractResult2433,FieldFailure1581,FailureReason138,draw$and$highlight48,is$ContractResult158,is$ok161,ok164,is$fail167,fail170,is$fail$arg173,fail$arg176,is$FieldFailure292,is$field$failure295,field$failure298,is$ann$failure301,ann$failure304,is$missing$field307,missing$field310,is$FailureReason2352,is$failure$at$arg2354,failure$at$arg2357,is$ref$init2360,ref$init2363,is$type$mismatch2366,type$mismatch2369,is$predicate$failure2372,predicate$failure2375,is$record$fields$fail2378,record$fields$fail2381,is$tuple$anns$fail2384,tuple$anns$fail2386,is$tup$length$mismatch2389,tup$length$mismatch2392,is$dot$ann$not$present2395,dot$ann$not$present2397,defined_value2437,defined_value2438,defined_value2439,defined_value2440,defined_value2441,defined_value2442,defined_value2443,defined_value2444,defined_value2445,defined_value2446,defined_value2447,defined_value2448,defined_value2449,defined_value2450,defined_value2451,defined_value2452,defined_value2453,defined_value2454,defined_value2455,defined_value2456,defined_value2457,defined_value2458,defined_value2459,defined_value2460,defined_value2461,defined_value2462,defined_value2463,defined_value2464,defined_value2465,defined_value2466,defined_value2467,defined_value2468,answer2435,provides2434]);
}
if(R.isPyretException($e2469)) {
$e2469.pyretStack.push($al32);
}
throw $e2469;
}
};
return R.safeCall($toplevel29,function(moduleVal) {
R.modules["$builtin://contracts25"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://srcloc":({"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{"builtin":"tany",
"is-Srcloc":"tany",
"is-builtin":"tany",
"is-srcloc":"tany",
"srcloc":"tany"},
"datatypes":{"atom#Srcloc#1":["data","Srcloc",[],[["builtin",
[["module-name",
"tany"]]],["srcloc",
[["end-char",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["end-column",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["end-line",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["start-char",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["start-column",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["start-line",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["source",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{"key":["arrow",
["tany"],
"tany"],
"format":["arrow",
["tany",
"tany"],
"tany"],
"is-builtin":["arrow",
["tany"],
"tany"],
"after":["arrow",
["tany",
"tany"],
"tany"]}]},
"aliases":{"Srcloc":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import23,$VS19) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://srcloc";
var D = R.undefined;
var L = [[M,99,29,3395,99,47,3413],
[M,99,2,3368,99,51,3417],
[M,12,20,187,12,36,203],
[M,12,6,173,12,42,209],
[M,12,6,173,12,36,203],
[M,11,4,143,13,7,217],
[M,14,22,241,14,38,257],
[M,14,4,223,14,42,261],
[M,16,6,304,16,16,314],
[M,16,6,304,16,23,321],
[M,16,29,327,16,46,344],
[M,16,50,348,16,66,364],
[M,16,28,326,16,67,365],
[M,16,29,327,16,66,364],
[M,15,4,267,17,7,373],
[M,20,35,469,20,51,485],
[M,20,54,488,20,71,505],
[M,20,35,469,20,71,505],
[M,20,10,444,20,30,464],
[M,19,6,413,22,9,563],
[M,21,10,517,21,37,544],
[M,19,12,419,19,18,425],
[M,18,4,379,23,7,571],
[M,24,4,577,24,37,610],
[M,39,9,1140,39,18,1149],
[M,40,8,1159,40,19,1170],
[M,40,37,1188,40,52,1203],
[M,40,71,1222,40,88,1239],
[M,41,27,1268,41,40,1281],
[M,41,59,1300,41,74,1315],
[M,40,8,1159,41,75,1316],
[M,41,50,1291,41,75,1316],
[M,40,8,1159,41,47,1288],
[M,40,8,1159,41,41,1282],
[M,41,18,1259,41,41,1282],
[M,40,8,1159,41,15,1256],
[M,40,8,1159,40,89,1240],
[M,40,62,1213,40,89,1240],
[M,40,8,1159,40,59,1210],
[M,40,8,1159,40,53,1204],
[M,40,28,1179,40,53,1204],
[M,40,8,1159,40,25,1176],
[M,43,27,1356,43,42,1371],
[M,43,69,1398,43,86,1415],
[M,43,8,1337,43,87,1416],
[M,43,60,1389,43,87,1416],
[M,43,8,1337,43,57,1386],
[M,43,8,1337,43,43,1372],
[M,43,18,1347,43,43,1372],
[M,34,4,844,45,7,1434],
[M,46,22,1458,46,33,1469],
[M,46,51,1487,46,66,1502],
[M,46,85,1521,46,98,1534],
[M,46,22,1458,46,99,1535],
[M,46,76,1512,46,99,1535],
[M,46,22,1458,46,73,1509],
[M,46,22,1458,46,67,1503],
[M,46,42,1478,46,67,1503],
[M,46,22,1458,46,39,1475],
[M,46,4,1440,46,103,1539],
[M,48,6,1592,48,15,1601],
[M,48,6,1592,48,22,1608],
[M,48,28,1614,48,39,1625],
[M,48,43,1629,48,55,1641],
[M,48,27,1613,48,56,1642],
[M,48,28,1614,48,55,1641],
[M,47,36,1577,47,42,1583],
[M,47,4,1545,49,7,1650],
[M,53,10,1840,53,20,1850],
[M,52,6,1809,55,9,1921],
[M,54,18,1877,54,33,1892],
[M,54,36,1895,54,52,1911],
[M,54,18,1877,54,52,1911],
[M,52,12,1815,52,18,1821],
[M,50,33,1685,50,39,1691],
[M,50,4,1656,56,7,1929],
[M,58,6,1964,58,12,1970],
[M,58,13,1971,58,24,1982],
[M,59,8,1992,59,23,2007],
[M,59,25,2009,59,42,2026],
[M,59,44,2028,59,59,2043],
[M,60,8,2053,60,23,2068],
[M,60,25,2070,60,42,2087],
[M,60,44,2089,60,59,2104],
[M,58,6,1964,60,60,2105],
[M,57,4,1935,61,7,2113],
[M,63,6,2146,63,12,2152],
[M,63,13,2153,63,24,2164],
[M,64,8,2174,64,21,2187],
[M,64,23,2189,64,38,2204],
[M,64,40,2206,64,53,2219],
[M,65,8,2229,65,21,2242],
[M,65,23,2244,65,38,2259],
[M,65,40,2261,65,53,2274],
[M,63,6,2146,65,54,2275],
[M,62,4,2119,66,7,2283],
[M,69,9,2408,69,24,2423],
[M,69,28,2427,69,44,2443],
[M,69,9,2408,69,44,2443],
[M,70,11,2456,70,24,2469],
[M,70,28,2473,70,42,2487],
[M,70,11,2456,70,42,2487],
[M,73,10,2528,73,16,2534],
[M,73,17,2535,73,28,2546],
[M,74,12,2560,74,27,2575],
[M,74,29,2577,74,46,2594],
[M,74,48,2596,74,63,2611],
[M,75,12,2625,75,26,2639],
[M,75,28,2641,75,44,2657],
[M,75,46,2659,75,60,2673],
[M,73,10,2528,75,61,2674],
[M,78,11,2710,78,24,2723],
[M,78,27,2726,78,41,2740],
[M,78,11,2710,78,41,2740],
[M,79,10,2752,79,16,2758],
[M,79,17,2759,79,28,2770],
[M,80,12,2784,80,28,2800],
[M,80,30,2802,80,48,2820],
[M,80,50,2822,80,66,2838],
[M,81,12,2852,81,25,2865],
[M,81,27,2867,81,42,2882],
[M,81,44,2884,81,57,2897],
[M,79,10,2752,81,58,2898],
[M,67,40,2325,67,49,2334],
[M,67,32,2317,67,50,2335],
[M,67,4,2289,86,7,2958],
[M,89,9,3082,89,24,3097],
[M,89,28,3101,89,42,3115],
[M,89,9,3082,89,42,3115],
[M,90,8,3125,90,14,3131],
[M,90,15,3132,90,26,3143],
[M,91,10,3155,91,25,3170],
[M,91,27,3172,91,44,3189],
[M,91,46,3191,91,61,3206],
[M,92,10,3218,92,26,3234],
[M,92,28,3236,92,46,3254],
[M,92,48,3256,92,64,3272],
[M,90,8,3125,92,65,3273],
[M,87,39,2999,87,48,3008],
[M,87,31,2991,87,49,3009],
[M,87,4,2964,96,7,3316],
[M,97,4,3322,97,38,3356],
[M,10,2,110,24,37,610],
[M,10,4,112,10,24,132],
[M,25,2,613,97,38,3356],
[M,26,18,641,26,24,647],
[M,27,22,671,27,28,677],
[M,28,24,703,28,30,709],
[M,29,22,733,29,28,739],
[M,30,20,761,30,26,767],
[M,31,22,791,31,28,797],
[M,32,20,819,32,26,825],
[M,25,4,615,33,7,833],
[M,9,0,95,100,3,3421],
["dummy location"],
[M,3,0,21,100,3,3421]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$String7 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var _lessequal3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_lessequal");
var _greaterequal4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_greaterequal");
var _greaterthan16 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_greaterthan");
var _lessthan10 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_lessthan");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var tostring1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var VS11 = R.getField($VS19,"values");
var VS16 = R.getField($VS19,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import23);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS19);
var $toplevel25 = function($$resumer101) {
var $step24 = 0;
var $ans32 = D;
var $al33 = L[155];
try {
if(R.isActivationRecord($$resumer101)) {
$step24 = $$resumer101.step;
$al33 = $$resumer101.from;
$ans32 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
Srcloc103 = $$resumer101.vars[0];
is$Srcloc483 = $$resumer101.vars[1];
is$builtin73 = $$resumer101.vars[2];
builtin484 = $$resumer101.vars[3];
is$srcloc166 = $$resumer101.vars[4];
srcloc196 = $$resumer101.vars[5];
defined_value504 = $$resumer101.vars[6];
defined_value505 = $$resumer101.vars[7];
defined_value506 = $$resumer101.vars[8];
defined_value507 = $$resumer101.vars[9];
defined_value508 = $$resumer101.vars[10];
answer502 = $$resumer101.vars[11];
provides501 = $$resumer101.vars[12];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step24) {
case 0: var Srcloc34 = R.namedBrander("Srcloc",L[153]);
var Srcloc103 = R.makeBranderAnn(Srcloc34,"Srcloc");
var Srcloc482 = {"$var":D};
var is$Srcloc483 = {"$var":D};
var is$builtin73 = {"$var":D};
var builtin484 = {"$var":D};
var is$srcloc166 = {"$var":D};
var srcloc196 = {"$var":D};
var $temp_full36 = function($self127,$other37) {
var $step35 = 0;
var $ans38 = D;
var $al39 = L[1];
try {
if(R.isActivationRecord($self127)) {
$step35 = $self127.step;
$al39 = $self127.from;
$ans38 = $self127.ans;
self127 = $self127.args[0];
other37 = $self127.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1],2,$t);
}
var self127 = $self127;
var other37 = $other37;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step35) {
case 0: $step35 = 1;
$al39 = L[0];
$field40 = R.getColonFieldLoc(other37,"before",L[0]);
if(R.isMethod($field40)) {
$ans38 = $field40.full_meth(other37,self127);
} else {
if(!(R.isFunction($field40))) {
R.ffi.throwNonFunApp(L[0],$field40);
}
$ans38 = $field40.app(self127);
}
break;
case 1: ++R.GAS;
return $ans38;
default: throw "No case numbered " + $step35 + " in $temp_full36";
}
}
} catch($e41) {
if(R.isCont($e41) && ($step35 !== 1)) {
$e41.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al39,$temp_full36,$step35,[self127,other37],[]);
}
if(R.isPyretException($e41)) {
$e41.pyretStack.push($al39);
}
throw $e41;
}
};
var anf_shared445 = R.makeMethod1($temp_full36,"after");
var $temp_full43 = function($self44,$$underscore54) {
var $step42 = 0;
var $ans47 = D;
var $al48 = L[5];
try {
if(R.isActivationRecord($self44)) {
$step42 = $self44.step;
$al48 = $self44.from;
$ans47 = $self44.ans;
self44 = $self44.args[0];
$underscore54 = $self44.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],2,$t);
}
var self44 = $self44;
var $underscore54 = $$underscore54;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step42) {
case 0: $al48 = L[2];
var anf_arg50 = G(self44,"module-name",L[2]);
$step42 = 1;
$al48 = L[4];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al48,_plus1);
}
$ans47 = _plus1.app(("<builtin "),anf_arg50);
break;
case 1: var anf_arg73 = $ans47;
$step42 = 2;
$al48 = L[3];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al48,_plus1);
}
$ans47 = _plus1.app(anf_arg73,(">"));
break;
case 2: ++R.GAS;
return $ans47;
default: throw "No case numbered " + $step42 + " in $temp_full43";
}
}
} catch($e53) {
if(R.isCont($e53) && ($step42 !== 2)) {
$e53.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al48,$temp_full43,$step42,[self44,$underscore54],[]);
}
if(R.isPyretException($e53)) {
$e53.pyretStack.push($al48);
}
throw $e53;
}
};
var anf_variant_member449 = R.makeMethod1($temp_full43,"format");
var $temp_full55 = function($self56) {
var $step54 = 0;
var $ans59 = D;
var $al60 = L[7];
try {
if(R.isActivationRecord($self56)) {
$step54 = $self56.step;
$al60 = $self56.from;
$ans59 = $self56.ans;
self56 = $self56.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[7],1,$t);
}
var self56 = $self56;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step54) {
case 0: $step54 = 1;
$al60 = L[6];
$ans59 = G(self56,"module-name",L[6]);
break;
case 1: ++R.GAS;
return $ans59;
default: throw "No case numbered " + $step54 + " in $temp_full55";
}
}
} catch($e64) {
if(R.isCont($e64) && ($step54 !== 1)) {
$e64.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al60,$temp_full55,$step54,[self56],[]);
}
if(R.isPyretException($e64)) {
$e64.pyretStack.push($al60);
}
throw $e64;
}
};
var anf_variant_member450 = R.makeMethod0($temp_full55,"key");
var $temp_full66 = function($self62,$other67) {
var $step65 = 0;
var $ans71 = D;
var $al72 = L[14];
try {
if(R.isActivationRecord($self62)) {
$step65 = $self62.step;
$al72 = $self62.from;
$ans71 = $self62.ans;
self62 = $self62.args[0];
other67 = $self62.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[14],2,$t);
}
var self62 = $self62;
var other67 = $other67;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step65) {
case 0: var anf_fun75 = is$builtin73.$var === D?U(L[8],"is-builtin"):is$builtin73.$var;
$step65 = 1;
$al72 = L[9];
if(!(R.isFunction(anf_fun75))) {
R.ffi.throwNonFunApp($al72,anf_fun75);
}
$ans71 = anf_fun75.app(other67);
break;
case 1: var anf_arg76 = $ans71;
$al72 = L[9];
var anf_if77 = R.checkWrapBoolean(anf_arg76);
$step65 = R.isPyretTrue(anf_if77)?2:4;
break;
case 2: $al72 = L[10];
var anf_arg80 = G(other67,"module-name",L[10]);
$al72 = L[11];
var anf_arg83 = G(self62,"module-name",L[11]);
$step65 = 3;
$al72 = L[13];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al72,equal$always2);
}
$ans71 = equal$always2.app(anf_arg80,anf_arg83);
break;
case 3: var anf_arg94 = $ans71;
$step65 = 5;
$al72 = L[12];
$ans71 = R.checkWrapBoolean(anf_arg94);
break;
case 4: $step65 = 5;
$ans71 = (false);
break;
case 5: ++R.GAS;
return $ans71;
default: throw "No case numbered " + $step65 + " in $temp_full66";
}
}
} catch($e85) {
if(R.isCont($e85) && ($step65 !== 5)) {
$e85.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al72,$temp_full66,$step65,[self62,other67],[]);
}
if(R.isPyretException($e85)) {
$e85.pyretStack.push($al72);
}
throw $e85;
}
};
var anf_variant_member451 = R.makeMethod1($temp_full66,"same-file");
var $temp_full87 = function($self88,$other89) {
var $step86 = 0;
var $ans90 = D;
var $al91 = L[22];
try {
if(R.isActivationRecord($self88)) {
$step86 = $self88.step;
$al91 = $self88.from;
$ans90 = $self88.ans;
self88 = $self88.args[0];
other89 = $self88.args[1];
cases92 = $self88.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[22],2,$t);
}
var self88 = $self88;
var other89 = $other89;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step86) {
case 0: var cases92 = other89;
$step86 = 1;
$al91 = L[21];
R._checkAnn(L[21],Srcloc103,cases92);
break;
case 1: var $cases_dispatch102 = {"builtin":2,
"srcloc":3};
$al91 = L[19];
$step86 = $cases_dispatch102[cases92.$name] || 4;
break;
case 2: if(cases92.$arity !== 1) {
if(cases92.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[18],1,cases92.$arity,L[19]);
} else {
R.ffi.throwCasesSingletonErrorC(L[18],true,L[19]);
}
}
var $fn187 = cases92.$constructor.$fieldNames;
R.derefField(cases92.dict[$fn187[0]],cases92.$mut_fields_mask[0],false);
$al91 = L[15];
var anf_arg93 = G(self88,"module-name",L[15]);
$al91 = L[16];
var anf_arg96 = G(other89,"module-name",L[16]);
$step86 = 5;
$al91 = L[17];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al91,_lessthan10);
}
$ans90 = _lessthan10.app(anf_arg93,anf_arg96);
break;
case 3: if(cases92.$arity !== 7) {
if(cases92.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[20],7,cases92.$arity,L[19]);
} else {
R.ffi.throwCasesSingletonErrorC(L[20],true,L[19]);
}
}
var $fn187 = cases92.$constructor.$fieldNames;
R.derefField(cases92.dict[$fn187[0]],cases92.$mut_fields_mask[0],false);
R.derefField(cases92.dict[$fn187[1]],cases92.$mut_fields_mask[1],false);
R.derefField(cases92.dict[$fn187[2]],cases92.$mut_fields_mask[2],false);
R.derefField(cases92.dict[$fn187[3]],cases92.$mut_fields_mask[3],false);
R.derefField(cases92.dict[$fn187[4]],cases92.$mut_fields_mask[4],false);
R.derefField(cases92.dict[$fn187[5]],cases92.$mut_fields_mask[5],false);
R.derefField(cases92.dict[$fn187[6]],cases92.$mut_fields_mask[6],false);
$step86 = 5;
$ans90 = (false);
break;
case 4: $step86 = 5;
$al91 = L[19];
$ans90 = R.throwNoCasesMatched(L[19],cases92);
break;
case 5: ++R.GAS;
return $ans90;
default: throw "No case numbered " + $step86 + " in $temp_full87";
}
}
} catch($e107) {
if(R.isCont($e107) && ($step86 !== 5)) {
$e107.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al91,$temp_full87,$step86,[self88,other89],[cases92]);
}
if(R.isPyretException($e107)) {
$e107.pyretStack.push($al91);
}
throw $e107;
}
};
var anf_variant_member452 = R.makeMethod1($temp_full87,"before");
var $temp_full110 = function($self131) {
var $step109 = 0;
var $ans113 = D;
var $al114 = L[23];
try {
if(R.isActivationRecord($self131)) {
$step109 = $self131.step;
$al114 = $self131.from;
$ans113 = $self131.ans;
self131 = $self131.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[23],1,$t);
}
var self131 = $self131;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step109) {
case 0: $step109 = 1;
$ans113 = (true);
break;
case 1: ++R.GAS;
return $ans113;
default: throw "No case numbered " + $step109 + " in $temp_full110";
}
}
} catch($e117) {
if(R.isCont($e117) && ($step109 !== 1)) {
$e117.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al114,$temp_full110,$step109,[self131],[]);
}
if(R.isPyretException($e117)) {
$e117.pyretStack.push($al114);
}
throw $e117;
}
};
var anf_variant_member453 = R.makeMethod0($temp_full110,"is-builtin");
var $temp_full119 = function($self120,$show$file121) {
var $step118 = 0;
var $ans122 = D;
var $al123 = L[49];
try {
if(R.isActivationRecord($self120)) {
$step118 = $self120.step;
$al123 = $self120.from;
$ans122 = $self120.ans;
self120 = $self120.args[0];
show$file121 = $self120.args[1];
anf_arg125 = $self120.vars[0];
anf_arg132 = $self120.vars[1];
anf_arg135 = $self120.vars[2];
anf_arg141 = $self120.vars[3];
anf_arg144 = $self120.vars[4];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[49],2,$t);
}
var self120 = $self120;
var show$file121 = $show$file121;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step118) {
case 0: $al123 = L[24];
var anf_if145 = R.checkWrapBoolean(show$file121);
$step118 = R.isPyretTrue(anf_if145)?1:13;
break;
case 1: $al123 = L[25];
var anf_arg124 = G(self120,"source",L[25]);
$step118 = 2;
$al123 = L[41];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg124,(":"));
break;
case 2: var anf_arg125 = $ans122;
$al123 = L[26];
var anf_arg118 = G(self120,"start-line",L[26]);
$step118 = 3;
$al123 = L[40];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al123,tostring1);
}
$ans122 = tostring1.app(anf_arg118);
break;
case 3: var anf_arg128 = $ans122;
$step118 = 4;
$al123 = L[39];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg125,anf_arg128);
break;
case 4: var anf_arg130 = $ans122;
$step118 = 5;
$al123 = L[38];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg130,(":"));
break;
case 5: var anf_arg132 = $ans122;
$al123 = L[27];
var anf_arg131 = G(self120,"start-column",L[27]);
$step118 = 6;
$al123 = L[37];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al123,tostring1);
}
$ans122 = tostring1.app(anf_arg131);
break;
case 6: var anf_arg49 = $ans122;
$step118 = 7;
$al123 = L[36];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg132,anf_arg49);
break;
case 7: var anf_arg133 = $ans122;
$step118 = 8;
$al123 = L[35];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg133,("-"));
break;
case 8: var anf_arg135 = $ans122;
$al123 = L[28];
var anf_arg134 = G(self120,"end-line",L[28]);
$step118 = 9;
$al123 = L[34];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al123,tostring1);
}
$ans122 = tostring1.app(anf_arg134);
break;
case 9: var anf_arg137 = $ans122;
$step118 = 10;
$al123 = L[33];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg135,anf_arg137);
break;
case 10: var anf_arg138 = $ans122;
$step118 = 11;
$al123 = L[32];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg138,(":"));
break;
case 11: var anf_arg141 = $ans122;
$al123 = L[29];
var anf_arg140 = G(self120,"end-column",L[29]);
$step118 = 12;
$al123 = L[31];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al123,tostring1);
}
$ans122 = tostring1.app(anf_arg140);
break;
case 12: var anf_arg95 = $ans122;
$step118 = 18;
$al123 = L[30];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg141,anf_arg95);
break;
case 13: $al123 = L[42];
var anf_arg97 = G(self120,"start-line",L[42]);
$step118 = 14;
$al123 = L[48];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al123,tostring1);
}
$ans122 = tostring1.app(anf_arg97);
break;
case 14: var anf_arg142 = $ans122;
$step118 = 15;
$al123 = L[47];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(("line "),anf_arg142);
break;
case 15: var anf_arg143 = $ans122;
$step118 = 16;
$al123 = L[46];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg143,(", column "));
break;
case 16: var anf_arg144 = $ans122;
$al123 = L[43];
var anf_arg112 = G(self120,"start-column",L[43]);
$step118 = 17;
$al123 = L[45];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al123,tostring1);
}
$ans122 = tostring1.app(anf_arg112);
break;
case 17: var anf_arg113 = $ans122;
$step118 = 18;
$al123 = L[44];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al123,_plus1);
}
$ans122 = _plus1.app(anf_arg144,anf_arg113);
break;
case 18: ++R.GAS;
return $ans122;
default: throw "No case numbered " + $step118 + " in $temp_full119";
}
}
} catch($e146) {
if(R.isCont($e146) && ($step118 !== 18)) {
$e146.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al123,$temp_full119,$step118,[self120,show$file121],[anf_arg125,anf_arg132,anf_arg135,anf_arg141,anf_arg144]);
}
if(R.isPyretException($e146)) {
$e146.pyretStack.push($al123);
}
throw $e146;
}
};
var anf_variant_member462 = R.makeMethod1($temp_full119,"format");
var $temp_full148 = function($self149) {
var $step147 = 0;
var $ans150 = D;
var $al151 = L[59];
try {
if(R.isActivationRecord($self149)) {
$step147 = $self149.step;
$al151 = $self149.from;
$ans150 = $self149.ans;
self149 = $self149.args[0];
anf_arg153 = $self149.vars[0];
anf_arg155 = $self149.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[59],1,$t);
}
var self149 = $self149;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step147) {
case 0: $al151 = L[50];
var anf_arg152 = G(self149,"source",L[50]);
$step147 = 1;
$al151 = L[58];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al151,_plus1);
}
$ans150 = _plus1.app(anf_arg152,(":"));
break;
case 1: var anf_arg153 = $ans150;
$al151 = L[51];
var anf_arg126 = G(self149,"start-char",L[51]);
$step147 = 2;
$al151 = L[57];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al151,tostring1);
}
$ans150 = tostring1.app(anf_arg126);
break;
case 2: var anf_arg127 = $ans150;
$step147 = 3;
$al151 = L[56];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al151,_plus1);
}
$ans150 = _plus1.app(anf_arg153,anf_arg127);
break;
case 3: var anf_arg154 = $ans150;
$step147 = 4;
$al151 = L[55];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al151,_plus1);
}
$ans150 = _plus1.app(anf_arg154,("-"));
break;
case 4: var anf_arg155 = $ans150;
$al151 = L[52];
var anf_arg136 = G(self149,"end-char",L[52]);
$step147 = 5;
$al151 = L[54];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al151,tostring1);
}
$ans150 = tostring1.app(anf_arg136);
break;
case 5: var anf_arg139 = $ans150;
$step147 = 6;
$al151 = L[53];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al151,_plus1);
}
$ans150 = _plus1.app(anf_arg155,anf_arg139);
break;
case 6: ++R.GAS;
return $ans150;
default: throw "No case numbered " + $step147 + " in $temp_full148";
}
}
} catch($e157) {
if(R.isCont($e157) && ($step147 !== 6)) {
$e157.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al151,$temp_full148,$step147,[self149],[anf_arg153,anf_arg155]);
}
if(R.isPyretException($e157)) {
$e157.pyretStack.push($al151);
}
throw $e157;
}
};
var anf_variant_member463 = R.makeMethod0($temp_full148,"key");
var $temp_full161 = function($self162,$other163) {
var $step160 = 0;
var $ans164 = D;
var $al165 = L[67];
try {
if(R.isActivationRecord($self162)) {
$step160 = $self162.step;
$al165 = $self162.from;
$ans164 = $self162.ans;
self162 = $self162.args[0];
other163 = $self162.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[67],2,$t);
}
var self162 = $self162;
var other163 = $other163;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step160) {
case 0: $step160 = 1;
$al165 = L[66];
R._checkAnn(L[66],Srcloc103,other163);
break;
case 1: var anf_fun167 = is$srcloc166.$var === D?U(L[60],"is-srcloc"):is$srcloc166.$var;
$step160 = 2;
$al165 = L[61];
if(!(R.isFunction(anf_fun167))) {
R.ffi.throwNonFunApp($al165,anf_fun167);
}
$ans164 = anf_fun167.app(other163);
break;
case 2: var anf_arg168 = $ans164;
$al165 = L[61];
var anf_if172 = R.checkWrapBoolean(anf_arg168);
$step160 = R.isPyretTrue(anf_if172)?3:5;
break;
case 3: $al165 = L[62];
var anf_arg169 = G(self162,"source",L[62]);
$al165 = L[63];
var anf_arg172 = G(other163,"source",L[63]);
$step160 = 4;
$al165 = L[65];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al165,equal$always2);
}
$ans164 = equal$always2.app(anf_arg169,anf_arg172);
break;
case 4: var anf_arg171 = $ans164;
$step160 = 6;
$al165 = L[64];
$ans164 = R.checkWrapBoolean(anf_arg171);
break;
case 5: $step160 = 6;
$ans164 = (false);
break;
case 6: ++R.GAS;
return $ans164;
default: throw "No case numbered " + $step160 + " in $temp_full161";
}
}
} catch($e173) {
if(R.isCont($e173) && ($step160 !== 6)) {
$e173.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al165,$temp_full161,$step160,[self162,other163],[]);
}
if(R.isPyretException($e173)) {
$e173.pyretStack.push($al165);
}
throw $e173;
}
};
var anf_variant_member464 = R.makeMethod1($temp_full161,"same-file");
var $temp_full175 = function($self176,$other177) {
var $step174 = 0;
var $ans180 = D;
var $al181 = L[75];
try {
if(R.isActivationRecord($self176)) {
$step174 = $self176.step;
$al181 = $self176.from;
$ans180 = $self176.ans;
self176 = $self176.args[0];
other177 = $self176.args[1];
cases182 = $self176.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[75],2,$t);
}
var self176 = $self176;
var other177 = $other177;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step174) {
case 0: $step174 = 1;
$al181 = L[74];
R._checkAnn(L[74],Srcloc103,other177);
break;
case 1: var cases182 = other177;
$step174 = 2;
$al181 = L[73];
R._checkAnn(L[73],Srcloc103,cases182);
break;
case 2: var $cases_dispatch190 = {"builtin":3};
$al181 = L[69];
$step174 = $cases_dispatch190[cases182.$name] || 4;
break;
case 3: if(cases182.$arity !== 1) {
if(cases182.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[68],1,cases182.$arity,L[69]);
} else {
R.ffi.throwCasesSingletonErrorC(L[68],true,L[69]);
}
}
var $fn187 = cases182.$constructor.$fieldNames;
R.derefField(cases182.dict[$fn187[0]],cases182.$mut_fields_mask[0],false);
$step174 = 5;
$ans180 = (true);
break;
case 4: $al181 = L[70];
var anf_arg187 = G(self176,"start-char",L[70]);
$al181 = L[71];
var anf_arg188 = G(other177,"start-char",L[71]);
$step174 = 5;
$al181 = L[72];
if(!(R.isFunction(_lessthan10))) {
R.ffi.throwNonFunApp($al181,_lessthan10);
}
$ans180 = _lessthan10.app(anf_arg187,anf_arg188);
break;
case 5: ++R.GAS;
return $ans180;
default: throw "No case numbered " + $step174 + " in $temp_full175";
}
}
} catch($e191) {
if(R.isCont($e191) && ($step174 !== 5)) {
$e191.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al181,$temp_full175,$step174,[self176,other177],[cases182]);
}
if(R.isPyretException($e191)) {
$e191.pyretStack.push($al181);
}
throw $e191;
}
};
var anf_variant_member465 = R.makeMethod1($temp_full175,"before");
var $temp_full193 = function($self78) {
var $step192 = 0;
var $ans194 = D;
var $al195 = L[85];
try {
if(R.isActivationRecord($self78)) {
$step192 = $self78.step;
$al195 = $self78.from;
$ans194 = $self78.ans;
self78 = $self78.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[85],1,$t);
}
var self78 = $self78;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step192) {
case 0: var anf_fun197 = srcloc196.$var === D?U(L[76],"srcloc"):srcloc196.$var;
$al195 = L[77];
var anf_arg192 = G(self78,"source",L[77]);
$al195 = L[78];
var anf_arg202 = G(self78,"start-line",L[78]);
$al195 = L[79];
var anf_arg198 = G(self78,"start-column",L[79]);
$al195 = L[80];
var anf_arg199 = G(self78,"start-char",L[80]);
$al195 = L[81];
var anf_arg203 = G(self78,"start-line",L[81]);
$al195 = L[82];
var anf_arg204 = G(self78,"start-column",L[82]);
$al195 = L[83];
var anf_arg205 = G(self78,"start-char",L[83]);
$step192 = 1;
$al195 = L[84];
if(!(R.isFunction(anf_fun197))) {
R.ffi.throwNonFunApp($al195,anf_fun197);
}
$ans194 = anf_fun197.app(anf_arg192,anf_arg202,anf_arg198,anf_arg199,anf_arg203,anf_arg204,anf_arg205);
break;
case 1: ++R.GAS;
return $ans194;
default: throw "No case numbered " + $step192 + " in $temp_full193";
}
}
} catch($e208) {
if(R.isCont($e208) && ($step192 !== 1)) {
$e208.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al195,$temp_full193,$step192,[self78],[]);
}
if(R.isPyretException($e208)) {
$e208.pyretStack.push($al195);
}
throw $e208;
}
};
var anf_variant_member466 = R.makeMethod0($temp_full193,"at-start");
var $temp_full211 = function($self212) {
var $step210 = 0;
var $ans216 = D;
var $al217 = L[95];
try {
if(R.isActivationRecord($self212)) {
$step210 = $self212.step;
$al217 = $self212.from;
$ans216 = $self212.ans;
self212 = $self212.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[95],1,$t);
}
var self212 = $self212;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step210) {
case 0: var anf_fun218 = srcloc196.$var === D?U(L[86],"srcloc"):srcloc196.$var;
$al217 = L[87];
var anf_arg221 = G(self212,"source",L[87]);
$al217 = L[88];
var anf_arg225 = G(self212,"end-line",L[88]);
$al217 = L[89];
var anf_arg226 = G(self212,"end-column",L[89]);
$al217 = L[90];
var anf_arg227 = G(self212,"end-char",L[90]);
$al217 = L[91];
var anf_arg229 = G(self212,"end-line",L[91]);
$al217 = L[92];
var anf_arg230 = G(self212,"end-column",L[92]);
$al217 = L[93];
var anf_arg232 = G(self212,"end-char",L[93]);
$step210 = 1;
$al217 = L[94];
if(!(R.isFunction(anf_fun218))) {
R.ffi.throwNonFunApp($al217,anf_fun218);
}
$ans216 = anf_fun218.app(anf_arg221,anf_arg225,anf_arg226,anf_arg227,anf_arg229,anf_arg230,anf_arg232);
break;
case 1: ++R.GAS;
return $ans216;
default: throw "No case numbered " + $step210 + " in $temp_full211";
}
}
} catch($e234) {
if(R.isCont($e234) && ($step210 !== 1)) {
$e234.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al217,$temp_full211,$step210,[self212],[]);
}
if(R.isPyretException($e234)) {
$e234.pyretStack.push($al217);
}
throw $e234;
}
};
var anf_variant_member467 = R.makeMethod0($temp_full211,"at-end");
var $temp_full237 = function($self87,$other238) {
var $step236 = 0;
var $ans241 = D;
var $al242 = L[125];
try {
if(R.isActivationRecord($self87)) {
$step236 = $self87.step;
$al242 = $self87.from;
$ans241 = $self87.ans;
self87 = $self87.args[0];
other238 = $self87.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[125],2,$t);
}
var self87 = $self87;
var other238 = $other238;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step236) {
case 0: $step236 = 1;
$al242 = L[124];
R._checkAnn(L[124],R.makePredAnn(Srcloc103,is$srcloc166.$var === D?U(L[123],"is-srcloc"):is$srcloc166.$var,"is-srcloc"),other238);
break;
case 1: $al242 = L[96];
var anf_arg280 = G(self87,"start-char",L[96]);
$al242 = L[97];
var anf_arg248 = G(other238,"start-char",L[97]);
$step236 = 2;
$al242 = L[98];
if(!(R.isFunction(_lessequal3))) {
R.ffi.throwNonFunApp($al242,_lessequal3);
}
$ans241 = _lessequal3.app(anf_arg280,anf_arg248);
break;
case 2: var anf_arg252 = $ans241;
$al242 = L[98];
var anf_if343 = R.checkWrapBoolean(anf_arg252);
$step236 = R.isPyretTrue(anf_if343)?3:7;
break;
case 3: $al242 = L[99];
var anf_arg253 = G(self87,"end-char",L[99]);
$al242 = L[100];
var anf_arg264 = G(other238,"end-char",L[100]);
$step236 = 4;
$al242 = L[101];
if(!(R.isFunction(_greaterequal4))) {
R.ffi.throwNonFunApp($al242,_greaterequal4);
}
$ans241 = _greaterequal4.app(anf_arg253,anf_arg264);
break;
case 4: var anf_arg299 = $ans241;
$al242 = L[101];
var anf_if273 = R.checkWrapBoolean(anf_arg299);
$step236 = R.isPyretTrue(anf_if273)?5:6;
break;
case 5: $step236 = 11;
$ans241 = self87;
break;
case 6: var anf_fun309 = srcloc196.$var === D?U(L[102],"srcloc"):srcloc196.$var;
$al242 = L[103];
var anf_arg311 = G(self87,"source",L[103]);
$al242 = L[104];
var anf_arg265 = G(self87,"start-line",L[104]);
$al242 = L[105];
var anf_arg268 = G(self87,"start-column",L[105]);
$al242 = L[106];
var anf_arg326 = G(self87,"start-char",L[106]);
$al242 = L[107];
var anf_arg271 = G(other238,"end-line",L[107]);
$al242 = L[108];
var anf_arg272 = G(other238,"end-column",L[108]);
$al242 = L[109];
var anf_arg340 = G(other238,"end-char",L[109]);
$step236 = 11;
$al242 = L[110];
if(!(R.isFunction(anf_fun309))) {
R.ffi.throwNonFunApp($al242,anf_fun309);
}
$ans241 = anf_fun309.app(anf_arg311,anf_arg265,anf_arg268,anf_arg326,anf_arg271,anf_arg272,anf_arg340);
break;
case 7: $al242 = L[111];
var anf_arg277 = G(self87,"end-char",L[111]);
$al242 = L[112];
var anf_arg287 = G(other238,"end-char",L[112]);
$step236 = 8;
$al242 = L[113];
if(!(R.isFunction(_greaterthan16))) {
R.ffi.throwNonFunApp($al242,_greaterthan16);
}
$ans241 = _greaterthan16.app(anf_arg277,anf_arg287);
break;
case 8: var anf_arg294 = $ans241;
$al242 = L[113];
var anf_if342 = R.checkWrapBoolean(anf_arg294);
$step236 = R.isPyretTrue(anf_if342)?9:10;
break;
case 9: var anf_fun295 = srcloc196.$var === D?U(L[114],"srcloc"):srcloc196.$var;
$al242 = L[115];
var anf_arg296 = G(self87,"source",L[115]);
$al242 = L[116];
var anf_arg309 = G(other238,"start-line",L[116]);
$al242 = L[117];
var anf_arg314 = G(other238,"start-column",L[117]);
$al242 = L[118];
var anf_arg315 = G(other238,"start-char",L[118]);
$al242 = L[119];
var anf_arg316 = G(self87,"end-line",L[119]);
$al242 = L[120];
var anf_arg332 = G(self87,"end-column",L[120]);
$al242 = L[121];
var anf_arg341 = G(self87,"end-char",L[121]);
$step236 = 11;
$al242 = L[122];
if(!(R.isFunction(anf_fun295))) {
R.ffi.throwNonFunApp($al242,anf_fun295);
}
$ans241 = anf_fun295.app(anf_arg296,anf_arg309,anf_arg314,anf_arg315,anf_arg316,anf_arg332,anf_arg341);
break;
case 10: $step236 = 11;
$ans241 = other238;
break;
case 11: ++R.GAS;
return $ans241;
default: throw "No case numbered " + $step236 + " in $temp_full237";
}
}
} catch($e344) {
if(R.isCont($e344) && ($step236 !== 11)) {
$e344.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al242,$temp_full237,$step236,[self87,other238],[]);
}
if(R.isPyretException($e344)) {
$e344.pyretStack.push($al242);
}
throw $e344;
}
};
var anf_variant_member468 = R.makeMethod1($temp_full237,"_plus");
var $temp_full346 = function($self109,$other347) {
var $step345 = 0;
var $ans348 = D;
var $al349 = L[140];
try {
if(R.isActivationRecord($self109)) {
$step345 = $self109.step;
$al349 = $self109.from;
$ans348 = $self109.ans;
self109 = $self109.args[0];
other347 = $self109.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[140],2,$t);
}
var self109 = $self109;
var other347 = $other347;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step345) {
case 0: $step345 = 1;
$al349 = L[139];
R._checkAnn(L[139],R.makePredAnn(Srcloc103,is$srcloc166.$var === D?U(L[138],"is-srcloc"):is$srcloc166.$var,"is-srcloc"),other347);
break;
case 1: $al349 = L[126];
var anf_arg367 = G(self109,"start-char",L[126]);
$al349 = L[127];
var anf_arg398 = G(other347,"end-char",L[127]);
$step345 = 2;
$al349 = L[128];
if(!(R.isFunction(_lessequal3))) {
R.ffi.throwNonFunApp($al349,_lessequal3);
}
$ans348 = _lessequal3.app(anf_arg367,anf_arg398);
break;
case 2: var anf_arg399 = $ans348;
$al349 = L[128];
var anf_if438 = R.checkWrapBoolean(anf_arg399);
$step345 = R.isPyretTrue(anf_if438)?3:4;
break;
case 3: var anf_fun400 = srcloc196.$var === D?U(L[129],"srcloc"):srcloc196.$var;
$al349 = L[130];
var anf_arg416 = G(self109,"source",L[130]);
$al349 = L[131];
var anf_arg421 = G(self109,"start-line",L[131]);
$al349 = L[132];
var anf_arg422 = G(self109,"start-column",L[132]);
$al349 = L[133];
var anf_arg423 = G(self109,"start-char",L[133]);
$al349 = L[134];
var anf_arg429 = G(other347,"start-line",L[134]);
$al349 = L[135];
var anf_arg436 = G(other347,"start-column",L[135]);
$al349 = L[136];
var anf_arg437 = G(other347,"start-char",L[136]);
$step345 = 5;
$al349 = L[137];
if(!(R.isFunction(anf_fun400))) {
R.ffi.throwNonFunApp($al349,anf_fun400);
}
$ans348 = anf_fun400.app(anf_arg416,anf_arg421,anf_arg422,anf_arg423,anf_arg429,anf_arg436,anf_arg437);
break;
case 4: $step345 = 5;
$ans348 = self109;
break;
case 5: ++R.GAS;
return $ans348;
default: throw "No case numbered " + $step345 + " in $temp_full346";
}
}
} catch($e439) {
if(R.isCont($e439) && ($step345 !== 5)) {
$e439.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al349,$temp_full346,$step345,[self109,other347],[]);
}
if(R.isPyretException($e439)) {
$e439.pyretStack.push($al349);
}
throw $e439;
}
};
var anf_variant_member469 = R.makeMethod1($temp_full346,"upto");
var $temp_full441 = function($self119) {
var $step440 = 0;
var $ans442 = D;
var $al443 = L[141];
try {
if(R.isActivationRecord($self119)) {
$step440 = $self119.step;
$al443 = $self119.from;
$ans442 = $self119.ans;
self119 = $self119.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],1,$t);
}
var self119 = $self119;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step440) {
case 0: $step440 = 1;
$ans442 = (false);
break;
case 1: ++R.GAS;
return $ans442;
default: throw "No case numbered " + $step440 + " in $temp_full441";
}
}
} catch($e444) {
if(R.isCont($e444) && ($step440 !== 1)) {
$e444.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al443,$temp_full441,$step440,[self119],[]);
}
if(R.isPyretException($e444)) {
$e444.pyretStack.push($al443);
}
throw $e444;
}
};
var anf_variant_member470 = R.makeMethod0($temp_full441,"is-builtin");
var $builtin_getfields456 = function(f) {
return f(this.dict["module-name"]);
};
var $builtin_getfieldsref454 = function(f,refmask) {
return f(R.derefField(this.dict["module-name"],false,refmask[0]));
};
var $builtin_mutablemask455 = [false];
var $builtin$base446 = {"$fieldNames":["module-name"],
"after":anf_shared445,
"format":anf_variant_member449,
"key":anf_variant_member450,
"same-file":anf_variant_member451,
"before":anf_variant_member452,
"is-builtin":anf_variant_member453,
"_match":R.makeMatch("builtin",1)};
var $builtin$brander447 = R.namedBrander("builtin",L[142]);
var $builtin$brands448 = {};
$builtin$brands448[Srcloc34._brand] = true;
$builtin$brands448[$builtin$brander447._brand] = true;
var builtin457 = R.makeVariantConstructor(L[143],function() {
return [];
},[],[],[false],["module$name458"],$builtin_mutablemask455,$builtin$base446,$builtin$brands448,"builtin",$builtin_getfieldsref454,$builtin_getfields456,$builtin$base446);
var $srcloc_getfields473 = function(f) {
return f(this.dict["source"],this.dict["start-line"],this.dict["start-column"],this.dict["start-char"],this.dict["end-line"],this.dict["end-column"],this.dict["end-char"]);
};
var $srcloc_getfieldsref471 = function(f,refmask) {
return f(R.derefField(this.dict["source"],false,refmask[0]),R.derefField(this.dict["start-line"],false,refmask[1]),R.derefField(this.dict["start-column"],false,refmask[2]),R.derefField(this.dict["start-char"],false,refmask[3]),R.derefField(this.dict["end-line"],false,refmask[4]),R.derefField(this.dict["end-column"],false,refmask[5]),R.derefField(this.dict["end-char"],false,refmask[6]));
};
var $srcloc_mutablemask472 = [false,false,false,false,false,false,false];
var $srcloc$base459 = {"$fieldNames":["source","start-line","start-column","start-char","end-line","end-column","end-char"],
"after":anf_shared445,
"format":anf_variant_member462,
"key":anf_variant_member463,
"same-file":anf_variant_member464,
"before":anf_variant_member465,
"at-start":anf_variant_member466,
"at-end":anf_variant_member467,
"_plus":anf_variant_member468,
"upto":anf_variant_member469,
"is-builtin":anf_variant_member470,
"_match":R.makeMatch("srcloc",7)};
var $srcloc$brander460 = R.namedBrander("srcloc",L[144]);
var $srcloc$brands461 = {};
$srcloc$brands461[Srcloc34._brand] = true;
$srcloc$brands461[$srcloc$brander460._brand] = true;
var srcloc474 = R.makeVariantConstructor(L[152],function() {
return [$type$String7,$type$Number8,$type$Number8,$type$Number8,$type$Number8,$type$Number8,$type$Number8];
},["source475","start$line476","start$column477","start$char478","end$line479","end$column480","end$char481"],[L[145],L[146],L[147],L[148],L[149],L[150],L[151]],[false,false,false,false,false,false,false],["source475","start$line476","start$column477","start$char478","end$line479","end$column480","end$char481"],$srcloc_mutablemask472,$srcloc$base459,$srcloc$brands461,"srcloc",$srcloc_getfieldsref471,$srcloc_getfields473,$srcloc$base459);
var anf_assign140 = R.makeObject({"Srcloc":G(Srcloc34,"test",L[153]),
"is-builtin":G($builtin$brander447,"test",L[142]),
"builtin":builtin457,
"is-srcloc":G($srcloc$brander460,"test",L[144]),
"srcloc":srcloc474});
Srcloc482.$var = anf_assign140;
var anf_bracket142 = Srcloc482.$var;
$al33 = L[153];
var anf_assign143 = G(anf_bracket142,"Srcloc",L[153]);
is$Srcloc483.$var = anf_assign143;
var anf_bracket145 = Srcloc482.$var;
$al33 = L[142];
var anf_assign146 = G(anf_bracket145,"is-builtin",L[142]);
is$builtin73.$var = anf_assign146;
var anf_bracket148 = Srcloc482.$var;
$al33 = L[142];
var anf_assign149 = G(anf_bracket148,"builtin",L[142]);
builtin484.$var = anf_assign149;
var anf_bracket151 = Srcloc482.$var;
$al33 = L[144];
var anf_assign152 = G(anf_bracket151,"is-srcloc",L[144]);
is$srcloc166.$var = anf_assign152;
var anf_bracket154 = Srcloc482.$var;
$al33 = L[144];
var anf_assign155 = G(anf_bracket154,"srcloc",L[144]);
srcloc196.$var = anf_assign155;
var defined_value504 = srcloc196.$var;
var defined_value505 = is$srcloc166.$var;
var defined_value506 = builtin484.$var;
var defined_value507 = is$builtin73.$var;
var defined_value508 = is$Srcloc483.$var;
$step24 = 1;
$al33 = L[154];
$field490 = R.getColonFieldLoc(builtins1,"trace-value",L[154]);
if(R.isMethod($field490)) {
$ans32 = $field490.full_meth(builtins1,L[154],nothing2);
} else {
if(!(R.isFunction($field490))) {
R.ffi.throwNonFunApp(L[154],$field490);
}
$ans32 = $field490.app(L[154],nothing2);
}
break;
case 1: var answer502 = $ans32;
var anf_obj491 = is$Srcloc483.$var;
var anf_obj492 = builtin484.$var;
var anf_obj493 = is$builtin73.$var;
var anf_obj494 = srcloc196.$var;
var anf_obj495 = is$srcloc166.$var;
var provides501 = R.makeObject({"is-Srcloc":anf_obj491,
"builtin":anf_obj492,
"is-builtin":anf_obj493,
"srcloc":anf_obj494,
"is-srcloc":anf_obj495});
$step24 = 2;
$al33 = L[153];
$field496 = R.getColonFieldLoc(builtins1,"current-checker",L[153]);
if(R.isMethod($field496)) {
$ans32 = $field496.full_meth(builtins1);
} else {
if(!(R.isFunction($field496))) {
R.ffi.throwNonFunApp(L[153],$field496);
}
$ans32 = $field496.app();
}
break;
case 2: var anf_method_obj497 = $ans32;
$step24 = 3;
$al33 = L[153];
$field500 = R.getColonFieldLoc(anf_method_obj497,"results",L[153]);
if(R.isMethod($field500)) {
$ans32 = $field500.full_meth(anf_method_obj497);
} else {
if(!(R.isFunction($field500))) {
R.ffi.throwNonFunApp(L[153],$field500);
}
$ans32 = $field500.app();
}
break;
case 3: var checks503 = $ans32;
$step24 = 4;
$ans32 = R.makeObject({"answer":answer502,
"namespace":NAMESPACE,
"defined-values":{"srcloc":defined_value504,
"is-srcloc":defined_value505,
"builtin":defined_value506,
"is-builtin":defined_value507,
"is-Srcloc":defined_value508,
"VS":VS11},
"defined-types":{"Srcloc":Srcloc103,
"VS":VS16},
"provide-plus-types":R.makeObject({"values":provides501,
"types":{"Srcloc":Srcloc103}}),
"checks":checks503});
break;
case 4: ++R.GAS;
return $ans32;
default: throw "No case numbered " + $step24 + " in $toplevel25";
}
}
} catch($e509) {
if(R.isCont($e509) && ($step24 !== 4)) {
$e509.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al33,$toplevel25,$step24,[],[Srcloc103,is$Srcloc483,is$builtin73,builtin484,is$srcloc166,srcloc196,defined_value504,defined_value505,defined_value506,defined_value507,defined_value508,answer502,provides501]);
}
if(R.isPyretException($e509)) {
$e509.pyretStack.push($al33);
}
throw $e509;
}
};
return R.safeCall($toplevel25,function(moduleVal) {
R.modules["$builtin://srcloc22"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://render-error-display":({"requires":[{"import-type":"builtin",
"name":"either"},
{"import-type":"builtin",
"name":"error-display"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"srcloc"}],
"provides":{"values":{"display-to-string":"tany",
"map_n":"tany",
"none":"tany",
"nth-stack-frame":"tany",
"some":"tany"},
"datatypes":{},
"aliases":{"Option":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$E29,$ED16,$$import34,$lists19,$option34,$S35) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://render-error-display";
var D = R.undefined;
var L = [[M,9,8,149,9,19,160],
[M,12,7,197,12,18,208],
[M,13,7,216,13,18,227],
[M,17,7,324,17,23,340],
[M,17,38,355,17,49,366],
[M,17,25,342,17,50,367],
[M,20,5,397,20,27,419],
[M,20,5,397,20,31,423],
[M,20,38,430,20,58,450],
[M,20,33,425,20,59,451],
[M,15,25,254,15,31,260],
[M,15,53,282,15,60,289],
[M,15,0,229,23,3,474],
[M,26,9,552,26,51,594],
[M,28,29,652,28,47,670],
[M,28,29,652,28,60,683],
[M,28,6,629,28,25,648],
[M,27,2,597,59,5,1992],
[M,29,6,690,29,15,699],
[M,31,38,766,31,69,797],
[M,31,38,766,31,53,781],
[M,31,31,759,31,73,801],
[M,32,22,826,32,29,833],
[M,32,10,814,32,17,821],
[M,31,6,734,34,9,884],
[M,33,22,856,33,40,874],
[M,33,10,844,33,18,852],
[M,31,12,740,31,20,748],
[M,31,22,750,31,74,802],
[M,30,6,713,30,16,723],
[M,30,4,711,34,9,884],
[M,35,16,901,35,30,915],
[M,35,6,891,35,12,897],
[M,38,18,1086,38,44,1112],
[M,38,10,1078,38,14,1082],
[M,37,6,1009,40,9,1170],
[M,39,21,1134,39,47,1160],
[M,39,26,1139,39,46,1159],
[M,39,10,1123,39,17,1130],
[M,37,12,1015,37,18,1021],
[M,37,20,1023,37,63,1066],
[M,37,20,1023,37,35,1038],
[M,36,6,922,36,83,999],
[M,36,4,920,40,9,1170],
[M,44,13,1281,44,20,1288],
[M,44,22,1290,44,36,1304],
[M,45,43,1348,45,57,1362],
[M,45,16,1321,45,63,1368],
[M,45,16,1321,45,57,1362],
[M,45,16,1321,45,40,1345],
[M,45,16,1321,45,30,1335],
[M,43,10,1257,43,17,1264],
[M,42,6,1214,48,9,1458],
[M,43,8,1255,46,13,1382],
[M,47,45,1428,47,59,1442],
[M,47,18,1401,47,65,1448],
[M,47,18,1401,47,59,1442],
[M,47,18,1401,47,42,1425],
[M,47,18,1401,47,32,1415],
[M,42,12,1220,42,27,1235],
[M,41,6,1177,41,33,1204],
[M,41,4,1175,48,9,1458],
[M,49,24,1483,49,50,1509],
[M,49,24,1483,49,44,1503],
[M,49,30,1489,49,44,1503],
[M,49,6,1465,49,20,1479],
[M,51,34,1579,51,51,1596],
[M,51,30,1575,51,52,1597],
[M,51,22,1567,51,56,1601],
[M,51,6,1551,51,57,1602],
[M,51,6,1551,51,67,1612],
[M,51,6,1551,51,81,1626],
[M,50,6,1516,50,31,1541],
[M,53,34,1691,53,51,1708],
[M,53,30,1687,53,52,1709],
[M,53,22,1679,53,56,1713],
[M,53,6,1663,53,57,1714],
[M,53,6,1663,53,67,1724],
[M,53,6,1663,53,82,1739],
[M,52,6,1633,52,26,1653],
[M,55,29,1806,55,45,1822],
[M,55,36,1813,55,45,1822],
[M,55,19,1796,55,49,1826],
[M,55,6,1783,55,50,1827],
[M,55,6,1783,55,65,1842],
[M,54,6,1746,54,33,1773],
[M,56,6,1849,56,17,1860],
[M,57,21,1888,57,34,1901],
[M,57,6,1873,57,17,1884],
[M,58,58,1960,58,68,1970],
[M,58,43,1945,58,83,1985],
[M,58,38,1940,58,84,1986],
[M,58,6,1908,58,34,1936],
[M,27,8,603,27,23,618],
[M,25,27,503,25,42,518],
[M,25,0,476,60,3,1996],
["dummy location"],
[M,9,0,141,60,3,1996],
[M,11,14,176,11,27,189],
[M,1,0,0,60,3,1996]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var run$task1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"run-task");
var exn$unwrap2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"exn-unwrap");
var _plus1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var equal$always2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var not4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"not");
var tostring1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var _greaterthan16 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_greaterthan");
var $type$Number8 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$Boolean9 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
var E3 = R.getField($E29,"values");
var ED4 = R.getField($ED16,"values");
var lists24 = R.getField($lists19,"values");
var option25 = R.getField($option34,"values");
var S26 = R.getField($S35,"values");
var E27 = R.getField($E29,"types");
var ED28 = R.getField($ED16,"types");
var lists30 = R.getField($lists19,"types");
var option31 = R.getField($option34,"types");
var S32 = R.getField($S35,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$E29);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$ED16);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import34);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists19);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$option34);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$S35);
var $toplevel45 = function($$resumer101) {
var $step44 = 0;
var $ans52 = D;
var $al53 = L[99];
try {
if(R.isActivationRecord($$resumer101)) {
$step44 = $$resumer101.step;
$al53 = $$resumer101.from;
$ans52 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
map_n285 = $$resumer101.vars[0];
Option161 = $$resumer101.vars[1];
some69 = $$resumer101.vars[2];
none70 = $$resumer101.vars[3];
nth$stack$frame79 = $$resumer101.vars[4];
display$to$string94 = $$resumer101.vars[5];
defined_value295 = $$resumer101.vars[6];
defined_value296 = $$resumer101.vars[7];
answer293 = $$resumer101.vars[8];
provides292 = $$resumer101.vars[9];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step44) {
case 0: $al53 = L[0];
var map_n285 = G(lists24,"map_n",L[0]);
var Option161 = R.getDotAnn(L[98],"option",option31,"Option");
$al53 = L[1];
var some69 = G(option25,"some",L[1]);
$al53 = L[2];
var none70 = G(option25,"none",L[2]);
var nth$stack$frame79 = {"$var":D};
var display$to$string94 = {"$var":D};
var $temp_lam56 = function($n57,$user$frames$only58,$stack59) {
var $step55 = 0;
var $ans60 = D;
var $al61 = L[12];
try {
if(R.isActivationRecord($n57)) {
$step55 = $n57.step;
$al61 = $n57.from;
$ans60 = $n57.ans;
n57 = $n57.args[0];
user$frames$only58 = $n57.args[1];
stack59 = $n57.args[2];
usable$frames63 = $n57.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[12],3,$t);
}
var n57 = $n57;
var user$frames$only58 = $user$frames$only58;
var stack59 = $stack59;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step55) {
case 0: $step55 = 1;
$al61 = L[10];
R._checkAnn(L[10],$type$Number8,n57);
break;
case 1: $step55 = 2;
$al61 = L[11];
R._checkAnn(L[11],$type$Boolean9,user$frames$only58);
break;
case 2: $al61 = L[3];
var anf_if72 = R.checkWrapBoolean(user$frames$only58);
$step55 = R.isPyretTrue(anf_if72)?3:4;
break;
case 3: $al61 = L[4];
var anf_arg75 = G(S26,"is-srcloc",L[4]);
$step55 = 5;
$al61 = L[5];
$field62 = R.getColonFieldLoc(stack59,"filter",L[5]);
if(R.isMethod($field62)) {
$ans60 = $field62.full_meth(stack59,anf_arg75);
} else {
if(!(R.isFunction($field62))) {
R.ffi.throwNonFunApp(L[5],$field62);
}
$ans60 = $field62.app(anf_arg75);
}
break;
case 4: $step55 = 5;
$ans60 = stack59;
break;
case 5: var usable$frames63 = $ans60;
$step55 = 6;
$al61 = L[6];
$field66 = R.getColonFieldLoc(usable$frames63,"length",L[6]);
if(R.isMethod($field66)) {
$ans60 = $field66.full_meth(usable$frames63);
} else {
if(!(R.isFunction($field66))) {
R.ffi.throwNonFunApp(L[6],$field66);
}
$ans60 = $field66.app();
}
break;
case 6: var anf_arg76 = $ans60;
$step55 = 7;
$al61 = L[7];
if(!(R.isFunction(_greaterthan16))) {
R.ffi.throwNonFunApp($al61,_greaterthan16);
}
$ans60 = _greaterthan16.app(anf_arg76,n57);
break;
case 7: var anf_arg67 = $ans60;
$al61 = L[7];
var anf_if71 = R.checkWrapBoolean(anf_arg67);
$step55 = R.isPyretTrue(anf_if71)?8:10;
break;
case 8: $step55 = 9;
$al61 = L[8];
$field68 = R.getColonFieldLoc(usable$frames63,"get",L[8]);
if(R.isMethod($field68)) {
$ans60 = $field68.full_meth(usable$frames63,n57);
} else {
if(!(R.isFunction($field68))) {
R.ffi.throwNonFunApp(L[8],$field68);
}
$ans60 = $field68.app(n57);
}
break;
case 9: var anf_arg83 = $ans60;
$step55 = 11;
$al61 = L[9];
if(!(R.isFunction(some69))) {
R.ffi.throwNonFunApp($al61,some69);
}
$ans60 = some69.app(anf_arg83);
break;
case 10: $step55 = 11;
$ans60 = none70;
break;
case 11: ++R.GAS;
return $ans60;
default: throw "No case numbered " + $step55 + " in $temp_lam56";
}
}
} catch($e76) {
if(R.isCont($e76) && ($step55 !== 11)) {
$e76.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al61,$temp_lam56,$step55,[n57,user$frames$only58,stack59],[usable$frames63]);
}
if(R.isPyretException($e76)) {
$e76.pyretStack.push($al61);
}
throw $e76;
}
};
var anf_assign78 = R.makeFunction($temp_lam56,"nth-stack-frame");
nth$stack$frame79.$var = anf_assign78;
var $temp_lam81 = function($e82,$embed$display83,$stack84) {
var $step80 = 0;
var $ans85 = D;
var $al86 = L[95];
try {
if(R.isActivationRecord($e82)) {
$step80 = $e82.step;
$al86 = $e82.from;
$ans85 = $e82.ans;
e82 = $e82.args[0];
embed$display83 = $e82.args[1];
stack84 = $e82.args[2];
help100 = $e82.vars[0];
cases98 = $e82.vars[1];
sep235 = $e82.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[95],3,$t);
}
var e82 = $e82;
var embed$display83 = $embed$display83;
var stack84 = $stack84;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step80) {
case 0: $step80 = 1;
$al86 = L[94];
R._checkAnn(L[94],R.getDotAnn(L[94],"ED",ED28,"ErrorDisplay"),e82);
break;
case 1: var $temp_lam89 = function($arg_90) {
var $step88 = 0;
var $ans92 = D;
var $al93 = L[13];
try {
if(R.isActivationRecord($arg_90)) {
$step88 = $arg_90.step;
$al93 = $arg_90.from;
$ans92 = $arg_90.ans;
arg_90 = $arg_90.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[13],1,$t);
}
var arg_90 = $arg_90;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step88) {
case 0: var anf_fun96 = display$to$string94.$var;
$step88 = 1;
$al93 = L[13];
if(!(R.isFunction(anf_fun96))) {
R.ffi.throwNonFunApp($al93,anf_fun96);
}
$ans92 = anf_fun96.app(arg_90,embed$display83,stack84);
break;
case 1: ++R.GAS;
return $ans92;
default: throw "No case numbered " + $step88 + " in $temp_lam89";
}
}
} catch($e97) {
if(R.isCont($e97) && ($step88 !== 1)) {
$e97.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al93,$temp_lam89,$step88,[arg_90],[]);
}
if(R.isPyretException($e97)) {
$e97.pyretStack.push($al93);
}
throw $e97;
}
};
var help100 = R.makeFunction($temp_lam89,"");
var cases98 = e82;
$step80 = 2;
$al86 = L[93];
R._checkAnn(L[93],R.getDotAnn(L[93],"ED",ED28,"ErrorDisplay"),cases98);
break;
case 2: var $cases_dispatch281 = {"paragraph":3,
"text":5,
"embed":6,
"loc":7,
"maybe-stack-loc":8,
"loc-display":9,
"code":10,
"h-sequence":13,
"v-sequence":16,
"bulleted-sequence":19,
"optional":21,
"cmcode":22,
"highlight":23};
$al86 = L[17];
$step80 = $cases_dispatch281[cases98.$name] || 25;
break;
case 3: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[16],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[16],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var contents99 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
$step80 = 4;
$al86 = L[14];
$field102 = R.getColonFieldLoc(contents99,"map",L[14]);
if(R.isMethod($field102)) {
$ans85 = $field102.full_meth(contents99,help100);
} else {
if(!(R.isFunction($field102))) {
R.ffi.throwNonFunApp(L[14],$field102);
}
$ans85 = $field102.app(help100);
}
break;
case 4: var anf_method_obj103 = $ans85;
$step80 = 26;
$al86 = L[15];
$field109 = R.getColonFieldLoc(anf_method_obj103,"join-str",L[15]);
if(R.isMethod($field109)) {
$ans85 = $field109.full_meth(anf_method_obj103,(""));
} else {
if(!(R.isFunction($field109))) {
R.ffi.throwNonFunApp(L[15],$field109);
}
$ans85 = $field109.app((""));
}
break;
case 5: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[18],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[18],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var str110 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
$step80 = 26;
$ans85 = str110;
break;
case 6: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[29],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[29],true,L[17]);
}
}
$step80 = 26;
$al86 = L[30];
var $temp_branch128 = function($val116) {
var $step130 = 0;
var $ans131 = D;
var $al132 = L[21];
try {
if(R.isActivationRecord($val116)) {
$step130 = $val116.step;
$al132 = $val116.from;
$ans131 = $val116.ans;
val116 = $val116.args[0];
cases124 = $val116.vars[0];
} else {
var val116 = $val116;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step130) {
case 0: var $temp_lam134 = function($$resumer101) {
var $step133 = 0;
var $ans135 = D;
var $al136 = L[21];
try {
if(R.isActivationRecord($$resumer101)) {
$step133 = $$resumer101.step;
$al136 = $$resumer101.from;
$ans135 = $$resumer101.ans;
$resumer101 = $$resumer101.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[21],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step133) {
case 0: $step133 = 1;
$al136 = L[20];
if(!(R.isFunction(exn$unwrap2))) {
R.ffi.throwNonFunApp($al136,exn$unwrap2);
}
$ans135 = exn$unwrap2.app(val116);
break;
case 1: var anf_method_obj117 = $ans135;
$step133 = 2;
$al136 = L[19];
$field141 = R.getColonFieldLoc(anf_method_obj117,"render-reason",L[19]);
if(R.isMethod($field141)) {
$ans135 = $field141.full_meth(anf_method_obj117);
} else {
if(!(R.isFunction($field141))) {
R.ffi.throwNonFunApp(L[19],$field141);
}
$ans135 = $field141.app();
}
break;
case 2: ++R.GAS;
return $ans135;
default: throw "No case numbered " + $step133 + " in $temp_lam134";
}
}
} catch($e144) {
if(R.isCont($e144) && ($step133 !== 2)) {
$e144.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al136,$temp_lam134,$step133,[],[]);
}
if(R.isPyretException($e144)) {
$e144.pyretStack.push($al136);
}
throw $e144;
}
};
var anf_arg123 = R.makeFunction($temp_lam134,"");
$step130 = 1;
$al132 = L[28];
if(!(R.isFunction(run$task1))) {
R.ffi.throwNonFunApp($al132,run$task1);
}
$ans131 = run$task1.app(anf_arg123);
break;
case 1: var cases124 = $ans131;
$step130 = 2;
$al132 = L[27];
R._checkAnn(L[27],R.getDotAnn(L[27],"E",E27,"Either"),cases124);
break;
case 2: var $cases_dispatch145 = {"left":3,
"right":4};
$al132 = L[24];
$step130 = $cases_dispatch145[cases124.$name] || 5;
break;
case 3: if(cases124.$arity !== 1) {
if(cases124.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[23],1,cases124.$arity,L[24]);
} else {
R.ffi.throwCasesSingletonErrorC(L[23],true,L[24]);
}
}
var $fn187 = cases124.$constructor.$fieldNames;
var v125 = R.derefField(cases124.dict[$fn187[0]],cases124.$mut_fields_mask[0],false);
$step130 = 6;
$al132 = L[22];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al132,help100);
}
$ans131 = help100.app(v125);
break;
case 4: if(cases124.$arity !== 1) {
if(cases124.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[26],1,cases124.$arity,L[24]);
} else {
R.ffi.throwCasesSingletonErrorC(L[26],true,L[24]);
}
}
var $fn187 = cases124.$constructor.$fieldNames;
R.derefField(cases124.dict[$fn187[0]],cases124.$mut_fields_mask[0],false);
$step130 = 6;
$al132 = L[25];
if(!(R.isFunction(embed$display83))) {
R.ffi.throwNonFunApp($al132,embed$display83);
}
$ans131 = embed$display83.app(val116);
break;
case 5: $step130 = 6;
$al132 = L[24];
$ans131 = R.throwNoCasesMatched(L[24],cases124);
break;
case 6: ++R.GAS;
return $ans131;
default: throw "No case numbered " + $step130 + " in $temp_branch128";
}
}
} catch($e148) {
if(R.isCont($e148) && ($step130 !== 6)) {
$e148.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al132,$temp_branch128,$step130,[val116],[cases124]);
}
if(R.isPyretException($e148)) {
$e148.pyretStack.push($al132);
}
throw $e148;
}
};
$ans85 = cases98.$app_fields($temp_branch128,[false]);
break;
case 7: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[32],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[32],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var l149 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
$step80 = 26;
$al86 = L[31];
$field153 = R.getColonFieldLoc(l149,"format",L[31]);
if(R.isMethod($field153)) {
$ans85 = $field153.full_meth(l149,(true));
} else {
if(!(R.isFunction($field153))) {
R.ffi.throwNonFunApp(L[31],$field153);
}
$ans85 = $field153.app((true));
}
break;
case 8: if(cases98.$arity !== 4) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[42],4,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[42],true,L[17]);
}
}
$step80 = 26;
$al86 = L[43];
var $temp_branch162 = function($n154,$user$frames$only155,$contents$with$loc158,$contents$without$loc157) {
var $step163 = 0;
var $ans166 = D;
var $al167 = L[41];
try {
if(R.isActivationRecord($n154)) {
$step163 = $n154.step;
$al167 = $n154.from;
$ans166 = $n154.ans;
n154 = $n154.args[0];
user$frames$only155 = $n154.args[1];
contents$with$loc158 = $n154.args[2];
contents$without$loc157 = $n154.args[3];
cases156 = $n154.vars[0];
} else {
var n154 = $n154;
var user$frames$only155 = $user$frames$only155;
var contents$with$loc158 = $contents$with$loc158;
var contents$without$loc157 = $contents$without$loc157;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step163) {
case 0: var anf_fun97 = nth$stack$frame79.$var;
$step163 = 1;
$al167 = L[40];
if(!(R.isFunction(anf_fun97))) {
R.ffi.throwNonFunApp($al167,anf_fun97);
}
$ans166 = anf_fun97.app(n154,user$frames$only155,stack84);
break;
case 1: var cases156 = $ans166;
$step163 = 2;
$al167 = L[39];
R._checkAnn(L[39],Option161,cases156);
break;
case 2: var $cases_dispatch168 = {"none":3,
"some":4};
$al167 = L[35];
$step163 = $cases_dispatch168[cases156.$name] || 6;
break;
case 3: if(cases156.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[34],false,L[35]);
}
$step163 = 7;
$al167 = L[33];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al167,help100);
}
$ans166 = help100.app(contents$without$loc157);
break;
case 4: if(cases156.$arity !== 1) {
if(cases156.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[38],1,cases156.$arity,L[35]);
} else {
R.ffi.throwCasesSingletonErrorC(L[38],true,L[35]);
}
}
var $fn187 = cases156.$constructor.$fieldNames;
var l159 = R.derefField(cases156.dict[$fn187[0]],cases156.$mut_fields_mask[0],false);
$step163 = 5;
$al167 = L[37];
if(!(R.isFunction(contents$with$loc158))) {
R.ffi.throwNonFunApp($al167,contents$with$loc158);
}
$ans166 = contents$with$loc158.app(l159);
break;
case 5: var anf_arg98 = $ans166;
$step163 = 7;
$al167 = L[36];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al167,help100);
}
$ans166 = help100.app(anf_arg98);
break;
case 6: $step163 = 7;
$al167 = L[35];
$ans166 = R.throwNoCasesMatched(L[35],cases156);
break;
case 7: ++R.GAS;
return $ans166;
default: throw "No case numbered " + $step163 + " in $temp_branch162";
}
}
} catch($e169) {
if(R.isCont($e169) && ($step163 !== 7)) {
$e169.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al167,$temp_branch162,$step163,[n154,user$frames$only155,contents$with$loc158,contents$without$loc157],[cases156]);
}
if(R.isPyretException($e169)) {
$e169.pyretStack.push($al167);
}
throw $e169;
}
};
$ans85 = cases98.$app_fields($temp_branch162,[false,false,false,false]);
break;
case 9: if(cases98.$arity !== 3) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[60],3,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[60],true,L[17]);
}
}
$step80 = 26;
$al86 = L[61];
var $temp_branch192 = function($l173,$$underscore214,$contents170) {
var $step195 = 0;
var $ans197 = D;
var $al198 = L[52];
try {
if(R.isActivationRecord($l173)) {
$step195 = $l173.step;
$al198 = $l173.from;
$ans197 = $l173.ans;
l173 = $l173.args[0];
$underscore214 = $l173.args[1];
contents170 = $l173.args[2];
cases171 = $l173.vars[0];
anf_arg49 = $l173.vars[1];
} else {
var l173 = $l173;
var $underscore214 = $$underscore214;
var contents170 = $contents170;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step195) {
case 0: var cases171 = contents170;
$step195 = 1;
$al198 = L[59];
R._checkAnn(L[59],R.getDotAnn(L[59],"ED",ED28,"ErrorDisplay"),cases171);
break;
case 1: var $cases_dispatch213 = {"loc":2};
$al198 = L[52];
$step195 = $cases_dispatch213[cases171.$name] || 3;
break;
case 2: if(cases171.$arity !== 1) {
if(cases171.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[51],1,cases171.$arity,L[52]);
} else {
R.ffi.throwCasesSingletonErrorC(L[51],true,L[52]);
}
}
$step195 = 8;
$al198 = L[53];
var $temp_branch201 = function($l2172) {
var $step202 = 0;
var $ans204 = D;
var $al205 = L[44];
try {
if(R.isActivationRecord($l2172)) {
$step202 = $l2172.step;
$al205 = $l2172.from;
$ans204 = $l2172.ans;
l2172 = $l2172.args[0];
anf_arg128 = $l2172.vars[0];
} else {
var l2172 = $l2172;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step202) {
case 0: $step202 = 1;
$al205 = L[44];
if(!(R.isFunction(equal$always2))) {
R.ffi.throwNonFunApp($al205,equal$always2);
}
$ans204 = equal$always2.app(l2172,l173);
break;
case 1: var anf_arg124 = $ans204;
$al205 = L[44];
var anf_if175 = R.checkWrapBoolean(anf_arg124);
$step202 = R.isPyretTrue(anf_if175)?2:3;
break;
case 2: $step202 = 8;
$al205 = L[45];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al205,help100);
}
$ans204 = help100.app(contents170);
break;
case 3: $step202 = 4;
$al205 = L[50];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al205,help100);
}
$ans204 = help100.app(contents170);
break;
case 4: var anf_arg118 = $ans204;
$step202 = 5;
$al205 = L[49];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al205,_plus1);
}
$ans204 = _plus1.app(anf_arg118,(" (at "));
break;
case 5: var anf_arg128 = $ans204;
$step202 = 6;
$al205 = L[46];
$field206 = R.getColonFieldLoc(l173,"format",L[46]);
if(R.isMethod($field206)) {
$ans204 = $field206.full_meth(l173,(true));
} else {
if(!(R.isFunction($field206))) {
R.ffi.throwNonFunApp(L[46],$field206);
}
$ans204 = $field206.app((true));
}
break;
case 6: var anf_arg130 = $ans204;
$step202 = 7;
$al205 = L[48];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al205,_plus1);
}
$ans204 = _plus1.app(anf_arg128,anf_arg130);
break;
case 7: var anf_arg132 = $ans204;
$step202 = 8;
$al205 = L[47];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al205,_plus1);
}
$ans204 = _plus1.app(anf_arg132,(")"));
break;
case 8: ++R.GAS;
return $ans204;
default: throw "No case numbered " + $step202 + " in $temp_branch201";
}
}
} catch($e209) {
if(R.isCont($e209) && ($step202 !== 8)) {
$e209.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al205,$temp_branch201,$step202,[l2172],[anf_arg128]);
}
if(R.isPyretException($e209)) {
$e209.pyretStack.push($al205);
}
throw $e209;
}
};
$ans197 = cases171.$app_fields($temp_branch201,[false]);
break;
case 3: $step195 = 4;
$al198 = L[58];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al198,help100);
}
$ans197 = help100.app(contents170);
break;
case 4: var anf_arg131 = $ans197;
$step195 = 5;
$al198 = L[57];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al198,_plus1);
}
$ans197 = _plus1.app(anf_arg131,(" (at "));
break;
case 5: var anf_arg49 = $ans197;
$step195 = 6;
$al198 = L[54];
$field212 = R.getColonFieldLoc(l173,"format",L[54]);
if(R.isMethod($field212)) {
$ans197 = $field212.full_meth(l173,(true));
} else {
if(!(R.isFunction($field212))) {
R.ffi.throwNonFunApp(L[54],$field212);
}
$ans197 = $field212.app((true));
}
break;
case 6: var anf_arg133 = $ans197;
$step195 = 7;
$al198 = L[56];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al198,_plus1);
}
$ans197 = _plus1.app(anf_arg49,anf_arg133);
break;
case 7: var anf_arg135 = $ans197;
$step195 = 8;
$al198 = L[55];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al198,_plus1);
}
$ans197 = _plus1.app(anf_arg135,(")"));
break;
case 8: ++R.GAS;
return $ans197;
default: throw "No case numbered " + $step195 + " in $temp_branch192";
}
}
} catch($e215) {
if(R.isCont($e215) && ($step195 !== 8)) {
$e215.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al198,$temp_branch192,$step195,[l173,$underscore214,contents170],[cases171,anf_arg49]);
}
if(R.isPyretException($e215)) {
$e215.pyretStack.push($al198);
}
throw $e215;
}
};
$ans85 = cases98.$app_fields($temp_branch192,[false,false,false]);
break;
case 10: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[65],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[65],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var contents216 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
$step80 = 11;
$al86 = L[64];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al86,help100);
}
$ans85 = help100.app(contents216);
break;
case 11: var anf_arg134 = $ans85;
$step80 = 12;
$al86 = L[63];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al86,_plus1);
}
$ans85 = _plus1.app(("`"),anf_arg134);
break;
case 12: var anf_arg137 = $ans85;
$step80 = 26;
$al86 = L[62];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al86,_plus1);
}
$ans85 = _plus1.app(anf_arg137,("`"));
break;
case 13: if(cases98.$arity !== 2) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[72],2,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[72],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var contents228 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
var sep235 = R.derefField(cases98.dict[$fn187[1]],cases98.$mut_fields_mask[1],false);
var $temp_lam220 = function($c221) {
var $step219 = 0;
var $ans222 = D;
var $al223 = L[68];
try {
if(R.isActivationRecord($c221)) {
$step219 = $c221.step;
$al223 = $c221.from;
$ans222 = $c221.ans;
c221 = $c221.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[68],1,$t);
}
var c221 = $c221;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step219) {
case 0: $step219 = 1;
$al223 = L[66];
$field226 = R.getColonFieldLoc(ED4,"is-optional",L[66]);
if(R.isMethod($field226)) {
$ans222 = $field226.full_meth(ED4,c221);
} else {
if(!(R.isFunction($field226))) {
R.ffi.throwNonFunApp(L[66],$field226);
}
$ans222 = $field226.app(c221);
}
break;
case 1: var anf_arg138 = $ans222;
$step219 = 2;
$al223 = L[67];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al223,not4);
}
$ans222 = not4.app(anf_arg138);
break;
case 2: ++R.GAS;
return $ans222;
default: throw "No case numbered " + $step219 + " in $temp_lam220";
}
}
} catch($e227) {
if(R.isCont($e227) && ($step219 !== 2)) {
$e227.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al223,$temp_lam220,$step219,[c221],[]);
}
if(R.isPyretException($e227)) {
$e227.pyretStack.push($al223);
}
throw $e227;
}
};
var anf_arg141 = R.makeFunction($temp_lam220,"");
$step80 = 14;
$al86 = L[69];
$field230 = R.getColonFieldLoc(contents228,"filter",L[69]);
if(R.isMethod($field230)) {
$ans85 = $field230.full_meth(contents228,anf_arg141);
} else {
if(!(R.isFunction($field230))) {
R.ffi.throwNonFunApp(L[69],$field230);
}
$ans85 = $field230.app(anf_arg141);
}
break;
case 14: var anf_method_obj231 = $ans85;
$step80 = 15;
$al86 = L[70];
$field233 = R.getColonFieldLoc(anf_method_obj231,"map",L[70]);
if(R.isMethod($field233)) {
$ans85 = $field233.full_meth(anf_method_obj231,help100);
} else {
if(!(R.isFunction($field233))) {
R.ffi.throwNonFunApp(L[70],$field233);
}
$ans85 = $field233.app(help100);
}
break;
case 15: var anf_method_obj234 = $ans85;
$step80 = 26;
$al86 = L[71];
$field239 = R.getColonFieldLoc(anf_method_obj234,"join-str",L[71]);
if(R.isMethod($field239)) {
$ans85 = $field239.full_meth(anf_method_obj234,sep235);
} else {
if(!(R.isFunction($field239))) {
R.ffi.throwNonFunApp(L[71],$field239);
}
$ans85 = $field239.app(sep235);
}
break;
case 16: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[79],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[79],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var contents251 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
var $temp_lam242 = function($c243) {
var $step241 = 0;
var $ans245 = D;
var $al246 = L[75];
try {
if(R.isActivationRecord($c243)) {
$step241 = $c243.step;
$al246 = $c243.from;
$ans245 = $c243.ans;
c243 = $c243.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[75],1,$t);
}
var c243 = $c243;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step241) {
case 0: $step241 = 1;
$al246 = L[73];
$field249 = R.getColonFieldLoc(ED4,"is-optional",L[73]);
if(R.isMethod($field249)) {
$ans245 = $field249.full_meth(ED4,c243);
} else {
if(!(R.isFunction($field249))) {
R.ffi.throwNonFunApp(L[73],$field249);
}
$ans245 = $field249.app(c243);
}
break;
case 1: var anf_arg97 = $ans245;
$step241 = 2;
$al246 = L[74];
if(!(R.isFunction(not4))) {
R.ffi.throwNonFunApp($al246,not4);
}
$ans245 = not4.app(anf_arg97);
break;
case 2: ++R.GAS;
return $ans245;
default: throw "No case numbered " + $step241 + " in $temp_lam242";
}
}
} catch($e250) {
if(R.isCont($e250) && ($step241 !== 2)) {
$e250.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al246,$temp_lam242,$step241,[c243],[]);
}
if(R.isPyretException($e250)) {
$e250.pyretStack.push($al246);
}
throw $e250;
}
};
var anf_arg142 = R.makeFunction($temp_lam242,"");
$step80 = 17;
$al86 = L[76];
$field255 = R.getColonFieldLoc(contents251,"filter",L[76]);
if(R.isMethod($field255)) {
$ans85 = $field255.full_meth(contents251,anf_arg142);
} else {
if(!(R.isFunction($field255))) {
R.ffi.throwNonFunApp(L[76],$field255);
}
$ans85 = $field255.app(anf_arg142);
}
break;
case 17: var anf_method_obj107 = $ans85;
$step80 = 18;
$al86 = L[77];
$field256 = R.getColonFieldLoc(anf_method_obj107,"map",L[77]);
if(R.isMethod($field256)) {
$ans85 = $field256.full_meth(anf_method_obj107,help100);
} else {
if(!(R.isFunction($field256))) {
R.ffi.throwNonFunApp(L[77],$field256);
}
$ans85 = $field256.app(help100);
}
break;
case 18: var anf_method_obj109 = $ans85;
$step80 = 26;
$al86 = L[78];
$field257 = R.getColonFieldLoc(anf_method_obj109,"join-str",L[78]);
if(R.isMethod($field257)) {
$ans85 = $field257.full_meth(anf_method_obj109,("\n"));
} else {
if(!(R.isFunction($field257))) {
R.ffi.throwNonFunApp(L[78],$field257);
}
$ans85 = $field257.app(("\n"));
}
break;
case 19: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[85],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[85],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var contents264 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
var $temp_lam259 = function($elt211) {
var $step258 = 0;
var $ans261 = D;
var $al262 = L[82];
try {
if(R.isActivationRecord($elt211)) {
$step258 = $elt211.step;
$al262 = $elt211.from;
$ans261 = $elt211.ans;
elt211 = $elt211.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[82],1,$t);
}
var elt211 = $elt211;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step258) {
case 0: $step258 = 1;
$al262 = L[81];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al262,help100);
}
$ans261 = help100.app(elt211);
break;
case 1: var anf_arg112 = $ans261;
$step258 = 2;
$al262 = L[80];
if(!(R.isFunction(_plus1))) {
R.ffi.throwNonFunApp($al262,_plus1);
}
$ans261 = _plus1.app(("* "),anf_arg112);
break;
case 2: ++R.GAS;
return $ans261;
default: throw "No case numbered " + $step258 + " in $temp_lam259";
}
}
} catch($e263) {
if(R.isCont($e263) && ($step258 !== 2)) {
$e263.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al262,$temp_lam259,$step258,[elt211],[]);
}
if(R.isPyretException($e263)) {
$e263.pyretStack.push($al262);
}
throw $e263;
}
};
var anf_arg113 = R.makeFunction($temp_lam259,"");
$step80 = 20;
$al86 = L[83];
$field270 = R.getColonFieldLoc(contents264,"map",L[83]);
if(R.isMethod($field270)) {
$ans85 = $field270.full_meth(contents264,anf_arg113);
} else {
if(!(R.isFunction($field270))) {
R.ffi.throwNonFunApp(L[83],$field270);
}
$ans85 = $field270.app(anf_arg113);
}
break;
case 20: var anf_method_obj271 = $ans85;
$step80 = 26;
$al86 = L[84];
$field273 = R.getColonFieldLoc(anf_method_obj271,"join-str",L[84]);
if(R.isMethod($field273)) {
$ans85 = $field273.full_meth(anf_method_obj271,("\n"));
} else {
if(!(R.isFunction($field273))) {
R.ffi.throwNonFunApp(L[84],$field273);
}
$ans85 = $field273.app(("\n"));
}
break;
case 21: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[86],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[86],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
$step80 = 26;
$ans85 = ("");
break;
case 22: if(cases98.$arity !== 1) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[88],1,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[88],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var loc276 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
$step80 = 26;
$al86 = L[87];
if(!(R.isFunction(tostring1))) {
R.ffi.throwNonFunApp($al86,tostring1);
}
$ans85 = tostring1.app(loc276);
break;
case 23: if(cases98.$arity !== 3) {
if(cases98.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[92],3,cases98.$arity,L[17]);
} else {
R.ffi.throwCasesSingletonErrorC(L[92],true,L[17]);
}
}
var $fn187 = cases98.$constructor.$fieldNames;
var contents278 = R.derefField(cases98.dict[$fn187[0]],cases98.$mut_fields_mask[0],false);
var locs277 = R.derefField(cases98.dict[$fn187[1]],cases98.$mut_fields_mask[1],false);
R.derefField(cases98.dict[$fn187[2]],cases98.$mut_fields_mask[2],false);
$al86 = L[89];
var anf_arg152 = G(locs277,"first",L[89]);
$step80 = 24;
$al86 = L[90];
$field279 = R.getColonFieldLoc(ED4,"loc-display",L[90]);
if(R.isMethod($field279)) {
$ans85 = $field279.full_meth(ED4,anf_arg152,(""),contents278);
} else {
if(!(R.isFunction($field279))) {
R.ffi.throwNonFunApp(L[90],$field279);
}
$ans85 = $field279.app(anf_arg152,(""),contents278);
}
break;
case 24: var anf_arg153 = $ans85;
$step80 = 26;
$al86 = L[91];
if(!(R.isFunction(help100))) {
R.ffi.throwNonFunApp($al86,help100);
}
$ans85 = help100.app(anf_arg153);
break;
case 25: $step80 = 26;
$al86 = L[17];
$ans85 = R.throwNoCasesMatched(L[17],cases98);
break;
case 26: ++R.GAS;
return $ans85;
default: throw "No case numbered " + $step80 + " in $temp_lam81";
}
}
} catch($e282) {
if(R.isCont($e282) && ($step80 !== 26)) {
$e282.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al86,$temp_lam81,$step80,[e82,embed$display83,stack84],[help100,cases98,sep235]);
}
if(R.isPyretException($e282)) {
$e282.pyretStack.push($al86);
}
throw $e282;
}
};
var anf_assign283 = R.makeFunction($temp_lam81,"display-to-string");
display$to$string94.$var = anf_assign283;
var defined_value295 = display$to$string94.$var;
var defined_value296 = nth$stack$frame79.$var;
$step44 = 1;
$al53 = L[96];
$field284 = R.getColonFieldLoc(builtins1,"trace-value",L[96]);
if(R.isMethod($field284)) {
$ans52 = $field284.full_meth(builtins1,L[96],nothing2);
} else {
if(!(R.isFunction($field284))) {
R.ffi.throwNonFunApp(L[96],$field284);
}
$ans52 = $field284.app(L[96],nothing2);
}
break;
case 1: var answer293 = $ans52;
var anf_obj287 = nth$stack$frame79.$var;
var anf_obj288 = display$to$string94.$var;
var provides292 = R.makeObject({"map_n":map_n285,
"some":some69,
"none":none70,
"nth-stack-frame":anf_obj287,
"display-to-string":anf_obj288});
$step44 = 2;
$al53 = L[97];
$field289 = R.getColonFieldLoc(builtins1,"current-checker",L[97]);
if(R.isMethod($field289)) {
$ans52 = $field289.full_meth(builtins1);
} else {
if(!(R.isFunction($field289))) {
R.ffi.throwNonFunApp(L[97],$field289);
}
$ans52 = $field289.app();
}
break;
case 2: var anf_method_obj290 = $ans52;
$step44 = 3;
$al53 = L[97];
$field291 = R.getColonFieldLoc(anf_method_obj290,"results",L[97]);
if(R.isMethod($field291)) {
$ans52 = $field291.full_meth(anf_method_obj290);
} else {
if(!(R.isFunction($field291))) {
R.ffi.throwNonFunApp(L[97],$field291);
}
$ans52 = $field291.app();
}
break;
case 3: var checks294 = $ans52;
$step44 = 4;
$ans52 = R.makeObject({"answer":answer293,
"namespace":NAMESPACE,
"defined-values":{"display-to-string":defined_value295,
"nth-stack-frame":defined_value296,
"none":none70,
"some":some69,
"option":option25,
"map_n":map_n285,
"lists":lists24,
"S":S26,
"ED":ED4,
"E":E3},
"defined-types":{"Option":Option161,
"ED":ED28,
"E":E27,
"lists":lists30,
"option":option31,
"S":S32},
"provide-plus-types":R.makeObject({"values":provides292,
"types":{}}),
"checks":checks294});
break;
case 4: ++R.GAS;
return $ans52;
default: throw "No case numbered " + $step44 + " in $toplevel45";
}
}
} catch($e297) {
if(R.isCont($e297) && ($step44 !== 4)) {
$e297.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al53,$toplevel45,$step44,[],[map_n285,Option161,some69,none70,nth$stack$frame79,display$to$string94,defined_value295,defined_value296,answer293,provides292]);
}
if(R.isPyretException($e297)) {
$e297.pyretStack.push($al53);
}
throw $e297;
}
};
return R.safeCall($toplevel45,function(moduleVal) {
R.modules["$builtin://render$error$display33"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://ffi":({
  requires: [
    { "import-type": "builtin", name: "lists" },
    { "import-type": "builtin", name: "sets" },
    { "import-type": "builtin", name: "option" },
    { "import-type": "builtin", name: "either" },
    { "import-type": "builtin", name: "equality" },
    { "import-type": "builtin", name: "error" },
    { "import-type": "builtin", name: "srcloc" },
    { "import-type": "builtin", name: "contracts" },
    // skipping checker
    { "import-type": "builtin", name: "error-display" },
    { "import-type": "builtin", name: "valueskeleton" }
  ],
  provides: {},
  nativeRequires: [],
  theModule: function(runtime, namespace, uri, L, Se, O, E, EQ, ERR, S, CON, /* CH, */ ED, VS) {
    var gf = runtime.getField;
    L = gf(L, "values");
    Se = gf(Se, "values");
    O = gf(O, "values");
    E = gf(E, "values");
    EQ = gf(EQ, "values");
    ERR = gf(ERR, "values");
    S = gf(S, "values");
    CON = gf(CON, "values");
    ED = gf(ED, "values");
    VS = gf(VS, "values");
    var link = gf(L, "link");
    var lnk = function(first, rest) { return link.app(first, rest); };
    var mt = gf(L, "empty");
    function makeList(arr) {
      if (!arr || typeof arr.length !== "number") {
        throw "Non-array given to makeList " + JSON.stringify(arr);
      }
      var lst = mt;
      for(var i = arr.length - 1; i >= 0; i--) {
        lst = lnk(arr[i], lst);
      }
      return lst;
    }

    function makeTreeSet(arr) {
      return gf(Se, 'list-to-tree-set').app(makeList(arr));
    }
    function toArray(list) {
      var isList = runtime.getField(L, "is-List");
      var isEmpty = runtime.getField(L, "is-empty");
      var isLink = runtime.getField(L, "is-link");
      // console.error("list is " + JSON.stringify(list).substr(0, 100));
      // console.error("list is Object? " + runtime.isObject(list));
      // console.error("list.brands is " + JSON.stringify(list.brands));
      if(!(runtime.unwrap(isList.app(list)) === true)) {
        throw "Non-list given to toArray " + String(list);
      }
      var arr = [];
      try {
        while(!(runtime.unwrap(isEmpty.app(list)) === true)) {
          try {
            arr.push(runtime.getField(list, "first"));
          } catch(e) {
            console.error("***** getField first failed on list: " + JSON.stringify(list));
            console.error(e);
            throw e;
          }
          try {
            list = runtime.getField(list, "rest");
          } catch(e) {
            console.error("***** getField rest failed on list: " + JSON.stringify(list));
            console.error(e);
            throw e;
          }
        }
      } catch(e) {
        console.error("******* Calling isEmpty failed on list: " + JSON.stringify(list));
        console.error(e);
        throw e;
      }
      return arr;
    }
    var checkSrcloc = runtime.makeCheckType(function(val) {
      return runtime.unwrap(gf(S, "is-Srcloc").app(val));
    }, "Srcloc");

/* NOTE(joe): skipping checker
    function isTestResult(val) { return runtime.unwrap(runtime.getField(CH, "TestResult").app(val)); }
    var checkTestResult = runtime.makeCheckType(isTestResult, "TestResult");
*/

    function isErrorDisplay(val) { return runtime.unwrap(runtime.getField(ED, "ErrorDisplay").app(val)); }
    var checkErrorDisplay = runtime.makeCheckType(isErrorDisplay, "ErrorDisplay");

    function cases(pred, predName, val, casesObj) {
      if(!pred.app(val)) {
        throwTypeMismatch(val, predName);
      }
      var pyretObj = {}
      var els = runtime.makeFunction(function(v) {
        throwMessageException("No cases matched");
      }, "cases-else");
      Object.keys(casesObj).forEach(function(k) {
        if(k !== "else") {
          pyretObj[k] = runtime.makeFunction(casesObj[k], "cases-" + k);
        } else {
          els = runtime.makeFunction(casesObj[k], "cases-else");
        }
      });
      return runtime.safeTail(function() {
        return gf(val, "_match").app(runtime.makeObject(pyretObj), els);
      });
    }

    var checkArity = runtime.checkArity;

/* NOTE(joe): skipping checker
    function checkResultsSummary(checkResults) {
      return runtime.safeCall(
        function() {
          return gf(CH, "results-summary").app(checkResults);
        },
        function(pySummary) {
          return {
            message: gf(pySummary, "message"),
            passed: gf(pySummary, "passed"),
            failed: gf(pySummary, "failed"),
            total: gf(pySummary, "total")
          };
        },
        "results-summary");
    };
*/
    function err(str) { return gf(ERR, str).app; }
    function contract(str) { return gf(CON, str).app; }
    function errPred(str) {
      return function(val) {
        return runtime.unwrap(gf(ERR, str).app(val));
      };
    }
    var raise = runtime.raise;

    function throwInternalError(message, otherArgs) {
      runtime.checkString(message);
      runtime.checkList(otherArgs);
      raise(err("internal-error")(runtime.makeString(message), otherArgs));
    }

    function throwFieldNotFound(loc, object, field) {
      checkSrcloc(loc);
      runtime.checkPyretVal(object);
      runtime.checkString(field);
      raise(err("field-not-found")(loc, object, runtime.makeString(field)));
    }
    function throwLookupConstructorNotObject(loc, constrName, field) {
      checkSrcloc(loc);
      runtime.checkString(constrName);
      runtime.checkString(field);
      raise(err("lookup-constructor-not-object")(loc, constrName, runtime.makeString(field)));
    }
    function throwLookupNonObject(loc, nonObject, field) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonObject);
      runtime.checkString(field);
      raise(err("lookup-non-object")(loc, nonObject, runtime.makeString(field)));
    }
    function throwLookupNonTuple(loc, nonTuple, index) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonTuple);
      runtime.checkNumber(index);
      raise(err("lookup-non-tuple")(loc, nonTuple, runtime.makeNumber(index)));
    }
    function throwBadTupleBind(loc, tup, length, desiredLength) {
      checkSrcloc(loc);
      //runtime.checkPyretVal(tup);
      raise(err("bad-tuple-bind")(loc, tup, runtime.makeNumber(length), runtime.makeNumber(desiredLength)));
    }
    function throwLookupLargeIndex(loc, tup, index) {
      checkSrcloc(loc);
      runtime.checkPyretVal(tup);
      runtime.checkNumber(index);
      raise(err("lookup-large-index")(loc, tup, runtime.makeNumber(index)));
    }
    function throwExtendNonObject(loc, nonObject) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonObject);
      raise(err("extend-non-object")(loc, nonObject));
    }
    function throwLookupNonTuple(loc, nonTuple, index) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonTuple);
      runtime.checkNumber(index);
      raise(err("lookup-non-tuple")(loc, nonTuple, runtime.makeNumber(index)));
    }
    function throwBadTupleBind(loc, tup, length, desiredLength) {
      checkSrcloc(loc);
      runtime.checkPyretVal(tup);
      raise(err("bad-tuple-bind")(loc, tup, length, desiredLength));
    }
    function throwNonTupleBind(loc, non_tup) {
      checkSrcloc(loc);
      raise(err("non-tuple-bind")(loc, non_tup));
    }
    function throwLookupLargeIndex(loc, tup, index) {
      checkSrcloc(loc);
      runtime.checkPyretVal(tup);
      runtime.checkNumber(index);
      raise(err("lookup-large-index")(loc, tup, tup.vals.length, runtime.makeNumber(index)));
    }
    function throwExtendNonObject(loc, nonObject) {
      checkSrcloc(loc);
      runtime.checkPyretVal(nonObject);
      raise(err("extend-non-object")(loc, nonObject));
    }

    function throwMessageException(message) {
      runtime.checkString(message);
      raise(err("message-exception")(message));
    }

    function makeMessageException(message) {
      runtime.checkString(message);
      return err("message-exception")(message);
    }

    function throwMultiErrorException(errs) {
      runtime.checkList(errs);
      raise(err("multi-error")(errs));
    }

    function throwUserException(errVal) {
      runtime.checkPyretVal(errVal);
      raise(err("user-exception")(errVal));
    }
    function makeUserException(errVal) {
      runtime.checkPyretVal(errVal);
      return err("user-exception")(errVal);
    }

    function throwEqualityException(reason, v1, v2) {
      runtime.checkString(reason);
      runtime.checkPyretVal(v1);
      runtime.checkPyretVal(v2);
      raise(err("equality-failure")(reason, v1, v2));
    }

    function throwTypeMismatch(val, typeName) {
      // NOTE(joe): can't use checkPyretVal here, because it will re-enter
      // this function and blow up... so bottom out at "nothing"
      if(!runtime.isPyretVal(val)) {
        val = runtime.namespace.get("nothing");
      }
      runtime.checkString(typeName);
      raise(err("generic-type-mismatch")(val, typeName));
    }

    function throwInvalidArrayIndex(methodName, array, index, reason) {
      runtime.checkString(methodName);
      runtime.checkArray(array);
      runtime.checkNumber(index);
      runtime.checkString(reason);
      raise(err("invalid-array-index")(methodName, array, index, reason));
    }

    function throwInvalidTableColumn(table, table_loc, column, column_loc) {
      runtime.checkTable(table);
      runtime.checkString(column);
      checkSrcloc(table_loc);
      checkSrcloc(column_loc);
      raise(err("invalid-table-column")(table, table_loc, column, column_loc));
    }

    function throwNumStringBinopError(left, right, opname, opdesc, methodname) {
      runtime.checkPyretVal(left);
      runtime.checkPyretVal(right);
      runtime.checkString(opname);
      runtime.checkString(opdesc);
      runtime.checkString(methodname);
      raise(err("num-string-binop-error")(left, right, opname, opdesc, methodname));
    }
    function throwNumericBinopError(left, right, opname, opdesc, methodname) {
      runtime.checkPyretVal(left);
      runtime.checkPyretVal(right);
      runtime.checkString(opname);
      runtime.checkString(opdesc);
      runtime.checkString(methodname);
      raise(err("numeric-binop-error")(left, right, opname, opdesc, methodname));
    }

    function throwUpdateNonObj(loc, objval, objloc) {
      runtime.checkPyretVal(objval);
      checkSrcloc(loc);
      checkSrcloc(objloc);
      raise(err("update-non-obj")(loc, objval, objloc));
    }
    
    function throwUpdateFrozenRef(loc, objval, objloc, fieldname, fieldloc) {
      runtime.checkPyretVal(objval);
      checkSrcloc(loc);
      checkSrcloc(objloc);
      runtime.checkString(fieldname);
      checkSrcloc(fieldloc);
      raise(err("update-frozen-ref")(loc, objval, objloc, fieldname, fieldloc));
    }
    
    function throwUpdateNonRef(loc, objval, objloc, fieldname, fieldloc) {
      runtime.checkPyretVal(objval);
      checkSrcloc(loc);
      checkSrcloc(objloc);
      runtime.checkString(fieldname);
      checkSrcloc(fieldloc);
      raise(err("update-non-ref")(loc, objval, objloc, fieldname, fieldloc));
    }
    
    function throwUpdateNonExistentField(loc, objval, objloc, fieldname, fieldloc) {
      runtime.checkPyretVal(objval);
      checkSrcloc(loc);
      checkSrcloc(objloc);
      runtime.checkString(fieldname);
      checkSrcloc(fieldloc);
      raise(err("update-non-existent-field")(loc, objval, objloc, fieldname, fieldloc));
    }
  
    function throwUninitializedId(loc, name) {
      checkSrcloc(loc);
      runtime.checkString(name);
      raise(err("uninitialized-id")(loc, name));
    }

    function throwUninitializedIdMkLoc(loc, name) {
      throwUninitializedId(runtime.makeSrcloc(loc), name);
    }

    function throwArityError(funLoc, arity, args) {
      checkSrcloc(funLoc);
      runtime.checkNumber(arity);
      runtime.checkList(args);
      raise(err("arity-mismatch")(funLoc, arity, args));
    }

    function throwArityErrorC(funLoc, arity, args) {
      var loc = runtime.makeSrcloc(funLoc);
      var argsPyret = makeList(args);
      throwArityError(loc, arity, argsPyret);
    }

    function throwConstructorArityErrorC(funLoc, name, arity, args) {
      runtime.checkString(name);
      runtime.checkNumber(arity);
      var loc = runtime.makeSrcloc(funLoc);
      var argsPyret = makeList(args);
      raise(err("constructor-arity-mismatch")(loc, name, arity, argsPyret));
    }

    function throwCasesArityError(branchLoc, arity, fields, casesLoc) {
      checkSrcloc(branchLoc);
      runtime.checkNumber(arity);
      runtime.checkNumber(fields);
      checkSrcloc(casesLoc)
      raise(err("cases-arity-mismatch")(branchLoc, arity, fields, casesLoc));
    }

    function throwCasesArityErrorC(branchLoc, arity, fields, casesLoc) {
      var loc = runtime.makeSrcloc(branchLoc);
      var cloc = runtime.makeSrcloc(casesLoc);
      throwCasesArityError(loc, arity, fields, cloc);
    }

    function throwCasesSingletonError(branchLoc, shouldBeSingleton, casesLoc) {
      checkSrcloc(branchLoc);
      runtime.checkBoolean(shouldBeSingleton);
      checkSrcloc(casesLoc)
      raise(err("cases-singleton-mismatch")(branchLoc, shouldBeSingleton, casesLoc));
    }

    function throwCasesSingletonErrorC(branchLoc, shouldBeSingleton, casesLoc) {
      var loc = runtime.makeSrcloc(branchLoc);
      var cloc = runtime.makeSrcloc(casesLoc);
      throwCasesSingletonError(loc, shouldBeSingleton, cloc);
    }

    function throwNonBooleanCondition(locArray, type, val) {
      runtime.checkString(type);
      runtime.checkPyretVal(val);
      raise(err("non-boolean-condition")(runtime.makeSrcloc(locArray), type, val));
    }
    function throwNonBooleanOp(locArray, position, type, val) {
      runtime.checkString(position);
      runtime.checkString(type);
      runtime.checkPyretVal(val);
      raise(err("non-boolean-op")(runtime.makeSrcloc(locArray), position, type, val));
    }
    function throwNoBranchesMatched(locArray, type) {
      runtime.checkString(type);
      raise(err("no-branches-matched")(runtime.makeSrcloc(locArray), type));
    }
    function throwNoCasesMatched(locArray, val) {
      runtime.checkPyretVal(val);
      raise(err("no-cases-matched")(runtime.makeSrcloc(locArray), val));
    }
    function throwUnfinishedTemplate(locArray) {
      raise(err("template-not-finished")(runtime.makeSrcloc(locArray)));
    }
    function throwNonFunApp(locArray, funVal) {
      runtime.checkPyretVal(funVal);
      raise(err("non-function-app")(runtime.makeSrcloc(locArray), funVal));
    }

    function throwParseErrorNextToken(loc, nextToken) {
      raise(err("parse-error-next-token")(loc, nextToken));
    }
    function throwParseErrorEOF(loc) {
      raise(err("parse-error-eof")(loc));
    }
    function throwParseErrorUnterminatedString(loc) {
      raise(err("parse-error-unterminated-string")(loc));
    }
    function throwParseErrorBadNumber(loc) {
      raise(err("parse-error-bad-number")(loc));
    }
    function throwParseErrorBadOper(loc) {
      raise(err("parse-error-bad-operator")(loc));
    }

    function throwModuleLoadFailureL(names) {
      raise(makeModuleLoadFailureL(names));
    }

    function makeModuleLoadFailureL(names) {
      var namesList = makeList(names);
      return err("module-load-failure")(namesList);
    }

    function makeRecordFieldsFail(value, failures) {
      runtime.checkPyretVal(value);
      return contract("record-fields-fail")(value, failures);
    }
  
    function makeTupleAnnsFail(value, failures) {
      return contract("tuple-anns-fail")(value, failures);
    }

    function makeTupleAnnsFail(value, failures) {
      return contract("tuple-anns-fail")(value, failures);
    }

    function makeFieldFailure(loc, field, reason) {
      checkSrcloc(loc);
      runtime.checkString(field);
      return contract("field-failure")(loc, field, reason);
    }

    function makeAnnFailure(loc, ann, reason) {
      checkSrcloc(loc);
      return contract("ann-failure")(loc, ann, reason);
    }

    function makeMissingField(loc, field) {
      checkSrcloc(loc);
      runtime.checkString(field);
      return contract("missing-field")(loc, field);
    }

    function makeTupleLengthMismatch(loc, val, annLength, tupLength) {
      checkSrcloc(loc);
      runtime.checkNumber(annLength);
      runtime.checkNumber(tupLength);
      return contract("tup-length-mismatch")(loc, val, annLength, tupLength);
    }

    function makeTypeMismatch(val, name) {
      runtime.checkString(name);
      runtime.checkPyretVal(val);
      return contract("type-mismatch")(val, name);
    }

    function makeRefInitFail(loc, reason) {
      checkSrcloc(loc);
      return contract("ref-init")(loc, reason);
    }

    function makePredicateFailure(val, name) {
      runtime.checkString(name);
      runtime.checkPyretVal(val);
      return contract("predicate-failure")(val, name);
    }

    function makeDotAnnNotPresent(name, field) {
      runtime.checkString(name);
      runtime.checkPyretVal(field);
      return contract("dot-ann-not-present")(name, field);
    }

    function makeFailureAtArg(loc, index, name, args, reason) {
      checkSrcloc(loc);
      runtime.checkNumber(index);
      runtime.checkString(name);
      runtime.checkList(args);
      return contract("failure-at-arg")(loc, index, name, args, reason);
    }

    var isOk = contract("is-ok");
    var isFail = contract("is-fail");
    var isFailArg = contract("is-fail-arg");

    var isEqualityResult = gf(EQ, "is-EqualityResult").app;
    var isEqual = gf(EQ, "is-Equal").app;
    var isNotEqual = gf(EQ, "is-NotEqual").app;
    var isUnknown = gf(EQ, "is-Unknown").app

    var isEmpty = gf(L, "is-empty").app;
    var isLink = gf(L, "is-link").app;

    return runtime.makeJSModuleReturn({
      throwUpdateNonObj : throwUpdateNonObj,
      throwUpdateFrozenRef : throwUpdateFrozenRef,
      throwUpdateNonRef : throwUpdateNonRef,
      throwUpdateNonExistentField : throwUpdateNonExistentField,
      throwNumStringBinopError: throwNumStringBinopError,
      throwNumericBinopError: throwNumericBinopError,
      throwInternalError: throwInternalError,
      throwFieldNotFound: throwFieldNotFound,
      throwLookupConstructorNotObject: throwLookupConstructorNotObject,
      throwLookupNonObject: throwLookupNonObject,
      throwLookupNonTuple: throwLookupNonTuple,
      throwBadTupleBind: throwBadTupleBind,
      throwNonTupleBind: throwNonTupleBind,
      throwLookupLargeIndex: throwLookupLargeIndex,
      throwExtendNonObject: throwExtendNonObject,
      throwTypeMismatch: throwTypeMismatch,
      throwInvalidArrayIndex: throwInvalidArrayIndex,
      throwMessageException: throwMessageException,
      throwMultiErrorException: throwMultiErrorException,
      throwUserException: throwUserException,
      throwEqualityException: throwEqualityException,
      throwUninitializedId: throwUninitializedId,
      throwUninitializedIdMkLoc: throwUninitializedIdMkLoc,
      throwArityError: throwArityError,
      throwArityErrorC: throwArityErrorC,
      throwConstructorArityErrorC: throwConstructorArityErrorC,
      throwCasesArityError: throwCasesArityError,
      throwCasesArityErrorC: throwCasesArityErrorC,
      throwCasesSingletonError: throwCasesSingletonError,
      throwCasesSingletonErrorC: throwCasesSingletonErrorC,
      throwNonBooleanCondition: throwNonBooleanCondition,
      throwNonBooleanOp: throwNonBooleanOp,
      throwNoBranchesMatched: throwNoBranchesMatched,
      throwNoCasesMatched: throwNoCasesMatched,
      throwNonFunApp: throwNonFunApp,
      throwUnfinishedTemplate: throwUnfinishedTemplate,
      throwModuleLoadFailureL: throwModuleLoadFailureL,
      throwInvalidTableColumn: throwInvalidTableColumn,

      throwParseErrorNextToken: throwParseErrorNextToken,
      throwParseErrorEOF: throwParseErrorEOF,
      throwParseErrorUnterminatedString: throwParseErrorUnterminatedString,
      throwParseErrorBadNumber: throwParseErrorBadNumber,
      throwParseErrorBadOper: throwParseErrorBadOper,

      makeRecordFieldsFail: makeRecordFieldsFail,
      makeTupleAnnsFail: makeTupleAnnsFail,
      makeFieldFailure: makeFieldFailure,
      makeAnnFailure: makeAnnFailure,
      makeMissingField: makeMissingField,
      makeTupleLengthMismatch: makeTupleLengthMismatch,
      makeTypeMismatch: makeTypeMismatch,
      makeTupleAnnsFail: makeTupleAnnsFail,
      makeTupleLengthMismatch: makeTupleLengthMismatch,
      makeAnnFailure: makeAnnFailure,
      makeRefInitFail: makeRefInitFail,
      makePredicateFailure: makePredicateFailure,
      makeDotAnnNotPresent: makeDotAnnNotPresent,
      makeFailureAtArg: makeFailureAtArg,
      contractOk: gf(CON, "ok"),
      contractFail: contract("fail"),
      contractFailArg: contract("fail-arg"),
      isOk: isOk,
      isFail: isFail,
      isFailArg: isFailArg,

      equal: gf(EQ, "Equal"),
      notEqual: gf(EQ, "NotEqual"),
      unknown: gf(EQ, "Unknown"),
      isEqual: isEqual,
      isNotEqual: isNotEqual,
      isUnknown: isUnknown,
      isEqualityResult: isEqualityResult,

      makeMessageException: makeMessageException,
      makeUserException: makeUserException,
      makeModuleLoadFailureL: makeModuleLoadFailureL,

      userBreak: gf(ERR, "user-break"),
      isUserBreak: errPred("is-user-break"),

      errPred: errPred,

      cases: cases,

      checkArity: checkArity,

      /*checkResultsSummary: checkResultsSummary,*/

      makeList: makeList,
      makeTreeSet: makeTreeSet,

      isOption: runtime.getField(O, "is-Option"),
      isNone: function(v) { return runtime.getField(O, "is-none").app(v); },
      isSome: function(v) { return runtime.getField(O, "is-some").app(v); },
      makeNone: function() { return runtime.getField(O, "none"); },
      makeSome: function(v) { return runtime.getField(O, "some").app(v); },

      isEither: runtime.getField(E, "is-Either"),
      isLeft: function(v) { return runtime.getField(E, "is-left").app(v); },
      isRight: function(v) { return runtime.getField(E, "is-right").app(v); },
      makeLeft: function(l) { return runtime.getField(E, "left").app(l); },
      makeRight: function(r) { return runtime.getField(E, "right").app(r); },

      toArray: toArray,
      isList: function(list) { return runtime.unwrap(runtime.getField(L, "is-List").app(list)); },
      isLink : isLink,
      isEmpty : isEmpty,

      isErrorDisplay: isErrorDisplay,
      checkErrorDisplay: checkErrorDisplay,
// NOTE(joe): skipping checker
//      isTestResult: isTestResult,
//      checkTestResult: checkTestResult,
//      isTestSuccess: function(val) { return runtime.unwrap(runtime.getField(CH, "is-success").app(val)); },

      isValueSkeleton: function(v) { return runtime.unwrap(runtime.getField(VS, "is-ValueSkeleton").app(v)); },
      isVSValue: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-value").app(v)); },
      isVSTable: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-table").app(v)); },
      isVSCollection: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-collection").app(v)); },
      isVSConstr: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-constr").app(v)); },
      isVSStr: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-str").app(v)); },
      isVSSeq: function(v) { return runtime.unwrap(runtime.getField(VS, "is-vs-seq").app(v)); },
      vsStr: function(s) {
        runtime.checkString(s);
        return runtime.getField(VS, "vs-str").app(s);
      },

      edEmbed: function(v) {
        runtime.checkPyretVal(v);
        return runtime.getField(ED, "embed").app(v);
      },

      //TODO(joe): add more creation methods for error-display/valueskeleton
      //here, which are super-useful!

      skeletonValues: function(skel) {
        var isValueSkeleton = runtime.getField(VS, "is-ValueSkeleton");
        var isValue = runtime.getField(VS, "is-vs-value");
        var isTable = runtime.getField(VS, "is-vs-table");
        var isCollection = runtime.getField(VS, "is-vs-collection");
        var isConstr = runtime.getField(VS, "is-vs-constr");
        var isStr = runtime.getField(VS, "is-vs-str");
        var isSeq = runtime.getField(VS, "is-vs-seq");
        if(!(runtime.unwrap(isValueSkeleton.app(skel)) === true)) {
          throwTypeMismatch(skel, "ValueSkeleton");
        }
        var arr = [];
        var worklist = [skel];
        try {
          for (var i = 0; i < worklist.length; i++) { // length changes as the loop iterates
            var cur = worklist[i];
            if (runtime.unwrap(isValue.app(cur)) === true) {
              arr.push(runtime.getField(cur, "v"));
            } else if (runtime.unwrap(isCollection.app(cur)) === true) {
              Array.prototype.push.apply(worklist, toArray(runtime.getField(cur, "items")));
            } else if (runtime.unwrap(isTable.app(cur)) === true) {
              runtime.getField(cur, "rows").forEach(function(row){
                Array.prototype.push.apply(worklist, row); });
            } else if (runtime.unwrap(isConstr.app(cur)) === true) {
              Array.prototype.push.apply(worklist, toArray(runtime.getField(cur, "args")));
            } else if (runtime.unwrap(isStr.app(cur)) === true) {
              // nothing
            } else if (runtime.unwrap(isSeq.app(cur)) === true) {
              Array.prototype.push.apply(worklist, toArray(runtime.getField(cur, "items")));
            } else {
              throwMessageException("Non-value appeared in skeleton: " + String(cur));
            }
          }
        } catch(e) {
          console.error("******* Something went wrong in skeletonValues: " + JSON.stringify(skel));
          console.error(e);
          throw e;
        }
        return arr;
      }
    });
  }
})
,
"builtin://checker":({"requires":[{"import-type":"builtin",
"name":"either"},
{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"error-display"},
{"import-type":"builtin",
"name":"ffi"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"render-error-display"},
{"import-type":"builtin",
"name":"srcloc"},
{"import-type":"builtin",
"name":"valueskeleton"}],
"provides":{"values":{"check-block-result":"tany",
"each":"tany",
"empty":"tany",
"error-not-boolean":"tany",
"failure-exn":"tany",
"failure-no-exn":"tany",
"failure-not-different":"tany",
"failure-not-dissatisfied":"tany",
"failure-not-equal":"tany",
"failure-not-satisfied":"tany",
"failure-raise-not-dissatisfied":"tany",
"failure-raise-not-satisfied":"tany",
"failure-right-exn":"tany",
"failure-wrong-exn":"tany",
"fold":"tany",
"get-op-fun-name":"tany",
"is-CheckBlockResult":"tany",
"is-CheckOperand":"tany",
"is-TestResult":"tany",
"is-check-block-result":"tany",
"is-empty":"tany",
"is-error-not-boolean":"tany",
"is-failure-exn":"tany",
"is-failure-no-exn":"tany",
"is-failure-not-different":"tany",
"is-failure-not-dissatisfied":"tany",
"is-failure-not-equal":"tany",
"is-failure-not-satisfied":"tany",
"is-failure-raise-not-dissatisfied":"tany",
"is-failure-raise-not-satisfied":"tany",
"is-failure-right-exn":"tany",
"is-failure-wrong-exn":"tany",
"is-left":"tany",
"is-on-left":"tany",
"is-on-refinement":"tany",
"is-on-right":"tany",
"is-right":"tany",
"is-some":"tany",
"is-success":"tany",
"link":"tany",
"list":"tany",
"make-check-context":"tany",
"none":"tany",
"on-left":"tany",
"on-refinement":"tany",
"on-right":"tany",
"render-check-results":"tany",
"render-check-results-stack":"tany",
"report-value":"tany",
"results-summary":"tany",
"some":"tany",
"success":"tany"},
"datatypes":{"atom#CheckBlockResult#2":["data","CheckBlockResult",[],[["check-block-result",
[["maybe-err",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Option"},["tany"]]],["test-results",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"TestResult"}]]],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}],["name",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}],
"atom#CheckOperand#1":["data","CheckOperand",[],[["on-left"],["on-right"],["on-refinement"]],{}],
"atom#TestResult#3":["data","TestResult",[],[["success",
[["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-not-equal",
[["right",
"tany"],["left",
"tany"],["refinement",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-not-different",
[["right",
"tany"],["left",
"tany"],["refinement",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-not-satisfied",
[["pred",
"tany"],["val",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-not-dissatisfied",
[["pred",
"tany"],["val",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-wrong-exn",
[["actual-exn",
"tany"],["exn-expected",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-right-exn",
[["actual-exn",
"tany"],["exn-not-expected",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-exn",
[["exn-place",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"CheckOperand"}],["actual-exn",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-no-exn",
[["exn-expected",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Option"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-raise-not-satisfied",
[["pred",
"tany"],["exn",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["failure-raise-not-dissatisfied",
[["pred",
"tany"],["exn",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]],["error-not-boolean",
[["test-result",
"tany"],["righ",
"tany"],["left",
"tany"],["refinement",
"tany"],["loc",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://checker"},
"name":"Loc"}]]]],{}]},
"aliases":{"CheckBlockResult":"tany",
"CheckOperand":"tany",
"Either":"tany",
"List":"tany",
"Loc":"tany",
"Option":"tany",
"TestResult":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$either38,$E39,$ED40,$$import41,$$import42,$lists43,$option44,$RED45,$SL46,$VS47) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://checker";
var D = R.undefined;
var L = [[M,21,7,333,21,17,343],
[M,22,8,352,22,19,363],
[M,23,7,371,23,17,381],
[M,24,11,393,24,25,407],
[M,25,7,415,25,17,425],
[M,26,7,433,26,17,443],
[M,29,10,483,29,24,497],
[M,30,7,505,30,18,516],
[M,31,7,524,31,18,535],
[M,38,6,643,38,22,659],
[M,39,6,687,39,22,703],
[M,40,6,728,40,23,745],
[M,41,17,781,41,47,811],
[M,41,23,787,41,46,810],
[M,36,0,601,43,3,821],
[M,45,11,834,45,26,849],
[M,46,10,860,46,24,874],
[M,49,2,897,49,11,906],
[M,50,2,909,50,12,919],
[M,51,2,922,51,17,937],
[M,48,0,876,52,3,941],
[M,55,2,968,60,5,1106],
[M,56,14,1004,56,20,1010],
[M,57,13,1025,57,16,1028],
[M,58,22,1052,58,38,1068],
[M,59,19,1089,59,30,1100],
[M,55,4,970,60,5,1106],
[M,54,0,943,61,3,1110],
[M,64,3,1149,64,14,1160],
[M,65,5,1167,65,12,1174],
[M,66,6,1182,66,21,1197],
[M,68,6,1220,68,27,1241],
[M,69,4,1248,69,19,1263],
[M,63,0,1112,70,3,1268],
[M,76,9,1466,76,17,1474],
[M,76,9,1466,76,30,1487],
[M,77,8,1497,77,28,1517],
[M,78,28,1546,78,36,1554],
[M,78,14,1532,78,37,1555],
[M,79,32,1589,79,40,1597],
[M,81,22,1652,81,35,1665],
[M,82,22,1688,82,36,1702],
[M,82,22,1688,82,42,1708],
[M,83,34,1743,83,49,1758],
[M,83,53,1762,83,60,1769],
[M,83,62,1771,83,71,1780],
[M,83,21,1730,83,76,1785],
[M,84,34,1820,84,50,1836],
[M,84,53,1839,84,60,1846],
[M,84,62,1848,84,71,1857],
[M,84,21,1807,84,76,1862],
[M,85,34,1897,85,53,1916],
[M,87,30,1975,87,41,1986],
[M,87,30,1975,87,52,1997],
[M,87,30,1975,87,63,2008],
[M,87,68,2013,87,75,2020],
[M,87,30,1975,87,76,2021],
[M,87,16,1961,87,80,2025],
[M,86,16,1934,86,20,1938],
[M,85,20,1883,94,15,2352],
[M,89,17,2070,89,28,2081],
[M,90,32,2115,90,43,2126],
[M,90,32,2115,90,54,2137],
[M,90,32,2115,90,65,2148],
[M,90,70,2153,90,77,2160],
[M,90,32,2115,90,78,2161],
[M,90,18,2101,90,82,2165],
[M,91,18,2185,91,31,2198],
[M,92,45,2245,92,57,2257],
[M,92,45,2245,92,68,2268],
[M,92,73,2273,92,80,2280],
[M,92,45,2245,92,81,2281],
[M,92,31,2231,92,85,2285],
[M,92,94,2294,92,97,2297],
[M,92,88,2288,92,92,2292],
[M,92,18,2218,92,103,2303],
[M,93,18,2323,93,30,2335],
[M,88,16,2042,88,23,2049],
[M,88,14,2040,93,31,2336],
[M,95,13,2366,95,21,2374],
[M,96,15,2391,96,22,2398],
[M,97,16,2416,97,45,2445],
[M,98,16,2463,98,30,2477],
[M,99,16,2495,99,48,2527],
[M,100,25,2555,100,33,2563],
[M,100,15,2545,100,34,2564],
[M,101,15,2581,101,22,2588],
[M,102,27,2617,102,38,2628],
[M,104,21,2693,104,32,2704],
[M,105,20,2726,105,55,2761],
[M,106,27,2790,106,43,2806],
[M,106,53,2816,106,111,2874],
[M,103,20,2650,103,38,2668],
[M,102,16,2606,128,19,4010],
[M,108,34,2944,108,53,2963],
[M,110,25,3022,110,36,3033],
[M,111,26,3061,111,61,3096],
[M,112,34,3132,112,50,3148],
[M,112,60,3158,112,88,3186],
[M,109,24,2989,109,28,2993],
[M,108,20,2930,120,23,3611],
[M,114,25,3248,114,36,3259],
[M,114,24,3247,119,63,3587],
[M,115,26,3287,115,61,3322],
[M,116,39,3363,116,59,3383],
[M,116,68,3392,116,71,3395],
[M,116,62,3386,116,66,3390],
[M,116,26,3350,116,76,3400],
[M,117,26,3428,117,60,3462],
[M,118,34,3498,118,50,3514],
[M,119,26,3550,119,62,3586],
[M,113,24,3212,113,31,3219],
[M,113,22,3210,119,63,3587],
[M,108,26,2936,108,32,2942],
[M,107,20,2896,107,30,2906],
[M,107,18,2894,120,23,3611],
[M,122,21,3674,122,32,3685],
[M,122,20,3673,127,59,3990],
[M,123,22,3709,123,67,3754],
[M,124,30,3786,124,58,3814],
[M,124,22,3778,124,59,3815],
[M,125,22,3839,125,56,3873],
[M,126,30,3905,126,46,3921],
[M,127,22,3953,127,58,3989],
[M,124,38,3794,124,57,3813],
[M,121,20,3632,121,37,3649],
[M,121,18,3630,127,59,3990],
[M,129,37,4050,129,46,4059],
[M,130,37,4099,130,47,4109],
[M,130,16,4078,130,48,4110],
[M,129,16,4029,129,47,4060],
[M,85,26,1889,85,32,1895],
[M,81,12,1642,81,35,1665],
[M,80,12,1612,80,26,1626],
[M,79,8,1565,132,11,4169],
[M,80,10,1610,130,49,4111],
[M,131,25,4137,131,45,4157],
[M,131,12,4124,131,16,4128],
[M,79,14,1571,79,20,1577],
[M,79,22,1579,79,41,1598],
[M,134,8,4190,134,28,4210],
[M,75,4,1380,136,7,4228],
[M,138,7,4269,138,15,4277],
[M,139,9,4288,139,16,4295],
[M,139,32,4311,139,47,4326],
[M,140,25,4353,140,52,4380],
[M,140,14,4342,140,18,4346],
[M,139,18,4297,142,13,4472],
[M,141,25,4406,141,77,4458],
[M,141,14,4395,141,21,4402],
[M,143,17,4492,143,26,4501],
[M,143,8,4483,143,27,4502],
[M,144,17,4521,144,27,4531],
[M,144,8,4512,144,28,4532],
[M,139,24,4303,139,30,4309],
[M,137,4,4234,145,7,4541],
[M,148,9,4701,148,17,4709],
[M,148,9,4701,148,30,4722],
[M,149,8,4732,149,28,4752],
[M,150,28,4781,150,36,4789],
[M,150,14,4767,150,37,4790],
[M,151,32,4824,151,40,4832],
[M,153,22,4887,153,35,4900],
[M,154,22,4923,154,36,4937],
[M,154,22,4923,154,42,4943],
[M,155,34,4978,155,49,4993],
[M,155,53,4997,155,60,5004],
[M,155,62,5006,155,71,5015],
[M,155,21,4965,155,76,5020],
[M,156,34,5055,156,50,5071],
[M,156,53,5074,156,60,5081],
[M,156,62,5083,156,71,5092],
[M,156,21,5042,156,76,5097],
[M,157,34,5132,157,53,5151],
[M,159,30,5210,159,41,5221],
[M,159,30,5210,159,52,5232],
[M,159,30,5210,159,63,5243],
[M,159,68,5248,159,75,5255],
[M,159,30,5210,159,76,5256],
[M,159,16,5196,159,80,5260],
[M,158,16,5169,158,20,5173],
[M,157,20,5118,166,15,5587],
[M,161,17,5305,161,28,5316],
[M,162,32,5350,162,43,5361],
[M,162,32,5350,162,54,5372],
[M,162,32,5350,162,65,5383],
[M,162,70,5388,162,77,5395],
[M,162,32,5350,162,78,5396],
[M,162,18,5336,162,82,5400],
[M,163,18,5420,163,31,5433],
[M,164,45,5480,164,57,5492],
[M,164,45,5480,164,68,5503],
[M,164,73,5508,164,80,5515],
[M,164,45,5480,164,81,5516],
[M,164,31,5466,164,85,5520],
[M,164,94,5529,164,97,5532],
[M,164,88,5523,164,92,5527],
[M,164,18,5453,164,103,5538],
[M,165,18,5558,165,30,5570],
[M,160,16,5277,160,23,5284],
[M,160,14,5275,165,31,5571],
[M,167,13,5601,167,21,5609],
[M,168,15,5626,168,22,5633],
[M,169,16,5651,169,45,5680],
[M,170,16,5698,170,30,5712],
[M,171,16,5730,171,48,5762],
[M,172,25,5790,172,33,5798],
[M,172,15,5780,172,34,5799],
[M,173,15,5816,173,22,5823],
[M,174,27,5852,174,38,5863],
[M,176,34,5937,176,53,5956],
[M,178,25,6015,178,36,6026],
[M,179,26,6054,179,61,6089],
[M,180,34,6125,180,50,6141],
[M,180,60,6151,180,92,6183],
[M,177,24,5982,177,28,5986],
[M,176,20,5923,188,23,6612],
[M,182,25,6245,182,36,6256],
[M,182,24,6244,187,63,6588],
[M,183,26,6284,183,61,6319],
[M,184,39,6360,184,59,6380],
[M,184,68,6389,184,71,6392],
[M,184,62,6383,184,66,6387],
[M,184,26,6347,184,76,6397],
[M,185,26,6425,185,64,6463],
[M,186,34,6499,186,50,6515],
[M,187,26,6551,187,62,6587],
[M,181,24,6209,181,31,6216],
[M,181,22,6207,187,63,6588],
[M,176,26,5929,176,32,5935],
[M,175,20,5885,175,34,5899],
[M,174,16,5841,196,19,7019],
[M,175,18,5883,188,23,6612],
[M,190,21,6679,190,32,6690],
[M,190,20,6678,195,59,6999],
[M,191,22,6714,191,67,6759],
[M,192,30,6791,192,58,6819],
[M,192,22,6783,192,59,6820],
[M,193,22,6844,193,60,6882],
[M,194,30,6914,194,46,6930],
[M,195,22,6962,195,58,6998],
[M,192,38,6799,192,57,6818],
[M,189,20,6633,189,41,6654],
[M,189,18,6631,195,59,6999],
[M,197,37,7059,197,46,7068],
[M,198,37,7108,198,47,7118],
[M,198,16,7087,198,48,7119],
[M,197,16,7038,197,47,7069],
[M,157,26,5124,157,32,5130],
[M,153,12,4877,153,35,4900],
[M,152,12,4847,152,26,4861],
[M,151,8,4800,200,11,7178],
[M,152,10,4845,198,49,7120],
[M,199,25,7146,199,45,7166],
[M,199,12,7133,199,16,7137],
[M,151,14,4806,151,20,4812],
[M,151,22,4814,151,41,4833],
[M,202,8,7199,202,28,7219],
[M,147,4,4615,204,7,7237],
[M,206,7,7278,206,15,7286],
[M,207,9,7297,207,16,7304],
[M,207,32,7320,207,47,7335],
[M,208,25,7362,208,56,7393],
[M,208,14,7351,208,18,7355],
[M,207,18,7306,210,13,7489],
[M,209,25,7419,209,81,7475],
[M,209,14,7408,209,21,7415],
[M,211,17,7509,211,26,7518],
[M,211,8,7500,211,27,7519],
[M,212,17,7538,212,27,7548],
[M,212,8,7529,212,28,7549],
[M,207,24,7312,207,30,7318],
[M,205,4,7243,213,7,7558],
[M,216,9,7704,216,17,7712],
[M,216,9,7704,216,30,7725],
[M,217,8,7735,217,28,7755],
[M,218,28,7784,218,36,7792],
[M,218,14,7770,218,37,7793],
[M,219,32,7827,219,40,7835],
[M,221,22,7890,221,35,7903],
[M,222,22,7926,222,36,7940],
[M,222,22,7926,222,42,7946],
[M,223,34,7981,223,54,8001],
[M,223,58,8005,223,65,8012],
[M,223,67,8014,223,76,8023],
[M,223,21,7968,223,81,8028],
[M,224,34,8063,224,54,8083],
[M,224,57,8086,224,64,8093],
[M,224,66,8095,224,75,8104],
[M,224,21,8050,224,80,8109],
[M,226,13,8124,226,21,8132],
[M,227,15,8149,227,22,8156],
[M,228,16,8174,228,45,8203],
[M,229,24,8229,229,44,8249],
[M,229,16,8221,229,45,8250],
[M,230,16,8268,230,48,8300],
[M,231,25,8328,231,33,8336],
[M,231,15,8318,231,34,8337],
[M,232,15,8354,232,22,8361],
[M,232,14,8353,239,32,8650],
[M,233,16,8379,233,51,8414],
[M,235,16,8456,235,63,8503],
[M,237,16,8545,237,63,8592],
[M,239,16,8634,239,31,8649],
[M,240,23,8675,240,31,8683],
[M,240,14,8666,240,32,8684],
[M,221,12,7880,221,35,7903],
[M,220,12,7850,220,26,7864],
[M,219,8,7803,242,11,8738],
[M,220,10,7848,240,33,8685],
[M,241,20,8706,241,40,8726],
[M,241,12,8698,241,16,8702],
[M,219,14,7809,219,20,7815],
[M,219,22,7817,219,41,7836],
[M,244,8,8759,244,28,8779],
[M,215,4,7618,246,7,8797],
[M,248,7,8838,248,15,8846],
[M,249,9,8857,249,16,8864],
[M,249,18,8866,249,56,8904],
[M,250,17,8924,250,25,8932],
[M,250,8,8915,250,26,8933],
[M,247,4,8803,251,7,8942],
[M,254,9,9091,254,17,9099],
[M,254,9,9091,254,30,9112],
[M,255,8,9122,255,28,9142],
[M,256,28,9171,256,36,9179],
[M,256,14,9157,256,37,9180],
[M,257,32,9214,257,40,9222],
[M,259,22,9277,259,35,9290],
[M,260,22,9313,260,36,9327],
[M,260,22,9313,260,42,9333],
[M,261,34,9368,261,54,9388],
[M,261,58,9392,261,65,9399],
[M,261,67,9401,261,76,9410],
[M,261,21,9355,261,81,9415],
[M,262,34,9450,262,54,9470],
[M,262,57,9473,262,64,9480],
[M,262,66,9482,262,75,9491],
[M,262,21,9437,262,80,9496],
[M,263,13,9510,263,21,9518],
[M,264,15,9535,264,22,9542],
[M,265,16,9560,265,45,9589],
[M,266,24,9615,266,43,9634],
[M,266,16,9607,266,44,9635],
[M,267,16,9653,267,48,9685],
[M,268,25,9713,268,33,9721],
[M,268,15,9703,268,34,9722],
[M,269,15,9739,269,22,9746],
[M,269,14,9738,276,33,10040],
[M,270,16,9764,270,51,9799],
[M,272,16,9841,272,67,9892],
[M,274,16,9934,274,63,9981],
[M,276,16,10023,276,32,10039],
[M,277,23,10065,277,31,10073],
[M,277,14,10056,277,32,10074],
[M,259,12,9267,259,35,9290],
[M,258,12,9237,258,26,9251],
[M,257,8,9190,280,11,10140],
[M,258,10,9235,277,33,10075],
[M,279,12,10108,279,32,10128],
[M,278,12,10088,278,16,10092],
[M,257,14,9196,257,20,9202],
[M,257,22,9204,257,41,9223],
[M,282,8,10161,282,28,10181],
[M,253,4,9005,284,7,10199],
[M,286,7,10240,286,15,10248],
[M,287,9,10259,287,16,10266],
[M,287,18,10268,287,83,10333],
[M,288,17,10353,288,25,10361],
[M,288,8,10344,288,26,10362],
[M,285,4,10205,289,7,10371],
[M,292,6,10525,292,26,10545],
[M,291,4,10442,293,7,10553],
[M,295,7,10594,295,15,10602],
[M,296,9,10613,296,16,10620],
[M,296,18,10622,296,54,10658],
[M,297,17,10678,297,32,10693],
[M,297,8,10669,297,33,10694],
[M,298,9,10705,298,16,10712],
[M,298,18,10714,298,44,10740],
[M,299,17,10760,299,34,10777],
[M,299,8,10751,299,35,10778],
[M,294,4,10559,300,7,10787],
[M,304,22,10892,304,30,10900],
[M,304,10,10880,304,31,10901],
[M,305,22,10925,305,39,10942],
[M,305,10,10913,305,40,10943],
[M,306,33,10978,306,48,10993],
[M,306,10,10955,306,50,10995],
[M,303,9,10864,303,13,10868],
[M,302,6,10821,306,52,10997],
[M,306,22,10967,306,49,10994],
[M,301,4,10793,307,7,11005],
[M,310,6,11164,310,26,11184],
[M,309,4,11081,311,7,11192],
[M,313,7,11233,313,15,11241],
[M,314,9,11252,314,16,11259],
[M,314,18,11261,314,43,11286],
[M,315,17,11306,315,32,11321],
[M,315,8,11297,315,33,11322],
[M,316,9,11333,316,16,11340],
[M,316,18,11342,316,60,11384],
[M,317,17,11404,317,38,11425],
[M,317,8,11395,317,39,11426],
[M,312,4,11198,318,7,11435],
[M,322,22,11540,322,30,11548],
[M,322,10,11528,322,31,11549],
[M,323,22,11573,323,43,11594],
[M,323,10,11561,323,44,11595],
[M,324,33,11630,324,48,11645],
[M,324,10,11607,324,50,11647],
[M,321,9,11512,321,13,11516],
[M,320,6,11469,324,52,11649],
[M,324,22,11619,324,49,11646],
[M,319,4,11441,325,7,11657],
[M,328,9,11822,328,17,11830],
[M,328,9,11822,328,30,11843],
[M,329,8,11853,329,28,11873],
[M,330,28,11902,330,36,11910],
[M,330,14,11888,330,37,11911],
[M,331,32,11945,331,40,11953],
[M,333,22,12008,333,35,12021],
[M,334,13,12035,334,21,12043],
[M,335,15,12060,335,22,12067],
[M,336,16,12085,336,56,12125],
[M,337,25,12153,337,33,12161],
[M,337,15,12143,337,34,12162],
[M,339,23,12215,339,74,12266],
[M,339,17,12209,339,21,12213],
[M,340,36,12306,340,50,12320],
[M,341,57,12379,341,77,12399],
[M,341,81,12403,341,88,12410],
[M,341,90,12412,341,99,12421],
[M,341,44,12366,341,105,12427],
[M,341,38,12360,341,42,12364],
[M,341,20,12342,341,27,12349],
[M,340,16,12286,349,19,12962],
[M,342,57,12486,342,78,12507],
[M,342,81,12510,342,88,12517],
[M,342,90,12519,342,104,12533],
[M,342,90,12519,342,110,12539],
[M,342,90,12519,342,112,12541],
[M,342,44,12473,342,118,12547],
[M,342,38,12467,342,42,12471],
[M,342,20,12449,342,28,12457],
[M,344,39,12625,344,58,12644],
[M,345,55,12730,345,76,12751],
[M,345,81,12756,345,88,12763],
[M,345,90,12765,345,93,12768],
[M,345,42,12717,345,99,12774],
[M,345,36,12711,345,40,12715],
[M,345,24,12699,345,31,12706],
[M,344,20,12606,348,23,12942],
[M,347,44,12856,347,64,12876],
[M,347,68,12880,347,75,12887],
[M,347,77,12889,347,91,12903],
[M,347,77,12889,347,97,12909],
[M,347,77,12889,347,99,12911],
[M,347,31,12843,347,105,12917],
[M,347,25,12837,347,29,12841],
[M,346,24,12800,346,28,12804],
[M,344,26,12612,344,37,12623],
[M,343,20,12569,343,33,12582],
[M,343,18,12567,348,23,12942],
[M,349,29,12972,349,63,13006],
[M,349,23,12966,349,27,12970],
[M,338,14,12178,349,65,13008],
[M,350,23,13033,350,38,13048],
[M,350,14,13024,350,39,13049],
[M,339,16,12208,349,64,13007],
[M,339,16,12208,349,19,12962],
[M,340,22,12292,340,34,12304],
[M,333,12,11998,333,35,12021],
[M,332,12,11968,332,26,11982],
[M,331,8,11921,352,11,13103],
[M,332,10,11966,350,40,13050],
[M,351,20,13071,351,40,13091],
[M,351,12,13063,351,16,13067],
[M,331,14,11927,331,20,11933],
[M,331,22,11935,331,41,11954],
[M,354,8,13124,354,28,13144],
[M,327,4,11736,356,7,13162],
[M,358,7,13203,358,15,13211],
[M,359,9,13222,359,16,13229],
[M,359,18,13231,359,54,13267],
[M,360,17,13287,360,32,13302],
[M,360,8,13278,360,33,13303],
[M,357,4,13168,361,7,13312],
[M,365,22,13411,365,30,13419],
[M,365,10,13399,365,31,13420],
[M,366,33,13455,366,48,13470],
[M,366,10,13432,366,50,13472],
[M,367,22,13496,367,36,13510],
[M,367,10,13484,367,37,13511],
[M,364,9,13383,364,13,13387],
[M,363,6,13346,367,39,13513],
[M,366,22,13444,366,49,13471],
[M,362,4,13318,368,7,13521],
[M,371,20,13693,371,37,13710],
[M,372,24,13736,372,32,13744],
[M,372,35,13747,372,42,13754],
[M,372,44,13756,372,84,13796],
[M,372,87,13799,372,100,13812],
[M,372,10,13722,372,19,13731],
[M,371,6,13679,374,9,13900],
[M,373,24,13838,373,32,13846],
[M,373,35,13849,373,42,13856],
[M,373,44,13858,373,74,13888],
[M,373,10,13824,373,14,13828],
[M,371,12,13685,371,18,13691],
[M,370,4,13596,375,7,13908],
[M,377,20,13962,377,37,13979],
[M,378,24,14005,378,32,14013],
[M,378,35,14016,378,42,14023],
[M,378,44,14025,378,84,14065],
[M,378,87,14068,378,100,14081],
[M,378,10,13991,378,19,14000],
[M,377,6,13948,380,9,14169],
[M,379,24,14107,379,32,14115],
[M,379,35,14118,379,42,14125],
[M,379,44,14127,379,74,14157],
[M,379,10,14093,379,14,14097],
[M,377,12,13954,377,18,13960],
[M,376,4,13914,381,7,14177],
[M,384,9,14329,384,17,14337],
[M,384,9,14329,384,30,14350],
[M,385,8,14360,385,28,14380],
[M,386,28,14409,386,36,14417],
[M,386,14,14395,386,37,14418],
[M,387,32,14452,387,40,14460],
[M,389,22,14515,389,35,14528],
[M,390,22,14551,390,36,14565],
[M,390,22,14551,390,42,14571],
[M,391,34,14606,391,54,14626],
[M,391,58,14630,391,65,14637],
[M,391,67,14639,391,76,14648],
[M,391,21,14593,391,81,14653],
[M,392,34,14688,392,54,14708],
[M,392,57,14711,392,64,14718],
[M,392,66,14720,392,75,14729],
[M,392,21,14675,392,80,14734],
[M,394,13,14749,394,21,14757],
[M,395,15,14774,395,22,14781],
[M,396,16,14799,396,45,14828],
[M,397,24,14854,397,51,14881],
[M,397,16,14846,397,52,14882],
[M,398,16,14900,398,48,14932],
[M,399,25,14960,399,33,14968],
[M,399,15,14950,399,34,14969],
[M,400,15,14986,400,22,14993],
[M,400,14,14985,407,33,15307],
[M,401,16,15011,401,51,15046],
[M,403,16,15088,403,87,15159],
[M,405,16,15201,405,63,15248],
[M,407,16,15290,407,32,15306],
[M,408,23,15332,408,31,15340],
[M,408,14,15323,408,32,15341],
[M,389,12,14505,389,35,14528],
[M,388,12,14475,388,26,14489],
[M,387,8,14428,410,11,15395],
[M,388,10,14473,408,33,15342],
[M,409,20,15363,409,40,15383],
[M,409,12,15355,409,16,15359],
[M,387,14,14434,387,20,14440],
[M,387,22,14442,387,41,14461],
[M,412,8,15416,412,28,15436],
[M,383,4,14243,414,7,15454],
[M,416,7,15495,416,15,15503],
[M,417,9,15514,417,16,15521],
[M,417,18,15523,417,60,15565],
[M,418,9,15577,418,16,15584],
[M,418,38,15606,418,46,15614],
[M,418,18,15586,418,48,15616],
[M,418,27,15595,418,47,15615],
[M,415,4,15460,419,7,15626],
[M,423,22,15741,423,30,15749],
[M,423,10,15729,423,31,15750],
[M,424,33,15785,424,41,15793],
[M,424,10,15762,424,43,15795],
[M,425,22,15819,425,31,15828],
[M,425,10,15807,425,32,15829],
[M,422,9,15713,422,13,15717],
[M,421,6,15660,425,34,15831],
[M,424,22,15774,424,42,15794],
[M,420,4,15632,426,7,15839],
[M,429,9,15994,429,17,16002],
[M,429,9,15994,429,30,16015],
[M,430,8,16025,430,28,16045],
[M,431,28,16074,431,36,16082],
[M,431,14,16060,431,37,16083],
[M,432,32,16117,432,40,16125],
[M,434,22,16180,434,35,16193],
[M,435,22,16216,435,36,16230],
[M,435,22,16216,435,42,16236],
[M,436,34,16271,436,54,16291],
[M,436,58,16295,436,65,16302],
[M,436,67,16304,436,76,16313],
[M,436,21,16258,436,81,16318],
[M,437,34,16353,437,54,16373],
[M,437,57,16376,437,64,16383],
[M,437,66,16385,437,75,16394],
[M,437,21,16340,437,80,16399],
[M,439,13,16414,439,21,16422],
[M,440,15,16439,440,22,16446],
[M,441,16,16464,441,45,16493],
[M,442,24,16519,442,51,16546],
[M,442,16,16511,442,52,16547],
[M,443,16,16565,443,48,16597],
[M,444,25,16625,444,33,16633],
[M,444,15,16615,444,34,16634],
[M,445,15,16651,445,22,16658],
[M,445,14,16650,452,32,16975],
[M,446,16,16676,446,51,16711],
[M,448,16,16753,448,91,16828],
[M,450,16,16870,450,63,16917],
[M,452,16,16959,452,31,16974],
[M,453,23,17000,453,31,17008],
[M,453,14,16991,453,32,17009],
[M,434,12,16170,434,35,16193],
[M,433,12,16140,433,26,16154],
[M,432,8,16093,455,11,17063],
[M,433,10,16138,453,33,17010],
[M,454,20,17031,454,40,17051],
[M,454,12,17023,454,16,17027],
[M,432,14,16099,432,20,16105],
[M,432,22,16107,432,41,16126],
[M,457,8,17084,457,28,17104],
[M,428,4,15908,459,7,17122],
[M,461,7,17163,461,15,17171],
[M,462,9,17182,462,16,17189],
[M,462,18,17191,462,87,17260],
[M,463,9,17272,463,16,17279],
[M,463,38,17301,463,46,17309],
[M,463,18,17281,463,48,17311],
[M,463,27,17290,463,47,17310],
[M,460,4,17128,464,7,17321],
[M,468,22,17439,468,30,17447],
[M,468,10,17427,468,31,17448],
[M,469,33,17483,469,41,17491],
[M,469,10,17460,469,43,17493],
[M,470,22,17517,470,31,17526],
[M,470,10,17505,470,32,17527],
[M,467,9,17411,467,13,17415],
[M,466,6,17355,470,34,17529],
[M,469,22,17472,469,42,17492],
[M,465,4,17327,471,7,17537],
[M,476,7,17806,476,15,17814],
[M,477,9,17825,477,16,17832],
[M,477,18,17834,477,105,17921],
[M,478,9,17933,478,16,17940],
[M,478,27,17951,478,43,17967],
[M,478,18,17942,478,44,17968],
[M,475,4,17722,479,7,17978],
[M,481,7,18019,481,15,18027],
[M,482,9,18038,482,16,18045],
[M,482,18,18047,482,105,18134],
[M,483,9,18146,483,16,18153],
[M,483,27,18164,483,43,18180],
[M,483,18,18155,483,44,18181],
[M,480,4,17984,484,7,18191],
[M,73,2,1289,73,23,1310],
[M,73,19,1306,73,22,1309],
[M,73,4,1291,73,23,1310],
[M,74,2,1313,145,7,4541],
[M,74,29,1340,74,32,1343],
[M,74,4,1315,74,58,1369],
[M,146,2,4544,213,7,7558],
[M,146,33,4575,146,36,4578],
[M,146,4,4546,146,62,4604],
[M,214,2,7561,251,7,8942],
[M,214,33,7592,214,36,7595],
[M,214,4,7563,214,48,7607],
[M,252,2,8945,289,7,10371],
[M,252,36,8979,252,39,8982],
[M,252,4,8947,252,51,8994],
[M,290,2,10374,307,8,11006],
[M,290,29,10401,290,32,10404],
[M,290,4,10376,290,59,10431],
[M,308,2,11009,325,8,11658],
[M,308,29,11036,308,32,11039],
[M,308,4,11011,308,63,11070],
[M,326,2,11661,368,8,13522],
[M,326,23,11682,326,26,11685],
[M,326,53,11712,326,65,11724],
[M,326,4,11663,326,66,11725],
[M,369,2,13525,381,7,14177],
[M,369,26,13549,369,29,13552],
[M,369,47,13570,369,61,13584],
[M,369,4,13527,369,62,13585],
[M,382,2,14180,426,7,15839],
[M,382,39,14217,382,42,14220],
[M,382,4,14182,382,54,14232],
[M,427,2,15842,471,7,17537],
[M,427,42,15882,427,45,15885],
[M,427,4,15844,427,57,15897],
[M,474,2,17643,484,7,18191],
[M,474,29,17670,474,32,17673],
[M,474,4,17645,474,70,17711],
[M,72,0,1270,485,3,18195],
[M,488,23,18294,488,27,18298],
[M,490,22,18373,490,26,18377],
[M,490,21,18372,490,48,18399],
[M,489,30,18332,489,46,18348],
[M,489,2,18304,491,5,18405],
[M,492,25,18431,492,29,18435],
[M,494,24,18498,494,28,18502],
[M,494,23,18497,494,50,18524],
[M,493,22,18461,493,32,18471],
[M,493,2,18441,495,5,18530],
[M,498,23,18616,498,40,18633],
[M,498,53,18646,498,59,18652],
[M,499,9,18667,499,21,18679],
[M,499,52,18710,499,56,18714],
[M,499,24,18682,499,68,18726],
[M,499,35,18693,499,67,18725],
[M,501,25,18764,501,43,18782],
[M,501,57,18796,501,64,18803],
[M,502,11,18820,502,23,18832],
[M,502,54,18863,502,58,18867],
[M,502,26,18835,502,71,18880],
[M,502,37,18846,502,70,18879],
[M,504,42,18937,504,46,18941],
[M,504,48,18943,504,52,18947],
[M,504,32,18927,504,53,18948],
[M,504,25,18920,504,57,18952],
[M,505,13,18967,505,26,18980],
[M,505,56,19010,505,61,19015],
[M,505,28,18982,505,78,19032],
[M,505,39,18993,505,77,19031],
[M,506,16,19049,506,21,19054],
[M,504,16,18911,504,58,18953],
[M,501,13,18752,501,69,18808],
[M,498,11,18604,498,64,18657],
[M,497,4,18564,510,7,19098],
[M,496,2,18533,511,5,19104],
[M,513,7,19160,513,18,19171],
[M,514,6,19179,514,30,19203],
[M,514,17,19190,514,29,19202],
[M,516,6,19220,516,30,19244],
[M,516,17,19231,516,29,19243],
[M,512,2,19107,518,5,19258],
[M,519,43,19302,519,47,19306],
[M,519,2,19261,519,54,19313],
[M,522,11,19379,522,20,19388],
[M,522,24,19392,522,57,19425],
[M,522,25,19393,522,56,19424],
[M,522,11,19379,522,57,19425],
[M,526,28,19563,526,33,19568],
[M,528,61,19663,528,67,19669],
[M,528,69,19671,528,79,19681],
[M,528,25,19627,528,104,19706],
[M,528,42,19644,528,103,19705],
[M,528,14,19616,528,21,19623],
[M,527,10,19580,530,13,19833],
[M,529,64,19771,529,70,19777],
[M,529,72,19779,529,82,19789],
[M,529,28,19735,529,112,19819],
[M,529,45,19752,529,111,19818],
[M,529,101,19808,529,110,19817],
[M,529,14,19721,529,24,19731],
[M,527,16,19586,527,22,19592],
[M,526,19,19554,526,34,19569],
[M,525,10,19519,525,25,19534],
[M,523,8,19435,532,11,19889],
[M,521,4,19322,534,7,19907],
[M,539,17,20083,539,53,20119],
[M,539,10,20076,539,57,20123],
[M,537,8,20030,539,58,20124],
[M,538,10,20056,538,18,20064],
[M,536,6,19966,540,9,20134],
[M,536,10,19970,536,31,19991],
[M,535,4,19913,542,7,20156],
[M,547,17,20352,547,53,20388],
[M,547,10,20345,547,57,20392],
[M,545,8,20287,547,58,20393],
[M,546,10,20313,546,30,20333],
[M,546,10,20313,546,22,20325],
[M,544,6,20223,548,9,20403],
[M,544,10,20227,544,31,20248],
[M,543,4,20162,550,7,20425],
[M,555,17,20610,555,57,20650],
[M,555,10,20603,555,61,20654],
[M,553,8,20552,555,62,20655],
[M,554,10,20578,554,23,20591],
[M,554,14,20582,554,22,20590],
[M,552,6,20488,556,9,20665],
[M,552,10,20492,552,31,20513],
[M,551,4,20431,558,7,20687],
[M,562,11,20877,562,39,20905],
[M,563,10,20917,563,77,20984],
[M,563,21,20928,563,76,20983],
[M,566,19,21057,566,67,21105],
[M,566,42,21080,566,58,21096],
[M,566,12,21050,566,71,21109],
[M,565,10,21009,566,72,21110],
[M,562,15,20881,562,38,20904],
[M,561,22,20847,561,40,20865],
[M,560,6,20769,568,9,21132],
[M,560,10,20773,560,31,20794],
[M,559,4,20693,570,7,21154],
[M,574,11,21348,574,39,21376],
[M,575,10,21388,575,77,21455],
[M,575,21,21399,575,76,21454],
[M,578,19,21533,578,71,21585],
[M,578,46,21560,578,62,21576],
[M,578,12,21526,578,75,21589],
[M,577,10,21480,578,76,21590],
[M,577,26,21496,577,42,21512],
[M,574,15,21352,574,38,21375],
[M,573,22,21318,573,40,21336],
[M,572,6,21240,580,9,21612],
[M,572,10,21244,572,31,21265],
[M,571,4,21160,582,7,21634],
[M,587,17,21821,587,51,21855],
[M,587,10,21814,587,55,21859],
[M,585,8,21770,587,56,21860],
[M,586,10,21796,586,16,21802],
[M,584,6,21707,588,9,21870],
[M,584,10,21711,584,31,21732],
[M,583,4,21640,590,7,21892],
[M,595,17,22088,595,54,22125],
[M,595,10,22081,595,58,22129],
[M,593,8,22032,595,59,22130],
[M,594,10,22058,594,21,22069],
[M,594,14,22062,594,20,22068],
[M,592,6,21969,596,9,22140],
[M,592,10,21973,592,31,21994],
[M,591,4,21898,598,7,22162],
[M,602,15,22278,602,53,22316],
[M,602,8,22271,602,57,22320],
[M,600,6,22227,602,58,22321],
[M,601,8,22251,601,18,22261],
[M,599,4,22168,604,7,22343],
[M,608,15,22468,608,56,22509],
[M,608,8,22461,608,60,22513],
[M,606,6,22412,608,61,22514],
[M,607,8,22436,607,23,22451],
[M,607,12,22440,607,22,22450],
[M,605,4,22349,610,7,22536],
[M,614,21,22701,614,68,22748],
[M,614,32,22712,614,67,22747],
[M,614,52,22732,614,66,22746],
[M,614,10,22690,614,17,22697],
[M,613,6,22658,621,9,22935],
[M,616,13,22784,616,48,22819],
[M,617,12,22833,617,36,22857],
[M,617,23,22844,617,35,22856],
[M,619,12,22886,619,37,22911],
[M,619,23,22897,619,36,22910],
[M,616,24,22795,616,37,22808],
[M,615,10,22759,615,18,22767],
[M,615,8,22757,620,13,22925],
[M,613,12,22664,613,18,22670],
[M,612,15,22636,612,30,22651],
[M,611,4,22542,623,7,22957],
[M,626,21,23074,626,52,23105],
[M,626,37,23090,626,48,23101],
[M,626,8,23061,626,56,23109],
[M,627,18,23129,627,50,23161],
[M,627,8,23119,627,54,23165],
[M,625,6,23023,628,12,23179],
[M,624,4,22963,630,7,23201],
[M,633,21,23324,633,57,23360],
[M,633,25,23328,633,56,23359],
[M,633,41,23344,633,52,23355],
[M,633,8,23311,633,61,23364],
[M,634,18,23384,634,50,23416],
[M,634,8,23374,634,54,23420],
[M,632,6,23273,635,12,23434],
[M,631,4,23207,637,7,23456],
[M,641,26,23594,641,38,23606],
[M,641,12,23580,641,19,23587],
[M,640,8,23537,643,11,23675],
[M,642,26,23633,642,56,23663],
[M,642,12,23619,642,22,23629],
[M,639,6,23517,643,12,23676],
[M,640,14,23543,640,20,23549],
[M,640,22,23551,640,37,23566],
[M,638,4,23462,645,7,23698],
[M,649,26,23848,649,51,23873],
[M,649,12,23834,649,19,23841],
[M,648,8,23791,661,11,24216],
[M,652,17,23938,652,53,23974],
[M,653,16,23992,653,37,24013],
[M,653,16,23992,653,31,24007],
[M,655,16,24050,655,31,24065],
[M,651,15,23915,656,18,24084],
[M,657,14,24100,657,26,24112],
[M,659,14,24145,659,57,24188],
[M,652,37,23958,652,52,23973],
[M,650,12,23886,650,22,23896],
[M,650,10,23884,660,15,24204],
[M,647,6,23771,661,12,24217],
[M,648,14,23797,648,20,23803],
[M,648,22,23805,648,37,23820],
[M,646,4,23704,663,7,24239],
[M,667,26,24388,667,51,24413],
[M,667,12,24374,667,19,24381],
[M,666,8,24331,679,11,24764],
[M,670,17,24482,670,53,24518],
[M,671,16,24536,671,37,24557],
[M,671,16,24536,671,31,24551],
[M,673,16,24594,673,31,24609],
[M,669,15,24455,674,19,24629],
[M,675,14,24645,675,26,24657],
[M,677,14,24690,677,60,24736],
[M,669,19,24459,674,18,24628],
[M,670,37,24502,670,52,24517],
[M,668,12,24426,668,22,24436],
[M,668,10,24424,678,15,24752],
[M,665,6,24311,679,12,24765],
[M,666,14,24337,666,20,24343],
[M,666,22,24345,666,37,24360],
[M,664,4,24245,681,7,24787],
[M,683,6,24821,683,21,24836],
[M,683,6,24821,683,36,24851],
[M,682,4,24793,684,7,24859],
[M,685,4,24865,687,7,24914],
[M,689,6,24947,689,26,24967],
[M,689,6,24947,689,41,24982],
[M,688,4,24920,690,7,24990],
[M,487,43,18240,487,49,18246],
[M,487,64,18261,487,71,18268],
[M,487,0,18197,692,3,24998],
[M,709,21,25598,709,30,25607],
[M,709,42,25619,709,59,25636],
[M,710,20,25667,710,28,25675],
[M,711,19,25700,711,26,25707],
[M,708,26,25573,712,11,25723],
[M,711,19,25700,711,30,25711],
[M,710,20,25667,710,32,25679],
[M,709,21,25598,709,68,25645],
[M,709,21,25598,709,59,25636],
[M,709,21,25598,709,39,25616],
[M,708,10,25557,708,22,25569],
[M,707,6,25525,721,9,26022],
[M,708,8,25555,712,11,25723],
[M,714,14,25756,714,23,25765],
[M,714,35,25777,714,41,25783],
[M,714,35,25777,714,55,25797],
[M,715,36,25863,715,54,25881],
[M,715,14,25841,715,70,25897],
[M,718,20,25956,718,28,25964],
[M,719,19,25989,719,26,25996],
[M,716,10,25908,720,11,26012],
[M,719,19,25989,719,30,26000],
[M,718,20,25956,718,32,25968],
[M,714,14,25756,715,70,25897],
[M,714,14,25756,714,84,25826],
[M,714,14,25756,714,55,25797],
[M,714,14,25756,714,32,25774],
[M,707,12,25531,707,22,25541],
[M,706,20,25461,722,7,26030],
[M,706,50,25491,706,65,25506],
[M,706,50,25491,706,75,25516],
[M,723,35,26066,723,47,26078],
[M,724,8,26088,724,12,26092],
[M,723,21,26052,731,7,26435],
[M,728,34,26271,728,65,26302],
[M,728,12,26249,728,81,26318],
[M,729,58,26377,729,64,26383],
[M,729,48,26367,729,72,26391],
[M,729,34,26353,729,73,26392],
[M,729,12,26331,729,89,26408],
[M,727,8,26159,730,18,26427],
[M,727,8,26159,729,89,26408],
[M,727,8,26159,728,81,26318],
[M,728,34,26271,728,49,26286],
[M,726,16,26136,726,30,26150],
[M,726,8,26128,726,30,26150],
[M,725,8,26107,725,17,26116],
[M,725,6,26105,730,18,26427],
[M,732,14,26450,732,29,26465],
[M,732,41,26477,732,47,26483],
[M,732,41,26477,732,60,26496],
[M,732,70,26506,732,77,26513],
[M,732,96,26532,732,116,26552],
[M,732,135,26571,732,154,26590],
[M,735,9,26687,735,29,26707],
[M,735,9,26687,735,34,26712],
[M,736,12,26729,736,33,26750],
[M,740,15,26840,740,30,26855],
[M,740,44,26869,740,56,26881],
[M,740,36,26861,740,57,26882],
[M,741,14,26913,741,28,26927],
[M,741,31,26930,741,51,26950],
[M,742,14,26966,742,28,26980],
[M,742,31,26983,742,51,27003],
[M,743,13,27018,743,26,27031],
[M,743,29,27034,743,48,27053],
[M,743,13,27018,743,48,27053],
[M,742,14,26966,742,51,27003],
[M,741,14,26913,741,51,26950],
[M,740,15,26840,740,72,26897],
[M,739,15,26782,739,56,26823],
[M,733,30,26631,733,54,26655],
[M,732,14,26450,732,164,26600],
[M,732,14,26450,732,155,26591],
[M,732,126,26562,732,155,26591],
[M,732,14,26450,732,123,26559],
[M,732,14,26450,732,117,26553],
[M,732,87,26523,732,117,26553],
[M,732,14,26450,732,84,26520],
[M,732,14,26450,732,77,26513],
[M,732,14,26450,732,67,26503],
[M,732,14,26450,732,60,26496],
[M,732,14,26450,732,38,26474],
[M,723,27,26058,723,33,26064],
[M,705,21,25379,745,5,27065],
[M,705,57,25415,705,80,25438],
[M,746,6,27072,746,28,27094],
[M,746,5,27071,746,34,27100],
[M,746,40,27106,746,64,27130],
[M,746,39,27105,746,70,27136],
[M,746,40,27106,746,69,27135],
[M,746,5,27071,746,70,27136],
[M,747,4,27142,747,70,27208],
[M,748,11,27220,748,34,27243],
[M,748,10,27219,748,40,27249],
[M,748,46,27255,748,70,27279],
[M,748,45,27254,748,76,27285],
[M,748,46,27255,748,75,27284],
[M,748,10,27219,748,76,27285],
[M,749,19,27306,749,42,27329],
[M,749,19,27306,749,47,27334],
[M,752,43,27442,752,66,27465],
[M,752,8,27407,752,92,27491],
[M,752,8,27407,752,67,27466],
[M,752,34,27433,752,67,27466],
[M,754,4,27506,754,41,27543],
[M,758,15,27600,758,24,27609],
[M,758,53,27638,758,61,27646],
[M,758,89,27674,758,97,27682],
[M,758,133,27718,758,142,27727],
[M,758,169,27754,758,176,27761],
[M,757,4,27581,759,5,27775],
[M,758,15,27600,758,184,27769],
[M,758,15,27600,758,177,27762],
[M,758,160,27745,758,177,27762],
[M,758,15,27600,758,157,27742],
[M,758,15,27600,758,143,27728],
[M,758,124,27709,758,143,27728],
[M,758,15,27600,758,121,27706],
[M,758,15,27600,758,98,27683],
[M,758,80,27665,758,98,27683],
[M,758,15,27600,758,77,27662],
[M,758,15,27600,758,62,27647],
[M,758,44,27629,758,62,27647],
[M,758,15,27600,758,41,27626],
[M,748,11,27220,748,39,27248],
[M,746,6,27072,746,33,27099],
[M,697,37,25219,697,59,25241],
[M,697,0,25182,761,3,27785],
[M,764,33,27861,764,52,27880],
[M,764,2,27830,764,61,27889],
[M,764,2,27830,764,53,27881],
[M,763,0,27787,765,3,27893],
[M,768,2,27981,768,43,28022],
[M,767,48,27943,767,70,27965],
[M,767,0,27895,769,3,28026],
["dummy location"],
[M,33,11,548,33,20,557],
[M,28,14,459,28,27,472],
[M,20,12,315,20,22,325],
[M,18,14,288,18,27,301],
[M,3,0,13,769,3,28026]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var _plus3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var tostring4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var equal$always5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var torepr6 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"torepr");
var exn$unwrap7 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"exn-unwrap");
var not8 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"not");
var run$task9 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"run-task");
var string$contains10 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"string-contains");
var is$boolean11 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"is-boolean");
var within12 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"within");
var is$function13 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"is-function");
var $type$String14 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var $type$Boolean15 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
var raise16 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raise");
var either17 = R.getField($either38,"values");
var E18 = R.getField($E39,"values");
var ED19 = R.getField($ED40,"values");
var lists22 = R.getField($lists43,"values");
var option23 = R.getField($option44,"values");
var RED24 = R.getField($RED45,"values");
var SL25 = R.getField($SL46,"values");
var VS26 = R.getField($VS47,"values");
var either27 = R.getField($either38,"types");
var E28 = R.getField($E39,"types");
var ED29 = R.getField($ED40,"types");
var lists32 = R.getField($lists43,"types");
var option33 = R.getField($option44,"types");
var RED34 = R.getField($RED45,"types");
var SL35 = R.getField($SL46,"types");
var VS36 = R.getField($VS47,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$either38);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$E39);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$ED40);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import41);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import42);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists43);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$option44);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$RED45);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$SL46);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$VS47);
var $toplevel49 = function($$resumer1336) {
var $step48 = 0;
var $ans51 = D;
var $al52 = L[1065];
try {
if(R.isActivationRecord($$resumer1336)) {
$step48 = $$resumer1336.step;
$al52 = $$resumer1336.from;
$ans51 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
CheckOperand1356 = $$resumer1336.vars[0];
CheckBlockResult2045 = $$resumer1336.vars[1];
TestResult2060 = $$resumer1336.vars[2];
Either2181 = $$resumer1336.vars[3];
List120 = $$resumer1336.vars[4];
link2864 = $$resumer1336.vars[5];
empty2703 = $$resumer1336.vars[6];
list220 = $$resumer1336.vars[7];
is$empty2865 = $$resumer1336.vars[8];
fold2716 = $$resumer1336.vars[9];
each2183 = $$resumer1336.vars[10];
Option121 = $$resumer1336.vars[11];
is$some2772 = $$resumer1336.vars[12];
some2170 = $$resumer1336.vars[13];
none2166 = $$resumer1336.vars[14];
Loc119 = $$resumer1336.vars[15];
get$op$fun$name70 = $$resumer1336.vars[16];
is$right2078 = $$resumer1336.vars[17];
is$left2867 = $$resumer1336.vars[18];
is$CheckOperand93 = $$resumer1336.vars[19];
is$on$left96 = $$resumer1336.vars[20];
on$left99 = $$resumer1336.vars[21];
is$on$right102 = $$resumer1336.vars[22];
on$right105 = $$resumer1336.vars[23];
is$on$refinement108 = $$resumer1336.vars[24];
on$refinement111 = $$resumer1336.vars[25];
is$CheckBlockResult130 = $$resumer1336.vars[26];
is$check$block$result133 = $$resumer1336.vars[27];
check$block$result136 = $$resumer1336.vars[28];
report$value156 = $$resumer1336.vars[29];
is$TestResult1955 = $$resumer1336.vars[30];
is$success1958 = $$resumer1336.vars[31];
success1961 = $$resumer1336.vars[32];
is$failure$not$equal1964 = $$resumer1336.vars[33];
failure$not$equal1967 = $$resumer1336.vars[34];
is$failure$not$different1970 = $$resumer1336.vars[35];
failure$not$different1973 = $$resumer1336.vars[36];
is$failure$not$satisfied1976 = $$resumer1336.vars[37];
failure$not$satisfied1979 = $$resumer1336.vars[38];
is$failure$not$dissatisfied1982 = $$resumer1336.vars[39];
failure$not$dissatisfied1985 = $$resumer1336.vars[40];
is$failure$wrong$exn1988 = $$resumer1336.vars[41];
failure$wrong$exn1991 = $$resumer1336.vars[42];
is$failure$right$exn1994 = $$resumer1336.vars[43];
failure$right$exn1997 = $$resumer1336.vars[44];
is$failure$exn2000 = $$resumer1336.vars[45];
failure$exn2003 = $$resumer1336.vars[46];
is$failure$no$exn2006 = $$resumer1336.vars[47];
failure$no$exn2009 = $$resumer1336.vars[48];
is$failure$raise$not$satisfied2012 = $$resumer1336.vars[49];
failure$raise$not$satisfied2015 = $$resumer1336.vars[50];
is$failure$raise$not$dissatisfied2018 = $$resumer1336.vars[51];
failure$raise$not$dissatisfied2021 = $$resumer1336.vars[52];
is$error$not$boolean2024 = $$resumer1336.vars[53];
error$not$boolean2027 = $$resumer1336.vars[54];
make$check$context2658 = $$resumer1336.vars[55];
results$summary2616 = $$resumer1336.vars[56];
render$check$results2631 = $$resumer1336.vars[57];
render$check$results$stack2862 = $$resumer1336.vars[58];
defined_value2914 = $$resumer1336.vars[59];
defined_value2915 = $$resumer1336.vars[60];
defined_value2916 = $$resumer1336.vars[61];
defined_value2917 = $$resumer1336.vars[62];
defined_value2918 = $$resumer1336.vars[63];
defined_value2919 = $$resumer1336.vars[64];
defined_value2920 = $$resumer1336.vars[65];
defined_value2921 = $$resumer1336.vars[66];
defined_value2922 = $$resumer1336.vars[67];
defined_value2923 = $$resumer1336.vars[68];
defined_value2924 = $$resumer1336.vars[69];
defined_value2925 = $$resumer1336.vars[70];
defined_value2926 = $$resumer1336.vars[71];
defined_value2927 = $$resumer1336.vars[72];
defined_value2928 = $$resumer1336.vars[73];
defined_value2929 = $$resumer1336.vars[74];
defined_value2930 = $$resumer1336.vars[75];
defined_value2931 = $$resumer1336.vars[76];
defined_value2932 = $$resumer1336.vars[77];
defined_value2933 = $$resumer1336.vars[78];
defined_value2934 = $$resumer1336.vars[79];
defined_value2935 = $$resumer1336.vars[80];
defined_value2936 = $$resumer1336.vars[81];
defined_value2937 = $$resumer1336.vars[82];
defined_value2938 = $$resumer1336.vars[83];
defined_value2939 = $$resumer1336.vars[84];
defined_value2940 = $$resumer1336.vars[85];
defined_value2941 = $$resumer1336.vars[86];
defined_value2942 = $$resumer1336.vars[87];
defined_value2943 = $$resumer1336.vars[88];
defined_value2944 = $$resumer1336.vars[89];
defined_value2945 = $$resumer1336.vars[90];
defined_value2946 = $$resumer1336.vars[91];
defined_value2947 = $$resumer1336.vars[92];
defined_value2948 = $$resumer1336.vars[93];
defined_value2949 = $$resumer1336.vars[94];
defined_value2950 = $$resumer1336.vars[95];
defined_value2951 = $$resumer1336.vars[96];
defined_value2952 = $$resumer1336.vars[97];
defined_value2953 = $$resumer1336.vars[98];
defined_value2954 = $$resumer1336.vars[99];
answer2912 = $$resumer1336.vars[100];
provides2911 = $$resumer1336.vars[101];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step48) {
case 0: var CheckOperand53 = R.namedBrander("CheckOperand",L[20]);
var CheckOperand1356 = R.makeBranderAnn(CheckOperand53,"CheckOperand");
var CheckBlockResult54 = R.namedBrander("CheckBlockResult",L[27]);
var CheckBlockResult2045 = R.makeBranderAnn(CheckBlockResult54,"CheckBlockResult");
var TestResult55 = R.namedBrander("TestResult",L[698]);
var TestResult2060 = R.makeBranderAnn(TestResult55,"TestResult");
var Either2181 = R.getDotAnn(L[1064],"either",either27,"Either");
var List120 = R.getDotAnn(L[1063],"lists",lists32,"List");
$al52 = L[0];
var link2864 = G(lists22,"link",L[0]);
$al52 = L[1];
var empty2703 = G(lists22,"empty",L[1]);
$al52 = L[2];
var list220 = G(lists22,"list",L[2]);
$al52 = L[3];
var is$empty2865 = G(lists22,"is-empty",L[3]);
$al52 = L[4];
var fold2716 = G(lists22,"fold",L[4]);
$al52 = L[5];
var each2183 = G(lists22,"each",L[5]);
var Option121 = R.getDotAnn(L[1062],"option",option33,"Option");
$al52 = L[6];
var is$some2772 = G(option23,"is-some",L[6]);
$al52 = L[7];
var some2170 = G(option23,"some",L[7]);
$al52 = L[8];
var none2166 = G(option23,"none",L[8]);
var Loc119 = R.getDotAnn(L[1061],"SL",SL35,"Srcloc");
var get$op$fun$name70 = {"$var":D};
var $temp_lam57 = function($opname58) {
var $step56 = 0;
var $ans59 = D;
var $al60 = L[14];
try {
if(R.isActivationRecord($opname58)) {
$step56 = $opname58.step;
$al60 = $opname58.from;
$ans59 = $opname58.ans;
opname58 = $opname58.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[14],1,$t);
}
var opname58 = $opname58;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step56) {
case 0: $step56 = 1;
$al60 = L[9];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al60,equal$always5);
}
$ans59 = equal$always5.app(opname58,("op=="));
break;
case 1: var anf_arg61 = $ans59;
$al60 = L[9];
var anf_if67 = R.checkWrapBoolean(anf_arg61);
$step56 = R.isPyretTrue(anf_if67)?2:3;
break;
case 2: $step56 = 11;
$ans59 = ("equal-always");
break;
case 3: $step56 = 4;
$al60 = L[10];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al60,equal$always5);
}
$ans59 = equal$always5.app(opname58,("op=~"));
break;
case 4: var anf_arg62 = $ans59;
$al60 = L[10];
var anf_if66 = R.checkWrapBoolean(anf_arg62);
$step56 = R.isPyretTrue(anf_if66)?5:6;
break;
case 5: $step56 = 11;
$ans59 = ("equal-now");
break;
case 6: $step56 = 7;
$al60 = L[11];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al60,equal$always5);
}
$ans59 = equal$always5.app(opname58,("op<=>"));
break;
case 7: var anf_arg63 = $ans59;
$al60 = L[11];
var anf_if65 = R.checkWrapBoolean(anf_arg63);
$step56 = R.isPyretTrue(anf_if65)?8:9;
break;
case 8: $step56 = 11;
$ans59 = ("identical");
break;
case 9: $step56 = 10;
$al60 = L[13];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al60,_plus3);
}
$ans59 = _plus3.app(("Unknown op: "),opname58);
break;
case 10: var anf_arg64 = $ans59;
$step56 = 11;
$al60 = L[12];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al60,raise16);
}
$ans59 = raise16.app(anf_arg64);
break;
case 11: ++R.GAS;
return $ans59;
default: throw "No case numbered " + $step56 + " in $temp_lam57";
}
}
} catch($e68) {
if(R.isCont($e68) && ($step56 !== 11)) {
$e68.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al60,$temp_lam57,$step56,[opname58],[]);
}
if(R.isPyretException($e68)) {
$e68.pyretStack.push($al60);
}
throw $e68;
}
};
var anf_assign69 = R.makeFunction($temp_lam57,"get-op-fun-name");
get$op$fun$name70.$var = anf_assign69;
$al52 = L[15];
var is$right2078 = G(either17,"is-right",L[15]);
$al52 = L[16];
var is$left2867 = G(either17,"is-left",L[16]);
var CheckOperand90 = {"$var":D};
var is$CheckOperand93 = {"$var":D};
var is$on$left96 = {"$var":D};
var on$left99 = {"$var":D};
var is$on$right102 = {"$var":D};
var on$right105 = {"$var":D};
var is$on$refinement108 = {"$var":D};
var on$refinement111 = {"$var":D};
var CheckBlockResult127 = {"$var":D};
var is$CheckBlockResult130 = {"$var":D};
var is$check$block$result133 = {"$var":D};
var check$block$result136 = {"$var":D};
var report$value156 = {"$var":D};
var TestResult1952 = {"$var":D};
var is$TestResult1955 = {"$var":D};
var is$success1958 = {"$var":D};
var success1961 = {"$var":D};
var is$failure$not$equal1964 = {"$var":D};
var failure$not$equal1967 = {"$var":D};
var is$failure$not$different1970 = {"$var":D};
var failure$not$different1973 = {"$var":D};
var is$failure$not$satisfied1976 = {"$var":D};
var failure$not$satisfied1979 = {"$var":D};
var is$failure$not$dissatisfied1982 = {"$var":D};
var failure$not$dissatisfied1985 = {"$var":D};
var is$failure$wrong$exn1988 = {"$var":D};
var failure$wrong$exn1991 = {"$var":D};
var is$failure$right$exn1994 = {"$var":D};
var failure$right$exn1997 = {"$var":D};
var is$failure$exn2000 = {"$var":D};
var failure$exn2003 = {"$var":D};
var is$failure$no$exn2006 = {"$var":D};
var failure$no$exn2009 = {"$var":D};
var is$failure$raise$not$satisfied2012 = {"$var":D};
var failure$raise$not$satisfied2015 = {"$var":D};
var is$failure$raise$not$dissatisfied2018 = {"$var":D};
var failure$raise$not$dissatisfied2021 = {"$var":D};
var is$error$not$boolean2024 = {"$var":D};
var error$not$boolean2027 = {"$var":D};
var make$check$context2658 = {"$var":D};
var results$summary2616 = {"$var":D};
var render$check$results2631 = {"$var":D};
var render$check$results$stack2862 = {"$var":D};
var $on$left_getfields76 = function(f) {
return f();
};
var $on$left_getfieldsref74 = function(f) {
return f();
};
var $on$left_mutablemask75 = [];
var $on$left$base71 = {"_match":R.makeMatch("on-left",0)};
var $on$left$brander72 = R.namedBrander("on-left",L[17]);
var $on$left$brands73 = {};
$on$left$brands73[CheckOperand53._brand] = true;
$on$left$brands73[$on$left$brander72._brand] = true;
var $on$right_getfields82 = function(f) {
return f();
};
var $on$right_getfieldsref80 = function(f) {
return f();
};
var $on$right_mutablemask81 = [];
var $on$right$base77 = {"_match":R.makeMatch("on-right",0)};
var $on$right$brander78 = R.namedBrander("on-right",L[18]);
var $on$right$brands79 = {};
$on$right$brands79[CheckOperand53._brand] = true;
$on$right$brands79[$on$right$brander78._brand] = true;
var $on$refinement_getfields88 = function(f) {
return f();
};
var $on$refinement_getfieldsref86 = function(f) {
return f();
};
var $on$refinement_mutablemask87 = [];
var $on$refinement$base83 = {"_match":R.makeMatch("on-refinement",0)};
var $on$refinement$brander84 = R.namedBrander("on-refinement",L[19]);
var $on$refinement$brands85 = {};
$on$refinement$brands85[CheckOperand53._brand] = true;
$on$refinement$brands85[$on$refinement$brander84._brand] = true;
var anf_assign89 = R.makeObject({"CheckOperand":G(CheckOperand53,"test",L[20]),
"is-on-left":G($on$left$brander72,"test",L[17]),
"on-left":R.makeDataValue($on$left$base71,$on$left$brands73,"on-left",$on$left_getfieldsref74,$on$left_getfields76,-1,$on$left_mutablemask75,$on$left$base71),
"is-on-right":G($on$right$brander78,"test",L[18]),
"on-right":R.makeDataValue($on$right$base77,$on$right$brands79,"on-right",$on$right_getfieldsref80,$on$right_getfields82,-1,$on$right_mutablemask81,$on$right$base77),
"is-on-refinement":G($on$refinement$brander84,"test",L[19]),
"on-refinement":R.makeDataValue($on$refinement$base83,$on$refinement$brands85,"on-refinement",$on$refinement_getfieldsref86,$on$refinement_getfields88,-1,$on$refinement_mutablemask87,$on$refinement$base83)});
CheckOperand90.$var = anf_assign89;
var anf_bracket91 = CheckOperand90.$var;
$al52 = L[20];
var anf_assign92 = G(anf_bracket91,"CheckOperand",L[20]);
is$CheckOperand93.$var = anf_assign92;
var anf_bracket94 = CheckOperand90.$var;
$al52 = L[17];
var anf_assign95 = G(anf_bracket94,"is-on-left",L[17]);
is$on$left96.$var = anf_assign95;
var anf_bracket97 = CheckOperand90.$var;
$al52 = L[17];
var anf_assign98 = G(anf_bracket97,"on-left",L[17]);
on$left99.$var = anf_assign98;
var anf_bracket100 = CheckOperand90.$var;
$al52 = L[18];
var anf_assign101 = G(anf_bracket100,"is-on-right",L[18]);
is$on$right102.$var = anf_assign101;
var anf_bracket103 = CheckOperand90.$var;
$al52 = L[18];
var anf_assign104 = G(anf_bracket103,"on-right",L[18]);
on$right105.$var = anf_assign104;
var anf_bracket106 = CheckOperand90.$var;
$al52 = L[19];
var anf_assign107 = G(anf_bracket106,"is-on-refinement",L[19]);
is$on$refinement108.$var = anf_assign107;
var anf_bracket109 = CheckOperand90.$var;
$al52 = L[19];
var anf_assign110 = G(anf_bracket109,"on-refinement",L[19]);
on$refinement111.$var = anf_assign110;
var $check$block$result_getfields117 = function(f) {
return f(this.dict["name"],this.dict["loc"],this.dict["test-results"],this.dict["maybe-err"]);
};
var $check$block$result_getfieldsref115 = function(f,refmask) {
return f(R.derefField(this.dict["name"],false,refmask[0]),R.derefField(this.dict["loc"],false,refmask[1]),R.derefField(this.dict["test-results"],false,refmask[2]),R.derefField(this.dict["maybe-err"],false,refmask[3]));
};
var $check$block$result_mutablemask116 = [false,false,false,false];
var $check$block$result$base112 = {"$fieldNames":["name","loc","test-results","maybe-err"],
"_match":R.makeMatch("check-block-result",4)};
var $check$block$result$brander113 = R.namedBrander("check-block-result",L[21]);
var $check$block$result$brands114 = {};
$check$block$result$brands114[CheckBlockResult54._brand] = true;
$check$block$result$brands114[$check$block$result$brander113._brand] = true;
var check$block$result118 = R.makeVariantConstructor(L[26],function() {
return [$type$String14,Loc119,List120,Option121];
},["name122","loc123","test$results124","maybe$err125"],[L[22],L[23],L[24],L[25]],[false,false,false,false],["name122","loc123","test$results124","maybe$err125"],$check$block$result_mutablemask116,$check$block$result$base112,$check$block$result$brands114,"check-block-result",$check$block$result_getfieldsref115,$check$block$result_getfields117,$check$block$result$base112);
var anf_assign126 = R.makeObject({"CheckBlockResult":G(CheckBlockResult54,"test",L[27]),
"is-check-block-result":G($check$block$result$brander113,"test",L[21]),
"check-block-result":check$block$result118});
CheckBlockResult127.$var = anf_assign126;
var anf_bracket128 = CheckBlockResult127.$var;
$al52 = L[27];
var anf_assign129 = G(anf_bracket128,"CheckBlockResult",L[27]);
is$CheckBlockResult130.$var = anf_assign129;
var anf_bracket131 = CheckBlockResult127.$var;
$al52 = L[21];
var anf_assign132 = G(anf_bracket131,"is-check-block-result",L[21]);
is$check$block$result133.$var = anf_assign132;
var anf_bracket134 = CheckBlockResult127.$var;
$al52 = L[21];
var anf_assign135 = G(anf_bracket134,"check-block-result",L[21]);
check$block$result136.$var = anf_assign135;
var $temp_lam138 = function($operand139,$value140) {
var $step137 = 0;
var $ans141 = D;
var $al142 = L[33];
try {
if(R.isActivationRecord($operand139)) {
$step137 = $operand139.step;
$al142 = $operand139.from;
$ans141 = $operand139.ans;
operand139 = $operand139.args[0];
value140 = $operand139.args[1];
anf_method_obj150 = $operand139.vars[0];
anf_method_obj145 = $operand139.vars[1];
anf_arg146 = $operand139.vars[2];
anf_arg151 = $operand139.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[33],2,$t);
}
var operand139 = $operand139;
var value140 = $value140;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step137) {
case 0: $al142 = L[28];
var anf_method_obj150 = G(ED19,"sequence",L[28]);
$al142 = L[29];
var anf_method_obj145 = G(ED19,"para",L[29]);
$step137 = 1;
$al142 = L[30];
$field143 = R.getColonFieldLoc(ED19,"text",L[30]);
if(R.isMethod($field143)) {
$ans141 = $field143.full_meth(ED19,("The "));
} else {
if(!(R.isFunction($field143))) {
R.ffi.throwNonFunApp(L[30],$field143);
}
$ans141 = $field143.app(("The "));
}
break;
case 1: var anf_arg146 = $ans141;
$step137 = 2;
$al142 = L[31];
$field144 = R.getColonFieldLoc(ED19,"text",L[31]);
if(R.isMethod($field144)) {
$ans141 = $field144.full_meth(ED19,(" side was:"));
} else {
if(!(R.isFunction($field144))) {
R.ffi.throwNonFunApp(L[31],$field144);
}
$ans141 = $field144.app((" side was:"));
}
break;
case 2: var anf_arg147 = $ans141;
$step137 = 3;
$al142 = L[29];
$field148 = R.getColonFieldLoc(anf_method_obj145,"make3",L[29]);
if(R.isMethod($field148)) {
$ans141 = $field148.full_meth(anf_method_obj145,anf_arg146,operand139,anf_arg147);
} else {
if(!(R.isFunction($field148))) {
R.ffi.throwNonFunApp(L[29],$field148);
}
$ans141 = $field148.app(anf_arg146,operand139,anf_arg147);
}
break;
case 3: var anf_arg151 = $ans141;
$step137 = 4;
$al142 = L[32];
$field149 = R.getColonFieldLoc(ED19,"embed",L[32]);
if(R.isMethod($field149)) {
$ans141 = $field149.full_meth(ED19,value140);
} else {
if(!(R.isFunction($field149))) {
R.ffi.throwNonFunApp(L[32],$field149);
}
$ans141 = $field149.app(value140);
}
break;
case 4: var anf_arg152 = $ans141;
$step137 = 5;
$al142 = L[28];
$field153 = R.getColonFieldLoc(anf_method_obj150,"make2",L[28]);
if(R.isMethod($field153)) {
$ans141 = $field153.full_meth(anf_method_obj150,anf_arg151,anf_arg152);
} else {
if(!(R.isFunction($field153))) {
R.ffi.throwNonFunApp(L[28],$field153);
}
$ans141 = $field153.app(anf_arg151,anf_arg152);
}
break;
case 5: ++R.GAS;
return $ans141;
default: throw "No case numbered " + $step137 + " in $temp_lam138";
}
}
} catch($e154) {
if(R.isCont($e154) && ($step137 !== 5)) {
$e154.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al142,$temp_lam138,$step137,[operand139,value140],[anf_method_obj150,anf_method_obj145,anf_arg146,anf_arg151]);
}
if(R.isPyretException($e154)) {
$e154.pyretStack.push($al142);
}
throw $e154;
}
};
var anf_assign155 = R.makeFunction($temp_lam138,"report-value");
report$value156.$var = anf_assign155;
var $temp_full158 = function($self159,$maybe$stack$loc160,$src$available161,$maybe$ast162) {
var $step157 = 0;
var $ans163 = D;
var $al164 = L[141];
try {
if(R.isActivationRecord($self159)) {
$step157 = $self159.step;
$al164 = $self159.from;
$ans163 = $self159.ans;
self159 = $self159.args[0];
maybe$stack$loc160 = $self159.args[1];
src$available161 = $self159.args[2];
maybe$ast162 = $self159.args[3];
cases172 = $self159.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[141],4,$t);
}
var self159 = $self159;
var maybe$stack$loc160 = $maybe$stack$loc160;
var src$available161 = $src$available161;
var maybe$ast162 = $maybe$ast162;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step157) {
case 0: $al164 = L[34];
var anf_method_obj165 = G(self159,"loc",L[34]);
$step157 = 1;
$al164 = L[35];
$field166 = R.getColonFieldLoc(anf_method_obj165,"is-builtin",L[35]);
if(R.isMethod($field166)) {
$ans163 = $field166.full_meth(anf_method_obj165);
} else {
if(!(R.isFunction($field166))) {
R.ffi.throwNonFunApp(L[35],$field166);
}
$ans163 = $field166.app();
}
break;
case 1: var anf_arg167 = $ans163;
$al164 = L[35];
var anf_if525 = R.checkWrapBoolean(anf_arg167);
$step157 = R.isPyretTrue(anf_if525)?2:3;
break;
case 2: $step157 = 12;
$al164 = L[36];
$field168 = R.getColonFieldLoc(self159,"render-reason",L[36]);
if(R.isMethod($field168)) {
$ans163 = $field168.full_meth(self159);
} else {
if(!(R.isFunction($field168))) {
R.ffi.throwNonFunApp(L[36],$field168);
}
$ans163 = $field168.app();
}
break;
case 3: $al164 = L[37];
var anf_arg169 = G(self159,"loc",L[37]);
$step157 = 4;
$al164 = L[38];
if(!(R.isFunction(src$available161))) {
R.ffi.throwNonFunApp($al164,src$available161);
}
$ans163 = src$available161.app(anf_arg169);
break;
case 4: var anf_arg170 = $ans163;
$al164 = L[38];
var anf_if524 = R.checkWrapBoolean(anf_arg170);
$step157 = R.isPyretTrue(anf_if524)?5:11;
break;
case 5: $al164 = L[39];
var anf_arg171 = G(self159,"loc",L[39]);
$step157 = 6;
$al164 = L[139];
if(!(R.isFunction(maybe$ast162))) {
R.ffi.throwNonFunApp($al164,maybe$ast162);
}
$ans163 = maybe$ast162.app(anf_arg171);
break;
case 6: var cases172 = $ans163;
$step157 = 7;
$al164 = L[138];
R._checkAnn(L[138],Option121,cases172);
break;
case 7: var $cases_dispatch522 = {"some":8,
"none":9};
$al164 = L[134];
$step157 = $cases_dispatch522[cases172.$name] || 10;
break;
case 8: if(cases172.$arity !== 1) {
if(cases172.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[133],1,cases172.$arity,L[134]);
} else {
R.ffi.throwCasesSingletonErrorC(L[133],true,L[134]);
}
}
$step157 = 12;
$al164 = L[135];
var $temp_branch386 = function($test$ast173) {
var $step387 = 0;
var $ans388 = D;
var $al389 = L[132];
try {
if(R.isActivationRecord($test$ast173)) {
$step387 = $test$ast173.step;
$al389 = $test$ast173.from;
$ans388 = $test$ast173.ans;
test$ast173 = $test$ast173.args[0];
lhs$ast176 = $test$ast173.vars[0];
rhs$ast184 = $test$ast173.vars[1];
anf_arg180 = $test$ast173.vars[2];
ed$lhs269 = $test$ast173.vars[3];
anf_arg188 = $test$ast173.vars[4];
ed$rhs271 = $test$ast173.vars[5];
cases191 = $test$ast173.vars[6];
ed$op253 = $test$ast173.vars[7];
anf_method_obj379 = $test$ast173.vars[8];
anf_method_obj256 = $test$ast173.vars[9];
anf_arg257 = $test$ast173.vars[10];
anf_arg258 = $test$ast173.vars[11];
anf_arg380 = $test$ast173.vars[12];
anf_arg381 = $test$ast173.vars[13];
anf_method_obj372 = $test$ast173.vars[14];
cases263 = $test$ast173.vars[15];
anf_method_obj267 = $test$ast173.vars[16];
anf_arg268 = $test$ast173.vars[17];
anf_arg270 = $test$ast173.vars[18];
anf_arg382 = $test$ast173.vars[19];
anf_arg383 = $test$ast173.vars[20];
} else {
var test$ast173 = $test$ast173;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step387) {
case 0: $al389 = L[40];
var lhs$ast176 = G(test$ast173,"left",L[40]);
$al389 = L[41];
var anf_bracket174 = G(test$ast173,"right",L[41]);
$al389 = L[42];
var rhs$ast184 = G(anf_bracket174,"value",L[42]);
$step387 = 1;
$al389 = L[43];
$field390 = R.getColonFieldLoc(ED19,"text",L[43]);
if(R.isMethod($field390)) {
$ans388 = $field390.full_meth(ED19,("left"));
} else {
if(!(R.isFunction($field390))) {
R.ffi.throwNonFunApp(L[43],$field390);
}
$ans388 = $field390.app(("left"));
}
break;
case 1: var anf_arg180 = $ans388;
$al389 = L[44];
var anf_method_obj177 = G(ED19,"locs",L[44]);
$al389 = L[45];
var anf_arg178 = G(lhs$ast176,"l",L[45]);
$step387 = 2;
$al389 = L[44];
$field391 = R.getColonFieldLoc(anf_method_obj177,"make1",L[44]);
if(R.isMethod($field391)) {
$ans388 = $field391.full_meth(anf_method_obj177,anf_arg178);
} else {
if(!(R.isFunction($field391))) {
R.ffi.throwNonFunApp(L[44],$field391);
}
$ans388 = $field391.app(anf_arg178);
}
break;
case 2: var anf_arg181 = $ans388;
$step387 = 3;
$al389 = L[46];
$field392 = R.getColonFieldLoc(ED19,"highlight",L[46]);
if(R.isMethod($field392)) {
$ans388 = $field392.full_meth(ED19,anf_arg180,anf_arg181,(0));
} else {
if(!(R.isFunction($field392))) {
R.ffi.throwNonFunApp(L[46],$field392);
}
$ans388 = $field392.app(anf_arg180,anf_arg181,(0));
}
break;
case 3: var ed$lhs269 = $ans388;
$step387 = 4;
$al389 = L[47];
$field393 = R.getColonFieldLoc(ED19,"text",L[47]);
if(R.isMethod($field393)) {
$ans388 = $field393.full_meth(ED19,("right"));
} else {
if(!(R.isFunction($field393))) {
R.ffi.throwNonFunApp(L[47],$field393);
}
$ans388 = $field393.app(("right"));
}
break;
case 4: var anf_arg188 = $ans388;
$al389 = L[48];
var anf_method_obj185 = G(ED19,"locs",L[48]);
$al389 = L[49];
var anf_arg186 = G(rhs$ast184,"l",L[49]);
$step387 = 5;
$al389 = L[48];
$field394 = R.getColonFieldLoc(anf_method_obj185,"make1",L[48]);
if(R.isMethod($field394)) {
$ans388 = $field394.full_meth(anf_method_obj185,anf_arg186);
} else {
if(!(R.isFunction($field394))) {
R.ffi.throwNonFunApp(L[48],$field394);
}
$ans388 = $field394.app(anf_arg186);
}
break;
case 5: var anf_arg189 = $ans388;
$step387 = 6;
$al389 = L[50];
$field395 = R.getColonFieldLoc(ED19,"highlight",L[50]);
if(R.isMethod($field395)) {
$ans388 = $field395.full_meth(ED19,anf_arg188,anf_arg189,(2));
} else {
if(!(R.isFunction($field395))) {
R.ffi.throwNonFunApp(L[50],$field395);
}
$ans388 = $field395.app(anf_arg188,anf_arg189,(2));
}
break;
case 6: var ed$rhs271 = $ans388;
$al389 = L[51];
var cases191 = G(test$ast173,"refinement",L[51]);
$step387 = 7;
$al389 = L[131];
R._checkAnn(L[131],Option121,cases191);
break;
case 7: var $cases_dispatch431 = {"none":8,
"some":12};
$al389 = L[59];
$step387 = $cases_dispatch431[cases191.$name] || 13;
break;
case 8: if(cases191.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[58],false,L[59]);
}
$al389 = L[52];
var anf_method_obj192 = G(test$ast173,"op",L[52]);
$step387 = 9;
$al389 = L[53];
$field396 = R.getColonFieldLoc(anf_method_obj192,"tosource",L[53]);
if(R.isMethod($field396)) {
$ans388 = $field396.full_meth(anf_method_obj192);
} else {
if(!(R.isFunction($field396))) {
R.ffi.throwNonFunApp(L[53],$field396);
}
$ans388 = $field396.app();
}
break;
case 9: var anf_method_obj194 = $ans388;
$step387 = 10;
$al389 = L[54];
$field397 = R.getColonFieldLoc(anf_method_obj194,"pretty",L[54]);
if(R.isMethod($field397)) {
$ans388 = $field397.full_meth(anf_method_obj194,(80));
} else {
if(!(R.isFunction($field397))) {
R.ffi.throwNonFunApp(L[54],$field397);
}
$ans388 = $field397.app((80));
}
break;
case 10: var anf_method_obj196 = $ans388;
$al389 = L[55];
var anf_arg197 = G(ED19,"text",L[55]);
$step387 = 11;
$al389 = L[56];
$field398 = R.getColonFieldLoc(anf_method_obj196,"map",L[56]);
if(R.isMethod($field398)) {
$ans388 = $field398.full_meth(anf_method_obj196,anf_arg197);
} else {
if(!(R.isFunction($field398))) {
R.ffi.throwNonFunApp(L[56],$field398);
}
$ans388 = $field398.app(anf_arg197);
}
break;
case 11: var anf_arg199 = $ans388;
$step387 = 14;
$al389 = L[57];
$field399 = R.getColonFieldLoc(ED19,"h-sequence",L[57]);
if(R.isMethod($field399)) {
$ans388 = $field399.full_meth(ED19,anf_arg199,(""));
} else {
if(!(R.isFunction($field399))) {
R.ffi.throwNonFunApp(L[57],$field399);
}
$ans388 = $field399.app(anf_arg199,(""));
}
break;
case 12: if(cases191.$arity !== 1) {
if(cases191.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[77],1,cases191.$arity,L[59]);
} else {
R.ffi.throwCasesSingletonErrorC(L[77],true,L[59]);
}
}
$step387 = 14;
$al389 = L[78];
var $temp_branch413 = function($e211) {
var $step414 = 0;
var $ans415 = D;
var $al416 = L[60];
try {
if(R.isActivationRecord($e211)) {
$step414 = $e211.step;
$al416 = $e211.from;
$ans415 = $e211.ans;
e211 = $e211.args[0];
anf_method_obj227 = $e211.vars[0];
anf_arg228 = $e211.vars[1];
anf_arg229 = $e211.vars[2];
anf_arg223 = $e211.vars[3];
anf_arg230 = $e211.vars[4];
} else {
var e211 = $e211;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step414) {
case 0: $al416 = L[60];
var anf_method_obj227 = G(ED19,"sequence",L[60]);
$al416 = L[61];
var anf_method_obj201 = G(test$ast173,"op",L[61]);
$step414 = 1;
$al416 = L[62];
$field417 = R.getColonFieldLoc(anf_method_obj201,"tosource",L[62]);
if(R.isMethod($field417)) {
$ans415 = $field417.full_meth(anf_method_obj201);
} else {
if(!(R.isFunction($field417))) {
R.ffi.throwNonFunApp(L[62],$field417);
}
$ans415 = $field417.app();
}
break;
case 1: var anf_method_obj203 = $ans415;
$step414 = 2;
$al416 = L[63];
$field418 = R.getColonFieldLoc(anf_method_obj203,"pretty",L[63]);
if(R.isMethod($field418)) {
$ans415 = $field418.full_meth(anf_method_obj203,(80));
} else {
if(!(R.isFunction($field418))) {
R.ffi.throwNonFunApp(L[63],$field418);
}
$ans415 = $field418.app((80));
}
break;
case 2: var anf_method_obj205 = $ans415;
$al416 = L[64];
var anf_arg206 = G(ED19,"text",L[64]);
$step414 = 3;
$al416 = L[65];
$field419 = R.getColonFieldLoc(anf_method_obj205,"map",L[65]);
if(R.isMethod($field419)) {
$ans415 = $field419.full_meth(anf_method_obj205,anf_arg206);
} else {
if(!(R.isFunction($field419))) {
R.ffi.throwNonFunApp(L[65],$field419);
}
$ans415 = $field419.app(anf_arg206);
}
break;
case 3: var anf_arg208 = $ans415;
$step414 = 4;
$al416 = L[66];
$field420 = R.getColonFieldLoc(ED19,"h-sequence",L[66]);
if(R.isMethod($field420)) {
$ans415 = $field420.full_meth(ED19,anf_arg208,(""));
} else {
if(!(R.isFunction($field420))) {
R.ffi.throwNonFunApp(L[66],$field420);
}
$ans415 = $field420.app(anf_arg208,(""));
}
break;
case 4: var anf_arg228 = $ans415;
$step414 = 5;
$al416 = L[67];
$field421 = R.getColonFieldLoc(ED19,"text",L[67]);
if(R.isMethod($field421)) {
$ans415 = $field421.full_meth(ED19,("%("));
} else {
if(!(R.isFunction($field421))) {
R.ffi.throwNonFunApp(L[67],$field421);
}
$ans415 = $field421.app(("%("));
}
break;
case 5: var anf_arg229 = $ans415;
$step414 = 6;
$al416 = L[68];
$field422 = R.getColonFieldLoc(e211,"tosource",L[68]);
if(R.isMethod($field422)) {
$ans415 = $field422.full_meth(e211);
} else {
if(!(R.isFunction($field422))) {
R.ffi.throwNonFunApp(L[68],$field422);
}
$ans415 = $field422.app();
}
break;
case 6: var anf_method_obj213 = $ans415;
$step414 = 7;
$al416 = L[69];
$field423 = R.getColonFieldLoc(anf_method_obj213,"pretty",L[69]);
if(R.isMethod($field423)) {
$ans415 = $field423.full_meth(anf_method_obj213,(80));
} else {
if(!(R.isFunction($field423))) {
R.ffi.throwNonFunApp(L[69],$field423);
}
$ans415 = $field423.app((80));
}
break;
case 7: var anf_method_obj215 = $ans415;
$al416 = L[70];
var anf_arg216 = G(ED19,"text",L[70]);
$step414 = 8;
$al416 = L[71];
$field424 = R.getColonFieldLoc(anf_method_obj215,"map",L[71]);
if(R.isMethod($field424)) {
$ans415 = $field424.full_meth(anf_method_obj215,anf_arg216);
} else {
if(!(R.isFunction($field424))) {
R.ffi.throwNonFunApp(L[71],$field424);
}
$ans415 = $field424.app(anf_arg216);
}
break;
case 8: var anf_arg218 = $ans415;
$step414 = 9;
$al416 = L[72];
$field425 = R.getColonFieldLoc(ED19,"h-sequence",L[72]);
if(R.isMethod($field425)) {
$ans415 = $field425.full_meth(ED19,anf_arg218,(""));
} else {
if(!(R.isFunction($field425))) {
R.ffi.throwNonFunApp(L[72],$field425);
}
$ans415 = $field425.app(anf_arg218,(""));
}
break;
case 9: var anf_arg223 = $ans415;
$al416 = L[73];
var anf_arg221 = G(e211,"l",L[73]);
$step414 = 10;
$al416 = L[74];
$field426 = R.getColonFieldLoc(list220,"make1",L[74]);
if(R.isMethod($field426)) {
$ans415 = $field426.full_meth(list220,anf_arg221);
} else {
if(!(R.isFunction($field426))) {
R.ffi.throwNonFunApp(L[74],$field426);
}
$ans415 = $field426.app(anf_arg221);
}
break;
case 10: var anf_arg224 = $ans415;
$step414 = 11;
$al416 = L[75];
$field427 = R.getColonFieldLoc(ED19,"highlight",L[75]);
if(R.isMethod($field427)) {
$ans415 = $field427.full_meth(ED19,anf_arg223,anf_arg224,(1));
} else {
if(!(R.isFunction($field427))) {
R.ffi.throwNonFunApp(L[75],$field427);
}
$ans415 = $field427.app(anf_arg223,anf_arg224,(1));
}
break;
case 11: var anf_arg230 = $ans415;
$step414 = 12;
$al416 = L[76];
$field428 = R.getColonFieldLoc(ED19,"text",L[76]);
if(R.isMethod($field428)) {
$ans415 = $field428.full_meth(ED19,(")"));
} else {
if(!(R.isFunction($field428))) {
R.ffi.throwNonFunApp(L[76],$field428);
}
$ans415 = $field428.app((")"));
}
break;
case 12: var anf_arg231 = $ans415;
$step414 = 13;
$al416 = L[60];
$field429 = R.getColonFieldLoc(anf_method_obj227,"make4",L[60]);
if(R.isMethod($field429)) {
$ans415 = $field429.full_meth(anf_method_obj227,anf_arg228,anf_arg229,anf_arg230,anf_arg231);
} else {
if(!(R.isFunction($field429))) {
R.ffi.throwNonFunApp(L[60],$field429);
}
$ans415 = $field429.app(anf_arg228,anf_arg229,anf_arg230,anf_arg231);
}
break;
case 13: ++R.GAS;
return $ans415;
default: throw "No case numbered " + $step414 + " in $temp_branch413";
}
}
} catch($e430) {
if(R.isCont($e430) && ($step414 !== 13)) {
$e430.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al416,$temp_branch413,$step414,[e211],[anf_method_obj227,anf_arg228,anf_arg229,anf_arg223,anf_arg230]);
}
if(R.isPyretException($e430)) {
$e430.pyretStack.push($al416);
}
throw $e430;
}
};
$ans388 = cases191.$app_fields($temp_branch413,[false]);
break;
case 13: $step387 = 14;
$al389 = L[59];
$ans388 = R.throwNoCasesMatched(L[59],cases191);
break;
case 14: var ed$op253 = $ans388;
$al389 = L[79];
var anf_method_obj379 = G(ED19,"error",L[79]);
$al389 = L[80];
var anf_method_obj256 = G(ED19,"para",L[80]);
$step387 = 15;
$al389 = L[81];
$field432 = R.getColonFieldLoc(ED19,"text",L[81]);
if(R.isMethod($field432)) {
$ans388 = $field432.full_meth(ED19,("The test operator "));
} else {
if(!(R.isFunction($field432))) {
R.ffi.throwNonFunApp(L[81],$field432);
}
$ans388 = $field432.app(("The test operator "));
}
break;
case 15: var anf_arg257 = $ans388;
$step387 = 16;
$al389 = L[82];
$field433 = R.getColonFieldLoc(ED19,"code",L[82]);
if(R.isMethod($field433)) {
$ans388 = $field433.full_meth(ED19,ed$op253);
} else {
if(!(R.isFunction($field433))) {
R.ffi.throwNonFunApp(L[82],$field433);
}
$ans388 = $field433.app(ed$op253);
}
break;
case 16: var anf_arg258 = $ans388;
$step387 = 17;
$al389 = L[83];
$field434 = R.getColonFieldLoc(ED19,"text",L[83]);
if(R.isMethod($field434)) {
$ans388 = $field434.full_meth(ED19,(" failed for the test:"));
} else {
if(!(R.isFunction($field434))) {
R.ffi.throwNonFunApp(L[83],$field434);
}
$ans388 = $field434.app((" failed for the test:"));
}
break;
case 17: var anf_arg259 = $ans388;
$step387 = 18;
$al389 = L[80];
$field435 = R.getColonFieldLoc(anf_method_obj256,"make3",L[80]);
if(R.isMethod($field435)) {
$ans388 = $field435.full_meth(anf_method_obj256,anf_arg257,anf_arg258,anf_arg259);
} else {
if(!(R.isFunction($field435))) {
R.ffi.throwNonFunApp(L[80],$field435);
}
$ans388 = $field435.app(anf_arg257,anf_arg258,anf_arg259);
}
break;
case 18: var anf_arg380 = $ans388;
$al389 = L[84];
var anf_arg261 = G(self159,"loc",L[84]);
$step387 = 19;
$al389 = L[85];
$field436 = R.getColonFieldLoc(ED19,"cmcode",L[85]);
if(R.isMethod($field436)) {
$ans388 = $field436.full_meth(ED19,anf_arg261);
} else {
if(!(R.isFunction($field436))) {
R.ffi.throwNonFunApp(L[85],$field436);
}
$ans388 = $field436.app(anf_arg261);
}
break;
case 19: var anf_arg381 = $ans388;
$al389 = L[86];
var anf_method_obj372 = G(ED19,"para",L[86]);
$al389 = L[87];
var cases263 = G(test$ast173,"op",L[87]);
var $cases_dispatch517 = {"s-op-is-roughly":20,
"s-op-is":24,
"s-op-is-op":25};
$al389 = L[93];
$step387 = $cases_dispatch517[cases263.$name] || 26;
break;
case 20: if(cases263.$arity !== 1) {
if(cases263.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[92],1,cases263.$arity,L[93]);
} else {
R.ffi.throwCasesSingletonErrorC(L[92],true,L[93]);
}
}
var $fn274 = cases263.$constructor.$fieldNames;
R.derefField(cases263.dict[$fn274[0]],cases263.$mut_fields_mask[0],false);
$al389 = L[88];
var anf_method_obj267 = G(ED19,"sequence",L[88]);
$step387 = 21;
$al389 = L[89];
$field437 = R.getColonFieldLoc(ED19,"text",L[89]);
if(R.isMethod($field437)) {
$ans388 = $field437.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field437))) {
R.ffi.throwNonFunApp(L[89],$field437);
}
$ans388 = $field437.app(("It succeeds only if the "));
}
break;
case 21: var anf_arg268 = $ans388;
$step387 = 22;
$al389 = L[90];
$field438 = R.getColonFieldLoc(ED19,"text",L[90]);
if(R.isMethod($field438)) {
$ans388 = $field438.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field438))) {
R.ffi.throwNonFunApp(L[90],$field438);
}
$ans388 = $field438.app((" and "));
}
break;
case 22: var anf_arg270 = $ans388;
$step387 = 23;
$al389 = L[91];
$field439 = R.getColonFieldLoc(ED19,"text",L[91]);
if(R.isMethod($field439)) {
$ans388 = $field439.full_meth(ED19,(" sides are equal (allowing for rough equality)."));
} else {
if(!(R.isFunction($field439))) {
R.ffi.throwNonFunApp(L[91],$field439);
}
$ans388 = $field439.app((" sides are equal (allowing for rough equality)."));
}
break;
case 23: var anf_arg272 = $ans388;
$step387 = 27;
$al389 = L[88];
$field440 = R.getColonFieldLoc(anf_method_obj267,"make5",L[88]);
if(R.isMethod($field440)) {
$ans388 = $field440.full_meth(anf_method_obj267,anf_arg268,ed$lhs269,anf_arg270,ed$rhs271,anf_arg272);
} else {
if(!(R.isFunction($field440))) {
R.ffi.throwNonFunApp(L[88],$field440);
}
$ans388 = $field440.app(anf_arg268,ed$lhs269,anf_arg270,ed$rhs271,anf_arg272);
}
break;
case 24: if(cases263.$arity !== 1) {
if(cases263.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[114],1,cases263.$arity,L[93]);
} else {
R.ffi.throwCasesSingletonErrorC(L[114],true,L[93]);
}
}
$step387 = 27;
$al389 = L[115];
var $temp_branch467 = function($$underscore343) {
var $step468 = 0;
var $ans469 = D;
var $al470 = L[100];
try {
if(R.isActivationRecord($$underscore343)) {
$step468 = $$underscore343.step;
$al470 = $$underscore343.from;
$ans469 = $$underscore343.ans;
$underscore343 = $$underscore343.args[0];
cases276 = $$underscore343.vars[0];
anf_method_obj280 = $$underscore343.vars[1];
anf_arg281 = $$underscore343.vars[2];
anf_arg282 = $$underscore343.vars[3];
} else {
var $underscore343 = $$underscore343;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step468) {
case 0: $al470 = L[94];
var cases276 = G(test$ast173,"refinement",L[94]);
$step468 = 1;
$al470 = L[113];
R._checkAnn(L[113],Option121,cases276);
break;
case 1: var $cases_dispatch496 = {"none":2,
"some":6};
$al470 = L[100];
$step468 = $cases_dispatch496[cases276.$name] || 7;
break;
case 2: if(cases276.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[99],false,L[100]);
}
$al470 = L[95];
var anf_method_obj280 = G(ED19,"sequence",L[95]);
$step468 = 3;
$al470 = L[96];
$field471 = R.getColonFieldLoc(ED19,"text",L[96]);
if(R.isMethod($field471)) {
$ans469 = $field471.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field471))) {
R.ffi.throwNonFunApp(L[96],$field471);
}
$ans469 = $field471.app(("It succeeds only if the "));
}
break;
case 3: var anf_arg281 = $ans469;
$step468 = 4;
$al470 = L[97];
$field472 = R.getColonFieldLoc(ED19,"text",L[97]);
if(R.isMethod($field472)) {
$ans469 = $field472.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field472))) {
R.ffi.throwNonFunApp(L[97],$field472);
}
$ans469 = $field472.app((" and "));
}
break;
case 4: var anf_arg282 = $ans469;
$step468 = 5;
$al470 = L[98];
$field473 = R.getColonFieldLoc(ED19,"text",L[98]);
if(R.isMethod($field473)) {
$ans469 = $field473.full_meth(ED19,(" sides are equal."));
} else {
if(!(R.isFunction($field473))) {
R.ffi.throwNonFunApp(L[98],$field473);
}
$ans469 = $field473.app((" sides are equal."));
}
break;
case 5: var anf_arg283 = $ans469;
$step468 = 8;
$al470 = L[95];
$field474 = R.getColonFieldLoc(anf_method_obj280,"make5",L[95]);
if(R.isMethod($field474)) {
$ans469 = $field474.full_meth(anf_method_obj280,anf_arg281,ed$lhs269,anf_arg282,ed$rhs271,anf_arg283);
} else {
if(!(R.isFunction($field474))) {
R.ffi.throwNonFunApp(L[95],$field474);
}
$ans469 = $field474.app(anf_arg281,ed$lhs269,anf_arg282,ed$rhs271,anf_arg283);
}
break;
case 6: if(cases276.$arity !== 1) {
if(cases276.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[111],1,cases276.$arity,L[100]);
} else {
R.ffi.throwCasesSingletonErrorC(L[111],true,L[100]);
}
}
$step468 = 8;
$al470 = L[112];
var $temp_branch483 = function($e287) {
var $step484 = 0;
var $ans485 = D;
var $al486 = L[101];
try {
if(R.isActivationRecord($e287)) {
$step484 = $e287.step;
$al486 = $e287.from;
$ans485 = $e287.ans;
e287 = $e287.args[0];
anf_method_obj296 = $e287.vars[0];
anf_array297 = $e287.vars[1];
anf_arg290 = $e287.vars[2];
} else {
var e287 = $e287;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step484) {
case 0: $al486 = L[101];
var anf_method_obj296 = G(ED19,"sequence",L[101]);
$al486 = L[102];
var anf_array297 = R.makeArrayN((7));
$step484 = 1;
$al486 = L[103];
$field487 = R.getColonFieldLoc(ED19,"text",L[103]);
if(R.isMethod($field487)) {
$ans485 = $field487.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field487))) {
R.ffi.throwNonFunApp(L[103],$field487);
}
$ans485 = $field487.app(("It succeeds only if the "));
}
break;
case 1: anf_array297[0] = $ans485;
$step484 = 2;
$al486 = L[104];
$field488 = R.getColonFieldLoc(ED19,"text",L[104]);
if(R.isMethod($field488)) {
$ans485 = $field488.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field488))) {
R.ffi.throwNonFunApp(L[104],$field488);
}
$ans485 = $field488.app(("predicate"));
}
break;
case 2: var anf_arg290 = $ans485;
$al486 = L[105];
var anf_arg288 = G(e287,"l",L[105]);
$step484 = 3;
$al486 = L[106];
$field489 = R.getColonFieldLoc(list220,"make1",L[106]);
if(R.isMethod($field489)) {
$ans485 = $field489.full_meth(list220,anf_arg288);
} else {
if(!(R.isFunction($field489))) {
R.ffi.throwNonFunApp(L[106],$field489);
}
$ans485 = $field489.app(anf_arg288);
}
break;
case 3: var anf_arg291 = $ans485;
$step484 = 4;
$al486 = L[107];
$field490 = R.getColonFieldLoc(ED19,"highlight",L[107]);
if(R.isMethod($field490)) {
$ans485 = $field490.full_meth(ED19,anf_arg290,anf_arg291,(1));
} else {
if(!(R.isFunction($field490))) {
R.ffi.throwNonFunApp(L[107],$field490);
}
$ans485 = $field490.app(anf_arg290,anf_arg291,(1));
}
break;
case 4: anf_array297[1] = $ans485;
$step484 = 5;
$al486 = L[108];
$field491 = R.getColonFieldLoc(ED19,"text",L[108]);
if(R.isMethod($field491)) {
$ans485 = $field491.full_meth(ED19,(" is satisfied when the "));
} else {
if(!(R.isFunction($field491))) {
R.ffi.throwNonFunApp(L[108],$field491);
}
$ans485 = $field491.app((" is satisfied when the "));
}
break;
case 5: anf_array297[2] = $ans485;
anf_array297[3] = ed$lhs269;
$step484 = 6;
$al486 = L[109];
$field492 = R.getColonFieldLoc(ED19,"text",L[109]);
if(R.isMethod($field492)) {
$ans485 = $field492.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field492))) {
R.ffi.throwNonFunApp(L[109],$field492);
}
$ans485 = $field492.app((" and "));
}
break;
case 6: anf_array297[4] = $ans485;
anf_array297[5] = ed$rhs271;
$step484 = 7;
$al486 = L[110];
$field493 = R.getColonFieldLoc(ED19,"text",L[110]);
if(R.isMethod($field493)) {
$ans485 = $field493.full_meth(ED19,(" sides are applied to it."));
} else {
if(!(R.isFunction($field493))) {
R.ffi.throwNonFunApp(L[110],$field493);
}
$ans485 = $field493.app((" sides are applied to it."));
}
break;
case 7: anf_array297[6] = $ans485;
$step484 = 8;
$al486 = L[101];
$field494 = R.getColonFieldLoc(anf_method_obj296,"make",L[101]);
if(R.isMethod($field494)) {
$ans485 = $field494.full_meth(anf_method_obj296,anf_array297);
} else {
if(!(R.isFunction($field494))) {
R.ffi.throwNonFunApp(L[101],$field494);
}
$ans485 = $field494.app(anf_array297);
}
break;
case 8: ++R.GAS;
return $ans485;
default: throw "No case numbered " + $step484 + " in $temp_branch483";
}
}
} catch($e495) {
if(R.isCont($e495) && ($step484 !== 8)) {
$e495.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al486,$temp_branch483,$step484,[e287],[anf_method_obj296,anf_array297,anf_arg290]);
}
if(R.isPyretException($e495)) {
$e495.pyretStack.push($al486);
}
throw $e495;
}
};
$ans469 = cases276.$app_fields($temp_branch483,[false]);
break;
case 7: $step468 = 8;
$al470 = L[100];
$ans469 = R.throwNoCasesMatched(L[100],cases276);
break;
case 8: ++R.GAS;
return $ans469;
default: throw "No case numbered " + $step468 + " in $temp_branch467";
}
}
} catch($e497) {
if(R.isCont($e497) && ($step468 !== 8)) {
$e497.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al470,$temp_branch467,$step468,[$underscore343],[cases276,anf_method_obj280,anf_arg281,anf_arg282]);
}
if(R.isPyretException($e497)) {
$e497.pyretStack.push($al470);
}
throw $e497;
}
};
$ans388 = cases263.$app_fields($temp_branch467,[false]);
break;
case 25: if(cases263.$arity !== 2) {
if(cases263.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[125],2,cases263.$arity,L[93]);
} else {
R.ffi.throwCasesSingletonErrorC(L[125],true,L[93]);
}
}
$step387 = 27;
$al389 = L[126];
var $temp_branch505 = function($$underscore369,$op347) {
var $step506 = 0;
var $ans507 = D;
var $al508 = L[116];
try {
if(R.isActivationRecord($$underscore369)) {
$step506 = $$underscore369.step;
$al508 = $$underscore369.from;
$ans507 = $$underscore369.ans;
$underscore369 = $$underscore369.args[0];
op347 = $$underscore369.args[1];
anf_method_obj355 = $$underscore369.vars[0];
anf_array356 = $$underscore369.vars[1];
} else {
var $underscore369 = $$underscore369;
var op347 = $op347;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step506) {
case 0: $al508 = L[116];
var anf_method_obj355 = G(ED19,"sequence",L[116]);
$al508 = L[117];
var anf_array356 = R.makeArrayN((7));
$step506 = 1;
$al508 = L[118];
$field509 = R.getColonFieldLoc(ED19,"text",L[118]);
if(R.isMethod($field509)) {
$ans507 = $field509.full_meth(ED19,("It succeeds only if the predicate "));
} else {
if(!(R.isFunction($field509))) {
R.ffi.throwNonFunApp(L[118],$field509);
}
$ans507 = $field509.app(("It succeeds only if the predicate "));
}
break;
case 1: anf_array356[0] = $ans507;
var anf_fun346 = get$op$fun$name70.$var;
$step506 = 2;
$al508 = L[124];
if(!(R.isFunction(anf_fun346))) {
R.ffi.throwNonFunApp($al508,anf_fun346);
}
$ans507 = anf_fun346.app(op347);
break;
case 2: var anf_arg348 = $ans507;
$step506 = 3;
$al508 = L[119];
$field510 = R.getColonFieldLoc(ED19,"text",L[119]);
if(R.isMethod($field510)) {
$ans507 = $field510.full_meth(ED19,anf_arg348);
} else {
if(!(R.isFunction($field510))) {
R.ffi.throwNonFunApp(L[119],$field510);
}
$ans507 = $field510.app(anf_arg348);
}
break;
case 3: var anf_arg350 = $ans507;
$step506 = 4;
$al508 = L[120];
$field511 = R.getColonFieldLoc(ED19,"code",L[120]);
if(R.isMethod($field511)) {
$ans507 = $field511.full_meth(ED19,anf_arg350);
} else {
if(!(R.isFunction($field511))) {
R.ffi.throwNonFunApp(L[120],$field511);
}
$ans507 = $field511.app(anf_arg350);
}
break;
case 4: anf_array356[1] = $ans507;
$step506 = 5;
$al508 = L[121];
$field512 = R.getColonFieldLoc(ED19,"text",L[121]);
if(R.isMethod($field512)) {
$ans507 = $field512.full_meth(ED19,(" is satisfied when the "));
} else {
if(!(R.isFunction($field512))) {
R.ffi.throwNonFunApp(L[121],$field512);
}
$ans507 = $field512.app((" is satisfied when the "));
}
break;
case 5: anf_array356[2] = $ans507;
anf_array356[3] = ed$lhs269;
$step506 = 6;
$al508 = L[122];
$field513 = R.getColonFieldLoc(ED19,"text",L[122]);
if(R.isMethod($field513)) {
$ans507 = $field513.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field513))) {
R.ffi.throwNonFunApp(L[122],$field513);
}
$ans507 = $field513.app((" and "));
}
break;
case 6: anf_array356[4] = $ans507;
anf_array356[5] = ed$rhs271;
$step506 = 7;
$al508 = L[123];
$field514 = R.getColonFieldLoc(ED19,"text",L[123]);
if(R.isMethod($field514)) {
$ans507 = $field514.full_meth(ED19,(" sides are applied to it."));
} else {
if(!(R.isFunction($field514))) {
R.ffi.throwNonFunApp(L[123],$field514);
}
$ans507 = $field514.app((" sides are applied to it."));
}
break;
case 7: anf_array356[6] = $ans507;
$step506 = 8;
$al508 = L[116];
$field515 = R.getColonFieldLoc(anf_method_obj355,"make",L[116]);
if(R.isMethod($field515)) {
$ans507 = $field515.full_meth(anf_method_obj355,anf_array356);
} else {
if(!(R.isFunction($field515))) {
R.ffi.throwNonFunApp(L[116],$field515);
}
$ans507 = $field515.app(anf_array356);
}
break;
case 8: ++R.GAS;
return $ans507;
default: throw "No case numbered " + $step506 + " in $temp_branch505";
}
}
} catch($e516) {
if(R.isCont($e516) && ($step506 !== 8)) {
$e516.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al508,$temp_branch505,$step506,[$underscore369,op347],[anf_method_obj355,anf_array356]);
}
if(R.isPyretException($e516)) {
$e516.pyretStack.push($al508);
}
throw $e516;
}
};
$ans388 = cases263.$app_fields($temp_branch505,[false,false]);
break;
case 26: $step387 = 27;
$al389 = L[93];
$ans388 = R.throwNoCasesMatched(L[93],cases263);
break;
case 27: var anf_arg373 = $ans388;
$step387 = 28;
$al389 = L[86];
$field518 = R.getColonFieldLoc(anf_method_obj372,"make1",L[86]);
if(R.isMethod($field518)) {
$ans388 = $field518.full_meth(anf_method_obj372,anf_arg373);
} else {
if(!(R.isFunction($field518))) {
R.ffi.throwNonFunApp(L[86],$field518);
}
$ans388 = $field518.app(anf_arg373);
}
break;
case 28: var anf_arg382 = $ans388;
var anf_fun375 = report$value156.$var;
$al389 = L[127];
var anf_arg376 = G(self159,"left",L[127]);
$step387 = 29;
$al389 = L[130];
if(!(R.isFunction(anf_fun375))) {
R.ffi.throwNonFunApp($al389,anf_fun375);
}
$ans388 = anf_fun375.app(ed$lhs269,anf_arg376);
break;
case 29: var anf_arg383 = $ans388;
var anf_fun377 = report$value156.$var;
$al389 = L[128];
var anf_arg378 = G(self159,"right",L[128]);
$step387 = 30;
$al389 = L[129];
if(!(R.isFunction(anf_fun377))) {
R.ffi.throwNonFunApp($al389,anf_fun377);
}
$ans388 = anf_fun377.app(ed$rhs271,anf_arg378);
break;
case 30: var anf_arg384 = $ans388;
$step387 = 31;
$al389 = L[79];
$field519 = R.getColonFieldLoc(anf_method_obj379,"make5",L[79]);
if(R.isMethod($field519)) {
$ans388 = $field519.full_meth(anf_method_obj379,anf_arg380,anf_arg381,anf_arg382,anf_arg383,anf_arg384);
} else {
if(!(R.isFunction($field519))) {
R.ffi.throwNonFunApp(L[79],$field519);
}
$ans388 = $field519.app(anf_arg380,anf_arg381,anf_arg382,anf_arg383,anf_arg384);
}
break;
case 31: ++R.GAS;
return $ans388;
default: throw "No case numbered " + $step387 + " in $temp_branch386";
}
}
} catch($e520) {
if(R.isCont($e520) && ($step387 !== 31)) {
$e520.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al389,$temp_branch386,$step387,[test$ast173],[lhs$ast176,rhs$ast184,anf_arg180,ed$lhs269,anf_arg188,ed$rhs271,cases191,ed$op253,anf_method_obj379,anf_method_obj256,anf_arg257,anf_arg258,anf_arg380,anf_arg381,anf_method_obj372,cases263,anf_method_obj267,anf_arg268,anf_arg270,anf_arg382,anf_arg383]);
}
if(R.isPyretException($e520)) {
$e520.pyretStack.push($al389);
}
throw $e520;
}
};
$ans163 = cases172.$app_fields($temp_branch386,[false]);
break;
case 9: if(cases172.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[137],false,L[134]);
}
$step157 = 12;
$al164 = L[136];
$field521 = R.getColonFieldLoc(self159,"render-reason",L[136]);
if(R.isMethod($field521)) {
$ans163 = $field521.full_meth(self159);
} else {
if(!(R.isFunction($field521))) {
R.ffi.throwNonFunApp(L[136],$field521);
}
$ans163 = $field521.app();
}
break;
case 10: $step157 = 12;
$al164 = L[134];
$ans163 = R.throwNoCasesMatched(L[134],cases172);
break;
case 11: $step157 = 12;
$al164 = L[140];
$field523 = R.getColonFieldLoc(self159,"render-reason",L[140]);
if(R.isMethod($field523)) {
$ans163 = $field523.full_meth(self159);
} else {
if(!(R.isFunction($field523))) {
R.ffi.throwNonFunApp(L[140],$field523);
}
$ans163 = $field523.app();
}
break;
case 12: ++R.GAS;
return $ans163;
default: throw "No case numbered " + $step157 + " in $temp_full158";
}
}
} catch($e526) {
if(R.isCont($e526) && ($step157 !== 12)) {
$e526.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al164,$temp_full158,$step157,[self159,maybe$stack$loc160,src$available161,maybe$ast162],[cases172]);
}
if(R.isPyretException($e526)) {
$e526.pyretStack.push($al164);
}
throw $e526;
}
};
var anf_variant_member1814 = R.makeMethod3($temp_full158,"render-fancy-reason");
var $temp_full528 = function($self529) {
var $step527 = 0;
var $ans530 = D;
var $al531 = L[155];
try {
if(R.isActivationRecord($self529)) {
$step527 = $self529.step;
$al531 = $self529.from;
$ans530 = $self529.ans;
self529 = $self529.args[0];
anf_method_obj544 = $self529.vars[0];
anf_method_obj537 = $self529.vars[1];
cases532 = $self529.vars[2];
anf_arg545 = $self529.vars[3];
anf_arg546 = $self529.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[155],1,$t);
}
var self529 = $self529;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step527) {
case 0: $al531 = L[142];
var anf_method_obj544 = G(ED19,"error",L[142]);
$al531 = L[143];
var anf_method_obj537 = G(ED19,"para",L[143]);
$al531 = L[144];
var cases532 = G(self529,"refinement",L[144]);
$step527 = 1;
$al531 = L[154];
R._checkAnn(L[154],Option121,cases532);
break;
case 1: var $cases_dispatch536 = {"none":2,
"some":3};
$al531 = L[147];
$step527 = $cases_dispatch536[cases532.$name] || 4;
break;
case 2: if(cases532.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[146],false,L[147]);
}
$step527 = 5;
$al531 = L[145];
$field533 = R.getColonFieldLoc(ED19,"text",L[145]);
if(R.isMethod($field533)) {
$ans530 = $field533.full_meth(ED19,("Values not equal"));
} else {
if(!(R.isFunction($field533))) {
R.ffi.throwNonFunApp(L[145],$field533);
}
$ans530 = $field533.app(("Values not equal"));
}
break;
case 3: if(cases532.$arity !== 1) {
if(cases532.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[149],1,cases532.$arity,L[147]);
} else {
R.ffi.throwCasesSingletonErrorC(L[149],true,L[147]);
}
}
var $fn274 = cases532.$constructor.$fieldNames;
R.derefField(cases532.dict[$fn274[0]],cases532.$mut_fields_mask[0],false);
$step527 = 5;
$al531 = L[148];
$field534 = R.getColonFieldLoc(ED19,"text",L[148]);
if(R.isMethod($field534)) {
$ans530 = $field534.full_meth(ED19,("Values not equal (using custom equality):"));
} else {
if(!(R.isFunction($field534))) {
R.ffi.throwNonFunApp(L[148],$field534);
}
$ans530 = $field534.app(("Values not equal (using custom equality):"));
}
break;
case 4: $step527 = 5;
$al531 = L[147];
$ans530 = R.throwNoCasesMatched(L[147],cases532);
break;
case 5: var anf_arg538 = $ans530;
$step527 = 6;
$al531 = L[143];
$field539 = R.getColonFieldLoc(anf_method_obj537,"make1",L[143]);
if(R.isMethod($field539)) {
$ans530 = $field539.full_meth(anf_method_obj537,anf_arg538);
} else {
if(!(R.isFunction($field539))) {
R.ffi.throwNonFunApp(L[143],$field539);
}
$ans530 = $field539.app(anf_arg538);
}
break;
case 6: var anf_arg545 = $ans530;
$al531 = L[150];
var anf_arg540 = G(self529,"left",L[150]);
$step527 = 7;
$al531 = L[151];
$field541 = R.getColonFieldLoc(ED19,"embed",L[151]);
if(R.isMethod($field541)) {
$ans530 = $field541.full_meth(ED19,anf_arg540);
} else {
if(!(R.isFunction($field541))) {
R.ffi.throwNonFunApp(L[151],$field541);
}
$ans530 = $field541.app(anf_arg540);
}
break;
case 7: var anf_arg546 = $ans530;
$al531 = L[152];
var anf_arg542 = G(self529,"right",L[152]);
$step527 = 8;
$al531 = L[153];
$field543 = R.getColonFieldLoc(ED19,"embed",L[153]);
if(R.isMethod($field543)) {
$ans530 = $field543.full_meth(ED19,anf_arg542);
} else {
if(!(R.isFunction($field543))) {
R.ffi.throwNonFunApp(L[153],$field543);
}
$ans530 = $field543.app(anf_arg542);
}
break;
case 8: var anf_arg547 = $ans530;
$step527 = 9;
$al531 = L[142];
$field548 = R.getColonFieldLoc(anf_method_obj544,"make3",L[142]);
if(R.isMethod($field548)) {
$ans530 = $field548.full_meth(anf_method_obj544,anf_arg545,anf_arg546,anf_arg547);
} else {
if(!(R.isFunction($field548))) {
R.ffi.throwNonFunApp(L[142],$field548);
}
$ans530 = $field548.app(anf_arg545,anf_arg546,anf_arg547);
}
break;
case 9: ++R.GAS;
return $ans530;
default: throw "No case numbered " + $step527 + " in $temp_full528";
}
}
} catch($e549) {
if(R.isCont($e549) && ($step527 !== 9)) {
$e549.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al531,$temp_full528,$step527,[self529],[anf_method_obj544,anf_method_obj537,cases532,anf_arg545,anf_arg546]);
}
if(R.isPyretException($e549)) {
$e549.pyretStack.push($al531);
}
throw $e549;
}
};
var anf_variant_member1815 = R.makeMethod0($temp_full528,"render-reason");
var $temp_full551 = function($self552,$maybe$stack$loc553,$src$available554,$maybe$ast555) {
var $step550 = 0;
var $ans556 = D;
var $al557 = L[258];
try {
if(R.isActivationRecord($self552)) {
$step550 = $self552.step;
$al557 = $self552.from;
$ans556 = $self552.ans;
self552 = $self552.args[0];
maybe$stack$loc553 = $self552.args[1];
src$available554 = $self552.args[2];
maybe$ast555 = $self552.args[3];
cases565 = $self552.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[258],4,$t);
}
var self552 = $self552;
var maybe$stack$loc553 = $maybe$stack$loc553;
var src$available554 = $src$available554;
var maybe$ast555 = $maybe$ast555;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step550) {
case 0: $al557 = L[156];
var anf_method_obj558 = G(self552,"loc",L[156]);
$step550 = 1;
$al557 = L[157];
$field559 = R.getColonFieldLoc(anf_method_obj558,"is-builtin",L[157]);
if(R.isMethod($field559)) {
$ans556 = $field559.full_meth(anf_method_obj558);
} else {
if(!(R.isFunction($field559))) {
R.ffi.throwNonFunApp(L[157],$field559);
}
$ans556 = $field559.app();
}
break;
case 1: var anf_arg560 = $ans556;
$al557 = L[157];
var anf_if903 = R.checkWrapBoolean(anf_arg560);
$step550 = R.isPyretTrue(anf_if903)?2:3;
break;
case 2: $step550 = 12;
$al557 = L[158];
$field561 = R.getColonFieldLoc(self552,"render-reason",L[158]);
if(R.isMethod($field561)) {
$ans556 = $field561.full_meth(self552);
} else {
if(!(R.isFunction($field561))) {
R.ffi.throwNonFunApp(L[158],$field561);
}
$ans556 = $field561.app();
}
break;
case 3: $al557 = L[159];
var anf_arg562 = G(self552,"loc",L[159]);
$step550 = 4;
$al557 = L[160];
if(!(R.isFunction(src$available554))) {
R.ffi.throwNonFunApp($al557,src$available554);
}
$ans556 = src$available554.app(anf_arg562);
break;
case 4: var anf_arg563 = $ans556;
$al557 = L[160];
var anf_if902 = R.checkWrapBoolean(anf_arg563);
$step550 = R.isPyretTrue(anf_if902)?5:11;
break;
case 5: $al557 = L[161];
var anf_arg564 = G(self552,"loc",L[161]);
$step550 = 6;
$al557 = L[256];
if(!(R.isFunction(maybe$ast555))) {
R.ffi.throwNonFunApp($al557,maybe$ast555);
}
$ans556 = maybe$ast555.app(anf_arg564);
break;
case 6: var cases565 = $ans556;
$step550 = 7;
$al557 = L[255];
R._checkAnn(L[255],Option121,cases565);
break;
case 7: var $cases_dispatch900 = {"some":8,
"none":9};
$al557 = L[251];
$step550 = $cases_dispatch900[cases565.$name] || 10;
break;
case 8: if(cases565.$arity !== 1) {
if(cases565.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[250],1,cases565.$arity,L[251]);
} else {
R.ffi.throwCasesSingletonErrorC(L[250],true,L[251]);
}
}
$step550 = 12;
$al557 = L[252];
var $temp_branch768 = function($test$ast566) {
var $step769 = 0;
var $ans770 = D;
var $al771 = L[249];
try {
if(R.isActivationRecord($test$ast566)) {
$step769 = $test$ast566.step;
$al771 = $test$ast566.from;
$ans770 = $test$ast566.ans;
test$ast566 = $test$ast566.args[0];
lhs$ast569 = $test$ast566.vars[0];
rhs$ast577 = $test$ast566.vars[1];
anf_arg573 = $test$ast566.vars[2];
ed$lhs662 = $test$ast566.vars[3];
anf_arg581 = $test$ast566.vars[4];
ed$rhs664 = $test$ast566.vars[5];
cases584 = $test$ast566.vars[6];
ed$op645 = $test$ast566.vars[7];
anf_method_obj761 = $test$ast566.vars[8];
anf_method_obj648 = $test$ast566.vars[9];
anf_arg649 = $test$ast566.vars[10];
anf_arg650 = $test$ast566.vars[11];
anf_arg762 = $test$ast566.vars[12];
anf_arg763 = $test$ast566.vars[13];
anf_method_obj754 = $test$ast566.vars[14];
cases655 = $test$ast566.vars[15];
anf_arg764 = $test$ast566.vars[16];
anf_arg765 = $test$ast566.vars[17];
} else {
var test$ast566 = $test$ast566;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step769) {
case 0: $al771 = L[162];
var lhs$ast569 = G(test$ast566,"left",L[162]);
$al771 = L[163];
var anf_bracket567 = G(test$ast566,"right",L[163]);
$al771 = L[164];
var rhs$ast577 = G(anf_bracket567,"value",L[164]);
$step769 = 1;
$al771 = L[165];
$field772 = R.getColonFieldLoc(ED19,"text",L[165]);
if(R.isMethod($field772)) {
$ans770 = $field772.full_meth(ED19,("left"));
} else {
if(!(R.isFunction($field772))) {
R.ffi.throwNonFunApp(L[165],$field772);
}
$ans770 = $field772.app(("left"));
}
break;
case 1: var anf_arg573 = $ans770;
$al771 = L[166];
var anf_method_obj570 = G(ED19,"locs",L[166]);
$al771 = L[167];
var anf_arg571 = G(lhs$ast569,"l",L[167]);
$step769 = 2;
$al771 = L[166];
$field773 = R.getColonFieldLoc(anf_method_obj570,"make1",L[166]);
if(R.isMethod($field773)) {
$ans770 = $field773.full_meth(anf_method_obj570,anf_arg571);
} else {
if(!(R.isFunction($field773))) {
R.ffi.throwNonFunApp(L[166],$field773);
}
$ans770 = $field773.app(anf_arg571);
}
break;
case 2: var anf_arg574 = $ans770;
$step769 = 3;
$al771 = L[168];
$field774 = R.getColonFieldLoc(ED19,"highlight",L[168]);
if(R.isMethod($field774)) {
$ans770 = $field774.full_meth(ED19,anf_arg573,anf_arg574,(0));
} else {
if(!(R.isFunction($field774))) {
R.ffi.throwNonFunApp(L[168],$field774);
}
$ans770 = $field774.app(anf_arg573,anf_arg574,(0));
}
break;
case 3: var ed$lhs662 = $ans770;
$step769 = 4;
$al771 = L[169];
$field775 = R.getColonFieldLoc(ED19,"text",L[169]);
if(R.isMethod($field775)) {
$ans770 = $field775.full_meth(ED19,("right"));
} else {
if(!(R.isFunction($field775))) {
R.ffi.throwNonFunApp(L[169],$field775);
}
$ans770 = $field775.app(("right"));
}
break;
case 4: var anf_arg581 = $ans770;
$al771 = L[170];
var anf_method_obj578 = G(ED19,"locs",L[170]);
$al771 = L[171];
var anf_arg579 = G(rhs$ast577,"l",L[171]);
$step769 = 5;
$al771 = L[170];
$field776 = R.getColonFieldLoc(anf_method_obj578,"make1",L[170]);
if(R.isMethod($field776)) {
$ans770 = $field776.full_meth(anf_method_obj578,anf_arg579);
} else {
if(!(R.isFunction($field776))) {
R.ffi.throwNonFunApp(L[170],$field776);
}
$ans770 = $field776.app(anf_arg579);
}
break;
case 5: var anf_arg582 = $ans770;
$step769 = 6;
$al771 = L[172];
$field777 = R.getColonFieldLoc(ED19,"highlight",L[172]);
if(R.isMethod($field777)) {
$ans770 = $field777.full_meth(ED19,anf_arg581,anf_arg582,(2));
} else {
if(!(R.isFunction($field777))) {
R.ffi.throwNonFunApp(L[172],$field777);
}
$ans770 = $field777.app(anf_arg581,anf_arg582,(2));
}
break;
case 6: var ed$rhs664 = $ans770;
$al771 = L[173];
var cases584 = G(test$ast566,"refinement",L[173]);
$step769 = 7;
$al771 = L[248];
R._checkAnn(L[248],Option121,cases584);
break;
case 7: var $cases_dispatch813 = {"none":8,
"some":12};
$al771 = L[181];
$step769 = $cases_dispatch813[cases584.$name] || 13;
break;
case 8: if(cases584.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[180],false,L[181]);
}
$al771 = L[174];
var anf_method_obj585 = G(test$ast566,"op",L[174]);
$step769 = 9;
$al771 = L[175];
$field778 = R.getColonFieldLoc(anf_method_obj585,"tosource",L[175]);
if(R.isMethod($field778)) {
$ans770 = $field778.full_meth(anf_method_obj585);
} else {
if(!(R.isFunction($field778))) {
R.ffi.throwNonFunApp(L[175],$field778);
}
$ans770 = $field778.app();
}
break;
case 9: var anf_method_obj587 = $ans770;
$step769 = 10;
$al771 = L[176];
$field779 = R.getColonFieldLoc(anf_method_obj587,"pretty",L[176]);
if(R.isMethod($field779)) {
$ans770 = $field779.full_meth(anf_method_obj587,(80));
} else {
if(!(R.isFunction($field779))) {
R.ffi.throwNonFunApp(L[176],$field779);
}
$ans770 = $field779.app((80));
}
break;
case 10: var anf_method_obj589 = $ans770;
$al771 = L[177];
var anf_arg590 = G(ED19,"text",L[177]);
$step769 = 11;
$al771 = L[178];
$field780 = R.getColonFieldLoc(anf_method_obj589,"map",L[178]);
if(R.isMethod($field780)) {
$ans770 = $field780.full_meth(anf_method_obj589,anf_arg590);
} else {
if(!(R.isFunction($field780))) {
R.ffi.throwNonFunApp(L[178],$field780);
}
$ans770 = $field780.app(anf_arg590);
}
break;
case 11: var anf_arg592 = $ans770;
$step769 = 14;
$al771 = L[179];
$field781 = R.getColonFieldLoc(ED19,"h-sequence",L[179]);
if(R.isMethod($field781)) {
$ans770 = $field781.full_meth(ED19,anf_arg592,(""));
} else {
if(!(R.isFunction($field781))) {
R.ffi.throwNonFunApp(L[179],$field781);
}
$ans770 = $field781.app(anf_arg592,(""));
}
break;
case 12: if(cases584.$arity !== 1) {
if(cases584.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[199],1,cases584.$arity,L[181]);
} else {
R.ffi.throwCasesSingletonErrorC(L[199],true,L[181]);
}
}
$step769 = 14;
$al771 = L[200];
var $temp_branch795 = function($e604) {
var $step796 = 0;
var $ans797 = D;
var $al798 = L[182];
try {
if(R.isActivationRecord($e604)) {
$step796 = $e604.step;
$al798 = $e604.from;
$ans797 = $e604.ans;
e604 = $e604.args[0];
anf_method_obj619 = $e604.vars[0];
anf_arg620 = $e604.vars[1];
anf_arg621 = $e604.vars[2];
anf_arg615 = $e604.vars[3];
anf_arg622 = $e604.vars[4];
} else {
var e604 = $e604;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step796) {
case 0: $al798 = L[182];
var anf_method_obj619 = G(ED19,"sequence",L[182]);
$al798 = L[183];
var anf_method_obj594 = G(test$ast566,"op",L[183]);
$step796 = 1;
$al798 = L[184];
$field799 = R.getColonFieldLoc(anf_method_obj594,"tosource",L[184]);
if(R.isMethod($field799)) {
$ans797 = $field799.full_meth(anf_method_obj594);
} else {
if(!(R.isFunction($field799))) {
R.ffi.throwNonFunApp(L[184],$field799);
}
$ans797 = $field799.app();
}
break;
case 1: var anf_method_obj596 = $ans797;
$step796 = 2;
$al798 = L[185];
$field800 = R.getColonFieldLoc(anf_method_obj596,"pretty",L[185]);
if(R.isMethod($field800)) {
$ans797 = $field800.full_meth(anf_method_obj596,(80));
} else {
if(!(R.isFunction($field800))) {
R.ffi.throwNonFunApp(L[185],$field800);
}
$ans797 = $field800.app((80));
}
break;
case 2: var anf_method_obj598 = $ans797;
$al798 = L[186];
var anf_arg599 = G(ED19,"text",L[186]);
$step796 = 3;
$al798 = L[187];
$field801 = R.getColonFieldLoc(anf_method_obj598,"map",L[187]);
if(R.isMethod($field801)) {
$ans797 = $field801.full_meth(anf_method_obj598,anf_arg599);
} else {
if(!(R.isFunction($field801))) {
R.ffi.throwNonFunApp(L[187],$field801);
}
$ans797 = $field801.app(anf_arg599);
}
break;
case 3: var anf_arg601 = $ans797;
$step796 = 4;
$al798 = L[188];
$field802 = R.getColonFieldLoc(ED19,"h-sequence",L[188]);
if(R.isMethod($field802)) {
$ans797 = $field802.full_meth(ED19,anf_arg601,(""));
} else {
if(!(R.isFunction($field802))) {
R.ffi.throwNonFunApp(L[188],$field802);
}
$ans797 = $field802.app(anf_arg601,(""));
}
break;
case 4: var anf_arg620 = $ans797;
$step796 = 5;
$al798 = L[189];
$field803 = R.getColonFieldLoc(ED19,"text",L[189]);
if(R.isMethod($field803)) {
$ans797 = $field803.full_meth(ED19,("%("));
} else {
if(!(R.isFunction($field803))) {
R.ffi.throwNonFunApp(L[189],$field803);
}
$ans797 = $field803.app(("%("));
}
break;
case 5: var anf_arg621 = $ans797;
$step796 = 6;
$al798 = L[190];
$field804 = R.getColonFieldLoc(e604,"tosource",L[190]);
if(R.isMethod($field804)) {
$ans797 = $field804.full_meth(e604);
} else {
if(!(R.isFunction($field804))) {
R.ffi.throwNonFunApp(L[190],$field804);
}
$ans797 = $field804.app();
}
break;
case 6: var anf_method_obj606 = $ans797;
$step796 = 7;
$al798 = L[191];
$field805 = R.getColonFieldLoc(anf_method_obj606,"pretty",L[191]);
if(R.isMethod($field805)) {
$ans797 = $field805.full_meth(anf_method_obj606,(80));
} else {
if(!(R.isFunction($field805))) {
R.ffi.throwNonFunApp(L[191],$field805);
}
$ans797 = $field805.app((80));
}
break;
case 7: var anf_method_obj608 = $ans797;
$al798 = L[192];
var anf_arg609 = G(ED19,"text",L[192]);
$step796 = 8;
$al798 = L[193];
$field806 = R.getColonFieldLoc(anf_method_obj608,"map",L[193]);
if(R.isMethod($field806)) {
$ans797 = $field806.full_meth(anf_method_obj608,anf_arg609);
} else {
if(!(R.isFunction($field806))) {
R.ffi.throwNonFunApp(L[193],$field806);
}
$ans797 = $field806.app(anf_arg609);
}
break;
case 8: var anf_arg611 = $ans797;
$step796 = 9;
$al798 = L[194];
$field807 = R.getColonFieldLoc(ED19,"h-sequence",L[194]);
if(R.isMethod($field807)) {
$ans797 = $field807.full_meth(ED19,anf_arg611,(""));
} else {
if(!(R.isFunction($field807))) {
R.ffi.throwNonFunApp(L[194],$field807);
}
$ans797 = $field807.app(anf_arg611,(""));
}
break;
case 9: var anf_arg615 = $ans797;
$al798 = L[195];
var anf_arg613 = G(e604,"l",L[195]);
$step796 = 10;
$al798 = L[196];
$field808 = R.getColonFieldLoc(list220,"make1",L[196]);
if(R.isMethod($field808)) {
$ans797 = $field808.full_meth(list220,anf_arg613);
} else {
if(!(R.isFunction($field808))) {
R.ffi.throwNonFunApp(L[196],$field808);
}
$ans797 = $field808.app(anf_arg613);
}
break;
case 10: var anf_arg616 = $ans797;
$step796 = 11;
$al798 = L[197];
$field809 = R.getColonFieldLoc(ED19,"highlight",L[197]);
if(R.isMethod($field809)) {
$ans797 = $field809.full_meth(ED19,anf_arg615,anf_arg616,(1));
} else {
if(!(R.isFunction($field809))) {
R.ffi.throwNonFunApp(L[197],$field809);
}
$ans797 = $field809.app(anf_arg615,anf_arg616,(1));
}
break;
case 11: var anf_arg622 = $ans797;
$step796 = 12;
$al798 = L[198];
$field810 = R.getColonFieldLoc(ED19,"text",L[198]);
if(R.isMethod($field810)) {
$ans797 = $field810.full_meth(ED19,(")"));
} else {
if(!(R.isFunction($field810))) {
R.ffi.throwNonFunApp(L[198],$field810);
}
$ans797 = $field810.app((")"));
}
break;
case 12: var anf_arg623 = $ans797;
$step796 = 13;
$al798 = L[182];
$field811 = R.getColonFieldLoc(anf_method_obj619,"make4",L[182]);
if(R.isMethod($field811)) {
$ans797 = $field811.full_meth(anf_method_obj619,anf_arg620,anf_arg621,anf_arg622,anf_arg623);
} else {
if(!(R.isFunction($field811))) {
R.ffi.throwNonFunApp(L[182],$field811);
}
$ans797 = $field811.app(anf_arg620,anf_arg621,anf_arg622,anf_arg623);
}
break;
case 13: ++R.GAS;
return $ans797;
default: throw "No case numbered " + $step796 + " in $temp_branch795";
}
}
} catch($e812) {
if(R.isCont($e812) && ($step796 !== 13)) {
$e812.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al798,$temp_branch795,$step796,[e604],[anf_method_obj619,anf_arg620,anf_arg621,anf_arg615,anf_arg622]);
}
if(R.isPyretException($e812)) {
$e812.pyretStack.push($al798);
}
throw $e812;
}
};
$ans770 = cases584.$app_fields($temp_branch795,[false]);
break;
case 13: $step769 = 14;
$al771 = L[181];
$ans770 = R.throwNoCasesMatched(L[181],cases584);
break;
case 14: var ed$op645 = $ans770;
$al771 = L[201];
var anf_method_obj761 = G(ED19,"error",L[201]);
$al771 = L[202];
var anf_method_obj648 = G(ED19,"para",L[202]);
$step769 = 15;
$al771 = L[203];
$field814 = R.getColonFieldLoc(ED19,"text",L[203]);
if(R.isMethod($field814)) {
$ans770 = $field814.full_meth(ED19,("The test operator "));
} else {
if(!(R.isFunction($field814))) {
R.ffi.throwNonFunApp(L[203],$field814);
}
$ans770 = $field814.app(("The test operator "));
}
break;
case 15: var anf_arg649 = $ans770;
$step769 = 16;
$al771 = L[204];
$field815 = R.getColonFieldLoc(ED19,"code",L[204]);
if(R.isMethod($field815)) {
$ans770 = $field815.full_meth(ED19,ed$op645);
} else {
if(!(R.isFunction($field815))) {
R.ffi.throwNonFunApp(L[204],$field815);
}
$ans770 = $field815.app(ed$op645);
}
break;
case 16: var anf_arg650 = $ans770;
$step769 = 17;
$al771 = L[205];
$field816 = R.getColonFieldLoc(ED19,"text",L[205]);
if(R.isMethod($field816)) {
$ans770 = $field816.full_meth(ED19,(" failed for the test:"));
} else {
if(!(R.isFunction($field816))) {
R.ffi.throwNonFunApp(L[205],$field816);
}
$ans770 = $field816.app((" failed for the test:"));
}
break;
case 17: var anf_arg651 = $ans770;
$step769 = 18;
$al771 = L[202];
$field817 = R.getColonFieldLoc(anf_method_obj648,"make3",L[202]);
if(R.isMethod($field817)) {
$ans770 = $field817.full_meth(anf_method_obj648,anf_arg649,anf_arg650,anf_arg651);
} else {
if(!(R.isFunction($field817))) {
R.ffi.throwNonFunApp(L[202],$field817);
}
$ans770 = $field817.app(anf_arg649,anf_arg650,anf_arg651);
}
break;
case 18: var anf_arg762 = $ans770;
$al771 = L[206];
var anf_arg653 = G(self552,"loc",L[206]);
$step769 = 19;
$al771 = L[207];
$field818 = R.getColonFieldLoc(ED19,"cmcode",L[207]);
if(R.isMethod($field818)) {
$ans770 = $field818.full_meth(ED19,anf_arg653);
} else {
if(!(R.isFunction($field818))) {
R.ffi.throwNonFunApp(L[207],$field818);
}
$ans770 = $field818.app(anf_arg653);
}
break;
case 19: var anf_arg763 = $ans770;
$al771 = L[208];
var anf_method_obj754 = G(ED19,"para",L[208]);
$al771 = L[209];
var cases655 = G(test$ast566,"op",L[209]);
var $cases_dispatch895 = {"s-op-is-not":20,
"s-op-is-not-op":21};
$al771 = L[231];
$step769 = $cases_dispatch895[cases655.$name] || 22;
break;
case 20: if(cases655.$arity !== 1) {
if(cases655.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[230],1,cases655.$arity,L[231]);
} else {
R.ffi.throwCasesSingletonErrorC(L[230],true,L[231]);
}
}
$step769 = 23;
$al771 = L[232];
var $temp_branch845 = function($$underscore725) {
var $step846 = 0;
var $ans847 = D;
var $al848 = L[216];
try {
if(R.isActivationRecord($$underscore725)) {
$step846 = $$underscore725.step;
$al848 = $$underscore725.from;
$ans847 = $$underscore725.ans;
$underscore725 = $$underscore725.args[0];
cases656 = $$underscore725.vars[0];
anf_method_obj660 = $$underscore725.vars[1];
anf_arg661 = $$underscore725.vars[2];
anf_arg663 = $$underscore725.vars[3];
} else {
var $underscore725 = $$underscore725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step846) {
case 0: $al848 = L[210];
var cases656 = G(test$ast566,"refinement",L[210]);
$step846 = 1;
$al848 = L[229];
R._checkAnn(L[229],Option121,cases656);
break;
case 1: var $cases_dispatch874 = {"none":2,
"some":6};
$al848 = L[216];
$step846 = $cases_dispatch874[cases656.$name] || 7;
break;
case 2: if(cases656.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[215],false,L[216]);
}
$al848 = L[211];
var anf_method_obj660 = G(ED19,"sequence",L[211]);
$step846 = 3;
$al848 = L[212];
$field849 = R.getColonFieldLoc(ED19,"text",L[212]);
if(R.isMethod($field849)) {
$ans847 = $field849.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field849))) {
R.ffi.throwNonFunApp(L[212],$field849);
}
$ans847 = $field849.app(("It succeeds only if the "));
}
break;
case 3: var anf_arg661 = $ans847;
$step846 = 4;
$al848 = L[213];
$field850 = R.getColonFieldLoc(ED19,"text",L[213]);
if(R.isMethod($field850)) {
$ans847 = $field850.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field850))) {
R.ffi.throwNonFunApp(L[213],$field850);
}
$ans847 = $field850.app((" and "));
}
break;
case 4: var anf_arg663 = $ans847;
$step846 = 5;
$al848 = L[214];
$field851 = R.getColonFieldLoc(ED19,"text",L[214]);
if(R.isMethod($field851)) {
$ans847 = $field851.full_meth(ED19,(" sides are not equal."));
} else {
if(!(R.isFunction($field851))) {
R.ffi.throwNonFunApp(L[214],$field851);
}
$ans847 = $field851.app((" sides are not equal."));
}
break;
case 5: var anf_arg665 = $ans847;
$step846 = 8;
$al848 = L[211];
$field852 = R.getColonFieldLoc(anf_method_obj660,"make5",L[211]);
if(R.isMethod($field852)) {
$ans847 = $field852.full_meth(anf_method_obj660,anf_arg661,ed$lhs662,anf_arg663,ed$rhs664,anf_arg665);
} else {
if(!(R.isFunction($field852))) {
R.ffi.throwNonFunApp(L[211],$field852);
}
$ans847 = $field852.app(anf_arg661,ed$lhs662,anf_arg663,ed$rhs664,anf_arg665);
}
break;
case 6: if(cases656.$arity !== 1) {
if(cases656.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[227],1,cases656.$arity,L[216]);
} else {
R.ffi.throwCasesSingletonErrorC(L[227],true,L[216]);
}
}
$step846 = 8;
$al848 = L[228];
var $temp_branch861 = function($e669) {
var $step862 = 0;
var $ans863 = D;
var $al864 = L[217];
try {
if(R.isActivationRecord($e669)) {
$step862 = $e669.step;
$al864 = $e669.from;
$ans863 = $e669.ans;
e669 = $e669.args[0];
anf_method_obj678 = $e669.vars[0];
anf_array679 = $e669.vars[1];
anf_arg672 = $e669.vars[2];
} else {
var e669 = $e669;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step862) {
case 0: $al864 = L[217];
var anf_method_obj678 = G(ED19,"sequence",L[217]);
$al864 = L[218];
var anf_array679 = R.makeArrayN((7));
$step862 = 1;
$al864 = L[219];
$field865 = R.getColonFieldLoc(ED19,"text",L[219]);
if(R.isMethod($field865)) {
$ans863 = $field865.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field865))) {
R.ffi.throwNonFunApp(L[219],$field865);
}
$ans863 = $field865.app(("It succeeds only if the "));
}
break;
case 1: anf_array679[0] = $ans863;
$step862 = 2;
$al864 = L[220];
$field866 = R.getColonFieldLoc(ED19,"text",L[220]);
if(R.isMethod($field866)) {
$ans863 = $field866.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field866))) {
R.ffi.throwNonFunApp(L[220],$field866);
}
$ans863 = $field866.app(("predicate"));
}
break;
case 2: var anf_arg672 = $ans863;
$al864 = L[221];
var anf_arg670 = G(e669,"l",L[221]);
$step862 = 3;
$al864 = L[222];
$field867 = R.getColonFieldLoc(list220,"make1",L[222]);
if(R.isMethod($field867)) {
$ans863 = $field867.full_meth(list220,anf_arg670);
} else {
if(!(R.isFunction($field867))) {
R.ffi.throwNonFunApp(L[222],$field867);
}
$ans863 = $field867.app(anf_arg670);
}
break;
case 3: var anf_arg673 = $ans863;
$step862 = 4;
$al864 = L[223];
$field868 = R.getColonFieldLoc(ED19,"highlight",L[223]);
if(R.isMethod($field868)) {
$ans863 = $field868.full_meth(ED19,anf_arg672,anf_arg673,(1));
} else {
if(!(R.isFunction($field868))) {
R.ffi.throwNonFunApp(L[223],$field868);
}
$ans863 = $field868.app(anf_arg672,anf_arg673,(1));
}
break;
case 4: anf_array679[1] = $ans863;
$step862 = 5;
$al864 = L[224];
$field869 = R.getColonFieldLoc(ED19,"text",L[224]);
if(R.isMethod($field869)) {
$ans863 = $field869.full_meth(ED19,(" is not satisfied when the "));
} else {
if(!(R.isFunction($field869))) {
R.ffi.throwNonFunApp(L[224],$field869);
}
$ans863 = $field869.app((" is not satisfied when the "));
}
break;
case 5: anf_array679[2] = $ans863;
anf_array679[3] = ed$lhs662;
$step862 = 6;
$al864 = L[225];
$field870 = R.getColonFieldLoc(ED19,"text",L[225]);
if(R.isMethod($field870)) {
$ans863 = $field870.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field870))) {
R.ffi.throwNonFunApp(L[225],$field870);
}
$ans863 = $field870.app((" and "));
}
break;
case 6: anf_array679[4] = $ans863;
anf_array679[5] = ed$rhs664;
$step862 = 7;
$al864 = L[226];
$field871 = R.getColonFieldLoc(ED19,"text",L[226]);
if(R.isMethod($field871)) {
$ans863 = $field871.full_meth(ED19,(" sides are applied to it."));
} else {
if(!(R.isFunction($field871))) {
R.ffi.throwNonFunApp(L[226],$field871);
}
$ans863 = $field871.app((" sides are applied to it."));
}
break;
case 7: anf_array679[6] = $ans863;
$step862 = 8;
$al864 = L[217];
$field872 = R.getColonFieldLoc(anf_method_obj678,"make",L[217]);
if(R.isMethod($field872)) {
$ans863 = $field872.full_meth(anf_method_obj678,anf_array679);
} else {
if(!(R.isFunction($field872))) {
R.ffi.throwNonFunApp(L[217],$field872);
}
$ans863 = $field872.app(anf_array679);
}
break;
case 8: ++R.GAS;
return $ans863;
default: throw "No case numbered " + $step862 + " in $temp_branch861";
}
}
} catch($e873) {
if(R.isCont($e873) && ($step862 !== 8)) {
$e873.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al864,$temp_branch861,$step862,[e669],[anf_method_obj678,anf_array679,anf_arg672]);
}
if(R.isPyretException($e873)) {
$e873.pyretStack.push($al864);
}
throw $e873;
}
};
$ans847 = cases656.$app_fields($temp_branch861,[false]);
break;
case 7: $step846 = 8;
$al848 = L[216];
$ans847 = R.throwNoCasesMatched(L[216],cases656);
break;
case 8: ++R.GAS;
return $ans847;
default: throw "No case numbered " + $step846 + " in $temp_branch845";
}
}
} catch($e875) {
if(R.isCont($e875) && ($step846 !== 8)) {
$e875.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al848,$temp_branch845,$step846,[$underscore725],[cases656,anf_method_obj660,anf_arg661,anf_arg663]);
}
if(R.isPyretException($e875)) {
$e875.pyretStack.push($al848);
}
throw $e875;
}
};
$ans770 = cases655.$app_fields($temp_branch845,[false]);
break;
case 21: if(cases655.$arity !== 2) {
if(cases655.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[242],2,cases655.$arity,L[231]);
} else {
R.ffi.throwCasesSingletonErrorC(L[242],true,L[231]);
}
}
$step769 = 23;
$al771 = L[243];
var $temp_branch883 = function($$underscore751,$op729) {
var $step884 = 0;
var $ans885 = D;
var $al886 = L[233];
try {
if(R.isActivationRecord($$underscore751)) {
$step884 = $$underscore751.step;
$al886 = $$underscore751.from;
$ans885 = $$underscore751.ans;
$underscore751 = $$underscore751.args[0];
op729 = $$underscore751.args[1];
anf_method_obj737 = $$underscore751.vars[0];
anf_array738 = $$underscore751.vars[1];
} else {
var $underscore751 = $$underscore751;
var op729 = $op729;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step884) {
case 0: $al886 = L[233];
var anf_method_obj737 = G(ED19,"sequence",L[233]);
$al886 = L[234];
var anf_array738 = R.makeArrayN((7));
$step884 = 1;
$al886 = L[235];
$field887 = R.getColonFieldLoc(ED19,"text",L[235]);
if(R.isMethod($field887)) {
$ans885 = $field887.full_meth(ED19,("It succeeds only if the predicate "));
} else {
if(!(R.isFunction($field887))) {
R.ffi.throwNonFunApp(L[235],$field887);
}
$ans885 = $field887.app(("It succeeds only if the predicate "));
}
break;
case 1: anf_array738[0] = $ans885;
var anf_fun728 = get$op$fun$name70.$var;
$step884 = 2;
$al886 = L[241];
if(!(R.isFunction(anf_fun728))) {
R.ffi.throwNonFunApp($al886,anf_fun728);
}
$ans885 = anf_fun728.app(op729);
break;
case 2: var anf_arg730 = $ans885;
$step884 = 3;
$al886 = L[236];
$field888 = R.getColonFieldLoc(ED19,"text",L[236]);
if(R.isMethod($field888)) {
$ans885 = $field888.full_meth(ED19,anf_arg730);
} else {
if(!(R.isFunction($field888))) {
R.ffi.throwNonFunApp(L[236],$field888);
}
$ans885 = $field888.app(anf_arg730);
}
break;
case 3: var anf_arg732 = $ans885;
$step884 = 4;
$al886 = L[237];
$field889 = R.getColonFieldLoc(ED19,"code",L[237]);
if(R.isMethod($field889)) {
$ans885 = $field889.full_meth(ED19,anf_arg732);
} else {
if(!(R.isFunction($field889))) {
R.ffi.throwNonFunApp(L[237],$field889);
}
$ans885 = $field889.app(anf_arg732);
}
break;
case 4: anf_array738[1] = $ans885;
$step884 = 5;
$al886 = L[238];
$field890 = R.getColonFieldLoc(ED19,"text",L[238]);
if(R.isMethod($field890)) {
$ans885 = $field890.full_meth(ED19,(" is not satisfied when the "));
} else {
if(!(R.isFunction($field890))) {
R.ffi.throwNonFunApp(L[238],$field890);
}
$ans885 = $field890.app((" is not satisfied when the "));
}
break;
case 5: anf_array738[2] = $ans885;
anf_array738[3] = ed$lhs662;
$step884 = 6;
$al886 = L[239];
$field891 = R.getColonFieldLoc(ED19,"text",L[239]);
if(R.isMethod($field891)) {
$ans885 = $field891.full_meth(ED19,(" and "));
} else {
if(!(R.isFunction($field891))) {
R.ffi.throwNonFunApp(L[239],$field891);
}
$ans885 = $field891.app((" and "));
}
break;
case 6: anf_array738[4] = $ans885;
anf_array738[5] = ed$rhs664;
$step884 = 7;
$al886 = L[240];
$field892 = R.getColonFieldLoc(ED19,"text",L[240]);
if(R.isMethod($field892)) {
$ans885 = $field892.full_meth(ED19,(" sides are applied to it."));
} else {
if(!(R.isFunction($field892))) {
R.ffi.throwNonFunApp(L[240],$field892);
}
$ans885 = $field892.app((" sides are applied to it."));
}
break;
case 7: anf_array738[6] = $ans885;
$step884 = 8;
$al886 = L[233];
$field893 = R.getColonFieldLoc(anf_method_obj737,"make",L[233]);
if(R.isMethod($field893)) {
$ans885 = $field893.full_meth(anf_method_obj737,anf_array738);
} else {
if(!(R.isFunction($field893))) {
R.ffi.throwNonFunApp(L[233],$field893);
}
$ans885 = $field893.app(anf_array738);
}
break;
case 8: ++R.GAS;
return $ans885;
default: throw "No case numbered " + $step884 + " in $temp_branch883";
}
}
} catch($e894) {
if(R.isCont($e894) && ($step884 !== 8)) {
$e894.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al886,$temp_branch883,$step884,[$underscore751,op729],[anf_method_obj737,anf_array738]);
}
if(R.isPyretException($e894)) {
$e894.pyretStack.push($al886);
}
throw $e894;
}
};
$ans770 = cases655.$app_fields($temp_branch883,[false,false]);
break;
case 22: $step769 = 23;
$al771 = L[231];
$ans770 = R.throwNoCasesMatched(L[231],cases655);
break;
case 23: var anf_arg755 = $ans770;
$step769 = 24;
$al771 = L[208];
$field896 = R.getColonFieldLoc(anf_method_obj754,"make1",L[208]);
if(R.isMethod($field896)) {
$ans770 = $field896.full_meth(anf_method_obj754,anf_arg755);
} else {
if(!(R.isFunction($field896))) {
R.ffi.throwNonFunApp(L[208],$field896);
}
$ans770 = $field896.app(anf_arg755);
}
break;
case 24: var anf_arg764 = $ans770;
var anf_fun757 = report$value156.$var;
$al771 = L[244];
var anf_arg758 = G(self552,"left",L[244]);
$step769 = 25;
$al771 = L[247];
if(!(R.isFunction(anf_fun757))) {
R.ffi.throwNonFunApp($al771,anf_fun757);
}
$ans770 = anf_fun757.app(ed$lhs662,anf_arg758);
break;
case 25: var anf_arg765 = $ans770;
var anf_fun759 = report$value156.$var;
$al771 = L[245];
var anf_arg760 = G(self552,"right",L[245]);
$step769 = 26;
$al771 = L[246];
if(!(R.isFunction(anf_fun759))) {
R.ffi.throwNonFunApp($al771,anf_fun759);
}
$ans770 = anf_fun759.app(ed$rhs664,anf_arg760);
break;
case 26: var anf_arg766 = $ans770;
$step769 = 27;
$al771 = L[201];
$field897 = R.getColonFieldLoc(anf_method_obj761,"make5",L[201]);
if(R.isMethod($field897)) {
$ans770 = $field897.full_meth(anf_method_obj761,anf_arg762,anf_arg763,anf_arg764,anf_arg765,anf_arg766);
} else {
if(!(R.isFunction($field897))) {
R.ffi.throwNonFunApp(L[201],$field897);
}
$ans770 = $field897.app(anf_arg762,anf_arg763,anf_arg764,anf_arg765,anf_arg766);
}
break;
case 27: ++R.GAS;
return $ans770;
default: throw "No case numbered " + $step769 + " in $temp_branch768";
}
}
} catch($e898) {
if(R.isCont($e898) && ($step769 !== 27)) {
$e898.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al771,$temp_branch768,$step769,[test$ast566],[lhs$ast569,rhs$ast577,anf_arg573,ed$lhs662,anf_arg581,ed$rhs664,cases584,ed$op645,anf_method_obj761,anf_method_obj648,anf_arg649,anf_arg650,anf_arg762,anf_arg763,anf_method_obj754,cases655,anf_arg764,anf_arg765]);
}
if(R.isPyretException($e898)) {
$e898.pyretStack.push($al771);
}
throw $e898;
}
};
$ans556 = cases565.$app_fields($temp_branch768,[false]);
break;
case 9: if(cases565.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[254],false,L[251]);
}
$step550 = 12;
$al557 = L[253];
$field899 = R.getColonFieldLoc(self552,"render-reason",L[253]);
if(R.isMethod($field899)) {
$ans556 = $field899.full_meth(self552);
} else {
if(!(R.isFunction($field899))) {
R.ffi.throwNonFunApp(L[253],$field899);
}
$ans556 = $field899.app();
}
break;
case 10: $step550 = 12;
$al557 = L[251];
$ans556 = R.throwNoCasesMatched(L[251],cases565);
break;
case 11: $step550 = 12;
$al557 = L[257];
$field901 = R.getColonFieldLoc(self552,"render-reason",L[257]);
if(R.isMethod($field901)) {
$ans556 = $field901.full_meth(self552);
} else {
if(!(R.isFunction($field901))) {
R.ffi.throwNonFunApp(L[257],$field901);
}
$ans556 = $field901.app();
}
break;
case 12: ++R.GAS;
return $ans556;
default: throw "No case numbered " + $step550 + " in $temp_full551";
}
}
} catch($e904) {
if(R.isCont($e904) && ($step550 !== 12)) {
$e904.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al557,$temp_full551,$step550,[self552,maybe$stack$loc553,src$available554,maybe$ast555],[cases565]);
}
if(R.isPyretException($e904)) {
$e904.pyretStack.push($al557);
}
throw $e904;
}
};
var anf_variant_member1827 = R.makeMethod3($temp_full551,"render-fancy-reason");
var $temp_full906 = function($self907) {
var $step905 = 0;
var $ans908 = D;
var $al909 = L[272];
try {
if(R.isActivationRecord($self907)) {
$step905 = $self907.step;
$al909 = $self907.from;
$ans908 = $self907.ans;
self907 = $self907.args[0];
anf_method_obj922 = $self907.vars[0];
anf_method_obj915 = $self907.vars[1];
cases910 = $self907.vars[2];
anf_arg923 = $self907.vars[3];
anf_arg924 = $self907.vars[4];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[272],1,$t);
}
var self907 = $self907;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step905) {
case 0: $al909 = L[259];
var anf_method_obj922 = G(ED19,"error",L[259]);
$al909 = L[260];
var anf_method_obj915 = G(ED19,"para",L[260]);
$al909 = L[261];
var cases910 = G(self907,"refinement",L[261]);
$step905 = 1;
$al909 = L[271];
R._checkAnn(L[271],Option121,cases910);
break;
case 1: var $cases_dispatch914 = {"none":2,
"some":3};
$al909 = L[264];
$step905 = $cases_dispatch914[cases910.$name] || 4;
break;
case 2: if(cases910.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[263],false,L[264]);
}
$step905 = 5;
$al909 = L[262];
$field911 = R.getColonFieldLoc(ED19,"text",L[262]);
if(R.isMethod($field911)) {
$ans908 = $field911.full_meth(ED19,("Values not different"));
} else {
if(!(R.isFunction($field911))) {
R.ffi.throwNonFunApp(L[262],$field911);
}
$ans908 = $field911.app(("Values not different"));
}
break;
case 3: if(cases910.$arity !== 1) {
if(cases910.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[266],1,cases910.$arity,L[264]);
} else {
R.ffi.throwCasesSingletonErrorC(L[266],true,L[264]);
}
}
var $fn274 = cases910.$constructor.$fieldNames;
R.derefField(cases910.dict[$fn274[0]],cases910.$mut_fields_mask[0],false);
$step905 = 5;
$al909 = L[265];
$field912 = R.getColonFieldLoc(ED19,"text",L[265]);
if(R.isMethod($field912)) {
$ans908 = $field912.full_meth(ED19,("Values not different (using custom equality):"));
} else {
if(!(R.isFunction($field912))) {
R.ffi.throwNonFunApp(L[265],$field912);
}
$ans908 = $field912.app(("Values not different (using custom equality):"));
}
break;
case 4: $step905 = 5;
$al909 = L[264];
$ans908 = R.throwNoCasesMatched(L[264],cases910);
break;
case 5: var anf_arg916 = $ans908;
$step905 = 6;
$al909 = L[260];
$field917 = R.getColonFieldLoc(anf_method_obj915,"make1",L[260]);
if(R.isMethod($field917)) {
$ans908 = $field917.full_meth(anf_method_obj915,anf_arg916);
} else {
if(!(R.isFunction($field917))) {
R.ffi.throwNonFunApp(L[260],$field917);
}
$ans908 = $field917.app(anf_arg916);
}
break;
case 6: var anf_arg923 = $ans908;
$al909 = L[267];
var anf_arg918 = G(self907,"left",L[267]);
$step905 = 7;
$al909 = L[268];
$field919 = R.getColonFieldLoc(ED19,"embed",L[268]);
if(R.isMethod($field919)) {
$ans908 = $field919.full_meth(ED19,anf_arg918);
} else {
if(!(R.isFunction($field919))) {
R.ffi.throwNonFunApp(L[268],$field919);
}
$ans908 = $field919.app(anf_arg918);
}
break;
case 7: var anf_arg924 = $ans908;
$al909 = L[269];
var anf_arg920 = G(self907,"right",L[269]);
$step905 = 8;
$al909 = L[270];
$field921 = R.getColonFieldLoc(ED19,"embed",L[270]);
if(R.isMethod($field921)) {
$ans908 = $field921.full_meth(ED19,anf_arg920);
} else {
if(!(R.isFunction($field921))) {
R.ffi.throwNonFunApp(L[270],$field921);
}
$ans908 = $field921.app(anf_arg920);
}
break;
case 8: var anf_arg925 = $ans908;
$step905 = 9;
$al909 = L[259];
$field926 = R.getColonFieldLoc(anf_method_obj922,"make3",L[259]);
if(R.isMethod($field926)) {
$ans908 = $field926.full_meth(anf_method_obj922,anf_arg923,anf_arg924,anf_arg925);
} else {
if(!(R.isFunction($field926))) {
R.ffi.throwNonFunApp(L[259],$field926);
}
$ans908 = $field926.app(anf_arg923,anf_arg924,anf_arg925);
}
break;
case 9: ++R.GAS;
return $ans908;
default: throw "No case numbered " + $step905 + " in $temp_full906";
}
}
} catch($e927) {
if(R.isCont($e927) && ($step905 !== 9)) {
$e927.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al909,$temp_full906,$step905,[self907],[anf_method_obj922,anf_method_obj915,cases910,anf_arg923,anf_arg924]);
}
if(R.isPyretException($e927)) {
$e927.pyretStack.push($al909);
}
throw $e927;
}
};
var anf_variant_member1828 = R.makeMethod0($temp_full906,"render-reason");
var $temp_full929 = function($self930,$maybe$stack$loc931,$src$available932,$maybe$ast933) {
var $step928 = 0;
var $ans934 = D;
var $al935 = L[315];
try {
if(R.isActivationRecord($self930)) {
$step928 = $self930.step;
$al935 = $self930.from;
$ans934 = $self930.ans;
self930 = $self930.args[0];
maybe$stack$loc931 = $self930.args[1];
src$available932 = $self930.args[2];
maybe$ast933 = $self930.args[3];
cases943 = $self930.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[315],4,$t);
}
var self930 = $self930;
var maybe$stack$loc931 = $maybe$stack$loc931;
var src$available932 = $src$available932;
var maybe$ast933 = $maybe$ast933;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step928) {
case 0: $al935 = L[273];
var anf_method_obj936 = G(self930,"loc",L[273]);
$step928 = 1;
$al935 = L[274];
$field937 = R.getColonFieldLoc(anf_method_obj936,"is-builtin",L[274]);
if(R.isMethod($field937)) {
$ans934 = $field937.full_meth(anf_method_obj936);
} else {
if(!(R.isFunction($field937))) {
R.ffi.throwNonFunApp(L[274],$field937);
}
$ans934 = $field937.app();
}
break;
case 1: var anf_arg938 = $ans934;
$al935 = L[274];
var anf_if1019 = R.checkWrapBoolean(anf_arg938);
$step928 = R.isPyretTrue(anf_if1019)?2:3;
break;
case 2: $step928 = 12;
$al935 = L[275];
$field939 = R.getColonFieldLoc(self930,"render-reason",L[275]);
if(R.isMethod($field939)) {
$ans934 = $field939.full_meth(self930);
} else {
if(!(R.isFunction($field939))) {
R.ffi.throwNonFunApp(L[275],$field939);
}
$ans934 = $field939.app();
}
break;
case 3: $al935 = L[276];
var anf_arg940 = G(self930,"loc",L[276]);
$step928 = 4;
$al935 = L[277];
if(!(R.isFunction(src$available932))) {
R.ffi.throwNonFunApp($al935,src$available932);
}
$ans934 = src$available932.app(anf_arg940);
break;
case 4: var anf_arg941 = $ans934;
$al935 = L[277];
var anf_if1018 = R.checkWrapBoolean(anf_arg941);
$step928 = R.isPyretTrue(anf_if1018)?5:11;
break;
case 5: $al935 = L[278];
var anf_arg942 = G(self930,"loc",L[278]);
$step928 = 6;
$al935 = L[313];
if(!(R.isFunction(maybe$ast933))) {
R.ffi.throwNonFunApp($al935,maybe$ast933);
}
$ans934 = maybe$ast933.app(anf_arg942);
break;
case 6: var cases943 = $ans934;
$step928 = 7;
$al935 = L[312];
R._checkAnn(L[312],Option121,cases943);
break;
case 7: var $cases_dispatch1016 = {"some":8,
"none":9};
$al935 = L[308];
$step928 = $cases_dispatch1016[cases943.$name] || 10;
break;
case 8: if(cases943.$arity !== 1) {
if(cases943.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[307],1,cases943.$arity,L[308]);
} else {
R.ffi.throwCasesSingletonErrorC(L[307],true,L[308]);
}
}
$step928 = 12;
$al935 = L[309];
var $temp_branch991 = function($test$ast944) {
var $step992 = 0;
var $ans993 = D;
var $al994 = L[306];
try {
if(R.isActivationRecord($test$ast944)) {
$step992 = $test$ast944.step;
$al994 = $test$ast944.from;
$ans993 = $test$ast944.ans;
test$ast944 = $test$ast944.args[0];
lhs$ast947 = $test$ast944.vars[0];
rhs$ast955 = $test$ast944.vars[1];
anf_arg951 = $test$ast944.vars[2];
ed$lhs977 = $test$ast944.vars[3];
anf_arg959 = $test$ast944.vars[4];
ed$rhs975 = $test$ast944.vars[5];
anf_method_obj985 = $test$ast944.vars[6];
anf_method_obj967 = $test$ast944.vars[7];
anf_arg968 = $test$ast944.vars[8];
anf_arg969 = $test$ast944.vars[9];
anf_arg986 = $test$ast944.vars[10];
anf_arg987 = $test$ast944.vars[11];
anf_method_obj980 = $test$ast944.vars[12];
anf_array981 = $test$ast944.vars[13];
anf_arg988 = $test$ast944.vars[14];
} else {
var test$ast944 = $test$ast944;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step992) {
case 0: $al994 = L[279];
var lhs$ast947 = G(test$ast944,"left",L[279]);
$al994 = L[280];
var anf_bracket945 = G(test$ast944,"right",L[280]);
$al994 = L[281];
var rhs$ast955 = G(anf_bracket945,"value",L[281]);
$step992 = 1;
$al994 = L[282];
$field995 = R.getColonFieldLoc(ED19,"text",L[282]);
if(R.isMethod($field995)) {
$ans993 = $field995.full_meth(ED19,("left side"));
} else {
if(!(R.isFunction($field995))) {
R.ffi.throwNonFunApp(L[282],$field995);
}
$ans993 = $field995.app(("left side"));
}
break;
case 1: var anf_arg951 = $ans993;
$al994 = L[283];
var anf_method_obj948 = G(ED19,"locs",L[283]);
$al994 = L[284];
var anf_arg949 = G(lhs$ast947,"l",L[284]);
$step992 = 2;
$al994 = L[283];
$field996 = R.getColonFieldLoc(anf_method_obj948,"make1",L[283]);
if(R.isMethod($field996)) {
$ans993 = $field996.full_meth(anf_method_obj948,anf_arg949);
} else {
if(!(R.isFunction($field996))) {
R.ffi.throwNonFunApp(L[283],$field996);
}
$ans993 = $field996.app(anf_arg949);
}
break;
case 2: var anf_arg952 = $ans993;
$step992 = 3;
$al994 = L[285];
$field997 = R.getColonFieldLoc(ED19,"highlight",L[285]);
if(R.isMethod($field997)) {
$ans993 = $field997.full_meth(ED19,anf_arg951,anf_arg952,(0));
} else {
if(!(R.isFunction($field997))) {
R.ffi.throwNonFunApp(L[285],$field997);
}
$ans993 = $field997.app(anf_arg951,anf_arg952,(0));
}
break;
case 3: var ed$lhs977 = $ans993;
$step992 = 4;
$al994 = L[286];
$field998 = R.getColonFieldLoc(ED19,"text",L[286]);
if(R.isMethod($field998)) {
$ans993 = $field998.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field998))) {
R.ffi.throwNonFunApp(L[286],$field998);
}
$ans993 = $field998.app(("predicate"));
}
break;
case 4: var anf_arg959 = $ans993;
$al994 = L[287];
var anf_method_obj956 = G(ED19,"locs",L[287]);
$al994 = L[288];
var anf_arg957 = G(rhs$ast955,"l",L[288]);
$step992 = 5;
$al994 = L[287];
$field999 = R.getColonFieldLoc(anf_method_obj956,"make1",L[287]);
if(R.isMethod($field999)) {
$ans993 = $field999.full_meth(anf_method_obj956,anf_arg957);
} else {
if(!(R.isFunction($field999))) {
R.ffi.throwNonFunApp(L[287],$field999);
}
$ans993 = $field999.app(anf_arg957);
}
break;
case 5: var anf_arg960 = $ans993;
$step992 = 6;
$al994 = L[289];
$field1000 = R.getColonFieldLoc(ED19,"highlight",L[289]);
if(R.isMethod($field1000)) {
$ans993 = $field1000.full_meth(ED19,anf_arg959,anf_arg960,(2));
} else {
if(!(R.isFunction($field1000))) {
R.ffi.throwNonFunApp(L[289],$field1000);
}
$ans993 = $field1000.app(anf_arg959,anf_arg960,(2));
}
break;
case 6: var ed$rhs975 = $ans993;
$al994 = L[290];
var anf_method_obj985 = G(ED19,"error",L[290]);
$al994 = L[291];
var anf_method_obj967 = G(ED19,"para",L[291]);
$step992 = 7;
$al994 = L[292];
$field1001 = R.getColonFieldLoc(ED19,"text",L[292]);
if(R.isMethod($field1001)) {
$ans993 = $field1001.full_meth(ED19,("The test operator "));
} else {
if(!(R.isFunction($field1001))) {
R.ffi.throwNonFunApp(L[292],$field1001);
}
$ans993 = $field1001.app(("The test operator "));
}
break;
case 7: var anf_arg968 = $ans993;
$step992 = 8;
$al994 = L[293];
$field1002 = R.getColonFieldLoc(ED19,"text",L[293]);
if(R.isMethod($field1002)) {
$ans993 = $field1002.full_meth(ED19,("satisfies"));
} else {
if(!(R.isFunction($field1002))) {
R.ffi.throwNonFunApp(L[293],$field1002);
}
$ans993 = $field1002.app(("satisfies"));
}
break;
case 8: var anf_arg964 = $ans993;
$step992 = 9;
$al994 = L[294];
$field1003 = R.getColonFieldLoc(ED19,"code",L[294]);
if(R.isMethod($field1003)) {
$ans993 = $field1003.full_meth(ED19,anf_arg964);
} else {
if(!(R.isFunction($field1003))) {
R.ffi.throwNonFunApp(L[294],$field1003);
}
$ans993 = $field1003.app(anf_arg964);
}
break;
case 9: var anf_arg969 = $ans993;
$step992 = 10;
$al994 = L[295];
$field1004 = R.getColonFieldLoc(ED19,"text",L[295]);
if(R.isMethod($field1004)) {
$ans993 = $field1004.full_meth(ED19,(" failed for the test:"));
} else {
if(!(R.isFunction($field1004))) {
R.ffi.throwNonFunApp(L[295],$field1004);
}
$ans993 = $field1004.app((" failed for the test:"));
}
break;
case 10: var anf_arg970 = $ans993;
$step992 = 11;
$al994 = L[291];
$field1005 = R.getColonFieldLoc(anf_method_obj967,"make3",L[291]);
if(R.isMethod($field1005)) {
$ans993 = $field1005.full_meth(anf_method_obj967,anf_arg968,anf_arg969,anf_arg970);
} else {
if(!(R.isFunction($field1005))) {
R.ffi.throwNonFunApp(L[291],$field1005);
}
$ans993 = $field1005.app(anf_arg968,anf_arg969,anf_arg970);
}
break;
case 11: var anf_arg986 = $ans993;
$al994 = L[296];
var anf_arg972 = G(self930,"loc",L[296]);
$step992 = 12;
$al994 = L[297];
$field1006 = R.getColonFieldLoc(ED19,"cmcode",L[297]);
if(R.isMethod($field1006)) {
$ans993 = $field1006.full_meth(ED19,anf_arg972);
} else {
if(!(R.isFunction($field1006))) {
R.ffi.throwNonFunApp(L[297],$field1006);
}
$ans993 = $field1006.app(anf_arg972);
}
break;
case 12: var anf_arg987 = $ans993;
$al994 = L[298];
var anf_method_obj980 = G(ED19,"para",L[298]);
$al994 = L[299];
var anf_array981 = R.makeArrayN((7));
$step992 = 13;
$al994 = L[300];
$field1007 = R.getColonFieldLoc(ED19,"text",L[300]);
if(R.isMethod($field1007)) {
$ans993 = $field1007.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field1007))) {
R.ffi.throwNonFunApp(L[300],$field1007);
}
$ans993 = $field1007.app(("It succeeds only if the "));
}
break;
case 13: anf_array981[0] = $ans993;
anf_array981[1] = ed$rhs975;
$step992 = 14;
$al994 = L[301];
$field1008 = R.getColonFieldLoc(ED19,"text",L[301]);
if(R.isMethod($field1008)) {
$ans993 = $field1008.full_meth(ED19,(" is satisfied when the value of the "));
} else {
if(!(R.isFunction($field1008))) {
R.ffi.throwNonFunApp(L[301],$field1008);
}
$ans993 = $field1008.app((" is satisfied when the value of the "));
}
break;
case 14: anf_array981[2] = $ans993;
anf_array981[3] = ed$lhs977;
$step992 = 15;
$al994 = L[302];
$field1009 = R.getColonFieldLoc(ED19,"text",L[302]);
if(R.isMethod($field1009)) {
$ans993 = $field1009.full_meth(ED19,(" is applied to it. The value of the "));
} else {
if(!(R.isFunction($field1009))) {
R.ffi.throwNonFunApp(L[302],$field1009);
}
$ans993 = $field1009.app((" is applied to it. The value of the "));
}
break;
case 15: anf_array981[4] = $ans993;
anf_array981[5] = ed$lhs977;
$step992 = 16;
$al994 = L[303];
$field1010 = R.getColonFieldLoc(ED19,"text",L[303]);
if(R.isMethod($field1010)) {
$ans993 = $field1010.full_meth(ED19,(" is:"));
} else {
if(!(R.isFunction($field1010))) {
R.ffi.throwNonFunApp(L[303],$field1010);
}
$ans993 = $field1010.app((" is:"));
}
break;
case 16: anf_array981[6] = $ans993;
$step992 = 17;
$al994 = L[298];
$field1011 = R.getColonFieldLoc(anf_method_obj980,"make",L[298]);
if(R.isMethod($field1011)) {
$ans993 = $field1011.full_meth(anf_method_obj980,anf_array981);
} else {
if(!(R.isFunction($field1011))) {
R.ffi.throwNonFunApp(L[298],$field1011);
}
$ans993 = $field1011.app(anf_array981);
}
break;
case 17: var anf_arg988 = $ans993;
$al994 = L[304];
var anf_arg983 = G(self930,"val",L[304]);
$step992 = 18;
$al994 = L[305];
$field1012 = R.getColonFieldLoc(ED19,"embed",L[305]);
if(R.isMethod($field1012)) {
$ans993 = $field1012.full_meth(ED19,anf_arg983);
} else {
if(!(R.isFunction($field1012))) {
R.ffi.throwNonFunApp(L[305],$field1012);
}
$ans993 = $field1012.app(anf_arg983);
}
break;
case 18: var anf_arg989 = $ans993;
$step992 = 19;
$al994 = L[290];
$field1013 = R.getColonFieldLoc(anf_method_obj985,"make4",L[290]);
if(R.isMethod($field1013)) {
$ans993 = $field1013.full_meth(anf_method_obj985,anf_arg986,anf_arg987,anf_arg988,anf_arg989);
} else {
if(!(R.isFunction($field1013))) {
R.ffi.throwNonFunApp(L[290],$field1013);
}
$ans993 = $field1013.app(anf_arg986,anf_arg987,anf_arg988,anf_arg989);
}
break;
case 19: ++R.GAS;
return $ans993;
default: throw "No case numbered " + $step992 + " in $temp_branch991";
}
}
} catch($e1014) {
if(R.isCont($e1014) && ($step992 !== 19)) {
$e1014.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al994,$temp_branch991,$step992,[test$ast944],[lhs$ast947,rhs$ast955,anf_arg951,ed$lhs977,anf_arg959,ed$rhs975,anf_method_obj985,anf_method_obj967,anf_arg968,anf_arg969,anf_arg986,anf_arg987,anf_method_obj980,anf_array981,anf_arg988]);
}
if(R.isPyretException($e1014)) {
$e1014.pyretStack.push($al994);
}
throw $e1014;
}
};
$ans934 = cases943.$app_fields($temp_branch991,[false]);
break;
case 9: if(cases943.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[311],false,L[308]);
}
$step928 = 12;
$al935 = L[310];
$field1015 = R.getColonFieldLoc(self930,"render-reason",L[310]);
if(R.isMethod($field1015)) {
$ans934 = $field1015.full_meth(self930);
} else {
if(!(R.isFunction($field1015))) {
R.ffi.throwNonFunApp(L[310],$field1015);
}
$ans934 = $field1015.app();
}
break;
case 10: $step928 = 12;
$al935 = L[308];
$ans934 = R.throwNoCasesMatched(L[308],cases943);
break;
case 11: $step928 = 12;
$al935 = L[314];
$field1017 = R.getColonFieldLoc(self930,"render-reason",L[314]);
if(R.isMethod($field1017)) {
$ans934 = $field1017.full_meth(self930);
} else {
if(!(R.isFunction($field1017))) {
R.ffi.throwNonFunApp(L[314],$field1017);
}
$ans934 = $field1017.app();
}
break;
case 12: ++R.GAS;
return $ans934;
default: throw "No case numbered " + $step928 + " in $temp_full929";
}
}
} catch($e1020) {
if(R.isCont($e1020) && ($step928 !== 12)) {
$e1020.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al935,$temp_full929,$step928,[self930,maybe$stack$loc931,src$available932,maybe$ast933],[cases943]);
}
if(R.isPyretException($e1020)) {
$e1020.pyretStack.push($al935);
}
throw $e1020;
}
};
var anf_variant_member1840 = R.makeMethod3($temp_full929,"render-fancy-reason");
var $temp_full1022 = function($self1023) {
var $step1021 = 0;
var $ans1024 = D;
var $al1025 = L[321];
try {
if(R.isActivationRecord($self1023)) {
$step1021 = $self1023.step;
$al1025 = $self1023.from;
$ans1024 = $self1023.ans;
self1023 = $self1023.args[0];
anf_method_obj1032 = $self1023.vars[0];
anf_method_obj1027 = $self1023.vars[1];
anf_arg1033 = $self1023.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[321],1,$t);
}
var self1023 = $self1023;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1021) {
case 0: $al1025 = L[316];
var anf_method_obj1032 = G(ED19,"error",L[316]);
$al1025 = L[317];
var anf_method_obj1027 = G(ED19,"para",L[317]);
$step1021 = 1;
$al1025 = L[318];
$field1026 = R.getColonFieldLoc(ED19,"text",L[318]);
if(R.isMethod($field1026)) {
$ans1024 = $field1026.full_meth(ED19,("Predicate failed for value:"));
} else {
if(!(R.isFunction($field1026))) {
R.ffi.throwNonFunApp(L[318],$field1026);
}
$ans1024 = $field1026.app(("Predicate failed for value:"));
}
break;
case 1: var anf_arg1028 = $ans1024;
$step1021 = 2;
$al1025 = L[317];
$field1029 = R.getColonFieldLoc(anf_method_obj1027,"make1",L[317]);
if(R.isMethod($field1029)) {
$ans1024 = $field1029.full_meth(anf_method_obj1027,anf_arg1028);
} else {
if(!(R.isFunction($field1029))) {
R.ffi.throwNonFunApp(L[317],$field1029);
}
$ans1024 = $field1029.app(anf_arg1028);
}
break;
case 2: var anf_arg1033 = $ans1024;
$al1025 = L[319];
var anf_arg1030 = G(self1023,"val",L[319]);
$step1021 = 3;
$al1025 = L[320];
$field1031 = R.getColonFieldLoc(ED19,"embed",L[320]);
if(R.isMethod($field1031)) {
$ans1024 = $field1031.full_meth(ED19,anf_arg1030);
} else {
if(!(R.isFunction($field1031))) {
R.ffi.throwNonFunApp(L[320],$field1031);
}
$ans1024 = $field1031.app(anf_arg1030);
}
break;
case 3: var anf_arg1034 = $ans1024;
$step1021 = 4;
$al1025 = L[316];
$field1035 = R.getColonFieldLoc(anf_method_obj1032,"make2",L[316]);
if(R.isMethod($field1035)) {
$ans1024 = $field1035.full_meth(anf_method_obj1032,anf_arg1033,anf_arg1034);
} else {
if(!(R.isFunction($field1035))) {
R.ffi.throwNonFunApp(L[316],$field1035);
}
$ans1024 = $field1035.app(anf_arg1033,anf_arg1034);
}
break;
case 4: ++R.GAS;
return $ans1024;
default: throw "No case numbered " + $step1021 + " in $temp_full1022";
}
}
} catch($e1036) {
if(R.isCont($e1036) && ($step1021 !== 4)) {
$e1036.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1025,$temp_full1022,$step1021,[self1023],[anf_method_obj1032,anf_method_obj1027,anf_arg1033]);
}
if(R.isPyretException($e1036)) {
$e1036.pyretStack.push($al1025);
}
throw $e1036;
}
};
var anf_variant_member1841 = R.makeMethod0($temp_full1022,"render-reason");
var $temp_full1038 = function($self1039,$maybe$stack$loc1040,$src$available1041,$maybe$ast1042) {
var $step1037 = 0;
var $ans1043 = D;
var $al1044 = L[364];
try {
if(R.isActivationRecord($self1039)) {
$step1037 = $self1039.step;
$al1044 = $self1039.from;
$ans1043 = $self1039.ans;
self1039 = $self1039.args[0];
maybe$stack$loc1040 = $self1039.args[1];
src$available1041 = $self1039.args[2];
maybe$ast1042 = $self1039.args[3];
cases1052 = $self1039.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[364],4,$t);
}
var self1039 = $self1039;
var maybe$stack$loc1040 = $maybe$stack$loc1040;
var src$available1041 = $src$available1041;
var maybe$ast1042 = $maybe$ast1042;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1037) {
case 0: $al1044 = L[322];
var anf_method_obj1045 = G(self1039,"loc",L[322]);
$step1037 = 1;
$al1044 = L[323];
$field1046 = R.getColonFieldLoc(anf_method_obj1045,"is-builtin",L[323]);
if(R.isMethod($field1046)) {
$ans1043 = $field1046.full_meth(anf_method_obj1045);
} else {
if(!(R.isFunction($field1046))) {
R.ffi.throwNonFunApp(L[323],$field1046);
}
$ans1043 = $field1046.app();
}
break;
case 1: var anf_arg1047 = $ans1043;
$al1044 = L[323];
var anf_if1128 = R.checkWrapBoolean(anf_arg1047);
$step1037 = R.isPyretTrue(anf_if1128)?2:3;
break;
case 2: $step1037 = 12;
$al1044 = L[324];
$field1048 = R.getColonFieldLoc(self1039,"render-reason",L[324]);
if(R.isMethod($field1048)) {
$ans1043 = $field1048.full_meth(self1039);
} else {
if(!(R.isFunction($field1048))) {
R.ffi.throwNonFunApp(L[324],$field1048);
}
$ans1043 = $field1048.app();
}
break;
case 3: $al1044 = L[325];
var anf_arg1049 = G(self1039,"loc",L[325]);
$step1037 = 4;
$al1044 = L[326];
if(!(R.isFunction(src$available1041))) {
R.ffi.throwNonFunApp($al1044,src$available1041);
}
$ans1043 = src$available1041.app(anf_arg1049);
break;
case 4: var anf_arg1050 = $ans1043;
$al1044 = L[326];
var anf_if1127 = R.checkWrapBoolean(anf_arg1050);
$step1037 = R.isPyretTrue(anf_if1127)?5:11;
break;
case 5: $al1044 = L[327];
var anf_arg1051 = G(self1039,"loc",L[327]);
$step1037 = 6;
$al1044 = L[362];
if(!(R.isFunction(maybe$ast1042))) {
R.ffi.throwNonFunApp($al1044,maybe$ast1042);
}
$ans1043 = maybe$ast1042.app(anf_arg1051);
break;
case 6: var cases1052 = $ans1043;
$step1037 = 7;
$al1044 = L[361];
R._checkAnn(L[361],Option121,cases1052);
break;
case 7: var $cases_dispatch1125 = {"some":8,
"none":9};
$al1044 = L[357];
$step1037 = $cases_dispatch1125[cases1052.$name] || 10;
break;
case 8: if(cases1052.$arity !== 1) {
if(cases1052.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[356],1,cases1052.$arity,L[357]);
} else {
R.ffi.throwCasesSingletonErrorC(L[356],true,L[357]);
}
}
$step1037 = 12;
$al1044 = L[358];
var $temp_branch1100 = function($test$ast1053) {
var $step1101 = 0;
var $ans1102 = D;
var $al1103 = L[355];
try {
if(R.isActivationRecord($test$ast1053)) {
$step1101 = $test$ast1053.step;
$al1103 = $test$ast1053.from;
$ans1102 = $test$ast1053.ans;
test$ast1053 = $test$ast1053.args[0];
lhs$ast1056 = $test$ast1053.vars[0];
rhs$ast1064 = $test$ast1053.vars[1];
anf_arg1060 = $test$ast1053.vars[2];
ed$lhs1086 = $test$ast1053.vars[3];
anf_arg1068 = $test$ast1053.vars[4];
ed$rhs1084 = $test$ast1053.vars[5];
anf_method_obj1094 = $test$ast1053.vars[6];
anf_method_obj1076 = $test$ast1053.vars[7];
anf_arg1077 = $test$ast1053.vars[8];
anf_arg1078 = $test$ast1053.vars[9];
anf_arg1095 = $test$ast1053.vars[10];
anf_arg1096 = $test$ast1053.vars[11];
anf_method_obj1089 = $test$ast1053.vars[12];
anf_array1090 = $test$ast1053.vars[13];
anf_arg1097 = $test$ast1053.vars[14];
} else {
var test$ast1053 = $test$ast1053;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1101) {
case 0: $al1103 = L[328];
var lhs$ast1056 = G(test$ast1053,"left",L[328]);
$al1103 = L[329];
var anf_bracket1054 = G(test$ast1053,"right",L[329]);
$al1103 = L[330];
var rhs$ast1064 = G(anf_bracket1054,"value",L[330]);
$step1101 = 1;
$al1103 = L[331];
$field1104 = R.getColonFieldLoc(ED19,"text",L[331]);
if(R.isMethod($field1104)) {
$ans1102 = $field1104.full_meth(ED19,("left side"));
} else {
if(!(R.isFunction($field1104))) {
R.ffi.throwNonFunApp(L[331],$field1104);
}
$ans1102 = $field1104.app(("left side"));
}
break;
case 1: var anf_arg1060 = $ans1102;
$al1103 = L[332];
var anf_method_obj1057 = G(ED19,"locs",L[332]);
$al1103 = L[333];
var anf_arg1058 = G(lhs$ast1056,"l",L[333]);
$step1101 = 2;
$al1103 = L[332];
$field1105 = R.getColonFieldLoc(anf_method_obj1057,"make1",L[332]);
if(R.isMethod($field1105)) {
$ans1102 = $field1105.full_meth(anf_method_obj1057,anf_arg1058);
} else {
if(!(R.isFunction($field1105))) {
R.ffi.throwNonFunApp(L[332],$field1105);
}
$ans1102 = $field1105.app(anf_arg1058);
}
break;
case 2: var anf_arg1061 = $ans1102;
$step1101 = 3;
$al1103 = L[334];
$field1106 = R.getColonFieldLoc(ED19,"highlight",L[334]);
if(R.isMethod($field1106)) {
$ans1102 = $field1106.full_meth(ED19,anf_arg1060,anf_arg1061,(0));
} else {
if(!(R.isFunction($field1106))) {
R.ffi.throwNonFunApp(L[334],$field1106);
}
$ans1102 = $field1106.app(anf_arg1060,anf_arg1061,(0));
}
break;
case 3: var ed$lhs1086 = $ans1102;
$step1101 = 4;
$al1103 = L[335];
$field1107 = R.getColonFieldLoc(ED19,"text",L[335]);
if(R.isMethod($field1107)) {
$ans1102 = $field1107.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field1107))) {
R.ffi.throwNonFunApp(L[335],$field1107);
}
$ans1102 = $field1107.app(("predicate"));
}
break;
case 4: var anf_arg1068 = $ans1102;
$al1103 = L[336];
var anf_method_obj1065 = G(ED19,"locs",L[336]);
$al1103 = L[337];
var anf_arg1066 = G(rhs$ast1064,"l",L[337]);
$step1101 = 5;
$al1103 = L[336];
$field1108 = R.getColonFieldLoc(anf_method_obj1065,"make1",L[336]);
if(R.isMethod($field1108)) {
$ans1102 = $field1108.full_meth(anf_method_obj1065,anf_arg1066);
} else {
if(!(R.isFunction($field1108))) {
R.ffi.throwNonFunApp(L[336],$field1108);
}
$ans1102 = $field1108.app(anf_arg1066);
}
break;
case 5: var anf_arg1069 = $ans1102;
$step1101 = 6;
$al1103 = L[338];
$field1109 = R.getColonFieldLoc(ED19,"highlight",L[338]);
if(R.isMethod($field1109)) {
$ans1102 = $field1109.full_meth(ED19,anf_arg1068,anf_arg1069,(2));
} else {
if(!(R.isFunction($field1109))) {
R.ffi.throwNonFunApp(L[338],$field1109);
}
$ans1102 = $field1109.app(anf_arg1068,anf_arg1069,(2));
}
break;
case 6: var ed$rhs1084 = $ans1102;
$al1103 = L[339];
var anf_method_obj1094 = G(ED19,"error",L[339]);
$al1103 = L[340];
var anf_method_obj1076 = G(ED19,"para",L[340]);
$step1101 = 7;
$al1103 = L[341];
$field1110 = R.getColonFieldLoc(ED19,"text",L[341]);
if(R.isMethod($field1110)) {
$ans1102 = $field1110.full_meth(ED19,("The test operator "));
} else {
if(!(R.isFunction($field1110))) {
R.ffi.throwNonFunApp(L[341],$field1110);
}
$ans1102 = $field1110.app(("The test operator "));
}
break;
case 7: var anf_arg1077 = $ans1102;
$step1101 = 8;
$al1103 = L[342];
$field1111 = R.getColonFieldLoc(ED19,"text",L[342]);
if(R.isMethod($field1111)) {
$ans1102 = $field1111.full_meth(ED19,("violates"));
} else {
if(!(R.isFunction($field1111))) {
R.ffi.throwNonFunApp(L[342],$field1111);
}
$ans1102 = $field1111.app(("violates"));
}
break;
case 8: var anf_arg1073 = $ans1102;
$step1101 = 9;
$al1103 = L[343];
$field1112 = R.getColonFieldLoc(ED19,"code",L[343]);
if(R.isMethod($field1112)) {
$ans1102 = $field1112.full_meth(ED19,anf_arg1073);
} else {
if(!(R.isFunction($field1112))) {
R.ffi.throwNonFunApp(L[343],$field1112);
}
$ans1102 = $field1112.app(anf_arg1073);
}
break;
case 9: var anf_arg1078 = $ans1102;
$step1101 = 10;
$al1103 = L[344];
$field1113 = R.getColonFieldLoc(ED19,"text",L[344]);
if(R.isMethod($field1113)) {
$ans1102 = $field1113.full_meth(ED19,(" failed for the test:"));
} else {
if(!(R.isFunction($field1113))) {
R.ffi.throwNonFunApp(L[344],$field1113);
}
$ans1102 = $field1113.app((" failed for the test:"));
}
break;
case 10: var anf_arg1079 = $ans1102;
$step1101 = 11;
$al1103 = L[340];
$field1114 = R.getColonFieldLoc(anf_method_obj1076,"make3",L[340]);
if(R.isMethod($field1114)) {
$ans1102 = $field1114.full_meth(anf_method_obj1076,anf_arg1077,anf_arg1078,anf_arg1079);
} else {
if(!(R.isFunction($field1114))) {
R.ffi.throwNonFunApp(L[340],$field1114);
}
$ans1102 = $field1114.app(anf_arg1077,anf_arg1078,anf_arg1079);
}
break;
case 11: var anf_arg1095 = $ans1102;
$al1103 = L[345];
var anf_arg1081 = G(self1039,"loc",L[345]);
$step1101 = 12;
$al1103 = L[346];
$field1115 = R.getColonFieldLoc(ED19,"cmcode",L[346]);
if(R.isMethod($field1115)) {
$ans1102 = $field1115.full_meth(ED19,anf_arg1081);
} else {
if(!(R.isFunction($field1115))) {
R.ffi.throwNonFunApp(L[346],$field1115);
}
$ans1102 = $field1115.app(anf_arg1081);
}
break;
case 12: var anf_arg1096 = $ans1102;
$al1103 = L[347];
var anf_method_obj1089 = G(ED19,"para",L[347]);
$al1103 = L[348];
var anf_array1090 = R.makeArrayN((7));
$step1101 = 13;
$al1103 = L[349];
$field1116 = R.getColonFieldLoc(ED19,"text",L[349]);
if(R.isMethod($field1116)) {
$ans1102 = $field1116.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field1116))) {
R.ffi.throwNonFunApp(L[349],$field1116);
}
$ans1102 = $field1116.app(("It succeeds only if the "));
}
break;
case 13: anf_array1090[0] = $ans1102;
anf_array1090[1] = ed$rhs1084;
$step1101 = 14;
$al1103 = L[350];
$field1117 = R.getColonFieldLoc(ED19,"text",L[350]);
if(R.isMethod($field1117)) {
$ans1102 = $field1117.full_meth(ED19,(" is not satisfied when the value of the "));
} else {
if(!(R.isFunction($field1117))) {
R.ffi.throwNonFunApp(L[350],$field1117);
}
$ans1102 = $field1117.app((" is not satisfied when the value of the "));
}
break;
case 14: anf_array1090[2] = $ans1102;
anf_array1090[3] = ed$lhs1086;
$step1101 = 15;
$al1103 = L[351];
$field1118 = R.getColonFieldLoc(ED19,"text",L[351]);
if(R.isMethod($field1118)) {
$ans1102 = $field1118.full_meth(ED19,(" is applied to it. The value of the "));
} else {
if(!(R.isFunction($field1118))) {
R.ffi.throwNonFunApp(L[351],$field1118);
}
$ans1102 = $field1118.app((" is applied to it. The value of the "));
}
break;
case 15: anf_array1090[4] = $ans1102;
anf_array1090[5] = ed$lhs1086;
$step1101 = 16;
$al1103 = L[352];
$field1119 = R.getColonFieldLoc(ED19,"text",L[352]);
if(R.isMethod($field1119)) {
$ans1102 = $field1119.full_meth(ED19,(" was:"));
} else {
if(!(R.isFunction($field1119))) {
R.ffi.throwNonFunApp(L[352],$field1119);
}
$ans1102 = $field1119.app((" was:"));
}
break;
case 16: anf_array1090[6] = $ans1102;
$step1101 = 17;
$al1103 = L[347];
$field1120 = R.getColonFieldLoc(anf_method_obj1089,"make",L[347]);
if(R.isMethod($field1120)) {
$ans1102 = $field1120.full_meth(anf_method_obj1089,anf_array1090);
} else {
if(!(R.isFunction($field1120))) {
R.ffi.throwNonFunApp(L[347],$field1120);
}
$ans1102 = $field1120.app(anf_array1090);
}
break;
case 17: var anf_arg1097 = $ans1102;
$al1103 = L[353];
var anf_arg1092 = G(self1039,"val",L[353]);
$step1101 = 18;
$al1103 = L[354];
$field1121 = R.getColonFieldLoc(ED19,"embed",L[354]);
if(R.isMethod($field1121)) {
$ans1102 = $field1121.full_meth(ED19,anf_arg1092);
} else {
if(!(R.isFunction($field1121))) {
R.ffi.throwNonFunApp(L[354],$field1121);
}
$ans1102 = $field1121.app(anf_arg1092);
}
break;
case 18: var anf_arg1098 = $ans1102;
$step1101 = 19;
$al1103 = L[339];
$field1122 = R.getColonFieldLoc(anf_method_obj1094,"make4",L[339]);
if(R.isMethod($field1122)) {
$ans1102 = $field1122.full_meth(anf_method_obj1094,anf_arg1095,anf_arg1096,anf_arg1097,anf_arg1098);
} else {
if(!(R.isFunction($field1122))) {
R.ffi.throwNonFunApp(L[339],$field1122);
}
$ans1102 = $field1122.app(anf_arg1095,anf_arg1096,anf_arg1097,anf_arg1098);
}
break;
case 19: ++R.GAS;
return $ans1102;
default: throw "No case numbered " + $step1101 + " in $temp_branch1100";
}
}
} catch($e1123) {
if(R.isCont($e1123) && ($step1101 !== 19)) {
$e1123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1103,$temp_branch1100,$step1101,[test$ast1053],[lhs$ast1056,rhs$ast1064,anf_arg1060,ed$lhs1086,anf_arg1068,ed$rhs1084,anf_method_obj1094,anf_method_obj1076,anf_arg1077,anf_arg1078,anf_arg1095,anf_arg1096,anf_method_obj1089,anf_array1090,anf_arg1097]);
}
if(R.isPyretException($e1123)) {
$e1123.pyretStack.push($al1103);
}
throw $e1123;
}
};
$ans1043 = cases1052.$app_fields($temp_branch1100,[false]);
break;
case 9: if(cases1052.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[360],false,L[357]);
}
$step1037 = 12;
$al1044 = L[359];
$field1124 = R.getColonFieldLoc(self1039,"render-reason",L[359]);
if(R.isMethod($field1124)) {
$ans1043 = $field1124.full_meth(self1039);
} else {
if(!(R.isFunction($field1124))) {
R.ffi.throwNonFunApp(L[359],$field1124);
}
$ans1043 = $field1124.app();
}
break;
case 10: $step1037 = 12;
$al1044 = L[357];
$ans1043 = R.throwNoCasesMatched(L[357],cases1052);
break;
case 11: $step1037 = 12;
$al1044 = L[363];
$field1126 = R.getColonFieldLoc(self1039,"render-reason",L[363]);
if(R.isMethod($field1126)) {
$ans1043 = $field1126.full_meth(self1039);
} else {
if(!(R.isFunction($field1126))) {
R.ffi.throwNonFunApp(L[363],$field1126);
}
$ans1043 = $field1126.app();
}
break;
case 12: ++R.GAS;
return $ans1043;
default: throw "No case numbered " + $step1037 + " in $temp_full1038";
}
}
} catch($e1129) {
if(R.isCont($e1129) && ($step1037 !== 12)) {
$e1129.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1044,$temp_full1038,$step1037,[self1039,maybe$stack$loc1040,src$available1041,maybe$ast1042],[cases1052]);
}
if(R.isPyretException($e1129)) {
$e1129.pyretStack.push($al1044);
}
throw $e1129;
}
};
var anf_variant_member1852 = R.makeMethod3($temp_full1038,"render-fancy-reason");
var $temp_full1131 = function($self1132) {
var $step1130 = 0;
var $ans1133 = D;
var $al1134 = L[370];
try {
if(R.isActivationRecord($self1132)) {
$step1130 = $self1132.step;
$al1134 = $self1132.from;
$ans1133 = $self1132.ans;
self1132 = $self1132.args[0];
anf_method_obj1141 = $self1132.vars[0];
anf_method_obj1136 = $self1132.vars[1];
anf_arg1142 = $self1132.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[370],1,$t);
}
var self1132 = $self1132;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1130) {
case 0: $al1134 = L[365];
var anf_method_obj1141 = G(ED19,"error",L[365]);
$al1134 = L[366];
var anf_method_obj1136 = G(ED19,"para",L[366]);
$step1130 = 1;
$al1134 = L[367];
$field1135 = R.getColonFieldLoc(ED19,"text",L[367]);
if(R.isMethod($field1135)) {
$ans1133 = $field1135.full_meth(ED19,("Predicate succeeded for value (it should have failed):"));
} else {
if(!(R.isFunction($field1135))) {
R.ffi.throwNonFunApp(L[367],$field1135);
}
$ans1133 = $field1135.app(("Predicate succeeded for value (it should have failed):"));
}
break;
case 1: var anf_arg1137 = $ans1133;
$step1130 = 2;
$al1134 = L[366];
$field1138 = R.getColonFieldLoc(anf_method_obj1136,"make1",L[366]);
if(R.isMethod($field1138)) {
$ans1133 = $field1138.full_meth(anf_method_obj1136,anf_arg1137);
} else {
if(!(R.isFunction($field1138))) {
R.ffi.throwNonFunApp(L[366],$field1138);
}
$ans1133 = $field1138.app(anf_arg1137);
}
break;
case 2: var anf_arg1142 = $ans1133;
$al1134 = L[368];
var anf_arg1139 = G(self1132,"val",L[368]);
$step1130 = 3;
$al1134 = L[369];
$field1140 = R.getColonFieldLoc(ED19,"embed",L[369]);
if(R.isMethod($field1140)) {
$ans1133 = $field1140.full_meth(ED19,anf_arg1139);
} else {
if(!(R.isFunction($field1140))) {
R.ffi.throwNonFunApp(L[369],$field1140);
}
$ans1133 = $field1140.app(anf_arg1139);
}
break;
case 3: var anf_arg1143 = $ans1133;
$step1130 = 4;
$al1134 = L[365];
$field1144 = R.getColonFieldLoc(anf_method_obj1141,"make2",L[365]);
if(R.isMethod($field1144)) {
$ans1133 = $field1144.full_meth(anf_method_obj1141,anf_arg1142,anf_arg1143);
} else {
if(!(R.isFunction($field1144))) {
R.ffi.throwNonFunApp(L[365],$field1144);
}
$ans1133 = $field1144.app(anf_arg1142,anf_arg1143);
}
break;
case 4: ++R.GAS;
return $ans1133;
default: throw "No case numbered " + $step1130 + " in $temp_full1131";
}
}
} catch($e1145) {
if(R.isCont($e1145) && ($step1130 !== 4)) {
$e1145.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1134,$temp_full1131,$step1130,[self1132],[anf_method_obj1141,anf_method_obj1136,anf_arg1142]);
}
if(R.isPyretException($e1145)) {
$e1145.pyretStack.push($al1134);
}
throw $e1145;
}
};
var anf_variant_member1853 = R.makeMethod0($temp_full1131,"render-reason");
var $temp_full1147 = function($self1148,$maybe$stack$loc1149,$src$available1150,$maybe$ast1151) {
var $step1146 = 0;
var $ans1152 = D;
var $al1153 = L[372];
try {
if(R.isActivationRecord($self1148)) {
$step1146 = $self1148.step;
$al1153 = $self1148.from;
$ans1152 = $self1148.ans;
self1148 = $self1148.args[0];
maybe$stack$loc1149 = $self1148.args[1];
src$available1150 = $self1148.args[2];
maybe$ast1151 = $self1148.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[372],4,$t);
}
var self1148 = $self1148;
var maybe$stack$loc1149 = $maybe$stack$loc1149;
var src$available1150 = $src$available1150;
var maybe$ast1151 = $maybe$ast1151;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1146) {
case 0: $step1146 = 1;
$al1153 = L[371];
$field1154 = R.getColonFieldLoc(self1148,"render-reason",L[371]);
if(R.isMethod($field1154)) {
$ans1152 = $field1154.full_meth(self1148);
} else {
if(!(R.isFunction($field1154))) {
R.ffi.throwNonFunApp(L[371],$field1154);
}
$ans1152 = $field1154.app();
}
break;
case 1: ++R.GAS;
return $ans1152;
default: throw "No case numbered " + $step1146 + " in $temp_full1147";
}
}
} catch($e1155) {
if(R.isCont($e1155) && ($step1146 !== 1)) {
$e1155.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1153,$temp_full1147,$step1146,[self1148,maybe$stack$loc1149,src$available1150,maybe$ast1151],[]);
}
if(R.isPyretException($e1155)) {
$e1155.pyretStack.push($al1153);
}
throw $e1155;
}
};
var anf_variant_member1864 = R.makeMethod3($temp_full1147,"render-fancy-reason");
var $temp_full1157 = function($self1158) {
var $step1156 = 0;
var $ans1159 = D;
var $al1160 = L[382];
try {
if(R.isActivationRecord($self1158)) {
$step1156 = $self1158.step;
$al1160 = $self1158.from;
$ans1159 = $self1158.ans;
self1158 = $self1158.args[0];
anf_method_obj1173 = $self1158.vars[0];
anf_method_obj1162 = $self1158.vars[1];
anf_arg1174 = $self1158.vars[2];
anf_arg1175 = $self1158.vars[3];
anf_method_obj1168 = $self1158.vars[4];
anf_arg1176 = $self1158.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[382],1,$t);
}
var self1158 = $self1158;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1156) {
case 0: $al1160 = L[373];
var anf_method_obj1173 = G(ED19,"error",L[373]);
$al1160 = L[374];
var anf_method_obj1162 = G(ED19,"para",L[374]);
$step1156 = 1;
$al1160 = L[375];
$field1161 = R.getColonFieldLoc(ED19,"text",L[375]);
if(R.isMethod($field1161)) {
$ans1159 = $field1161.full_meth(ED19,("Got unexpected exception "));
} else {
if(!(R.isFunction($field1161))) {
R.ffi.throwNonFunApp(L[375],$field1161);
}
$ans1159 = $field1161.app(("Got unexpected exception "));
}
break;
case 1: var anf_arg1163 = $ans1159;
$step1156 = 2;
$al1160 = L[374];
$field1164 = R.getColonFieldLoc(anf_method_obj1162,"make1",L[374]);
if(R.isMethod($field1164)) {
$ans1159 = $field1164.full_meth(anf_method_obj1162,anf_arg1163);
} else {
if(!(R.isFunction($field1164))) {
R.ffi.throwNonFunApp(L[374],$field1164);
}
$ans1159 = $field1164.app(anf_arg1163);
}
break;
case 2: var anf_arg1174 = $ans1159;
$al1160 = L[376];
var anf_arg1165 = G(self1158,"actual-exn",L[376]);
$step1156 = 3;
$al1160 = L[377];
$field1166 = R.getColonFieldLoc(ED19,"embed",L[377]);
if(R.isMethod($field1166)) {
$ans1159 = $field1166.full_meth(ED19,anf_arg1165);
} else {
if(!(R.isFunction($field1166))) {
R.ffi.throwNonFunApp(L[377],$field1166);
}
$ans1159 = $field1166.app(anf_arg1165);
}
break;
case 3: var anf_arg1175 = $ans1159;
$al1160 = L[378];
var anf_method_obj1168 = G(ED19,"para",L[378]);
$step1156 = 4;
$al1160 = L[379];
$field1167 = R.getColonFieldLoc(ED19,"text",L[379]);
if(R.isMethod($field1167)) {
$ans1159 = $field1167.full_meth(ED19,("when expecting "));
} else {
if(!(R.isFunction($field1167))) {
R.ffi.throwNonFunApp(L[379],$field1167);
}
$ans1159 = $field1167.app(("when expecting "));
}
break;
case 4: var anf_arg1169 = $ans1159;
$step1156 = 5;
$al1160 = L[378];
$field1170 = R.getColonFieldLoc(anf_method_obj1168,"make1",L[378]);
if(R.isMethod($field1170)) {
$ans1159 = $field1170.full_meth(anf_method_obj1168,anf_arg1169);
} else {
if(!(R.isFunction($field1170))) {
R.ffi.throwNonFunApp(L[378],$field1170);
}
$ans1159 = $field1170.app(anf_arg1169);
}
break;
case 5: var anf_arg1176 = $ans1159;
$al1160 = L[380];
var anf_arg1171 = G(self1158,"exn-expected",L[380]);
$step1156 = 6;
$al1160 = L[381];
$field1172 = R.getColonFieldLoc(ED19,"embed",L[381]);
if(R.isMethod($field1172)) {
$ans1159 = $field1172.full_meth(ED19,anf_arg1171);
} else {
if(!(R.isFunction($field1172))) {
R.ffi.throwNonFunApp(L[381],$field1172);
}
$ans1159 = $field1172.app(anf_arg1171);
}
break;
case 6: var anf_arg1177 = $ans1159;
$step1156 = 7;
$al1160 = L[373];
$field1178 = R.getColonFieldLoc(anf_method_obj1173,"make4",L[373]);
if(R.isMethod($field1178)) {
$ans1159 = $field1178.full_meth(anf_method_obj1173,anf_arg1174,anf_arg1175,anf_arg1176,anf_arg1177);
} else {
if(!(R.isFunction($field1178))) {
R.ffi.throwNonFunApp(L[373],$field1178);
}
$ans1159 = $field1178.app(anf_arg1174,anf_arg1175,anf_arg1176,anf_arg1177);
}
break;
case 7: ++R.GAS;
return $ans1159;
default: throw "No case numbered " + $step1156 + " in $temp_full1157";
}
}
} catch($e1179) {
if(R.isCont($e1179) && ($step1156 !== 7)) {
$e1179.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1160,$temp_full1157,$step1156,[self1158],[anf_method_obj1173,anf_method_obj1162,anf_arg1174,anf_arg1175,anf_method_obj1168,anf_arg1176]);
}
if(R.isPyretException($e1179)) {
$e1179.pyretStack.push($al1160);
}
throw $e1179;
}
};
var anf_variant_member1865 = R.makeMethod0($temp_full1157,"render-reason");
var $temp_full1181 = function($self1182) {
var $step1180 = 0;
var $ans1183 = D;
var $al1184 = L[392];
try {
if(R.isActivationRecord($self1182)) {
$step1180 = $self1182.step;
$al1184 = $self1182.from;
$ans1183 = $self1182.ans;
self1182 = $self1182.args[0];
anf_arg1192 = $self1182.vars[0];
anf_arg1193 = $self1182.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[392],1,$t);
}
var self1182 = $self1182;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1180) {
case 0: $al1184 = L[383];
var anf_arg1185 = G(self1182,"loc",L[383]);
$step1180 = 1;
$al1184 = L[384];
$field1186 = R.getColonFieldLoc(VS26,"vs-value",L[384]);
if(R.isMethod($field1186)) {
$ans1183 = $field1186.full_meth(VS26,anf_arg1185);
} else {
if(!(R.isFunction($field1186))) {
R.ffi.throwNonFunApp(L[384],$field1186);
}
$ans1183 = $field1186.app(anf_arg1185);
}
break;
case 1: var anf_arg1192 = $ans1183;
$al1184 = L[385];
var anf_arg1187 = G(self1182,"exn-expected",L[385]);
$step1180 = 2;
$al1184 = L[386];
$field1188 = R.getColonFieldLoc(VS26,"vs-value",L[386]);
if(R.isMethod($field1188)) {
$ans1183 = $field1188.full_meth(VS26,anf_arg1187);
} else {
if(!(R.isFunction($field1188))) {
R.ffi.throwNonFunApp(L[386],$field1188);
}
$ans1183 = $field1188.app(anf_arg1187);
}
break;
case 2: var anf_arg1193 = $ans1183;
$al1184 = L[387];
var anf_arg1189 = G(self1182,"actual-exn",L[387]);
$step1180 = 3;
$al1184 = L[391];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1184,exn$unwrap7);
}
$ans1183 = exn$unwrap7.app(anf_arg1189);
break;
case 3: var anf_arg1190 = $ans1183;
$step1180 = 4;
$al1184 = L[388];
$field1191 = R.getColonFieldLoc(VS26,"vs-value",L[388]);
if(R.isMethod($field1191)) {
$ans1183 = $field1191.full_meth(VS26,anf_arg1190);
} else {
if(!(R.isFunction($field1191))) {
R.ffi.throwNonFunApp(L[388],$field1191);
}
$ans1183 = $field1191.app(anf_arg1190);
}
break;
case 4: var anf_arg1194 = $ans1183;
$step1180 = 5;
$al1184 = L[389];
$field1195 = R.getColonFieldLoc(list220,"make3",L[389]);
if(R.isMethod($field1195)) {
$ans1183 = $field1195.full_meth(list220,anf_arg1192,anf_arg1193,anf_arg1194);
} else {
if(!(R.isFunction($field1195))) {
R.ffi.throwNonFunApp(L[389],$field1195);
}
$ans1183 = $field1195.app(anf_arg1192,anf_arg1193,anf_arg1194);
}
break;
case 5: var anf_arg1196 = $ans1183;
$step1180 = 6;
$al1184 = L[390];
$field1197 = R.getColonFieldLoc(VS26,"vs-constr",L[390]);
if(R.isMethod($field1197)) {
$ans1183 = $field1197.full_meth(VS26,("failure-wrong-exn"),anf_arg1196);
} else {
if(!(R.isFunction($field1197))) {
R.ffi.throwNonFunApp(L[390],$field1197);
}
$ans1183 = $field1197.app(("failure-wrong-exn"),anf_arg1196);
}
break;
case 6: ++R.GAS;
return $ans1183;
default: throw "No case numbered " + $step1180 + " in $temp_full1181";
}
}
} catch($e1198) {
if(R.isCont($e1198) && ($step1180 !== 6)) {
$e1198.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1184,$temp_full1181,$step1180,[self1182],[anf_arg1192,anf_arg1193]);
}
if(R.isPyretException($e1198)) {
$e1198.pyretStack.push($al1184);
}
throw $e1198;
}
};
var anf_variant_member1866 = R.makeMethod0($temp_full1181,"_output");
var $temp_full1200 = function($self1201,$maybe$stack$loc1202,$src$available1203,$maybe$ast1204) {
var $step1199 = 0;
var $ans1205 = D;
var $al1206 = L[394];
try {
if(R.isActivationRecord($self1201)) {
$step1199 = $self1201.step;
$al1206 = $self1201.from;
$ans1205 = $self1201.ans;
self1201 = $self1201.args[0];
maybe$stack$loc1202 = $self1201.args[1];
src$available1203 = $self1201.args[2];
maybe$ast1204 = $self1201.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[394],4,$t);
}
var self1201 = $self1201;
var maybe$stack$loc1202 = $maybe$stack$loc1202;
var src$available1203 = $src$available1203;
var maybe$ast1204 = $maybe$ast1204;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1199) {
case 0: $step1199 = 1;
$al1206 = L[393];
$field1207 = R.getColonFieldLoc(self1201,"render-reason",L[393]);
if(R.isMethod($field1207)) {
$ans1205 = $field1207.full_meth(self1201);
} else {
if(!(R.isFunction($field1207))) {
R.ffi.throwNonFunApp(L[393],$field1207);
}
$ans1205 = $field1207.app();
}
break;
case 1: ++R.GAS;
return $ans1205;
default: throw "No case numbered " + $step1199 + " in $temp_full1200";
}
}
} catch($e1208) {
if(R.isCont($e1208) && ($step1199 !== 1)) {
$e1208.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1206,$temp_full1200,$step1199,[self1201,maybe$stack$loc1202,src$available1203,maybe$ast1204],[]);
}
if(R.isPyretException($e1208)) {
$e1208.pyretStack.push($al1206);
}
throw $e1208;
}
};
var anf_variant_member1877 = R.makeMethod3($temp_full1200,"render-fancy-reason");
var $temp_full1210 = function($self1211) {
var $step1209 = 0;
var $ans1212 = D;
var $al1213 = L[404];
try {
if(R.isActivationRecord($self1211)) {
$step1209 = $self1211.step;
$al1213 = $self1211.from;
$ans1212 = $self1211.ans;
self1211 = $self1211.args[0];
anf_method_obj1226 = $self1211.vars[0];
anf_method_obj1215 = $self1211.vars[1];
anf_arg1227 = $self1211.vars[2];
anf_arg1228 = $self1211.vars[3];
anf_method_obj1221 = $self1211.vars[4];
anf_arg1229 = $self1211.vars[5];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[404],1,$t);
}
var self1211 = $self1211;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1209) {
case 0: $al1213 = L[395];
var anf_method_obj1226 = G(ED19,"error",L[395]);
$al1213 = L[396];
var anf_method_obj1215 = G(ED19,"para",L[396]);
$step1209 = 1;
$al1213 = L[397];
$field1214 = R.getColonFieldLoc(ED19,"text",L[397]);
if(R.isMethod($field1214)) {
$ans1212 = $field1214.full_meth(ED19,("Got exception "));
} else {
if(!(R.isFunction($field1214))) {
R.ffi.throwNonFunApp(L[397],$field1214);
}
$ans1212 = $field1214.app(("Got exception "));
}
break;
case 1: var anf_arg1216 = $ans1212;
$step1209 = 2;
$al1213 = L[396];
$field1217 = R.getColonFieldLoc(anf_method_obj1215,"make1",L[396]);
if(R.isMethod($field1217)) {
$ans1212 = $field1217.full_meth(anf_method_obj1215,anf_arg1216);
} else {
if(!(R.isFunction($field1217))) {
R.ffi.throwNonFunApp(L[396],$field1217);
}
$ans1212 = $field1217.app(anf_arg1216);
}
break;
case 2: var anf_arg1227 = $ans1212;
$al1213 = L[398];
var anf_arg1218 = G(self1211,"actual-exn",L[398]);
$step1209 = 3;
$al1213 = L[399];
$field1219 = R.getColonFieldLoc(ED19,"embed",L[399]);
if(R.isMethod($field1219)) {
$ans1212 = $field1219.full_meth(ED19,anf_arg1218);
} else {
if(!(R.isFunction($field1219))) {
R.ffi.throwNonFunApp(L[399],$field1219);
}
$ans1212 = $field1219.app(anf_arg1218);
}
break;
case 3: var anf_arg1228 = $ans1212;
$al1213 = L[400];
var anf_method_obj1221 = G(ED19,"para",L[400]);
$step1209 = 4;
$al1213 = L[401];
$field1220 = R.getColonFieldLoc(ED19,"text",L[401]);
if(R.isMethod($field1220)) {
$ans1212 = $field1220.full_meth(ED19,("and expected it not to contain "));
} else {
if(!(R.isFunction($field1220))) {
R.ffi.throwNonFunApp(L[401],$field1220);
}
$ans1212 = $field1220.app(("and expected it not to contain "));
}
break;
case 4: var anf_arg1222 = $ans1212;
$step1209 = 5;
$al1213 = L[400];
$field1223 = R.getColonFieldLoc(anf_method_obj1221,"make1",L[400]);
if(R.isMethod($field1223)) {
$ans1212 = $field1223.full_meth(anf_method_obj1221,anf_arg1222);
} else {
if(!(R.isFunction($field1223))) {
R.ffi.throwNonFunApp(L[400],$field1223);
}
$ans1212 = $field1223.app(anf_arg1222);
}
break;
case 5: var anf_arg1229 = $ans1212;
$al1213 = L[402];
var anf_arg1224 = G(self1211,"exn-not-expected",L[402]);
$step1209 = 6;
$al1213 = L[403];
$field1225 = R.getColonFieldLoc(ED19,"embed",L[403]);
if(R.isMethod($field1225)) {
$ans1212 = $field1225.full_meth(ED19,anf_arg1224);
} else {
if(!(R.isFunction($field1225))) {
R.ffi.throwNonFunApp(L[403],$field1225);
}
$ans1212 = $field1225.app(anf_arg1224);
}
break;
case 6: var anf_arg1230 = $ans1212;
$step1209 = 7;
$al1213 = L[395];
$field1231 = R.getColonFieldLoc(anf_method_obj1226,"make4",L[395]);
if(R.isMethod($field1231)) {
$ans1212 = $field1231.full_meth(anf_method_obj1226,anf_arg1227,anf_arg1228,anf_arg1229,anf_arg1230);
} else {
if(!(R.isFunction($field1231))) {
R.ffi.throwNonFunApp(L[395],$field1231);
}
$ans1212 = $field1231.app(anf_arg1227,anf_arg1228,anf_arg1229,anf_arg1230);
}
break;
case 7: ++R.GAS;
return $ans1212;
default: throw "No case numbered " + $step1209 + " in $temp_full1210";
}
}
} catch($e1232) {
if(R.isCont($e1232) && ($step1209 !== 7)) {
$e1232.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1213,$temp_full1210,$step1209,[self1211],[anf_method_obj1226,anf_method_obj1215,anf_arg1227,anf_arg1228,anf_method_obj1221,anf_arg1229]);
}
if(R.isPyretException($e1232)) {
$e1232.pyretStack.push($al1213);
}
throw $e1232;
}
};
var anf_variant_member1878 = R.makeMethod0($temp_full1210,"render-reason");
var $temp_full1234 = function($self1235) {
var $step1233 = 0;
var $ans1236 = D;
var $al1237 = L[414];
try {
if(R.isActivationRecord($self1235)) {
$step1233 = $self1235.step;
$al1237 = $self1235.from;
$ans1236 = $self1235.ans;
self1235 = $self1235.args[0];
anf_arg1245 = $self1235.vars[0];
anf_arg1246 = $self1235.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[414],1,$t);
}
var self1235 = $self1235;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1233) {
case 0: $al1237 = L[405];
var anf_arg1238 = G(self1235,"loc",L[405]);
$step1233 = 1;
$al1237 = L[406];
$field1239 = R.getColonFieldLoc(VS26,"vs-value",L[406]);
if(R.isMethod($field1239)) {
$ans1236 = $field1239.full_meth(VS26,anf_arg1238);
} else {
if(!(R.isFunction($field1239))) {
R.ffi.throwNonFunApp(L[406],$field1239);
}
$ans1236 = $field1239.app(anf_arg1238);
}
break;
case 1: var anf_arg1245 = $ans1236;
$al1237 = L[407];
var anf_arg1240 = G(self1235,"exn-not-expected",L[407]);
$step1233 = 2;
$al1237 = L[408];
$field1241 = R.getColonFieldLoc(VS26,"vs-value",L[408]);
if(R.isMethod($field1241)) {
$ans1236 = $field1241.full_meth(VS26,anf_arg1240);
} else {
if(!(R.isFunction($field1241))) {
R.ffi.throwNonFunApp(L[408],$field1241);
}
$ans1236 = $field1241.app(anf_arg1240);
}
break;
case 2: var anf_arg1246 = $ans1236;
$al1237 = L[409];
var anf_arg1242 = G(self1235,"actual-exn",L[409]);
$step1233 = 3;
$al1237 = L[413];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1237,exn$unwrap7);
}
$ans1236 = exn$unwrap7.app(anf_arg1242);
break;
case 3: var anf_arg1243 = $ans1236;
$step1233 = 4;
$al1237 = L[410];
$field1244 = R.getColonFieldLoc(VS26,"vs-value",L[410]);
if(R.isMethod($field1244)) {
$ans1236 = $field1244.full_meth(VS26,anf_arg1243);
} else {
if(!(R.isFunction($field1244))) {
R.ffi.throwNonFunApp(L[410],$field1244);
}
$ans1236 = $field1244.app(anf_arg1243);
}
break;
case 4: var anf_arg1247 = $ans1236;
$step1233 = 5;
$al1237 = L[411];
$field1248 = R.getColonFieldLoc(list220,"make3",L[411]);
if(R.isMethod($field1248)) {
$ans1236 = $field1248.full_meth(list220,anf_arg1245,anf_arg1246,anf_arg1247);
} else {
if(!(R.isFunction($field1248))) {
R.ffi.throwNonFunApp(L[411],$field1248);
}
$ans1236 = $field1248.app(anf_arg1245,anf_arg1246,anf_arg1247);
}
break;
case 5: var anf_arg1249 = $ans1236;
$step1233 = 6;
$al1237 = L[412];
$field1250 = R.getColonFieldLoc(VS26,"vs-constr",L[412]);
if(R.isMethod($field1250)) {
$ans1236 = $field1250.full_meth(VS26,("failure-right-exn"),anf_arg1249);
} else {
if(!(R.isFunction($field1250))) {
R.ffi.throwNonFunApp(L[412],$field1250);
}
$ans1236 = $field1250.app(("failure-right-exn"),anf_arg1249);
}
break;
case 6: ++R.GAS;
return $ans1236;
default: throw "No case numbered " + $step1233 + " in $temp_full1234";
}
}
} catch($e1251) {
if(R.isCont($e1251) && ($step1233 !== 6)) {
$e1251.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1237,$temp_full1234,$step1233,[self1235],[anf_arg1245,anf_arg1246]);
}
if(R.isPyretException($e1251)) {
$e1251.pyretStack.push($al1237);
}
throw $e1251;
}
};
var anf_variant_member1879 = R.makeMethod0($temp_full1234,"_output");
var $temp_full1253 = function($self1254,$maybe$stack$loc1255,$src$available1256,$maybe$ast1257) {
var $step1252 = 0;
var $ans1258 = D;
var $al1259 = L[481];
try {
if(R.isActivationRecord($self1254)) {
$step1252 = $self1254.step;
$al1259 = $self1254.from;
$ans1258 = $self1254.ans;
self1254 = $self1254.args[0];
maybe$stack$loc1255 = $self1254.args[1];
src$available1256 = $self1254.args[2];
maybe$ast1257 = $self1254.args[3];
cases1267 = $self1254.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[481],4,$t);
}
var self1254 = $self1254;
var maybe$stack$loc1255 = $maybe$stack$loc1255;
var src$available1256 = $src$available1256;
var maybe$ast1257 = $maybe$ast1257;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1252) {
case 0: $al1259 = L[415];
var anf_method_obj1260 = G(self1254,"loc",L[415]);
$step1252 = 1;
$al1259 = L[416];
$field1261 = R.getColonFieldLoc(anf_method_obj1260,"is-builtin",L[416]);
if(R.isMethod($field1261)) {
$ans1258 = $field1261.full_meth(anf_method_obj1260);
} else {
if(!(R.isFunction($field1261))) {
R.ffi.throwNonFunApp(L[416],$field1261);
}
$ans1258 = $field1261.app();
}
break;
case 1: var anf_arg1262 = $ans1258;
$al1259 = L[416];
var anf_if1408 = R.checkWrapBoolean(anf_arg1262);
$step1252 = R.isPyretTrue(anf_if1408)?2:3;
break;
case 2: $step1252 = 12;
$al1259 = L[417];
$field1263 = R.getColonFieldLoc(self1254,"render-reason",L[417]);
if(R.isMethod($field1263)) {
$ans1258 = $field1263.full_meth(self1254);
} else {
if(!(R.isFunction($field1263))) {
R.ffi.throwNonFunApp(L[417],$field1263);
}
$ans1258 = $field1263.app();
}
break;
case 3: $al1259 = L[418];
var anf_arg1264 = G(self1254,"loc",L[418]);
$step1252 = 4;
$al1259 = L[419];
if(!(R.isFunction(src$available1256))) {
R.ffi.throwNonFunApp($al1259,src$available1256);
}
$ans1258 = src$available1256.app(anf_arg1264);
break;
case 4: var anf_arg1265 = $ans1258;
$al1259 = L[419];
var anf_if1407 = R.checkWrapBoolean(anf_arg1265);
$step1252 = R.isPyretTrue(anf_if1407)?5:11;
break;
case 5: $al1259 = L[420];
var anf_arg1266 = G(self1254,"loc",L[420]);
$step1252 = 6;
$al1259 = L[479];
if(!(R.isFunction(maybe$ast1257))) {
R.ffi.throwNonFunApp($al1259,maybe$ast1257);
}
$ans1258 = maybe$ast1257.app(anf_arg1266);
break;
case 6: var cases1267 = $ans1258;
$step1252 = 7;
$al1259 = L[478];
R._checkAnn(L[478],Option121,cases1267);
break;
case 7: var $cases_dispatch1405 = {"some":8,
"none":9};
$al1259 = L[474];
$step1252 = $cases_dispatch1405[cases1267.$name] || 10;
break;
case 8: if(cases1267.$arity !== 1) {
if(cases1267.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[473],1,cases1267.$arity,L[474]);
} else {
R.ffi.throwCasesSingletonErrorC(L[473],true,L[474]);
}
}
$step1252 = 12;
$al1259 = L[475];
var $temp_branch1357 = function($test$ast1268) {
var $step1358 = 0;
var $ans1359 = D;
var $al1360 = L[472];
try {
if(R.isActivationRecord($test$ast1268)) {
$step1358 = $test$ast1268.step;
$al1360 = $test$ast1268.from;
$ans1359 = $test$ast1268.ans;
test$ast1268 = $test$ast1268.args[0];
lhs$ast1280 = $test$ast1268.vars[0];
anf_method_obj1350 = $test$ast1268.vars[1];
anf_method_obj1270 = $test$ast1268.vars[2];
anf_arg1351 = $test$ast1268.vars[3];
anf_arg1352 = $test$ast1268.vars[4];
anf_arg1339 = $test$ast1268.vars[5];
cases1278 = $test$ast1268.vars[6];
anf_arg1284 = $test$ast1268.vars[7];
anf_arg1295 = $test$ast1268.vars[8];
anf_arg1344 = $test$ast1268.vars[9];
anf_arg1353 = $test$ast1268.vars[10];
} else {
var test$ast1268 = $test$ast1268;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1358) {
case 0: $al1360 = L[421];
var lhs$ast1280 = G(test$ast1268,"left",L[421]);
$al1360 = L[422];
var anf_method_obj1350 = G(ED19,"error",L[422]);
$al1360 = L[423];
var anf_method_obj1270 = G(ED19,"para",L[423]);
$step1358 = 1;
$al1360 = L[424];
$field1361 = R.getColonFieldLoc(ED19,"text",L[424]);
if(R.isMethod($field1361)) {
$ans1359 = $field1361.full_meth(ED19,("The testing statement failed:"));
} else {
if(!(R.isFunction($field1361))) {
R.ffi.throwNonFunApp(L[424],$field1361);
}
$ans1359 = $field1361.app(("The testing statement failed:"));
}
break;
case 1: var anf_arg1271 = $ans1359;
$step1358 = 2;
$al1360 = L[423];
$field1362 = R.getColonFieldLoc(anf_method_obj1270,"make1",L[423]);
if(R.isMethod($field1362)) {
$ans1359 = $field1362.full_meth(anf_method_obj1270,anf_arg1271);
} else {
if(!(R.isFunction($field1362))) {
R.ffi.throwNonFunApp(L[423],$field1362);
}
$ans1359 = $field1362.app(anf_arg1271);
}
break;
case 2: var anf_arg1351 = $ans1359;
$al1360 = L[425];
var anf_arg1273 = G(self1254,"loc",L[425]);
$step1358 = 3;
$al1360 = L[426];
$field1363 = R.getColonFieldLoc(ED19,"cmcode",L[426]);
if(R.isMethod($field1363)) {
$ans1359 = $field1363.full_meth(ED19,anf_arg1273);
} else {
if(!(R.isFunction($field1363))) {
R.ffi.throwNonFunApp(L[426],$field1363);
}
$ans1359 = $field1363.app(anf_arg1273);
}
break;
case 3: var anf_arg1352 = $ans1359;
$step1358 = 4;
$al1360 = L[427];
$field1364 = R.getColonFieldLoc(ED19,"text",L[427]);
if(R.isMethod($field1364)) {
$ans1359 = $field1364.full_meth(ED19,("It did not expect the evaluation of the "));
} else {
if(!(R.isFunction($field1364))) {
R.ffi.throwNonFunApp(L[427],$field1364);
}
$ans1359 = $field1364.app(("It did not expect the evaluation of the "));
}
break;
case 4: var anf_arg1276 = $ans1359;
$step1358 = 5;
$al1360 = L[428];
$field1365 = R.getColonFieldLoc(list220,"make1",L[428]);
if(R.isMethod($field1365)) {
$ans1359 = $field1365.full_meth(list220,anf_arg1276);
} else {
if(!(R.isFunction($field1365))) {
R.ffi.throwNonFunApp(L[428],$field1365);
}
$ans1359 = $field1365.app(anf_arg1276);
}
break;
case 5: var anf_arg1339 = $ans1359;
$al1360 = L[429];
var cases1278 = G(self1254,"exn-place",L[429]);
$step1358 = 6;
$al1360 = L[471];
R._checkAnn(L[471],CheckOperand1356,cases1278);
break;
case 6: var $cases_dispatch1397 = {"on-left":7,
"on-right":11,
"on-refinement":15};
$al1360 = L[436];
$step1358 = $cases_dispatch1397[cases1278.$name] || 16;
break;
case 7: if(cases1278.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[435],false,L[436]);
}
$step1358 = 8;
$al1360 = L[430];
$field1366 = R.getColonFieldLoc(ED19,"text",L[430]);
if(R.isMethod($field1366)) {
$ans1359 = $field1366.full_meth(ED19,("left side"));
} else {
if(!(R.isFunction($field1366))) {
R.ffi.throwNonFunApp(L[430],$field1366);
}
$ans1359 = $field1366.app(("left side"));
}
break;
case 8: var anf_arg1284 = $ans1359;
$al1360 = L[431];
var anf_method_obj1281 = G(ED19,"locs",L[431]);
$al1360 = L[432];
var anf_arg1282 = G(lhs$ast1280,"l",L[432]);
$step1358 = 9;
$al1360 = L[431];
$field1367 = R.getColonFieldLoc(anf_method_obj1281,"make1",L[431]);
if(R.isMethod($field1367)) {
$ans1359 = $field1367.full_meth(anf_method_obj1281,anf_arg1282);
} else {
if(!(R.isFunction($field1367))) {
R.ffi.throwNonFunApp(L[431],$field1367);
}
$ans1359 = $field1367.app(anf_arg1282);
}
break;
case 9: var anf_arg1285 = $ans1359;
$step1358 = 10;
$al1360 = L[433];
$field1368 = R.getColonFieldLoc(ED19,"highlight",L[433]);
if(R.isMethod($field1368)) {
$ans1359 = $field1368.full_meth(ED19,anf_arg1284,anf_arg1285,(-1));
} else {
if(!(R.isFunction($field1368))) {
R.ffi.throwNonFunApp(L[433],$field1368);
}
$ans1359 = $field1368.app(anf_arg1284,anf_arg1285,(-1));
}
break;
case 10: var anf_arg1287 = $ans1359;
$step1358 = 17;
$al1360 = L[434];
$field1369 = R.getColonFieldLoc(list220,"make1",L[434]);
if(R.isMethod($field1369)) {
$ans1359 = $field1369.full_meth(list220,anf_arg1287);
} else {
if(!(R.isFunction($field1369))) {
R.ffi.throwNonFunApp(L[434],$field1369);
}
$ans1359 = $field1369.app(anf_arg1287);
}
break;
case 11: if(cases1278.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[444],false,L[436]);
}
$step1358 = 12;
$al1360 = L[437];
$field1370 = R.getColonFieldLoc(ED19,"text",L[437]);
if(R.isMethod($field1370)) {
$ans1359 = $field1370.full_meth(ED19,("right side"));
} else {
if(!(R.isFunction($field1370))) {
R.ffi.throwNonFunApp(L[437],$field1370);
}
$ans1359 = $field1370.app(("right side"));
}
break;
case 12: var anf_arg1295 = $ans1359;
$al1360 = L[438];
var anf_method_obj1292 = G(ED19,"locs",L[438]);
$al1360 = L[439];
var anf_bracket1290 = G(test$ast1268,"right",L[439]);
$al1360 = L[440];
var anf_bracket1291 = G(anf_bracket1290,"value",L[440]);
$al1360 = L[441];
var anf_arg1293 = G(anf_bracket1291,"l",L[441]);
$step1358 = 13;
$al1360 = L[438];
$field1371 = R.getColonFieldLoc(anf_method_obj1292,"make1",L[438]);
if(R.isMethod($field1371)) {
$ans1359 = $field1371.full_meth(anf_method_obj1292,anf_arg1293);
} else {
if(!(R.isFunction($field1371))) {
R.ffi.throwNonFunApp(L[438],$field1371);
}
$ans1359 = $field1371.app(anf_arg1293);
}
break;
case 13: var anf_arg1296 = $ans1359;
$step1358 = 14;
$al1360 = L[442];
$field1372 = R.getColonFieldLoc(ED19,"highlight",L[442]);
if(R.isMethod($field1372)) {
$ans1359 = $field1372.full_meth(ED19,anf_arg1295,anf_arg1296,(-1));
} else {
if(!(R.isFunction($field1372))) {
R.ffi.throwNonFunApp(L[442],$field1372);
}
$ans1359 = $field1372.app(anf_arg1295,anf_arg1296,(-1));
}
break;
case 14: var anf_arg1298 = $ans1359;
$step1358 = 17;
$al1360 = L[443];
$field1373 = R.getColonFieldLoc(list220,"make1",L[443]);
if(R.isMethod($field1373)) {
$ans1359 = $field1373.full_meth(list220,anf_arg1298);
} else {
if(!(R.isFunction($field1373))) {
R.ffi.throwNonFunApp(L[443],$field1373);
}
$ans1359 = $field1373.app(anf_arg1298);
}
break;
case 15: if(cases1278.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[462],false,L[436]);
}
$step1358 = 17;
$al1360 = L[463];
var $temp_branch1383 = function($$resumer1336) {
var $step1384 = 0;
var $ans1385 = D;
var $al1386 = L[452];
try {
if(R.isActivationRecord($$resumer1336)) {
$step1384 = $$resumer1336.step;
$al1386 = $$resumer1336.from;
$ans1385 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
cases1300 = $$resumer1336.vars[0];
v1302 = $$resumer1336.vars[1];
anf_arg1306 = $$resumer1336.vars[2];
anf_arg1317 = $$resumer1336.vars[3];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1384) {
case 0: $al1386 = L[445];
var cases1300 = G(test$ast1268,"refinement",L[445]);
$step1384 = 1;
$al1386 = L[461];
R._checkAnn(L[461],Option121,cases1300);
break;
case 1: var $cases_dispatch1395 = {"some":2,
"none":6};
$al1386 = L[452];
$step1384 = $cases_dispatch1395[cases1300.$name] || 10;
break;
case 2: if(cases1300.$arity !== 1) {
if(cases1300.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[451],1,cases1300.$arity,L[452]);
} else {
R.ffi.throwCasesSingletonErrorC(L[451],true,L[452]);
}
}
var $fn274 = cases1300.$constructor.$fieldNames;
var v1302 = R.derefField(cases1300.dict[$fn274[0]],cases1300.$mut_fields_mask[0],false);
$step1384 = 3;
$al1386 = L[446];
$field1387 = R.getColonFieldLoc(ED19,"text",L[446]);
if(R.isMethod($field1387)) {
$ans1385 = $field1387.full_meth(ED19,("refinement"));
} else {
if(!(R.isFunction($field1387))) {
R.ffi.throwNonFunApp(L[446],$field1387);
}
$ans1385 = $field1387.app(("refinement"));
}
break;
case 3: var anf_arg1306 = $ans1385;
$al1386 = L[447];
var anf_method_obj1303 = G(ED19,"locs",L[447]);
$al1386 = L[448];
var anf_arg1304 = G(v1302,"l",L[448]);
$step1384 = 4;
$al1386 = L[447];
$field1388 = R.getColonFieldLoc(anf_method_obj1303,"make1",L[447]);
if(R.isMethod($field1388)) {
$ans1385 = $field1388.full_meth(anf_method_obj1303,anf_arg1304);
} else {
if(!(R.isFunction($field1388))) {
R.ffi.throwNonFunApp(L[447],$field1388);
}
$ans1385 = $field1388.app(anf_arg1304);
}
break;
case 4: var anf_arg1307 = $ans1385;
$step1384 = 5;
$al1386 = L[449];
$field1389 = R.getColonFieldLoc(ED19,"highlight",L[449]);
if(R.isMethod($field1389)) {
$ans1385 = $field1389.full_meth(ED19,anf_arg1306,anf_arg1307,(-1));
} else {
if(!(R.isFunction($field1389))) {
R.ffi.throwNonFunApp(L[449],$field1389);
}
$ans1385 = $field1389.app(anf_arg1306,anf_arg1307,(-1));
}
break;
case 5: var anf_arg1309 = $ans1385;
$step1384 = 11;
$al1386 = L[450];
$field1390 = R.getColonFieldLoc(list220,"make1",L[450]);
if(R.isMethod($field1390)) {
$ans1385 = $field1390.full_meth(list220,anf_arg1309);
} else {
if(!(R.isFunction($field1390))) {
R.ffi.throwNonFunApp(L[450],$field1390);
}
$ans1385 = $field1390.app(anf_arg1309);
}
break;
case 6: if(cases1300.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[460],false,L[452]);
}
$step1384 = 7;
$al1386 = L[453];
$field1391 = R.getColonFieldLoc(ED19,"text",L[453]);
if(R.isMethod($field1391)) {
$ans1385 = $field1391.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field1391))) {
R.ffi.throwNonFunApp(L[453],$field1391);
}
$ans1385 = $field1391.app(("predicate"));
}
break;
case 7: var anf_arg1317 = $ans1385;
$al1386 = L[454];
var anf_method_obj1314 = G(ED19,"locs",L[454]);
$al1386 = L[455];
var anf_bracket1312 = G(test$ast1268,"right",L[455]);
$al1386 = L[456];
var anf_bracket1313 = G(anf_bracket1312,"value",L[456]);
$al1386 = L[457];
var anf_arg1315 = G(anf_bracket1313,"l",L[457]);
$step1384 = 8;
$al1386 = L[454];
$field1392 = R.getColonFieldLoc(anf_method_obj1314,"make1",L[454]);
if(R.isMethod($field1392)) {
$ans1385 = $field1392.full_meth(anf_method_obj1314,anf_arg1315);
} else {
if(!(R.isFunction($field1392))) {
R.ffi.throwNonFunApp(L[454],$field1392);
}
$ans1385 = $field1392.app(anf_arg1315);
}
break;
case 8: var anf_arg1318 = $ans1385;
$step1384 = 9;
$al1386 = L[458];
$field1393 = R.getColonFieldLoc(ED19,"highlight",L[458]);
if(R.isMethod($field1393)) {
$ans1385 = $field1393.full_meth(ED19,anf_arg1317,anf_arg1318,(-1));
} else {
if(!(R.isFunction($field1393))) {
R.ffi.throwNonFunApp(L[458],$field1393);
}
$ans1385 = $field1393.app(anf_arg1317,anf_arg1318,(-1));
}
break;
case 9: var anf_arg1320 = $ans1385;
$step1384 = 11;
$al1386 = L[459];
$field1394 = R.getColonFieldLoc(list220,"make1",L[459]);
if(R.isMethod($field1394)) {
$ans1385 = $field1394.full_meth(list220,anf_arg1320);
} else {
if(!(R.isFunction($field1394))) {
R.ffi.throwNonFunApp(L[459],$field1394);
}
$ans1385 = $field1394.app(anf_arg1320);
}
break;
case 10: $step1384 = 11;
$al1386 = L[452];
$ans1385 = R.throwNoCasesMatched(L[452],cases1300);
break;
case 11: ++R.GAS;
return $ans1385;
default: throw "No case numbered " + $step1384 + " in $temp_branch1383";
}
}
} catch($e1396) {
if(R.isCont($e1396) && ($step1384 !== 11)) {
$e1396.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1386,$temp_branch1383,$step1384,[],[cases1300,v1302,anf_arg1306,anf_arg1317]);
}
if(R.isPyretException($e1396)) {
$e1396.pyretStack.push($al1386);
}
throw $e1396;
}
};
$ans1359 = cases1278.$app_fields($temp_branch1383,[]);
break;
case 16: $step1358 = 17;
$al1360 = L[436];
$ans1359 = R.throwNoCasesMatched(L[436],cases1278);
break;
case 17: var anf_arg1340 = $ans1359;
$step1358 = 18;
$al1360 = L[470];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al1360,_plus3);
}
$ans1359 = _plus3.app(anf_arg1339,anf_arg1340);
break;
case 18: var anf_arg1344 = $ans1359;
$step1358 = 19;
$al1360 = L[464];
$field1398 = R.getColonFieldLoc(ED19,"text",L[464]);
if(R.isMethod($field1398)) {
$ans1359 = $field1398.full_meth(ED19,(" to raise an exception:"));
} else {
if(!(R.isFunction($field1398))) {
R.ffi.throwNonFunApp(L[464],$field1398);
}
$ans1359 = $field1398.app((" to raise an exception:"));
}
break;
case 19: var anf_arg1342 = $ans1359;
$step1358 = 20;
$al1360 = L[465];
$field1399 = R.getColonFieldLoc(list220,"make1",L[465]);
if(R.isMethod($field1399)) {
$ans1359 = $field1399.full_meth(list220,anf_arg1342);
} else {
if(!(R.isFunction($field1399))) {
R.ffi.throwNonFunApp(L[465],$field1399);
}
$ans1359 = $field1399.app(anf_arg1342);
}
break;
case 20: var anf_arg1345 = $ans1359;
$step1358 = 21;
$al1360 = L[469];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al1360,_plus3);
}
$ans1359 = _plus3.app(anf_arg1344,anf_arg1345);
break;
case 21: var anf_arg1346 = $ans1359;
$step1358 = 22;
$al1360 = L[466];
$field1400 = R.getColonFieldLoc(ED19,"paragraph",L[466]);
if(R.isMethod($field1400)) {
$ans1359 = $field1400.full_meth(ED19,anf_arg1346);
} else {
if(!(R.isFunction($field1400))) {
R.ffi.throwNonFunApp(L[466],$field1400);
}
$ans1359 = $field1400.app(anf_arg1346);
}
break;
case 22: var anf_arg1353 = $ans1359;
$al1360 = L[467];
var anf_arg1348 = G(self1254,"actual-exn",L[467]);
$step1358 = 23;
$al1360 = L[468];
$field1401 = R.getColonFieldLoc(ED19,"embed",L[468]);
if(R.isMethod($field1401)) {
$ans1359 = $field1401.full_meth(ED19,anf_arg1348);
} else {
if(!(R.isFunction($field1401))) {
R.ffi.throwNonFunApp(L[468],$field1401);
}
$ans1359 = $field1401.app(anf_arg1348);
}
break;
case 23: var anf_arg1354 = $ans1359;
$step1358 = 24;
$al1360 = L[422];
$field1402 = R.getColonFieldLoc(anf_method_obj1350,"make4",L[422]);
if(R.isMethod($field1402)) {
$ans1359 = $field1402.full_meth(anf_method_obj1350,anf_arg1351,anf_arg1352,anf_arg1353,anf_arg1354);
} else {
if(!(R.isFunction($field1402))) {
R.ffi.throwNonFunApp(L[422],$field1402);
}
$ans1359 = $field1402.app(anf_arg1351,anf_arg1352,anf_arg1353,anf_arg1354);
}
break;
case 24: ++R.GAS;
return $ans1359;
default: throw "No case numbered " + $step1358 + " in $temp_branch1357";
}
}
} catch($e1403) {
if(R.isCont($e1403) && ($step1358 !== 24)) {
$e1403.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1360,$temp_branch1357,$step1358,[test$ast1268],[lhs$ast1280,anf_method_obj1350,anf_method_obj1270,anf_arg1351,anf_arg1352,anf_arg1339,cases1278,anf_arg1284,anf_arg1295,anf_arg1344,anf_arg1353]);
}
if(R.isPyretException($e1403)) {
$e1403.pyretStack.push($al1360);
}
throw $e1403;
}
};
$ans1258 = cases1267.$app_fields($temp_branch1357,[false]);
break;
case 9: if(cases1267.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[477],false,L[474]);
}
$step1252 = 12;
$al1259 = L[476];
$field1404 = R.getColonFieldLoc(self1254,"render-reason",L[476]);
if(R.isMethod($field1404)) {
$ans1258 = $field1404.full_meth(self1254);
} else {
if(!(R.isFunction($field1404))) {
R.ffi.throwNonFunApp(L[476],$field1404);
}
$ans1258 = $field1404.app();
}
break;
case 10: $step1252 = 12;
$al1259 = L[474];
$ans1258 = R.throwNoCasesMatched(L[474],cases1267);
break;
case 11: $step1252 = 12;
$al1259 = L[480];
$field1406 = R.getColonFieldLoc(self1254,"render-reason",L[480]);
if(R.isMethod($field1406)) {
$ans1258 = $field1406.full_meth(self1254);
} else {
if(!(R.isFunction($field1406))) {
R.ffi.throwNonFunApp(L[480],$field1406);
}
$ans1258 = $field1406.app();
}
break;
case 12: ++R.GAS;
return $ans1258;
default: throw "No case numbered " + $step1252 + " in $temp_full1253";
}
}
} catch($e1409) {
if(R.isCont($e1409) && ($step1252 !== 12)) {
$e1409.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1259,$temp_full1253,$step1252,[self1254,maybe$stack$loc1255,src$available1256,maybe$ast1257],[cases1267]);
}
if(R.isPyretException($e1409)) {
$e1409.pyretStack.push($al1259);
}
throw $e1409;
}
};
var anf_variant_member1890 = R.makeMethod3($temp_full1253,"render-fancy-reason");
var $temp_full1411 = function($self1412) {
var $step1410 = 0;
var $ans1413 = D;
var $al1414 = L[487];
try {
if(R.isActivationRecord($self1412)) {
$step1410 = $self1412.step;
$al1414 = $self1412.from;
$ans1413 = $self1412.ans;
self1412 = $self1412.args[0];
anf_method_obj1421 = $self1412.vars[0];
anf_method_obj1416 = $self1412.vars[1];
anf_arg1422 = $self1412.vars[2];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[487],1,$t);
}
var self1412 = $self1412;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1410) {
case 0: $al1414 = L[482];
var anf_method_obj1421 = G(ED19,"error",L[482]);
$al1414 = L[483];
var anf_method_obj1416 = G(ED19,"para",L[483]);
$step1410 = 1;
$al1414 = L[484];
$field1415 = R.getColonFieldLoc(ED19,"text",L[484]);
if(R.isMethod($field1415)) {
$ans1413 = $field1415.full_meth(ED19,("Got unexpected exception "));
} else {
if(!(R.isFunction($field1415))) {
R.ffi.throwNonFunApp(L[484],$field1415);
}
$ans1413 = $field1415.app(("Got unexpected exception "));
}
break;
case 1: var anf_arg1417 = $ans1413;
$step1410 = 2;
$al1414 = L[483];
$field1418 = R.getColonFieldLoc(anf_method_obj1416,"make1",L[483]);
if(R.isMethod($field1418)) {
$ans1413 = $field1418.full_meth(anf_method_obj1416,anf_arg1417);
} else {
if(!(R.isFunction($field1418))) {
R.ffi.throwNonFunApp(L[483],$field1418);
}
$ans1413 = $field1418.app(anf_arg1417);
}
break;
case 2: var anf_arg1422 = $ans1413;
$al1414 = L[485];
var anf_arg1419 = G(self1412,"actual-exn",L[485]);
$step1410 = 3;
$al1414 = L[486];
$field1420 = R.getColonFieldLoc(ED19,"embed",L[486]);
if(R.isMethod($field1420)) {
$ans1413 = $field1420.full_meth(ED19,anf_arg1419);
} else {
if(!(R.isFunction($field1420))) {
R.ffi.throwNonFunApp(L[486],$field1420);
}
$ans1413 = $field1420.app(anf_arg1419);
}
break;
case 3: var anf_arg1423 = $ans1413;
$step1410 = 4;
$al1414 = L[482];
$field1424 = R.getColonFieldLoc(anf_method_obj1421,"make2",L[482]);
if(R.isMethod($field1424)) {
$ans1413 = $field1424.full_meth(anf_method_obj1421,anf_arg1422,anf_arg1423);
} else {
if(!(R.isFunction($field1424))) {
R.ffi.throwNonFunApp(L[482],$field1424);
}
$ans1413 = $field1424.app(anf_arg1422,anf_arg1423);
}
break;
case 4: ++R.GAS;
return $ans1413;
default: throw "No case numbered " + $step1410 + " in $temp_full1411";
}
}
} catch($e1425) {
if(R.isCont($e1425) && ($step1410 !== 4)) {
$e1425.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1414,$temp_full1411,$step1410,[self1412],[anf_method_obj1421,anf_method_obj1416,anf_arg1422]);
}
if(R.isPyretException($e1425)) {
$e1425.pyretStack.push($al1414);
}
throw $e1425;
}
};
var anf_variant_member1891 = R.makeMethod0($temp_full1411,"render-reason");
var $temp_full1427 = function($self1428) {
var $step1426 = 0;
var $ans1429 = D;
var $al1430 = L[497];
try {
if(R.isActivationRecord($self1428)) {
$step1426 = $self1428.step;
$al1430 = $self1428.from;
$ans1429 = $self1428.ans;
self1428 = $self1428.args[0];
anf_arg1438 = $self1428.vars[0];
anf_arg1439 = $self1428.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[497],1,$t);
}
var self1428 = $self1428;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1426) {
case 0: $al1430 = L[488];
var anf_arg1431 = G(self1428,"loc",L[488]);
$step1426 = 1;
$al1430 = L[489];
$field1432 = R.getColonFieldLoc(VS26,"vs-value",L[489]);
if(R.isMethod($field1432)) {
$ans1429 = $field1432.full_meth(VS26,anf_arg1431);
} else {
if(!(R.isFunction($field1432))) {
R.ffi.throwNonFunApp(L[489],$field1432);
}
$ans1429 = $field1432.app(anf_arg1431);
}
break;
case 1: var anf_arg1438 = $ans1429;
$al1430 = L[490];
var anf_arg1433 = G(self1428,"actual-exn",L[490]);
$step1426 = 2;
$al1430 = L[496];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1430,exn$unwrap7);
}
$ans1429 = exn$unwrap7.app(anf_arg1433);
break;
case 2: var anf_arg1434 = $ans1429;
$step1426 = 3;
$al1430 = L[491];
$field1435 = R.getColonFieldLoc(VS26,"vs-value",L[491]);
if(R.isMethod($field1435)) {
$ans1429 = $field1435.full_meth(VS26,anf_arg1434);
} else {
if(!(R.isFunction($field1435))) {
R.ffi.throwNonFunApp(L[491],$field1435);
}
$ans1429 = $field1435.app(anf_arg1434);
}
break;
case 3: var anf_arg1439 = $ans1429;
$al1430 = L[492];
var anf_arg1436 = G(self1428,"exn-place",L[492]);
$step1426 = 4;
$al1430 = L[493];
$field1437 = R.getColonFieldLoc(VS26,"vs-value",L[493]);
if(R.isMethod($field1437)) {
$ans1429 = $field1437.full_meth(VS26,anf_arg1436);
} else {
if(!(R.isFunction($field1437))) {
R.ffi.throwNonFunApp(L[493],$field1437);
}
$ans1429 = $field1437.app(anf_arg1436);
}
break;
case 4: var anf_arg1440 = $ans1429;
$step1426 = 5;
$al1430 = L[494];
$field1441 = R.getColonFieldLoc(list220,"make3",L[494]);
if(R.isMethod($field1441)) {
$ans1429 = $field1441.full_meth(list220,anf_arg1438,anf_arg1439,anf_arg1440);
} else {
if(!(R.isFunction($field1441))) {
R.ffi.throwNonFunApp(L[494],$field1441);
}
$ans1429 = $field1441.app(anf_arg1438,anf_arg1439,anf_arg1440);
}
break;
case 5: var anf_arg1442 = $ans1429;
$step1426 = 6;
$al1430 = L[495];
$field1443 = R.getColonFieldLoc(VS26,"vs-constr",L[495]);
if(R.isMethod($field1443)) {
$ans1429 = $field1443.full_meth(VS26,("failure-exn"),anf_arg1442);
} else {
if(!(R.isFunction($field1443))) {
R.ffi.throwNonFunApp(L[495],$field1443);
}
$ans1429 = $field1443.app(("failure-exn"),anf_arg1442);
}
break;
case 6: ++R.GAS;
return $ans1429;
default: throw "No case numbered " + $step1426 + " in $temp_full1427";
}
}
} catch($e1444) {
if(R.isCont($e1444) && ($step1426 !== 6)) {
$e1444.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1430,$temp_full1427,$step1426,[self1428],[anf_arg1438,anf_arg1439]);
}
if(R.isPyretException($e1444)) {
$e1444.pyretStack.push($al1430);
}
throw $e1444;
}
};
var anf_variant_member1892 = R.makeMethod0($temp_full1427,"_output");
var $temp_full1446 = function($self1447,$maybe$stack$loc1448,$src$available1449,$maybe$ast1450) {
var $step1445 = 0;
var $ans1451 = D;
var $al1452 = L[510];
try {
if(R.isActivationRecord($self1447)) {
$step1445 = $self1447.step;
$al1452 = $self1447.from;
$ans1451 = $self1447.ans;
self1447 = $self1447.args[0];
maybe$stack$loc1448 = $self1447.args[1];
src$available1449 = $self1447.args[2];
maybe$ast1450 = $self1447.args[3];
cases1453 = $self1447.vars[0];
exn1458 = $self1447.vars[1];
anf_method_obj1460 = $self1447.vars[2];
anf_method_obj1455 = $self1447.vars[3];
anf_arg1461 = $self1447.vars[4];
anf_method_obj1468 = $self1447.vars[5];
anf_method_obj1465 = $self1447.vars[6];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[510],4,$t);
}
var self1447 = $self1447;
var maybe$stack$loc1448 = $maybe$stack$loc1448;
var src$available1449 = $src$available1449;
var maybe$ast1450 = $maybe$ast1450;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1445) {
case 0: $al1452 = L[498];
var cases1453 = G(self1447,"exn-expected",L[498]);
$step1445 = 1;
$al1452 = L[509];
R._checkAnn(L[509],Option121,cases1453);
break;
case 1: var $cases_dispatch1471 = {"some":2,
"none":6};
$al1452 = L[504];
$step1445 = $cases_dispatch1471[cases1453.$name] || 9;
break;
case 2: if(cases1453.$arity !== 1) {
if(cases1453.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[503],1,cases1453.$arity,L[504]);
} else {
R.ffi.throwCasesSingletonErrorC(L[503],true,L[504]);
}
}
var $fn274 = cases1453.$constructor.$fieldNames;
var exn1458 = R.derefField(cases1453.dict[$fn274[0]],cases1453.$mut_fields_mask[0],false);
$al1452 = L[499];
var anf_method_obj1460 = G(ED19,"error",L[499]);
$al1452 = L[500];
var anf_method_obj1455 = G(ED19,"para",L[500]);
$step1445 = 3;
$al1452 = L[501];
$field1454 = R.getColonFieldLoc(ED19,"text",L[501]);
if(R.isMethod($field1454)) {
$ans1451 = $field1454.full_meth(ED19,("No exception raised, expected"));
} else {
if(!(R.isFunction($field1454))) {
R.ffi.throwNonFunApp(L[501],$field1454);
}
$ans1451 = $field1454.app(("No exception raised, expected"));
}
break;
case 3: var anf_arg1456 = $ans1451;
$step1445 = 4;
$al1452 = L[500];
$field1457 = R.getColonFieldLoc(anf_method_obj1455,"make1",L[500]);
if(R.isMethod($field1457)) {
$ans1451 = $field1457.full_meth(anf_method_obj1455,anf_arg1456);
} else {
if(!(R.isFunction($field1457))) {
R.ffi.throwNonFunApp(L[500],$field1457);
}
$ans1451 = $field1457.app(anf_arg1456);
}
break;
case 4: var anf_arg1461 = $ans1451;
$step1445 = 5;
$al1452 = L[502];
$field1459 = R.getColonFieldLoc(ED19,"embed",L[502]);
if(R.isMethod($field1459)) {
$ans1451 = $field1459.full_meth(ED19,exn1458);
} else {
if(!(R.isFunction($field1459))) {
R.ffi.throwNonFunApp(L[502],$field1459);
}
$ans1451 = $field1459.app(exn1458);
}
break;
case 5: var anf_arg1462 = $ans1451;
$step1445 = 10;
$al1452 = L[499];
$field1463 = R.getColonFieldLoc(anf_method_obj1460,"make2",L[499]);
if(R.isMethod($field1463)) {
$ans1451 = $field1463.full_meth(anf_method_obj1460,anf_arg1461,anf_arg1462);
} else {
if(!(R.isFunction($field1463))) {
R.ffi.throwNonFunApp(L[499],$field1463);
}
$ans1451 = $field1463.app(anf_arg1461,anf_arg1462);
}
break;
case 6: if(cases1453.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[508],false,L[504]);
}
$al1452 = L[505];
var anf_method_obj1468 = G(ED19,"error",L[505]);
$al1452 = L[506];
var anf_method_obj1465 = G(ED19,"para",L[506]);
$step1445 = 7;
$al1452 = L[507];
$field1464 = R.getColonFieldLoc(ED19,"text",L[507]);
if(R.isMethod($field1464)) {
$ans1451 = $field1464.full_meth(ED19,("No exception raised"));
} else {
if(!(R.isFunction($field1464))) {
R.ffi.throwNonFunApp(L[507],$field1464);
}
$ans1451 = $field1464.app(("No exception raised"));
}
break;
case 7: var anf_arg1466 = $ans1451;
$step1445 = 8;
$al1452 = L[506];
$field1467 = R.getColonFieldLoc(anf_method_obj1465,"make1",L[506]);
if(R.isMethod($field1467)) {
$ans1451 = $field1467.full_meth(anf_method_obj1465,anf_arg1466);
} else {
if(!(R.isFunction($field1467))) {
R.ffi.throwNonFunApp(L[506],$field1467);
}
$ans1451 = $field1467.app(anf_arg1466);
}
break;
case 8: var anf_arg1469 = $ans1451;
$step1445 = 10;
$al1452 = L[505];
$field1470 = R.getColonFieldLoc(anf_method_obj1468,"make1",L[505]);
if(R.isMethod($field1470)) {
$ans1451 = $field1470.full_meth(anf_method_obj1468,anf_arg1469);
} else {
if(!(R.isFunction($field1470))) {
R.ffi.throwNonFunApp(L[505],$field1470);
}
$ans1451 = $field1470.app(anf_arg1469);
}
break;
case 9: $step1445 = 10;
$al1452 = L[504];
$ans1451 = R.throwNoCasesMatched(L[504],cases1453);
break;
case 10: ++R.GAS;
return $ans1451;
default: throw "No case numbered " + $step1445 + " in $temp_full1446";
}
}
} catch($e1472) {
if(R.isCont($e1472) && ($step1445 !== 10)) {
$e1472.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1452,$temp_full1446,$step1445,[self1447,maybe$stack$loc1448,src$available1449,maybe$ast1450],[cases1453,exn1458,anf_method_obj1460,anf_method_obj1455,anf_arg1461,anf_method_obj1468,anf_method_obj1465]);
}
if(R.isPyretException($e1472)) {
$e1472.pyretStack.push($al1452);
}
throw $e1472;
}
};
var anf_variant_member1903 = R.makeMethod3($temp_full1446,"render-fancy-reason");
var $temp_full1474 = function($self1475) {
var $step1473 = 0;
var $ans1476 = D;
var $al1477 = L[523];
try {
if(R.isActivationRecord($self1475)) {
$step1473 = $self1475.step;
$al1477 = $self1475.from;
$ans1476 = $self1475.ans;
self1475 = $self1475.args[0];
cases1478 = $self1475.vars[0];
exn1483 = $self1475.vars[1];
anf_method_obj1485 = $self1475.vars[2];
anf_method_obj1480 = $self1475.vars[3];
anf_arg1486 = $self1475.vars[4];
anf_method_obj1493 = $self1475.vars[5];
anf_method_obj1490 = $self1475.vars[6];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[523],1,$t);
}
var self1475 = $self1475;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1473) {
case 0: $al1477 = L[511];
var cases1478 = G(self1475,"exn-expected",L[511]);
$step1473 = 1;
$al1477 = L[522];
R._checkAnn(L[522],Option121,cases1478);
break;
case 1: var $cases_dispatch1496 = {"some":2,
"none":6};
$al1477 = L[517];
$step1473 = $cases_dispatch1496[cases1478.$name] || 9;
break;
case 2: if(cases1478.$arity !== 1) {
if(cases1478.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[516],1,cases1478.$arity,L[517]);
} else {
R.ffi.throwCasesSingletonErrorC(L[516],true,L[517]);
}
}
var $fn274 = cases1478.$constructor.$fieldNames;
var exn1483 = R.derefField(cases1478.dict[$fn274[0]],cases1478.$mut_fields_mask[0],false);
$al1477 = L[512];
var anf_method_obj1485 = G(ED19,"error",L[512]);
$al1477 = L[513];
var anf_method_obj1480 = G(ED19,"para",L[513]);
$step1473 = 3;
$al1477 = L[514];
$field1479 = R.getColonFieldLoc(ED19,"text",L[514]);
if(R.isMethod($field1479)) {
$ans1476 = $field1479.full_meth(ED19,("No exception raised, expected"));
} else {
if(!(R.isFunction($field1479))) {
R.ffi.throwNonFunApp(L[514],$field1479);
}
$ans1476 = $field1479.app(("No exception raised, expected"));
}
break;
case 3: var anf_arg1481 = $ans1476;
$step1473 = 4;
$al1477 = L[513];
$field1482 = R.getColonFieldLoc(anf_method_obj1480,"make1",L[513]);
if(R.isMethod($field1482)) {
$ans1476 = $field1482.full_meth(anf_method_obj1480,anf_arg1481);
} else {
if(!(R.isFunction($field1482))) {
R.ffi.throwNonFunApp(L[513],$field1482);
}
$ans1476 = $field1482.app(anf_arg1481);
}
break;
case 4: var anf_arg1486 = $ans1476;
$step1473 = 5;
$al1477 = L[515];
$field1484 = R.getColonFieldLoc(ED19,"embed",L[515]);
if(R.isMethod($field1484)) {
$ans1476 = $field1484.full_meth(ED19,exn1483);
} else {
if(!(R.isFunction($field1484))) {
R.ffi.throwNonFunApp(L[515],$field1484);
}
$ans1476 = $field1484.app(exn1483);
}
break;
case 5: var anf_arg1487 = $ans1476;
$step1473 = 10;
$al1477 = L[512];
$field1488 = R.getColonFieldLoc(anf_method_obj1485,"make2",L[512]);
if(R.isMethod($field1488)) {
$ans1476 = $field1488.full_meth(anf_method_obj1485,anf_arg1486,anf_arg1487);
} else {
if(!(R.isFunction($field1488))) {
R.ffi.throwNonFunApp(L[512],$field1488);
}
$ans1476 = $field1488.app(anf_arg1486,anf_arg1487);
}
break;
case 6: if(cases1478.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[521],false,L[517]);
}
$al1477 = L[518];
var anf_method_obj1493 = G(ED19,"error",L[518]);
$al1477 = L[519];
var anf_method_obj1490 = G(ED19,"para",L[519]);
$step1473 = 7;
$al1477 = L[520];
$field1489 = R.getColonFieldLoc(ED19,"text",L[520]);
if(R.isMethod($field1489)) {
$ans1476 = $field1489.full_meth(ED19,("No exception raised"));
} else {
if(!(R.isFunction($field1489))) {
R.ffi.throwNonFunApp(L[520],$field1489);
}
$ans1476 = $field1489.app(("No exception raised"));
}
break;
case 7: var anf_arg1491 = $ans1476;
$step1473 = 8;
$al1477 = L[519];
$field1492 = R.getColonFieldLoc(anf_method_obj1490,"make1",L[519]);
if(R.isMethod($field1492)) {
$ans1476 = $field1492.full_meth(anf_method_obj1490,anf_arg1491);
} else {
if(!(R.isFunction($field1492))) {
R.ffi.throwNonFunApp(L[519],$field1492);
}
$ans1476 = $field1492.app(anf_arg1491);
}
break;
case 8: var anf_arg1494 = $ans1476;
$step1473 = 10;
$al1477 = L[518];
$field1495 = R.getColonFieldLoc(anf_method_obj1493,"make1",L[518]);
if(R.isMethod($field1495)) {
$ans1476 = $field1495.full_meth(anf_method_obj1493,anf_arg1494);
} else {
if(!(R.isFunction($field1495))) {
R.ffi.throwNonFunApp(L[518],$field1495);
}
$ans1476 = $field1495.app(anf_arg1494);
}
break;
case 9: $step1473 = 10;
$al1477 = L[517];
$ans1476 = R.throwNoCasesMatched(L[517],cases1478);
break;
case 10: ++R.GAS;
return $ans1476;
default: throw "No case numbered " + $step1473 + " in $temp_full1474";
}
}
} catch($e1497) {
if(R.isCont($e1497) && ($step1473 !== 10)) {
$e1497.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1477,$temp_full1474,$step1473,[self1475],[cases1478,exn1483,anf_method_obj1485,anf_method_obj1480,anf_arg1486,anf_method_obj1493,anf_method_obj1490]);
}
if(R.isPyretException($e1497)) {
$e1497.pyretStack.push($al1477);
}
throw $e1497;
}
};
var anf_variant_member1904 = R.makeMethod0($temp_full1474,"render-reason");
var $temp_full1499 = function($self1500,$maybe$stack$loc1501,$src$available1502,$maybe$ast1503) {
var $step1498 = 0;
var $ans1504 = D;
var $al1505 = L[566];
try {
if(R.isActivationRecord($self1500)) {
$step1498 = $self1500.step;
$al1505 = $self1500.from;
$ans1504 = $self1500.ans;
self1500 = $self1500.args[0];
maybe$stack$loc1501 = $self1500.args[1];
src$available1502 = $self1500.args[2];
maybe$ast1503 = $self1500.args[3];
cases1513 = $self1500.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[566],4,$t);
}
var self1500 = $self1500;
var maybe$stack$loc1501 = $maybe$stack$loc1501;
var src$available1502 = $src$available1502;
var maybe$ast1503 = $maybe$ast1503;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1498) {
case 0: $al1505 = L[524];
var anf_method_obj1506 = G(self1500,"loc",L[524]);
$step1498 = 1;
$al1505 = L[525];
$field1507 = R.getColonFieldLoc(anf_method_obj1506,"is-builtin",L[525]);
if(R.isMethod($field1507)) {
$ans1504 = $field1507.full_meth(anf_method_obj1506);
} else {
if(!(R.isFunction($field1507))) {
R.ffi.throwNonFunApp(L[525],$field1507);
}
$ans1504 = $field1507.app();
}
break;
case 1: var anf_arg1508 = $ans1504;
$al1505 = L[525];
var anf_if1589 = R.checkWrapBoolean(anf_arg1508);
$step1498 = R.isPyretTrue(anf_if1589)?2:3;
break;
case 2: $step1498 = 12;
$al1505 = L[526];
$field1509 = R.getColonFieldLoc(self1500,"render-reason",L[526]);
if(R.isMethod($field1509)) {
$ans1504 = $field1509.full_meth(self1500);
} else {
if(!(R.isFunction($field1509))) {
R.ffi.throwNonFunApp(L[526],$field1509);
}
$ans1504 = $field1509.app();
}
break;
case 3: $al1505 = L[527];
var anf_arg1510 = G(self1500,"loc",L[527]);
$step1498 = 4;
$al1505 = L[528];
if(!(R.isFunction(src$available1502))) {
R.ffi.throwNonFunApp($al1505,src$available1502);
}
$ans1504 = src$available1502.app(anf_arg1510);
break;
case 4: var anf_arg1511 = $ans1504;
$al1505 = L[528];
var anf_if1588 = R.checkWrapBoolean(anf_arg1511);
$step1498 = R.isPyretTrue(anf_if1588)?5:11;
break;
case 5: $al1505 = L[529];
var anf_arg1512 = G(self1500,"loc",L[529]);
$step1498 = 6;
$al1505 = L[564];
if(!(R.isFunction(maybe$ast1503))) {
R.ffi.throwNonFunApp($al1505,maybe$ast1503);
}
$ans1504 = maybe$ast1503.app(anf_arg1512);
break;
case 6: var cases1513 = $ans1504;
$step1498 = 7;
$al1505 = L[563];
R._checkAnn(L[563],Option121,cases1513);
break;
case 7: var $cases_dispatch1586 = {"some":8,
"none":9};
$al1505 = L[559];
$step1498 = $cases_dispatch1586[cases1513.$name] || 10;
break;
case 8: if(cases1513.$arity !== 1) {
if(cases1513.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[558],1,cases1513.$arity,L[559]);
} else {
R.ffi.throwCasesSingletonErrorC(L[558],true,L[559]);
}
}
$step1498 = 12;
$al1505 = L[560];
var $temp_branch1561 = function($test$ast1514) {
var $step1562 = 0;
var $ans1563 = D;
var $al1564 = L[557];
try {
if(R.isActivationRecord($test$ast1514)) {
$step1562 = $test$ast1514.step;
$al1564 = $test$ast1514.from;
$ans1563 = $test$ast1514.ans;
test$ast1514 = $test$ast1514.args[0];
lhs$ast1517 = $test$ast1514.vars[0];
rhs$ast1525 = $test$ast1514.vars[1];
anf_arg1521 = $test$ast1514.vars[2];
ed$lhs1547 = $test$ast1514.vars[3];
anf_arg1529 = $test$ast1514.vars[4];
ed$rhs1545 = $test$ast1514.vars[5];
anf_method_obj1555 = $test$ast1514.vars[6];
anf_method_obj1537 = $test$ast1514.vars[7];
anf_arg1538 = $test$ast1514.vars[8];
anf_arg1539 = $test$ast1514.vars[9];
anf_arg1556 = $test$ast1514.vars[10];
anf_arg1557 = $test$ast1514.vars[11];
anf_method_obj1550 = $test$ast1514.vars[12];
anf_array1551 = $test$ast1514.vars[13];
anf_arg1558 = $test$ast1514.vars[14];
} else {
var test$ast1514 = $test$ast1514;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1562) {
case 0: $al1564 = L[530];
var lhs$ast1517 = G(test$ast1514,"left",L[530]);
$al1564 = L[531];
var anf_bracket1515 = G(test$ast1514,"right",L[531]);
$al1564 = L[532];
var rhs$ast1525 = G(anf_bracket1515,"value",L[532]);
$step1562 = 1;
$al1564 = L[533];
$field1565 = R.getColonFieldLoc(ED19,"text",L[533]);
if(R.isMethod($field1565)) {
$ans1563 = $field1565.full_meth(ED19,("left side"));
} else {
if(!(R.isFunction($field1565))) {
R.ffi.throwNonFunApp(L[533],$field1565);
}
$ans1563 = $field1565.app(("left side"));
}
break;
case 1: var anf_arg1521 = $ans1563;
$al1564 = L[534];
var anf_method_obj1518 = G(ED19,"locs",L[534]);
$al1564 = L[535];
var anf_arg1519 = G(lhs$ast1517,"l",L[535]);
$step1562 = 2;
$al1564 = L[534];
$field1566 = R.getColonFieldLoc(anf_method_obj1518,"make1",L[534]);
if(R.isMethod($field1566)) {
$ans1563 = $field1566.full_meth(anf_method_obj1518,anf_arg1519);
} else {
if(!(R.isFunction($field1566))) {
R.ffi.throwNonFunApp(L[534],$field1566);
}
$ans1563 = $field1566.app(anf_arg1519);
}
break;
case 2: var anf_arg1522 = $ans1563;
$step1562 = 3;
$al1564 = L[536];
$field1567 = R.getColonFieldLoc(ED19,"highlight",L[536]);
if(R.isMethod($field1567)) {
$ans1563 = $field1567.full_meth(ED19,anf_arg1521,anf_arg1522,(0));
} else {
if(!(R.isFunction($field1567))) {
R.ffi.throwNonFunApp(L[536],$field1567);
}
$ans1563 = $field1567.app(anf_arg1521,anf_arg1522,(0));
}
break;
case 3: var ed$lhs1547 = $ans1563;
$step1562 = 4;
$al1564 = L[537];
$field1568 = R.getColonFieldLoc(ED19,"text",L[537]);
if(R.isMethod($field1568)) {
$ans1563 = $field1568.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field1568))) {
R.ffi.throwNonFunApp(L[537],$field1568);
}
$ans1563 = $field1568.app(("predicate"));
}
break;
case 4: var anf_arg1529 = $ans1563;
$al1564 = L[538];
var anf_method_obj1526 = G(ED19,"locs",L[538]);
$al1564 = L[539];
var anf_arg1527 = G(rhs$ast1525,"l",L[539]);
$step1562 = 5;
$al1564 = L[538];
$field1569 = R.getColonFieldLoc(anf_method_obj1526,"make1",L[538]);
if(R.isMethod($field1569)) {
$ans1563 = $field1569.full_meth(anf_method_obj1526,anf_arg1527);
} else {
if(!(R.isFunction($field1569))) {
R.ffi.throwNonFunApp(L[538],$field1569);
}
$ans1563 = $field1569.app(anf_arg1527);
}
break;
case 5: var anf_arg1530 = $ans1563;
$step1562 = 6;
$al1564 = L[540];
$field1570 = R.getColonFieldLoc(ED19,"highlight",L[540]);
if(R.isMethod($field1570)) {
$ans1563 = $field1570.full_meth(ED19,anf_arg1529,anf_arg1530,(2));
} else {
if(!(R.isFunction($field1570))) {
R.ffi.throwNonFunApp(L[540],$field1570);
}
$ans1563 = $field1570.app(anf_arg1529,anf_arg1530,(2));
}
break;
case 6: var ed$rhs1545 = $ans1563;
$al1564 = L[541];
var anf_method_obj1555 = G(ED19,"error",L[541]);
$al1564 = L[542];
var anf_method_obj1537 = G(ED19,"para",L[542]);
$step1562 = 7;
$al1564 = L[543];
$field1571 = R.getColonFieldLoc(ED19,"text",L[543]);
if(R.isMethod($field1571)) {
$ans1563 = $field1571.full_meth(ED19,("The test operator "));
} else {
if(!(R.isFunction($field1571))) {
R.ffi.throwNonFunApp(L[543],$field1571);
}
$ans1563 = $field1571.app(("The test operator "));
}
break;
case 7: var anf_arg1538 = $ans1563;
$step1562 = 8;
$al1564 = L[544];
$field1572 = R.getColonFieldLoc(ED19,"text",L[544]);
if(R.isMethod($field1572)) {
$ans1563 = $field1572.full_meth(ED19,("raises-satisfies"));
} else {
if(!(R.isFunction($field1572))) {
R.ffi.throwNonFunApp(L[544],$field1572);
}
$ans1563 = $field1572.app(("raises-satisfies"));
}
break;
case 8: var anf_arg1534 = $ans1563;
$step1562 = 9;
$al1564 = L[545];
$field1573 = R.getColonFieldLoc(ED19,"code",L[545]);
if(R.isMethod($field1573)) {
$ans1563 = $field1573.full_meth(ED19,anf_arg1534);
} else {
if(!(R.isFunction($field1573))) {
R.ffi.throwNonFunApp(L[545],$field1573);
}
$ans1563 = $field1573.app(anf_arg1534);
}
break;
case 9: var anf_arg1539 = $ans1563;
$step1562 = 10;
$al1564 = L[546];
$field1574 = R.getColonFieldLoc(ED19,"text",L[546]);
if(R.isMethod($field1574)) {
$ans1563 = $field1574.full_meth(ED19,(" failed for the test:"));
} else {
if(!(R.isFunction($field1574))) {
R.ffi.throwNonFunApp(L[546],$field1574);
}
$ans1563 = $field1574.app((" failed for the test:"));
}
break;
case 10: var anf_arg1540 = $ans1563;
$step1562 = 11;
$al1564 = L[542];
$field1575 = R.getColonFieldLoc(anf_method_obj1537,"make3",L[542]);
if(R.isMethod($field1575)) {
$ans1563 = $field1575.full_meth(anf_method_obj1537,anf_arg1538,anf_arg1539,anf_arg1540);
} else {
if(!(R.isFunction($field1575))) {
R.ffi.throwNonFunApp(L[542],$field1575);
}
$ans1563 = $field1575.app(anf_arg1538,anf_arg1539,anf_arg1540);
}
break;
case 11: var anf_arg1556 = $ans1563;
$al1564 = L[547];
var anf_arg1542 = G(self1500,"loc",L[547]);
$step1562 = 12;
$al1564 = L[548];
$field1576 = R.getColonFieldLoc(ED19,"cmcode",L[548]);
if(R.isMethod($field1576)) {
$ans1563 = $field1576.full_meth(ED19,anf_arg1542);
} else {
if(!(R.isFunction($field1576))) {
R.ffi.throwNonFunApp(L[548],$field1576);
}
$ans1563 = $field1576.app(anf_arg1542);
}
break;
case 12: var anf_arg1557 = $ans1563;
$al1564 = L[549];
var anf_method_obj1550 = G(ED19,"para",L[549]);
$al1564 = L[550];
var anf_array1551 = R.makeArrayN((7));
$step1562 = 13;
$al1564 = L[551];
$field1577 = R.getColonFieldLoc(ED19,"text",L[551]);
if(R.isMethod($field1577)) {
$ans1563 = $field1577.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field1577))) {
R.ffi.throwNonFunApp(L[551],$field1577);
}
$ans1563 = $field1577.app(("It succeeds only if the "));
}
break;
case 13: anf_array1551[0] = $ans1563;
anf_array1551[1] = ed$rhs1545;
$step1562 = 14;
$al1564 = L[552];
$field1578 = R.getColonFieldLoc(ED19,"text",L[552]);
if(R.isMethod($field1578)) {
$ans1563 = $field1578.full_meth(ED19,(" is satisfied when the value of the exception raised by the "));
} else {
if(!(R.isFunction($field1578))) {
R.ffi.throwNonFunApp(L[552],$field1578);
}
$ans1563 = $field1578.app((" is satisfied when the value of the exception raised by the "));
}
break;
case 14: anf_array1551[2] = $ans1563;
anf_array1551[3] = ed$lhs1547;
$step1562 = 15;
$al1564 = L[553];
$field1579 = R.getColonFieldLoc(ED19,"text",L[553]);
if(R.isMethod($field1579)) {
$ans1563 = $field1579.full_meth(ED19,(" is applied to it. The value of the "));
} else {
if(!(R.isFunction($field1579))) {
R.ffi.throwNonFunApp(L[553],$field1579);
}
$ans1563 = $field1579.app((" is applied to it. The value of the "));
}
break;
case 15: anf_array1551[4] = $ans1563;
anf_array1551[5] = ed$lhs1547;
$step1562 = 16;
$al1564 = L[554];
$field1580 = R.getColonFieldLoc(ED19,"text",L[554]);
if(R.isMethod($field1580)) {
$ans1563 = $field1580.full_meth(ED19,(" was:"));
} else {
if(!(R.isFunction($field1580))) {
R.ffi.throwNonFunApp(L[554],$field1580);
}
$ans1563 = $field1580.app((" was:"));
}
break;
case 16: anf_array1551[6] = $ans1563;
$step1562 = 17;
$al1564 = L[549];
$field1581 = R.getColonFieldLoc(anf_method_obj1550,"make",L[549]);
if(R.isMethod($field1581)) {
$ans1563 = $field1581.full_meth(anf_method_obj1550,anf_array1551);
} else {
if(!(R.isFunction($field1581))) {
R.ffi.throwNonFunApp(L[549],$field1581);
}
$ans1563 = $field1581.app(anf_array1551);
}
break;
case 17: var anf_arg1558 = $ans1563;
$al1564 = L[555];
var anf_arg1553 = G(self1500,"exn",L[555]);
$step1562 = 18;
$al1564 = L[556];
$field1582 = R.getColonFieldLoc(ED19,"embed",L[556]);
if(R.isMethod($field1582)) {
$ans1563 = $field1582.full_meth(ED19,anf_arg1553);
} else {
if(!(R.isFunction($field1582))) {
R.ffi.throwNonFunApp(L[556],$field1582);
}
$ans1563 = $field1582.app(anf_arg1553);
}
break;
case 18: var anf_arg1559 = $ans1563;
$step1562 = 19;
$al1564 = L[541];
$field1583 = R.getColonFieldLoc(anf_method_obj1555,"make4",L[541]);
if(R.isMethod($field1583)) {
$ans1563 = $field1583.full_meth(anf_method_obj1555,anf_arg1556,anf_arg1557,anf_arg1558,anf_arg1559);
} else {
if(!(R.isFunction($field1583))) {
R.ffi.throwNonFunApp(L[541],$field1583);
}
$ans1563 = $field1583.app(anf_arg1556,anf_arg1557,anf_arg1558,anf_arg1559);
}
break;
case 19: ++R.GAS;
return $ans1563;
default: throw "No case numbered " + $step1562 + " in $temp_branch1561";
}
}
} catch($e1584) {
if(R.isCont($e1584) && ($step1562 !== 19)) {
$e1584.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1564,$temp_branch1561,$step1562,[test$ast1514],[lhs$ast1517,rhs$ast1525,anf_arg1521,ed$lhs1547,anf_arg1529,ed$rhs1545,anf_method_obj1555,anf_method_obj1537,anf_arg1538,anf_arg1539,anf_arg1556,anf_arg1557,anf_method_obj1550,anf_array1551,anf_arg1558]);
}
if(R.isPyretException($e1584)) {
$e1584.pyretStack.push($al1564);
}
throw $e1584;
}
};
$ans1504 = cases1513.$app_fields($temp_branch1561,[false]);
break;
case 9: if(cases1513.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[562],false,L[559]);
}
$step1498 = 12;
$al1505 = L[561];
$field1585 = R.getColonFieldLoc(self1500,"render-reason",L[561]);
if(R.isMethod($field1585)) {
$ans1504 = $field1585.full_meth(self1500);
} else {
if(!(R.isFunction($field1585))) {
R.ffi.throwNonFunApp(L[561],$field1585);
}
$ans1504 = $field1585.app();
}
break;
case 10: $step1498 = 12;
$al1505 = L[559];
$ans1504 = R.throwNoCasesMatched(L[559],cases1513);
break;
case 11: $step1498 = 12;
$al1505 = L[565];
$field1587 = R.getColonFieldLoc(self1500,"render-reason",L[565]);
if(R.isMethod($field1587)) {
$ans1504 = $field1587.full_meth(self1500);
} else {
if(!(R.isFunction($field1587))) {
R.ffi.throwNonFunApp(L[565],$field1587);
}
$ans1504 = $field1587.app();
}
break;
case 12: ++R.GAS;
return $ans1504;
default: throw "No case numbered " + $step1498 + " in $temp_full1499";
}
}
} catch($e1590) {
if(R.isCont($e1590) && ($step1498 !== 12)) {
$e1590.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1505,$temp_full1499,$step1498,[self1500,maybe$stack$loc1501,src$available1502,maybe$ast1503],[cases1513]);
}
if(R.isPyretException($e1590)) {
$e1590.pyretStack.push($al1505);
}
throw $e1590;
}
};
var anf_variant_member1914 = R.makeMethod3($temp_full1499,"render-fancy-reason");
var $temp_full1592 = function($self1593) {
var $step1591 = 0;
var $ans1594 = D;
var $al1595 = L[574];
try {
if(R.isActivationRecord($self1593)) {
$step1591 = $self1593.step;
$al1595 = $self1593.from;
$ans1594 = $self1593.ans;
self1593 = $self1593.args[0];
anf_method_obj1606 = $self1593.vars[0];
anf_method_obj1597 = $self1593.vars[1];
anf_arg1607 = $self1593.vars[2];
anf_method_obj1603 = $self1593.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[574],1,$t);
}
var self1593 = $self1593;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1591) {
case 0: $al1595 = L[567];
var anf_method_obj1606 = G(ED19,"error",L[567]);
$al1595 = L[568];
var anf_method_obj1597 = G(ED19,"para",L[568]);
$step1591 = 1;
$al1595 = L[569];
$field1596 = R.getColonFieldLoc(ED19,"text",L[569]);
if(R.isMethod($field1596)) {
$ans1594 = $field1596.full_meth(ED19,("Predicate failed for exception:"));
} else {
if(!(R.isFunction($field1596))) {
R.ffi.throwNonFunApp(L[569],$field1596);
}
$ans1594 = $field1596.app(("Predicate failed for exception:"));
}
break;
case 1: var anf_arg1598 = $ans1594;
$step1591 = 2;
$al1595 = L[568];
$field1599 = R.getColonFieldLoc(anf_method_obj1597,"make1",L[568]);
if(R.isMethod($field1599)) {
$ans1594 = $field1599.full_meth(anf_method_obj1597,anf_arg1598);
} else {
if(!(R.isFunction($field1599))) {
R.ffi.throwNonFunApp(L[568],$field1599);
}
$ans1594 = $field1599.app(anf_arg1598);
}
break;
case 2: var anf_arg1607 = $ans1594;
$al1595 = L[570];
var anf_method_obj1603 = G(ED19,"para",L[570]);
$al1595 = L[571];
var anf_arg1600 = G(self1593,"exn",L[571]);
$step1591 = 3;
$al1595 = L[573];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1595,exn$unwrap7);
}
$ans1594 = exn$unwrap7.app(anf_arg1600);
break;
case 3: var anf_arg1601 = $ans1594;
$step1591 = 4;
$al1595 = L[572];
$field1602 = R.getColonFieldLoc(ED19,"embed",L[572]);
if(R.isMethod($field1602)) {
$ans1594 = $field1602.full_meth(ED19,anf_arg1601);
} else {
if(!(R.isFunction($field1602))) {
R.ffi.throwNonFunApp(L[572],$field1602);
}
$ans1594 = $field1602.app(anf_arg1601);
}
break;
case 4: var anf_arg1604 = $ans1594;
$step1591 = 5;
$al1595 = L[570];
$field1605 = R.getColonFieldLoc(anf_method_obj1603,"make1",L[570]);
if(R.isMethod($field1605)) {
$ans1594 = $field1605.full_meth(anf_method_obj1603,anf_arg1604);
} else {
if(!(R.isFunction($field1605))) {
R.ffi.throwNonFunApp(L[570],$field1605);
}
$ans1594 = $field1605.app(anf_arg1604);
}
break;
case 5: var anf_arg1608 = $ans1594;
$step1591 = 6;
$al1595 = L[567];
$field1609 = R.getColonFieldLoc(anf_method_obj1606,"make2",L[567]);
if(R.isMethod($field1609)) {
$ans1594 = $field1609.full_meth(anf_method_obj1606,anf_arg1607,anf_arg1608);
} else {
if(!(R.isFunction($field1609))) {
R.ffi.throwNonFunApp(L[567],$field1609);
}
$ans1594 = $field1609.app(anf_arg1607,anf_arg1608);
}
break;
case 6: ++R.GAS;
return $ans1594;
default: throw "No case numbered " + $step1591 + " in $temp_full1592";
}
}
} catch($e1610) {
if(R.isCont($e1610) && ($step1591 !== 6)) {
$e1610.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1595,$temp_full1592,$step1591,[self1593],[anf_method_obj1606,anf_method_obj1597,anf_arg1607,anf_method_obj1603]);
}
if(R.isPyretException($e1610)) {
$e1610.pyretStack.push($al1595);
}
throw $e1610;
}
};
var anf_variant_member1915 = R.makeMethod0($temp_full1592,"render-reason");
var $temp_full1612 = function($self1613) {
var $step1611 = 0;
var $ans1614 = D;
var $al1615 = L[584];
try {
if(R.isActivationRecord($self1613)) {
$step1611 = $self1613.step;
$al1615 = $self1613.from;
$ans1614 = $self1613.ans;
self1613 = $self1613.args[0];
anf_arg1623 = $self1613.vars[0];
anf_arg1624 = $self1613.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[584],1,$t);
}
var self1613 = $self1613;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1611) {
case 0: $al1615 = L[575];
var anf_arg1616 = G(self1613,"loc",L[575]);
$step1611 = 1;
$al1615 = L[576];
$field1617 = R.getColonFieldLoc(VS26,"vs-value",L[576]);
if(R.isMethod($field1617)) {
$ans1614 = $field1617.full_meth(VS26,anf_arg1616);
} else {
if(!(R.isFunction($field1617))) {
R.ffi.throwNonFunApp(L[576],$field1617);
}
$ans1614 = $field1617.app(anf_arg1616);
}
break;
case 1: var anf_arg1623 = $ans1614;
$al1615 = L[577];
var anf_arg1618 = G(self1613,"exn",L[577]);
$step1611 = 2;
$al1615 = L[583];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1615,exn$unwrap7);
}
$ans1614 = exn$unwrap7.app(anf_arg1618);
break;
case 2: var anf_arg1619 = $ans1614;
$step1611 = 3;
$al1615 = L[578];
$field1620 = R.getColonFieldLoc(VS26,"vs-value",L[578]);
if(R.isMethod($field1620)) {
$ans1614 = $field1620.full_meth(VS26,anf_arg1619);
} else {
if(!(R.isFunction($field1620))) {
R.ffi.throwNonFunApp(L[578],$field1620);
}
$ans1614 = $field1620.app(anf_arg1619);
}
break;
case 3: var anf_arg1624 = $ans1614;
$al1615 = L[579];
var anf_arg1621 = G(self1613,"pred",L[579]);
$step1611 = 4;
$al1615 = L[580];
$field1622 = R.getColonFieldLoc(VS26,"vs-value",L[580]);
if(R.isMethod($field1622)) {
$ans1614 = $field1622.full_meth(VS26,anf_arg1621);
} else {
if(!(R.isFunction($field1622))) {
R.ffi.throwNonFunApp(L[580],$field1622);
}
$ans1614 = $field1622.app(anf_arg1621);
}
break;
case 4: var anf_arg1625 = $ans1614;
$step1611 = 5;
$al1615 = L[581];
$field1626 = R.getColonFieldLoc(list220,"make3",L[581]);
if(R.isMethod($field1626)) {
$ans1614 = $field1626.full_meth(list220,anf_arg1623,anf_arg1624,anf_arg1625);
} else {
if(!(R.isFunction($field1626))) {
R.ffi.throwNonFunApp(L[581],$field1626);
}
$ans1614 = $field1626.app(anf_arg1623,anf_arg1624,anf_arg1625);
}
break;
case 5: var anf_arg1627 = $ans1614;
$step1611 = 6;
$al1615 = L[582];
$field1628 = R.getColonFieldLoc(VS26,"vs-constr",L[582]);
if(R.isMethod($field1628)) {
$ans1614 = $field1628.full_meth(VS26,("failure-raise-not-satisfied"),anf_arg1627);
} else {
if(!(R.isFunction($field1628))) {
R.ffi.throwNonFunApp(L[582],$field1628);
}
$ans1614 = $field1628.app(("failure-raise-not-satisfied"),anf_arg1627);
}
break;
case 6: ++R.GAS;
return $ans1614;
default: throw "No case numbered " + $step1611 + " in $temp_full1612";
}
}
} catch($e1629) {
if(R.isCont($e1629) && ($step1611 !== 6)) {
$e1629.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1615,$temp_full1612,$step1611,[self1613],[anf_arg1623,anf_arg1624]);
}
if(R.isPyretException($e1629)) {
$e1629.pyretStack.push($al1615);
}
throw $e1629;
}
};
var anf_variant_member1916 = R.makeMethod0($temp_full1612,"_output");
var $temp_full1631 = function($self1632,$maybe$stack$loc1633,$src$available1634,$maybe$ast1635) {
var $step1630 = 0;
var $ans1636 = D;
var $al1637 = L[627];
try {
if(R.isActivationRecord($self1632)) {
$step1630 = $self1632.step;
$al1637 = $self1632.from;
$ans1636 = $self1632.ans;
self1632 = $self1632.args[0];
maybe$stack$loc1633 = $self1632.args[1];
src$available1634 = $self1632.args[2];
maybe$ast1635 = $self1632.args[3];
cases1645 = $self1632.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[627],4,$t);
}
var self1632 = $self1632;
var maybe$stack$loc1633 = $maybe$stack$loc1633;
var src$available1634 = $src$available1634;
var maybe$ast1635 = $maybe$ast1635;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1630) {
case 0: $al1637 = L[585];
var anf_method_obj1638 = G(self1632,"loc",L[585]);
$step1630 = 1;
$al1637 = L[586];
$field1639 = R.getColonFieldLoc(anf_method_obj1638,"is-builtin",L[586]);
if(R.isMethod($field1639)) {
$ans1636 = $field1639.full_meth(anf_method_obj1638);
} else {
if(!(R.isFunction($field1639))) {
R.ffi.throwNonFunApp(L[586],$field1639);
}
$ans1636 = $field1639.app();
}
break;
case 1: var anf_arg1640 = $ans1636;
$al1637 = L[586];
var anf_if1721 = R.checkWrapBoolean(anf_arg1640);
$step1630 = R.isPyretTrue(anf_if1721)?2:3;
break;
case 2: $step1630 = 12;
$al1637 = L[587];
$field1641 = R.getColonFieldLoc(self1632,"render-reason",L[587]);
if(R.isMethod($field1641)) {
$ans1636 = $field1641.full_meth(self1632);
} else {
if(!(R.isFunction($field1641))) {
R.ffi.throwNonFunApp(L[587],$field1641);
}
$ans1636 = $field1641.app();
}
break;
case 3: $al1637 = L[588];
var anf_arg1642 = G(self1632,"loc",L[588]);
$step1630 = 4;
$al1637 = L[589];
if(!(R.isFunction(src$available1634))) {
R.ffi.throwNonFunApp($al1637,src$available1634);
}
$ans1636 = src$available1634.app(anf_arg1642);
break;
case 4: var anf_arg1643 = $ans1636;
$al1637 = L[589];
var anf_if1720 = R.checkWrapBoolean(anf_arg1643);
$step1630 = R.isPyretTrue(anf_if1720)?5:11;
break;
case 5: $al1637 = L[590];
var anf_arg1644 = G(self1632,"loc",L[590]);
$step1630 = 6;
$al1637 = L[625];
if(!(R.isFunction(maybe$ast1635))) {
R.ffi.throwNonFunApp($al1637,maybe$ast1635);
}
$ans1636 = maybe$ast1635.app(anf_arg1644);
break;
case 6: var cases1645 = $ans1636;
$step1630 = 7;
$al1637 = L[624];
R._checkAnn(L[624],Option121,cases1645);
break;
case 7: var $cases_dispatch1718 = {"some":8,
"none":9};
$al1637 = L[620];
$step1630 = $cases_dispatch1718[cases1645.$name] || 10;
break;
case 8: if(cases1645.$arity !== 1) {
if(cases1645.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[619],1,cases1645.$arity,L[620]);
} else {
R.ffi.throwCasesSingletonErrorC(L[619],true,L[620]);
}
}
$step1630 = 12;
$al1637 = L[621];
var $temp_branch1693 = function($test$ast1646) {
var $step1694 = 0;
var $ans1695 = D;
var $al1696 = L[618];
try {
if(R.isActivationRecord($test$ast1646)) {
$step1694 = $test$ast1646.step;
$al1696 = $test$ast1646.from;
$ans1695 = $test$ast1646.ans;
test$ast1646 = $test$ast1646.args[0];
lhs$ast1649 = $test$ast1646.vars[0];
rhs$ast1657 = $test$ast1646.vars[1];
anf_arg1653 = $test$ast1646.vars[2];
ed$lhs1679 = $test$ast1646.vars[3];
anf_arg1661 = $test$ast1646.vars[4];
ed$rhs1677 = $test$ast1646.vars[5];
anf_method_obj1687 = $test$ast1646.vars[6];
anf_method_obj1669 = $test$ast1646.vars[7];
anf_arg1670 = $test$ast1646.vars[8];
anf_arg1671 = $test$ast1646.vars[9];
anf_arg1688 = $test$ast1646.vars[10];
anf_arg1689 = $test$ast1646.vars[11];
anf_method_obj1682 = $test$ast1646.vars[12];
anf_array1683 = $test$ast1646.vars[13];
anf_arg1690 = $test$ast1646.vars[14];
} else {
var test$ast1646 = $test$ast1646;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1694) {
case 0: $al1696 = L[591];
var lhs$ast1649 = G(test$ast1646,"left",L[591]);
$al1696 = L[592];
var anf_bracket1647 = G(test$ast1646,"right",L[592]);
$al1696 = L[593];
var rhs$ast1657 = G(anf_bracket1647,"value",L[593]);
$step1694 = 1;
$al1696 = L[594];
$field1697 = R.getColonFieldLoc(ED19,"text",L[594]);
if(R.isMethod($field1697)) {
$ans1695 = $field1697.full_meth(ED19,("left side"));
} else {
if(!(R.isFunction($field1697))) {
R.ffi.throwNonFunApp(L[594],$field1697);
}
$ans1695 = $field1697.app(("left side"));
}
break;
case 1: var anf_arg1653 = $ans1695;
$al1696 = L[595];
var anf_method_obj1650 = G(ED19,"locs",L[595]);
$al1696 = L[596];
var anf_arg1651 = G(lhs$ast1649,"l",L[596]);
$step1694 = 2;
$al1696 = L[595];
$field1698 = R.getColonFieldLoc(anf_method_obj1650,"make1",L[595]);
if(R.isMethod($field1698)) {
$ans1695 = $field1698.full_meth(anf_method_obj1650,anf_arg1651);
} else {
if(!(R.isFunction($field1698))) {
R.ffi.throwNonFunApp(L[595],$field1698);
}
$ans1695 = $field1698.app(anf_arg1651);
}
break;
case 2: var anf_arg1654 = $ans1695;
$step1694 = 3;
$al1696 = L[597];
$field1699 = R.getColonFieldLoc(ED19,"highlight",L[597]);
if(R.isMethod($field1699)) {
$ans1695 = $field1699.full_meth(ED19,anf_arg1653,anf_arg1654,(0));
} else {
if(!(R.isFunction($field1699))) {
R.ffi.throwNonFunApp(L[597],$field1699);
}
$ans1695 = $field1699.app(anf_arg1653,anf_arg1654,(0));
}
break;
case 3: var ed$lhs1679 = $ans1695;
$step1694 = 4;
$al1696 = L[598];
$field1700 = R.getColonFieldLoc(ED19,"text",L[598]);
if(R.isMethod($field1700)) {
$ans1695 = $field1700.full_meth(ED19,("predicate"));
} else {
if(!(R.isFunction($field1700))) {
R.ffi.throwNonFunApp(L[598],$field1700);
}
$ans1695 = $field1700.app(("predicate"));
}
break;
case 4: var anf_arg1661 = $ans1695;
$al1696 = L[599];
var anf_method_obj1658 = G(ED19,"locs",L[599]);
$al1696 = L[600];
var anf_arg1659 = G(rhs$ast1657,"l",L[600]);
$step1694 = 5;
$al1696 = L[599];
$field1701 = R.getColonFieldLoc(anf_method_obj1658,"make1",L[599]);
if(R.isMethod($field1701)) {
$ans1695 = $field1701.full_meth(anf_method_obj1658,anf_arg1659);
} else {
if(!(R.isFunction($field1701))) {
R.ffi.throwNonFunApp(L[599],$field1701);
}
$ans1695 = $field1701.app(anf_arg1659);
}
break;
case 5: var anf_arg1662 = $ans1695;
$step1694 = 6;
$al1696 = L[601];
$field1702 = R.getColonFieldLoc(ED19,"highlight",L[601]);
if(R.isMethod($field1702)) {
$ans1695 = $field1702.full_meth(ED19,anf_arg1661,anf_arg1662,(2));
} else {
if(!(R.isFunction($field1702))) {
R.ffi.throwNonFunApp(L[601],$field1702);
}
$ans1695 = $field1702.app(anf_arg1661,anf_arg1662,(2));
}
break;
case 6: var ed$rhs1677 = $ans1695;
$al1696 = L[602];
var anf_method_obj1687 = G(ED19,"error",L[602]);
$al1696 = L[603];
var anf_method_obj1669 = G(ED19,"para",L[603]);
$step1694 = 7;
$al1696 = L[604];
$field1703 = R.getColonFieldLoc(ED19,"text",L[604]);
if(R.isMethod($field1703)) {
$ans1695 = $field1703.full_meth(ED19,("The test operator "));
} else {
if(!(R.isFunction($field1703))) {
R.ffi.throwNonFunApp(L[604],$field1703);
}
$ans1695 = $field1703.app(("The test operator "));
}
break;
case 7: var anf_arg1670 = $ans1695;
$step1694 = 8;
$al1696 = L[605];
$field1704 = R.getColonFieldLoc(ED19,"text",L[605]);
if(R.isMethod($field1704)) {
$ans1695 = $field1704.full_meth(ED19,("raises-satisfies"));
} else {
if(!(R.isFunction($field1704))) {
R.ffi.throwNonFunApp(L[605],$field1704);
}
$ans1695 = $field1704.app(("raises-satisfies"));
}
break;
case 8: var anf_arg1666 = $ans1695;
$step1694 = 9;
$al1696 = L[606];
$field1705 = R.getColonFieldLoc(ED19,"code",L[606]);
if(R.isMethod($field1705)) {
$ans1695 = $field1705.full_meth(ED19,anf_arg1666);
} else {
if(!(R.isFunction($field1705))) {
R.ffi.throwNonFunApp(L[606],$field1705);
}
$ans1695 = $field1705.app(anf_arg1666);
}
break;
case 9: var anf_arg1671 = $ans1695;
$step1694 = 10;
$al1696 = L[607];
$field1706 = R.getColonFieldLoc(ED19,"text",L[607]);
if(R.isMethod($field1706)) {
$ans1695 = $field1706.full_meth(ED19,(" failed for the test:"));
} else {
if(!(R.isFunction($field1706))) {
R.ffi.throwNonFunApp(L[607],$field1706);
}
$ans1695 = $field1706.app((" failed for the test:"));
}
break;
case 10: var anf_arg1672 = $ans1695;
$step1694 = 11;
$al1696 = L[603];
$field1707 = R.getColonFieldLoc(anf_method_obj1669,"make3",L[603]);
if(R.isMethod($field1707)) {
$ans1695 = $field1707.full_meth(anf_method_obj1669,anf_arg1670,anf_arg1671,anf_arg1672);
} else {
if(!(R.isFunction($field1707))) {
R.ffi.throwNonFunApp(L[603],$field1707);
}
$ans1695 = $field1707.app(anf_arg1670,anf_arg1671,anf_arg1672);
}
break;
case 11: var anf_arg1688 = $ans1695;
$al1696 = L[608];
var anf_arg1674 = G(self1632,"loc",L[608]);
$step1694 = 12;
$al1696 = L[609];
$field1708 = R.getColonFieldLoc(ED19,"cmcode",L[609]);
if(R.isMethod($field1708)) {
$ans1695 = $field1708.full_meth(ED19,anf_arg1674);
} else {
if(!(R.isFunction($field1708))) {
R.ffi.throwNonFunApp(L[609],$field1708);
}
$ans1695 = $field1708.app(anf_arg1674);
}
break;
case 12: var anf_arg1689 = $ans1695;
$al1696 = L[610];
var anf_method_obj1682 = G(ED19,"para",L[610]);
$al1696 = L[611];
var anf_array1683 = R.makeArrayN((7));
$step1694 = 13;
$al1696 = L[612];
$field1709 = R.getColonFieldLoc(ED19,"text",L[612]);
if(R.isMethod($field1709)) {
$ans1695 = $field1709.full_meth(ED19,("It succeeds only if the "));
} else {
if(!(R.isFunction($field1709))) {
R.ffi.throwNonFunApp(L[612],$field1709);
}
$ans1695 = $field1709.app(("It succeeds only if the "));
}
break;
case 13: anf_array1683[0] = $ans1695;
anf_array1683[1] = ed$rhs1677;
$step1694 = 14;
$al1696 = L[613];
$field1710 = R.getColonFieldLoc(ED19,"text",L[613]);
if(R.isMethod($field1710)) {
$ans1695 = $field1710.full_meth(ED19,(" is not satisfied when the value of the exception raised by the "));
} else {
if(!(R.isFunction($field1710))) {
R.ffi.throwNonFunApp(L[613],$field1710);
}
$ans1695 = $field1710.app((" is not satisfied when the value of the exception raised by the "));
}
break;
case 14: anf_array1683[2] = $ans1695;
anf_array1683[3] = ed$lhs1679;
$step1694 = 15;
$al1696 = L[614];
$field1711 = R.getColonFieldLoc(ED19,"text",L[614]);
if(R.isMethod($field1711)) {
$ans1695 = $field1711.full_meth(ED19,(" is applied to it. The value of the "));
} else {
if(!(R.isFunction($field1711))) {
R.ffi.throwNonFunApp(L[614],$field1711);
}
$ans1695 = $field1711.app((" is applied to it. The value of the "));
}
break;
case 15: anf_array1683[4] = $ans1695;
anf_array1683[5] = ed$lhs1679;
$step1694 = 16;
$al1696 = L[615];
$field1712 = R.getColonFieldLoc(ED19,"text",L[615]);
if(R.isMethod($field1712)) {
$ans1695 = $field1712.full_meth(ED19,(" is:"));
} else {
if(!(R.isFunction($field1712))) {
R.ffi.throwNonFunApp(L[615],$field1712);
}
$ans1695 = $field1712.app((" is:"));
}
break;
case 16: anf_array1683[6] = $ans1695;
$step1694 = 17;
$al1696 = L[610];
$field1713 = R.getColonFieldLoc(anf_method_obj1682,"make",L[610]);
if(R.isMethod($field1713)) {
$ans1695 = $field1713.full_meth(anf_method_obj1682,anf_array1683);
} else {
if(!(R.isFunction($field1713))) {
R.ffi.throwNonFunApp(L[610],$field1713);
}
$ans1695 = $field1713.app(anf_array1683);
}
break;
case 17: var anf_arg1690 = $ans1695;
$al1696 = L[616];
var anf_arg1685 = G(self1632,"exn",L[616]);
$step1694 = 18;
$al1696 = L[617];
$field1714 = R.getColonFieldLoc(ED19,"embed",L[617]);
if(R.isMethod($field1714)) {
$ans1695 = $field1714.full_meth(ED19,anf_arg1685);
} else {
if(!(R.isFunction($field1714))) {
R.ffi.throwNonFunApp(L[617],$field1714);
}
$ans1695 = $field1714.app(anf_arg1685);
}
break;
case 18: var anf_arg1691 = $ans1695;
$step1694 = 19;
$al1696 = L[602];
$field1715 = R.getColonFieldLoc(anf_method_obj1687,"make4",L[602]);
if(R.isMethod($field1715)) {
$ans1695 = $field1715.full_meth(anf_method_obj1687,anf_arg1688,anf_arg1689,anf_arg1690,anf_arg1691);
} else {
if(!(R.isFunction($field1715))) {
R.ffi.throwNonFunApp(L[602],$field1715);
}
$ans1695 = $field1715.app(anf_arg1688,anf_arg1689,anf_arg1690,anf_arg1691);
}
break;
case 19: ++R.GAS;
return $ans1695;
default: throw "No case numbered " + $step1694 + " in $temp_branch1693";
}
}
} catch($e1716) {
if(R.isCont($e1716) && ($step1694 !== 19)) {
$e1716.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1696,$temp_branch1693,$step1694,[test$ast1646],[lhs$ast1649,rhs$ast1657,anf_arg1653,ed$lhs1679,anf_arg1661,ed$rhs1677,anf_method_obj1687,anf_method_obj1669,anf_arg1670,anf_arg1671,anf_arg1688,anf_arg1689,anf_method_obj1682,anf_array1683,anf_arg1690]);
}
if(R.isPyretException($e1716)) {
$e1716.pyretStack.push($al1696);
}
throw $e1716;
}
};
$ans1636 = cases1645.$app_fields($temp_branch1693,[false]);
break;
case 9: if(cases1645.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[623],false,L[620]);
}
$step1630 = 12;
$al1637 = L[622];
$field1717 = R.getColonFieldLoc(self1632,"render-reason",L[622]);
if(R.isMethod($field1717)) {
$ans1636 = $field1717.full_meth(self1632);
} else {
if(!(R.isFunction($field1717))) {
R.ffi.throwNonFunApp(L[622],$field1717);
}
$ans1636 = $field1717.app();
}
break;
case 10: $step1630 = 12;
$al1637 = L[620];
$ans1636 = R.throwNoCasesMatched(L[620],cases1645);
break;
case 11: $step1630 = 12;
$al1637 = L[626];
$field1719 = R.getColonFieldLoc(self1632,"render-reason",L[626]);
if(R.isMethod($field1719)) {
$ans1636 = $field1719.full_meth(self1632);
} else {
if(!(R.isFunction($field1719))) {
R.ffi.throwNonFunApp(L[626],$field1719);
}
$ans1636 = $field1719.app();
}
break;
case 12: ++R.GAS;
return $ans1636;
default: throw "No case numbered " + $step1630 + " in $temp_full1631";
}
}
} catch($e1722) {
if(R.isCont($e1722) && ($step1630 !== 12)) {
$e1722.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1637,$temp_full1631,$step1630,[self1632,maybe$stack$loc1633,src$available1634,maybe$ast1635],[cases1645]);
}
if(R.isPyretException($e1722)) {
$e1722.pyretStack.push($al1637);
}
throw $e1722;
}
};
var anf_variant_member1927 = R.makeMethod3($temp_full1631,"render-fancy-reason");
var $temp_full1724 = function($self1725) {
var $step1723 = 0;
var $ans1726 = D;
var $al1727 = L[635];
try {
if(R.isActivationRecord($self1725)) {
$step1723 = $self1725.step;
$al1727 = $self1725.from;
$ans1726 = $self1725.ans;
self1725 = $self1725.args[0];
anf_method_obj1738 = $self1725.vars[0];
anf_method_obj1729 = $self1725.vars[1];
anf_arg1739 = $self1725.vars[2];
anf_method_obj1735 = $self1725.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[635],1,$t);
}
var self1725 = $self1725;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1723) {
case 0: $al1727 = L[628];
var anf_method_obj1738 = G(ED19,"error",L[628]);
$al1727 = L[629];
var anf_method_obj1729 = G(ED19,"para",L[629]);
$step1723 = 1;
$al1727 = L[630];
$field1728 = R.getColonFieldLoc(ED19,"text",L[630]);
if(R.isMethod($field1728)) {
$ans1726 = $field1728.full_meth(ED19,("Predicate succeeded for exception (it should have failed):"));
} else {
if(!(R.isFunction($field1728))) {
R.ffi.throwNonFunApp(L[630],$field1728);
}
$ans1726 = $field1728.app(("Predicate succeeded for exception (it should have failed):"));
}
break;
case 1: var anf_arg1730 = $ans1726;
$step1723 = 2;
$al1727 = L[629];
$field1731 = R.getColonFieldLoc(anf_method_obj1729,"make1",L[629]);
if(R.isMethod($field1731)) {
$ans1726 = $field1731.full_meth(anf_method_obj1729,anf_arg1730);
} else {
if(!(R.isFunction($field1731))) {
R.ffi.throwNonFunApp(L[629],$field1731);
}
$ans1726 = $field1731.app(anf_arg1730);
}
break;
case 2: var anf_arg1739 = $ans1726;
$al1727 = L[631];
var anf_method_obj1735 = G(ED19,"para",L[631]);
$al1727 = L[632];
var anf_arg1732 = G(self1725,"exn",L[632]);
$step1723 = 3;
$al1727 = L[634];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1727,exn$unwrap7);
}
$ans1726 = exn$unwrap7.app(anf_arg1732);
break;
case 3: var anf_arg1733 = $ans1726;
$step1723 = 4;
$al1727 = L[633];
$field1734 = R.getColonFieldLoc(ED19,"embed",L[633]);
if(R.isMethod($field1734)) {
$ans1726 = $field1734.full_meth(ED19,anf_arg1733);
} else {
if(!(R.isFunction($field1734))) {
R.ffi.throwNonFunApp(L[633],$field1734);
}
$ans1726 = $field1734.app(anf_arg1733);
}
break;
case 4: var anf_arg1736 = $ans1726;
$step1723 = 5;
$al1727 = L[631];
$field1737 = R.getColonFieldLoc(anf_method_obj1735,"make1",L[631]);
if(R.isMethod($field1737)) {
$ans1726 = $field1737.full_meth(anf_method_obj1735,anf_arg1736);
} else {
if(!(R.isFunction($field1737))) {
R.ffi.throwNonFunApp(L[631],$field1737);
}
$ans1726 = $field1737.app(anf_arg1736);
}
break;
case 5: var anf_arg1740 = $ans1726;
$step1723 = 6;
$al1727 = L[628];
$field1741 = R.getColonFieldLoc(anf_method_obj1738,"make2",L[628]);
if(R.isMethod($field1741)) {
$ans1726 = $field1741.full_meth(anf_method_obj1738,anf_arg1739,anf_arg1740);
} else {
if(!(R.isFunction($field1741))) {
R.ffi.throwNonFunApp(L[628],$field1741);
}
$ans1726 = $field1741.app(anf_arg1739,anf_arg1740);
}
break;
case 6: ++R.GAS;
return $ans1726;
default: throw "No case numbered " + $step1723 + " in $temp_full1724";
}
}
} catch($e1742) {
if(R.isCont($e1742) && ($step1723 !== 6)) {
$e1742.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1727,$temp_full1724,$step1723,[self1725],[anf_method_obj1738,anf_method_obj1729,anf_arg1739,anf_method_obj1735]);
}
if(R.isPyretException($e1742)) {
$e1742.pyretStack.push($al1727);
}
throw $e1742;
}
};
var anf_variant_member1928 = R.makeMethod0($temp_full1724,"render-reason");
var $temp_full1744 = function($self1745) {
var $step1743 = 0;
var $ans1746 = D;
var $al1747 = L[645];
try {
if(R.isActivationRecord($self1745)) {
$step1743 = $self1745.step;
$al1747 = $self1745.from;
$ans1746 = $self1745.ans;
self1745 = $self1745.args[0];
anf_arg1755 = $self1745.vars[0];
anf_arg1756 = $self1745.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[645],1,$t);
}
var self1745 = $self1745;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1743) {
case 0: $al1747 = L[636];
var anf_arg1748 = G(self1745,"loc",L[636]);
$step1743 = 1;
$al1747 = L[637];
$field1749 = R.getColonFieldLoc(VS26,"vs-value",L[637]);
if(R.isMethod($field1749)) {
$ans1746 = $field1749.full_meth(VS26,anf_arg1748);
} else {
if(!(R.isFunction($field1749))) {
R.ffi.throwNonFunApp(L[637],$field1749);
}
$ans1746 = $field1749.app(anf_arg1748);
}
break;
case 1: var anf_arg1755 = $ans1746;
$al1747 = L[638];
var anf_arg1750 = G(self1745,"exn",L[638]);
$step1743 = 2;
$al1747 = L[644];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al1747,exn$unwrap7);
}
$ans1746 = exn$unwrap7.app(anf_arg1750);
break;
case 2: var anf_arg1751 = $ans1746;
$step1743 = 3;
$al1747 = L[639];
$field1752 = R.getColonFieldLoc(VS26,"vs-value",L[639]);
if(R.isMethod($field1752)) {
$ans1746 = $field1752.full_meth(VS26,anf_arg1751);
} else {
if(!(R.isFunction($field1752))) {
R.ffi.throwNonFunApp(L[639],$field1752);
}
$ans1746 = $field1752.app(anf_arg1751);
}
break;
case 3: var anf_arg1756 = $ans1746;
$al1747 = L[640];
var anf_arg1753 = G(self1745,"pred",L[640]);
$step1743 = 4;
$al1747 = L[641];
$field1754 = R.getColonFieldLoc(VS26,"vs-value",L[641]);
if(R.isMethod($field1754)) {
$ans1746 = $field1754.full_meth(VS26,anf_arg1753);
} else {
if(!(R.isFunction($field1754))) {
R.ffi.throwNonFunApp(L[641],$field1754);
}
$ans1746 = $field1754.app(anf_arg1753);
}
break;
case 4: var anf_arg1757 = $ans1746;
$step1743 = 5;
$al1747 = L[642];
$field1758 = R.getColonFieldLoc(list220,"make3",L[642]);
if(R.isMethod($field1758)) {
$ans1746 = $field1758.full_meth(list220,anf_arg1755,anf_arg1756,anf_arg1757);
} else {
if(!(R.isFunction($field1758))) {
R.ffi.throwNonFunApp(L[642],$field1758);
}
$ans1746 = $field1758.app(anf_arg1755,anf_arg1756,anf_arg1757);
}
break;
case 5: var anf_arg1759 = $ans1746;
$step1743 = 6;
$al1747 = L[643];
$field1760 = R.getColonFieldLoc(VS26,"vs-constr",L[643]);
if(R.isMethod($field1760)) {
$ans1746 = $field1760.full_meth(VS26,("failure-raise-not-dissatisfied"),anf_arg1759);
} else {
if(!(R.isFunction($field1760))) {
R.ffi.throwNonFunApp(L[643],$field1760);
}
$ans1746 = $field1760.app(("failure-raise-not-dissatisfied"),anf_arg1759);
}
break;
case 6: ++R.GAS;
return $ans1746;
default: throw "No case numbered " + $step1743 + " in $temp_full1744";
}
}
} catch($e1761) {
if(R.isCont($e1761) && ($step1743 !== 6)) {
$e1761.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1747,$temp_full1744,$step1743,[self1745],[anf_arg1755,anf_arg1756]);
}
if(R.isPyretException($e1761)) {
$e1761.pyretStack.push($al1747);
}
throw $e1761;
}
};
var anf_variant_member1929 = R.makeMethod0($temp_full1744,"_output");
var $temp_full1763 = function($self1764,$maybe$stack$loc1765,$src$available1766,$maybe$ast1767) {
var $step1762 = 0;
var $ans1768 = D;
var $al1769 = L[652];
try {
if(R.isActivationRecord($self1764)) {
$step1762 = $self1764.step;
$al1769 = $self1764.from;
$ans1768 = $self1764.ans;
self1764 = $self1764.args[0];
maybe$stack$loc1765 = $self1764.args[1];
src$available1766 = $self1764.args[2];
maybe$ast1767 = $self1764.args[3];
anf_method_obj1779 = $self1764.vars[0];
anf_method_obj1771 = $self1764.vars[1];
anf_arg1780 = $self1764.vars[2];
anf_method_obj1776 = $self1764.vars[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[652],4,$t);
}
var self1764 = $self1764;
var maybe$stack$loc1765 = $maybe$stack$loc1765;
var src$available1766 = $src$available1766;
var maybe$ast1767 = $maybe$ast1767;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1762) {
case 0: $al1769 = L[646];
var anf_method_obj1779 = G(ED19,"error",L[646]);
$al1769 = L[647];
var anf_method_obj1771 = G(ED19,"para",L[647]);
$step1762 = 1;
$al1769 = L[648];
$field1770 = R.getColonFieldLoc(ED19,"text",L[648]);
if(R.isMethod($field1770)) {
$ans1768 = $field1770.full_meth(ED19,("The custom equality funtion must return a boolean, but instead it returned: "));
} else {
if(!(R.isFunction($field1770))) {
R.ffi.throwNonFunApp(L[648],$field1770);
}
$ans1768 = $field1770.app(("The custom equality funtion must return a boolean, but instead it returned: "));
}
break;
case 1: var anf_arg1772 = $ans1768;
$step1762 = 2;
$al1769 = L[647];
$field1773 = R.getColonFieldLoc(anf_method_obj1771,"make1",L[647]);
if(R.isMethod($field1773)) {
$ans1768 = $field1773.full_meth(anf_method_obj1771,anf_arg1772);
} else {
if(!(R.isFunction($field1773))) {
R.ffi.throwNonFunApp(L[647],$field1773);
}
$ans1768 = $field1773.app(anf_arg1772);
}
break;
case 2: var anf_arg1780 = $ans1768;
$al1769 = L[649];
var anf_method_obj1776 = G(ED19,"para",L[649]);
$al1769 = L[650];
var anf_arg1774 = G(self1764,"test-result",L[650]);
$step1762 = 3;
$al1769 = L[651];
$field1775 = R.getColonFieldLoc(ED19,"embed",L[651]);
if(R.isMethod($field1775)) {
$ans1768 = $field1775.full_meth(ED19,anf_arg1774);
} else {
if(!(R.isFunction($field1775))) {
R.ffi.throwNonFunApp(L[651],$field1775);
}
$ans1768 = $field1775.app(anf_arg1774);
}
break;
case 3: var anf_arg1777 = $ans1768;
$step1762 = 4;
$al1769 = L[649];
$field1778 = R.getColonFieldLoc(anf_method_obj1776,"make1",L[649]);
if(R.isMethod($field1778)) {
$ans1768 = $field1778.full_meth(anf_method_obj1776,anf_arg1777);
} else {
if(!(R.isFunction($field1778))) {
R.ffi.throwNonFunApp(L[649],$field1778);
}
$ans1768 = $field1778.app(anf_arg1777);
}
break;
case 4: var anf_arg1781 = $ans1768;
$step1762 = 5;
$al1769 = L[646];
$field1782 = R.getColonFieldLoc(anf_method_obj1779,"make2",L[646]);
if(R.isMethod($field1782)) {
$ans1768 = $field1782.full_meth(anf_method_obj1779,anf_arg1780,anf_arg1781);
} else {
if(!(R.isFunction($field1782))) {
R.ffi.throwNonFunApp(L[646],$field1782);
}
$ans1768 = $field1782.app(anf_arg1780,anf_arg1781);
}
break;
case 5: ++R.GAS;
return $ans1768;
default: throw "No case numbered " + $step1762 + " in $temp_full1763";
}
}
} catch($e1783) {
if(R.isCont($e1783) && ($step1762 !== 5)) {
$e1783.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1769,$temp_full1763,$step1762,[self1764,maybe$stack$loc1765,src$available1766,maybe$ast1767],[anf_method_obj1779,anf_method_obj1771,anf_arg1780,anf_method_obj1776]);
}
if(R.isPyretException($e1783)) {
$e1783.pyretStack.push($al1769);
}
throw $e1783;
}
};
var anf_variant_member1940 = R.makeMethod3($temp_full1763,"render-fancy-reason");
var $temp_full1785 = function($self1786) {
var $step1784 = 0;
var $ans1787 = D;
var $al1788 = L[659];
try {
if(R.isActivationRecord($self1786)) {
$step1784 = $self1786.step;
$al1788 = $self1786.from;
$ans1787 = $self1786.ans;
self1786 = $self1786.args[0];
anf_method_obj1798 = $self1786.vars[0];
anf_method_obj1790 = $self1786.vars[1];
anf_arg1799 = $self1786.vars[2];
anf_method_obj1795 = $self1786.vars[3];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[659],1,$t);
}
var self1786 = $self1786;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step1784) {
case 0: $al1788 = L[653];
var anf_method_obj1798 = G(ED19,"error",L[653]);
$al1788 = L[654];
var anf_method_obj1790 = G(ED19,"para",L[654]);
$step1784 = 1;
$al1788 = L[655];
$field1789 = R.getColonFieldLoc(ED19,"text",L[655]);
if(R.isMethod($field1789)) {
$ans1787 = $field1789.full_meth(ED19,("The custom equality funtion must return a boolean, but instead it returned: "));
} else {
if(!(R.isFunction($field1789))) {
R.ffi.throwNonFunApp(L[655],$field1789);
}
$ans1787 = $field1789.app(("The custom equality funtion must return a boolean, but instead it returned: "));
}
break;
case 1: var anf_arg1791 = $ans1787;
$step1784 = 2;
$al1788 = L[654];
$field1792 = R.getColonFieldLoc(anf_method_obj1790,"make1",L[654]);
if(R.isMethod($field1792)) {
$ans1787 = $field1792.full_meth(anf_method_obj1790,anf_arg1791);
} else {
if(!(R.isFunction($field1792))) {
R.ffi.throwNonFunApp(L[654],$field1792);
}
$ans1787 = $field1792.app(anf_arg1791);
}
break;
case 2: var anf_arg1799 = $ans1787;
$al1788 = L[656];
var anf_method_obj1795 = G(ED19,"para",L[656]);
$al1788 = L[657];
var anf_arg1793 = G(self1786,"test-result",L[657]);
$step1784 = 3;
$al1788 = L[658];
$field1794 = R.getColonFieldLoc(ED19,"embed",L[658]);
if(R.isMethod($field1794)) {
$ans1787 = $field1794.full_meth(ED19,anf_arg1793);
} else {
if(!(R.isFunction($field1794))) {
R.ffi.throwNonFunApp(L[658],$field1794);
}
$ans1787 = $field1794.app(anf_arg1793);
}
break;
case 3: var anf_arg1796 = $ans1787;
$step1784 = 4;
$al1788 = L[656];
$field1797 = R.getColonFieldLoc(anf_method_obj1795,"make1",L[656]);
if(R.isMethod($field1797)) {
$ans1787 = $field1797.full_meth(anf_method_obj1795,anf_arg1796);
} else {
if(!(R.isFunction($field1797))) {
R.ffi.throwNonFunApp(L[656],$field1797);
}
$ans1787 = $field1797.app(anf_arg1796);
}
break;
case 4: var anf_arg1800 = $ans1787;
$step1784 = 5;
$al1788 = L[653];
$field1801 = R.getColonFieldLoc(anf_method_obj1798,"make2",L[653]);
if(R.isMethod($field1801)) {
$ans1787 = $field1801.full_meth(anf_method_obj1798,anf_arg1799,anf_arg1800);
} else {
if(!(R.isFunction($field1801))) {
R.ffi.throwNonFunApp(L[653],$field1801);
}
$ans1787 = $field1801.app(anf_arg1799,anf_arg1800);
}
break;
case 5: ++R.GAS;
return $ans1787;
default: throw "No case numbered " + $step1784 + " in $temp_full1785";
}
}
} catch($e1802) {
if(R.isCont($e1802) && ($step1784 !== 5)) {
$e1802.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al1788,$temp_full1785,$step1784,[self1786],[anf_method_obj1798,anf_method_obj1790,anf_arg1799,anf_method_obj1795]);
}
if(R.isPyretException($e1802)) {
$e1802.pyretStack.push($al1788);
}
throw $e1802;
}
};
var anf_variant_member1941 = R.makeMethod0($temp_full1785,"render-reason");
var $success_getfields1808 = function(f) {
return f(this.dict["loc"]);
};
var $success_getfieldsref1806 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]));
};
var $success_mutablemask1807 = [false];
var $success$base1803 = {"$fieldNames":["loc"],
"_match":R.makeMatch("success",1)};
var $success$brander1804 = R.namedBrander("success",L[660]);
var $success$brands1805 = {};
$success$brands1805[TestResult55._brand] = true;
$success$brands1805[$success$brander1804._brand] = true;
var success1809 = R.makeVariantConstructor(L[662],function() {
return [Loc119];
},["loc1810"],[L[661]],[false],["loc1810"],$success_mutablemask1807,$success$base1803,$success$brands1805,"success",$success_getfieldsref1806,$success_getfields1808,$success$base1803);
var $failure$not$equal_getfields1818 = function(f) {
return f(this.dict["loc"],this.dict["refinement"],this.dict["left"],this.dict["right"]);
};
var $failure$not$equal_getfieldsref1816 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["refinement"],false,refmask[1]),R.derefField(this.dict["left"],false,refmask[2]),R.derefField(this.dict["right"],false,refmask[3]));
};
var $failure$not$equal_mutablemask1817 = [false,false,false,false];
var $failure$not$equal$base1811 = {"$fieldNames":["loc","refinement","left","right"],
"render-fancy-reason":anf_variant_member1814,
"render-reason":anf_variant_member1815,
"_match":R.makeMatch("failure-not-equal",4)};
var $failure$not$equal$brander1812 = R.namedBrander("failure-not-equal",L[663]);
var $failure$not$equal$brands1813 = {};
$failure$not$equal$brands1813[TestResult55._brand] = true;
$failure$not$equal$brands1813[$failure$not$equal$brander1812._brand] = true;
var failure$not$equal1819 = R.makeVariantConstructor(L[665],function() {
return [Loc119];
},["loc1820"],[L[664]],[false,false,false,false],["loc1820","refinement1821","left1822","right1823"],$failure$not$equal_mutablemask1817,$failure$not$equal$base1811,$failure$not$equal$brands1813,"failure-not-equal",$failure$not$equal_getfieldsref1816,$failure$not$equal_getfields1818,$failure$not$equal$base1811);
var $failure$not$different_getfields1831 = function(f) {
return f(this.dict["loc"],this.dict["refinement"],this.dict["left"],this.dict["right"]);
};
var $failure$not$different_getfieldsref1829 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["refinement"],false,refmask[1]),R.derefField(this.dict["left"],false,refmask[2]),R.derefField(this.dict["right"],false,refmask[3]));
};
var $failure$not$different_mutablemask1830 = [false,false,false,false];
var $failure$not$different$base1824 = {"$fieldNames":["loc","refinement","left","right"],
"render-fancy-reason":anf_variant_member1827,
"render-reason":anf_variant_member1828,
"_match":R.makeMatch("failure-not-different",4)};
var $failure$not$different$brander1825 = R.namedBrander("failure-not-different",L[666]);
var $failure$not$different$brands1826 = {};
$failure$not$different$brands1826[TestResult55._brand] = true;
$failure$not$different$brands1826[$failure$not$different$brander1825._brand] = true;
var failure$not$different1832 = R.makeVariantConstructor(L[668],function() {
return [Loc119];
},["loc1833"],[L[667]],[false,false,false,false],["loc1833","refinement1834","left1835","right1836"],$failure$not$different_mutablemask1830,$failure$not$different$base1824,$failure$not$different$brands1826,"failure-not-different",$failure$not$different_getfieldsref1829,$failure$not$different_getfields1831,$failure$not$different$base1824);
var $failure$not$satisfied_getfields1844 = function(f) {
return f(this.dict["loc"],this.dict["val"],this.dict["pred"]);
};
var $failure$not$satisfied_getfieldsref1842 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["val"],false,refmask[1]),R.derefField(this.dict["pred"],false,refmask[2]));
};
var $failure$not$satisfied_mutablemask1843 = [false,false,false];
var $failure$not$satisfied$base1837 = {"$fieldNames":["loc","val","pred"],
"render-fancy-reason":anf_variant_member1840,
"render-reason":anf_variant_member1841,
"_match":R.makeMatch("failure-not-satisfied",3)};
var $failure$not$satisfied$brander1838 = R.namedBrander("failure-not-satisfied",L[669]);
var $failure$not$satisfied$brands1839 = {};
$failure$not$satisfied$brands1839[TestResult55._brand] = true;
$failure$not$satisfied$brands1839[$failure$not$satisfied$brander1838._brand] = true;
var failure$not$satisfied1845 = R.makeVariantConstructor(L[671],function() {
return [Loc119];
},["loc1846"],[L[670]],[false,false,false],["loc1846","val1847","pred1848"],$failure$not$satisfied_mutablemask1843,$failure$not$satisfied$base1837,$failure$not$satisfied$brands1839,"failure-not-satisfied",$failure$not$satisfied_getfieldsref1842,$failure$not$satisfied_getfields1844,$failure$not$satisfied$base1837);
var $failure$not$dissatisfied_getfields1856 = function(f) {
return f(this.dict["loc"],this.dict["val"],this.dict["pred"]);
};
var $failure$not$dissatisfied_getfieldsref1854 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["val"],false,refmask[1]),R.derefField(this.dict["pred"],false,refmask[2]));
};
var $failure$not$dissatisfied_mutablemask1855 = [false,false,false];
var $failure$not$dissatisfied$base1849 = {"$fieldNames":["loc","val","pred"],
"render-fancy-reason":anf_variant_member1852,
"render-reason":anf_variant_member1853,
"_match":R.makeMatch("failure-not-dissatisfied",3)};
var $failure$not$dissatisfied$brander1850 = R.namedBrander("failure-not-dissatisfied",L[672]);
var $failure$not$dissatisfied$brands1851 = {};
$failure$not$dissatisfied$brands1851[TestResult55._brand] = true;
$failure$not$dissatisfied$brands1851[$failure$not$dissatisfied$brander1850._brand] = true;
var failure$not$dissatisfied1857 = R.makeVariantConstructor(L[674],function() {
return [Loc119];
},["loc1858"],[L[673]],[false,false,false],["loc1858","val1859","pred1860"],$failure$not$dissatisfied_mutablemask1855,$failure$not$dissatisfied$base1849,$failure$not$dissatisfied$brands1851,"failure-not-dissatisfied",$failure$not$dissatisfied_getfieldsref1854,$failure$not$dissatisfied_getfields1856,$failure$not$dissatisfied$base1849);
var $failure$wrong$exn_getfields1869 = function(f) {
return f(this.dict["loc"],this.dict["exn-expected"],this.dict["actual-exn"]);
};
var $failure$wrong$exn_getfieldsref1867 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["exn-expected"],false,refmask[1]),R.derefField(this.dict["actual-exn"],false,refmask[2]));
};
var $failure$wrong$exn_mutablemask1868 = [false,false,false];
var $failure$wrong$exn$base1861 = {"$fieldNames":["loc","exn-expected","actual-exn"],
"render-fancy-reason":anf_variant_member1864,
"render-reason":anf_variant_member1865,
"_output":anf_variant_member1866,
"_match":R.makeMatch("failure-wrong-exn",3)};
var $failure$wrong$exn$brander1862 = R.namedBrander("failure-wrong-exn",L[675]);
var $failure$wrong$exn$brands1863 = {};
$failure$wrong$exn$brands1863[TestResult55._brand] = true;
$failure$wrong$exn$brands1863[$failure$wrong$exn$brander1862._brand] = true;
var failure$wrong$exn1870 = R.makeVariantConstructor(L[677],function() {
return [Loc119];
},["loc1871"],[L[676]],[false,false,false],["loc1871","exn$expected1872","actual$exn1873"],$failure$wrong$exn_mutablemask1868,$failure$wrong$exn$base1861,$failure$wrong$exn$brands1863,"failure-wrong-exn",$failure$wrong$exn_getfieldsref1867,$failure$wrong$exn_getfields1869,$failure$wrong$exn$base1861);
var $failure$right$exn_getfields1882 = function(f) {
return f(this.dict["loc"],this.dict["exn-not-expected"],this.dict["actual-exn"]);
};
var $failure$right$exn_getfieldsref1880 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["exn-not-expected"],false,refmask[1]),R.derefField(this.dict["actual-exn"],false,refmask[2]));
};
var $failure$right$exn_mutablemask1881 = [false,false,false];
var $failure$right$exn$base1874 = {"$fieldNames":["loc","exn-not-expected","actual-exn"],
"render-fancy-reason":anf_variant_member1877,
"render-reason":anf_variant_member1878,
"_output":anf_variant_member1879,
"_match":R.makeMatch("failure-right-exn",3)};
var $failure$right$exn$brander1875 = R.namedBrander("failure-right-exn",L[678]);
var $failure$right$exn$brands1876 = {};
$failure$right$exn$brands1876[TestResult55._brand] = true;
$failure$right$exn$brands1876[$failure$right$exn$brander1875._brand] = true;
var failure$right$exn1883 = R.makeVariantConstructor(L[680],function() {
return [Loc119];
},["loc1884"],[L[679]],[false,false,false],["loc1884","exn$not$expected1885","actual$exn1886"],$failure$right$exn_mutablemask1881,$failure$right$exn$base1874,$failure$right$exn$brands1876,"failure-right-exn",$failure$right$exn_getfieldsref1880,$failure$right$exn_getfields1882,$failure$right$exn$base1874);
var $failure$exn_getfields1895 = function(f) {
return f(this.dict["loc"],this.dict["actual-exn"],this.dict["exn-place"]);
};
var $failure$exn_getfieldsref1893 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["actual-exn"],false,refmask[1]),R.derefField(this.dict["exn-place"],false,refmask[2]));
};
var $failure$exn_mutablemask1894 = [false,false,false];
var $failure$exn$base1887 = {"$fieldNames":["loc","actual-exn","exn-place"],
"render-fancy-reason":anf_variant_member1890,
"render-reason":anf_variant_member1891,
"_output":anf_variant_member1892,
"_match":R.makeMatch("failure-exn",3)};
var $failure$exn$brander1888 = R.namedBrander("failure-exn",L[681]);
var $failure$exn$brands1889 = {};
$failure$exn$brands1889[TestResult55._brand] = true;
$failure$exn$brands1889[$failure$exn$brander1888._brand] = true;
var failure$exn1896 = R.makeVariantConstructor(L[684],function() {
return [Loc119,CheckOperand1356];
},["loc1897","exn$place1898"],[L[682],L[683]],[false,false,false],["loc1897","actual$exn1899","exn$place1898"],$failure$exn_mutablemask1894,$failure$exn$base1887,$failure$exn$brands1889,"failure-exn",$failure$exn_getfieldsref1893,$failure$exn_getfields1895,$failure$exn$base1887);
var $failure$no$exn_getfields1907 = function(f) {
return f(this.dict["loc"],this.dict["exn-expected"]);
};
var $failure$no$exn_getfieldsref1905 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["exn-expected"],false,refmask[1]));
};
var $failure$no$exn_mutablemask1906 = [false,false];
var $failure$no$exn$base1900 = {"$fieldNames":["loc","exn-expected"],
"render-fancy-reason":anf_variant_member1903,
"render-reason":anf_variant_member1904,
"_match":R.makeMatch("failure-no-exn",2)};
var $failure$no$exn$brander1901 = R.namedBrander("failure-no-exn",L[685]);
var $failure$no$exn$brands1902 = {};
$failure$no$exn$brands1902[TestResult55._brand] = true;
$failure$no$exn$brands1902[$failure$no$exn$brander1901._brand] = true;
var failure$no$exn1908 = R.makeVariantConstructor(L[688],function() {
return [Loc119,Option121];
},["loc1909","exn$expected1910"],[L[686],L[687]],[false,false],["loc1909","exn$expected1910"],$failure$no$exn_mutablemask1906,$failure$no$exn$base1900,$failure$no$exn$brands1902,"failure-no-exn",$failure$no$exn_getfieldsref1905,$failure$no$exn_getfields1907,$failure$no$exn$base1900);
var $failure$raise$not$satisfied_getfields1919 = function(f) {
return f(this.dict["loc"],this.dict["exn"],this.dict["pred"]);
};
var $failure$raise$not$satisfied_getfieldsref1917 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["exn"],false,refmask[1]),R.derefField(this.dict["pred"],false,refmask[2]));
};
var $failure$raise$not$satisfied_mutablemask1918 = [false,false,false];
var $failure$raise$not$satisfied$base1911 = {"$fieldNames":["loc","exn","pred"],
"render-fancy-reason":anf_variant_member1914,
"render-reason":anf_variant_member1915,
"_output":anf_variant_member1916,
"_match":R.makeMatch("failure-raise-not-satisfied",3)};
var $failure$raise$not$satisfied$brander1912 = R.namedBrander("failure-raise-not-satisfied",L[689]);
var $failure$raise$not$satisfied$brands1913 = {};
$failure$raise$not$satisfied$brands1913[TestResult55._brand] = true;
$failure$raise$not$satisfied$brands1913[$failure$raise$not$satisfied$brander1912._brand] = true;
var failure$raise$not$satisfied1920 = R.makeVariantConstructor(L[691],function() {
return [Loc119];
},["loc1921"],[L[690]],[false,false,false],["loc1921","exn1922","pred1923"],$failure$raise$not$satisfied_mutablemask1918,$failure$raise$not$satisfied$base1911,$failure$raise$not$satisfied$brands1913,"failure-raise-not-satisfied",$failure$raise$not$satisfied_getfieldsref1917,$failure$raise$not$satisfied_getfields1919,$failure$raise$not$satisfied$base1911);
var $failure$raise$not$dissatisfied_getfields1932 = function(f) {
return f(this.dict["loc"],this.dict["exn"],this.dict["pred"]);
};
var $failure$raise$not$dissatisfied_getfieldsref1930 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["exn"],false,refmask[1]),R.derefField(this.dict["pred"],false,refmask[2]));
};
var $failure$raise$not$dissatisfied_mutablemask1931 = [false,false,false];
var $failure$raise$not$dissatisfied$base1924 = {"$fieldNames":["loc","exn","pred"],
"render-fancy-reason":anf_variant_member1927,
"render-reason":anf_variant_member1928,
"_output":anf_variant_member1929,
"_match":R.makeMatch("failure-raise-not-dissatisfied",3)};
var $failure$raise$not$dissatisfied$brander1925 = R.namedBrander("failure-raise-not-dissatisfied",L[692]);
var $failure$raise$not$dissatisfied$brands1926 = {};
$failure$raise$not$dissatisfied$brands1926[TestResult55._brand] = true;
$failure$raise$not$dissatisfied$brands1926[$failure$raise$not$dissatisfied$brander1925._brand] = true;
var failure$raise$not$dissatisfied1933 = R.makeVariantConstructor(L[694],function() {
return [Loc119];
},["loc1934"],[L[693]],[false,false,false],["loc1934","exn1935","pred1936"],$failure$raise$not$dissatisfied_mutablemask1931,$failure$raise$not$dissatisfied$base1924,$failure$raise$not$dissatisfied$brands1926,"failure-raise-not-dissatisfied",$failure$raise$not$dissatisfied_getfieldsref1930,$failure$raise$not$dissatisfied_getfields1932,$failure$raise$not$dissatisfied$base1924);
var $error$not$boolean_getfields1944 = function(f) {
return f(this.dict["loc"],this.dict["refinement"],this.dict["left"],this.dict["righ"],this.dict["test-result"]);
};
var $error$not$boolean_getfieldsref1942 = function(f,refmask) {
return f(R.derefField(this.dict["loc"],false,refmask[0]),R.derefField(this.dict["refinement"],false,refmask[1]),R.derefField(this.dict["left"],false,refmask[2]),R.derefField(this.dict["righ"],false,refmask[3]),R.derefField(this.dict["test-result"],false,refmask[4]));
};
var $error$not$boolean_mutablemask1943 = [false,false,false,false,false];
var $error$not$boolean$base1937 = {"$fieldNames":["loc","refinement","left","righ","test-result"],
"render-fancy-reason":anf_variant_member1940,
"render-reason":anf_variant_member1941,
"_match":R.makeMatch("error-not-boolean",5)};
var $error$not$boolean$brander1938 = R.namedBrander("error-not-boolean",L[695]);
var $error$not$boolean$brands1939 = {};
$error$not$boolean$brands1939[TestResult55._brand] = true;
$error$not$boolean$brands1939[$error$not$boolean$brander1938._brand] = true;
var error$not$boolean1945 = R.makeVariantConstructor(L[697],function() {
return [Loc119];
},["loc1946"],[L[696]],[false,false,false,false,false],["loc1946","refinement1947","left1948","righ1949","test$result1950"],$error$not$boolean_mutablemask1943,$error$not$boolean$base1937,$error$not$boolean$brands1939,"error-not-boolean",$error$not$boolean_getfieldsref1942,$error$not$boolean_getfields1944,$error$not$boolean$base1937);
var anf_assign1951 = R.makeObject({"TestResult":G(TestResult55,"test",L[698]),
"is-success":G($success$brander1804,"test",L[660]),
"success":success1809,
"is-failure-not-equal":G($failure$not$equal$brander1812,"test",L[663]),
"failure-not-equal":failure$not$equal1819,
"is-failure-not-different":G($failure$not$different$brander1825,"test",L[666]),
"failure-not-different":failure$not$different1832,
"is-failure-not-satisfied":G($failure$not$satisfied$brander1838,"test",L[669]),
"failure-not-satisfied":failure$not$satisfied1845,
"is-failure-not-dissatisfied":G($failure$not$dissatisfied$brander1850,"test",L[672]),
"failure-not-dissatisfied":failure$not$dissatisfied1857,
"is-failure-wrong-exn":G($failure$wrong$exn$brander1862,"test",L[675]),
"failure-wrong-exn":failure$wrong$exn1870,
"is-failure-right-exn":G($failure$right$exn$brander1875,"test",L[678]),
"failure-right-exn":failure$right$exn1883,
"is-failure-exn":G($failure$exn$brander1888,"test",L[681]),
"failure-exn":failure$exn1896,
"is-failure-no-exn":G($failure$no$exn$brander1901,"test",L[685]),
"failure-no-exn":failure$no$exn1908,
"is-failure-raise-not-satisfied":G($failure$raise$not$satisfied$brander1912,"test",L[689]),
"failure-raise-not-satisfied":failure$raise$not$satisfied1920,
"is-failure-raise-not-dissatisfied":G($failure$raise$not$dissatisfied$brander1925,"test",L[692]),
"failure-raise-not-dissatisfied":failure$raise$not$dissatisfied1933,
"is-error-not-boolean":G($error$not$boolean$brander1938,"test",L[695]),
"error-not-boolean":error$not$boolean1945});
TestResult1952.$var = anf_assign1951;
var anf_bracket1953 = TestResult1952.$var;
$al52 = L[698];
var anf_assign1954 = G(anf_bracket1953,"TestResult",L[698]);
is$TestResult1955.$var = anf_assign1954;
var anf_bracket1956 = TestResult1952.$var;
$al52 = L[660];
var anf_assign1957 = G(anf_bracket1956,"is-success",L[660]);
is$success1958.$var = anf_assign1957;
var anf_bracket1959 = TestResult1952.$var;
$al52 = L[660];
var anf_assign1960 = G(anf_bracket1959,"success",L[660]);
success1961.$var = anf_assign1960;
var anf_bracket1962 = TestResult1952.$var;
$al52 = L[663];
var anf_assign1963 = G(anf_bracket1962,"is-failure-not-equal",L[663]);
is$failure$not$equal1964.$var = anf_assign1963;
var anf_bracket1965 = TestResult1952.$var;
$al52 = L[663];
var anf_assign1966 = G(anf_bracket1965,"failure-not-equal",L[663]);
failure$not$equal1967.$var = anf_assign1966;
var anf_bracket1968 = TestResult1952.$var;
$al52 = L[666];
var anf_assign1969 = G(anf_bracket1968,"is-failure-not-different",L[666]);
is$failure$not$different1970.$var = anf_assign1969;
var anf_bracket1971 = TestResult1952.$var;
$al52 = L[666];
var anf_assign1972 = G(anf_bracket1971,"failure-not-different",L[666]);
failure$not$different1973.$var = anf_assign1972;
var anf_bracket1974 = TestResult1952.$var;
$al52 = L[669];
var anf_assign1975 = G(anf_bracket1974,"is-failure-not-satisfied",L[669]);
is$failure$not$satisfied1976.$var = anf_assign1975;
var anf_bracket1977 = TestResult1952.$var;
$al52 = L[669];
var anf_assign1978 = G(anf_bracket1977,"failure-not-satisfied",L[669]);
failure$not$satisfied1979.$var = anf_assign1978;
var anf_bracket1980 = TestResult1952.$var;
$al52 = L[672];
var anf_assign1981 = G(anf_bracket1980,"is-failure-not-dissatisfied",L[672]);
is$failure$not$dissatisfied1982.$var = anf_assign1981;
var anf_bracket1983 = TestResult1952.$var;
$al52 = L[672];
var anf_assign1984 = G(anf_bracket1983,"failure-not-dissatisfied",L[672]);
failure$not$dissatisfied1985.$var = anf_assign1984;
var anf_bracket1986 = TestResult1952.$var;
$al52 = L[675];
var anf_assign1987 = G(anf_bracket1986,"is-failure-wrong-exn",L[675]);
is$failure$wrong$exn1988.$var = anf_assign1987;
var anf_bracket1989 = TestResult1952.$var;
$al52 = L[675];
var anf_assign1990 = G(anf_bracket1989,"failure-wrong-exn",L[675]);
failure$wrong$exn1991.$var = anf_assign1990;
var anf_bracket1992 = TestResult1952.$var;
$al52 = L[678];
var anf_assign1993 = G(anf_bracket1992,"is-failure-right-exn",L[678]);
is$failure$right$exn1994.$var = anf_assign1993;
var anf_bracket1995 = TestResult1952.$var;
$al52 = L[678];
var anf_assign1996 = G(anf_bracket1995,"failure-right-exn",L[678]);
failure$right$exn1997.$var = anf_assign1996;
var anf_bracket1998 = TestResult1952.$var;
$al52 = L[681];
var anf_assign1999 = G(anf_bracket1998,"is-failure-exn",L[681]);
is$failure$exn2000.$var = anf_assign1999;
var anf_bracket2001 = TestResult1952.$var;
$al52 = L[681];
var anf_assign2002 = G(anf_bracket2001,"failure-exn",L[681]);
failure$exn2003.$var = anf_assign2002;
var anf_bracket2004 = TestResult1952.$var;
$al52 = L[685];
var anf_assign2005 = G(anf_bracket2004,"is-failure-no-exn",L[685]);
is$failure$no$exn2006.$var = anf_assign2005;
var anf_bracket2007 = TestResult1952.$var;
$al52 = L[685];
var anf_assign2008 = G(anf_bracket2007,"failure-no-exn",L[685]);
failure$no$exn2009.$var = anf_assign2008;
var anf_bracket2010 = TestResult1952.$var;
$al52 = L[689];
var anf_assign2011 = G(anf_bracket2010,"is-failure-raise-not-satisfied",L[689]);
is$failure$raise$not$satisfied2012.$var = anf_assign2011;
var anf_bracket2013 = TestResult1952.$var;
$al52 = L[689];
var anf_assign2014 = G(anf_bracket2013,"failure-raise-not-satisfied",L[689]);
failure$raise$not$satisfied2015.$var = anf_assign2014;
var anf_bracket2016 = TestResult1952.$var;
$al52 = L[692];
var anf_assign2017 = G(anf_bracket2016,"is-failure-raise-not-dissatisfied",L[692]);
is$failure$raise$not$dissatisfied2018.$var = anf_assign2017;
var anf_bracket2019 = TestResult1952.$var;
$al52 = L[692];
var anf_assign2020 = G(anf_bracket2019,"failure-raise-not-dissatisfied",L[692]);
failure$raise$not$dissatisfied2021.$var = anf_assign2020;
var anf_bracket2022 = TestResult1952.$var;
$al52 = L[695];
var anf_assign2023 = G(anf_bracket2022,"is-error-not-boolean",L[695]);
is$error$not$boolean2024.$var = anf_assign2023;
var anf_bracket2025 = TestResult1952.$var;
$al52 = L[695];
var anf_assign2026 = G(anf_bracket2025,"error-not-boolean",L[695]);
error$not$boolean2027.$var = anf_assign2026;
var $temp_lam2029 = function($main$module$name2030,$check$all2031) {
var $step2028 = 0;
var $ans2032 = D;
var $al2033 = L[923];
try {
if(R.isActivationRecord($main$module$name2030)) {
$step2028 = $main$module$name2030.step;
$al2033 = $main$module$name2030.from;
$ans2032 = $main$module$name2030.ans;
main$module$name2030 = $main$module$name2030.args[0];
check$all2031 = $main$module$name2030.args[1];
block$results2041 = $main$module$name2030.vars[0];
add$block$result2048 = $main$module$name2030.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[923],2,$t);
}
var main$module$name2030 = $main$module$name2030;
var check$all2031 = $check$all2031;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2028) {
case 0: $step2028 = 1;
$al2033 = L[921];
R._checkAnn(L[921],$type$String14,main$module$name2030);
break;
case 1: $step2028 = 2;
$al2033 = L[922];
R._checkAnn(L[922],$type$Boolean15,check$all2031);
break;
case 2: $step2028 = 3;
$al2033 = L[699];
$field2034 = R.getColonFieldLoc(list220,"make0",L[699]);
if(R.isMethod($field2034)) {
$ans2032 = $field2034.full_meth(list220);
} else {
if(!(R.isFunction($field2034))) {
R.ffi.throwNonFunApp(L[699],$field2034);
}
$ans2032 = $field2034.app();
}
break;
case 3: var var2655 = $ans2032;
var block$results2041 = {"$var":var2655};
var add$block$result2048 = {"$var":D};
var $temp_lam2036 = function($cbr2037) {
var $step2035 = 0;
var $ans2038 = D;
var $al2039 = L[703];
try {
if(R.isActivationRecord($cbr2037)) {
$step2035 = $cbr2037.step;
$al2039 = $cbr2037.from;
$ans2038 = $cbr2037.ans;
cbr2037 = $cbr2037.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[703],1,$t);
}
var cbr2037 = $cbr2037;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2035) {
case 0: $step2035 = 1;
$al2039 = L[702];
R._checkAnn(L[702],CheckBlockResult2045,cbr2037);
break;
case 1: $step2035 = 2;
$al2039 = L[700];
$field2040 = R.getColonFieldLoc(list220,"make1",L[700]);
if(R.isMethod($field2040)) {
$ans2038 = $field2040.full_meth(list220,cbr2037);
} else {
if(!(R.isFunction($field2040))) {
R.ffi.throwNonFunApp(L[700],$field2040);
}
$ans2038 = $field2040.app(cbr2037);
}
break;
case 2: var anf_arg2042 = $ans2038;
var anf_arg2043 = block$results2041.$var;
$step2035 = 3;
$al2039 = L[701];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2039,_plus3);
}
$ans2038 = _plus3.app(anf_arg2042,anf_arg2043);
break;
case 3: var anf_assign2044 = $ans2038;
$step2035 = 4;
$ans2038 = block$results2041.$var = anf_assign2044;
break;
case 4: ++R.GAS;
return $ans2038;
default: throw "No case numbered " + $step2035 + " in $temp_lam2036";
}
}
} catch($e2046) {
if(R.isCont($e2046) && ($step2035 !== 4)) {
$e2046.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2039,$temp_lam2036,$step2035,[cbr2037],[]);
}
if(R.isPyretException($e2046)) {
$e2046.pyretStack.push($al2039);
}
throw $e2046;
}
};
var anf_assign2047 = R.makeFunction($temp_lam2036,"add-block-result");
add$block$result2048.$var = anf_assign2047;
$step2028 = 4;
$al2033 = L[704];
$field2049 = R.getColonFieldLoc(list220,"make0",L[704]);
if(R.isMethod($field2049)) {
$ans2032 = $field2049.full_meth(list220);
} else {
if(!(R.isFunction($field2049))) {
R.ffi.throwNonFunApp(L[704],$field2049);
}
$ans2032 = $field2049.app();
}
break;
case 4: var var2654 = $ans2032;
var current$results2056 = {"$var":var2654};
var add$result2063 = {"$var":D};
var left$right$check2118 = {"$var":D};
var check$bool2134 = {"$var":D};
var reset$results2143 = {"$var":D};
var $temp_lam2051 = function($t2052) {
var $step2050 = 0;
var $ans2053 = D;
var $al2054 = L[708];
try {
if(R.isActivationRecord($t2052)) {
$step2050 = $t2052.step;
$al2054 = $t2052.from;
$ans2053 = $t2052.ans;
t2052 = $t2052.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[708],1,$t);
}
var t2052 = $t2052;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2050) {
case 0: $step2050 = 1;
$al2054 = L[707];
R._checkAnn(L[707],TestResult2060,t2052);
break;
case 1: $step2050 = 2;
$al2054 = L[705];
$field2055 = R.getColonFieldLoc(list220,"make1",L[705]);
if(R.isMethod($field2055)) {
$ans2053 = $field2055.full_meth(list220,t2052);
} else {
if(!(R.isFunction($field2055))) {
R.ffi.throwNonFunApp(L[705],$field2055);
}
$ans2053 = $field2055.app(t2052);
}
break;
case 2: var anf_arg2057 = $ans2053;
var anf_arg2058 = current$results2056.$var;
$step2050 = 3;
$al2054 = L[706];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2054,_plus3);
}
$ans2053 = _plus3.app(anf_arg2057,anf_arg2058);
break;
case 3: var anf_assign2059 = $ans2053;
$step2050 = 4;
$ans2053 = current$results2056.$var = anf_assign2059;
break;
case 4: ++R.GAS;
return $ans2053;
default: throw "No case numbered " + $step2050 + " in $temp_lam2051";
}
}
} catch($e2061) {
if(R.isCont($e2061) && ($step2050 !== 4)) {
$e2061.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2054,$temp_lam2051,$step2050,[t2052],[]);
}
if(R.isPyretException($e2061)) {
$e2061.pyretStack.push($al2054);
}
throw $e2061;
}
};
var anf_assign2062 = R.makeFunction($temp_lam2051,"add-result");
add$result2063.$var = anf_assign2062;
var $temp_lam2065 = function($loc2066) {
var $step2064 = 0;
var $ans2067 = D;
var $al2068 = L[734];
try {
if(R.isActivationRecord($loc2066)) {
$step2064 = $loc2066.step;
$al2068 = $loc2066.from;
$ans2067 = $loc2066.ans;
loc2066 = $loc2066.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[734],1,$t);
}
var loc2066 = $loc2066;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2064) {
case 0: $step2064 = 1;
var $temp_lam2070 = function($with$vals2071,$left2072,$right2073) {
var $step2069 = 0;
var $ans2074 = D;
var $al2075 = L[733];
try {
if(R.isActivationRecord($with$vals2071)) {
$step2069 = $with$vals2071.step;
$al2075 = $with$vals2071.from;
$ans2074 = $with$vals2071.ans;
with$vals2071 = $with$vals2071.args[0];
left2072 = $with$vals2071.args[1];
right2073 = $with$vals2071.args[2];
lv2079 = $with$vals2071.vars[0];
anf_fun2084 = $with$vals2071.vars[1];
rv2088 = $with$vals2071.vars[2];
anf_fun2093 = $with$vals2071.vars[3];
res2103 = $with$vals2071.vars[4];
anf_fun2108 = $with$vals2071.vars[5];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[733],3,$t);
}
var with$vals2071 = $with$vals2071;
var left2072 = $left2072;
var right2073 = $right2073;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2069) {
case 0: $step2069 = 1;
$al2075 = L[709];
if(!(R.isFunction(is$function13))) {
R.ffi.throwNonFunApp($al2075,is$function13);
}
$ans2074 = is$function13.app(left2072);
break;
case 1: var anf_arg2076 = $ans2074;
$al2075 = L[709];
var anf_if2114 = R.checkWrapBoolean(anf_arg2076);
$step2069 = R.isPyretTrue(anf_if2114)?2:3;
break;
case 2: $step2069 = 4;
$ans2074 = left2072;
break;
case 3: $step2069 = 4;
$al2075 = L[710];
$ans2074 = G(left2072,"v",L[710]);
break;
case 4: var anf_arg2077 = $ans2074;
$step2069 = 5;
$al2075 = L[732];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2075,run$task9);
}
$ans2074 = run$task9.app(anf_arg2077);
break;
case 5: var lv2079 = $ans2074;
$step2069 = 6;
$al2075 = L[711];
if(!(R.isFunction(is$right2078))) {
R.ffi.throwNonFunApp($al2075,is$right2078);
}
$ans2074 = is$right2078.app(lv2079);
break;
case 6: var anf_arg2080 = $ans2074;
$al2075 = L[711];
var anf_if2113 = R.checkWrapBoolean(anf_arg2080);
$step2069 = R.isPyretTrue(anf_if2113)?7:9;
break;
case 7: var anf_fun2084 = add$result2063.$var;
var anf_fun2081 = failure$exn2003.$var;
$al2075 = L[712];
var anf_arg2082 = G(lv2079,"v",L[712]);
var anf_arg2083 = on$left99.$var;
$step2069 = 8;
$al2075 = L[714];
if(!(R.isFunction(anf_fun2081))) {
R.ffi.throwNonFunApp($al2075,anf_fun2081);
}
$ans2074 = anf_fun2081.app(loc2066,anf_arg2082,anf_arg2083);
break;
case 8: var anf_arg2085 = $ans2074;
$step2069 = 24;
$al2075 = L[713];
if(!(R.isFunction(anf_fun2084))) {
R.ffi.throwNonFunApp($al2075,anf_fun2084);
}
$ans2074 = anf_fun2084.app(anf_arg2085);
break;
case 9: $step2069 = 10;
$al2075 = L[715];
if(!(R.isFunction(is$function13))) {
R.ffi.throwNonFunApp($al2075,is$function13);
}
$ans2074 = is$function13.app(right2073);
break;
case 10: var anf_arg2086 = $ans2074;
$al2075 = L[715];
var anf_if2112 = R.checkWrapBoolean(anf_arg2086);
$step2069 = R.isPyretTrue(anf_if2112)?11:12;
break;
case 11: $step2069 = 13;
$ans2074 = right2073;
break;
case 12: $step2069 = 13;
$al2075 = L[716];
$ans2074 = G(right2073,"v",L[716]);
break;
case 13: var anf_arg2087 = $ans2074;
$step2069 = 14;
$al2075 = L[731];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2075,run$task9);
}
$ans2074 = run$task9.app(anf_arg2087);
break;
case 14: var rv2088 = $ans2074;
$step2069 = 15;
$al2075 = L[717];
if(!(R.isFunction(is$right2078))) {
R.ffi.throwNonFunApp($al2075,is$right2078);
}
$ans2074 = is$right2078.app(rv2088);
break;
case 15: var anf_arg2089 = $ans2074;
$al2075 = L[717];
var anf_if2111 = R.checkWrapBoolean(anf_arg2089);
$step2069 = R.isPyretTrue(anf_if2111)?16:18;
break;
case 16: var anf_fun2093 = add$result2063.$var;
var anf_fun2090 = failure$exn2003.$var;
$al2075 = L[718];
var anf_arg2091 = G(rv2088,"v",L[718]);
var anf_arg2092 = on$right105.$var;
$step2069 = 17;
$al2075 = L[720];
if(!(R.isFunction(anf_fun2090))) {
R.ffi.throwNonFunApp($al2075,anf_fun2090);
}
$ans2074 = anf_fun2090.app(loc2066,anf_arg2091,anf_arg2092);
break;
case 17: var anf_arg2094 = $ans2074;
$step2069 = 24;
$al2075 = L[719];
if(!(R.isFunction(anf_fun2093))) {
R.ffi.throwNonFunApp($al2075,anf_fun2093);
}
$ans2074 = anf_fun2093.app(anf_arg2094);
break;
case 18: var $temp_lam2096 = function($$resumer1336) {
var $step2095 = 0;
var $ans2097 = D;
var $al2098 = L[724];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2095 = $$resumer1336.step;
$al2098 = $$resumer1336.from;
$ans2097 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[724],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2095) {
case 0: $al2098 = L[721];
var anf_arg2099 = G(lv2079,"v",L[721]);
$al2098 = L[722];
var anf_arg2100 = G(rv2088,"v",L[722]);
$step2095 = 1;
$al2098 = L[723];
if(!(R.isFunction(with$vals2071))) {
R.ffi.throwNonFunApp($al2098,with$vals2071);
}
$ans2097 = with$vals2071.app(anf_arg2099,anf_arg2100);
break;
case 1: ++R.GAS;
return $ans2097;
default: throw "No case numbered " + $step2095 + " in $temp_lam2096";
}
}
} catch($e2101) {
if(R.isCont($e2101) && ($step2095 !== 1)) {
$e2101.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2098,$temp_lam2096,$step2095,[],[]);
}
if(R.isPyretException($e2101)) {
$e2101.pyretStack.push($al2098);
}
throw $e2101;
}
};
var anf_arg2102 = R.makeFunction($temp_lam2096,"");
$step2069 = 19;
$al2075 = L[730];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2075,run$task9);
}
$ans2074 = run$task9.app(anf_arg2102);
break;
case 19: var res2103 = $ans2074;
$step2069 = 20;
$al2075 = L[725];
if(!(R.isFunction(is$right2078))) {
R.ffi.throwNonFunApp($al2075,is$right2078);
}
$ans2074 = is$right2078.app(res2103);
break;
case 20: var anf_arg2104 = $ans2074;
$al2075 = L[725];
var anf_if2110 = R.checkWrapBoolean(anf_arg2104);
$step2069 = R.isPyretTrue(anf_if2110)?21:23;
break;
case 21: var anf_fun2108 = add$result2063.$var;
var anf_fun2105 = failure$exn2003.$var;
$al2075 = L[726];
var anf_arg2106 = G(res2103,"v",L[726]);
var anf_arg2107 = on$refinement111.$var;
$step2069 = 22;
$al2075 = L[728];
if(!(R.isFunction(anf_fun2105))) {
R.ffi.throwNonFunApp($al2075,anf_fun2105);
}
$ans2074 = anf_fun2105.app(loc2066,anf_arg2106,anf_arg2107);
break;
case 22: var anf_arg2109 = $ans2074;
$step2069 = 24;
$al2075 = L[727];
if(!(R.isFunction(anf_fun2108))) {
R.ffi.throwNonFunApp($al2075,anf_fun2108);
}
$ans2074 = anf_fun2108.app(anf_arg2109);
break;
case 23: $step2069 = 24;
$al2075 = L[729];
$ans2074 = G(res2103,"v",L[729]);
break;
case 24: ++R.GAS;
return $ans2074;
default: throw "No case numbered " + $step2069 + " in $temp_lam2070";
}
}
} catch($e2115) {
if(R.isCont($e2115) && ($step2069 !== 24)) {
$e2115.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2075,$temp_lam2070,$step2069,[with$vals2071,left2072,right2073],[lv2079,anf_fun2084,rv2088,anf_fun2093,res2103,anf_fun2108]);
}
if(R.isPyretException($e2115)) {
$e2115.pyretStack.push($al2075);
}
throw $e2115;
}
};
$ans2067 = R.makeFunction($temp_lam2070,"");
break;
case 1: ++R.GAS;
return $ans2067;
default: throw "No case numbered " + $step2064 + " in $temp_lam2065";
}
}
} catch($e2116) {
if(R.isCont($e2116) && ($step2064 !== 1)) {
$e2116.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2068,$temp_lam2065,$step2064,[loc2066],[]);
}
if(R.isPyretException($e2116)) {
$e2116.pyretStack.push($al2068);
}
throw $e2116;
}
};
var anf_assign2117 = R.makeFunction($temp_lam2065,"left-right-check");
left$right$check2118.$var = anf_assign2117;
var $temp_lam2120 = function($loc2121,$test$result2122,$on$failure2123) {
var $step2119 = 0;
var $ans2124 = D;
var $al2125 = L[740];
try {
if(R.isActivationRecord($loc2121)) {
$step2119 = $loc2121.step;
$al2125 = $loc2121.from;
$ans2124 = $loc2121.ans;
loc2121 = $loc2121.args[0];
test$result2122 = $loc2121.args[1];
on$failure2123 = $loc2121.args[2];
anf_fun2127 = $loc2121.vars[0];
anf_fun2129 = $loc2121.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[740],3,$t);
}
var loc2121 = $loc2121;
var test$result2122 = $test$result2122;
var on$failure2123 = $on$failure2123;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2119) {
case 0: $al2125 = L[735];
var anf_if2131 = R.checkWrapBoolean(test$result2122);
$step2119 = R.isPyretTrue(anf_if2131)?1:3;
break;
case 1: var anf_fun2127 = add$result2063.$var;
var anf_fun2126 = success1961.$var;
$step2119 = 2;
$al2125 = L[737];
if(!(R.isFunction(anf_fun2126))) {
R.ffi.throwNonFunApp($al2125,anf_fun2126);
}
$ans2124 = anf_fun2126.app(loc2121);
break;
case 2: var anf_arg2128 = $ans2124;
$step2119 = 5;
$al2125 = L[736];
if(!(R.isFunction(anf_fun2127))) {
R.ffi.throwNonFunApp($al2125,anf_fun2127);
}
$ans2124 = anf_fun2127.app(anf_arg2128);
break;
case 3: var anf_fun2129 = add$result2063.$var;
$step2119 = 4;
$al2125 = L[739];
if(!(R.isFunction(on$failure2123))) {
R.ffi.throwNonFunApp($al2125,on$failure2123);
}
$ans2124 = on$failure2123.app();
break;
case 4: var anf_arg2130 = $ans2124;
$step2119 = 5;
$al2125 = L[738];
if(!(R.isFunction(anf_fun2129))) {
R.ffi.throwNonFunApp($al2125,anf_fun2129);
}
$ans2124 = anf_fun2129.app(anf_arg2130);
break;
case 5: ++R.GAS;
return $ans2124;
default: throw "No case numbered " + $step2119 + " in $temp_lam2120";
}
}
} catch($e2132) {
if(R.isCont($e2132) && ($step2119 !== 5)) {
$e2132.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2125,$temp_lam2120,$step2119,[loc2121,test$result2122,on$failure2123],[anf_fun2127,anf_fun2129]);
}
if(R.isPyretException($e2132)) {
$e2132.pyretStack.push($al2125);
}
throw $e2132;
}
};
var anf_assign2133 = R.makeFunction($temp_lam2120,"check-bool");
check$bool2134.$var = anf_assign2133;
var $temp_lam2136 = function($$resumer1336) {
var $step2135 = 0;
var $ans2137 = D;
var $al2138 = L[742];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2135 = $$resumer1336.step;
$al2138 = $$resumer1336.from;
$ans2137 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[742],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2135) {
case 0: $step2135 = 1;
$al2138 = L[741];
$field2139 = R.getColonFieldLoc(list220,"make0",L[741]);
if(R.isMethod($field2139)) {
$ans2137 = $field2139.full_meth(list220);
} else {
if(!(R.isFunction($field2139))) {
R.ffi.throwNonFunApp(L[741],$field2139);
}
$ans2137 = $field2139.app();
}
break;
case 1: var anf_assign2140 = $ans2137;
$step2135 = 2;
$ans2137 = current$results2056.$var = anf_assign2140;
break;
case 2: ++R.GAS;
return $ans2137;
default: throw "No case numbered " + $step2135 + " in $temp_lam2136";
}
}
} catch($e2141) {
if(R.isCont($e2141) && ($step2135 !== 2)) {
$e2141.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2138,$temp_lam2136,$step2135,[],[]);
}
if(R.isPyretException($e2141)) {
$e2141.pyretStack.push($al2138);
}
throw $e2141;
}
};
var anf_assign2142 = R.makeFunction($temp_lam2136,"reset-results");
reset$results2143.$var = anf_assign2142;
var $temp_full2145 = function($self2146,$module$name2147,$checks2148) {
var $step2144 = 0;
var $ans2149 = D;
var $al2150 = L[764];
try {
if(R.isActivationRecord($self2146)) {
$step2144 = $self2146.step;
$al2150 = $self2146.from;
$ans2149 = $self2146.ans;
self2146 = $self2146.args[0];
module$name2147 = $self2146.args[1];
checks2148 = $self2146.args[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[764],3,$t);
}
var self2146 = $self2146;
var module$name2147 = $module$name2147;
var checks2148 = $checks2148;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2144) {
case 0: $al2150 = L[743];
var anf_if2186 = R.checkWrapBoolean(check$all2031);
$step2144 = R.isPyretTrue(anf_if2186)?1:2;
break;
case 1: $step2144 = 4;
$ans2149 = (true);
break;
case 2: $step2144 = 3;
$al2150 = L[745];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2150,equal$always5);
}
$ans2149 = equal$always5.app(module$name2147,main$module$name2030);
break;
case 3: var anf_arg2151 = $ans2149;
$step2144 = 4;
$al2150 = L[744];
$ans2149 = R.checkWrapBoolean(anf_arg2151);
break;
case 4: var anf_arg2152 = $ans2149;
$al2150 = L[746];
var anf_if2185 = R.checkWrapBoolean(anf_arg2152);
$step2144 = R.isPyretTrue(anf_if2185)?5:6;
break;
case 5: var $temp_lam2154 = function($c2155) {
var $step2153 = 0;
var $ans2156 = D;
var $al2157 = L[763];
try {
if(R.isActivationRecord($c2155)) {
$step2153 = $c2155.step;
$al2157 = $c2155.from;
$ans2156 = $c2155.ans;
c2155 = $c2155.args[0];
results$before2180 = $c2155.vars[0];
cases2161 = $c2155.vars[1];
anf_fun2167 = $c2155.vars[2];
anf_fun2177 = $c2155.vars[3];
anf_fun2172 = $c2155.vars[4];
anf_arg2173 = $c2155.vars[5];
anf_arg2174 = $c2155.vars[6];
anf_arg2175 = $c2155.vars[7];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[763],1,$t);
}
var c2155 = $c2155;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2153) {
case 0: var results$before2180 = current$results2056.$var;
var anf_fun2158 = reset$results2143.$var;
$step2153 = 1;
$al2157 = L[762];
if(!(R.isFunction(anf_fun2158))) {
R.ffi.throwNonFunApp($al2157,anf_fun2158);
}
$ans2156 = anf_fun2158.app();
break;
case 1: $al2157 = L[747];
var anf_arg2159 = G(c2155,"run",L[747]);
$step2153 = 2;
$al2157 = L[761];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2157,run$task9);
}
$ans2156 = run$task9.app(anf_arg2159);
break;
case 2: var result2160 = $ans2156;
var cases2161 = result2160;
$step2153 = 3;
$al2157 = L[760];
R._checkAnn(L[760],Either2181,cases2161);
break;
case 3: var $cases_dispatch2179 = {"left":4,
"right":6};
$al2157 = L[753];
$step2153 = $cases_dispatch2179[cases2161.$name] || 9;
break;
case 4: if(cases2161.$arity !== 1) {
if(cases2161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[752],1,cases2161.$arity,L[753]);
} else {
R.ffi.throwCasesSingletonErrorC(L[752],true,L[753]);
}
}
var $fn274 = cases2161.$constructor.$fieldNames;
R.derefField(cases2161.dict[$fn274[0]],cases2161.$mut_fields_mask[0],false);
var anf_fun2167 = add$block$result2048.$var;
var anf_fun2162 = check$block$result136.$var;
$al2157 = L[748];
var anf_arg2163 = G(c2155,"name",L[748]);
$al2157 = L[749];
var anf_arg2164 = G(c2155,"location",L[749]);
var anf_arg2165 = current$results2056.$var;
$step2153 = 5;
$al2157 = L[751];
if(!(R.isFunction(anf_fun2162))) {
R.ffi.throwNonFunApp($al2157,anf_fun2162);
}
$ans2156 = anf_fun2162.app(anf_arg2163,anf_arg2164,anf_arg2165,none2166);
break;
case 5: var anf_arg2168 = $ans2156;
$step2153 = 10;
$al2157 = L[750];
if(!(R.isFunction(anf_fun2167))) {
R.ffi.throwNonFunApp($al2157,anf_fun2167);
}
$ans2156 = anf_fun2167.app(anf_arg2168);
break;
case 6: if(cases2161.$arity !== 1) {
if(cases2161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[759],1,cases2161.$arity,L[753]);
} else {
R.ffi.throwCasesSingletonErrorC(L[759],true,L[753]);
}
}
var $fn274 = cases2161.$constructor.$fieldNames;
var err2171 = R.derefField(cases2161.dict[$fn274[0]],cases2161.$mut_fields_mask[0],false);
var anf_fun2177 = add$block$result2048.$var;
var anf_fun2172 = check$block$result136.$var;
$al2157 = L[754];
var anf_arg2173 = G(c2155,"name",L[754]);
$al2157 = L[755];
var anf_arg2174 = G(c2155,"location",L[755]);
var anf_arg2175 = current$results2056.$var;
$step2153 = 7;
$al2157 = L[758];
if(!(R.isFunction(some2170))) {
R.ffi.throwNonFunApp($al2157,some2170);
}
$ans2156 = some2170.app(err2171);
break;
case 7: var anf_arg2176 = $ans2156;
$step2153 = 8;
$al2157 = L[757];
if(!(R.isFunction(anf_fun2172))) {
R.ffi.throwNonFunApp($al2157,anf_fun2172);
}
$ans2156 = anf_fun2172.app(anf_arg2173,anf_arg2174,anf_arg2175,anf_arg2176);
break;
case 8: var anf_arg2178 = $ans2156;
$step2153 = 10;
$al2157 = L[756];
if(!(R.isFunction(anf_fun2177))) {
R.ffi.throwNonFunApp($al2157,anf_fun2177);
}
$ans2156 = anf_fun2177.app(anf_arg2178);
break;
case 9: $step2153 = 10;
$al2157 = L[753];
$ans2156 = R.throwNoCasesMatched(L[753],cases2161);
break;
case 10: $step2153 = 11;
$ans2156 = current$results2056.$var = results$before2180;
break;
case 11: ++R.GAS;
return $ans2156;
default: throw "No case numbered " + $step2153 + " in $temp_lam2154";
}
}
} catch($e2182) {
if(R.isCont($e2182) && ($step2153 !== 11)) {
$e2182.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2157,$temp_lam2154,$step2153,[c2155],[results$before2180,cases2161,anf_fun2167,anf_fun2177,anf_fun2172,anf_arg2173,anf_arg2174,anf_arg2175]);
}
if(R.isPyretException($e2182)) {
$e2182.pyretStack.push($al2157);
}
throw $e2182;
}
};
var anf_arg2184 = R.makeFunction($temp_lam2154,"for-body<line 523, column 8>");
$step2144 = 7;
$al2150 = L[763];
if(!(R.isFunction(each2183))) {
R.ffi.throwNonFunApp($al2150,each2183);
}
$ans2149 = each2183.app(anf_arg2184,checks2148);
break;
case 6: $step2144 = 7;
$ans2149 = nothing2;
break;
case 7: ++R.GAS;
return $ans2149;
default: throw "No case numbered " + $step2144 + " in $temp_full2145";
}
}
} catch($e2187) {
if(R.isCont($e2187) && ($step2144 !== 7)) {
$e2187.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2150,$temp_full2145,$step2144,[self2146,module$name2147,checks2148],[]);
}
if(R.isPyretException($e2187)) {
$e2187.pyretStack.push($al2150);
}
throw $e2187;
}
};
var anf_obj2635 = R.makeMethod2($temp_full2145,"run-checks");
var $temp_full2189 = function($self2190,$left2191,$right2192,$loc2193) {
var $step2188 = 0;
var $ans2194 = D;
var $al2195 = L[771];
try {
if(R.isActivationRecord($self2190)) {
$step2188 = $self2190.step;
$al2195 = $self2190.from;
$ans2194 = $self2190.ans;
self2190 = $self2190.args[0];
left2191 = $self2190.args[1];
right2192 = $self2190.args[2];
loc2193 = $self2190.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[771],4,$t);
}
var self2190 = $self2190;
var left2191 = $left2191;
var right2192 = $right2192;
var loc2193 = $loc2193;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2188) {
case 0: var anf_fun2196 = left$right$check2118.$var;
$step2188 = 1;
$al2195 = L[770];
if(!(R.isFunction(anf_fun2196))) {
R.ffi.throwNonFunApp($al2195,anf_fun2196);
}
$ans2194 = anf_fun2196.app(loc2193);
break;
case 1: var anf_fun2213 = $ans2194;
var $temp_lam2198 = function($lv2199,$rv2200) {
var $step2197 = 0;
var $ans2201 = D;
var $al2202 = L[769];
try {
if(R.isActivationRecord($lv2199)) {
$step2197 = $lv2199.step;
$al2202 = $lv2199.from;
$ans2201 = $lv2199.ans;
lv2199 = $lv2199.args[0];
rv2200 = $lv2199.args[1];
anf_fun2209 = $lv2199.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[769],2,$t);
}
var lv2199 = $lv2199;
var rv2200 = $rv2200;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2197) {
case 0: var anf_fun2209 = check$bool2134.$var;
$step2197 = 1;
$al2202 = L[768];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2202,equal$always5);
}
$ans2201 = equal$always5.app(lv2199,rv2200);
break;
case 1: var anf_arg2210 = $ans2201;
var $temp_lam2204 = function($$resumer1336) {
var $step2203 = 0;
var $ans2205 = D;
var $al2206 = L[766];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2203 = $$resumer1336.step;
$al2206 = $$resumer1336.from;
$ans2205 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[766],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2203) {
case 0: var anf_fun2207 = failure$not$equal1967.$var;
$step2203 = 1;
$al2206 = L[765];
if(!(R.isFunction(anf_fun2207))) {
R.ffi.throwNonFunApp($al2206,anf_fun2207);
}
$ans2205 = anf_fun2207.app(loc2193,none2166,lv2199,rv2200);
break;
case 1: ++R.GAS;
return $ans2205;
default: throw "No case numbered " + $step2203 + " in $temp_lam2204";
}
}
} catch($e2208) {
if(R.isCont($e2208) && ($step2203 !== 1)) {
$e2208.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2206,$temp_lam2204,$step2203,[],[]);
}
if(R.isPyretException($e2208)) {
$e2208.pyretStack.push($al2206);
}
throw $e2208;
}
};
var anf_arg2211 = R.makeFunction($temp_lam2204,"");
$step2197 = 2;
$al2202 = L[767];
if(!(R.isFunction(anf_fun2209))) {
R.ffi.throwNonFunApp($al2202,anf_fun2209);
}
$ans2201 = anf_fun2209.app(loc2193,anf_arg2210,anf_arg2211);
break;
case 2: ++R.GAS;
return $ans2201;
default: throw "No case numbered " + $step2197 + " in $temp_lam2198";
}
}
} catch($e2212) {
if(R.isCont($e2212) && ($step2197 !== 2)) {
$e2212.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2202,$temp_lam2198,$step2197,[lv2199,rv2200],[anf_fun2209]);
}
if(R.isPyretException($e2212)) {
$e2212.pyretStack.push($al2202);
}
throw $e2212;
}
};
var anf_arg2214 = R.makeFunction($temp_lam2198,"for-body<line 536, column 6>");
$step2188 = 2;
$al2195 = L[769];
if(!(R.isFunction(anf_fun2213))) {
R.ffi.throwNonFunApp($al2195,anf_fun2213);
}
$ans2194 = anf_fun2213.app(anf_arg2214,left2191,right2192);
break;
case 2: $step2188 = 3;
$ans2194 = nothing2;
break;
case 3: ++R.GAS;
return $ans2194;
default: throw "No case numbered " + $step2188 + " in $temp_full2189";
}
}
} catch($e2215) {
if(R.isCont($e2215) && ($step2188 !== 3)) {
$e2215.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2195,$temp_full2189,$step2188,[self2190,left2191,right2192,loc2193],[]);
}
if(R.isPyretException($e2215)) {
$e2215.pyretStack.push($al2195);
}
throw $e2215;
}
};
var anf_obj2636 = R.makeMethod3($temp_full2189,"check-is");
var $temp_full2217 = function($self2218,$left2219,$right2220,$loc2221) {
var $step2216 = 0;
var $ans2222 = D;
var $al2223 = L[779];
try {
if(R.isActivationRecord($self2218)) {
$step2216 = $self2218.step;
$al2223 = $self2218.from;
$ans2222 = $self2218.ans;
self2218 = $self2218.args[0];
left2219 = $self2218.args[1];
right2220 = $self2218.args[2];
loc2221 = $self2218.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[779],4,$t);
}
var self2218 = $self2218;
var left2219 = $left2219;
var right2220 = $right2220;
var loc2221 = $loc2221;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2216) {
case 0: var anf_fun2224 = left$right$check2118.$var;
$step2216 = 1;
$al2223 = L[778];
if(!(R.isFunction(anf_fun2224))) {
R.ffi.throwNonFunApp($al2223,anf_fun2224);
}
$ans2222 = anf_fun2224.app(loc2221);
break;
case 1: var anf_fun2242 = $ans2222;
var $temp_lam2226 = function($lv2227,$rv2228) {
var $step2225 = 0;
var $ans2229 = D;
var $al2230 = L[777];
try {
if(R.isActivationRecord($lv2227)) {
$step2225 = $lv2227.step;
$al2230 = $lv2227.from;
$ans2229 = $lv2227.ans;
lv2227 = $lv2227.args[0];
rv2228 = $lv2227.args[1];
anf_fun2238 = $lv2227.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[777],2,$t);
}
var lv2227 = $lv2227;
var rv2228 = $rv2228;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2225) {
case 0: var anf_fun2238 = check$bool2134.$var;
$step2225 = 1;
$al2230 = L[776];
if(!(R.isFunction(within12))) {
R.ffi.throwNonFunApp($al2230,within12);
}
$ans2229 = within12.app(R.makeNumberFromString("~0"));
break;
case 1: var anf_fun2231 = $ans2229;
$step2225 = 2;
$al2230 = L[775];
if(!(R.isFunction(anf_fun2231))) {
R.ffi.throwNonFunApp($al2230,anf_fun2231);
}
$ans2229 = anf_fun2231.app(lv2227,rv2228);
break;
case 2: var anf_arg2239 = $ans2229;
var $temp_lam2233 = function($$resumer1336) {
var $step2232 = 0;
var $ans2234 = D;
var $al2235 = L[773];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2232 = $$resumer1336.step;
$al2235 = $$resumer1336.from;
$ans2234 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[773],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2232) {
case 0: var anf_fun2236 = failure$not$equal1967.$var;
$step2232 = 1;
$al2235 = L[772];
if(!(R.isFunction(anf_fun2236))) {
R.ffi.throwNonFunApp($al2235,anf_fun2236);
}
$ans2234 = anf_fun2236.app(loc2221,none2166,lv2227,rv2228);
break;
case 1: ++R.GAS;
return $ans2234;
default: throw "No case numbered " + $step2232 + " in $temp_lam2233";
}
}
} catch($e2237) {
if(R.isCont($e2237) && ($step2232 !== 1)) {
$e2237.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2235,$temp_lam2233,$step2232,[],[]);
}
if(R.isPyretException($e2237)) {
$e2237.pyretStack.push($al2235);
}
throw $e2237;
}
};
var anf_arg2240 = R.makeFunction($temp_lam2233,"");
$step2225 = 3;
$al2230 = L[774];
if(!(R.isFunction(anf_fun2238))) {
R.ffi.throwNonFunApp($al2230,anf_fun2238);
}
$ans2229 = anf_fun2238.app(loc2221,anf_arg2239,anf_arg2240);
break;
case 3: ++R.GAS;
return $ans2229;
default: throw "No case numbered " + $step2225 + " in $temp_lam2226";
}
}
} catch($e2241) {
if(R.isCont($e2241) && ($step2225 !== 3)) {
$e2241.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2230,$temp_lam2226,$step2225,[lv2227,rv2228],[anf_fun2238]);
}
if(R.isPyretException($e2241)) {
$e2241.pyretStack.push($al2230);
}
throw $e2241;
}
};
var anf_arg2243 = R.makeFunction($temp_lam2226,"for-body<line 544, column 6>");
$step2216 = 2;
$al2223 = L[777];
if(!(R.isFunction(anf_fun2242))) {
R.ffi.throwNonFunApp($al2223,anf_fun2242);
}
$ans2222 = anf_fun2242.app(anf_arg2243,left2219,right2220);
break;
case 2: $step2216 = 3;
$ans2222 = nothing2;
break;
case 3: ++R.GAS;
return $ans2222;
default: throw "No case numbered " + $step2216 + " in $temp_full2217";
}
}
} catch($e2244) {
if(R.isCont($e2244) && ($step2216 !== 3)) {
$e2244.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2223,$temp_full2217,$step2216,[self2218,left2219,right2220,loc2221],[]);
}
if(R.isPyretException($e2244)) {
$e2244.pyretStack.push($al2223);
}
throw $e2244;
}
};
var anf_obj2637 = R.makeMethod3($temp_full2217,"check-is-roughly");
var $temp_full2246 = function($self2247,$left2248,$right2249,$loc2250) {
var $step2245 = 0;
var $ans2251 = D;
var $al2252 = L[787];
try {
if(R.isActivationRecord($self2247)) {
$step2245 = $self2247.step;
$al2252 = $self2247.from;
$ans2251 = $self2247.ans;
self2247 = $self2247.args[0];
left2248 = $self2247.args[1];
right2249 = $self2247.args[2];
loc2250 = $self2247.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[787],4,$t);
}
var self2247 = $self2247;
var left2248 = $left2248;
var right2249 = $right2249;
var loc2250 = $loc2250;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2245) {
case 0: var anf_fun2253 = left$right$check2118.$var;
$step2245 = 1;
$al2252 = L[786];
if(!(R.isFunction(anf_fun2253))) {
R.ffi.throwNonFunApp($al2252,anf_fun2253);
}
$ans2251 = anf_fun2253.app(loc2250);
break;
case 1: var anf_fun2271 = $ans2251;
var $temp_lam2255 = function($lv2256,$rv2257) {
var $step2254 = 0;
var $ans2258 = D;
var $al2259 = L[785];
try {
if(R.isActivationRecord($lv2256)) {
$step2254 = $lv2256.step;
$al2259 = $lv2256.from;
$ans2258 = $lv2256.ans;
lv2256 = $lv2256.args[0];
rv2257 = $lv2256.args[1];
anf_fun2267 = $lv2256.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[785],2,$t);
}
var lv2256 = $lv2256;
var rv2257 = $rv2257;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2254) {
case 0: var anf_fun2267 = check$bool2134.$var;
$step2254 = 1;
$al2259 = L[784];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2259,equal$always5);
}
$ans2258 = equal$always5.app(lv2256,rv2257);
break;
case 1: var anf_arg2260 = $ans2258;
$step2254 = 2;
$al2259 = L[783];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2259,not8);
}
$ans2258 = not8.app(anf_arg2260);
break;
case 2: var anf_arg2268 = $ans2258;
var $temp_lam2262 = function($$resumer1336) {
var $step2261 = 0;
var $ans2263 = D;
var $al2264 = L[781];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2261 = $$resumer1336.step;
$al2264 = $$resumer1336.from;
$ans2263 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[781],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2261) {
case 0: var anf_fun2265 = failure$not$different1973.$var;
$step2261 = 1;
$al2264 = L[780];
if(!(R.isFunction(anf_fun2265))) {
R.ffi.throwNonFunApp($al2264,anf_fun2265);
}
$ans2263 = anf_fun2265.app(loc2250,none2166,lv2256,rv2257);
break;
case 1: ++R.GAS;
return $ans2263;
default: throw "No case numbered " + $step2261 + " in $temp_lam2262";
}
}
} catch($e2266) {
if(R.isCont($e2266) && ($step2261 !== 1)) {
$e2266.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2264,$temp_lam2262,$step2261,[],[]);
}
if(R.isPyretException($e2266)) {
$e2266.pyretStack.push($al2264);
}
throw $e2266;
}
};
var anf_arg2269 = R.makeFunction($temp_lam2262,"");
$step2254 = 3;
$al2259 = L[782];
if(!(R.isFunction(anf_fun2267))) {
R.ffi.throwNonFunApp($al2259,anf_fun2267);
}
$ans2258 = anf_fun2267.app(loc2250,anf_arg2268,anf_arg2269);
break;
case 3: ++R.GAS;
return $ans2258;
default: throw "No case numbered " + $step2254 + " in $temp_lam2255";
}
}
} catch($e2270) {
if(R.isCont($e2270) && ($step2254 !== 3)) {
$e2270.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2259,$temp_lam2255,$step2254,[lv2256,rv2257],[anf_fun2267]);
}
if(R.isPyretException($e2270)) {
$e2270.pyretStack.push($al2259);
}
throw $e2270;
}
};
var anf_arg2272 = R.makeFunction($temp_lam2255,"for-body<line 552, column 6>");
$step2245 = 2;
$al2252 = L[785];
if(!(R.isFunction(anf_fun2271))) {
R.ffi.throwNonFunApp($al2252,anf_fun2271);
}
$ans2251 = anf_fun2271.app(anf_arg2272,left2248,right2249);
break;
case 2: $step2245 = 3;
$ans2251 = nothing2;
break;
case 3: ++R.GAS;
return $ans2251;
default: throw "No case numbered " + $step2245 + " in $temp_full2246";
}
}
} catch($e2273) {
if(R.isCont($e2273) && ($step2245 !== 3)) {
$e2273.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2252,$temp_full2246,$step2245,[self2247,left2248,right2249,loc2250],[]);
}
if(R.isPyretException($e2273)) {
$e2273.pyretStack.push($al2252);
}
throw $e2273;
}
};
var anf_obj2638 = R.makeMethod3($temp_full2246,"check-is-not");
var $temp_full2275 = function($self2276,$refinement2277,$left2278,$right2279,$loc2280) {
var $step2274 = 0;
var $ans2281 = D;
var $al2282 = L[799];
try {
if(R.isActivationRecord($self2276)) {
$step2274 = $self2276.step;
$al2282 = $self2276.from;
$ans2281 = $self2276.ans;
self2276 = $self2276.args[0];
refinement2277 = $self2276.args[1];
left2278 = $self2276.args[2];
right2279 = $self2276.args[3];
loc2280 = $self2276.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[799],5,$t);
}
var self2276 = $self2276;
var refinement2277 = $refinement2277;
var left2278 = $left2278;
var right2279 = $right2279;
var loc2280 = $loc2280;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2274) {
case 0: var anf_fun2283 = left$right$check2118.$var;
$step2274 = 1;
$al2282 = L[798];
if(!(R.isFunction(anf_fun2283))) {
R.ffi.throwNonFunApp($al2282,anf_fun2283);
}
$ans2281 = anf_fun2283.app(loc2280);
break;
case 1: var anf_fun2307 = $ans2281;
var $temp_lam2285 = function($lv2286,$rv2287) {
var $step2284 = 0;
var $ans2288 = D;
var $al2289 = L[797];
try {
if(R.isActivationRecord($lv2286)) {
$step2284 = $lv2286.step;
$al2289 = $lv2286.from;
$ans2288 = $lv2286.ans;
lv2286 = $lv2286.args[0];
rv2287 = $lv2286.args[1];
test$result2290 = $lv2286.vars[0];
anf_fun2294 = $lv2286.vars[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[797],2,$t);
}
var lv2286 = $lv2286;
var rv2287 = $rv2287;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2284) {
case 0: $step2284 = 1;
$al2289 = L[796];
if(!(R.isFunction(refinement2277))) {
R.ffi.throwNonFunApp($al2289,refinement2277);
}
$ans2288 = refinement2277.app(lv2286,rv2287);
break;
case 1: var test$result2290 = $ans2288;
$step2284 = 2;
$al2289 = L[795];
if(!(R.isFunction(is$boolean11))) {
R.ffi.throwNonFunApp($al2289,is$boolean11);
}
$ans2288 = is$boolean11.app(test$result2290);
break;
case 2: var anf_arg2291 = $ans2288;
$step2284 = 3;
$al2289 = L[788];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2289,not8);
}
$ans2288 = not8.app(anf_arg2291);
break;
case 3: var anf_arg2292 = $ans2288;
$al2289 = L[788];
var anf_if2305 = R.checkWrapBoolean(anf_arg2292);
$step2284 = R.isPyretTrue(anf_if2305)?4:6;
break;
case 4: var anf_fun2294 = add$result2063.$var;
var anf_fun2293 = error$not$boolean2027.$var;
$step2284 = 5;
$al2289 = L[790];
if(!(R.isFunction(anf_fun2293))) {
R.ffi.throwNonFunApp($al2289,anf_fun2293);
}
$ans2288 = anf_fun2293.app(loc2280,refinement2277,lv2286,rv2287,test$result2290);
break;
case 5: var anf_arg2295 = $ans2288;
$step2284 = 7;
$al2289 = L[789];
if(!(R.isFunction(anf_fun2294))) {
R.ffi.throwNonFunApp($al2289,anf_fun2294);
}
$ans2288 = anf_fun2294.app(anf_arg2295);
break;
case 6: var anf_fun2303 = check$bool2134.$var;
var $temp_lam2297 = function($$resumer1336) {
var $step2296 = 0;
var $ans2298 = D;
var $al2299 = L[793];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2296 = $$resumer1336.step;
$al2299 = $$resumer1336.from;
$ans2298 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
anf_fun2300 = $$resumer1336.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[793],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2296) {
case 0: var anf_fun2300 = failure$not$equal1967.$var;
$step2296 = 1;
$al2299 = L[792];
if(!(R.isFunction(some2170))) {
R.ffi.throwNonFunApp($al2299,some2170);
}
$ans2298 = some2170.app(refinement2277);
break;
case 1: var anf_arg2301 = $ans2298;
$step2296 = 2;
$al2299 = L[791];
if(!(R.isFunction(anf_fun2300))) {
R.ffi.throwNonFunApp($al2299,anf_fun2300);
}
$ans2298 = anf_fun2300.app(loc2280,anf_arg2301,lv2286,rv2287);
break;
case 2: ++R.GAS;
return $ans2298;
default: throw "No case numbered " + $step2296 + " in $temp_lam2297";
}
}
} catch($e2302) {
if(R.isCont($e2302) && ($step2296 !== 2)) {
$e2302.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2299,$temp_lam2297,$step2296,[],[anf_fun2300]);
}
if(R.isPyretException($e2302)) {
$e2302.pyretStack.push($al2299);
}
throw $e2302;
}
};
var anf_arg2304 = R.makeFunction($temp_lam2297,"");
$step2284 = 7;
$al2289 = L[794];
if(!(R.isFunction(anf_fun2303))) {
R.ffi.throwNonFunApp($al2289,anf_fun2303);
}
$ans2288 = anf_fun2303.app(loc2280,test$result2290,anf_arg2304);
break;
case 7: ++R.GAS;
return $ans2288;
default: throw "No case numbered " + $step2284 + " in $temp_lam2285";
}
}
} catch($e2306) {
if(R.isCont($e2306) && ($step2284 !== 7)) {
$e2306.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2289,$temp_lam2285,$step2284,[lv2286,rv2287],[test$result2290,anf_fun2294]);
}
if(R.isPyretException($e2306)) {
$e2306.pyretStack.push($al2289);
}
throw $e2306;
}
};
var anf_arg2308 = R.makeFunction($temp_lam2285,"for-body<line 560, column 6>");
$step2274 = 2;
$al2282 = L[797];
if(!(R.isFunction(anf_fun2307))) {
R.ffi.throwNonFunApp($al2282,anf_fun2307);
}
$ans2281 = anf_fun2307.app(anf_arg2308,left2278,right2279);
break;
case 2: $step2274 = 3;
$ans2281 = nothing2;
break;
case 3: ++R.GAS;
return $ans2281;
default: throw "No case numbered " + $step2274 + " in $temp_full2275";
}
}
} catch($e2309) {
if(R.isCont($e2309) && ($step2274 !== 3)) {
$e2309.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2282,$temp_full2275,$step2274,[self2276,refinement2277,left2278,right2279,loc2280],[]);
}
if(R.isPyretException($e2309)) {
$e2309.pyretStack.push($al2282);
}
throw $e2309;
}
};
var anf_obj2639 = R.makeMethod4($temp_full2275,"check-is-refinement");
var $temp_full2311 = function($self2312,$refinement2313,$left2314,$right2315,$loc2316) {
var $step2310 = 0;
var $ans2317 = D;
var $al2318 = L[812];
try {
if(R.isActivationRecord($self2312)) {
$step2310 = $self2312.step;
$al2318 = $self2312.from;
$ans2317 = $self2312.ans;
self2312 = $self2312.args[0];
refinement2313 = $self2312.args[1];
left2314 = $self2312.args[2];
right2315 = $self2312.args[3];
loc2316 = $self2312.args[4];
} else {
var $l = arguments.length;
if($l !== 5) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[812],5,$t);
}
var self2312 = $self2312;
var refinement2313 = $refinement2313;
var left2314 = $left2314;
var right2315 = $right2315;
var loc2316 = $loc2316;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2310) {
case 0: var anf_fun2319 = left$right$check2118.$var;
$step2310 = 1;
$al2318 = L[811];
if(!(R.isFunction(anf_fun2319))) {
R.ffi.throwNonFunApp($al2318,anf_fun2319);
}
$ans2317 = anf_fun2319.app(loc2316);
break;
case 1: var anf_fun2344 = $ans2317;
var $temp_lam2321 = function($lv2322,$rv2323) {
var $step2320 = 0;
var $ans2324 = D;
var $al2325 = L[810];
try {
if(R.isActivationRecord($lv2322)) {
$step2320 = $lv2322.step;
$al2325 = $lv2322.from;
$ans2324 = $lv2322.ans;
lv2322 = $lv2322.args[0];
rv2323 = $lv2322.args[1];
test$result2326 = $lv2322.vars[0];
anf_fun2330 = $lv2322.vars[1];
anf_fun2339 = $lv2322.vars[2];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[810],2,$t);
}
var lv2322 = $lv2322;
var rv2323 = $rv2323;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2320) {
case 0: $step2320 = 1;
$al2325 = L[809];
if(!(R.isFunction(refinement2313))) {
R.ffi.throwNonFunApp($al2325,refinement2313);
}
$ans2324 = refinement2313.app(lv2322,rv2323);
break;
case 1: var test$result2326 = $ans2324;
$step2320 = 2;
$al2325 = L[808];
if(!(R.isFunction(is$boolean11))) {
R.ffi.throwNonFunApp($al2325,is$boolean11);
}
$ans2324 = is$boolean11.app(test$result2326);
break;
case 2: var anf_arg2327 = $ans2324;
$step2320 = 3;
$al2325 = L[800];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2325,not8);
}
$ans2324 = not8.app(anf_arg2327);
break;
case 3: var anf_arg2328 = $ans2324;
$al2325 = L[800];
var anf_if2342 = R.checkWrapBoolean(anf_arg2328);
$step2320 = R.isPyretTrue(anf_if2342)?4:6;
break;
case 4: var anf_fun2330 = add$result2063.$var;
var anf_fun2329 = error$not$boolean2027.$var;
$step2320 = 5;
$al2325 = L[802];
if(!(R.isFunction(anf_fun2329))) {
R.ffi.throwNonFunApp($al2325,anf_fun2329);
}
$ans2324 = anf_fun2329.app(loc2316,refinement2313,lv2322,rv2323,test$result2326);
break;
case 5: var anf_arg2331 = $ans2324;
$step2320 = 8;
$al2325 = L[801];
if(!(R.isFunction(anf_fun2330))) {
R.ffi.throwNonFunApp($al2325,anf_fun2330);
}
$ans2324 = anf_fun2330.app(anf_arg2331);
break;
case 6: var anf_fun2339 = check$bool2134.$var;
$step2320 = 7;
$al2325 = L[807];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2325,not8);
}
$ans2324 = not8.app(test$result2326);
break;
case 7: var anf_arg2340 = $ans2324;
var $temp_lam2333 = function($$resumer1336) {
var $step2332 = 0;
var $ans2334 = D;
var $al2335 = L[805];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2332 = $$resumer1336.step;
$al2335 = $$resumer1336.from;
$ans2334 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
anf_fun2336 = $$resumer1336.vars[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[805],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2332) {
case 0: var anf_fun2336 = failure$not$different1973.$var;
$step2332 = 1;
$al2335 = L[804];
if(!(R.isFunction(some2170))) {
R.ffi.throwNonFunApp($al2335,some2170);
}
$ans2334 = some2170.app(refinement2313);
break;
case 1: var anf_arg2337 = $ans2334;
$step2332 = 2;
$al2335 = L[803];
if(!(R.isFunction(anf_fun2336))) {
R.ffi.throwNonFunApp($al2335,anf_fun2336);
}
$ans2334 = anf_fun2336.app(loc2316,anf_arg2337,lv2322,rv2323);
break;
case 2: ++R.GAS;
return $ans2334;
default: throw "No case numbered " + $step2332 + " in $temp_lam2333";
}
}
} catch($e2338) {
if(R.isCont($e2338) && ($step2332 !== 2)) {
$e2338.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2335,$temp_lam2333,$step2332,[],[anf_fun2336]);
}
if(R.isPyretException($e2338)) {
$e2338.pyretStack.push($al2335);
}
throw $e2338;
}
};
var anf_arg2341 = R.makeFunction($temp_lam2333,"");
$step2320 = 8;
$al2325 = L[806];
if(!(R.isFunction(anf_fun2339))) {
R.ffi.throwNonFunApp($al2325,anf_fun2339);
}
$ans2324 = anf_fun2339.app(loc2316,anf_arg2340,anf_arg2341);
break;
case 8: ++R.GAS;
return $ans2324;
default: throw "No case numbered " + $step2320 + " in $temp_lam2321";
}
}
} catch($e2343) {
if(R.isCont($e2343) && ($step2320 !== 8)) {
$e2343.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2325,$temp_lam2321,$step2320,[lv2322,rv2323],[test$result2326,anf_fun2330,anf_fun2339]);
}
if(R.isPyretException($e2343)) {
$e2343.pyretStack.push($al2325);
}
throw $e2343;
}
};
var anf_arg2345 = R.makeFunction($temp_lam2321,"for-body<line 572, column 6>");
$step2310 = 2;
$al2318 = L[810];
if(!(R.isFunction(anf_fun2344))) {
R.ffi.throwNonFunApp($al2318,anf_fun2344);
}
$ans2317 = anf_fun2344.app(anf_arg2345,left2314,right2315);
break;
case 2: $step2310 = 3;
$ans2317 = nothing2;
break;
case 3: ++R.GAS;
return $ans2317;
default: throw "No case numbered " + $step2310 + " in $temp_full2311";
}
}
} catch($e2346) {
if(R.isCont($e2346) && ($step2310 !== 3)) {
$e2346.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2318,$temp_full2311,$step2310,[self2312,refinement2313,left2314,right2315,loc2316],[]);
}
if(R.isPyretException($e2346)) {
$e2346.pyretStack.push($al2318);
}
throw $e2346;
}
};
var anf_obj2640 = R.makeMethod4($temp_full2311,"check-is-not-refinement");
var $temp_full2348 = function($self2349,$left2350,$pred2351,$loc2352) {
var $step2347 = 0;
var $ans2353 = D;
var $al2354 = L[819];
try {
if(R.isActivationRecord($self2349)) {
$step2347 = $self2349.step;
$al2354 = $self2349.from;
$ans2353 = $self2349.ans;
self2349 = $self2349.args[0];
left2350 = $self2349.args[1];
pred2351 = $self2349.args[2];
loc2352 = $self2349.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[819],4,$t);
}
var self2349 = $self2349;
var left2350 = $left2350;
var pred2351 = $pred2351;
var loc2352 = $loc2352;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2347) {
case 0: var anf_fun2355 = left$right$check2118.$var;
$step2347 = 1;
$al2354 = L[818];
if(!(R.isFunction(anf_fun2355))) {
R.ffi.throwNonFunApp($al2354,anf_fun2355);
}
$ans2353 = anf_fun2355.app(loc2352);
break;
case 1: var anf_fun2372 = $ans2353;
var $temp_lam2357 = function($lv2358,$pv2359) {
var $step2356 = 0;
var $ans2360 = D;
var $al2361 = L[817];
try {
if(R.isActivationRecord($lv2358)) {
$step2356 = $lv2358.step;
$al2361 = $lv2358.from;
$ans2360 = $lv2358.ans;
lv2358 = $lv2358.args[0];
pv2359 = $lv2358.args[1];
anf_fun2368 = $lv2358.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[817],2,$t);
}
var lv2358 = $lv2358;
var pv2359 = $pv2359;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2356) {
case 0: var anf_fun2368 = check$bool2134.$var;
$step2356 = 1;
$al2361 = L[816];
if(!(R.isFunction(pv2359))) {
R.ffi.throwNonFunApp($al2361,pv2359);
}
$ans2360 = pv2359.app(lv2358);
break;
case 1: var anf_arg2369 = $ans2360;
var $temp_lam2363 = function($$resumer1336) {
var $step2362 = 0;
var $ans2364 = D;
var $al2365 = L[814];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2362 = $$resumer1336.step;
$al2365 = $$resumer1336.from;
$ans2364 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[814],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2362) {
case 0: var anf_fun2366 = failure$not$satisfied1979.$var;
$step2362 = 1;
$al2365 = L[813];
if(!(R.isFunction(anf_fun2366))) {
R.ffi.throwNonFunApp($al2365,anf_fun2366);
}
$ans2364 = anf_fun2366.app(loc2352,lv2358,pv2359);
break;
case 1: ++R.GAS;
return $ans2364;
default: throw "No case numbered " + $step2362 + " in $temp_lam2363";
}
}
} catch($e2367) {
if(R.isCont($e2367) && ($step2362 !== 1)) {
$e2367.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2365,$temp_lam2363,$step2362,[],[]);
}
if(R.isPyretException($e2367)) {
$e2367.pyretStack.push($al2365);
}
throw $e2367;
}
};
var anf_arg2370 = R.makeFunction($temp_lam2363,"");
$step2356 = 2;
$al2361 = L[815];
if(!(R.isFunction(anf_fun2368))) {
R.ffi.throwNonFunApp($al2361,anf_fun2368);
}
$ans2360 = anf_fun2368.app(loc2352,anf_arg2369,anf_arg2370);
break;
case 2: ++R.GAS;
return $ans2360;
default: throw "No case numbered " + $step2356 + " in $temp_lam2357";
}
}
} catch($e2371) {
if(R.isCont($e2371) && ($step2356 !== 2)) {
$e2371.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2361,$temp_lam2357,$step2356,[lv2358,pv2359],[anf_fun2368]);
}
if(R.isPyretException($e2371)) {
$e2371.pyretStack.push($al2361);
}
throw $e2371;
}
};
var anf_arg2373 = R.makeFunction($temp_lam2357,"for-body<line 584, column 6>");
$step2347 = 2;
$al2354 = L[817];
if(!(R.isFunction(anf_fun2372))) {
R.ffi.throwNonFunApp($al2354,anf_fun2372);
}
$ans2353 = anf_fun2372.app(anf_arg2373,left2350,pred2351);
break;
case 2: $step2347 = 3;
$ans2353 = nothing2;
break;
case 3: ++R.GAS;
return $ans2353;
default: throw "No case numbered " + $step2347 + " in $temp_full2348";
}
}
} catch($e2374) {
if(R.isCont($e2374) && ($step2347 !== 3)) {
$e2374.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2354,$temp_full2348,$step2347,[self2349,left2350,pred2351,loc2352],[]);
}
if(R.isPyretException($e2374)) {
$e2374.pyretStack.push($al2354);
}
throw $e2374;
}
};
var anf_obj2641 = R.makeMethod3($temp_full2348,"check-satisfies-delayed");
var $temp_full2376 = function($self2377,$left2378,$pred2379,$loc2380) {
var $step2375 = 0;
var $ans2381 = D;
var $al2382 = L[827];
try {
if(R.isActivationRecord($self2377)) {
$step2375 = $self2377.step;
$al2382 = $self2377.from;
$ans2381 = $self2377.ans;
self2377 = $self2377.args[0];
left2378 = $self2377.args[1];
pred2379 = $self2377.args[2];
loc2380 = $self2377.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[827],4,$t);
}
var self2377 = $self2377;
var left2378 = $left2378;
var pred2379 = $pred2379;
var loc2380 = $loc2380;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2375) {
case 0: var anf_fun2383 = left$right$check2118.$var;
$step2375 = 1;
$al2382 = L[826];
if(!(R.isFunction(anf_fun2383))) {
R.ffi.throwNonFunApp($al2382,anf_fun2383);
}
$ans2381 = anf_fun2383.app(loc2380);
break;
case 1: var anf_fun2401 = $ans2381;
var $temp_lam2385 = function($lv2386,$pv2387) {
var $step2384 = 0;
var $ans2388 = D;
var $al2389 = L[825];
try {
if(R.isActivationRecord($lv2386)) {
$step2384 = $lv2386.step;
$al2389 = $lv2386.from;
$ans2388 = $lv2386.ans;
lv2386 = $lv2386.args[0];
pv2387 = $lv2386.args[1];
anf_fun2397 = $lv2386.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[825],2,$t);
}
var lv2386 = $lv2386;
var pv2387 = $pv2387;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2384) {
case 0: var anf_fun2397 = check$bool2134.$var;
$step2384 = 1;
$al2389 = L[824];
if(!(R.isFunction(pv2387))) {
R.ffi.throwNonFunApp($al2389,pv2387);
}
$ans2388 = pv2387.app(lv2386);
break;
case 1: var anf_arg2390 = $ans2388;
$step2384 = 2;
$al2389 = L[823];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2389,not8);
}
$ans2388 = not8.app(anf_arg2390);
break;
case 2: var anf_arg2398 = $ans2388;
var $temp_lam2392 = function($$resumer1336) {
var $step2391 = 0;
var $ans2393 = D;
var $al2394 = L[821];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2391 = $$resumer1336.step;
$al2394 = $$resumer1336.from;
$ans2393 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[821],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2391) {
case 0: var anf_fun2395 = failure$not$dissatisfied1985.$var;
$step2391 = 1;
$al2394 = L[820];
if(!(R.isFunction(anf_fun2395))) {
R.ffi.throwNonFunApp($al2394,anf_fun2395);
}
$ans2393 = anf_fun2395.app(loc2380,lv2386,pv2387);
break;
case 1: ++R.GAS;
return $ans2393;
default: throw "No case numbered " + $step2391 + " in $temp_lam2392";
}
}
} catch($e2396) {
if(R.isCont($e2396) && ($step2391 !== 1)) {
$e2396.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2394,$temp_lam2392,$step2391,[],[]);
}
if(R.isPyretException($e2396)) {
$e2396.pyretStack.push($al2394);
}
throw $e2396;
}
};
var anf_arg2399 = R.makeFunction($temp_lam2392,"");
$step2384 = 3;
$al2389 = L[822];
if(!(R.isFunction(anf_fun2397))) {
R.ffi.throwNonFunApp($al2389,anf_fun2397);
}
$ans2388 = anf_fun2397.app(loc2380,anf_arg2398,anf_arg2399);
break;
case 3: ++R.GAS;
return $ans2388;
default: throw "No case numbered " + $step2384 + " in $temp_lam2385";
}
}
} catch($e2400) {
if(R.isCont($e2400) && ($step2384 !== 3)) {
$e2400.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2389,$temp_lam2385,$step2384,[lv2386,pv2387],[anf_fun2397]);
}
if(R.isPyretException($e2400)) {
$e2400.pyretStack.push($al2389);
}
throw $e2400;
}
};
var anf_arg2402 = R.makeFunction($temp_lam2385,"for-body<line 592, column 6>");
$step2375 = 2;
$al2382 = L[825];
if(!(R.isFunction(anf_fun2401))) {
R.ffi.throwNonFunApp($al2382,anf_fun2401);
}
$ans2381 = anf_fun2401.app(anf_arg2402,left2378,pred2379);
break;
case 2: $step2375 = 3;
$ans2381 = nothing2;
break;
case 3: ++R.GAS;
return $ans2381;
default: throw "No case numbered " + $step2375 + " in $temp_full2376";
}
}
} catch($e2403) {
if(R.isCont($e2403) && ($step2375 !== 3)) {
$e2403.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2382,$temp_full2376,$step2375,[self2377,left2378,pred2379,loc2380],[]);
}
if(R.isPyretException($e2403)) {
$e2403.pyretStack.push($al2382);
}
throw $e2403;
}
};
var anf_obj2642 = R.makeMethod3($temp_full2376,"check-satisfies-not-delayed");
var $temp_full2405 = function($self2406,$left2407,$pred2408,$loc2409) {
var $step2404 = 0;
var $ans2410 = D;
var $al2411 = L[832];
try {
if(R.isActivationRecord($self2406)) {
$step2404 = $self2406.step;
$al2411 = $self2406.from;
$ans2410 = $self2406.ans;
self2406 = $self2406.args[0];
left2407 = $self2406.args[1];
pred2408 = $self2406.args[2];
loc2409 = $self2406.args[3];
anf_fun2418 = $self2406.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[832],4,$t);
}
var self2406 = $self2406;
var left2407 = $left2407;
var pred2408 = $pred2408;
var loc2409 = $loc2409;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2404) {
case 0: var anf_fun2418 = check$bool2134.$var;
$step2404 = 1;
$al2411 = L[831];
if(!(R.isFunction(pred2408))) {
R.ffi.throwNonFunApp($al2411,pred2408);
}
$ans2410 = pred2408.app(left2407);
break;
case 1: var anf_arg2419 = $ans2410;
var $temp_lam2413 = function($$resumer1336) {
var $step2412 = 0;
var $ans2414 = D;
var $al2415 = L[829];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2412 = $$resumer1336.step;
$al2415 = $$resumer1336.from;
$ans2414 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[829],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2412) {
case 0: var anf_fun2416 = failure$not$satisfied1979.$var;
$step2412 = 1;
$al2415 = L[828];
if(!(R.isFunction(anf_fun2416))) {
R.ffi.throwNonFunApp($al2415,anf_fun2416);
}
$ans2414 = anf_fun2416.app(loc2409,left2407,pred2408);
break;
case 1: ++R.GAS;
return $ans2414;
default: throw "No case numbered " + $step2412 + " in $temp_lam2413";
}
}
} catch($e2417) {
if(R.isCont($e2417) && ($step2412 !== 1)) {
$e2417.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2415,$temp_lam2413,$step2412,[],[]);
}
if(R.isPyretException($e2417)) {
$e2417.pyretStack.push($al2415);
}
throw $e2417;
}
};
var anf_arg2420 = R.makeFunction($temp_lam2413,"");
$step2404 = 2;
$al2411 = L[830];
if(!(R.isFunction(anf_fun2418))) {
R.ffi.throwNonFunApp($al2411,anf_fun2418);
}
$ans2410 = anf_fun2418.app(loc2409,anf_arg2419,anf_arg2420);
break;
case 2: $step2404 = 3;
$ans2410 = nothing2;
break;
case 3: ++R.GAS;
return $ans2410;
default: throw "No case numbered " + $step2404 + " in $temp_full2405";
}
}
} catch($e2421) {
if(R.isCont($e2421) && ($step2404 !== 3)) {
$e2421.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2411,$temp_full2405,$step2404,[self2406,left2407,pred2408,loc2409],[anf_fun2418]);
}
if(R.isPyretException($e2421)) {
$e2421.pyretStack.push($al2411);
}
throw $e2421;
}
};
var anf_obj2643 = R.makeMethod3($temp_full2405,"check-satisfies");
var $temp_full2423 = function($self2424,$left2425,$pred2426,$loc2427) {
var $step2422 = 0;
var $ans2428 = D;
var $al2429 = L[838];
try {
if(R.isActivationRecord($self2424)) {
$step2422 = $self2424.step;
$al2429 = $self2424.from;
$ans2428 = $self2424.ans;
self2424 = $self2424.args[0];
left2425 = $self2424.args[1];
pred2426 = $self2424.args[2];
loc2427 = $self2424.args[3];
anf_fun2437 = $self2424.vars[0];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[838],4,$t);
}
var self2424 = $self2424;
var left2425 = $left2425;
var pred2426 = $pred2426;
var loc2427 = $loc2427;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2422) {
case 0: var anf_fun2437 = check$bool2134.$var;
$step2422 = 1;
$al2429 = L[837];
if(!(R.isFunction(pred2426))) {
R.ffi.throwNonFunApp($al2429,pred2426);
}
$ans2428 = pred2426.app(left2425);
break;
case 1: var anf_arg2430 = $ans2428;
$step2422 = 2;
$al2429 = L[836];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2429,not8);
}
$ans2428 = not8.app(anf_arg2430);
break;
case 2: var anf_arg2438 = $ans2428;
var $temp_lam2432 = function($$resumer1336) {
var $step2431 = 0;
var $ans2433 = D;
var $al2434 = L[834];
try {
if(R.isActivationRecord($$resumer1336)) {
$step2431 = $$resumer1336.step;
$al2434 = $$resumer1336.from;
$ans2433 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[834],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2431) {
case 0: var anf_fun2435 = failure$not$dissatisfied1985.$var;
$step2431 = 1;
$al2434 = L[833];
if(!(R.isFunction(anf_fun2435))) {
R.ffi.throwNonFunApp($al2434,anf_fun2435);
}
$ans2433 = anf_fun2435.app(loc2427,left2425,pred2426);
break;
case 1: ++R.GAS;
return $ans2433;
default: throw "No case numbered " + $step2431 + " in $temp_lam2432";
}
}
} catch($e2436) {
if(R.isCont($e2436) && ($step2431 !== 1)) {
$e2436.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2434,$temp_lam2432,$step2431,[],[]);
}
if(R.isPyretException($e2436)) {
$e2436.pyretStack.push($al2434);
}
throw $e2436;
}
};
var anf_arg2439 = R.makeFunction($temp_lam2432,"");
$step2422 = 3;
$al2429 = L[835];
if(!(R.isFunction(anf_fun2437))) {
R.ffi.throwNonFunApp($al2429,anf_fun2437);
}
$ans2428 = anf_fun2437.app(loc2427,anf_arg2438,anf_arg2439);
break;
case 3: $step2422 = 4;
$ans2428 = nothing2;
break;
case 4: ++R.GAS;
return $ans2428;
default: throw "No case numbered " + $step2422 + " in $temp_full2423";
}
}
} catch($e2440) {
if(R.isCont($e2440) && ($step2422 !== 4)) {
$e2440.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2429,$temp_full2423,$step2422,[self2424,left2425,pred2426,loc2427],[anf_fun2437]);
}
if(R.isPyretException($e2440)) {
$e2440.pyretStack.push($al2429);
}
throw $e2440;
}
};
var anf_obj2644 = R.makeMethod3($temp_full2423,"check-satisfies-not");
var $temp_full2442 = function($self2443,$thunk2444,$expected2445,$comparator2446,$on$failure2447,$loc2448) {
var $step2441 = 0;
var $ans2449 = D;
var $al2450 = L[854];
try {
if(R.isActivationRecord($self2443)) {
$step2441 = $self2443.step;
$al2450 = $self2443.from;
$ans2449 = $self2443.ans;
self2443 = $self2443.args[0];
thunk2444 = $self2443.args[1];
expected2445 = $self2443.args[2];
comparator2446 = $self2443.args[3];
on$failure2447 = $self2443.args[4];
loc2448 = $self2443.args[5];
cases2452 = $self2443.vars[0];
anf_fun2455 = $self2443.vars[1];
anf_fun2453 = $self2443.vars[2];
} else {
var $l = arguments.length;
if($l !== 6) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[854],6,$t);
}
var self2443 = $self2443;
var thunk2444 = $thunk2444;
var expected2445 = $expected2445;
var comparator2446 = $comparator2446;
var on$failure2447 = $on$failure2447;
var loc2448 = $loc2448;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2441) {
case 0: $step2441 = 1;
$al2450 = L[853];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2450,run$task9);
}
$ans2449 = run$task9.app(thunk2444);
break;
case 1: var result2451 = $ans2449;
var cases2452 = result2451;
$step2441 = 2;
$al2450 = L[852];
R._checkAnn(L[852],Either2181,cases2452);
break;
case 2: var $cases_dispatch2472 = {"left":3,
"right":6};
$al2450 = L[843];
$step2441 = $cases_dispatch2472[cases2452.$name] || 7;
break;
case 3: if(cases2452.$arity !== 1) {
if(cases2452.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[842],1,cases2452.$arity,L[843]);
} else {
R.ffi.throwCasesSingletonErrorC(L[842],true,L[843]);
}
}
var $fn274 = cases2452.$constructor.$fieldNames;
R.derefField(cases2452.dict[$fn274[0]],cases2452.$mut_fields_mask[0],false);
var anf_fun2455 = add$result2063.$var;
var anf_fun2453 = failure$no$exn2009.$var;
$step2441 = 4;
$al2450 = L[841];
if(!(R.isFunction(some2170))) {
R.ffi.throwNonFunApp($al2450,some2170);
}
$ans2449 = some2170.app(expected2445);
break;
case 4: var anf_arg2454 = $ans2449;
$step2441 = 5;
$al2450 = L[840];
if(!(R.isFunction(anf_fun2453))) {
R.ffi.throwNonFunApp($al2450,anf_fun2453);
}
$ans2449 = anf_fun2453.app(loc2448,anf_arg2454);
break;
case 5: var anf_arg2456 = $ans2449;
$step2441 = 8;
$al2450 = L[839];
if(!(R.isFunction(anf_fun2455))) {
R.ffi.throwNonFunApp($al2450,anf_fun2455);
}
$ans2449 = anf_fun2455.app(anf_arg2456);
break;
case 6: if(cases2452.$arity !== 1) {
if(cases2452.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[850],1,cases2452.$arity,L[843]);
} else {
R.ffi.throwCasesSingletonErrorC(L[850],true,L[843]);
}
}
$step2441 = 8;
$al2450 = L[851];
var $temp_branch2467 = function($v2458) {
var $step2468 = 0;
var $ans2469 = D;
var $al2470 = L[849];
try {
if(R.isActivationRecord($v2458)) {
$step2468 = $v2458.step;
$al2470 = $v2458.from;
$ans2469 = $v2458.ans;
v2458 = $v2458.args[0];
anf_fun2462 = $v2458.vars[0];
anf_fun2464 = $v2458.vars[1];
} else {
var v2458 = $v2458;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2468) {
case 0: $step2468 = 1;
$al2470 = L[849];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2470,exn$unwrap7);
}
$ans2469 = exn$unwrap7.app(v2458);
break;
case 1: var anf_arg2459 = $ans2469;
$step2468 = 2;
$al2470 = L[844];
if(!(R.isFunction(comparator2446))) {
R.ffi.throwNonFunApp($al2470,comparator2446);
}
$ans2469 = comparator2446.app(anf_arg2459,expected2445);
break;
case 2: var anf_arg2460 = $ans2469;
$al2470 = L[844];
var anf_if2466 = R.checkWrapBoolean(anf_arg2460);
$step2468 = R.isPyretTrue(anf_if2466)?3:5;
break;
case 3: var anf_fun2462 = add$result2063.$var;
var anf_fun2461 = success1961.$var;
$step2468 = 4;
$al2470 = L[846];
if(!(R.isFunction(anf_fun2461))) {
R.ffi.throwNonFunApp($al2470,anf_fun2461);
}
$ans2469 = anf_fun2461.app(loc2448);
break;
case 4: var anf_arg2463 = $ans2469;
$step2468 = 7;
$al2470 = L[845];
if(!(R.isFunction(anf_fun2462))) {
R.ffi.throwNonFunApp($al2470,anf_fun2462);
}
$ans2469 = anf_fun2462.app(anf_arg2463);
break;
case 5: var anf_fun2464 = add$result2063.$var;
$step2468 = 6;
$al2470 = L[848];
if(!(R.isFunction(on$failure2447))) {
R.ffi.throwNonFunApp($al2470,on$failure2447);
}
$ans2469 = on$failure2447.app(v2458);
break;
case 6: var anf_arg2465 = $ans2469;
$step2468 = 7;
$al2470 = L[847];
if(!(R.isFunction(anf_fun2464))) {
R.ffi.throwNonFunApp($al2470,anf_fun2464);
}
$ans2469 = anf_fun2464.app(anf_arg2465);
break;
case 7: ++R.GAS;
return $ans2469;
default: throw "No case numbered " + $step2468 + " in $temp_branch2467";
}
}
} catch($e2471) {
if(R.isCont($e2471) && ($step2468 !== 7)) {
$e2471.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2470,$temp_branch2467,$step2468,[v2458],[anf_fun2462,anf_fun2464]);
}
if(R.isPyretException($e2471)) {
$e2471.pyretStack.push($al2470);
}
throw $e2471;
}
};
$ans2449 = cases2452.$app_fields($temp_branch2467,[false]);
break;
case 7: $step2441 = 8;
$al2450 = L[843];
$ans2449 = R.throwNoCasesMatched(L[843],cases2452);
break;
case 8: $step2441 = 9;
$ans2449 = nothing2;
break;
case 9: ++R.GAS;
return $ans2449;
default: throw "No case numbered " + $step2441 + " in $temp_full2442";
}
}
} catch($e2473) {
if(R.isCont($e2473) && ($step2441 !== 9)) {
$e2473.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2450,$temp_full2442,$step2441,[self2443,thunk2444,expected2445,comparator2446,on$failure2447,loc2448],[cases2452,anf_fun2455,anf_fun2453]);
}
if(R.isPyretException($e2473)) {
$e2473.pyretStack.push($al2450);
}
throw $e2473;
}
};
var anf_obj2645 = R.makeMethod5($temp_full2442,"check-raises");
var $temp_full2475 = function($self2476,$thunk2477,$str2478,$loc2479) {
var $step2474 = 0;
var $ans2480 = D;
var $al2481 = L[861];
try {
if(R.isActivationRecord($self2476)) {
$step2474 = $self2476.step;
$al2481 = $self2476.from;
$ans2480 = $self2476.ans;
self2476 = $self2476.args[0];
thunk2477 = $self2476.args[1];
str2478 = $self2476.args[2];
loc2479 = $self2476.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[861],4,$t);
}
var self2476 = $self2476;
var thunk2477 = $thunk2477;
var str2478 = $str2478;
var loc2479 = $loc2479;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2474) {
case 0: var $temp_lam2483 = function($exn2484,$s2485) {
var $step2482 = 0;
var $ans2486 = D;
var $al2487 = L[857];
try {
if(R.isActivationRecord($exn2484)) {
$step2482 = $exn2484.step;
$al2487 = $exn2484.from;
$ans2486 = $exn2484.ans;
exn2484 = $exn2484.args[0];
s2485 = $exn2484.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[857],2,$t);
}
var exn2484 = $exn2484;
var s2485 = $s2485;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2482) {
case 0: $step2482 = 1;
$al2487 = L[856];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al2487,torepr6);
}
$ans2486 = torepr6.app(exn2484);
break;
case 1: var anf_arg2488 = $ans2486;
$step2482 = 2;
$al2487 = L[855];
if(!(R.isFunction(string$contains10))) {
R.ffi.throwNonFunApp($al2487,string$contains10);
}
$ans2486 = string$contains10.app(anf_arg2488,s2485);
break;
case 2: ++R.GAS;
return $ans2486;
default: throw "No case numbered " + $step2482 + " in $temp_lam2483";
}
}
} catch($e2489) {
if(R.isCont($e2489) && ($step2482 !== 2)) {
$e2489.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2487,$temp_lam2483,$step2482,[exn2484,s2485],[]);
}
if(R.isPyretException($e2489)) {
$e2489.pyretStack.push($al2487);
}
throw $e2489;
}
};
var anf_arg2497 = R.makeFunction($temp_lam2483,"");
var $temp_lam2491 = function($exn2492) {
var $step2490 = 0;
var $ans2493 = D;
var $al2494 = L[859];
try {
if(R.isActivationRecord($exn2492)) {
$step2490 = $exn2492.step;
$al2494 = $exn2492.from;
$ans2493 = $exn2492.ans;
exn2492 = $exn2492.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[859],1,$t);
}
var exn2492 = $exn2492;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2490) {
case 0: var anf_fun2495 = failure$wrong$exn1991.$var;
$step2490 = 1;
$al2494 = L[858];
if(!(R.isFunction(anf_fun2495))) {
R.ffi.throwNonFunApp($al2494,anf_fun2495);
}
$ans2493 = anf_fun2495.app(loc2479,str2478,exn2492);
break;
case 1: ++R.GAS;
return $ans2493;
default: throw "No case numbered " + $step2490 + " in $temp_lam2491";
}
}
} catch($e2496) {
if(R.isCont($e2496) && ($step2490 !== 1)) {
$e2496.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2494,$temp_lam2491,$step2490,[exn2492],[]);
}
if(R.isPyretException($e2496)) {
$e2496.pyretStack.push($al2494);
}
throw $e2496;
}
};
var anf_arg2498 = R.makeFunction($temp_lam2491,"");
$step2474 = 1;
$al2481 = L[860];
$field2499 = R.getColonFieldLoc(self2476,"check-raises",L[860]);
if(R.isMethod($field2499)) {
$ans2480 = $field2499.full_meth(self2476,thunk2477,str2478,anf_arg2497,anf_arg2498,loc2479);
} else {
if(!(R.isFunction($field2499))) {
R.ffi.throwNonFunApp(L[860],$field2499);
}
$ans2480 = $field2499.app(thunk2477,str2478,anf_arg2497,anf_arg2498,loc2479);
}
break;
case 1: $step2474 = 2;
$ans2480 = nothing2;
break;
case 2: ++R.GAS;
return $ans2480;
default: throw "No case numbered " + $step2474 + " in $temp_full2475";
}
}
} catch($e2500) {
if(R.isCont($e2500) && ($step2474 !== 2)) {
$e2500.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2481,$temp_full2475,$step2474,[self2476,thunk2477,str2478,loc2479],[]);
}
if(R.isPyretException($e2500)) {
$e2500.pyretStack.push($al2481);
}
throw $e2500;
}
};
var anf_obj2646 = R.makeMethod3($temp_full2475,"check-raises-str");
var $temp_full2502 = function($self2503,$thunk2504,$str2505,$loc2506) {
var $step2501 = 0;
var $ans2507 = D;
var $al2508 = L[869];
try {
if(R.isActivationRecord($self2503)) {
$step2501 = $self2503.step;
$al2508 = $self2503.from;
$ans2507 = $self2503.ans;
self2503 = $self2503.args[0];
thunk2504 = $self2503.args[1];
str2505 = $self2503.args[2];
loc2506 = $self2503.args[3];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[869],4,$t);
}
var self2503 = $self2503;
var thunk2504 = $thunk2504;
var str2505 = $str2505;
var loc2506 = $loc2506;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2501) {
case 0: var $temp_lam2510 = function($exn2511,$s2512) {
var $step2509 = 0;
var $ans2513 = D;
var $al2514 = L[865];
try {
if(R.isActivationRecord($exn2511)) {
$step2509 = $exn2511.step;
$al2514 = $exn2511.from;
$ans2513 = $exn2511.ans;
exn2511 = $exn2511.args[0];
s2512 = $exn2511.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[865],2,$t);
}
var exn2511 = $exn2511;
var s2512 = $s2512;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2509) {
case 0: $step2509 = 1;
$al2514 = L[864];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al2514,torepr6);
}
$ans2513 = torepr6.app(exn2511);
break;
case 1: var anf_arg2515 = $ans2513;
$step2509 = 2;
$al2514 = L[863];
if(!(R.isFunction(string$contains10))) {
R.ffi.throwNonFunApp($al2514,string$contains10);
}
$ans2513 = string$contains10.app(anf_arg2515,s2512);
break;
case 2: var anf_arg2516 = $ans2513;
$step2509 = 3;
$al2514 = L[862];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2514,not8);
}
$ans2513 = not8.app(anf_arg2516);
break;
case 3: ++R.GAS;
return $ans2513;
default: throw "No case numbered " + $step2509 + " in $temp_lam2510";
}
}
} catch($e2517) {
if(R.isCont($e2517) && ($step2509 !== 3)) {
$e2517.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2514,$temp_lam2510,$step2509,[exn2511,s2512],[]);
}
if(R.isPyretException($e2517)) {
$e2517.pyretStack.push($al2514);
}
throw $e2517;
}
};
var anf_arg2525 = R.makeFunction($temp_lam2510,"");
var $temp_lam2519 = function($exn2520) {
var $step2518 = 0;
var $ans2521 = D;
var $al2522 = L[867];
try {
if(R.isActivationRecord($exn2520)) {
$step2518 = $exn2520.step;
$al2522 = $exn2520.from;
$ans2521 = $exn2520.ans;
exn2520 = $exn2520.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[867],1,$t);
}
var exn2520 = $exn2520;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2518) {
case 0: var anf_fun2523 = failure$right$exn1997.$var;
$step2518 = 1;
$al2522 = L[866];
if(!(R.isFunction(anf_fun2523))) {
R.ffi.throwNonFunApp($al2522,anf_fun2523);
}
$ans2521 = anf_fun2523.app(loc2506,str2505,exn2520);
break;
case 1: ++R.GAS;
return $ans2521;
default: throw "No case numbered " + $step2518 + " in $temp_lam2519";
}
}
} catch($e2524) {
if(R.isCont($e2524) && ($step2518 !== 1)) {
$e2524.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2522,$temp_lam2519,$step2518,[exn2520],[]);
}
if(R.isPyretException($e2524)) {
$e2524.pyretStack.push($al2522);
}
throw $e2524;
}
};
var anf_arg2526 = R.makeFunction($temp_lam2519,"");
$step2501 = 1;
$al2508 = L[868];
$field2527 = R.getColonFieldLoc(self2503,"check-raises",L[868]);
if(R.isMethod($field2527)) {
$ans2507 = $field2527.full_meth(self2503,thunk2504,str2505,anf_arg2525,anf_arg2526,loc2506);
} else {
if(!(R.isFunction($field2527))) {
R.ffi.throwNonFunApp(L[868],$field2527);
}
$ans2507 = $field2527.app(thunk2504,str2505,anf_arg2525,anf_arg2526,loc2506);
}
break;
case 1: $step2501 = 2;
$ans2507 = nothing2;
break;
case 2: ++R.GAS;
return $ans2507;
default: throw "No case numbered " + $step2501 + " in $temp_full2502";
}
}
} catch($e2528) {
if(R.isCont($e2528) && ($step2501 !== 2)) {
$e2528.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2508,$temp_full2502,$step2501,[self2503,thunk2504,str2505,loc2506],[]);
}
if(R.isPyretException($e2528)) {
$e2528.pyretStack.push($al2508);
}
throw $e2528;
}
};
var anf_obj2647 = R.makeMethod3($temp_full2502,"check-raises-other-str");
var $temp_full2530 = function($self2531,$thunk2532,$loc2533) {
var $step2529 = 0;
var $ans2534 = D;
var $al2535 = L[878];
try {
if(R.isActivationRecord($self2531)) {
$step2529 = $self2531.step;
$al2535 = $self2531.from;
$ans2534 = $self2531.ans;
self2531 = $self2531.args[0];
thunk2532 = $self2531.args[1];
loc2533 = $self2531.args[2];
anf_fun2543 = $self2531.vars[0];
cases2536 = $self2531.vars[1];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[878],3,$t);
}
var self2531 = $self2531;
var thunk2532 = $thunk2532;
var loc2533 = $loc2533;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2529) {
case 0: var anf_fun2543 = add$result2063.$var;
$step2529 = 1;
$al2535 = L[877];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2535,run$task9);
}
$ans2534 = run$task9.app(thunk2532);
break;
case 1: var cases2536 = $ans2534;
$step2529 = 2;
$al2535 = L[876];
R._checkAnn(L[876],Either2181,cases2536);
break;
case 2: var $cases_dispatch2542 = {"left":3,
"right":4};
$al2535 = L[872];
$step2529 = $cases_dispatch2542[cases2536.$name] || 5;
break;
case 3: if(cases2536.$arity !== 1) {
if(cases2536.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[871],1,cases2536.$arity,L[872]);
} else {
R.ffi.throwCasesSingletonErrorC(L[871],true,L[872]);
}
}
var $fn274 = cases2536.$constructor.$fieldNames;
R.derefField(cases2536.dict[$fn274[0]],cases2536.$mut_fields_mask[0],false);
var anf_fun2537 = success1961.$var;
$step2529 = 6;
$al2535 = L[870];
if(!(R.isFunction(anf_fun2537))) {
R.ffi.throwNonFunApp($al2535,anf_fun2537);
}
$ans2534 = anf_fun2537.app(loc2533);
break;
case 4: if(cases2536.$arity !== 1) {
if(cases2536.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[874],1,cases2536.$arity,L[872]);
} else {
R.ffi.throwCasesSingletonErrorC(L[874],true,L[872]);
}
}
var $fn274 = cases2536.$constructor.$fieldNames;
var exn2540 = R.derefField(cases2536.dict[$fn274[0]],cases2536.$mut_fields_mask[0],false);
var anf_fun2539 = failure$exn2003.$var;
var anf_arg2541 = on$left99.$var;
$step2529 = 6;
$al2535 = L[873];
if(!(R.isFunction(anf_fun2539))) {
R.ffi.throwNonFunApp($al2535,anf_fun2539);
}
$ans2534 = anf_fun2539.app(loc2533,exn2540,anf_arg2541);
break;
case 5: $step2529 = 6;
$al2535 = L[872];
$ans2534 = R.throwNoCasesMatched(L[872],cases2536);
break;
case 6: var anf_arg2544 = $ans2534;
$step2529 = 7;
$al2535 = L[875];
if(!(R.isFunction(anf_fun2543))) {
R.ffi.throwNonFunApp($al2535,anf_fun2543);
}
$ans2534 = anf_fun2543.app(anf_arg2544);
break;
case 7: $step2529 = 8;
$ans2534 = nothing2;
break;
case 8: ++R.GAS;
return $ans2534;
default: throw "No case numbered " + $step2529 + " in $temp_full2530";
}
}
} catch($e2545) {
if(R.isCont($e2545) && ($step2529 !== 8)) {
$e2545.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2535,$temp_full2530,$step2529,[self2531,thunk2532,loc2533],[anf_fun2543,cases2536]);
}
if(R.isPyretException($e2545)) {
$e2545.pyretStack.push($al2535);
}
throw $e2545;
}
};
var anf_obj2648 = R.makeMethod2($temp_full2530,"check-raises-not");
var $temp_full2547 = function($self2548,$thunk2549,$pred2550,$loc2551) {
var $step2546 = 0;
var $ans2552 = D;
var $al2553 = L[895];
try {
if(R.isActivationRecord($self2548)) {
$step2546 = $self2548.step;
$al2553 = $self2548.from;
$ans2552 = $self2548.ans;
self2548 = $self2548.args[0];
thunk2549 = $self2548.args[1];
pred2550 = $self2548.args[2];
loc2551 = $self2548.args[3];
anf_fun2575 = $self2548.vars[0];
cases2554 = $self2548.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[895],4,$t);
}
var self2548 = $self2548;
var thunk2549 = $thunk2549;
var pred2550 = $pred2550;
var loc2551 = $loc2551;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2546) {
case 0: var anf_fun2575 = add$result2063.$var;
$step2546 = 1;
$al2553 = L[894];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2553,run$task9);
}
$ans2552 = run$task9.app(thunk2549);
break;
case 1: var cases2554 = $ans2552;
$step2546 = 2;
$al2553 = L[893];
R._checkAnn(L[893],Either2181,cases2554);
break;
case 2: var $cases_dispatch2574 = {"left":3,
"right":4};
$al2553 = L[881];
$step2546 = $cases_dispatch2574[cases2554.$name] || 5;
break;
case 3: if(cases2554.$arity !== 1) {
if(cases2554.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[880],1,cases2554.$arity,L[881]);
} else {
R.ffi.throwCasesSingletonErrorC(L[880],true,L[881]);
}
}
var $fn274 = cases2554.$constructor.$fieldNames;
R.derefField(cases2554.dict[$fn274[0]],cases2554.$mut_fields_mask[0],false);
var anf_fun2555 = failure$no$exn2009.$var;
$step2546 = 6;
$al2553 = L[879];
if(!(R.isFunction(anf_fun2555))) {
R.ffi.throwNonFunApp($al2553,anf_fun2555);
}
$ans2552 = anf_fun2555.app(loc2551,none2166);
break;
case 4: if(cases2554.$arity !== 1) {
if(cases2554.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[890],1,cases2554.$arity,L[881]);
} else {
R.ffi.throwCasesSingletonErrorC(L[890],true,L[881]);
}
}
$step2546 = 6;
$al2553 = L[891];
var $temp_branch2568 = function($exn2557) {
var $step2569 = 0;
var $ans2570 = D;
var $al2571 = L[889];
try {
if(R.isActivationRecord($exn2557)) {
$step2569 = $exn2557.step;
$al2571 = $exn2557.from;
$ans2570 = $exn2557.ans;
exn2557 = $exn2557.args[0];
} else {
var exn2557 = $exn2557;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2569) {
case 0: $step2569 = 1;
$al2571 = L[889];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2571,exn$unwrap7);
}
$ans2570 = exn$unwrap7.app(exn2557);
break;
case 1: var anf_arg2558 = $ans2570;
$step2569 = 2;
$al2571 = L[882];
$field2572 = R.getColonFieldLoc(E18,"is-user-exception",L[882]);
if(R.isMethod($field2572)) {
$ans2570 = $field2572.full_meth(E18,anf_arg2558);
} else {
if(!(R.isFunction($field2572))) {
R.ffi.throwNonFunApp(L[882],$field2572);
}
$ans2570 = $field2572.app(anf_arg2558);
}
break;
case 2: var anf_arg2560 = $ans2570;
$al2571 = L[882];
var anf_if2567 = R.checkWrapBoolean(anf_arg2560);
$step2569 = R.isPyretTrue(anf_if2567)?3:5;
break;
case 3: $step2569 = 4;
$al2571 = L[884];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2571,exn$unwrap7);
}
$ans2570 = exn$unwrap7.app(exn2557);
break;
case 4: var anf_bracket2561 = $ans2570;
$step2569 = 6;
$al2571 = L[883];
$ans2570 = G(anf_bracket2561,"value",L[883]);
break;
case 5: $step2569 = 6;
$al2571 = L[885];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2571,exn$unwrap7);
}
$ans2570 = exn$unwrap7.app(exn2557);
break;
case 6: var anf_arg2562 = $ans2570;
$step2569 = 7;
$al2571 = L[886];
if(!(R.isFunction(pred2550))) {
R.ffi.throwNonFunApp($al2571,pred2550);
}
$ans2570 = pred2550.app(anf_arg2562);
break;
case 7: var anf_arg2563 = $ans2570;
$al2571 = L[886];
var anf_if2566 = R.checkWrapBoolean(anf_arg2563);
$step2569 = R.isPyretTrue(anf_if2566)?8:9;
break;
case 8: var anf_fun2564 = success1961.$var;
$step2569 = 10;
$al2571 = L[887];
if(!(R.isFunction(anf_fun2564))) {
R.ffi.throwNonFunApp($al2571,anf_fun2564);
}
$ans2570 = anf_fun2564.app(loc2551);
break;
case 9: var anf_fun2565 = failure$raise$not$satisfied2015.$var;
$step2569 = 10;
$al2571 = L[888];
if(!(R.isFunction(anf_fun2565))) {
R.ffi.throwNonFunApp($al2571,anf_fun2565);
}
$ans2570 = anf_fun2565.app(loc2551,exn2557,pred2550);
break;
case 10: ++R.GAS;
return $ans2570;
default: throw "No case numbered " + $step2569 + " in $temp_branch2568";
}
}
} catch($e2573) {
if(R.isCont($e2573) && ($step2569 !== 10)) {
$e2573.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2571,$temp_branch2568,$step2569,[exn2557],[]);
}
if(R.isPyretException($e2573)) {
$e2573.pyretStack.push($al2571);
}
throw $e2573;
}
};
$ans2552 = cases2554.$app_fields($temp_branch2568,[false]);
break;
case 5: $step2546 = 6;
$al2553 = L[881];
$ans2552 = R.throwNoCasesMatched(L[881],cases2554);
break;
case 6: var anf_arg2576 = $ans2552;
$step2546 = 7;
$al2553 = L[892];
if(!(R.isFunction(anf_fun2575))) {
R.ffi.throwNonFunApp($al2553,anf_fun2575);
}
$ans2552 = anf_fun2575.app(anf_arg2576);
break;
case 7: $step2546 = 8;
$ans2552 = nothing2;
break;
case 8: ++R.GAS;
return $ans2552;
default: throw "No case numbered " + $step2546 + " in $temp_full2547";
}
}
} catch($e2577) {
if(R.isCont($e2577) && ($step2546 !== 8)) {
$e2577.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2553,$temp_full2547,$step2546,[self2548,thunk2549,pred2550,loc2551],[anf_fun2575,cases2554]);
}
if(R.isPyretException($e2577)) {
$e2577.pyretStack.push($al2553);
}
throw $e2577;
}
};
var anf_obj2649 = R.makeMethod3($temp_full2547,"check-raises-satisfies");
var $temp_full2579 = function($self2580,$thunk2581,$pred2582,$loc2583) {
var $step2578 = 0;
var $ans2584 = D;
var $al2585 = L[913];
try {
if(R.isActivationRecord($self2580)) {
$step2578 = $self2580.step;
$al2585 = $self2580.from;
$ans2584 = $self2580.ans;
self2580 = $self2580.args[0];
thunk2581 = $self2580.args[1];
pred2582 = $self2580.args[2];
loc2583 = $self2580.args[3];
anf_fun2608 = $self2580.vars[0];
cases2586 = $self2580.vars[1];
} else {
var $l = arguments.length;
if($l !== 4) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[913],4,$t);
}
var self2580 = $self2580;
var thunk2581 = $thunk2581;
var pred2582 = $pred2582;
var loc2583 = $loc2583;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2578) {
case 0: var anf_fun2608 = add$result2063.$var;
$step2578 = 1;
$al2585 = L[912];
if(!(R.isFunction(run$task9))) {
R.ffi.throwNonFunApp($al2585,run$task9);
}
$ans2584 = run$task9.app(thunk2581);
break;
case 1: var cases2586 = $ans2584;
$step2578 = 2;
$al2585 = L[911];
R._checkAnn(L[911],Either2181,cases2586);
break;
case 2: var $cases_dispatch2607 = {"left":3,
"right":4};
$al2585 = L[898];
$step2578 = $cases_dispatch2607[cases2586.$name] || 5;
break;
case 3: if(cases2586.$arity !== 1) {
if(cases2586.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[897],1,cases2586.$arity,L[898]);
} else {
R.ffi.throwCasesSingletonErrorC(L[897],true,L[898]);
}
}
var $fn274 = cases2586.$constructor.$fieldNames;
R.derefField(cases2586.dict[$fn274[0]],cases2586.$mut_fields_mask[0],false);
var anf_fun2587 = failure$no$exn2009.$var;
$step2578 = 6;
$al2585 = L[896];
if(!(R.isFunction(anf_fun2587))) {
R.ffi.throwNonFunApp($al2585,anf_fun2587);
}
$ans2584 = anf_fun2587.app(loc2583,none2166);
break;
case 4: if(cases2586.$arity !== 1) {
if(cases2586.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[908],1,cases2586.$arity,L[898]);
} else {
R.ffi.throwCasesSingletonErrorC(L[908],true,L[898]);
}
}
$step2578 = 6;
$al2585 = L[909];
var $temp_branch2601 = function($exn2589) {
var $step2602 = 0;
var $ans2603 = D;
var $al2604 = L[907];
try {
if(R.isActivationRecord($exn2589)) {
$step2602 = $exn2589.step;
$al2604 = $exn2589.from;
$ans2603 = $exn2589.ans;
exn2589 = $exn2589.args[0];
} else {
var exn2589 = $exn2589;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2602) {
case 0: $step2602 = 1;
$al2604 = L[907];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2604,exn$unwrap7);
}
$ans2603 = exn$unwrap7.app(exn2589);
break;
case 1: var anf_arg2590 = $ans2603;
$step2602 = 2;
$al2604 = L[899];
$field2605 = R.getColonFieldLoc(E18,"is-user-exception",L[899]);
if(R.isMethod($field2605)) {
$ans2603 = $field2605.full_meth(E18,anf_arg2590);
} else {
if(!(R.isFunction($field2605))) {
R.ffi.throwNonFunApp(L[899],$field2605);
}
$ans2603 = $field2605.app(anf_arg2590);
}
break;
case 2: var anf_arg2592 = $ans2603;
$al2604 = L[899];
var anf_if2600 = R.checkWrapBoolean(anf_arg2592);
$step2602 = R.isPyretTrue(anf_if2600)?3:5;
break;
case 3: $step2602 = 4;
$al2604 = L[901];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2604,exn$unwrap7);
}
$ans2603 = exn$unwrap7.app(exn2589);
break;
case 4: var anf_bracket2593 = $ans2603;
$step2602 = 6;
$al2604 = L[900];
$ans2603 = G(anf_bracket2593,"value",L[900]);
break;
case 5: $step2602 = 6;
$al2604 = L[902];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2604,exn$unwrap7);
}
$ans2603 = exn$unwrap7.app(exn2589);
break;
case 6: var anf_arg2594 = $ans2603;
$step2602 = 7;
$al2604 = L[906];
if(!(R.isFunction(pred2582))) {
R.ffi.throwNonFunApp($al2604,pred2582);
}
$ans2603 = pred2582.app(anf_arg2594);
break;
case 7: var anf_arg2595 = $ans2603;
$step2602 = 8;
$al2604 = L[903];
if(!(R.isFunction(not8))) {
R.ffi.throwNonFunApp($al2604,not8);
}
$ans2603 = not8.app(anf_arg2595);
break;
case 8: var anf_arg2596 = $ans2603;
$al2604 = L[903];
var anf_if2599 = R.checkWrapBoolean(anf_arg2596);
$step2602 = R.isPyretTrue(anf_if2599)?9:10;
break;
case 9: var anf_fun2597 = success1961.$var;
$step2602 = 11;
$al2604 = L[904];
if(!(R.isFunction(anf_fun2597))) {
R.ffi.throwNonFunApp($al2604,anf_fun2597);
}
$ans2603 = anf_fun2597.app(loc2583);
break;
case 10: var anf_fun2598 = failure$raise$not$dissatisfied2021.$var;
$step2602 = 11;
$al2604 = L[905];
if(!(R.isFunction(anf_fun2598))) {
R.ffi.throwNonFunApp($al2604,anf_fun2598);
}
$ans2603 = anf_fun2598.app(loc2583,exn2589,pred2582);
break;
case 11: ++R.GAS;
return $ans2603;
default: throw "No case numbered " + $step2602 + " in $temp_branch2601";
}
}
} catch($e2606) {
if(R.isCont($e2606) && ($step2602 !== 11)) {
$e2606.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2604,$temp_branch2601,$step2602,[exn2589],[]);
}
if(R.isPyretException($e2606)) {
$e2606.pyretStack.push($al2604);
}
throw $e2606;
}
};
$ans2584 = cases2586.$app_fields($temp_branch2601,[false]);
break;
case 5: $step2578 = 6;
$al2585 = L[898];
$ans2584 = R.throwNoCasesMatched(L[898],cases2586);
break;
case 6: var anf_arg2609 = $ans2584;
$step2578 = 7;
$al2585 = L[910];
if(!(R.isFunction(anf_fun2608))) {
R.ffi.throwNonFunApp($al2585,anf_fun2608);
}
$ans2584 = anf_fun2608.app(anf_arg2609);
break;
case 7: $step2578 = 8;
$ans2584 = nothing2;
break;
case 8: ++R.GAS;
return $ans2584;
default: throw "No case numbered " + $step2578 + " in $temp_full2579";
}
}
} catch($e2610) {
if(R.isCont($e2610) && ($step2578 !== 8)) {
$e2610.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2585,$temp_full2579,$step2578,[self2580,thunk2581,pred2582,loc2583],[anf_fun2608,cases2586]);
}
if(R.isPyretException($e2610)) {
$e2610.pyretStack.push($al2585);
}
throw $e2610;
}
};
var anf_obj2650 = R.makeMethod3($temp_full2579,"check-raises-violates");
var $temp_full2612 = function($self2613) {
var $step2611 = 0;
var $ans2614 = D;
var $al2615 = L[916];
try {
if(R.isActivationRecord($self2613)) {
$step2611 = $self2613.step;
$al2615 = $self2613.from;
$ans2614 = $self2613.ans;
self2613 = $self2613.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[916],1,$t);
}
var self2613 = $self2613;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2611) {
case 0: var anf_fun2617 = results$summary2616.$var === D?U(L[914],"results-summary"):results$summary2616.$var;
var anf_arg2618 = block$results2041.$var;
$step2611 = 1;
$al2615 = L[915];
if(!(R.isFunction(anf_fun2617))) {
R.ffi.throwNonFunApp($al2615,anf_fun2617);
}
$ans2614 = anf_fun2617.app(anf_arg2618);
break;
case 1: ++R.GAS;
return $ans2614;
default: throw "No case numbered " + $step2611 + " in $temp_full2612";
}
}
} catch($e2619) {
if(R.isCont($e2619) && ($step2611 !== 1)) {
$e2619.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2615,$temp_full2612,$step2611,[self2613],[]);
}
if(R.isPyretException($e2619)) {
$e2619.pyretStack.push($al2615);
}
throw $e2619;
}
};
var anf_obj2651 = R.makeMethod0($temp_full2612,"summary");
var $temp_full2621 = function($self2622) {
var $step2620 = 0;
var $ans2623 = D;
var $al2624 = L[917];
try {
if(R.isActivationRecord($self2622)) {
$step2620 = $self2622.step;
$al2624 = $self2622.from;
$ans2623 = $self2622.ans;
self2622 = $self2622.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[917],1,$t);
}
var self2622 = $self2622;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2620) {
case 0: $step2620 = 1;
$ans2623 = block$results2041.$var;
break;
case 1: ++R.GAS;
return $ans2623;
default: throw "No case numbered " + $step2620 + " in $temp_full2621";
}
}
} catch($e2625) {
if(R.isCont($e2625) && ($step2620 !== 1)) {
$e2625.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2624,$temp_full2621,$step2620,[self2622],[]);
}
if(R.isPyretException($e2625)) {
$e2625.pyretStack.push($al2624);
}
throw $e2625;
}
};
var anf_obj2652 = R.makeMethod0($temp_full2621,"results");
var $temp_full2627 = function($self2628) {
var $step2626 = 0;
var $ans2629 = D;
var $al2630 = L[920];
try {
if(R.isActivationRecord($self2628)) {
$step2626 = $self2628.step;
$al2630 = $self2628.from;
$ans2629 = $self2628.ans;
self2628 = $self2628.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[920],1,$t);
}
var self2628 = $self2628;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2626) {
case 0: var anf_fun2632 = render$check$results2631.$var === D?U(L[918],"render-check-results"):render$check$results2631.$var;
var anf_arg2633 = block$results2041.$var;
$step2626 = 1;
$al2630 = L[919];
if(!(R.isFunction(anf_fun2632))) {
R.ffi.throwNonFunApp($al2630,anf_fun2632);
}
$ans2629 = anf_fun2632.app(anf_arg2633);
break;
case 1: ++R.GAS;
return $ans2629;
default: throw "No case numbered " + $step2626 + " in $temp_full2627";
}
}
} catch($e2634) {
if(R.isCont($e2634) && ($step2626 !== 1)) {
$e2634.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2630,$temp_full2627,$step2626,[self2628],[]);
}
if(R.isPyretException($e2634)) {
$e2634.pyretStack.push($al2630);
}
throw $e2634;
}
};
var anf_obj2653 = R.makeMethod0($temp_full2627,"render");
$step2028 = 5;
$ans2032 = R.makeObject({"run-checks":anf_obj2635,
"check-is":anf_obj2636,
"check-is-roughly":anf_obj2637,
"check-is-not":anf_obj2638,
"check-is-refinement":anf_obj2639,
"check-is-not-refinement":anf_obj2640,
"check-satisfies-delayed":anf_obj2641,
"check-satisfies-not-delayed":anf_obj2642,
"check-satisfies":anf_obj2643,
"check-satisfies-not":anf_obj2644,
"check-raises":anf_obj2645,
"check-raises-str":anf_obj2646,
"check-raises-other-str":anf_obj2647,
"check-raises-not":anf_obj2648,
"check-raises-satisfies":anf_obj2649,
"check-raises-violates":anf_obj2650,
"summary":anf_obj2651,
"results":anf_obj2652,
"render":anf_obj2653});
break;
case 5: ++R.GAS;
return $ans2032;
default: throw "No case numbered " + $step2028 + " in $temp_lam2029";
}
}
} catch($e2656) {
if(R.isCont($e2656) && ($step2028 !== 5)) {
$e2656.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2033,$temp_lam2029,$step2028,[main$module$name2030,check$all2031],[block$results2041,add$block$result2048]);
}
if(R.isPyretException($e2656)) {
$e2656.pyretStack.push($al2033);
}
throw $e2656;
}
};
var anf_assign2657 = R.makeFunction($temp_lam2029,"make-check-context");
make$check$context2658.$var = anf_assign2657;
var $temp_lam2660 = function($block$results2661,$get$stack2662) {
var $step2659 = 0;
var $ans2663 = D;
var $al2664 = L[1052];
try {
if(R.isActivationRecord($block$results2661)) {
$step2659 = $block$results2661.step;
$al2664 = $block$results2661.from;
$ans2663 = $block$results2661.ans;
block$results2661 = $block$results2661.args[0];
get$stack2662 = $block$results2661.args[1];
init2718 = $block$results2661.vars[0];
anf_arg2792 = $block$results2661.vars[1];
complete$summary2794 = $block$results2661.vars[2];
c2812 = $block$results2661.vars[3];
anf_arg2815 = $block$results2661.vars[4];
anf_arg2819 = $block$results2661.vars[5];
anf_arg2823 = $block$results2661.vars[6];
anf_arg2827 = $block$results2661.vars[7];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1052],2,$t);
}
var block$results2661 = $block$results2661;
var get$stack2662 = $get$stack2662;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2659) {
case 0: $step2659 = 1;
$al2664 = L[1051];
R._checkAnn(L[1051],List120,block$results2661);
break;
case 1: var init2718 = R.makeObject({"message":(""),
"errored":(0),
"passed":(0),
"failed":(0),
"total":(0)});
var $temp_lam2666 = function($summary2667,$br2668) {
var $step2665 = 0;
var $ans2669 = D;
var $al2670 = L[1008];
try {
if(R.isActivationRecord($summary2667)) {
$step2665 = $summary2667.step;
$al2670 = $summary2667.from;
$ans2669 = $summary2667.ans;
summary2667 = $summary2667.args[0];
br2668 = $summary2667.args[1];
anf_arg2717 = $summary2667.vars[0];
block$summary2757 = $summary2667.vars[1];
cases2720 = $summary2667.vars[2];
ended$in$error2767 = $summary2667.vars[3];
anf_arg2751 = $summary2667.vars[4];
anf_arg2759 = $summary2667.vars[5];
anf_arg2763 = $summary2667.vars[6];
with$error$notification2770 = $summary2667.vars[7];
anf_obj2783 = $summary2667.vars[8];
anf_arg2775 = $summary2667.vars[9];
anf_obj2784 = $summary2667.vars[10];
anf_obj2785 = $summary2667.vars[11];
anf_obj2786 = $summary2667.vars[12];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1008],2,$t);
}
var summary2667 = $summary2667;
var br2668 = $br2668;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2665) {
case 0: var $temp_lam2672 = function($s2673,$tr2674) {
var $step2671 = 0;
var $ans2675 = D;
var $al2676 = L[952];
try {
if(R.isActivationRecord($s2673)) {
$step2671 = $s2673.step;
$al2676 = $s2673.from;
$ans2675 = $s2673.ans;
s2673 = $s2673.args[0];
tr2674 = $s2673.args[1];
cases2677 = $s2673.vars[0];
anf_arg2698 = $s2673.vars[1];
anf_arg2705 = $s2673.vars[2];
m2709 = $s2673.vars[3];
anf_extend2710 = $s2673.vars[4];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[952],2,$t);
}
var s2673 = $s2673;
var tr2674 = $tr2674;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2671) {
case 0: var cases2677 = tr2674;
$step2671 = 1;
$al2676 = L[951];
R._checkAnn(L[951],TestResult2060,cases2677);
break;
case 1: var $cases_dispatch2712 = {"success":2};
$al2676 = L[935];
$step2671 = $cases_dispatch2712[cases2677.$name] || 3;
break;
case 2: if(cases2677.$arity !== 1) {
if(cases2677.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[934],1,cases2677.$arity,L[935]);
} else {
R.ffi.throwCasesSingletonErrorC(L[934],true,L[935]);
}
}
$step2671 = 13;
$al2676 = L[936];
var $temp_branch2689 = function($loc2679) {
var $step2690 = 0;
var $ans2691 = D;
var $al2692 = L[924];
try {
if(R.isActivationRecord($loc2679)) {
$step2690 = $loc2679.step;
$al2692 = $loc2679.from;
$ans2691 = $loc2679.ans;
loc2679 = $loc2679.args[0];
anf_arg2681 = $loc2679.vars[0];
anf_extend2686 = $loc2679.vars[1];
anf_extend2687 = $loc2679.vars[2];
} else {
var loc2679 = $loc2679;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2690) {
case 0: $al2692 = L[924];
var anf_arg2678 = G(s2673,"message",L[924]);
$step2690 = 1;
$al2692 = L[933];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2692,_plus3);
}
$ans2691 = _plus3.app(anf_arg2678,("\n  "));
break;
case 1: var anf_arg2681 = $ans2691;
$step2690 = 2;
$al2692 = L[925];
$field2693 = R.getColonFieldLoc(loc2679,"format",L[925]);
if(R.isMethod($field2693)) {
$ans2691 = $field2693.full_meth(loc2679,(false));
} else {
if(!(R.isFunction($field2693))) {
R.ffi.throwNonFunApp(L[925],$field2693);
}
$ans2691 = $field2693.app((false));
}
break;
case 2: var anf_arg2682 = $ans2691;
$step2690 = 3;
$al2692 = L[932];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2692,_plus3);
}
$ans2691 = _plus3.app(anf_arg2681,anf_arg2682);
break;
case 3: var anf_arg2683 = $ans2691;
$step2690 = 4;
$al2692 = L[931];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2692,_plus3);
}
$ans2691 = _plus3.app(anf_arg2683,(": ok"));
break;
case 4: var anf_extend2686 = $ans2691;
$al2692 = L[926];
var anf_arg2684 = G(s2673,"passed",L[926]);
$step2690 = 5;
$al2692 = L[930];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2692,_plus3);
}
$ans2691 = _plus3.app(anf_arg2684,(1));
break;
case 5: var anf_extend2687 = $ans2691;
$al2692 = L[927];
var anf_arg2685 = G(s2673,"total",L[927]);
$step2690 = 6;
$al2692 = L[929];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2692,_plus3);
}
$ans2691 = _plus3.app(anf_arg2685,(1));
break;
case 6: var anf_extend2688 = $ans2691;
$step2690 = 7;
$ans2691 = R.extendObj(L[928],s2673,{"message":anf_extend2686,
"passed":anf_extend2687,
"total":anf_extend2688});
break;
case 7: ++R.GAS;
return $ans2691;
default: throw "No case numbered " + $step2690 + " in $temp_branch2689";
}
}
} catch($e2694) {
if(R.isCont($e2694) && ($step2690 !== 7)) {
$e2694.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2692,$temp_branch2689,$step2690,[loc2679],[anf_arg2681,anf_extend2686,anf_extend2687]);
}
if(R.isPyretException($e2694)) {
$e2694.pyretStack.push($al2692);
}
throw $e2694;
}
};
$ans2675 = cases2677.$app_fields($temp_branch2689,[false]);
break;
case 3: $al2676 = L[937];
var anf_arg2695 = G(s2673,"message",L[937]);
$step2671 = 4;
$al2676 = L[950];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2676,_plus3);
}
$ans2675 = _plus3.app(anf_arg2695,("\n  "));
break;
case 4: var anf_arg2698 = $ans2675;
$al2676 = L[938];
var anf_method_obj2696 = G(tr2674,"loc",L[938]);
$step2671 = 5;
$al2676 = L[939];
$field2697 = R.getColonFieldLoc(anf_method_obj2696,"format",L[939]);
if(R.isMethod($field2697)) {
$ans2675 = $field2697.full_meth(anf_method_obj2696,(false));
} else {
if(!(R.isFunction($field2697))) {
R.ffi.throwNonFunApp(L[939],$field2697);
}
$ans2675 = $field2697.app((false));
}
break;
case 5: var anf_arg2699 = $ans2675;
$step2671 = 6;
$al2676 = L[949];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2676,_plus3);
}
$ans2675 = _plus3.app(anf_arg2698,anf_arg2699);
break;
case 6: var anf_arg2700 = $ans2675;
$step2671 = 7;
$al2676 = L[948];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2676,_plus3);
}
$ans2675 = _plus3.app(anf_arg2700,(": failed because: \n    "));
break;
case 7: var anf_arg2705 = $ans2675;
$step2671 = 8;
$al2676 = L[940];
$field2701 = R.getColonFieldLoc(tr2674,"render-reason",L[940]);
if(R.isMethod($field2701)) {
$ans2675 = $field2701.full_meth(tr2674);
} else {
if(!(R.isFunction($field2701))) {
R.ffi.throwNonFunApp(L[940],$field2701);
}
$ans2675 = $field2701.app();
}
break;
case 8: var anf_arg2702 = $ans2675;
$step2671 = 9;
$al2676 = L[941];
$field2704 = R.getColonFieldLoc(RED24,"display-to-string",L[941]);
if(R.isMethod($field2704)) {
$ans2675 = $field2704.full_meth(RED24,anf_arg2702,torepr6,empty2703);
} else {
if(!(R.isFunction($field2704))) {
R.ffi.throwNonFunApp(L[941],$field2704);
}
$ans2675 = $field2704.app(anf_arg2702,torepr6,empty2703);
}
break;
case 9: var anf_arg2706 = $ans2675;
$step2671 = 10;
$al2676 = L[947];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2676,_plus3);
}
$ans2675 = _plus3.app(anf_arg2705,anf_arg2706);
break;
case 10: var m2709 = $ans2675;
$al2676 = L[942];
var anf_arg2707 = G(s2673,"failed",L[942]);
$step2671 = 11;
$al2676 = L[946];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2676,_plus3);
}
$ans2675 = _plus3.app(anf_arg2707,(1));
break;
case 11: var anf_extend2710 = $ans2675;
$al2676 = L[943];
var anf_arg2708 = G(s2673,"total",L[943]);
$step2671 = 12;
$al2676 = L[945];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2676,_plus3);
}
$ans2675 = _plus3.app(anf_arg2708,(1));
break;
case 12: var anf_extend2711 = $ans2675;
$step2671 = 13;
$ans2675 = R.extendObj(L[944],s2673,{"message":m2709,
"failed":anf_extend2710,
"total":anf_extend2711});
break;
case 13: ++R.GAS;
return $ans2675;
default: throw "No case numbered " + $step2671 + " in $temp_lam2672";
}
}
} catch($e2713) {
if(R.isCont($e2713) && ($step2671 !== 13)) {
$e2713.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2676,$temp_lam2672,$step2671,[s2673,tr2674],[cases2677,anf_arg2698,anf_arg2705,m2709,anf_extend2710]);
}
if(R.isPyretException($e2713)) {
$e2713.pyretStack.push($al2676);
}
throw $e2713;
}
};
var anf_arg2717 = R.makeFunction($temp_lam2672,"for-body<line 706, column 20>");
$al2670 = L[953];
var anf_method_obj2714 = G(br2668,"test-results",L[953]);
$step2665 = 1;
$al2670 = L[954];
$field2715 = R.getColonFieldLoc(anf_method_obj2714,"reverse",L[954]);
if(R.isMethod($field2715)) {
$ans2669 = $field2715.full_meth(anf_method_obj2714);
} else {
if(!(R.isFunction($field2715))) {
R.ffi.throwNonFunApp(L[954],$field2715);
}
$ans2669 = $field2715.app();
}
break;
case 1: var anf_arg2719 = $ans2669;
$step2665 = 2;
$al2670 = L[952];
if(!(R.isFunction(fold2716))) {
R.ffi.throwNonFunApp($al2670,fold2716);
}
$ans2669 = fold2716.app(anf_arg2717,init2718,anf_arg2719);
break;
case 2: var block$summary2757 = $ans2669;
$al2670 = L[955];
var cases2720 = G(br2668,"maybe-err",L[955]);
$step2665 = 3;
$al2670 = L[1007];
R._checkAnn(L[1007],Option121,cases2720);
break;
case 3: var $cases_dispatch2747 = {"none":4,
"some":5};
$al2670 = L[957];
$step2665 = $cases_dispatch2747[cases2720.$name] || 6;
break;
case 4: if(cases2720.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[956],false,L[957]);
}
$step2665 = 7;
$ans2669 = ("");
break;
case 5: if(cases2720.$arity !== 1) {
if(cases2720.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[970],1,cases2720.$arity,L[957]);
} else {
R.ffi.throwCasesSingletonErrorC(L[970],true,L[957]);
}
}
$step2665 = 7;
$al2670 = L[971];
var $temp_branch2737 = function($err2721) {
var $step2738 = 0;
var $ans2739 = D;
var $al2740 = L[969];
try {
if(R.isActivationRecord($err2721)) {
$step2738 = $err2721.step;
$al2740 = $err2721.from;
$ans2739 = $err2721.ans;
err2721 = $err2721.args[0];
stack2725 = $err2721.vars[0];
anf_arg2734 = $err2721.vars[1];
} else {
var err2721 = $err2721;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2738) {
case 0: $step2738 = 1;
$al2740 = L[968];
if(!(R.isFunction(get$stack2662))) {
R.ffi.throwNonFunApp($al2740,get$stack2662);
}
$ans2739 = get$stack2662.app(err2721);
break;
case 1: var stack2725 = $ans2739;
$step2738 = 2;
$al2740 = L[967];
if(!(R.isFunction(exn$unwrap7))) {
R.ffi.throwNonFunApp($al2740,exn$unwrap7);
}
$ans2739 = exn$unwrap7.app(err2721);
break;
case 2: var anf_method_obj2722 = $ans2739;
$step2738 = 3;
$al2740 = L[958];
$field2741 = R.getColonFieldLoc(anf_method_obj2722,"render-reason",L[958]);
if(R.isMethod($field2741)) {
$ans2739 = $field2741.full_meth(anf_method_obj2722);
} else {
if(!(R.isFunction($field2741))) {
R.ffi.throwNonFunApp(L[958],$field2741);
}
$ans2739 = $field2741.app();
}
break;
case 3: var anf_arg2724 = $ans2739;
$step2738 = 4;
$al2740 = L[959];
$field2742 = R.getColonFieldLoc(RED24,"display-to-string",L[959]);
if(R.isMethod($field2742)) {
$ans2739 = $field2742.full_meth(RED24,anf_arg2724,torepr6,stack2725);
} else {
if(!(R.isFunction($field2742))) {
R.ffi.throwNonFunApp(L[959],$field2742);
}
$ans2739 = $field2742.app(anf_arg2724,torepr6,stack2725);
}
break;
case 4: var anf_arg2727 = $ans2739;
$step2738 = 5;
$al2740 = L[966];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2740,_plus3);
}
$ans2739 = _plus3.app(("\n  Block ended in the following error (all tests may not have ran): \n\n  "),anf_arg2727);
break;
case 5: var anf_arg2734 = $ans2739;
$al2740 = L[960];
var anf_arg2728 = G(ED19,"loc",L[960]);
$step2738 = 6;
$al2740 = L[961];
$field2743 = R.getColonFieldLoc(lists22,"map",L[961]);
if(R.isMethod($field2743)) {
$ans2739 = $field2743.full_meth(lists22,anf_arg2728,stack2725);
} else {
if(!(R.isFunction($field2743))) {
R.ffi.throwNonFunApp(L[961],$field2743);
}
$ans2739 = $field2743.app(anf_arg2728,stack2725);
}
break;
case 6: var anf_arg2730 = $ans2739;
$step2738 = 7;
$al2740 = L[962];
$field2744 = R.getColonFieldLoc(ED19,"v-sequence",L[962]);
if(R.isMethod($field2744)) {
$ans2739 = $field2744.full_meth(ED19,anf_arg2730);
} else {
if(!(R.isFunction($field2744))) {
R.ffi.throwNonFunApp(L[962],$field2744);
}
$ans2739 = $field2744.app(anf_arg2730);
}
break;
case 7: var anf_arg2732 = $ans2739;
$step2738 = 8;
$al2740 = L[963];
$field2745 = R.getColonFieldLoc(RED24,"display-to-string",L[963]);
if(R.isMethod($field2745)) {
$ans2739 = $field2745.full_meth(RED24,anf_arg2732,torepr6,empty2703);
} else {
if(!(R.isFunction($field2745))) {
R.ffi.throwNonFunApp(L[963],$field2745);
}
$ans2739 = $field2745.app(anf_arg2732,torepr6,empty2703);
}
break;
case 8: var anf_arg2735 = $ans2739;
$step2738 = 9;
$al2740 = L[965];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2740,_plus3);
}
$ans2739 = _plus3.app(anf_arg2734,anf_arg2735);
break;
case 9: var anf_arg2736 = $ans2739;
$step2738 = 10;
$al2740 = L[964];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2740,_plus3);
}
$ans2739 = _plus3.app(anf_arg2736,("\n\n"));
break;
case 10: ++R.GAS;
return $ans2739;
default: throw "No case numbered " + $step2738 + " in $temp_branch2737";
}
}
} catch($e2746) {
if(R.isCont($e2746) && ($step2738 !== 10)) {
$e2746.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2740,$temp_branch2737,$step2738,[err2721],[stack2725,anf_arg2734]);
}
if(R.isPyretException($e2746)) {
$e2746.pyretStack.push($al2740);
}
throw $e2746;
}
};
$ans2669 = cases2720.$app_fields($temp_branch2737,[false]);
break;
case 6: $step2665 = 7;
$al2670 = L[957];
$ans2669 = R.throwNoCasesMatched(L[957],cases2720);
break;
case 7: var ended$in$error2767 = $ans2669;
$al2670 = L[972];
var anf_arg2748 = G(summary2667,"message",L[972]);
$step2665 = 8;
$al2670 = L[1006];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2748,("\n\n"));
break;
case 8: var anf_arg2751 = $ans2669;
$al2670 = L[973];
var anf_method_obj2749 = G(br2668,"loc",L[973]);
$step2665 = 9;
$al2670 = L[974];
$field2750 = R.getColonFieldLoc(anf_method_obj2749,"format",L[974]);
if(R.isMethod($field2750)) {
$ans2669 = $field2750.full_meth(anf_method_obj2749,(true));
} else {
if(!(R.isFunction($field2750))) {
R.ffi.throwNonFunApp(L[974],$field2750);
}
$ans2669 = $field2750.app((true));
}
break;
case 9: var anf_arg2752 = $ans2669;
$step2665 = 10;
$al2670 = L[1005];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2751,anf_arg2752);
break;
case 10: var anf_arg2753 = $ans2669;
$step2665 = 11;
$al2670 = L[1004];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2753,(": "));
break;
case 11: var anf_arg2754 = $ans2669;
$al2670 = L[975];
var anf_arg2755 = G(br2668,"name",L[975]);
$step2665 = 12;
$al2670 = L[1003];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2754,anf_arg2755);
break;
case 12: var anf_arg2756 = $ans2669;
$step2665 = 13;
$al2670 = L[1002];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2756,(" ("));
break;
case 13: var anf_arg2759 = $ans2669;
$al2670 = L[976];
var anf_arg2758 = G(block$summary2757,"passed",L[976]);
$step2665 = 14;
$al2670 = L[1001];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2670,tostring4);
}
$ans2669 = tostring4.app(anf_arg2758);
break;
case 14: var anf_arg2760 = $ans2669;
$step2665 = 15;
$al2670 = L[1000];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2759,anf_arg2760);
break;
case 15: var anf_arg2761 = $ans2669;
$step2665 = 16;
$al2670 = L[999];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2761,("/"));
break;
case 16: var anf_arg2763 = $ans2669;
$al2670 = L[977];
var anf_arg2762 = G(block$summary2757,"total",L[977]);
$step2665 = 17;
$al2670 = L[998];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2670,tostring4);
}
$ans2669 = tostring4.app(anf_arg2762);
break;
case 17: var anf_arg2764 = $ans2669;
$step2665 = 18;
$al2670 = L[997];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2763,anf_arg2764);
break;
case 18: var anf_arg2765 = $ans2669;
$step2665 = 19;
$al2670 = L[996];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2765,(") \n"));
break;
case 19: var message2766 = $ans2669;
$step2665 = 20;
$al2670 = L[995];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(message2766,ended$in$error2767);
break;
case 20: var with$error$notification2770 = $ans2669;
$al2670 = L[978];
var anf_arg2768 = G(block$summary2757,"failed",L[978]);
$step2665 = 21;
$al2670 = L[979];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2670,equal$always5);
}
$ans2669 = equal$always5.app(anf_arg2768,(0));
break;
case 21: var anf_arg2769 = $ans2669;
$al2670 = L[979];
var anf_if2789 = R.checkWrapBoolean(anf_arg2769);
$step2665 = R.isPyretTrue(anf_if2789)?22:23;
break;
case 22: $step2665 = 24;
$ans2669 = ("");
break;
case 23: $step2665 = 24;
$al2670 = L[980];
$ans2669 = G(block$summary2757,"message",L[980]);
break;
case 24: var rest$of$message2771 = $ans2669;
$step2665 = 25;
$al2670 = L[994];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(with$error$notification2770,rest$of$message2771);
break;
case 25: var anf_obj2783 = $ans2669;
$al2670 = L[981];
var anf_arg2775 = G(summary2667,"errored",L[981]);
$al2670 = L[982];
var anf_arg2773 = G(br2668,"maybe-err",L[982]);
$step2665 = 26;
$al2670 = L[983];
if(!(R.isFunction(is$some2772))) {
R.ffi.throwNonFunApp($al2670,is$some2772);
}
$ans2669 = is$some2772.app(anf_arg2773);
break;
case 26: var anf_arg2774 = $ans2669;
$al2670 = L[983];
var anf_if2788 = R.checkWrapBoolean(anf_arg2774);
$step2665 = R.isPyretTrue(anf_if2788)?27:28;
break;
case 27: $step2665 = 29;
$ans2669 = (1);
break;
case 28: $step2665 = 29;
$ans2669 = (0);
break;
case 29: var anf_arg2776 = $ans2669;
$step2665 = 30;
$al2670 = L[993];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2775,anf_arg2776);
break;
case 30: var anf_obj2784 = $ans2669;
$al2670 = L[984];
var anf_arg2777 = G(summary2667,"passed",L[984]);
$al2670 = L[985];
var anf_arg2778 = G(block$summary2757,"passed",L[985]);
$step2665 = 31;
$al2670 = L[992];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2777,anf_arg2778);
break;
case 31: var anf_obj2785 = $ans2669;
$al2670 = L[986];
var anf_arg2779 = G(summary2667,"failed",L[986]);
$al2670 = L[987];
var anf_arg2780 = G(block$summary2757,"failed",L[987]);
$step2665 = 32;
$al2670 = L[991];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2779,anf_arg2780);
break;
case 32: var anf_obj2786 = $ans2669;
$al2670 = L[988];
var anf_arg2781 = G(summary2667,"total",L[988]);
$al2670 = L[989];
var anf_arg2782 = G(block$summary2757,"total",L[989]);
$step2665 = 33;
$al2670 = L[990];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2670,_plus3);
}
$ans2669 = _plus3.app(anf_arg2781,anf_arg2782);
break;
case 33: var anf_obj2787 = $ans2669;
$step2665 = 34;
$ans2669 = R.makeObject({"message":anf_obj2783,
"errored":anf_obj2784,
"passed":anf_obj2785,
"failed":anf_obj2786,
"total":anf_obj2787});
break;
case 34: ++R.GAS;
return $ans2669;
default: throw "No case numbered " + $step2665 + " in $temp_lam2666";
}
}
} catch($e2790) {
if(R.isCont($e2790) && ($step2665 !== 34)) {
$e2790.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2670,$temp_lam2666,$step2665,[summary2667,br2668],[anf_arg2717,block$summary2757,cases2720,ended$in$error2767,anf_arg2751,anf_arg2759,anf_arg2763,with$error$notification2770,anf_obj2783,anf_arg2775,anf_obj2784,anf_obj2785,anf_obj2786]);
}
if(R.isPyretException($e2790)) {
$e2790.pyretStack.push($al2670);
}
throw $e2790;
}
};
var anf_arg2792 = R.makeFunction($temp_lam2666,"for-body<line 705, column 21>");
$step2659 = 2;
$al2664 = L[1009];
$field2791 = R.getColonFieldLoc(block$results2661,"reverse",L[1009]);
if(R.isMethod($field2791)) {
$ans2663 = $field2791.full_meth(block$results2661);
} else {
if(!(R.isFunction($field2791))) {
R.ffi.throwNonFunApp(L[1009],$field2791);
}
$ans2663 = $field2791.app();
}
break;
case 2: var anf_arg2793 = $ans2663;
$step2659 = 3;
$al2664 = L[1008];
if(!(R.isFunction(fold2716))) {
R.ffi.throwNonFunApp($al2664,fold2716);
}
$ans2663 = fold2716.app(anf_arg2792,init2718,anf_arg2793);
break;
case 3: var complete$summary2794 = $ans2663;
$al2664 = L[1010];
var anf_arg2795 = G(complete$summary2794,"total",L[1010]);
$step2659 = 4;
$al2664 = L[1050];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2664,equal$always5);
}
$ans2663 = equal$always5.app(anf_arg2795,(0));
break;
case 4: var anf_arg2796 = $ans2663;
$al2664 = L[1011];
var anf_if2834 = R.checkWrapBoolean(anf_arg2796);
$step2659 = R.isPyretTrue(anf_if2834)?5:7;
break;
case 5: $al2664 = L[1012];
var anf_arg2797 = G(complete$summary2794,"errored",L[1012]);
$step2659 = 6;
$al2664 = L[1014];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2664,equal$always5);
}
$ans2663 = equal$always5.app(anf_arg2797,(0));
break;
case 6: var anf_arg2798 = $ans2663;
$step2659 = 8;
$al2664 = L[1013];
$ans2663 = R.checkWrapBoolean(anf_arg2798);
break;
case 7: $step2659 = 8;
$ans2663 = (false);
break;
case 8: var anf_arg2799 = $ans2663;
$al2664 = L[1015];
var anf_if2833 = R.checkWrapBoolean(anf_arg2799);
$step2659 = R.isPyretTrue(anf_if2833)?9:10;
break;
case 9: $step2659 = 37;
$ans2663 = R.extendObj(L[1016],complete$summary2794,{"message":("The program didn't define any tests.")});
break;
case 10: $al2664 = L[1017];
var anf_arg2800 = G(complete$summary2794,"failed",L[1017]);
$step2659 = 11;
$al2664 = L[1049];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2664,equal$always5);
}
$ans2663 = equal$always5.app(anf_arg2800,(0));
break;
case 11: var anf_arg2801 = $ans2663;
$al2664 = L[1018];
var anf_if2832 = R.checkWrapBoolean(anf_arg2801);
$step2659 = R.isPyretTrue(anf_if2832)?12:14;
break;
case 12: $al2664 = L[1019];
var anf_arg2802 = G(complete$summary2794,"errored",L[1019]);
$step2659 = 13;
$al2664 = L[1021];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2664,equal$always5);
}
$ans2663 = equal$always5.app(anf_arg2802,(0));
break;
case 13: var anf_arg2803 = $ans2663;
$step2659 = 15;
$al2664 = L[1020];
$ans2663 = R.checkWrapBoolean(anf_arg2803);
break;
case 14: $step2659 = 15;
$ans2663 = (false);
break;
case 15: var anf_arg2804 = $ans2663;
$al2664 = L[1022];
var anf_if2831 = R.checkWrapBoolean(anf_arg2804);
$step2659 = R.isPyretTrue(anf_if2831)?16:23;
break;
case 16: $al2664 = L[1023];
var anf_arg2805 = G(complete$summary2794,"passed",L[1023]);
$step2659 = 17;
$al2664 = L[1024];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al2664,equal$always5);
}
$ans2663 = equal$always5.app(anf_arg2805,(1));
break;
case 17: var anf_arg2806 = $ans2663;
$al2664 = L[1024];
var anf_if2811 = R.checkWrapBoolean(anf_arg2806);
$step2659 = R.isPyretTrue(anf_if2811)?18:19;
break;
case 18: $step2659 = 22;
$ans2663 = ("Looks shipshape, your test passed, mate!");
break;
case 19: $al2664 = L[1025];
var anf_arg2807 = G(complete$summary2794,"passed",L[1025]);
$step2659 = 20;
$al2664 = L[1028];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2664,tostring4);
}
$ans2663 = tostring4.app(anf_arg2807);
break;
case 20: var anf_arg2808 = $ans2663;
$step2659 = 21;
$al2664 = L[1027];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(("Looks shipshape, all "),anf_arg2808);
break;
case 21: var anf_arg2809 = $ans2663;
$step2659 = 22;
$al2664 = L[1026];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2809,(" tests passed, mate!"));
break;
case 22: var happy$msg2810 = $ans2663;
$step2659 = 37;
$ans2663 = R.extendObj(L[1029],complete$summary2794,{"message":happy$msg2810});
break;
case 23: var c2812 = complete$summary2794;
$al2664 = L[1030];
var anf_arg2813 = G(c2812,"message",L[1030]);
$step2659 = 24;
$al2664 = L[1048];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2813,("\n\nPassed: "));
break;
case 24: var anf_arg2815 = $ans2663;
$al2664 = L[1031];
var anf_arg2814 = G(c2812,"passed",L[1031]);
$step2659 = 25;
$al2664 = L[1047];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2664,tostring4);
}
$ans2663 = tostring4.app(anf_arg2814);
break;
case 25: var anf_arg2816 = $ans2663;
$step2659 = 26;
$al2664 = L[1046];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2815,anf_arg2816);
break;
case 26: var anf_arg2817 = $ans2663;
$step2659 = 27;
$al2664 = L[1045];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2817,("; Failed: "));
break;
case 27: var anf_arg2819 = $ans2663;
$al2664 = L[1032];
var anf_arg2818 = G(c2812,"failed",L[1032]);
$step2659 = 28;
$al2664 = L[1044];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2664,tostring4);
}
$ans2663 = tostring4.app(anf_arg2818);
break;
case 28: var anf_arg2820 = $ans2663;
$step2659 = 29;
$al2664 = L[1043];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2819,anf_arg2820);
break;
case 29: var anf_arg2821 = $ans2663;
$step2659 = 30;
$al2664 = L[1042];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2821,("; Ended in Error: "));
break;
case 30: var anf_arg2823 = $ans2663;
$al2664 = L[1033];
var anf_arg2822 = G(c2812,"errored",L[1033]);
$step2659 = 31;
$al2664 = L[1041];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2664,tostring4);
}
$ans2663 = tostring4.app(anf_arg2822);
break;
case 31: var anf_arg2824 = $ans2663;
$step2659 = 32;
$al2664 = L[1040];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2823,anf_arg2824);
break;
case 32: var anf_arg2825 = $ans2663;
$step2659 = 33;
$al2664 = L[1039];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2825,("; Total: "));
break;
case 33: var anf_arg2827 = $ans2663;
$al2664 = L[1034];
var anf_arg2826 = G(c2812,"total",L[1034]);
$step2659 = 34;
$al2664 = L[1038];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al2664,tostring4);
}
$ans2663 = tostring4.app(anf_arg2826);
break;
case 34: var anf_arg2828 = $ans2663;
$step2659 = 35;
$al2664 = L[1037];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2827,anf_arg2828);
break;
case 35: var anf_arg2829 = $ans2663;
$step2659 = 36;
$al2664 = L[1036];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al2664,_plus3);
}
$ans2663 = _plus3.app(anf_arg2829,("\n"));
break;
case 36: var anf_extend2830 = $ans2663;
$step2659 = 37;
$ans2663 = R.extendObj(L[1035],c2812,{"message":anf_extend2830});
break;
case 37: ++R.GAS;
return $ans2663;
default: throw "No case numbered " + $step2659 + " in $temp_lam2660";
}
}
} catch($e2835) {
if(R.isCont($e2835) && ($step2659 !== 37)) {
$e2835.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2664,$temp_lam2660,$step2659,[block$results2661,get$stack2662],[init2718,anf_arg2792,complete$summary2794,c2812,anf_arg2815,anf_arg2819,anf_arg2823,anf_arg2827]);
}
if(R.isPyretException($e2835)) {
$e2835.pyretStack.push($al2664);
}
throw $e2835;
}
};
var anf_assign2836 = R.makeFunction($temp_lam2660,"results-summary");
results$summary2616.$var = anf_assign2836;
var $temp_lam2838 = function($block$results2839) {
var $step2837 = 0;
var $ans2840 = D;
var $al2841 = L[1056];
try {
if(R.isActivationRecord($block$results2839)) {
$step2837 = $block$results2839.step;
$al2841 = $block$results2839.from;
$ans2840 = $block$results2839.ans;
block$results2839 = $block$results2839.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1056],1,$t);
}
var block$results2839 = $block$results2839;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2837) {
case 0: var anf_fun2848 = results$summary2616.$var;
var $temp_lam2843 = function($err2844) {
var $step2842 = 0;
var $ans2845 = D;
var $al2846 = L[1053];
try {
if(R.isActivationRecord($err2844)) {
$step2842 = $err2844.step;
$al2846 = $err2844.from;
$ans2845 = $err2844.ans;
err2844 = $err2844.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1053],1,$t);
}
var err2844 = $err2844;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2842) {
case 0: $step2842 = 1;
$ans2845 = empty2703;
break;
case 1: ++R.GAS;
return $ans2845;
default: throw "No case numbered " + $step2842 + " in $temp_lam2843";
}
}
} catch($e2847) {
if(R.isCont($e2847) && ($step2842 !== 1)) {
$e2847.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2846,$temp_lam2843,$step2842,[err2844],[]);
}
if(R.isPyretException($e2847)) {
$e2847.pyretStack.push($al2846);
}
throw $e2847;
}
};
var anf_arg2849 = R.makeFunction($temp_lam2843,"");
$step2837 = 1;
$al2841 = L[1055];
if(!(R.isFunction(anf_fun2848))) {
R.ffi.throwNonFunApp($al2841,anf_fun2848);
}
$ans2840 = anf_fun2848.app(block$results2839,anf_arg2849);
break;
case 1: var anf_bracket2850 = $ans2840;
$step2837 = 2;
$al2841 = L[1054];
$ans2840 = G(anf_bracket2850,"message",L[1054]);
break;
case 2: ++R.GAS;
return $ans2840;
default: throw "No case numbered " + $step2837 + " in $temp_lam2838";
}
}
} catch($e2851) {
if(R.isCont($e2851) && ($step2837 !== 2)) {
$e2851.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2841,$temp_lam2838,$step2837,[block$results2839],[]);
}
if(R.isPyretException($e2851)) {
$e2851.pyretStack.push($al2841);
}
throw $e2851;
}
};
var anf_assign2852 = R.makeFunction($temp_lam2838,"render-check-results");
render$check$results2631.$var = anf_assign2852;
var $temp_lam2854 = function($block$results2855,$get$stack2856) {
var $step2853 = 0;
var $ans2857 = D;
var $al2858 = L[1059];
try {
if(R.isActivationRecord($block$results2855)) {
$step2853 = $block$results2855.step;
$al2858 = $block$results2855.from;
$ans2857 = $block$results2855.ans;
block$results2855 = $block$results2855.args[0];
get$stack2856 = $block$results2855.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[1059],2,$t);
}
var block$results2855 = $block$results2855;
var get$stack2856 = $get$stack2856;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step2853) {
case 0: $step2853 = 1;
$al2858 = L[1058];
R._checkAnn(L[1058],List120,block$results2855);
break;
case 1: var anf_fun2859 = results$summary2616.$var;
$step2853 = 2;
$al2858 = L[1057];
if(!(R.isFunction(anf_fun2859))) {
R.ffi.throwNonFunApp($al2858,anf_fun2859);
}
$ans2857 = anf_fun2859.app(block$results2855,get$stack2856);
break;
case 2: ++R.GAS;
return $ans2857;
default: throw "No case numbered " + $step2853 + " in $temp_lam2854";
}
}
} catch($e2860) {
if(R.isCont($e2860) && ($step2853 !== 2)) {
$e2860.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al2858,$temp_lam2854,$step2853,[block$results2855,get$stack2856],[]);
}
if(R.isPyretException($e2860)) {
$e2860.pyretStack.push($al2858);
}
throw $e2860;
}
};
var anf_assign2861 = R.makeFunction($temp_lam2854,"render-check-results-stack");
render$check$results$stack2862.$var = anf_assign2861;
var defined_value2914 = render$check$results$stack2862.$var;
var defined_value2915 = render$check$results2631.$var;
var defined_value2916 = results$summary2616.$var;
var defined_value2917 = make$check$context2658.$var;
var defined_value2918 = error$not$boolean2027.$var;
var defined_value2919 = is$error$not$boolean2024.$var;
var defined_value2920 = failure$raise$not$dissatisfied2021.$var;
var defined_value2921 = is$failure$raise$not$dissatisfied2018.$var;
var defined_value2922 = failure$raise$not$satisfied2015.$var;
var defined_value2923 = is$failure$raise$not$satisfied2012.$var;
var defined_value2924 = failure$no$exn2009.$var;
var defined_value2925 = is$failure$no$exn2006.$var;
var defined_value2926 = failure$exn2003.$var;
var defined_value2927 = is$failure$exn2000.$var;
var defined_value2928 = failure$right$exn1997.$var;
var defined_value2929 = is$failure$right$exn1994.$var;
var defined_value2930 = failure$wrong$exn1991.$var;
var defined_value2931 = is$failure$wrong$exn1988.$var;
var defined_value2932 = failure$not$dissatisfied1985.$var;
var defined_value2933 = is$failure$not$dissatisfied1982.$var;
var defined_value2934 = failure$not$satisfied1979.$var;
var defined_value2935 = is$failure$not$satisfied1976.$var;
var defined_value2936 = failure$not$different1973.$var;
var defined_value2937 = is$failure$not$different1970.$var;
var defined_value2938 = failure$not$equal1967.$var;
var defined_value2939 = is$failure$not$equal1964.$var;
var defined_value2940 = success1961.$var;
var defined_value2941 = is$success1958.$var;
var defined_value2942 = is$TestResult1955.$var;
var defined_value2943 = report$value156.$var;
var defined_value2944 = check$block$result136.$var;
var defined_value2945 = is$check$block$result133.$var;
var defined_value2946 = is$CheckBlockResult130.$var;
var defined_value2947 = on$refinement111.$var;
var defined_value2948 = is$on$refinement108.$var;
var defined_value2949 = on$right105.$var;
var defined_value2950 = is$on$right102.$var;
var defined_value2951 = on$left99.$var;
var defined_value2952 = is$on$left96.$var;
var defined_value2953 = is$CheckOperand93.$var;
var defined_value2954 = get$op$fun$name70.$var;
$step48 = 1;
$al52 = L[1060];
$field2863 = R.getColonFieldLoc(builtins1,"trace-value",L[1060]);
if(R.isMethod($field2863)) {
$ans51 = $field2863.full_meth(builtins1,L[1060],nothing2);
} else {
if(!(R.isFunction($field2863))) {
R.ffi.throwNonFunApp(L[1060],$field2863);
}
$ans51 = $field2863.app(L[1060],nothing2);
}
break;
case 1: var answer2912 = $ans51;
var anf_obj2866 = get$op$fun$name70.$var;
var anf_obj2868 = is$CheckOperand93.$var;
var anf_obj2869 = on$left99.$var;
var anf_obj2870 = is$on$left96.$var;
var anf_obj2871 = on$right105.$var;
var anf_obj2872 = is$on$right102.$var;
var anf_obj2873 = on$refinement111.$var;
var anf_obj2874 = is$on$refinement108.$var;
var anf_obj2875 = is$CheckBlockResult130.$var;
var anf_obj2876 = check$block$result136.$var;
var anf_obj2877 = is$check$block$result133.$var;
var anf_obj2878 = report$value156.$var;
var anf_obj2879 = is$TestResult1955.$var;
var anf_obj2880 = success1961.$var;
var anf_obj2881 = is$success1958.$var;
var anf_obj2882 = failure$not$equal1967.$var;
var anf_obj2883 = is$failure$not$equal1964.$var;
var anf_obj2884 = failure$not$different1973.$var;
var anf_obj2885 = is$failure$not$different1970.$var;
var anf_obj2886 = failure$not$satisfied1979.$var;
var anf_obj2887 = is$failure$not$satisfied1976.$var;
var anf_obj2888 = failure$not$dissatisfied1985.$var;
var anf_obj2889 = is$failure$not$dissatisfied1982.$var;
var anf_obj2890 = failure$wrong$exn1991.$var;
var anf_obj2891 = is$failure$wrong$exn1988.$var;
var anf_obj2892 = failure$right$exn1997.$var;
var anf_obj2893 = is$failure$right$exn1994.$var;
var anf_obj2894 = failure$exn2003.$var;
var anf_obj2895 = is$failure$exn2000.$var;
var anf_obj2896 = failure$no$exn2009.$var;
var anf_obj2897 = is$failure$no$exn2006.$var;
var anf_obj2898 = failure$raise$not$satisfied2015.$var;
var anf_obj2899 = is$failure$raise$not$satisfied2012.$var;
var anf_obj2900 = failure$raise$not$dissatisfied2021.$var;
var anf_obj2901 = is$failure$raise$not$dissatisfied2018.$var;
var anf_obj2902 = error$not$boolean2027.$var;
var anf_obj2903 = is$error$not$boolean2024.$var;
var anf_obj2904 = make$check$context2658.$var;
var anf_obj2905 = results$summary2616.$var;
var anf_obj2906 = render$check$results2631.$var;
var anf_obj2907 = render$check$results$stack2862.$var;
var provides2911 = R.makeObject({"link":link2864,
"empty":empty2703,
"list":list220,
"is-empty":is$empty2865,
"fold":fold2716,
"each":each2183,
"is-some":is$some2772,
"some":some2170,
"none":none2166,
"get-op-fun-name":anf_obj2866,
"is-right":is$right2078,
"is-left":is$left2867,
"is-CheckOperand":anf_obj2868,
"on-left":anf_obj2869,
"is-on-left":anf_obj2870,
"on-right":anf_obj2871,
"is-on-right":anf_obj2872,
"on-refinement":anf_obj2873,
"is-on-refinement":anf_obj2874,
"is-CheckBlockResult":anf_obj2875,
"check-block-result":anf_obj2876,
"is-check-block-result":anf_obj2877,
"report-value":anf_obj2878,
"is-TestResult":anf_obj2879,
"success":anf_obj2880,
"is-success":anf_obj2881,
"failure-not-equal":anf_obj2882,
"is-failure-not-equal":anf_obj2883,
"failure-not-different":anf_obj2884,
"is-failure-not-different":anf_obj2885,
"failure-not-satisfied":anf_obj2886,
"is-failure-not-satisfied":anf_obj2887,
"failure-not-dissatisfied":anf_obj2888,
"is-failure-not-dissatisfied":anf_obj2889,
"failure-wrong-exn":anf_obj2890,
"is-failure-wrong-exn":anf_obj2891,
"failure-right-exn":anf_obj2892,
"is-failure-right-exn":anf_obj2893,
"failure-exn":anf_obj2894,
"is-failure-exn":anf_obj2895,
"failure-no-exn":anf_obj2896,
"is-failure-no-exn":anf_obj2897,
"failure-raise-not-satisfied":anf_obj2898,
"is-failure-raise-not-satisfied":anf_obj2899,
"failure-raise-not-dissatisfied":anf_obj2900,
"is-failure-raise-not-dissatisfied":anf_obj2901,
"error-not-boolean":anf_obj2902,
"is-error-not-boolean":anf_obj2903,
"make-check-context":anf_obj2904,
"results-summary":anf_obj2905,
"render-check-results":anf_obj2906,
"render-check-results-stack":anf_obj2907});
$step48 = 2;
$al52 = L[20];
$field2908 = R.getColonFieldLoc(builtins1,"current-checker",L[20]);
if(R.isMethod($field2908)) {
$ans51 = $field2908.full_meth(builtins1);
} else {
if(!(R.isFunction($field2908))) {
R.ffi.throwNonFunApp(L[20],$field2908);
}
$ans51 = $field2908.app();
}
break;
case 2: var anf_method_obj2909 = $ans51;
$step48 = 3;
$al52 = L[20];
$field2910 = R.getColonFieldLoc(anf_method_obj2909,"results",L[20]);
if(R.isMethod($field2910)) {
$ans51 = $field2910.full_meth(anf_method_obj2909);
} else {
if(!(R.isFunction($field2910))) {
R.ffi.throwNonFunApp(L[20],$field2910);
}
$ans51 = $field2910.app();
}
break;
case 3: var checks2913 = $ans51;
$step48 = 4;
$ans51 = R.makeObject({"answer":answer2912,
"namespace":NAMESPACE,
"defined-values":{"render-check-results-stack":defined_value2914,
"render-check-results":defined_value2915,
"results-summary":defined_value2916,
"make-check-context":defined_value2917,
"error-not-boolean":defined_value2918,
"is-error-not-boolean":defined_value2919,
"failure-raise-not-dissatisfied":defined_value2920,
"is-failure-raise-not-dissatisfied":defined_value2921,
"failure-raise-not-satisfied":defined_value2922,
"is-failure-raise-not-satisfied":defined_value2923,
"failure-no-exn":defined_value2924,
"is-failure-no-exn":defined_value2925,
"failure-exn":defined_value2926,
"is-failure-exn":defined_value2927,
"failure-right-exn":defined_value2928,
"is-failure-right-exn":defined_value2929,
"failure-wrong-exn":defined_value2930,
"is-failure-wrong-exn":defined_value2931,
"failure-not-dissatisfied":defined_value2932,
"is-failure-not-dissatisfied":defined_value2933,
"failure-not-satisfied":defined_value2934,
"is-failure-not-satisfied":defined_value2935,
"failure-not-different":defined_value2936,
"is-failure-not-different":defined_value2937,
"failure-not-equal":defined_value2938,
"is-failure-not-equal":defined_value2939,
"success":defined_value2940,
"is-success":defined_value2941,
"is-TestResult":defined_value2942,
"report-value":defined_value2943,
"check-block-result":defined_value2944,
"is-check-block-result":defined_value2945,
"is-CheckBlockResult":defined_value2946,
"on-refinement":defined_value2947,
"is-on-refinement":defined_value2948,
"on-right":defined_value2949,
"is-on-right":defined_value2950,
"on-left":defined_value2951,
"is-on-left":defined_value2952,
"is-CheckOperand":defined_value2953,
"is-left":is$left2867,
"is-right":is$right2078,
"either":either17,
"get-op-fun-name":defined_value2954,
"none":none2166,
"some":some2170,
"option":option23,
"is-some":is$some2772,
"each":each2183,
"fold":fold2716,
"lists":lists22,
"is-empty":is$empty2865,
"list":list220,
"empty":empty2703,
"link":link2864,
"VS":VS26,
"RED":RED24,
"ED":ED19,
"E":E18,
"SL":SL25},
"defined-types":{"Loc":Loc119,
"List":List120,
"TestResult":TestResult2060,
"Option":Option121,
"CheckOperand":CheckOperand1356,
"CheckBlockResult":CheckBlockResult2045,
"Either":Either2181,
"SL":SL35,
"option":option33,
"lists":lists32,
"either":either27,
"VS":VS36,
"RED":RED34,
"ED":ED29,
"E":E28},
"provide-plus-types":R.makeObject({"values":provides2911,
"types":{"Either":Either2181,
"List":List120,
"Option":Option121,
"Loc":Loc119,
"CheckOperand":CheckOperand1356,
"CheckBlockResult":CheckBlockResult2045,
"TestResult":TestResult2060}}),
"checks":checks2913});
break;
case 4: ++R.GAS;
return $ans51;
default: throw "No case numbered " + $step48 + " in $toplevel49";
}
}
} catch($e2955) {
if(R.isCont($e2955) && ($step48 !== 4)) {
$e2955.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al52,$toplevel49,$step48,[],[CheckOperand1356,CheckBlockResult2045,TestResult2060,Either2181,List120,link2864,empty2703,list220,is$empty2865,fold2716,each2183,Option121,is$some2772,some2170,none2166,Loc119,get$op$fun$name70,is$right2078,is$left2867,is$CheckOperand93,is$on$left96,on$left99,is$on$right102,on$right105,is$on$refinement108,on$refinement111,is$CheckBlockResult130,is$check$block$result133,check$block$result136,report$value156,is$TestResult1955,is$success1958,success1961,is$failure$not$equal1964,failure$not$equal1967,is$failure$not$different1970,failure$not$different1973,is$failure$not$satisfied1976,failure$not$satisfied1979,is$failure$not$dissatisfied1982,failure$not$dissatisfied1985,is$failure$wrong$exn1988,failure$wrong$exn1991,is$failure$right$exn1994,failure$right$exn1997,is$failure$exn2000,failure$exn2003,is$failure$no$exn2006,failure$no$exn2009,is$failure$raise$not$satisfied2012,failure$raise$not$satisfied2015,is$failure$raise$not$dissatisfied2018,failure$raise$not$dissatisfied2021,is$error$not$boolean2024,error$not$boolean2027,make$check$context2658,results$summary2616,render$check$results2631,render$check$results$stack2862,defined_value2914,defined_value2915,defined_value2916,defined_value2917,defined_value2918,defined_value2919,defined_value2920,defined_value2921,defined_value2922,defined_value2923,defined_value2924,defined_value2925,defined_value2926,defined_value2927,defined_value2928,defined_value2929,defined_value2930,defined_value2931,defined_value2932,defined_value2933,defined_value2934,defined_value2935,defined_value2936,defined_value2937,defined_value2938,defined_value2939,defined_value2940,defined_value2941,defined_value2942,defined_value2943,defined_value2944,defined_value2945,defined_value2946,defined_value2947,defined_value2948,defined_value2949,defined_value2950,defined_value2951,defined_value2952,defined_value2953,defined_value2954,answer2912,provides2911]);
}
if(R.isPyretException($e2955)) {
$e2955.pyretStack.push($al52);
}
throw $e2955;
}
};
return R.safeCall($toplevel49,function(moduleVal) {
R.modules["$builtin://checker37"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://table":({
  requires: [
    { "import-type": "builtin", name: "valueskeleton" },
    { "import-type": "builtin", name: "ffi" }
  ],
  nativeRequires: [
    "pyret-base/js/type-util"
  ],
  provides: {},
  theModule: function(runtime, namespace, uri, VSlib, ffi, t) {
    var get = runtime.getField;

    var VS = get(VSlib, "values");
    
    var brandTable = runtime.namedBrander("table", ["table: table brander"]);
    var annTable   = runtime.makeBranderAnn(brandTable, "Table");

    function applyBrand(brand, val) {
      return get(brand, "brand").app(val);
    }
    
    function hasBrand(brand, val) {
      return get(brand, "test").app(val);
    }
    
    function isTable(val) {
      return hasBrand(brandTable,  val);
    }

    function openTable(info) {
      runtime.checkTuple(info);
      if (info.vals.length != 2) {
        runtime.ffi.throwMessageException("Expected to find {header; contents} pair, "
                                          + "but found a tuple of length "
                                          + info.vals.length);
      }
      var headers = info.vals[0];
      var contents = info.vals[1];
      runtime.checkArray(headers);
      runtime.checkArray(contents);
      var names = [];
      var sanitizers = [];
      for(var i = 0; i < headers.length; ++i) {
        runtime.checkTuple(headers[i]);
        if (headers[i].vals.length !== 2) {
          runtime.ffi.throwMessageException("Expected to find {name; sanitizer} pairs "
                                            + "in header data, but found a tuple of "
                                            + "length " + headers[i].vals.length);
        }
        var header = headers[i].vals;
        runtime.checkString(header[0]);
        runtime.checkFunction(header[1]);
        names.push(header[0]);
        sanitizers.push(header[1]);
      }
      for(var i = 0; i < contents.length; ++i) {
        runtime.checkArray(contents[i]);
        if (contents[i].length !== headers.length) {
          if (i === 0) {
            runtime.ffi.throwMessageException("Contents must match header size");
          } else {
            runtime.ffi.throwMessageException("Contents must be rectangular");
          }
        }
        for (var j = 0; j < contents[i].length; ++j) {
          runtime.checkCellContent(contents[i][j]);
        }
        contents[i] = runtime.raw_array_mapi(runtime.makeFunction(function(v, j) {
          return sanitizers[j].app(contents[i][j], names[j], runtime.makeNumber(i));
        }), contents[i]);
      }
      return makeTable(names, contents);
    }

    function makeTable(headers, rows) {
      ffi.checkArity(2, arguments, "makeTable");
      
      var headerIndex = {};
      
      for (var i = 0; i < headers.length; i++) {
        headerIndex["column:" + headers[i]] = i;
      }
      
      function getColumn(column_name) {
        /* TODO: Raise error if table lacks column */
        var column_index = headers[column_name];
        return rows.map(function(row){return rows[column_index];});
      }
      
      function hasColumn(column_name) {
        return headerIndex.hasOwnProperty("column:" + column_name);
      }
      
      function getRowAsRecord(row_index) {
        /* TODO: Raise error if no row at index */
        var obj = {};
        var row = rows[row_index];
        for(var i = 0; i < headers.length; i++) {
          obj[headers[i]] = row[i];
        }
        return obj;
      }

      return applyBrand(brandTable, runtime.makeObject({
        
        '_header-raw-array': headers,
        '_rows-raw-array': rows,
        
        'get-row': runtime.makeMethod1(function(_, row_index) {
          ffi.checkArity(2, arguments, "get-row");
          runtime.checkArrayIndex("get-row", rows, row_index);
          return runtime.makeObject(getRowAsRecord(row_index));
        }),
        
        'length': runtime.makeMethod0(function(_) {
          ffi.checkArity(1, arguments, "length");
          return runtime.makeNumber(rows.length);
        }),
        
        'get-column': runtime.makeMethod1(function(_, col_name) {
          ffi.checkArity(2, arguments, "get-column");
          if(!hasColumn(col_name)) {
            ffi.throwMessageException("The table does not have a column named `"+col_name+"`.");
          }
          return runtime.makeList(getColumn(col_name));
        }),
        
        '_column-index': runtime.makeMethod3(function(_, table_loc, col_name, col_loc) {
          ffi.checkArity(4, arguments, "_column-index");
          var col_index = headerIndex['column:'+col_name];
          if(col_index === undefined)
            ffi.throwMessageException("The table does not have a column named `"+col_name+"`.");
          return col_index;
        }),
        
        '_no-column': runtime.makeMethod3(function(_, table_loc, col_name, col_loc) {
          ffi.checkArity(4, arguments, "_column-index");
          var col_index = headerIndex['column:'+col_name];
          if(col_index != undefined)
            ffi.throwMessageException("The table already has a column named `"+col_name+"`.");
          return col_index;
        }),
        
        '_equals': runtime.makeMethod2(function(self, other, equals) {
          ffi.checkArity(3, arguments, "_equals");
          // is the other a table
          // same number of columns?
          // same number of rows?
          // columns have same names?
          // each row has the same elements
          var eq  = function() { return ffi.equal; };
          var neq = function() { return ffi.notEqual.app('', self, other); };
          if (!hasBrand(brandTable, other)) {
            return neq();
          }
          var otherHeaders = get(other, "_header-raw-array");
          var otherRows = get(other, "_rows-raw-array");
          if (headers.length !== otherHeaders.length
              || rows.length !== otherRows.length) {
            return neq();
          }
          for (var i = 0; i < headers.length; ++i) {
            if (headers[i] != otherHeaders[i]) {
              return neq();
            }
          }
          for (var i = 0; i < rows.length; ++i) {
            var selfRow = rows[i];
            var otherRow = otherRows[i];
            var colEqual = function(j) {
              return function() {
                return equals.app(selfRow[j], otherRow[j]);
              };
            };
            var liftEquals = function(r) {
              return ffi.isEqual(r);
            };
            for (var j = 0; j < headers.length; ++j) {
              if (!(runtime.safeCall(colEqual(j), liftEquals))) {
                return neq();
              }
            }
          }
          return eq();
        }),
        
        '_output': runtime.makeMethod0(function(_) {
          ffi.checkArity(1, arguments, "_output");
          var vsValue = get(VS, "vs-value").app;
          var vsString = get(VS, "vs-str").app;
          return get(VS, "vs-table").app(
            headers.map(function(hdr){return vsString(hdr);}),
            rows.map(function(row){return row.map(
              function(elm){return vsValue(elm);});}));
        })
      }));
    }
    
    return runtime.makeJSModuleReturn({
      TableAnn : annTable,
      makeTable: makeTable,
      openTable: openTable,
      isTable: isTable });
  }
})
,
"builtin://tables":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"difference":"tany",
"difference-from":"tany",
"running-fold":"tany",
"running-max":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://tables"},
"name":"Reducer"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]],
"running-mean":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://tables"},
"name":"Reducer"},[["tuple",[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]],
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]],
"running-min":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://tables"},
"name":"Reducer"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]],
"running-reduce":"tany",
"running-sum":["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://tables"},
"name":"Reducer"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"},
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]},
"datatypes":{},
"aliases":{"Reducer":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import9) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://tables";
var D = R.undefined;
var L = [[M,13,30,272,13,36,278],
[M,13,38,280,13,44,286],
[M,13,29,271,13,45,287],
[M,14,11,300,14,19,308],
[M,13,18,260,13,24,266],
[M,13,9,251,15,7,319],
[M,16,51,372,16,57,378],
[M,16,59,380,16,65,386],
[M,16,50,371,16,66,387],
[M,17,11,400,17,21,410],
[M,16,26,347,16,32,353],
[M,16,39,360,16,45,366],
[M,16,12,333,18,7,421],
[M,11,41,205,11,72,236],
[M,11,30,194,11,36,200],
[M,11,18,182,20,3,429],
[M,25,29,555,25,35,561],
[M,25,37,563,25,43,569],
[M,25,28,554,25,44,570],
[M,25,46,572,25,52,578],
[M,25,27,553,25,53,579],
[M,26,14,595,26,19,600],
[M,25,16,542,25,22,548],
[M,25,7,533,27,5,608],
[M,28,15,625,28,18,628],
[M,28,20,630,28,25,635],
[M,28,36,646,28,42,652],
[M,28,44,654,28,50,660],
[M,28,35,645,28,51,661],
[M,28,53,663,28,59,669],
[M,28,34,644,28,60,670],
[M,31,30,752,31,51,773],
[M,30,17,712,30,26,721],
[M,29,15,687,29,22,694],
["dummy location"],
[M,28,14,624,28,26,636],
[M,28,10,620,32,5,781],
[M,38,18,936,38,29,947],
[M,37,9,910,40,7,986],
[M,42,17,1028,42,25,1036],
[M,41,12,1000,44,7,1073],
[M,35,82,867,35,110,895],
[M,35,40,825,35,46,831],
[M,35,54,839,35,77,862],
[M,35,15,800,46,3,1081],
[M,50,9,1174,50,27,1192],
[M,52,17,1234,52,25,1242],
[M,51,12,1206,54,7,1279],
[M,48,54,1137,48,76,1159],
[M,48,32,1115,48,49,1132],
[M,48,17,1100,56,3,1287],
[M,62,64,1501,62,69,1506],
[M,6,0,47,62,70,1507],
[M,62,15,1452,62,46,1483],
[M,62,49,1486,62,70,1507],
[M,60,15,1378,60,46,1409],
[M,60,49,1412,60,72,1435],
[M,58,15,1304,58,46,1335],
[M,58,49,1338,58,72,1361],
[M,24,16,480,24,57,521],
[M,22,13,444,22,31,462],
[M,7,2,86,7,33,117],
[M,8,2,121,8,41,160],
[M,1,0,0,62,70,1507]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$Number1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var _plus3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var num$min2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-min");
var num$max3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-max");
var _divide4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_divide");
var _minus5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_minus");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import9);
var $toplevel11 = function($$resumer1336) {
var $step10 = 0;
var $ans13 = D;
var $al14 = L[63];
try {
if(R.isActivationRecord($$resumer1336)) {
$step10 = $$resumer1336.step;
$al14 = $$resumer1336.from;
$ans13 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
Reducer40 = $$resumer1336.vars[0];
difference$from42 = $$resumer1336.vars[1];
difference126 = $$resumer1336.vars[2];
running$mean127 = $$resumer1336.vars[3];
running$fold128 = $$resumer1336.vars[4];
running$reduce116 = $$resumer1336.vars[5];
running$max129 = $$resumer1336.vars[6];
running$min130 = $$resumer1336.vars[7];
running$sum131 = $$resumer1336.vars[8];
answer136 = $$resumer1336.vars[9];
provides135 = $$resumer1336.vars[10];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step10) {
case 0: var Reducer40 = R.makeRecordAnn(["one","reduce"],[L[61],L[62]],{"one":R.Function,
"reduce":R.Function});
var $temp_lam16 = function($init17) {
var $step15 = 0;
var $ans18 = D;
var $al19 = L[15];
try {
if(R.isActivationRecord($init17)) {
$step15 = $init17.step;
$al19 = $init17.from;
$ans18 = $init17.ans;
init17 = $init17.args[0];
ann_check_temp39 = $init17.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[15],1,$t);
}
var init17 = $init17;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step15) {
case 0: $step15 = 1;
$al19 = L[14];
R._checkAnn(L[14],$type$Number1,init17);
break;
case 1: var $temp_lam21 = function($n22) {
var $step20 = 0;
var $ans23 = D;
var $al24 = L[5];
try {
if(R.isActivationRecord($n22)) {
$step20 = $n22.step;
$al24 = $n22.from;
$ans23 = $n22.ans;
n22 = $n22.args[0];
ann_check_temp26 = $n22.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[5],1,$t);
}
var n22 = $n22;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step20) {
case 0: $step20 = 1;
$al24 = L[4];
R._checkAnn(L[4],$type$Number1,n22);
break;
case 1: $step20 = 2;
$al24 = L[3];
if(!(R.isFunction(_minus5))) {
R.ffi.throwNonFunApp($al24,_minus5);
}
$ans23 = _minus5.app(n22,init17);
break;
case 2: var anf_tuple_fields25 = $ans23;
var ann_check_temp26 = R.makeTuple([n22,anf_tuple_fields25]);
$step20 = 3;
$al24 = L[2];
R._checkAnn(L[2],R.makeTupleAnn([L[0],L[1]],[$type$Number1,$type$Number1]),ann_check_temp26);
break;
case 3: $step20 = 4;
$ans23 = ann_check_temp26;
break;
case 4: ++R.GAS;
return $ans23;
default: throw "No case numbered " + $step20 + " in $temp_lam21";
}
}
} catch($e27) {
if(R.isCont($e27) && ($step20 !== 4)) {
$e27.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al24,$temp_lam21,$step20,[n22],[ann_check_temp26]);
}
if(R.isPyretException($e27)) {
$e27.pyretStack.push($al24);
}
throw $e27;
}
};
var anf_obj37 = R.makeFunction($temp_lam21,"");
var $temp_lam29 = function($last$n30,$n31) {
var $step28 = 0;
var $ans32 = D;
var $al33 = L[12];
try {
if(R.isActivationRecord($last$n30)) {
$step28 = $last$n30.step;
$al33 = $last$n30.from;
$ans32 = $last$n30.ans;
last$n30 = $last$n30.args[0];
n31 = $last$n30.args[1];
ann_check_temp35 = $last$n30.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[12],2,$t);
}
var last$n30 = $last$n30;
var n31 = $n31;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step28) {
case 0: $step28 = 1;
$al33 = L[10];
R._checkAnn(L[10],$type$Number1,last$n30);
break;
case 1: $step28 = 2;
$al33 = L[11];
R._checkAnn(L[11],$type$Number1,n31);
break;
case 2: $step28 = 3;
$al33 = L[9];
if(!(R.isFunction(_minus5))) {
R.ffi.throwNonFunApp($al33,_minus5);
}
$ans32 = _minus5.app(n31,last$n30);
break;
case 3: var anf_tuple_fields34 = $ans32;
var ann_check_temp35 = R.makeTuple([n31,anf_tuple_fields34]);
$step28 = 4;
$al33 = L[8];
R._checkAnn(L[8],R.makeTupleAnn([L[6],L[7]],[$type$Number1,$type$Number1]),ann_check_temp35);
break;
case 4: $step28 = 5;
$ans32 = ann_check_temp35;
break;
case 5: ++R.GAS;
return $ans32;
default: throw "No case numbered " + $step28 + " in $temp_lam29";
}
}
} catch($e36) {
if(R.isCont($e36) && ($step28 !== 5)) {
$e36.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al33,$temp_lam29,$step28,[last$n30,n31],[ann_check_temp35]);
}
if(R.isPyretException($e36)) {
$e36.pyretStack.push($al33);
}
throw $e36;
}
};
var anf_obj38 = R.makeFunction($temp_lam29,"");
var ann_check_temp39 = R.makeObject({"one":anf_obj37,
"reduce":anf_obj38});
$step15 = 2;
$al19 = L[13];
R._checkAnn(L[13],Reducer40,ann_check_temp39);
break;
case 2: $step15 = 3;
$ans18 = ann_check_temp39;
break;
case 3: ++R.GAS;
return $ans18;
default: throw "No case numbered " + $step15 + " in $temp_lam16";
}
}
} catch($e41) {
if(R.isCont($e41) && ($step15 !== 3)) {
$e41.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al19,$temp_lam16,$step15,[init17],[ann_check_temp39]);
}
if(R.isPyretException($e41)) {
$e41.pyretStack.push($al19);
}
throw $e41;
}
};
var difference$from42 = R.makeFunction($temp_lam16,"");
$step10 = 1;
$al14 = L[60];
if(!(R.isFunction(difference$from42))) {
R.ffi.throwNonFunApp($al14,difference$from42);
}
$ans13 = difference$from42.app((0));
break;
case 1: var difference126 = $ans13;
var $temp_lam44 = function($n45) {
var $step43 = 0;
var $ans46 = D;
var $al47 = L[23];
try {
if(R.isActivationRecord($n45)) {
$step43 = $n45.step;
$al47 = $n45.from;
$ans46 = $n45.ans;
n45 = $n45.args[0];
anf_tuple_fields48 = $n45.vars[0];
ann_check_temp50 = $n45.vars[1];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[23],1,$t);
}
var n45 = $n45;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step43) {
case 0: $step43 = 1;
$al47 = L[22];
R._checkAnn(L[22],$type$Number1,n45);
break;
case 1: var anf_tuple_fields48 = R.makeTuple([n45,(1)]);
$step43 = 2;
$al47 = L[21];
if(!(R.isFunction(_divide4))) {
R.ffi.throwNonFunApp($al47,_divide4);
}
$ans46 = _divide4.app(n45,(1));
break;
case 2: var anf_tuple_fields49 = $ans46;
var ann_check_temp50 = R.makeTuple([anf_tuple_fields48,anf_tuple_fields49]);
$step43 = 3;
$al47 = L[20];
R._checkAnn(L[20],R.makeTupleAnn([L[18],L[19]],[R.makeTupleAnn([L[16],L[17]],[$type$Number1,$type$Number1]),$type$Number1]),ann_check_temp50);
break;
case 3: $step43 = 4;
$ans46 = ann_check_temp50;
break;
case 4: ++R.GAS;
return $ans46;
default: throw "No case numbered " + $step43 + " in $temp_lam44";
}
}
} catch($e51) {
if(R.isCont($e51) && ($step43 !== 4)) {
$e51.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al47,$temp_lam44,$step43,[n45],[anf_tuple_fields48,ann_check_temp50]);
}
if(R.isPyretException($e51)) {
$e51.pyretStack.push($al47);
}
throw $e51;
}
};
var anf_obj66 = R.makeFunction($temp_lam44,"");
var $temp_lam53 = function($tup54,$n55) {
var $step52 = 0;
var $ans56 = D;
var $al57 = L[36];
try {
if(R.isActivationRecord($tup54)) {
$step52 = $tup54.step;
$al57 = $tup54.from;
$ans56 = $tup54.ans;
tup54 = $tup54.args[0];
n55 = $tup54.args[1];
count59 = $tup54.vars[0];
next$sum60 = $tup54.vars[1];
anf_tuple_fields62 = $tup54.vars[2];
ann_check_temp64 = $tup54.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[36],2,$t);
}
var tup54 = $tup54;
var n55 = $n55;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step52) {
case 0: $step52 = 1;
$al57 = L[35];
R._checkAnn(L[35],R.makeTupleAnn([L[34],L[34]],[R.Any,R.Any]),tup54);
break;
case 1: var sum58 = R.getTuple(tup54,0,L[24]);
var count59 = R.getTuple(tup54,1,L[25]);
$step52 = 2;
$al57 = L[33];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al57,_plus3);
}
$ans56 = _plus3.app(sum58,n55);
break;
case 2: var next$sum60 = $ans56;
$step52 = 3;
$al57 = L[32];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al57,_plus3);
}
$ans56 = _plus3.app(count59,(1));
break;
case 3: var next$count61 = $ans56;
var anf_tuple_fields62 = R.makeTuple([next$sum60,next$count61]);
$step52 = 4;
$al57 = L[31];
if(!(R.isFunction(_divide4))) {
R.ffi.throwNonFunApp($al57,_divide4);
}
$ans56 = _divide4.app(next$sum60,next$count61);
break;
case 4: var anf_tuple_fields63 = $ans56;
var ann_check_temp64 = R.makeTuple([anf_tuple_fields62,anf_tuple_fields63]);
$step52 = 5;
$al57 = L[30];
R._checkAnn(L[30],R.makeTupleAnn([L[28],L[29]],[R.makeTupleAnn([L[26],L[27]],[$type$Number1,$type$Number1]),$type$Number1]),ann_check_temp64);
break;
case 5: $step52 = 6;
$ans56 = ann_check_temp64;
break;
case 6: ++R.GAS;
return $ans56;
default: throw "No case numbered " + $step52 + " in $temp_lam53";
}
}
} catch($e65) {
if(R.isCont($e65) && ($step52 !== 6)) {
$e65.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al57,$temp_lam53,$step52,[tup54,n55],[count59,next$sum60,anf_tuple_fields62,ann_check_temp64]);
}
if(R.isPyretException($e65)) {
$e65.pyretStack.push($al57);
}
throw $e65;
}
};
var anf_obj67 = R.makeFunction($temp_lam53,"");
var running$mean127 = R.makeObject({"one":anf_obj66,
"reduce":anf_obj67});
$step10 = 2;
$al14 = L[59];
R._checkAnn(L[59],Reducer40,running$mean127);
break;
case 2: var $temp_lam69 = function($init70,$op71) {
var $step68 = 0;
var $ans72 = D;
var $al73 = L[44];
try {
if(R.isActivationRecord($init70)) {
$step68 = $init70.step;
$al73 = $init70.from;
$ans72 = $init70.ans;
init70 = $init70.args[0];
op71 = $init70.args[1];
ann_check_temp91 = $init70.vars[0];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[44],2,$t);
}
var init70 = $init70;
var op71 = $op71;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step68) {
case 0: $step68 = 1;
$al73 = L[42];
R._checkAnn(L[42],R.Any,init70);
break;
case 1: $step68 = 2;
$al73 = L[43];
R._checkAnn(L[43],R.Function,op71);
break;
case 2: var $temp_lam75 = function($n76) {
var $step74 = 0;
var $ans77 = D;
var $al78 = L[38];
try {
if(R.isActivationRecord($n76)) {
$step74 = $n76.step;
$al78 = $n76.from;
$ans77 = $n76.ans;
n76 = $n76.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[38],1,$t);
}
var n76 = $n76;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step74) {
case 0: $step74 = 1;
$al78 = L[37];
if(!(R.isFunction(op71))) {
R.ffi.throwNonFunApp($al78,op71);
}
$ans77 = op71.app(init70,n76);
break;
case 1: var first$row79 = $ans77;
$step74 = 2;
$ans77 = R.makeTuple([first$row79,first$row79]);
break;
case 2: ++R.GAS;
return $ans77;
default: throw "No case numbered " + $step74 + " in $temp_lam75";
}
}
} catch($e80) {
if(R.isCont($e80) && ($step74 !== 2)) {
$e80.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al78,$temp_lam75,$step74,[n76],[]);
}
if(R.isPyretException($e80)) {
$e80.pyretStack.push($al78);
}
throw $e80;
}
};
var anf_obj89 = R.makeFunction($temp_lam75,"");
var $temp_lam82 = function($m83,$n84) {
var $step81 = 0;
var $ans85 = D;
var $al86 = L[40];
try {
if(R.isActivationRecord($m83)) {
$step81 = $m83.step;
$al86 = $m83.from;
$ans85 = $m83.ans;
m83 = $m83.args[0];
n84 = $m83.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[40],2,$t);
}
var m83 = $m83;
var n84 = $n84;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step81) {
case 0: $step81 = 1;
$al86 = L[39];
if(!(R.isFunction(op71))) {
R.ffi.throwNonFunApp($al86,op71);
}
$ans85 = op71.app(m83,n84);
break;
case 1: var next$val87 = $ans85;
$step81 = 2;
$ans85 = R.makeTuple([next$val87,next$val87]);
break;
case 2: ++R.GAS;
return $ans85;
default: throw "No case numbered " + $step81 + " in $temp_lam82";
}
}
} catch($e88) {
if(R.isCont($e88) && ($step81 !== 2)) {
$e88.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al86,$temp_lam82,$step81,[m83,n84],[]);
}
if(R.isPyretException($e88)) {
$e88.pyretStack.push($al86);
}
throw $e88;
}
};
var anf_obj90 = R.makeFunction($temp_lam82,"");
var ann_check_temp91 = R.makeObject({"one":anf_obj89,
"reduce":anf_obj90});
$step68 = 3;
$al73 = L[41];
R._checkAnn(L[41],Reducer40,ann_check_temp91);
break;
case 3: $step68 = 4;
$ans72 = ann_check_temp91;
break;
case 4: ++R.GAS;
return $ans72;
default: throw "No case numbered " + $step68 + " in $temp_lam69";
}
}
} catch($e92) {
if(R.isCont($e92) && ($step68 !== 4)) {
$e92.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al73,$temp_lam69,$step68,[init70,op71],[ann_check_temp91]);
}
if(R.isPyretException($e92)) {
$e92.pyretStack.push($al73);
}
throw $e92;
}
};
var running$fold128 = R.makeFunction($temp_lam69,"");
var $temp_lam94 = function($op95) {
var $step93 = 0;
var $ans96 = D;
var $al97 = L[50];
try {
if(R.isActivationRecord($op95)) {
$step93 = $op95.step;
$al97 = $op95.from;
$ans96 = $op95.ans;
op95 = $op95.args[0];
ann_check_temp114 = $op95.vars[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[50],1,$t);
}
var op95 = $op95;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step93) {
case 0: $step93 = 1;
$al97 = L[49];
R._checkAnn(L[49],R.Function,op95);
break;
case 1: var $temp_lam99 = function($n100) {
var $step98 = 0;
var $ans101 = D;
var $al102 = L[45];
try {
if(R.isActivationRecord($n100)) {
$step98 = $n100.step;
$al102 = $n100.from;
$ans101 = $n100.ans;
n100 = $n100.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[45],1,$t);
}
var n100 = $n100;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step98) {
case 0: $step98 = 1;
$ans101 = R.makeTuple([n100,n100]);
break;
case 1: ++R.GAS;
return $ans101;
default: throw "No case numbered " + $step98 + " in $temp_lam99";
}
}
} catch($e103) {
if(R.isCont($e103) && ($step98 !== 1)) {
$e103.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al102,$temp_lam99,$step98,[n100],[]);
}
if(R.isPyretException($e103)) {
$e103.pyretStack.push($al102);
}
throw $e103;
}
};
var anf_obj112 = R.makeFunction($temp_lam99,"");
var $temp_lam105 = function($m106,$n107) {
var $step104 = 0;
var $ans108 = D;
var $al109 = L[47];
try {
if(R.isActivationRecord($m106)) {
$step104 = $m106.step;
$al109 = $m106.from;
$ans108 = $m106.ans;
m106 = $m106.args[0];
n107 = $m106.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[47],2,$t);
}
var m106 = $m106;
var n107 = $n107;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step104) {
case 0: $step104 = 1;
$al109 = L[46];
if(!(R.isFunction(op95))) {
R.ffi.throwNonFunApp($al109,op95);
}
$ans108 = op95.app(m106,n107);
break;
case 1: var next$val110 = $ans108;
$step104 = 2;
$ans108 = R.makeTuple([next$val110,next$val110]);
break;
case 2: ++R.GAS;
return $ans108;
default: throw "No case numbered " + $step104 + " in $temp_lam105";
}
}
} catch($e111) {
if(R.isCont($e111) && ($step104 !== 2)) {
$e111.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al109,$temp_lam105,$step104,[m106,n107],[]);
}
if(R.isPyretException($e111)) {
$e111.pyretStack.push($al109);
}
throw $e111;
}
};
var anf_obj113 = R.makeFunction($temp_lam105,"");
var ann_check_temp114 = R.makeObject({"one":anf_obj112,
"reduce":anf_obj113});
$step93 = 2;
$al97 = L[48];
R._checkAnn(L[48],Reducer40,ann_check_temp114);
break;
case 2: $step93 = 3;
$ans96 = ann_check_temp114;
break;
case 3: ++R.GAS;
return $ans96;
default: throw "No case numbered " + $step93 + " in $temp_lam94";
}
}
} catch($e115) {
if(R.isCont($e115) && ($step93 !== 3)) {
$e115.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al97,$temp_lam94,$step93,[op95],[ann_check_temp114]);
}
if(R.isPyretException($e115)) {
$e115.pyretStack.push($al97);
}
throw $e115;
}
};
var running$reduce116 = R.makeFunction($temp_lam94,"");
$step10 = 3;
$al14 = L[58];
if(!(R.isFunction(running$reduce116))) {
R.ffi.throwNonFunApp($al14,running$reduce116);
}
$ans13 = running$reduce116.app(num$max3);
break;
case 3: var running$max129 = $ans13;
$step10 = 4;
$al14 = L[57];
R._checkAnn(L[57],Reducer40,running$max129);
break;
case 4: $step10 = 5;
$al14 = L[56];
if(!(R.isFunction(running$reduce116))) {
R.ffi.throwNonFunApp($al14,running$reduce116);
}
$ans13 = running$reduce116.app(num$min2);
break;
case 5: var running$min130 = $ans13;
$step10 = 6;
$al14 = L[55];
R._checkAnn(L[55],Reducer40,running$min130);
break;
case 6: var $temp_lam118 = function($arg_119,$arg_120) {
var $step117 = 0;
var $ans121 = D;
var $al122 = L[51];
try {
if(R.isActivationRecord($arg_119)) {
$step117 = $arg_119.step;
$al122 = $arg_119.from;
$ans121 = $arg_119.ans;
arg_119 = $arg_119.args[0];
arg_120 = $arg_119.args[1];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[51],2,$t);
}
var arg_119 = $arg_119;
var arg_120 = $arg_120;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step117) {
case 0: $step117 = 1;
$al122 = L[51];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al122,_plus3);
}
$ans121 = _plus3.app(arg_119,arg_120);
break;
case 1: ++R.GAS;
return $ans121;
default: throw "No case numbered " + $step117 + " in $temp_lam118";
}
}
} catch($e123) {
if(R.isCont($e123) && ($step117 !== 1)) {
$e123.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al122,$temp_lam118,$step117,[arg_119,arg_120],[]);
}
if(R.isPyretException($e123)) {
$e123.pyretStack.push($al122);
}
throw $e123;
}
};
var anf_arg124 = R.makeFunction($temp_lam118,"");
$step10 = 7;
$al14 = L[54];
if(!(R.isFunction(running$reduce116))) {
R.ffi.throwNonFunApp($al14,running$reduce116);
}
$ans13 = running$reduce116.app(anf_arg124);
break;
case 7: var running$sum131 = $ans13;
$step10 = 8;
$al14 = L[53];
R._checkAnn(L[53],Reducer40,running$sum131);
break;
case 8: $step10 = 9;
$al14 = L[34];
$field125 = R.getColonFieldLoc(builtins1,"trace-value",L[34]);
if(R.isMethod($field125)) {
$ans13 = $field125.full_meth(builtins1,L[34],nothing2);
} else {
if(!(R.isFunction($field125))) {
R.ffi.throwNonFunApp(L[34],$field125);
}
$ans13 = $field125.app(L[34],nothing2);
}
break;
case 9: var answer136 = $ans13;
var provides135 = R.makeObject({"difference-from":difference$from42,
"difference":difference126,
"running-mean":running$mean127,
"running-fold":running$fold128,
"running-reduce":running$reduce116,
"running-max":running$max129,
"running-min":running$min130,
"running-sum":running$sum131});
$step10 = 10;
$al14 = L[52];
$field132 = R.getColonFieldLoc(builtins1,"current-checker",L[52]);
if(R.isMethod($field132)) {
$ans13 = $field132.full_meth(builtins1);
} else {
if(!(R.isFunction($field132))) {
R.ffi.throwNonFunApp(L[52],$field132);
}
$ans13 = $field132.app();
}
break;
case 10: var anf_method_obj133 = $ans13;
$step10 = 11;
$al14 = L[52];
$field134 = R.getColonFieldLoc(anf_method_obj133,"results",L[52]);
if(R.isMethod($field134)) {
$ans13 = $field134.full_meth(anf_method_obj133);
} else {
if(!(R.isFunction($field134))) {
R.ffi.throwNonFunApp(L[52],$field134);
}
$ans13 = $field134.app();
}
break;
case 11: var checks137 = $ans13;
$step10 = 12;
$ans13 = R.makeObject({"answer":answer136,
"namespace":NAMESPACE,
"defined-values":{"running-sum":running$sum131,
"running-min":running$min130,
"running-reduce":running$reduce116,
"running-max":running$max129,
"running-fold":running$fold128,
"running-mean":running$mean127,
"difference":difference126,
"difference-from":difference$from42},
"defined-types":{"Reducer":Reducer40},
"provide-plus-types":R.makeObject({"values":provides135,
"types":{"Reducer":Reducer40}}),
"checks":checks137});
break;
case 12: ++R.GAS;
return $ans13;
default: throw "No case numbered " + $step10 + " in $toplevel11";
}
}
} catch($e138) {
if(R.isCont($e138) && ($step10 !== 12)) {
$e138.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al14,$toplevel11,$step10,[],[Reducer40,difference$from42,difference126,running$mean127,running$fold128,running$reduce116,running$max129,running$min130,running$sum131,answer136,provides135]);
}
if(R.isPyretException($e138)) {
$e138.pyretStack.push($al14);
}
throw $e138;
}
};
return R.safeCall($toplevel11,function(moduleVal) {
R.modules["$builtin://tables8"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://reactor-events":({"requires":[{"import-type":"builtin",
"name":"global"}],
"provides":{"values":{"is-Event":"tany",
"is-keypress":"tany",
"is-mouse":"tany",
"is-time-tick":"tany",
"keypress":"tany",
"mouse":"tany",
"time-tick":"tany"},
"datatypes":{"atom#Event#1":["data","Event",[],[["time-tick"],["mouse",
[["kind",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}],["y",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}],["x",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]],["keypress",
[["key",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}]},
"aliases":{"Event":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import4) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://reactor-events";
var D = R.undefined;
var L = [[M,7,2,61,7,13,72],
[M,8,2,75,8,51,124],
[M,8,15,88,8,21,94],
[M,8,28,101,8,34,107],
[M,8,44,117,8,50,123],
[M,8,4,77,8,51,124],
[M,9,2,127,9,27,152],
[M,9,20,145,9,26,151],
[M,9,4,129,9,27,152],
[M,6,0,47,10,3,156],
["dummy location"],
[M,1,0,0,10,3,156]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$Number1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$String14 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import4);
var $toplevel6 = function($$resumer1336) {
var $step5 = 0;
var $ans8 = D;
var $al9 = L[11];
try {
if(R.isActivationRecord($$resumer1336)) {
$step5 = $$resumer1336.step;
$al9 = $$resumer1336.from;
$ans8 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
Event68 = $$resumer1336.vars[0];
is$Event39 = $$resumer1336.vars[1];
is$time$tick42 = $$resumer1336.vars[2];
time$tick45 = $$resumer1336.vars[3];
is$mouse48 = $$resumer1336.vars[4];
mouse51 = $$resumer1336.vars[5];
is$keypress54 = $$resumer1336.vars[6];
keypress57 = $$resumer1336.vars[7];
defined_value72 = $$resumer1336.vars[8];
defined_value73 = $$resumer1336.vars[9];
defined_value74 = $$resumer1336.vars[10];
defined_value75 = $$resumer1336.vars[11];
defined_value76 = $$resumer1336.vars[12];
defined_value77 = $$resumer1336.vars[13];
defined_value78 = $$resumer1336.vars[14];
answer70 = $$resumer1336.vars[15];
provides69 = $$resumer1336.vars[16];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step5) {
case 0: var Event10 = R.namedBrander("Event",L[9]);
var Event68 = R.makeBranderAnn(Event10,"Event");
var Event36 = {"$var":D};
var is$Event39 = {"$var":D};
var is$time$tick42 = {"$var":D};
var time$tick45 = {"$var":D};
var is$mouse48 = {"$var":D};
var mouse51 = {"$var":D};
var is$keypress54 = {"$var":D};
var keypress57 = {"$var":D};
var $time$tick_getfields16 = function(f) {
return f();
};
var $time$tick_getfieldsref14 = function(f) {
return f();
};
var $time$tick_mutablemask15 = [];
var $time$tick$base11 = {"_match":R.makeMatch("time-tick",0)};
var $time$tick$brander12 = R.namedBrander("time-tick",L[0]);
var $time$tick$brands13 = {};
$time$tick$brands13[Event10._brand] = true;
$time$tick$brands13[$time$tick$brander12._brand] = true;
var $mouse_getfields22 = function(f) {
return f(this.dict["x"],this.dict["y"],this.dict["kind"]);
};
var $mouse_getfieldsref20 = function(f,refmask) {
return f(R.derefField(this.dict["x"],false,refmask[0]),R.derefField(this.dict["y"],false,refmask[1]),R.derefField(this.dict["kind"],false,refmask[2]));
};
var $mouse_mutablemask21 = [false,false,false];
var $mouse$base17 = {"$fieldNames":["x","y","kind"],
"_match":R.makeMatch("mouse",3)};
var $mouse$brander18 = R.namedBrander("mouse",L[1]);
var $mouse$brands19 = {};
$mouse$brands19[Event10._brand] = true;
$mouse$brands19[$mouse$brander18._brand] = true;
var mouse23 = R.makeVariantConstructor(L[5],function() {
return [$type$Number1,$type$Number1,$type$String14];
},["x24","y25","kind26"],[L[2],L[3],L[4]],[false,false,false],["x24","y25","kind26"],$mouse_mutablemask21,$mouse$base17,$mouse$brands19,"mouse",$mouse_getfieldsref20,$mouse_getfields22,$mouse$base17);
var $keypress_getfields32 = function(f) {
return f(this.dict["key"]);
};
var $keypress_getfieldsref30 = function(f,refmask) {
return f(R.derefField(this.dict["key"],false,refmask[0]));
};
var $keypress_mutablemask31 = [false];
var $keypress$base27 = {"$fieldNames":["key"],
"_match":R.makeMatch("keypress",1)};
var $keypress$brander28 = R.namedBrander("keypress",L[6]);
var $keypress$brands29 = {};
$keypress$brands29[Event10._brand] = true;
$keypress$brands29[$keypress$brander28._brand] = true;
var keypress33 = R.makeVariantConstructor(L[8],function() {
return [$type$String14];
},["key34"],[L[7]],[false],["key34"],$keypress_mutablemask31,$keypress$base27,$keypress$brands29,"keypress",$keypress_getfieldsref30,$keypress_getfields32,$keypress$base27);
var anf_assign35 = R.makeObject({"Event":G(Event10,"test",L[9]),
"is-time-tick":G($time$tick$brander12,"test",L[0]),
"time-tick":R.makeDataValue($time$tick$base11,$time$tick$brands13,"time-tick",$time$tick_getfieldsref14,$time$tick_getfields16,-1,$time$tick_mutablemask15,$time$tick$base11),
"is-mouse":G($mouse$brander18,"test",L[1]),
"mouse":mouse23,
"is-keypress":G($keypress$brander28,"test",L[6]),
"keypress":keypress33});
Event36.$var = anf_assign35;
var anf_bracket37 = Event36.$var;
$al9 = L[9];
var anf_assign38 = G(anf_bracket37,"Event",L[9]);
is$Event39.$var = anf_assign38;
var anf_bracket40 = Event36.$var;
$al9 = L[0];
var anf_assign41 = G(anf_bracket40,"is-time-tick",L[0]);
is$time$tick42.$var = anf_assign41;
var anf_bracket43 = Event36.$var;
$al9 = L[0];
var anf_assign44 = G(anf_bracket43,"time-tick",L[0]);
time$tick45.$var = anf_assign44;
var anf_bracket46 = Event36.$var;
$al9 = L[1];
var anf_assign47 = G(anf_bracket46,"is-mouse",L[1]);
is$mouse48.$var = anf_assign47;
var anf_bracket49 = Event36.$var;
$al9 = L[1];
var anf_assign50 = G(anf_bracket49,"mouse",L[1]);
mouse51.$var = anf_assign50;
var anf_bracket52 = Event36.$var;
$al9 = L[6];
var anf_assign53 = G(anf_bracket52,"is-keypress",L[6]);
is$keypress54.$var = anf_assign53;
var anf_bracket55 = Event36.$var;
$al9 = L[6];
var anf_assign56 = G(anf_bracket55,"keypress",L[6]);
keypress57.$var = anf_assign56;
var defined_value72 = keypress57.$var;
var defined_value73 = is$keypress54.$var;
var defined_value74 = mouse51.$var;
var defined_value75 = is$mouse48.$var;
var defined_value76 = time$tick45.$var;
var defined_value77 = is$time$tick42.$var;
var defined_value78 = is$Event39.$var;
$step5 = 1;
$al9 = L[10];
$field58 = R.getColonFieldLoc(builtins1,"trace-value",L[10]);
if(R.isMethod($field58)) {
$ans8 = $field58.full_meth(builtins1,L[10],nothing2);
} else {
if(!(R.isFunction($field58))) {
R.ffi.throwNonFunApp(L[10],$field58);
}
$ans8 = $field58.app(L[10],nothing2);
}
break;
case 1: var answer70 = $ans8;
var anf_obj59 = is$Event39.$var;
var anf_obj60 = time$tick45.$var;
var anf_obj61 = is$time$tick42.$var;
var anf_obj62 = mouse51.$var;
var anf_obj63 = is$mouse48.$var;
var anf_obj64 = keypress57.$var;
var anf_obj37 = is$keypress54.$var;
var provides69 = R.makeObject({"is-Event":anf_obj59,
"time-tick":anf_obj60,
"is-time-tick":anf_obj61,
"mouse":anf_obj62,
"is-mouse":anf_obj63,
"keypress":anf_obj64,
"is-keypress":anf_obj37});
$step5 = 2;
$al9 = L[9];
$field65 = R.getColonFieldLoc(builtins1,"current-checker",L[9]);
if(R.isMethod($field65)) {
$ans8 = $field65.full_meth(builtins1);
} else {
if(!(R.isFunction($field65))) {
R.ffi.throwNonFunApp(L[9],$field65);
}
$ans8 = $field65.app();
}
break;
case 2: var anf_method_obj66 = $ans8;
$step5 = 3;
$al9 = L[9];
$field67 = R.getColonFieldLoc(anf_method_obj66,"results",L[9]);
if(R.isMethod($field67)) {
$ans8 = $field67.full_meth(anf_method_obj66);
} else {
if(!(R.isFunction($field67))) {
R.ffi.throwNonFunApp(L[9],$field67);
}
$ans8 = $field67.app();
}
break;
case 3: var checks71 = $ans8;
$step5 = 4;
$ans8 = R.makeObject({"answer":answer70,
"namespace":NAMESPACE,
"defined-values":{"keypress":defined_value72,
"is-keypress":defined_value73,
"mouse":defined_value74,
"is-mouse":defined_value75,
"time-tick":defined_value76,
"is-time-tick":defined_value77,
"is-Event":defined_value78},
"defined-types":{"Event":Event68},
"provide-plus-types":R.makeObject({"values":provides69,
"types":{"Event":Event68}}),
"checks":checks71});
break;
case 4: ++R.GAS;
return $ans8;
default: throw "No case numbered " + $step5 + " in $toplevel6";
}
}
} catch($e79) {
if(R.isCont($e79) && ($step5 !== 4)) {
$e79.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al9,$toplevel6,$step5,[],[Event68,is$Event39,is$time$tick42,time$tick45,is$mouse48,mouse51,is$keypress54,keypress57,defined_value72,defined_value73,defined_value74,defined_value75,defined_value76,defined_value77,defined_value78,answer70,provides69]);
}
if(R.isPyretException($e79)) {
$e79.pyretStack.push($al9);
}
throw $e79;
}
};
return R.safeCall($toplevel6,function(moduleVal) {
R.modules["$builtin://reactor$events3"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://reactors":({
  requires: [
    { "import-type": "builtin", "name": "reactor-events" },
    { "import-type": "builtin", "name": "valueskeleton" },
    { "import-type": "builtin", "name": "table" }
  ],
  nativeRequires: [],
  provides: {
    shorthands: {
      "RofA": ["tyapp", ["local", "Reactor"], [["tid", "a"]]],
      "ReactorEvent": { tag: "name",
                 origin: { "import-type": "uri", uri: "builtin://reactor-events" },
                 name: "Event" },
      "Image": { tag: "name",
                 origin: { "import-type": "uri", uri: "builtin://image" },
                 name: "Image" },
      "ValueSkeleton": { tag: "name",
                 origin: { "import-type": "uri", uri: "builtin://valueskeleton" },
                 name: "ValueSkeleton" }
    },
    values: {
      "keypress": ["arrow", ["String"], ["local", "Event"]],
      "mouse": ["arrow", ["Number", "Number", "String"], ["local", "Event"]],
      "time-tick": ["local", "Event"],

      "get-value": ["forall", ["a"], ["arrow", ["RofA"], ["tid", "a"]]],
      "get-instance": ["forall", ["a"], ["arrow", ["RofA"], ["tid", "a"]]],
      "draw": ["forall", ["a"], ["arrow", ["RofA"], "Image"]],
      "interact": ["forall", ["a"], ["arrow", ["RofA"], "RofA"]],
      "interact-trace": ["forall", ["a"], ["arrow", ["RofA"], "Any"]],
      "simulate-trace": ["forall", ["a"], ["arrow", ["RofA", "Number"], "Any"]],
      "start-trace": ["forall", ["a"], ["arrow", ["RofA"], "RofA"]],
      "stop-trace": ["forall", ["a"], ["arrow", ["RofA"], "RofA"]],
      "get-trace": ["forall", ["a"], ["arrow", ["RofA"], ["List", ["tid", "a"]]]],
      "get-trace-as-table": ["forall", ["a"], ["arrow", ["RofA"], "Any"]],
      "react": ["forall", ["a"], ["arrow", ["RofA", ["local", "Event"]], "RofA"]],
    },
    aliases: {
      "Event": "ReactorEvent",
      "Reactor": ["local", "Reactor"]
    },
    datatypes: {
      "Reactor": ["data", "Reactor", ["a"], [], {
        "get-value": ["arrow", [], ["tid", "a"]],
        "draw": ["arrow", [], "Image"],
        "interact": ["arrow", [], "RofA"],
        "interact-trace": ["forall", ["a"], ["arrow", [], "Any"]],
        "simulate-trace": ["forall", ["a"], ["arrow", ["Number"], "Any"]],
        "start-trace": ["arrow", [], "RofA"],
        "stop-trace": ["arrow", [], "RofA"],
        "get-trace": ["arrow", [], ["List", ["tid", "a"]]],
        "get-trace-as-table": ["arrow", [], "Any"],
        "react": ["arrow", [["local", "Event"]], "RofA"],
        "is-stopped": ["arrow", [], "Boolean"],
        "_output": ["arrow", [], "ValueSkeleton"]
      }]
    },
  },

  theModule: function(runtime, _, uri, reactorEvents, VSlib, tables, reactorLib) {
    var gf = runtime.getField;
    var gmf = function(m, f) { return gf(runtime.getField(m, "values"), f); }
    var gtf = function(m, f) { return gf(m, "types")[f]; }
    var VS = runtime.getField(VSlib, "values");

    var brandReactor = runtime.namedBrander("reactors", ["reactors"]);
    var annReactor = runtime.makeBranderAnn(brandReactor, "Reactor");

    var checkArity = runtime.ffi.checkArity;

    var annEvent = gtf(reactorEvents, "Event");

    function applyBrand(brand, val) {
      return gf(brand, "brand").app(val);
    }
    function hasBrand(brand, val) {
      return gf(brand, "test").app(val);
    }

    var isEvent = gmf(reactorEvents, "is-Event");
    var externalInteractionHandler = null;
    var setInteract = function(newInteract) {
      externalInteractionHandler = newInteract;
    }
    var makeReactor = function(init, fields) {
      runtime.ffi.checkArity(2, arguments, "reactor");
      runtime.checkObject(fields);
      var handlerDict = {};
      Object.keys(fields.dict).forEach(function(f) {
        if(runtime.ffi.isSome(gf(fields, f))) {
          handlerDict[f] = gf(gf(fields, f), "value");
        }
      });
      return makeReactorRaw(init, handlerDict, false, []);
    }
    var makeReactorRaw = function(init, handlers, tracing, trace) {
      var o = runtime.makeObject({
        "get-value": runtime.makeMethod0(function(self) {
          return init;
        }),
        "draw": runtime.makeMethod0(function(self) {
          if(!handlers.hasOwnProperty("to-draw")) {
            runtime.ffi.throwMessageException("Cannot draw() because no to-draw was specified on this reactor.");
          }
          var drawer = handlers["to-draw"];
          return drawer.app(init);
        }),
        "interact-trace": runtime.makeMethod0(function(self) {
          return runtime.safeThen(function() {
            return gf(self, "start-trace").app();
          }).then(function(val) {
            return gf(val, "interact").app();
          }).then(function(val) {
            return gf(val, "get-trace-as-table").app(); 
          }).start();
        }),
        "simulate-trace": runtime.makeMethod1(function(self, limit) {
          function help(r, i) {
            return r.then(function(rval) {
              if(i <= 0) {
                return gf(rval, "get-trace-as-table").app()
              }
              else {
                return runtime.safeThen(function() {
                  return gf(rval, "is-stopped").app();
                }).then(function(isStopped) {
                  if(isStopped) {
                    return gf(rval, "get-trace-as-table").app()
                  }
                  else {
                    return help(runtime.safeThen(function() {
                      return gf(rval, "react").app(gmf(reactorEvents, "time-tick"));
                    }), i - 1).start();
                  }
                }).start()
              }
            });
          }
          var withTracing = runtime.safeThen(function() {
            return gf(self, "start-trace").app();
          });
          return help(withTracing, limit).start();
        }),
        interact: runtime.makeMethod0(function(self) {
          if(externalInteractionHandler === null) {
            runtime.ffi.throwMessageException("No interaction set up for this context (please report a bug if you are using code.pyret.org and see this message)");
          }
          var thisInteractTrace = [];
          var tracer = null;
          if(tracing) {
            tracer = function(newVal, oldVal, k) {
              thisInteractTrace.push(newVal);
              k();
            };
          }
          runtime.safeCall(function() {
            return externalInteractionHandler(init, handlers, tracer);
          }, function(newVal) {
            // This unshift prevents duplicate first elements
            thisInteractTrace.shift();
            return makeReactorRaw(newVal, handlers, tracing, trace.concat(thisInteractTrace));
          });
        }),
        "start-trace": runtime.makeMethod0(function(self) {
          return makeReactorRaw(init, handlers, true, [init]);
        }),
        "stop-trace": runtime.makeMethod0(function(self) {
          return makeReactorRaw(init, handlers, false, []);
        }),
        "get-trace": runtime.makeMethod0(function(self) {
          if(tracing) {
            return runtime.ffi.makeList(trace);
          }
          else {
            runtime.ffi.throwMessageException("Tried to get trace of a reactor that isn't tracing; try calling start-trace() first");
          }
        }),
        "get-trace-as-table": runtime.makeMethod0(function(self) {
          if(tracing) {
            var i = 0;
            var rows = trace.map(function(state) {
              var ans = [i, state];
              i += 1;
              return ans;
            });
            return tables.makeTable(["tick", "state"], rows);
          }
          else {
            runtime.ffi.throwMessageException("Tried to get trace of a reactor that isn't tracing; try calling start-trace() first");
          }
        }),
        react: runtime.makeMethod1(function(self, event) {
          function callOrError(handlerName, args) {
            if(handlers.hasOwnProperty(handlerName)) {
              var funObj = handlers[handlerName].app;
              return runtime.safeCall(function() {
                return funObj.apply(funObj, args);
              }, function(newVal) {
                if(tracing) {
                  var newTrace = trace.concat([newVal]);
                }
                else {
                  var newTrace = trace;
                }
                return makeReactorRaw(newVal, handlers, tracing, newTrace);
              });
            }
            else {
              runtime.ffi.throwMessageException("No " + handlerName + " handler defined");
            }
          }
          return runtime.safeCall(function() {
              if(handlers["stop-when"]) {
                return handlers["stop-when"].app(init);
              }
              else {
                return false;
              }
            }, function(stop) {
              if(stop) {
                return self;
              }
              else {
                return runtime.ffi.cases(isEvent, "Event", event, {
                  keypress: function(key) {
                    return callOrError("on-key", [init, key]);
                  },
                  "time-tick": function() {
                    return callOrError("on-tick", [init]);
                  },
                  mouse: function(x, y, kind) {
                    return callOrError("on-mouse", [init, x, y, kind]);
                  }
                });
              }
            });
        }),
        "is-stopped": runtime.makeMethod0(function(self) {
          if(handlers["stop-when"]) {
            return handlers["stop-when"].app(init);
          }
          else {
            return false;
          }
        }),
        _output: runtime.makeMethod0(function(self) {
          return runtime.getField(VS, "vs-constr").app(
            "reactor",
            runtime.ffi.makeList([ gf(VS, "vs-value").app(init) ]));
        })
      });
      return applyBrand(brandReactor, o);
    }

    var c = function(name, args, anns) {
      runtime.checkArgsInternal("reactors", name, args, anns);
    }

    function getValue(reactor) {
      checkArity(1, arguments, "reactors");
      c("get-value", [reactor], [annReactor]);
      return runtime.getField(reactor, "get-value").app();
    }

    function draw(reactor) {
      checkArity(1, arguments, "reactors");
      c("draw", [reactor], [annReactor]);
      return runtime.getField(reactor, "draw").app();
    }

    function interact(reactor) {
      checkArity(1, arguments, "reactors");
      c("interact", [reactor], [annReactor]);
      return runtime.getField(reactor, "interact").app();
    }

    function react(reactor, event) {
      checkArity(2, arguments, "reactors");
      c("react", [reactor, event], [annReactor, annEvent]);
      return runtime.getField(reactor, "react").app(event);
    }

    function getTrace(reactor) {
      checkArity(1, arguments, "reactors");
      c("get-trace", [reactor], [annReactor]);
      return runtime.getField(reactor, "get-trace").app();
    }

    function getTraceAsTable(reactor) {
      checkArity(1, arguments, "reactors");
      c("get-trace-as-table", [reactor], [annReactor]);
      return runtime.getField(reactor, "get-trace-as-table").app();
    }

    function startTrace(reactor) {
      checkArity(1, arguments, "reactors");
      c("start-trace", [reactor], [annReactor]);
      return runtime.getField(reactor, "start-trace").app();
    }

    function interactTrace(reactor) {
      checkArity(1, arguments, "reactors");
      c("interact-trace", [reactor], [annReactor]);
      return runtime.getField(reactor, "interact-trace").app();
    }

    function simulateTrace(reactor, limit) {
      checkArity(2, arguments, "reactors");
      c("simulate-trace", [reactor, limit], [annReactor, runtime.NumInteger]);
      return runtime.getField(reactor, "simulate-trace").app(limit);
    }

    function stopTrace(reactor) {
      checkArity(1, arguments, "reactors");
      c("stop-trace", [reactor], [annReactor]);
      return runtime.getField(reactor, "stop-trace").app();
    }

    var F = runtime.makeFunction;

    return runtime.makeObject({
      "provide-plus-types": runtime.makeObject({
        values: runtime.makeObject({
          mouse: gmf(reactorEvents, "mouse"),
          keypress: gmf(reactorEvents, "keypress"),
          "time-tick": gmf(reactorEvents, "time-tick"),
          "make-reactor": F(makeReactor, "make-reactor"),

          "get-value": F(getValue, "get-value"),
          "get-instance": F(getValue, "get-instance"),
          "draw": F(draw, "draw"),
          "get-trace": F(getTrace, "get-trace"),
          "get-trace-as-table": F(getTraceAsTable, "get-trace-as-table"),
          "start-trace": F(startTrace, "start-trace"),
          "stop-trace": F(stopTrace, "stop-trace"),
          "interact-trace": F(interactTrace, "interact-trace"),
          "simulate-trace": F(simulateTrace, "simulate-trace"),
          "react": F(react, "react"),
          "interact": F(interact, "interact")

        }),
        types: {
          Event: gtf(reactorEvents, "Event"),
          Reactor: annReactor
        },
        internal: {
          setInteract: setInteract          
        }
      })
    });
  }
})
,
"builtin://data-source":({"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"option"}],
"provides":{"values":{"bool-sanitizer":"tany",
"booleans-only":"tany",
"c-bool":"tany",
"c-custom":"tany",
"c-empty":"tany",
"c-num":"tany",
"c-str":"tany",
"empty-only":"tany",
"is-CellContent":"tany",
"is-DataSourceLoaderOption":"tany",
"is-c-bool":"tany",
"is-c-custom":"tany",
"is-c-empty":"tany",
"is-c-num":"tany",
"is-c-str":"tany",
"is-sanitize-col":"tany",
"num-sanitizer":"tany",
"numbers-only":"tany",
"option-sanitizer":"tany",
"sanitize-col":"tany",
"strict-num-sanitizer":"tany",
"string-sanitizer":"tany",
"strings-only":"tany"},
"datatypes":{"atom#CellContent#1":["data","CellContent",["A"],[["c-empty"],["c-str",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["c-num",
[["n",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]],["c-bool",
[["b",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Boolean"}]]],["c-custom",
[["datum",
["tid",
"A"]]]]],{}],
"atom#DataSourceLoaderOption#2":["data","DataSourceLoaderOption",["A","B"],[["sanitize-col",
[["sanitizer",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://data-source"},
"name":"Sanitizer"}],["col",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}]},
"aliases":{"CellContent":"tany",
"DataSourceLoader":"tany",
"DataSourceLoaderOption":"tany",
"LoadedTable":"tany",
"Sanitizer":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import11,$O12) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://data-source";
var D = R.undefined;
var L = [[M,8,2,120,8,11,129],
[M,9,2,132,9,22,152],
[M,9,15,145,9,21,151],
[M,9,4,134,9,22,152],
[M,10,2,155,10,22,175],
[M,10,15,168,10,21,174],
[M,10,4,157,10,22,175],
[M,11,2,178,11,24,200],
[M,11,16,192,11,23,199],
[M,11,4,180,11,24,200],
[M,12,2,203,12,24,225],
[M,12,22,223,12,23,224],
[M,12,4,205,12,24,225],
[M,7,0,97,13,3,229],
[M,25,2,563,25,64,625],
[M,25,24,585,25,30,591],
[M,25,45,606,25,54,615],
[M,25,4,565,25,64,625],
[M,24,0,527,26,3,629],
[M,35,19,867,35,25,873],
[M,35,8,856,35,15,863],
[M,34,4,826,37,7,932],
[M,36,16,890,36,50,924],
[M,36,23,897,36,49,923],
[M,34,10,832,34,21,843],
[M,33,2,804,38,5,938],
[M,32,0,765,39,3,942],
[M,43,6,1009,43,13,1016],
[M,42,2,981,48,5,1151],
[M,44,6,1029,44,14,1037],
[M,45,18,1061,45,34,1077],
[M,45,6,1049,45,14,1057],
[M,46,19,1097,46,28,1106],
[M,46,6,1084,46,15,1093],
[M,47,25,1132,47,38,1145],
[M,47,6,1113,47,21,1128],
[M,42,8,987,42,19,998],
[M,41,0,944,49,3,1155],
[M,56,18,1348,57,47,1436],
[M,56,24,1354,57,46,1435],
[M,56,24,1354,57,29,1418],
[M,56,24,1354,57,23,1412],
[M,56,24,1354,56,58,1388],
[M,56,10,1340,56,14,1344],
[M,55,6,1293,59,9,1469],
[M,58,10,1447,58,17,1454],
[M,55,12,1299,55,20,1307],
[M,55,22,1309,55,41,1328],
[M,54,6,1275,54,14,1283],
[M,53,2,1247,66,5,1747],
[M,54,4,1273,59,9,1469],
[M,60,6,1476,60,14,1484],
[M,61,22,1512,61,23,1513],
[M,61,6,1496,61,15,1505],
[M,62,25,1554,63,58,1647],
[M,62,31,1560,63,57,1646],
[M,62,31,1560,63,40,1629],
[M,62,31,1560,63,34,1623],
[M,62,31,1560,63,25,1614],
[M,63,12,1601,63,25,1614],
[M,62,6,1535,62,21,1550],
[M,62,4,1533,63,58,1647],
[M,64,17,1665,65,33,1741],
[M,64,23,1671,65,32,1740],
[M,64,23,1671,65,15,1723],
[M,64,6,1654,64,13,1661],
[M,53,8,1253,53,19,1264],
[M,52,8,1197,52,55,1244],
[M,52,37,1226,52,55,1244],
[M,52,8,1197,52,34,1223],
[M,52,8,1197,52,23,1212],
[M,51,0,1157,67,3,1751],
[M,72,6,1872,72,15,1881],
[M,71,2,1844,91,5,2577],
[M,75,10,1926,75,16,1932],
[M,76,10,1955,76,16,1961],
[M,77,21,1994,78,66,2096],
[M,77,27,2000,78,65,2095],
[M,77,27,2000,78,47,2077],
[M,77,27,2000,78,41,2071],
[M,77,27,2000,78,32,2062],
[M,78,16,2046,78,32,2062],
[M,73,6,1893,73,14,1901],
[M,73,4,1891,79,9,2106],
[M,82,10,2146,82,37,2173],
[M,83,10,2195,83,38,2223],
[M,84,21,2257,85,52,2346],
[M,84,27,2263,85,51,2345],
[M,84,27,2263,85,33,2327],
[M,84,27,2263,85,27,2321],
[M,84,27,2263,85,17,2311],
[M,83,10,2195,83,27,2212],
[M,82,10,2146,82,27,2163],
[M,80,6,2113,80,14,2121],
[M,80,4,2111,86,9,2356],
[M,87,25,2382,88,59,2476],
[M,87,31,2388,88,58,2475],
[M,87,31,2388,88,40,2457],
[M,87,31,2388,88,34,2451],
[M,87,31,2388,88,25,2442],
[M,88,12,2429,88,25,2442],
[M,87,6,2363,87,21,2378],
[M,87,4,2361,88,59,2476],
[M,89,17,2494,90,34,2571],
[M,89,23,2500,90,33,2570],
[M,89,23,2500,90,15,2552],
[M,89,6,2483,89,13,2490],
[M,71,8,1850,71,19,1861],
[M,70,8,1794,70,55,1841],
[M,70,37,1823,70,55,1841],
[M,70,8,1794,70,34,1820],
[M,70,8,1794,70,23,1809],
[M,69,0,1753,92,3,2581],
[M,99,18,2781,100,51,2869],
[M,99,24,2787,100,50,2868],
[M,99,24,2787,100,33,2851],
[M,99,24,2787,100,27,2845],
[M,99,24,2787,100,17,2835],
[M,99,10,2773,99,14,2777],
[M,98,6,2726,102,9,2902],
[M,101,10,2880,101,17,2887],
[M,98,12,2732,98,20,2740],
[M,98,22,2742,98,41,2761],
[M,97,6,2708,97,14,2716],
[M,96,2,2680,110,5,3268],
[M,97,4,2706,102,9,2902],
[M,103,6,2909,103,14,2917],
[M,104,19,2942,105,70,3049],
[M,104,25,2948,105,69,3048],
[M,104,25,2948,105,36,3015],
[M,104,25,2948,105,30,3009],
[M,104,25,2948,105,21,3000],
[M,105,12,2991,105,21,3000],
[M,104,6,2929,104,15,2938],
[M,104,4,2927,105,70,3049],
[M,106,25,3075,107,58,3168],
[M,106,31,3081,107,57,3167],
[M,106,31,3081,107,40,3150],
[M,106,31,3081,107,34,3144],
[M,106,31,3081,107,25,3135],
[M,107,12,3122,107,25,3135],
[M,106,6,3056,106,21,3071],
[M,106,4,3054,107,58,3168],
[M,108,17,3186,109,33,3262],
[M,108,23,3192,109,32,3261],
[M,108,23,3192,109,15,3244],
[M,108,6,3175,108,13,3182],
[M,96,8,2686,96,19,2697],
[M,95,8,2630,95,55,2677],
[M,95,37,2659,95,55,2677],
[M,95,8,2630,95,34,2656],
[M,95,8,2630,95,23,2645],
[M,94,0,2583,111,3,3272],
[M,116,6,3391,116,14,3399],
[M,115,2,3363,126,5,3754],
[M,119,22,3478,119,54,3510],
[M,119,38,3494,119,54,3510],
[M,119,10,3466,119,18,3474],
[M,118,15,3434,123,9,3665],
[M,120,23,3534,120,49,3560],
[M,120,40,3551,120,49,3560],
[M,120,10,3521,120,19,3530],
[M,121,28,3589,121,56,3617],
[M,121,43,3604,121,56,3617],
[M,121,10,3571,121,24,3585],
[M,122,10,3628,122,17,3635],
[M,124,6,3672,125,33,3748],
[M,124,12,3678,125,32,3747],
[M,124,12,3678,125,15,3730],
[M,124,12,3678,124,48,3714],
[M,124,12,3678,124,39,3705],
[M,118,21,3440,118,32,3451],
[M,115,8,3369,115,19,3380],
[M,114,8,3313,114,55,3360],
[M,114,37,3342,114,55,3360],
[M,114,8,3313,114,34,3339],
[M,114,8,3313,114,23,3328],
[M,113,0,3274,127,3,3758],
[M,132,6,3877,132,14,3885],
[M,131,2,3849,142,5,4232],
[M,135,22,3964,135,47,3989],
[M,135,38,3980,135,47,3989],
[M,135,10,3952,135,18,3960],
[M,134,15,3920,139,9,4143],
[M,136,23,4013,136,49,4039],
[M,136,40,4030,136,49,4039],
[M,136,10,4000,136,19,4009],
[M,137,28,4068,137,56,4096],
[M,137,43,4083,137,56,4096],
[M,137,10,4050,137,24,4064],
[M,138,10,4107,138,17,4114],
[M,140,6,4150,141,33,4226],
[M,140,12,4156,141,32,4225],
[M,140,12,4156,141,15,4208],
[M,140,12,4156,140,48,4192],
[M,140,12,4156,140,39,4183],
[M,134,21,3926,134,32,3937],
[M,131,8,3855,131,19,3866],
[M,130,8,3799,130,55,3846],
[M,130,37,3828,130,55,3846],
[M,130,8,3799,130,34,3825],
[M,130,8,3799,130,23,3814],
[M,129,0,3760,143,3,4236],
[M,148,6,4356,148,15,4365],
[M,147,2,4328,158,5,4718],
[M,151,22,4444,151,54,4476],
[M,151,38,4460,151,54,4476],
[M,151,10,4432,151,18,4440],
[M,150,15,4400,155,9,4628],
[M,152,22,4499,152,47,4524],
[M,152,38,4515,152,47,4524],
[M,152,10,4487,152,18,4495],
[M,153,28,4553,153,56,4581],
[M,153,43,4568,153,56,4581],
[M,153,10,4535,153,24,4549],
[M,154,10,4592,154,17,4599],
[M,156,6,4635,157,34,4712],
[M,156,12,4641,157,33,4711],
[M,156,12,4641,157,15,4693],
[M,156,12,4641,156,48,4677],
[M,156,12,4641,156,39,4668],
[M,150,21,4406,150,32,4417],
[M,147,8,4334,147,19,4345],
[M,146,8,4278,146,55,4325],
[M,146,37,4307,146,55,4325],
[M,146,8,4278,146,34,4304],
[M,146,8,4278,146,23,4293],
[M,145,0,4238,159,3,4722],
[M,164,17,4850,164,23,4856],
[M,164,6,4839,164,13,4846],
[M,163,2,4811,174,5,5209],
[M,167,22,4930,167,50,4958],
[M,167,34,4942,167,50,4958],
[M,167,10,4918,167,18,4926],
[M,166,15,4886,171,9,5111],
[M,168,22,4981,168,43,5002],
[M,168,34,4993,168,43,5002],
[M,168,10,4969,168,18,4977],
[M,169,23,5026,169,45,5048],
[M,169,36,5039,169,45,5048],
[M,169,10,5013,169,19,5022],
[M,170,28,5077,170,52,5101],
[M,170,39,5088,170,52,5101],
[M,170,10,5059,170,24,5073],
[M,172,6,5118,173,38,5203],
[M,172,12,5124,173,37,5202],
[M,172,12,5124,173,15,5180],
[M,172,12,5124,172,52,5164],
[M,172,12,5124,172,43,5155],
[M,166,21,4892,166,32,4903],
[M,163,8,4817,163,19,4828],
[M,162,8,4761,162,55,4808],
[M,162,37,4790,162,55,4808],
[M,162,8,4761,162,34,4787],
[M,162,8,4761,162,23,4776],
[M,161,0,4724,175,3,5213],
["dummy location"],
[M,29,2,668,29,95,761],
[M,20,2,445,20,40,483],
[M,21,2,487,21,38,523],
[M,2,0,32,175,3,5213]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var raise16 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"raise");
var _plus3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var num$to$string1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-to-string");
var torepr6 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"torepr");
var string$to$number2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"string-to-number");
var equal$always5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"equal-always");
var string$tolower3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"string-tolower");
var $type$RawArray4 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["RawArray"];
var $type$String14 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var $type$Number1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$Boolean15 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Boolean"];
var O6 = R.getField($O12,"values");
var O9 = R.getField($O12,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import11);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$O12);
var $toplevel14 = function($$resumer1336) {
var $step13 = 0;
var $ans16 = D;
var $al17 = L[260];
try {
if(R.isActivationRecord($$resumer1336)) {
$step13 = $$resumer1336.step;
$al17 = $$resumer1336.from;
$ans16 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
CellContent130 = $$resumer1336.vars[0];
DataSourceLoaderOption499 = $$resumer1336.vars[1];
is$CellContent62 = $$resumer1336.vars[2];
is$c$empty65 = $$resumer1336.vars[3];
c$empty68 = $$resumer1336.vars[4];
is$c$str71 = $$resumer1336.vars[5];
c$str74 = $$resumer1336.vars[6];
is$c$num77 = $$resumer1336.vars[7];
c$num80 = $$resumer1336.vars[8];
is$c$bool83 = $$resumer1336.vars[9];
c$bool86 = $$resumer1336.vars[10];
is$c$custom89 = $$resumer1336.vars[11];
c$custom92 = $$resumer1336.vars[12];
Sanitizer100 = $$resumer1336.vars[13];
LoadedTable498 = $$resumer1336.vars[14];
is$DataSourceLoaderOption107 = $$resumer1336.vars[15];
is$sanitize$col110 = $$resumer1336.vars[16];
sanitize$col113 = $$resumer1336.vars[17];
DataSourceLoader500 = $$resumer1336.vars[18];
option$sanitizer134 = $$resumer1336.vars[19];
string$sanitizer150 = $$resumer1336.vars[20];
num$sanitizer204 = $$resumer1336.vars[21];
bool$sanitizer277 = $$resumer1336.vars[22];
strict$num$sanitizer335 = $$resumer1336.vars[23];
strings$only366 = $$resumer1336.vars[24];
numbers$only400 = $$resumer1336.vars[25];
booleans$only430 = $$resumer1336.vars[26];
empty$only461 = $$resumer1336.vars[27];
defined_value504 = $$resumer1336.vars[28];
defined_value505 = $$resumer1336.vars[29];
defined_value506 = $$resumer1336.vars[30];
defined_value507 = $$resumer1336.vars[31];
defined_value508 = $$resumer1336.vars[32];
defined_value509 = $$resumer1336.vars[33];
defined_value510 = $$resumer1336.vars[34];
defined_value511 = $$resumer1336.vars[35];
defined_value512 = $$resumer1336.vars[36];
defined_value513 = $$resumer1336.vars[37];
defined_value514 = $$resumer1336.vars[38];
defined_value515 = $$resumer1336.vars[39];
defined_value516 = $$resumer1336.vars[40];
defined_value517 = $$resumer1336.vars[41];
defined_value518 = $$resumer1336.vars[42];
defined_value519 = $$resumer1336.vars[43];
defined_value520 = $$resumer1336.vars[44];
defined_value521 = $$resumer1336.vars[45];
defined_value522 = $$resumer1336.vars[46];
defined_value523 = $$resumer1336.vars[47];
defined_value524 = $$resumer1336.vars[48];
defined_value525 = $$resumer1336.vars[49];
defined_value526 = $$resumer1336.vars[50];
answer502 = $$resumer1336.vars[51];
provides501 = $$resumer1336.vars[52];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step13) {
case 0: var CellContent18 = R.namedBrander("CellContent",L[13]);
var CellContent130 = R.makeBranderAnn(CellContent18,"CellContent");
var DataSourceLoaderOption19 = R.namedBrander("DataSourceLoaderOption",L[18]);
var DataSourceLoaderOption499 = R.makeBranderAnn(DataSourceLoaderOption19,"DataSourceLoaderOption");
var CellContent59 = {"$var":D};
var is$CellContent62 = {"$var":D};
var is$c$empty65 = {"$var":D};
var c$empty68 = {"$var":D};
var is$c$str71 = {"$var":D};
var c$str74 = {"$var":D};
var is$c$num77 = {"$var":D};
var c$num80 = {"$var":D};
var is$c$bool83 = {"$var":D};
var c$bool86 = {"$var":D};
var is$c$custom89 = {"$var":D};
var c$custom92 = {"$var":D};
var $c$empty_getfields25 = function(f) {
return f();
};
var $c$empty_getfieldsref23 = function(f) {
return f();
};
var $c$empty_mutablemask24 = [];
var $c$empty$base20 = {"_match":R.makeMatch("c-empty",0)};
var $c$empty$brander21 = R.namedBrander("c-empty",L[0]);
var $c$empty$brands22 = {};
$c$empty$brands22[CellContent18._brand] = true;
$c$empty$brands22[$c$empty$brander21._brand] = true;
var $c$str_getfields31 = function(f) {
return f(this.dict["s"]);
};
var $c$str_getfieldsref29 = function(f,refmask) {
return f(R.derefField(this.dict["s"],false,refmask[0]));
};
var $c$str_mutablemask30 = [false];
var $c$str$base26 = {"$fieldNames":["s"],
"_match":R.makeMatch("c-str",1)};
var $c$str$brander27 = R.namedBrander("c-str",L[1]);
var $c$str$brands28 = {};
$c$str$brands28[CellContent18._brand] = true;
$c$str$brands28[$c$str$brander27._brand] = true;
var c$str32 = R.makeVariantConstructor(L[3],function() {
return [$type$String14];
},["s33"],[L[2]],[false],["s33"],$c$str_mutablemask30,$c$str$base26,$c$str$brands28,"c-str",$c$str_getfieldsref29,$c$str_getfields31,$c$str$base26);
var $c$num_getfields39 = function(f) {
return f(this.dict["n"]);
};
var $c$num_getfieldsref37 = function(f,refmask) {
return f(R.derefField(this.dict["n"],false,refmask[0]));
};
var $c$num_mutablemask38 = [false];
var $c$num$base34 = {"$fieldNames":["n"],
"_match":R.makeMatch("c-num",1)};
var $c$num$brander35 = R.namedBrander("c-num",L[4]);
var $c$num$brands36 = {};
$c$num$brands36[CellContent18._brand] = true;
$c$num$brands36[$c$num$brander35._brand] = true;
var c$num40 = R.makeVariantConstructor(L[6],function() {
return [$type$Number1];
},["n41"],[L[5]],[false],["n41"],$c$num_mutablemask38,$c$num$base34,$c$num$brands36,"c-num",$c$num_getfieldsref37,$c$num_getfields39,$c$num$base34);
var $c$bool_getfields47 = function(f) {
return f(this.dict["b"]);
};
var $c$bool_getfieldsref45 = function(f,refmask) {
return f(R.derefField(this.dict["b"],false,refmask[0]));
};
var $c$bool_mutablemask46 = [false];
var $c$bool$base42 = {"$fieldNames":["b"],
"_match":R.makeMatch("c-bool",1)};
var $c$bool$brander43 = R.namedBrander("c-bool",L[7]);
var $c$bool$brands44 = {};
$c$bool$brands44[CellContent18._brand] = true;
$c$bool$brands44[$c$bool$brander43._brand] = true;
var c$bool48 = R.makeVariantConstructor(L[9],function() {
return [$type$Boolean15];
},["b49"],[L[8]],[false],["b49"],$c$bool_mutablemask46,$c$bool$base42,$c$bool$brands44,"c-bool",$c$bool_getfieldsref45,$c$bool_getfields47,$c$bool$base42);
var $c$custom_getfields55 = function(f) {
return f(this.dict["datum"]);
};
var $c$custom_getfieldsref53 = function(f,refmask) {
return f(R.derefField(this.dict["datum"],false,refmask[0]));
};
var $c$custom_mutablemask54 = [false];
var $c$custom$base50 = {"$fieldNames":["datum"],
"_match":R.makeMatch("c-custom",1)};
var $c$custom$brander51 = R.namedBrander("c-custom",L[10]);
var $c$custom$brands52 = {};
$c$custom$brands52[CellContent18._brand] = true;
$c$custom$brands52[$c$custom$brander51._brand] = true;
var c$custom56 = R.makeVariantConstructor(L[12],function() {
return [R.Any];
},["datum57"],[L[11]],[false],["datum57"],$c$custom_mutablemask54,$c$custom$base50,$c$custom$brands52,"c-custom",$c$custom_getfieldsref53,$c$custom_getfields55,$c$custom$base50);
var anf_assign58 = R.makeObject({"CellContent":G(CellContent18,"test",L[13]),
"is-c-empty":G($c$empty$brander21,"test",L[0]),
"c-empty":R.makeDataValue($c$empty$base20,$c$empty$brands22,"c-empty",$c$empty_getfieldsref23,$c$empty_getfields25,-1,$c$empty_mutablemask24,$c$empty$base20),
"is-c-str":G($c$str$brander27,"test",L[1]),
"c-str":c$str32,
"is-c-num":G($c$num$brander35,"test",L[4]),
"c-num":c$num40,
"is-c-bool":G($c$bool$brander43,"test",L[7]),
"c-bool":c$bool48,
"is-c-custom":G($c$custom$brander51,"test",L[10]),
"c-custom":c$custom56});
CellContent59.$var = anf_assign58;
var anf_bracket60 = CellContent59.$var;
$al17 = L[13];
var anf_assign61 = G(anf_bracket60,"CellContent",L[13]);
is$CellContent62.$var = anf_assign61;
var anf_bracket63 = CellContent59.$var;
$al17 = L[0];
var anf_assign64 = G(anf_bracket63,"is-c-empty",L[0]);
is$c$empty65.$var = anf_assign64;
var anf_bracket66 = CellContent59.$var;
$al17 = L[0];
var anf_assign67 = G(anf_bracket66,"c-empty",L[0]);
c$empty68.$var = anf_assign67;
var anf_bracket69 = CellContent59.$var;
$al17 = L[1];
var anf_assign70 = G(anf_bracket69,"is-c-str",L[1]);
is$c$str71.$var = anf_assign70;
var anf_bracket72 = CellContent59.$var;
$al17 = L[1];
var anf_assign73 = G(anf_bracket72,"c-str",L[1]);
c$str74.$var = anf_assign73;
var anf_bracket75 = CellContent59.$var;
$al17 = L[4];
var anf_assign76 = G(anf_bracket75,"is-c-num",L[4]);
is$c$num77.$var = anf_assign76;
var anf_bracket78 = CellContent59.$var;
$al17 = L[4];
var anf_assign79 = G(anf_bracket78,"c-num",L[4]);
c$num80.$var = anf_assign79;
var anf_bracket81 = CellContent59.$var;
$al17 = L[7];
var anf_assign82 = G(anf_bracket81,"is-c-bool",L[7]);
is$c$bool83.$var = anf_assign82;
var anf_bracket84 = CellContent59.$var;
$al17 = L[7];
var anf_assign85 = G(anf_bracket84,"c-bool",L[7]);
c$bool86.$var = anf_assign85;
var anf_bracket87 = CellContent59.$var;
$al17 = L[10];
var anf_assign88 = G(anf_bracket87,"is-c-custom",L[10]);
is$c$custom89.$var = anf_assign88;
var anf_bracket90 = CellContent59.$var;
$al17 = L[10];
var anf_assign91 = G(anf_bracket90,"c-custom",L[10]);
c$custom92.$var = anf_assign91;
var Sanitizer100 = R.Function;
var LoadedTable498 = R.makeTupleAnn([L[258],L[259]],[$type$RawArray4,$type$RawArray4]);
var DataSourceLoaderOption104 = {"$var":D};
var is$DataSourceLoaderOption107 = {"$var":D};
var is$sanitize$col110 = {"$var":D};
var sanitize$col113 = {"$var":D};
var $sanitize$col_getfields98 = function(f) {
return f(this.dict["col"],this.dict["sanitizer"]);
};
var $sanitize$col_getfieldsref96 = function(f,refmask) {
return f(R.derefField(this.dict["col"],false,refmask[0]),R.derefField(this.dict["sanitizer"],false,refmask[1]));
};
var $sanitize$col_mutablemask97 = [false,false];
var $sanitize$col$base93 = {"$fieldNames":["col","sanitizer"],
"_match":R.makeMatch("sanitize-col",2)};
var $sanitize$col$brander94 = R.namedBrander("sanitize-col",L[14]);
var $sanitize$col$brands95 = {};
$sanitize$col$brands95[DataSourceLoaderOption19._brand] = true;
$sanitize$col$brands95[$sanitize$col$brander94._brand] = true;
var sanitize$col99 = R.makeVariantConstructor(L[17],function() {
return [$type$String14,Sanitizer100];
},["col101","sanitizer102"],[L[15],L[16]],[false,false],["col101","sanitizer102"],$sanitize$col_mutablemask97,$sanitize$col$base93,$sanitize$col$brands95,"sanitize-col",$sanitize$col_getfieldsref96,$sanitize$col_getfields98,$sanitize$col$base93);
var anf_assign103 = R.makeObject({"DataSourceLoaderOption":G(DataSourceLoaderOption19,"test",L[18]),
"is-sanitize-col":G($sanitize$col$brander94,"test",L[14]),
"sanitize-col":sanitize$col99});
DataSourceLoaderOption104.$var = anf_assign103;
var anf_bracket105 = DataSourceLoaderOption104.$var;
$al17 = L[18];
var anf_assign106 = G(anf_bracket105,"DataSourceLoaderOption",L[18]);
is$DataSourceLoaderOption107.$var = anf_assign106;
var anf_bracket108 = DataSourceLoaderOption104.$var;
$al17 = L[14];
var anf_assign109 = G(anf_bracket108,"is-sanitize-col",L[14]);
is$sanitize$col110.$var = anf_assign109;
var anf_bracket111 = DataSourceLoaderOption104.$var;
$al17 = L[14];
var anf_assign112 = G(anf_bracket111,"sanitize-col",L[14]);
sanitize$col113.$var = anf_assign112;
var DataSourceLoader500 = R.makeRecordAnn(["load"],[L[257]],{"load":R.Function});
var option$sanitizer134 = {"$var":D};
var string$sanitizer150 = {"$var":D};
var num$sanitizer204 = {"$var":D};
var bool$sanitizer277 = {"$var":D};
var strict$num$sanitizer335 = {"$var":D};
var strings$only366 = {"$var":D};
var numbers$only400 = {"$var":D};
var booleans$only430 = {"$var":D};
var empty$only461 = {"$var":D};
var $temp_lam115 = function($val$sanitizer116) {
var $step114 = 0;
var $ans117 = D;
var $al118 = L[26];
try {
if(R.isActivationRecord($val$sanitizer116)) {
$step114 = $val$sanitizer116.step;
$al118 = $val$sanitizer116.from;
$ans117 = $val$sanitizer116.ans;
val$sanitizer116 = $val$sanitizer116.args[0];
} else {
var $l = arguments.length;
if($l !== 1) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[26],1,$t);
}
var val$sanitizer116 = $val$sanitizer116;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step114) {
case 0: $step114 = 1;
var $temp_lam120 = function($x121,$col122,$row123) {
var $step119 = 0;
var $ans124 = D;
var $al125 = L[25];
try {
if(R.isActivationRecord($x121)) {
$step119 = $x121.step;
$al125 = $x121.from;
$ans124 = $x121.ans;
x121 = $x121.args[0];
col122 = $x121.args[1];
row123 = $x121.args[2];
cases126 = $x121.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[25],3,$t);
}
var x121 = $x121;
var col122 = $col122;
var row123 = $row123;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step119) {
case 0: var cases126 = x121;
$step119 = 1;
$al125 = L[24];
R._checkAnn(L[24],CellContent130,cases126);
break;
case 1: var $cases_dispatch129 = {"c-empty":2};
$al125 = L[21];
$step119 = $cases_dispatch129[cases126.$name] || 3;
break;
case 2: if(cases126.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[20],false,L[21]);
}
$step119 = 5;
$al125 = L[19];
$ans124 = G(O6,"none",L[19]);
break;
case 3: $step119 = 4;
$al125 = L[23];
if(!(R.isFunction(val$sanitizer116))) {
R.ffi.throwNonFunApp($al125,val$sanitizer116);
}
$ans124 = val$sanitizer116.app(x121,col122,row123);
break;
case 4: var anf_arg127 = $ans124;
$step119 = 5;
$al125 = L[22];
$field128 = R.getColonFieldLoc(O6,"some",L[22]);
if(R.isMethod($field128)) {
$ans124 = $field128.full_meth(O6,anf_arg127);
} else {
if(!(R.isFunction($field128))) {
R.ffi.throwNonFunApp(L[22],$field128);
}
$ans124 = $field128.app(anf_arg127);
}
break;
case 5: ++R.GAS;
return $ans124;
default: throw "No case numbered " + $step119 + " in $temp_lam120";
}
}
} catch($e131) {
if(R.isCont($e131) && ($step119 !== 5)) {
$e131.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al125,$temp_lam120,$step119,[x121,col122,row123],[cases126]);
}
if(R.isPyretException($e131)) {
$e131.pyretStack.push($al125);
}
throw $e131;
}
};
$ans117 = R.makeFunction($temp_lam120,"");
break;
case 1: ++R.GAS;
return $ans117;
default: throw "No case numbered " + $step114 + " in $temp_lam115";
}
}
} catch($e132) {
if(R.isCont($e132) && ($step114 !== 1)) {
$e132.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al118,$temp_lam115,$step114,[val$sanitizer116],[]);
}
if(R.isPyretException($e132)) {
$e132.pyretStack.push($al118);
}
throw $e132;
}
};
var anf_assign133 = R.makeFunction($temp_lam115,"option-sanitizer");
option$sanitizer134.$var = anf_assign133;
var $temp_lam136 = function($x137,$col138,$row139) {
var $step135 = 0;
var $ans140 = D;
var $al141 = L[37];
try {
if(R.isActivationRecord($x137)) {
$step135 = $x137.step;
$al141 = $x137.from;
$ans140 = $x137.ans;
x137 = $x137.args[0];
col138 = $x137.args[1];
row139 = $x137.args[2];
cases142 = $x137.vars[0];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[37],3,$t);
}
var x137 = $x137;
var col138 = $col138;
var row139 = $row139;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step135) {
case 0: var cases142 = x137;
$step135 = 1;
$al141 = L[36];
R._checkAnn(L[36],CellContent130,cases142);
break;
case 1: var $cases_dispatch147 = {"c-empty":2,
"c-str":3,
"c-num":4,
"c-bool":5,
"c-custom":6};
$al141 = L[28];
$step135 = $cases_dispatch147[cases142.$name] || 7;
break;
case 2: if(cases142.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[27],false,L[28]);
}
$step135 = 8;
$ans140 = ("");
break;
case 3: if(cases142.$arity !== 1) {
if(cases142.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[29],1,cases142.$arity,L[28]);
} else {
R.ffi.throwCasesSingletonErrorC(L[29],true,L[28]);
}
}
var $fn274 = cases142.$constructor.$fieldNames;
var s143 = R.derefField(cases142.dict[$fn274[0]],cases142.$mut_fields_mask[0],false);
$step135 = 8;
$ans140 = s143;
break;
case 4: if(cases142.$arity !== 1) {
if(cases142.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[31],1,cases142.$arity,L[28]);
} else {
R.ffi.throwCasesSingletonErrorC(L[31],true,L[28]);
}
}
var $fn274 = cases142.$constructor.$fieldNames;
var n144 = R.derefField(cases142.dict[$fn274[0]],cases142.$mut_fields_mask[0],false);
$step135 = 8;
$al141 = L[30];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al141,num$to$string1);
}
$ans140 = num$to$string1.app(n144);
break;
case 5: if(cases142.$arity !== 1) {
if(cases142.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[33],1,cases142.$arity,L[28]);
} else {
R.ffi.throwCasesSingletonErrorC(L[33],true,L[28]);
}
}
var $fn274 = cases142.$constructor.$fieldNames;
var b145 = R.derefField(cases142.dict[$fn274[0]],cases142.$mut_fields_mask[0],false);
$step135 = 8;
$al141 = L[32];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al141,torepr6);
}
$ans140 = torepr6.app(b145);
break;
case 6: if(cases142.$arity !== 1) {
if(cases142.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[35],1,cases142.$arity,L[28]);
} else {
R.ffi.throwCasesSingletonErrorC(L[35],true,L[28]);
}
}
var $fn274 = cases142.$constructor.$fieldNames;
var datum146 = R.derefField(cases142.dict[$fn274[0]],cases142.$mut_fields_mask[0],false);
$step135 = 8;
$al141 = L[34];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al141,torepr6);
}
$ans140 = torepr6.app(datum146);
break;
case 7: $step135 = 8;
$al141 = L[28];
$ans140 = R.throwNoCasesMatched(L[28],cases142);
break;
case 8: ++R.GAS;
return $ans140;
default: throw "No case numbered " + $step135 + " in $temp_lam136";
}
}
} catch($e148) {
if(R.isCont($e148) && ($step135 !== 8)) {
$e148.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al141,$temp_lam136,$step135,[x137,col138,row139],[cases142]);
}
if(R.isPyretException($e148)) {
$e148.pyretStack.push($al141);
}
throw $e148;
}
};
var anf_assign149 = R.makeFunction($temp_lam136,"string-sanitizer");
string$sanitizer150.$var = anf_assign149;
var $temp_lam152 = function($x153,$col154,$row155) {
var $step151 = 0;
var $ans156 = D;
var $al157 = L[71];
try {
if(R.isActivationRecord($x153)) {
$step151 = $x153.step;
$al157 = $x153.from;
$ans156 = $x153.ans;
x153 = $x153.args[0];
col154 = $x153.args[1];
row155 = $x153.args[2];
anf_arg159 = $x153.vars[0];
loc166 = $x153.vars[1];
cases161 = $x153.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[71],3,$t);
}
var x153 = $x153;
var col154 = $col154;
var row155 = $row155;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step151) {
case 0: $step151 = 1;
$al157 = L[70];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al157,_plus3);
}
$ans156 = _plus3.app(("column "),col154);
break;
case 1: var anf_arg158 = $ans156;
$step151 = 2;
$al157 = L[69];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al157,_plus3);
}
$ans156 = _plus3.app(anf_arg158,(", row "));
break;
case 2: var anf_arg159 = $ans156;
$step151 = 3;
$al157 = L[68];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al157,num$to$string1);
}
$ans156 = num$to$string1.app(row155);
break;
case 3: var anf_arg160 = $ans156;
$step151 = 4;
$al157 = L[67];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al157,_plus3);
}
$ans156 = _plus3.app(anf_arg159,anf_arg160);
break;
case 4: var loc166 = $ans156;
var cases161 = x153;
$step151 = 5;
$al157 = L[66];
R._checkAnn(L[66],CellContent130,cases161);
break;
case 5: var $cases_dispatch201 = {"c-str":6,
"c-num":7,
"c-bool":8,
"c-custom":11,
"c-empty":12};
$al157 = L[49];
$step151 = $cases_dispatch201[cases161.$name] || 15;
break;
case 6: if(cases161.$arity !== 1) {
if(cases161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[48],1,cases161.$arity,L[49]);
} else {
R.ffi.throwCasesSingletonErrorC(L[48],true,L[49]);
}
}
$step151 = 16;
$al157 = L[50];
var $temp_branch175 = function($s162) {
var $step176 = 0;
var $ans177 = D;
var $al178 = L[44];
try {
if(R.isActivationRecord($s162)) {
$step176 = $s162.step;
$al178 = $s162.from;
$ans177 = $s162.ans;
s162 = $s162.args[0];
cases163 = $s162.vars[0];
} else {
var s162 = $s162;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step176) {
case 0: $step176 = 1;
$al178 = L[47];
if(!(R.isFunction(string$to$number2))) {
R.ffi.throwNonFunApp($al178,string$to$number2);
}
$ans177 = string$to$number2.app(s162);
break;
case 1: var cases163 = $ans177;
$step176 = 2;
$al178 = L[46];
R._checkAnn(L[46],R.getDotAnn(L[46],"O",O9,"Option"),cases163);
break;
case 2: var $cases_dispatch179 = {"none":3,
"some":8};
$al178 = L[44];
$step176 = $cases_dispatch179[cases163.$name] || 9;
break;
case 3: if(cases163.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[43],false,L[44]);
}
$step176 = 4;
$al178 = L[42];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al178,_plus3);
}
$ans177 = _plus3.app(("Cannot sanitize the string \""),s162);
break;
case 4: var anf_arg164 = $ans177;
$step176 = 5;
$al178 = L[41];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al178,_plus3);
}
$ans177 = _plus3.app(anf_arg164,("\" at "));
break;
case 5: var anf_arg165 = $ans177;
$step176 = 6;
$al178 = L[40];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al178,_plus3);
}
$ans177 = _plus3.app(anf_arg165,loc166);
break;
case 6: var anf_arg168 = $ans177;
$step176 = 7;
$al178 = L[39];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al178,_plus3);
}
$ans177 = _plus3.app(anf_arg168,(" as a number"));
break;
case 7: var anf_arg172 = $ans177;
$step176 = 10;
$al178 = L[38];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al178,raise16);
}
$ans177 = raise16.app(anf_arg172);
break;
case 8: if(cases163.$arity !== 1) {
if(cases163.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[45],1,cases163.$arity,L[44]);
} else {
R.ffi.throwCasesSingletonErrorC(L[45],true,L[44]);
}
}
var $fn274 = cases163.$constructor.$fieldNames;
var n173 = R.derefField(cases163.dict[$fn274[0]],cases163.$mut_fields_mask[0],false);
$step176 = 10;
$ans177 = n173;
break;
case 9: $step176 = 10;
$al178 = L[44];
$ans177 = R.throwNoCasesMatched(L[44],cases163);
break;
case 10: ++R.GAS;
return $ans177;
default: throw "No case numbered " + $step176 + " in $temp_branch175";
}
}
} catch($e180) {
if(R.isCont($e180) && ($step176 !== 10)) {
$e180.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al178,$temp_branch175,$step176,[s162],[cases163]);
}
if(R.isPyretException($e180)) {
$e180.pyretStack.push($al178);
}
throw $e180;
}
};
$ans156 = cases161.$app_fields($temp_branch175,[false]);
break;
case 7: if(cases161.$arity !== 1) {
if(cases161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[51],1,cases161.$arity,L[49]);
} else {
R.ffi.throwCasesSingletonErrorC(L[51],true,L[49]);
}
}
var $fn274 = cases161.$constructor.$fieldNames;
var n181 = R.derefField(cases161.dict[$fn274[0]],cases161.$mut_fields_mask[0],false);
$step151 = 16;
$ans156 = n181;
break;
case 8: if(cases161.$arity !== 1) {
if(cases161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[53],1,cases161.$arity,L[49]);
} else {
R.ffi.throwCasesSingletonErrorC(L[53],true,L[49]);
}
}
var $fn274 = cases161.$constructor.$fieldNames;
var b182 = R.derefField(cases161.dict[$fn274[0]],cases161.$mut_fields_mask[0],false);
$al157 = L[52];
var anf_if183 = R.checkWrapBoolean(b182);
$step151 = R.isPyretTrue(anf_if183)?9:10;
break;
case 9: $step151 = 16;
$ans156 = (1);
break;
case 10: $step151 = 16;
$ans156 = (0);
break;
case 11: if(cases161.$arity !== 1) {
if(cases161.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[60],1,cases161.$arity,L[49]);
} else {
R.ffi.throwCasesSingletonErrorC(L[60],true,L[49]);
}
}
$step151 = 16;
$al157 = L[61];
var $temp_branch193 = function($datum184) {
var $step194 = 0;
var $ans195 = D;
var $al196 = L[59];
try {
if(R.isActivationRecord($datum184)) {
$step194 = $datum184.step;
$al196 = $datum184.from;
$ans195 = $datum184.ans;
datum184 = $datum184.args[0];
} else {
var datum184 = $datum184;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step194) {
case 0: $step194 = 1;
$al196 = L[59];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al196,torepr6);
}
$ans195 = torepr6.app(datum184);
break;
case 1: var anf_arg185 = $ans195;
$step194 = 2;
$al196 = L[58];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al196,_plus3);
}
$ans195 = _plus3.app(("Cannot sanitize the datum "),anf_arg185);
break;
case 2: var anf_arg187 = $ans195;
$step194 = 3;
$al196 = L[57];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al196,_plus3);
}
$ans195 = _plus3.app(anf_arg187,(" at "));
break;
case 3: var anf_arg190 = $ans195;
$step194 = 4;
$al196 = L[56];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al196,_plus3);
}
$ans195 = _plus3.app(anf_arg190,loc166);
break;
case 4: var anf_arg191 = $ans195;
$step194 = 5;
$al196 = L[55];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al196,_plus3);
}
$ans195 = _plus3.app(anf_arg191,(" as a number"));
break;
case 5: var anf_arg192 = $ans195;
$step194 = 6;
$al196 = L[54];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al196,raise16);
}
$ans195 = raise16.app(anf_arg192);
break;
case 6: ++R.GAS;
return $ans195;
default: throw "No case numbered " + $step194 + " in $temp_branch193";
}
}
} catch($e197) {
if(R.isCont($e197) && ($step194 !== 6)) {
$e197.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al196,$temp_branch193,$step194,[datum184],[]);
}
if(R.isPyretException($e197)) {
$e197.pyretStack.push($al196);
}
throw $e197;
}
};
$ans156 = cases161.$app_fields($temp_branch193,[false]);
break;
case 12: if(cases161.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[65],false,L[49]);
}
$step151 = 13;
$al157 = L[64];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al157,_plus3);
}
$ans156 = _plus3.app(("Cannot sanitize the empty cell at "),loc166);
break;
case 13: var anf_arg198 = $ans156;
$step151 = 14;
$al157 = L[63];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al157,_plus3);
}
$ans156 = _plus3.app(anf_arg198,(" as a number"));
break;
case 14: var anf_arg200 = $ans156;
$step151 = 16;
$al157 = L[62];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al157,raise16);
}
$ans156 = raise16.app(anf_arg200);
break;
case 15: $step151 = 16;
$al157 = L[49];
$ans156 = R.throwNoCasesMatched(L[49],cases161);
break;
case 16: ++R.GAS;
return $ans156;
default: throw "No case numbered " + $step151 + " in $temp_lam152";
}
}
} catch($e202) {
if(R.isCont($e202) && ($step151 !== 16)) {
$e202.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al157,$temp_lam152,$step151,[x153,col154,row155],[anf_arg159,loc166,cases161]);
}
if(R.isPyretException($e202)) {
$e202.pyretStack.push($al157);
}
throw $e202;
}
};
var anf_assign203 = R.makeFunction($temp_lam152,"num-sanitizer");
num$sanitizer204.$var = anf_assign203;
var $temp_lam206 = function($x207,$col208,$row209) {
var $step205 = 0;
var $ans210 = D;
var $al211 = L[112];
try {
if(R.isActivationRecord($x207)) {
$step205 = $x207.step;
$al211 = $x207.from;
$ans210 = $x207.ans;
x207 = $x207.args[0];
col208 = $x207.args[1];
row209 = $x207.args[2];
anf_arg213 = $x207.vars[0];
loc227 = $x207.vars[1];
cases215 = $x207.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[112],3,$t);
}
var x207 = $x207;
var col208 = $col208;
var row209 = $row209;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step205) {
case 0: $step205 = 1;
$al211 = L[111];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al211,_plus3);
}
$ans210 = _plus3.app(("column "),col208);
break;
case 1: var anf_arg212 = $ans210;
$step205 = 2;
$al211 = L[110];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al211,_plus3);
}
$ans210 = _plus3.app(anf_arg212,(", row "));
break;
case 2: var anf_arg213 = $ans210;
$step205 = 3;
$al211 = L[109];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al211,num$to$string1);
}
$ans210 = num$to$string1.app(row209);
break;
case 3: var anf_arg214 = $ans210;
$step205 = 4;
$al211 = L[108];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al211,_plus3);
}
$ans210 = _plus3.app(anf_arg213,anf_arg214);
break;
case 4: var loc227 = $ans210;
var cases215 = x207;
$step205 = 5;
$al211 = L[107];
R._checkAnn(L[107],CellContent130,cases215);
break;
case 5: var $cases_dispatch274 = {"c-bool":6,
"c-num":7,
"c-str":8,
"c-custom":9,
"c-empty":10};
$al211 = L[73];
$step205 = $cases_dispatch274[cases215.$name] || 13;
break;
case 6: if(cases215.$arity !== 1) {
if(cases215.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[72],1,cases215.$arity,L[73]);
} else {
R.ffi.throwCasesSingletonErrorC(L[72],true,L[73]);
}
}
var $fn274 = cases215.$constructor.$fieldNames;
var b216 = R.derefField(cases215.dict[$fn274[0]],cases215.$mut_fields_mask[0],false);
$step205 = 14;
$ans210 = b216;
break;
case 7: if(cases215.$arity !== 1) {
if(cases215.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[82],1,cases215.$arity,L[73]);
} else {
R.ffi.throwCasesSingletonErrorC(L[82],true,L[73]);
}
}
$step205 = 14;
$al211 = L[83];
var $temp_branch236 = function($n217) {
var $step237 = 0;
var $ans238 = D;
var $al239 = L[74];
try {
if(R.isActivationRecord($n217)) {
$step237 = $n217.step;
$al239 = $n217.from;
$ans238 = $n217.ans;
n217 = $n217.args[0];
} else {
var n217 = $n217;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step237) {
case 0: $step237 = 1;
$al239 = L[74];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al239,equal$always5);
}
$ans238 = equal$always5.app(n217,(0));
break;
case 1: var anf_arg219 = $ans238;
$al239 = L[74];
var anf_if235 = R.checkWrapBoolean(anf_arg219);
$step237 = R.isPyretTrue(anf_if235)?2:3;
break;
case 2: $step237 = 12;
$ans238 = (false);
break;
case 3: $step237 = 4;
$al239 = L[75];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al239,equal$always5);
}
$ans238 = equal$always5.app(n217,(1));
break;
case 4: var anf_arg220 = $ans238;
$al239 = L[75];
var anf_if234 = R.checkWrapBoolean(anf_arg220);
$step237 = R.isPyretTrue(anf_if234)?5:6;
break;
case 5: $step237 = 12;
$ans238 = (true);
break;
case 6: $step237 = 7;
$al239 = L[81];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al239,num$to$string1);
}
$ans238 = num$to$string1.app(n217);
break;
case 7: var anf_arg222 = $ans238;
$step237 = 8;
$al239 = L[80];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al239,_plus3);
}
$ans238 = _plus3.app(("Cannot sanitize the number "),anf_arg222);
break;
case 8: var anf_arg225 = $ans238;
$step237 = 9;
$al239 = L[79];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al239,_plus3);
}
$ans238 = _plus3.app(anf_arg225,(" at "));
break;
case 9: var anf_arg226 = $ans238;
$step237 = 10;
$al239 = L[78];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al239,_plus3);
}
$ans238 = _plus3.app(anf_arg226,loc227);
break;
case 10: var anf_arg232 = $ans238;
$step237 = 11;
$al239 = L[77];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al239,_plus3);
}
$ans238 = _plus3.app(anf_arg232,(" as a boolean"));
break;
case 11: var anf_arg233 = $ans238;
$step237 = 12;
$al239 = L[76];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al239,raise16);
}
$ans238 = raise16.app(anf_arg233);
break;
case 12: ++R.GAS;
return $ans238;
default: throw "No case numbered " + $step237 + " in $temp_branch236";
}
}
} catch($e240) {
if(R.isCont($e240) && ($step237 !== 12)) {
$e240.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al239,$temp_branch236,$step237,[n217],[]);
}
if(R.isPyretException($e240)) {
$e240.pyretStack.push($al239);
}
throw $e240;
}
};
$ans210 = cases215.$app_fields($temp_branch236,[false]);
break;
case 8: if(cases215.$arity !== 1) {
if(cases215.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[93],1,cases215.$arity,L[73]);
} else {
R.ffi.throwCasesSingletonErrorC(L[93],true,L[73]);
}
}
$step205 = 14;
$al211 = L[94];
var $temp_branch252 = function($s241) {
var $step253 = 0;
var $ans254 = D;
var $al255 = L[92];
try {
if(R.isActivationRecord($s241)) {
$step253 = $s241.step;
$al255 = $s241.from;
$ans254 = $s241.ans;
s241 = $s241.args[0];
} else {
var s241 = $s241;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step253) {
case 0: $step253 = 1;
$al255 = L[92];
if(!(R.isFunction(string$tolower3))) {
R.ffi.throwNonFunApp($al255,string$tolower3);
}
$ans254 = string$tolower3.app(s241);
break;
case 1: var anf_arg242 = $ans254;
$step253 = 2;
$al255 = L[84];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al255,equal$always5);
}
$ans254 = equal$always5.app(anf_arg242,("true"));
break;
case 2: var anf_arg243 = $ans254;
$al255 = L[84];
var anf_if251 = R.checkWrapBoolean(anf_arg243);
$step253 = R.isPyretTrue(anf_if251)?3:4;
break;
case 3: $step253 = 13;
$ans254 = (true);
break;
case 4: $step253 = 5;
$al255 = L[91];
if(!(R.isFunction(string$tolower3))) {
R.ffi.throwNonFunApp($al255,string$tolower3);
}
$ans254 = string$tolower3.app(s241);
break;
case 5: var anf_arg244 = $ans254;
$step253 = 6;
$al255 = L[85];
if(!(R.isFunction(equal$always5))) {
R.ffi.throwNonFunApp($al255,equal$always5);
}
$ans254 = equal$always5.app(anf_arg244,("false"));
break;
case 6: var anf_arg245 = $ans254;
$al255 = L[85];
var anf_if250 = R.checkWrapBoolean(anf_arg245);
$step253 = R.isPyretTrue(anf_if250)?7:8;
break;
case 7: $step253 = 13;
$ans254 = (false);
break;
case 8: $step253 = 9;
$al255 = L[90];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al255,_plus3);
}
$ans254 = _plus3.app(("Cannot sanitize the string \""),s241);
break;
case 9: var anf_arg246 = $ans254;
$step253 = 10;
$al255 = L[89];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al255,_plus3);
}
$ans254 = _plus3.app(anf_arg246,("\" at "));
break;
case 10: var anf_arg247 = $ans254;
$step253 = 11;
$al255 = L[88];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al255,_plus3);
}
$ans254 = _plus3.app(anf_arg247,loc227);
break;
case 11: var anf_arg248 = $ans254;
$step253 = 12;
$al255 = L[87];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al255,_plus3);
}
$ans254 = _plus3.app(anf_arg248,(" as a boolean"));
break;
case 12: var anf_arg249 = $ans254;
$step253 = 13;
$al255 = L[86];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al255,raise16);
}
$ans254 = raise16.app(anf_arg249);
break;
case 13: ++R.GAS;
return $ans254;
default: throw "No case numbered " + $step253 + " in $temp_branch252";
}
}
} catch($e256) {
if(R.isCont($e256) && ($step253 !== 13)) {
$e256.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al255,$temp_branch252,$step253,[s241],[]);
}
if(R.isPyretException($e256)) {
$e256.pyretStack.push($al255);
}
throw $e256;
}
};
$ans210 = cases215.$app_fields($temp_branch252,[false]);
break;
case 9: if(cases215.$arity !== 1) {
if(cases215.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[101],1,cases215.$arity,L[73]);
} else {
R.ffi.throwCasesSingletonErrorC(L[101],true,L[73]);
}
}
$step205 = 14;
$al211 = L[102];
var $temp_branch266 = function($datum257) {
var $step267 = 0;
var $ans268 = D;
var $al269 = L[100];
try {
if(R.isActivationRecord($datum257)) {
$step267 = $datum257.step;
$al269 = $datum257.from;
$ans268 = $datum257.ans;
datum257 = $datum257.args[0];
} else {
var datum257 = $datum257;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step267) {
case 0: $step267 = 1;
$al269 = L[100];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al269,torepr6);
}
$ans268 = torepr6.app(datum257);
break;
case 1: var anf_arg260 = $ans268;
$step267 = 2;
$al269 = L[99];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al269,_plus3);
}
$ans268 = _plus3.app(("Cannot sanitize the datum "),anf_arg260);
break;
case 2: var anf_arg262 = $ans268;
$step267 = 3;
$al269 = L[98];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al269,_plus3);
}
$ans268 = _plus3.app(anf_arg262,(" at "));
break;
case 3: var anf_arg263 = $ans268;
$step267 = 4;
$al269 = L[97];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al269,_plus3);
}
$ans268 = _plus3.app(anf_arg263,loc227);
break;
case 4: var anf_arg264 = $ans268;
$step267 = 5;
$al269 = L[96];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al269,_plus3);
}
$ans268 = _plus3.app(anf_arg264,(" as a boolean"));
break;
case 5: var anf_arg265 = $ans268;
$step267 = 6;
$al269 = L[95];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al269,raise16);
}
$ans268 = raise16.app(anf_arg265);
break;
case 6: ++R.GAS;
return $ans268;
default: throw "No case numbered " + $step267 + " in $temp_branch266";
}
}
} catch($e270) {
if(R.isCont($e270) && ($step267 !== 6)) {
$e270.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al269,$temp_branch266,$step267,[datum257],[]);
}
if(R.isPyretException($e270)) {
$e270.pyretStack.push($al269);
}
throw $e270;
}
};
$ans210 = cases215.$app_fields($temp_branch266,[false]);
break;
case 10: if(cases215.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[106],false,L[73]);
}
$step205 = 11;
$al211 = L[105];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al211,_plus3);
}
$ans210 = _plus3.app(("Cannot sanitize the empty cell at "),loc227);
break;
case 11: var anf_arg271 = $ans210;
$step205 = 12;
$al211 = L[104];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al211,_plus3);
}
$ans210 = _plus3.app(anf_arg271,(" as a boolean"));
break;
case 12: var anf_arg273 = $ans210;
$step205 = 14;
$al211 = L[103];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al211,raise16);
}
$ans210 = raise16.app(anf_arg273);
break;
case 13: $step205 = 14;
$al211 = L[73];
$ans210 = R.throwNoCasesMatched(L[73],cases215);
break;
case 14: ++R.GAS;
return $ans210;
default: throw "No case numbered " + $step205 + " in $temp_lam206";
}
}
} catch($e275) {
if(R.isCont($e275) && ($step205 !== 14)) {
$e275.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al211,$temp_lam206,$step205,[x207,col208,row209],[anf_arg213,loc227,cases215]);
}
if(R.isPyretException($e275)) {
$e275.pyretStack.push($al211);
}
throw $e275;
}
};
var anf_assign276 = R.makeFunction($temp_lam206,"bool-sanitizer");
bool$sanitizer277.$var = anf_assign276;
var $temp_lam279 = function($x280,$col281,$row282) {
var $step278 = 0;
var $ans283 = D;
var $al284 = L[152];
try {
if(R.isActivationRecord($x280)) {
$step278 = $x280.step;
$al284 = $x280.from;
$ans283 = $x280.ans;
x280 = $x280.args[0];
col281 = $x280.args[1];
row282 = $x280.args[2];
anf_arg286 = $x280.vars[0];
loc294 = $x280.vars[1];
cases288 = $x280.vars[2];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[152],3,$t);
}
var x280 = $x280;
var col281 = $col281;
var row282 = $row282;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step278) {
case 0: $step278 = 1;
$al284 = L[151];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al284,_plus3);
}
$ans283 = _plus3.app(("column "),col281);
break;
case 1: var anf_arg285 = $ans283;
$step278 = 2;
$al284 = L[150];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al284,_plus3);
}
$ans283 = _plus3.app(anf_arg285,(", row "));
break;
case 2: var anf_arg286 = $ans283;
$step278 = 3;
$al284 = L[149];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al284,num$to$string1);
}
$ans283 = num$to$string1.app(row282);
break;
case 3: var anf_arg287 = $ans283;
$step278 = 4;
$al284 = L[148];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al284,_plus3);
}
$ans283 = _plus3.app(anf_arg286,anf_arg287);
break;
case 4: var loc294 = $ans283;
var cases288 = x280;
$step278 = 5;
$al284 = L[147];
R._checkAnn(L[147],CellContent130,cases288);
break;
case 5: var $cases_dispatch332 = {"c-str":6,
"c-num":7,
"c-bool":8,
"c-custom":9,
"c-empty":10};
$al284 = L[124];
$step278 = $cases_dispatch332[cases288.$name] || 13;
break;
case 6: if(cases288.$arity !== 1) {
if(cases288.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[123],1,cases288.$arity,L[124]);
} else {
R.ffi.throwCasesSingletonErrorC(L[123],true,L[124]);
}
}
$step278 = 14;
$al284 = L[125];
var $temp_branch300 = function($s289) {
var $step301 = 0;
var $ans302 = D;
var $al303 = L[119];
try {
if(R.isActivationRecord($s289)) {
$step301 = $s289.step;
$al303 = $s289.from;
$ans302 = $s289.ans;
s289 = $s289.args[0];
cases290 = $s289.vars[0];
} else {
var s289 = $s289;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step301) {
case 0: $step301 = 1;
$al303 = L[122];
if(!(R.isFunction(string$to$number2))) {
R.ffi.throwNonFunApp($al303,string$to$number2);
}
$ans302 = string$to$number2.app(s289);
break;
case 1: var cases290 = $ans302;
$step301 = 2;
$al303 = L[121];
R._checkAnn(L[121],R.getDotAnn(L[121],"O",O9,"Option"),cases290);
break;
case 2: var $cases_dispatch304 = {"none":3,
"some":8};
$al303 = L[119];
$step301 = $cases_dispatch304[cases290.$name] || 9;
break;
case 3: if(cases290.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[118],false,L[119]);
}
$step301 = 4;
$al303 = L[117];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al303,_plus3);
}
$ans302 = _plus3.app(("Cannot sanitize the string \""),s289);
break;
case 4: var anf_arg292 = $ans302;
$step301 = 5;
$al303 = L[116];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al303,_plus3);
}
$ans302 = _plus3.app(anf_arg292,("\" at "));
break;
case 5: var anf_arg293 = $ans302;
$step301 = 6;
$al303 = L[115];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al303,_plus3);
}
$ans302 = _plus3.app(anf_arg293,loc294);
break;
case 6: var anf_arg295 = $ans302;
$step301 = 7;
$al303 = L[114];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al303,_plus3);
}
$ans302 = _plus3.app(anf_arg295,(" as a number"));
break;
case 7: var anf_arg296 = $ans302;
$step301 = 10;
$al303 = L[113];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al303,raise16);
}
$ans302 = raise16.app(anf_arg296);
break;
case 8: if(cases290.$arity !== 1) {
if(cases290.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[120],1,cases290.$arity,L[119]);
} else {
R.ffi.throwCasesSingletonErrorC(L[120],true,L[119]);
}
}
var $fn274 = cases290.$constructor.$fieldNames;
var n297 = R.derefField(cases290.dict[$fn274[0]],cases290.$mut_fields_mask[0],false);
$step301 = 10;
$ans302 = n297;
break;
case 9: $step301 = 10;
$al303 = L[119];
$ans302 = R.throwNoCasesMatched(L[119],cases290);
break;
case 10: ++R.GAS;
return $ans302;
default: throw "No case numbered " + $step301 + " in $temp_branch300";
}
}
} catch($e305) {
if(R.isCont($e305) && ($step301 !== 10)) {
$e305.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al303,$temp_branch300,$step301,[s289],[cases290]);
}
if(R.isPyretException($e305)) {
$e305.pyretStack.push($al303);
}
throw $e305;
}
};
$ans283 = cases288.$app_fields($temp_branch300,[false]);
break;
case 7: if(cases288.$arity !== 1) {
if(cases288.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[126],1,cases288.$arity,L[124]);
} else {
R.ffi.throwCasesSingletonErrorC(L[126],true,L[124]);
}
}
var $fn274 = cases288.$constructor.$fieldNames;
var n306 = R.derefField(cases288.dict[$fn274[0]],cases288.$mut_fields_mask[0],false);
$step278 = 14;
$ans283 = n306;
break;
case 8: if(cases288.$arity !== 1) {
if(cases288.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[133],1,cases288.$arity,L[124]);
} else {
R.ffi.throwCasesSingletonErrorC(L[133],true,L[124]);
}
}
$step278 = 14;
$al284 = L[134];
var $temp_branch314 = function($b307) {
var $step315 = 0;
var $ans316 = D;
var $al317 = L[132];
try {
if(R.isActivationRecord($b307)) {
$step315 = $b307.step;
$al317 = $b307.from;
$ans316 = $b307.ans;
b307 = $b307.args[0];
} else {
var b307 = $b307;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step315) {
case 0: $step315 = 1;
$al317 = L[132];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al317,torepr6);
}
$ans316 = torepr6.app(b307);
break;
case 1: var anf_arg308 = $ans316;
$step315 = 2;
$al317 = L[131];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al317,_plus3);
}
$ans316 = _plus3.app(("Cannot sanitize the boolean "),anf_arg308);
break;
case 2: var anf_arg309 = $ans316;
$step315 = 3;
$al317 = L[130];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al317,_plus3);
}
$ans316 = _plus3.app(anf_arg309,(" at "));
break;
case 3: var anf_arg310 = $ans316;
$step315 = 4;
$al317 = L[129];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al317,_plus3);
}
$ans316 = _plus3.app(anf_arg310,loc294);
break;
case 4: var anf_arg311 = $ans316;
$step315 = 5;
$al317 = L[128];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al317,_plus3);
}
$ans316 = _plus3.app(anf_arg311,(" as a number in strict mode."));
break;
case 5: var anf_arg312 = $ans316;
$step315 = 6;
$al317 = L[127];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al317,raise16);
}
$ans316 = raise16.app(anf_arg312);
break;
case 6: ++R.GAS;
return $ans316;
default: throw "No case numbered " + $step315 + " in $temp_branch314";
}
}
} catch($e318) {
if(R.isCont($e318) && ($step315 !== 6)) {
$e318.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al317,$temp_branch314,$step315,[b307],[]);
}
if(R.isPyretException($e318)) {
$e318.pyretStack.push($al317);
}
throw $e318;
}
};
$ans283 = cases288.$app_fields($temp_branch314,[false]);
break;
case 9: if(cases288.$arity !== 1) {
if(cases288.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[141],1,cases288.$arity,L[124]);
} else {
R.ffi.throwCasesSingletonErrorC(L[141],true,L[124]);
}
}
$step278 = 14;
$al284 = L[142];
var $temp_branch325 = function($datum319) {
var $step326 = 0;
var $ans327 = D;
var $al328 = L[140];
try {
if(R.isActivationRecord($datum319)) {
$step326 = $datum319.step;
$al328 = $datum319.from;
$ans327 = $datum319.ans;
datum319 = $datum319.args[0];
} else {
var datum319 = $datum319;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step326) {
case 0: $step326 = 1;
$al328 = L[140];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al328,torepr6);
}
$ans327 = torepr6.app(datum319);
break;
case 1: var anf_arg320 = $ans327;
$step326 = 2;
$al328 = L[139];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al328,_plus3);
}
$ans327 = _plus3.app(("Cannot sanitize the datum "),anf_arg320);
break;
case 2: var anf_arg321 = $ans327;
$step326 = 3;
$al328 = L[138];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al328,_plus3);
}
$ans327 = _plus3.app(anf_arg321,(" at "));
break;
case 3: var anf_arg322 = $ans327;
$step326 = 4;
$al328 = L[137];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al328,_plus3);
}
$ans327 = _plus3.app(anf_arg322,loc294);
break;
case 4: var anf_arg323 = $ans327;
$step326 = 5;
$al328 = L[136];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al328,_plus3);
}
$ans327 = _plus3.app(anf_arg323,(" as a number"));
break;
case 5: var anf_arg324 = $ans327;
$step326 = 6;
$al328 = L[135];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al328,raise16);
}
$ans327 = raise16.app(anf_arg324);
break;
case 6: ++R.GAS;
return $ans327;
default: throw "No case numbered " + $step326 + " in $temp_branch325";
}
}
} catch($e329) {
if(R.isCont($e329) && ($step326 !== 6)) {
$e329.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al328,$temp_branch325,$step326,[datum319],[]);
}
if(R.isPyretException($e329)) {
$e329.pyretStack.push($al328);
}
throw $e329;
}
};
$ans283 = cases288.$app_fields($temp_branch325,[false]);
break;
case 10: if(cases288.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[146],false,L[124]);
}
$step278 = 11;
$al284 = L[145];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al284,_plus3);
}
$ans283 = _plus3.app(("Cannot sanitize the empty cell at "),loc294);
break;
case 11: var anf_arg330 = $ans283;
$step278 = 12;
$al284 = L[144];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al284,_plus3);
}
$ans283 = _plus3.app(anf_arg330,(" as a number"));
break;
case 12: var anf_arg331 = $ans283;
$step278 = 14;
$al284 = L[143];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al284,raise16);
}
$ans283 = raise16.app(anf_arg331);
break;
case 13: $step278 = 14;
$al284 = L[124];
$ans283 = R.throwNoCasesMatched(L[124],cases288);
break;
case 14: ++R.GAS;
return $ans283;
default: throw "No case numbered " + $step278 + " in $temp_lam279";
}
}
} catch($e333) {
if(R.isCont($e333) && ($step278 !== 14)) {
$e333.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al284,$temp_lam279,$step278,[x280,col281,row282],[anf_arg286,loc294,cases288]);
}
if(R.isPyretException($e333)) {
$e333.pyretStack.push($al284);
}
throw $e333;
}
};
var anf_assign334 = R.makeFunction($temp_lam279,"strict-num-sanitizer");
strict$num$sanitizer335.$var = anf_assign334;
var $temp_lam337 = function($x338,$col339,$row340) {
var $step336 = 0;
var $ans341 = D;
var $al342 = L[177];
try {
if(R.isActivationRecord($x338)) {
$step336 = $x338.step;
$al342 = $x338.from;
$ans341 = $x338.ans;
x338 = $x338.args[0];
col339 = $x338.args[1];
row340 = $x338.args[2];
anf_arg344 = $x338.vars[0];
loc360 = $x338.vars[1];
cases346 = $x338.vars[2];
cases348 = $x338.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[177],3,$t);
}
var x338 = $x338;
var col339 = $col339;
var row340 = $row340;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step336) {
case 0: $step336 = 1;
$al342 = L[176];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(("column "),col339);
break;
case 1: var anf_arg343 = $ans341;
$step336 = 2;
$al342 = L[175];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(anf_arg343,(", row "));
break;
case 2: var anf_arg344 = $ans341;
$step336 = 3;
$al342 = L[174];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al342,num$to$string1);
}
$ans341 = num$to$string1.app(row340);
break;
case 3: var anf_arg345 = $ans341;
$step336 = 4;
$al342 = L[173];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(anf_arg344,anf_arg345);
break;
case 4: var loc360 = $ans341;
var cases346 = x338;
$step336 = 5;
$al342 = L[172];
R._checkAnn(L[172],CellContent130,cases346);
break;
case 5: var $cases_dispatch363 = {"c-str":6};
$al342 = L[154];
$step336 = $cases_dispatch363[cases346.$name] || 7;
break;
case 6: if(cases346.$arity !== 1) {
if(cases346.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[153],1,cases346.$arity,L[154]);
} else {
R.ffi.throwCasesSingletonErrorC(L[153],true,L[154]);
}
}
var $fn274 = cases346.$constructor.$fieldNames;
var s347 = R.derefField(cases346.dict[$fn274[0]],cases346.$mut_fields_mask[0],false);
$step336 = 22;
$ans341 = s347;
break;
case 7: var cases348 = x338;
$step336 = 8;
$al342 = L[171];
R._checkAnn(L[171],CellContent130,cases348);
break;
case 8: var $cases_dispatch356 = {"c-num":9,
"c-bool":11,
"c-datum":13,
"c-empty":15};
$al342 = L[158];
$step336 = $cases_dispatch356[cases348.$name] || 16;
break;
case 9: if(cases348.$arity !== 1) {
if(cases348.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[157],1,cases348.$arity,L[158]);
} else {
R.ffi.throwCasesSingletonErrorC(L[157],true,L[158]);
}
}
var $fn274 = cases348.$constructor.$fieldNames;
var n349 = R.derefField(cases348.dict[$fn274[0]],cases348.$mut_fields_mask[0],false);
$step336 = 10;
$al342 = L[156];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al342,num$to$string1);
}
$ans341 = num$to$string1.app(n349);
break;
case 10: var anf_arg351 = $ans341;
$step336 = 17;
$al342 = L[155];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(("the number "),anf_arg351);
break;
case 11: if(cases348.$arity !== 1) {
if(cases348.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[161],1,cases348.$arity,L[158]);
} else {
R.ffi.throwCasesSingletonErrorC(L[161],true,L[158]);
}
}
var $fn274 = cases348.$constructor.$fieldNames;
var b352 = R.derefField(cases348.dict[$fn274[0]],cases348.$mut_fields_mask[0],false);
$step336 = 12;
$al342 = L[160];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al342,torepr6);
}
$ans341 = torepr6.app(b352);
break;
case 12: var anf_arg353 = $ans341;
$step336 = 17;
$al342 = L[159];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(("the boolean "),anf_arg353);
break;
case 13: if(cases348.$arity !== 1) {
if(cases348.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[164],1,cases348.$arity,L[158]);
} else {
R.ffi.throwCasesSingletonErrorC(L[164],true,L[158]);
}
}
var $fn274 = cases348.$constructor.$fieldNames;
var datum354 = R.derefField(cases348.dict[$fn274[0]],cases348.$mut_fields_mask[0],false);
$step336 = 14;
$al342 = L[163];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al342,torepr6);
}
$ans341 = torepr6.app(datum354);
break;
case 14: var anf_arg355 = $ans341;
$step336 = 17;
$al342 = L[162];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(("the datum "),anf_arg355);
break;
case 15: if(cases348.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[165],false,L[158]);
}
$step336 = 17;
$ans341 = ("the empty cell");
break;
case 16: $step336 = 17;
$al342 = L[158];
$ans341 = R.throwNoCasesMatched(L[158],cases348);
break;
case 17: var as$str357 = $ans341;
$step336 = 18;
$al342 = L[170];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(("Cannot sanitize "),as$str357);
break;
case 18: var anf_arg358 = $ans341;
$step336 = 19;
$al342 = L[169];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(anf_arg358,(" at "));
break;
case 19: var anf_arg359 = $ans341;
$step336 = 20;
$al342 = L[168];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(anf_arg359,loc360);
break;
case 20: var anf_arg361 = $ans341;
$step336 = 21;
$al342 = L[167];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al342,_plus3);
}
$ans341 = _plus3.app(anf_arg361,(" as a string"));
break;
case 21: var anf_arg362 = $ans341;
$step336 = 22;
$al342 = L[166];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al342,raise16);
}
$ans341 = raise16.app(anf_arg362);
break;
case 22: ++R.GAS;
return $ans341;
default: throw "No case numbered " + $step336 + " in $temp_lam337";
}
}
} catch($e364) {
if(R.isCont($e364) && ($step336 !== 22)) {
$e364.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al342,$temp_lam337,$step336,[x338,col339,row340],[anf_arg344,loc360,cases346,cases348]);
}
if(R.isPyretException($e364)) {
$e364.pyretStack.push($al342);
}
throw $e364;
}
};
var anf_assign365 = R.makeFunction($temp_lam337,"strings-only");
strings$only366.$var = anf_assign365;
var $temp_lam368 = function($x369,$col370,$row371) {
var $step367 = 0;
var $ans372 = D;
var $al373 = L[202];
try {
if(R.isActivationRecord($x369)) {
$step367 = $x369.step;
$al373 = $x369.from;
$ans372 = $x369.ans;
x369 = $x369.args[0];
col370 = $x369.args[1];
row371 = $x369.args[2];
anf_arg375 = $x369.vars[0];
loc394 = $x369.vars[1];
cases378 = $x369.vars[2];
cases380 = $x369.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[202],3,$t);
}
var x369 = $x369;
var col370 = $col370;
var row371 = $row371;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step367) {
case 0: $step367 = 1;
$al373 = L[201];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(("column "),col370);
break;
case 1: var anf_arg374 = $ans372;
$step367 = 2;
$al373 = L[200];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(anf_arg374,(", row "));
break;
case 2: var anf_arg375 = $ans372;
$step367 = 3;
$al373 = L[199];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al373,num$to$string1);
}
$ans372 = num$to$string1.app(row371);
break;
case 3: var anf_arg377 = $ans372;
$step367 = 4;
$al373 = L[198];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(anf_arg375,anf_arg377);
break;
case 4: var loc394 = $ans372;
var cases378 = x369;
$step367 = 5;
$al373 = L[197];
R._checkAnn(L[197],CellContent130,cases378);
break;
case 5: var $cases_dispatch397 = {"c-num":6};
$al373 = L[179];
$step367 = $cases_dispatch397[cases378.$name] || 7;
break;
case 6: if(cases378.$arity !== 1) {
if(cases378.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[178],1,cases378.$arity,L[179]);
} else {
R.ffi.throwCasesSingletonErrorC(L[178],true,L[179]);
}
}
var $fn274 = cases378.$constructor.$fieldNames;
var n379 = R.derefField(cases378.dict[$fn274[0]],cases378.$mut_fields_mask[0],false);
$step367 = 22;
$ans372 = n379;
break;
case 7: var cases380 = x369;
$step367 = 8;
$al373 = L[196];
R._checkAnn(L[196],CellContent130,cases380);
break;
case 8: var $cases_dispatch390 = {"c-str":9,
"c-bool":11,
"c-datum":13,
"c-empty":15};
$al373 = L[183];
$step367 = $cases_dispatch390[cases380.$name] || 16;
break;
case 9: if(cases380.$arity !== 1) {
if(cases380.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[182],1,cases380.$arity,L[183]);
} else {
R.ffi.throwCasesSingletonErrorC(L[182],true,L[183]);
}
}
var $fn274 = cases380.$constructor.$fieldNames;
var s381 = R.derefField(cases380.dict[$fn274[0]],cases380.$mut_fields_mask[0],false);
$step367 = 10;
$al373 = L[181];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al373,torepr6);
}
$ans372 = torepr6.app(s381);
break;
case 10: var anf_arg385 = $ans372;
$step367 = 17;
$al373 = L[180];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(("the string "),anf_arg385);
break;
case 11: if(cases380.$arity !== 1) {
if(cases380.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[186],1,cases380.$arity,L[183]);
} else {
R.ffi.throwCasesSingletonErrorC(L[186],true,L[183]);
}
}
var $fn274 = cases380.$constructor.$fieldNames;
var b386 = R.derefField(cases380.dict[$fn274[0]],cases380.$mut_fields_mask[0],false);
$step367 = 12;
$al373 = L[185];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al373,torepr6);
}
$ans372 = torepr6.app(b386);
break;
case 12: var anf_arg387 = $ans372;
$step367 = 17;
$al373 = L[184];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(("the boolean "),anf_arg387);
break;
case 13: if(cases380.$arity !== 1) {
if(cases380.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[189],1,cases380.$arity,L[183]);
} else {
R.ffi.throwCasesSingletonErrorC(L[189],true,L[183]);
}
}
var $fn274 = cases380.$constructor.$fieldNames;
var datum388 = R.derefField(cases380.dict[$fn274[0]],cases380.$mut_fields_mask[0],false);
$step367 = 14;
$al373 = L[188];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al373,torepr6);
}
$ans372 = torepr6.app(datum388);
break;
case 14: var anf_arg389 = $ans372;
$step367 = 17;
$al373 = L[187];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(("the datum "),anf_arg389);
break;
case 15: if(cases380.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[190],false,L[183]);
}
$step367 = 17;
$ans372 = ("an empty cell");
break;
case 16: $step367 = 17;
$al373 = L[183];
$ans372 = R.throwNoCasesMatched(L[183],cases380);
break;
case 17: var as$str391 = $ans372;
$step367 = 18;
$al373 = L[195];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(("Cannot sanitize "),as$str391);
break;
case 18: var anf_arg392 = $ans372;
$step367 = 19;
$al373 = L[194];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(anf_arg392,(" at "));
break;
case 19: var anf_arg393 = $ans372;
$step367 = 20;
$al373 = L[193];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(anf_arg393,loc394);
break;
case 20: var anf_arg395 = $ans372;
$step367 = 21;
$al373 = L[192];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al373,_plus3);
}
$ans372 = _plus3.app(anf_arg395,(" as a number"));
break;
case 21: var anf_arg396 = $ans372;
$step367 = 22;
$al373 = L[191];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al373,raise16);
}
$ans372 = raise16.app(anf_arg396);
break;
case 22: ++R.GAS;
return $ans372;
default: throw "No case numbered " + $step367 + " in $temp_lam368";
}
}
} catch($e398) {
if(R.isCont($e398) && ($step367 !== 22)) {
$e398.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al373,$temp_lam368,$step367,[x369,col370,row371],[anf_arg375,loc394,cases378,cases380]);
}
if(R.isPyretException($e398)) {
$e398.pyretStack.push($al373);
}
throw $e398;
}
};
var anf_assign399 = R.makeFunction($temp_lam368,"numbers-only");
numbers$only400.$var = anf_assign399;
var $temp_lam402 = function($x403,$col404,$row405) {
var $step401 = 0;
var $ans406 = D;
var $al407 = L[227];
try {
if(R.isActivationRecord($x403)) {
$step401 = $x403.step;
$al407 = $x403.from;
$ans406 = $x403.ans;
x403 = $x403.args[0];
col404 = $x403.args[1];
row405 = $x403.args[2];
anf_arg409 = $x403.vars[0];
loc424 = $x403.vars[1];
cases411 = $x403.vars[2];
cases413 = $x403.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[227],3,$t);
}
var x403 = $x403;
var col404 = $col404;
var row405 = $row405;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step401) {
case 0: $step401 = 1;
$al407 = L[226];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(("column "),col404);
break;
case 1: var anf_arg408 = $ans406;
$step401 = 2;
$al407 = L[225];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(anf_arg408,(", row "));
break;
case 2: var anf_arg409 = $ans406;
$step401 = 3;
$al407 = L[224];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al407,num$to$string1);
}
$ans406 = num$to$string1.app(row405);
break;
case 3: var anf_arg410 = $ans406;
$step401 = 4;
$al407 = L[223];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(anf_arg409,anf_arg410);
break;
case 4: var loc424 = $ans406;
var cases411 = x403;
$step401 = 5;
$al407 = L[222];
R._checkAnn(L[222],CellContent130,cases411);
break;
case 5: var $cases_dispatch427 = {"c-bool":6};
$al407 = L[204];
$step401 = $cases_dispatch427[cases411.$name] || 7;
break;
case 6: if(cases411.$arity !== 1) {
if(cases411.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[203],1,cases411.$arity,L[204]);
} else {
R.ffi.throwCasesSingletonErrorC(L[203],true,L[204]);
}
}
var $fn274 = cases411.$constructor.$fieldNames;
var b412 = R.derefField(cases411.dict[$fn274[0]],cases411.$mut_fields_mask[0],false);
$step401 = 22;
$ans406 = b412;
break;
case 7: var cases413 = x403;
$step401 = 8;
$al407 = L[221];
R._checkAnn(L[221],CellContent130,cases413);
break;
case 8: var $cases_dispatch420 = {"c-num":9,
"c-str":11,
"c-datum":13,
"c-empty":15};
$al407 = L[208];
$step401 = $cases_dispatch420[cases413.$name] || 16;
break;
case 9: if(cases413.$arity !== 1) {
if(cases413.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[207],1,cases413.$arity,L[208]);
} else {
R.ffi.throwCasesSingletonErrorC(L[207],true,L[208]);
}
}
var $fn274 = cases413.$constructor.$fieldNames;
var n414 = R.derefField(cases413.dict[$fn274[0]],cases413.$mut_fields_mask[0],false);
$step401 = 10;
$al407 = L[206];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al407,num$to$string1);
}
$ans406 = num$to$string1.app(n414);
break;
case 10: var anf_arg415 = $ans406;
$step401 = 17;
$al407 = L[205];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(("the number "),anf_arg415);
break;
case 11: if(cases413.$arity !== 1) {
if(cases413.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[211],1,cases413.$arity,L[208]);
} else {
R.ffi.throwCasesSingletonErrorC(L[211],true,L[208]);
}
}
var $fn274 = cases413.$constructor.$fieldNames;
var s416 = R.derefField(cases413.dict[$fn274[0]],cases413.$mut_fields_mask[0],false);
$step401 = 12;
$al407 = L[210];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al407,torepr6);
}
$ans406 = torepr6.app(s416);
break;
case 12: var anf_arg417 = $ans406;
$step401 = 17;
$al407 = L[209];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(("the string "),anf_arg417);
break;
case 13: if(cases413.$arity !== 1) {
if(cases413.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[214],1,cases413.$arity,L[208]);
} else {
R.ffi.throwCasesSingletonErrorC(L[214],true,L[208]);
}
}
var $fn274 = cases413.$constructor.$fieldNames;
var datum418 = R.derefField(cases413.dict[$fn274[0]],cases413.$mut_fields_mask[0],false);
$step401 = 14;
$al407 = L[213];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al407,torepr6);
}
$ans406 = torepr6.app(datum418);
break;
case 14: var anf_arg419 = $ans406;
$step401 = 17;
$al407 = L[212];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(("the datum "),anf_arg419);
break;
case 15: if(cases413.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[215],false,L[208]);
}
$step401 = 17;
$ans406 = ("an empty cell");
break;
case 16: $step401 = 17;
$al407 = L[208];
$ans406 = R.throwNoCasesMatched(L[208],cases413);
break;
case 17: var as$str421 = $ans406;
$step401 = 18;
$al407 = L[220];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(("Cannot sanitize "),as$str421);
break;
case 18: var anf_arg422 = $ans406;
$step401 = 19;
$al407 = L[219];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(anf_arg422,(" at "));
break;
case 19: var anf_arg423 = $ans406;
$step401 = 20;
$al407 = L[218];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(anf_arg423,loc424);
break;
case 20: var anf_arg425 = $ans406;
$step401 = 21;
$al407 = L[217];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al407,_plus3);
}
$ans406 = _plus3.app(anf_arg425,(" as a boolean"));
break;
case 21: var anf_arg426 = $ans406;
$step401 = 22;
$al407 = L[216];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al407,raise16);
}
$ans406 = raise16.app(anf_arg426);
break;
case 22: ++R.GAS;
return $ans406;
default: throw "No case numbered " + $step401 + " in $temp_lam402";
}
}
} catch($e428) {
if(R.isCont($e428) && ($step401 !== 22)) {
$e428.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al407,$temp_lam402,$step401,[x403,col404,row405],[anf_arg409,loc424,cases411,cases413]);
}
if(R.isPyretException($e428)) {
$e428.pyretStack.push($al407);
}
throw $e428;
}
};
var anf_assign429 = R.makeFunction($temp_lam402,"booleans-only");
booleans$only430.$var = anf_assign429;
var $temp_lam432 = function($x433,$col434,$row435) {
var $step431 = 0;
var $ans436 = D;
var $al437 = L[255];
try {
if(R.isActivationRecord($x433)) {
$step431 = $x433.step;
$al437 = $x433.from;
$ans436 = $x433.ans;
x433 = $x433.args[0];
col434 = $x433.args[1];
row435 = $x433.args[2];
anf_arg439 = $x433.vars[0];
loc455 = $x433.vars[1];
cases441 = $x433.vars[2];
cases442 = $x433.vars[3];
} else {
var $l = arguments.length;
if($l !== 3) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[255],3,$t);
}
var x433 = $x433;
var col434 = $col434;
var row435 = $row435;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step431) {
case 0: $step431 = 1;
$al437 = L[254];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(("column "),col434);
break;
case 1: var anf_arg438 = $ans436;
$step431 = 2;
$al437 = L[253];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(anf_arg438,(", row "));
break;
case 2: var anf_arg439 = $ans436;
$step431 = 3;
$al437 = L[252];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al437,num$to$string1);
}
$ans436 = num$to$string1.app(row435);
break;
case 3: var anf_arg440 = $ans436;
$step431 = 4;
$al437 = L[251];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(anf_arg439,anf_arg440);
break;
case 4: var loc455 = $ans436;
var cases441 = x433;
$step431 = 5;
$al437 = L[250];
R._checkAnn(L[250],CellContent130,cases441);
break;
case 5: var $cases_dispatch458 = {"c-empty":6};
$al437 = L[230];
$step431 = $cases_dispatch458[cases441.$name] || 7;
break;
case 6: if(cases441.$arity !== -1) {
R.ffi.throwCasesSingletonErrorC(L[229],false,L[230]);
}
$step431 = 23;
$al437 = L[228];
$ans436 = G(O6,"none",L[228]);
break;
case 7: var cases442 = x433;
$step431 = 8;
$al437 = L[249];
R._checkAnn(L[249],CellContent130,cases442);
break;
case 8: var $cases_dispatch451 = {"c-num":9,
"c-str":11,
"c-bool":13,
"c-datum":15};
$al437 = L[234];
$step431 = $cases_dispatch451[cases442.$name] || 17;
break;
case 9: if(cases442.$arity !== 1) {
if(cases442.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[233],1,cases442.$arity,L[234]);
} else {
R.ffi.throwCasesSingletonErrorC(L[233],true,L[234]);
}
}
var $fn274 = cases442.$constructor.$fieldNames;
var n443 = R.derefField(cases442.dict[$fn274[0]],cases442.$mut_fields_mask[0],false);
$step431 = 10;
$al437 = L[232];
if(!(R.isFunction(num$to$string1))) {
R.ffi.throwNonFunApp($al437,num$to$string1);
}
$ans436 = num$to$string1.app(n443);
break;
case 10: var anf_arg444 = $ans436;
$step431 = 18;
$al437 = L[231];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(("number "),anf_arg444);
break;
case 11: if(cases442.$arity !== 1) {
if(cases442.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[237],1,cases442.$arity,L[234]);
} else {
R.ffi.throwCasesSingletonErrorC(L[237],true,L[234]);
}
}
var $fn274 = cases442.$constructor.$fieldNames;
var s445 = R.derefField(cases442.dict[$fn274[0]],cases442.$mut_fields_mask[0],false);
$step431 = 12;
$al437 = L[236];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al437,torepr6);
}
$ans436 = torepr6.app(s445);
break;
case 12: var anf_arg446 = $ans436;
$step431 = 18;
$al437 = L[235];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(("string "),anf_arg446);
break;
case 13: if(cases442.$arity !== 1) {
if(cases442.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[240],1,cases442.$arity,L[234]);
} else {
R.ffi.throwCasesSingletonErrorC(L[240],true,L[234]);
}
}
var $fn274 = cases442.$constructor.$fieldNames;
var b447 = R.derefField(cases442.dict[$fn274[0]],cases442.$mut_fields_mask[0],false);
$step431 = 14;
$al437 = L[239];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al437,torepr6);
}
$ans436 = torepr6.app(b447);
break;
case 14: var anf_arg448 = $ans436;
$step431 = 18;
$al437 = L[238];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(("boolean "),anf_arg448);
break;
case 15: if(cases442.$arity !== 1) {
if(cases442.$arity >= 0) {
R.ffi.throwCasesArityErrorC(L[243],1,cases442.$arity,L[234]);
} else {
R.ffi.throwCasesSingletonErrorC(L[243],true,L[234]);
}
}
var $fn274 = cases442.$constructor.$fieldNames;
var datum449 = R.derefField(cases442.dict[$fn274[0]],cases442.$mut_fields_mask[0],false);
$step431 = 16;
$al437 = L[242];
if(!(R.isFunction(torepr6))) {
R.ffi.throwNonFunApp($al437,torepr6);
}
$ans436 = torepr6.app(datum449);
break;
case 16: var anf_arg450 = $ans436;
$step431 = 18;
$al437 = L[241];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(("datum "),anf_arg450);
break;
case 17: $step431 = 18;
$al437 = L[234];
$ans436 = R.throwNoCasesMatched(L[234],cases442);
break;
case 18: var as$str452 = $ans436;
$step431 = 19;
$al437 = L[248];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(("Cannot sanitize the "),as$str452);
break;
case 19: var anf_arg453 = $ans436;
$step431 = 20;
$al437 = L[247];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(anf_arg453,(" at "));
break;
case 20: var anf_arg454 = $ans436;
$step431 = 21;
$al437 = L[246];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(anf_arg454,loc455);
break;
case 21: var anf_arg456 = $ans436;
$step431 = 22;
$al437 = L[245];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al437,_plus3);
}
$ans436 = _plus3.app(anf_arg456,(" as an empty cell"));
break;
case 22: var anf_arg457 = $ans436;
$step431 = 23;
$al437 = L[244];
if(!(R.isFunction(raise16))) {
R.ffi.throwNonFunApp($al437,raise16);
}
$ans436 = raise16.app(anf_arg457);
break;
case 23: ++R.GAS;
return $ans436;
default: throw "No case numbered " + $step431 + " in $temp_lam432";
}
}
} catch($e459) {
if(R.isCont($e459) && ($step431 !== 23)) {
$e459.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al437,$temp_lam432,$step431,[x433,col434,row435],[anf_arg439,loc455,cases441,cases442]);
}
if(R.isPyretException($e459)) {
$e459.pyretStack.push($al437);
}
throw $e459;
}
};
var anf_assign460 = R.makeFunction($temp_lam432,"empty-only");
empty$only461.$var = anf_assign460;
var defined_value504 = empty$only461.$var;
var defined_value505 = booleans$only430.$var;
var defined_value506 = numbers$only400.$var;
var defined_value507 = strings$only366.$var;
var defined_value508 = strict$num$sanitizer335.$var;
var defined_value509 = bool$sanitizer277.$var;
var defined_value510 = num$sanitizer204.$var;
var defined_value511 = string$sanitizer150.$var;
var defined_value512 = option$sanitizer134.$var;
var defined_value513 = sanitize$col113.$var;
var defined_value514 = is$sanitize$col110.$var;
var defined_value515 = is$DataSourceLoaderOption107.$var;
var defined_value516 = c$custom92.$var;
var defined_value517 = is$c$custom89.$var;
var defined_value518 = c$bool86.$var;
var defined_value519 = is$c$bool83.$var;
var defined_value520 = c$num80.$var;
var defined_value521 = is$c$num77.$var;
var defined_value522 = c$str74.$var;
var defined_value523 = is$c$str71.$var;
var defined_value524 = c$empty68.$var;
var defined_value525 = is$c$empty65.$var;
var defined_value526 = is$CellContent62.$var;
$step13 = 1;
$al17 = L[256];
$field465 = R.getColonFieldLoc(builtins1,"trace-value",L[256]);
if(R.isMethod($field465)) {
$ans16 = $field465.full_meth(builtins1,L[256],nothing2);
} else {
if(!(R.isFunction($field465))) {
R.ffi.throwNonFunApp(L[256],$field465);
}
$ans16 = $field465.app(L[256],nothing2);
}
break;
case 1: var answer502 = $ans16;
var anf_obj466 = is$CellContent62.$var;
var anf_obj467 = c$empty68.$var;
var anf_obj468 = is$c$empty65.$var;
var anf_obj469 = c$str74.$var;
var anf_obj470 = is$c$str71.$var;
var anf_obj471 = c$num80.$var;
var anf_obj472 = is$c$num77.$var;
var anf_obj473 = c$bool86.$var;
var anf_obj474 = is$c$bool83.$var;
var anf_obj475 = c$custom92.$var;
var anf_obj476 = is$c$custom89.$var;
var anf_obj477 = is$DataSourceLoaderOption107.$var;
var anf_obj478 = sanitize$col113.$var;
var anf_obj479 = is$sanitize$col110.$var;
var anf_obj480 = option$sanitizer134.$var;
var anf_obj481 = string$sanitizer150.$var;
var anf_obj482 = num$sanitizer204.$var;
var anf_obj483 = bool$sanitizer277.$var;
var anf_obj484 = strict$num$sanitizer335.$var;
var anf_obj485 = strings$only366.$var;
var anf_obj486 = numbers$only400.$var;
var anf_obj487 = booleans$only430.$var;
var anf_obj488 = empty$only461.$var;
var provides501 = R.makeObject({"is-CellContent":anf_obj466,
"c-empty":anf_obj467,
"is-c-empty":anf_obj468,
"c-str":anf_obj469,
"is-c-str":anf_obj470,
"c-num":anf_obj471,
"is-c-num":anf_obj472,
"c-bool":anf_obj473,
"is-c-bool":anf_obj474,
"c-custom":anf_obj475,
"is-c-custom":anf_obj476,
"is-DataSourceLoaderOption":anf_obj477,
"sanitize-col":anf_obj478,
"is-sanitize-col":anf_obj479,
"option-sanitizer":anf_obj480,
"string-sanitizer":anf_obj481,
"num-sanitizer":anf_obj482,
"bool-sanitizer":anf_obj483,
"strict-num-sanitizer":anf_obj484,
"strings-only":anf_obj485,
"numbers-only":anf_obj486,
"booleans-only":anf_obj487,
"empty-only":anf_obj488});
$step13 = 2;
$al17 = L[13];
$field495 = R.getColonFieldLoc(builtins1,"current-checker",L[13]);
if(R.isMethod($field495)) {
$ans16 = $field495.full_meth(builtins1);
} else {
if(!(R.isFunction($field495))) {
R.ffi.throwNonFunApp(L[13],$field495);
}
$ans16 = $field495.app();
}
break;
case 2: var anf_method_obj496 = $ans16;
$step13 = 3;
$al17 = L[13];
$field497 = R.getColonFieldLoc(anf_method_obj496,"results",L[13]);
if(R.isMethod($field497)) {
$ans16 = $field497.full_meth(anf_method_obj496);
} else {
if(!(R.isFunction($field497))) {
R.ffi.throwNonFunApp(L[13],$field497);
}
$ans16 = $field497.app();
}
break;
case 3: var checks503 = $ans16;
$step13 = 4;
$ans16 = R.makeObject({"answer":answer502,
"namespace":NAMESPACE,
"defined-values":{"empty-only":defined_value504,
"booleans-only":defined_value505,
"numbers-only":defined_value506,
"strings-only":defined_value507,
"strict-num-sanitizer":defined_value508,
"bool-sanitizer":defined_value509,
"num-sanitizer":defined_value510,
"string-sanitizer":defined_value511,
"option-sanitizer":defined_value512,
"sanitize-col":defined_value513,
"is-sanitize-col":defined_value514,
"is-DataSourceLoaderOption":defined_value515,
"c-custom":defined_value516,
"is-c-custom":defined_value517,
"c-bool":defined_value518,
"is-c-bool":defined_value519,
"c-num":defined_value520,
"is-c-num":defined_value521,
"c-str":defined_value522,
"is-c-str":defined_value523,
"c-empty":defined_value524,
"is-c-empty":defined_value525,
"is-CellContent":defined_value526,
"O":O6},
"defined-types":{"DataSourceLoader":DataSourceLoader500,
"CellContent":CellContent130,
"O":O9,
"LoadedTable":LoadedTable498,
"DataSourceLoaderOption":DataSourceLoaderOption499,
"Sanitizer":Sanitizer100},
"provide-plus-types":R.makeObject({"values":provides501,
"types":{"CellContent":CellContent130,
"Sanitizer":Sanitizer100,
"LoadedTable":LoadedTable498,
"DataSourceLoaderOption":DataSourceLoaderOption499,
"DataSourceLoader":DataSourceLoader500}}),
"checks":checks503});
break;
case 4: ++R.GAS;
return $ans16;
default: throw "No case numbered " + $step13 + " in $toplevel14";
}
}
} catch($e527) {
if(R.isCont($e527) && ($step13 !== 4)) {
$e527.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al17,$toplevel14,$step13,[],[CellContent130,DataSourceLoaderOption499,is$CellContent62,is$c$empty65,c$empty68,is$c$str71,c$str74,is$c$num77,c$num80,is$c$bool83,c$bool86,is$c$custom89,c$custom92,Sanitizer100,LoadedTable498,is$DataSourceLoaderOption107,is$sanitize$col110,sanitize$col113,DataSourceLoader500,option$sanitizer134,string$sanitizer150,num$sanitizer204,bool$sanitizer277,strict$num$sanitizer335,strings$only366,numbers$only400,booleans$only430,empty$only461,defined_value504,defined_value505,defined_value506,defined_value507,defined_value508,defined_value509,defined_value510,defined_value511,defined_value512,defined_value513,defined_value514,defined_value515,defined_value516,defined_value517,defined_value518,defined_value519,defined_value520,defined_value521,defined_value522,defined_value523,defined_value524,defined_value525,defined_value526,answer502,provides501]);
}
if(R.isPyretException($e527)) {
$e527.pyretStack.push($al17);
}
throw $e527;
}
};
return R.safeCall($toplevel14,function(moduleVal) {
R.modules["$builtin://data$source10"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://s-exp-structs":({"requires":[{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"}],
"provides":{"values":{"is-S-Exp":"tany",
"is-s-list":"tany",
"is-s-num":"tany",
"is-s-str":"tany",
"is-s-sym":"tany",
"s-list":"tany",
"s-num":"tany",
"s-str":"tany",
"s-sym":"tany"},
"datatypes":{"atom#S-Exp#1":["data","S-Exp",[],[["s-list",
[["exps",
["tyapp",{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"List"},[{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://s-exp-structs"},
"name":"S-Exp"}]]]]],["s-num",
[["n",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"Number"}]]],["s-str",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]],["s-sym",
[["s",
{"tag":"name",
"origin":{"import-type":"uri",
"uri":"builtin://global"},
"name":"String"}]]]],{}]},
"aliases":{"List":"tany",
"S-Exp":"tany"}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$$import12,$lists43) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "builtin://s-exp-structs";
var D = R.undefined;
var L = [[M,11,2,119,11,31,148],
[M,11,19,136,11,30,147],
[M,11,4,121,11,31,148],
[M,12,2,151,12,22,171],
[M,12,15,164,12,21,170],
[M,12,4,153,12,22,171],
[M,13,2,174,13,22,194],
[M,13,15,187,13,21,193],
[M,13,4,176,13,22,194],
[M,14,2,197,14,22,217],
[M,14,15,210,14,21,216],
[M,14,4,199,14,22,217],
[M,10,0,105,15,3,221],
["dummy location"],
[M,8,12,93,8,22,103],
[M,3,0,13,15,3,221]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var nothing2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"nothing");
var $type$Number1 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["Number"];
var $type$String14 = R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"types")["String"];
var lists4 = R.getField($lists43,"values");
var lists10 = R.getField($lists43,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$import12);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$lists43);
var $toplevel15 = function($$resumer1336) {
var $step14 = 0;
var $ans17 = D;
var $al18 = L[15];
try {
if(R.isActivationRecord($$resumer1336)) {
$step14 = $$resumer1336.step;
$al18 = $$resumer1336.from;
$ans17 = $$resumer1336.ans;
$resumer1336 = $$resumer1336.args[0];
S$Exp97 = $$resumer1336.vars[0];
List27 = $$resumer1336.vars[1];
is$S$Exp58 = $$resumer1336.vars[2];
is$s$list61 = $$resumer1336.vars[3];
s$list64 = $$resumer1336.vars[4];
is$s$num67 = $$resumer1336.vars[5];
s$num72 = $$resumer1336.vars[6];
is$s$str75 = $$resumer1336.vars[7];
s$str78 = $$resumer1336.vars[8];
is$s$sym81 = $$resumer1336.vars[9];
s$sym84 = $$resumer1336.vars[10];
defined_value101 = $$resumer1336.vars[11];
defined_value102 = $$resumer1336.vars[12];
defined_value103 = $$resumer1336.vars[13];
defined_value104 = $$resumer1336.vars[14];
defined_value105 = $$resumer1336.vars[15];
defined_value106 = $$resumer1336.vars[16];
defined_value107 = $$resumer1336.vars[17];
defined_value108 = $$resumer1336.vars[18];
defined_value109 = $$resumer1336.vars[19];
answer99 = $$resumer1336.vars[20];
provides98 = $$resumer1336.vars[21];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step14) {
case 0: var S$Exp19 = R.namedBrander("S-Exp",L[12]);
var S$Exp97 = R.makeBranderAnn(S$Exp19,"S-Exp");
var List27 = R.getDotAnn(L[14],"lists",lists10,"List");
var S$Exp55 = {"$var":D};
var is$S$Exp58 = {"$var":D};
var is$s$list61 = {"$var":D};
var s$list64 = {"$var":D};
var is$s$num67 = {"$var":D};
var s$num72 = {"$var":D};
var is$s$str75 = {"$var":D};
var s$str78 = {"$var":D};
var is$s$sym81 = {"$var":D};
var s$sym84 = {"$var":D};
var $s$list_getfields25 = function(f) {
return f(this.dict["exps"]);
};
var $s$list_getfieldsref23 = function(f,refmask) {
return f(R.derefField(this.dict["exps"],false,refmask[0]));
};
var $s$list_mutablemask24 = [false];
var $s$list$base20 = {"$fieldNames":["exps"],
"_match":R.makeMatch("s-list",1)};
var $s$list$brander21 = R.namedBrander("s-list",L[0]);
var $s$list$brands22 = {};
$s$list$brands22[S$Exp19._brand] = true;
$s$list$brands22[$s$list$brander21._brand] = true;
var s$list26 = R.makeVariantConstructor(L[2],function() {
return [List27];
},["exps28"],[L[1]],[false],["exps28"],$s$list_mutablemask24,$s$list$base20,$s$list$brands22,"s-list",$s$list_getfieldsref23,$s$list_getfields25,$s$list$base20);
var $s$num_getfields34 = function(f) {
return f(this.dict["n"]);
};
var $s$num_getfieldsref32 = function(f,refmask) {
return f(R.derefField(this.dict["n"],false,refmask[0]));
};
var $s$num_mutablemask33 = [false];
var $s$num$base29 = {"$fieldNames":["n"],
"_match":R.makeMatch("s-num",1)};
var $s$num$brander30 = R.namedBrander("s-num",L[3]);
var $s$num$brands31 = {};
$s$num$brands31[S$Exp19._brand] = true;
$s$num$brands31[$s$num$brander30._brand] = true;
var s$num35 = R.makeVariantConstructor(L[5],function() {
return [$type$Number1];
},["n36"],[L[4]],[false],["n36"],$s$num_mutablemask33,$s$num$base29,$s$num$brands31,"s-num",$s$num_getfieldsref32,$s$num_getfields34,$s$num$base29);
var $s$str_getfields42 = function(f) {
return f(this.dict["s"]);
};
var $s$str_getfieldsref40 = function(f,refmask) {
return f(R.derefField(this.dict["s"],false,refmask[0]));
};
var $s$str_mutablemask41 = [false];
var $s$str$base37 = {"$fieldNames":["s"],
"_match":R.makeMatch("s-str",1)};
var $s$str$brander38 = R.namedBrander("s-str",L[6]);
var $s$str$brands39 = {};
$s$str$brands39[S$Exp19._brand] = true;
$s$str$brands39[$s$str$brander38._brand] = true;
var s$str43 = R.makeVariantConstructor(L[8],function() {
return [$type$String14];
},["s44"],[L[7]],[false],["s44"],$s$str_mutablemask41,$s$str$base37,$s$str$brands39,"s-str",$s$str_getfieldsref40,$s$str_getfields42,$s$str$base37);
var $s$sym_getfields50 = function(f) {
return f(this.dict["s"]);
};
var $s$sym_getfieldsref48 = function(f,refmask) {
return f(R.derefField(this.dict["s"],false,refmask[0]));
};
var $s$sym_mutablemask49 = [false];
var $s$sym$base45 = {"$fieldNames":["s"],
"_match":R.makeMatch("s-sym",1)};
var $s$sym$brander46 = R.namedBrander("s-sym",L[9]);
var $s$sym$brands47 = {};
$s$sym$brands47[S$Exp19._brand] = true;
$s$sym$brands47[$s$sym$brander46._brand] = true;
var s$sym51 = R.makeVariantConstructor(L[11],function() {
return [$type$String14];
},["s52"],[L[10]],[false],["s52"],$s$sym_mutablemask49,$s$sym$base45,$s$sym$brands47,"s-sym",$s$sym_getfieldsref48,$s$sym_getfields50,$s$sym$base45);
var anf_assign54 = R.makeObject({"S-Exp":G(S$Exp19,"test",L[12]),
"is-s-list":G($s$list$brander21,"test",L[0]),
"s-list":s$list26,
"is-s-num":G($s$num$brander30,"test",L[3]),
"s-num":s$num35,
"is-s-str":G($s$str$brander38,"test",L[6]),
"s-str":s$str43,
"is-s-sym":G($s$sym$brander46,"test",L[9]),
"s-sym":s$sym51});
S$Exp55.$var = anf_assign54;
var anf_bracket56 = S$Exp55.$var;
$al18 = L[12];
var anf_assign57 = G(anf_bracket56,"S-Exp",L[12]);
is$S$Exp58.$var = anf_assign57;
var anf_bracket59 = S$Exp55.$var;
$al18 = L[0];
var anf_assign60 = G(anf_bracket59,"is-s-list",L[0]);
is$s$list61.$var = anf_assign60;
var anf_bracket62 = S$Exp55.$var;
$al18 = L[0];
var anf_assign63 = G(anf_bracket62,"s-list",L[0]);
s$list64.$var = anf_assign63;
var anf_bracket65 = S$Exp55.$var;
$al18 = L[3];
var anf_assign66 = G(anf_bracket65,"is-s-num",L[3]);
is$s$num67.$var = anf_assign66;
var anf_bracket68 = S$Exp55.$var;
$al18 = L[3];
var anf_assign71 = G(anf_bracket68,"s-num",L[3]);
s$num72.$var = anf_assign71;
var anf_bracket73 = S$Exp55.$var;
$al18 = L[6];
var anf_assign74 = G(anf_bracket73,"is-s-str",L[6]);
is$s$str75.$var = anf_assign74;
var anf_bracket76 = S$Exp55.$var;
$al18 = L[6];
var anf_assign77 = G(anf_bracket76,"s-str",L[6]);
s$str78.$var = anf_assign77;
var anf_bracket79 = S$Exp55.$var;
$al18 = L[9];
var anf_assign80 = G(anf_bracket79,"is-s-sym",L[9]);
is$s$sym81.$var = anf_assign80;
var anf_bracket82 = S$Exp55.$var;
$al18 = L[9];
var anf_assign83 = G(anf_bracket82,"s-sym",L[9]);
s$sym84.$var = anf_assign83;
var defined_value101 = s$sym84.$var;
var defined_value102 = is$s$sym81.$var;
var defined_value103 = s$str78.$var;
var defined_value104 = is$s$str75.$var;
var defined_value105 = s$num72.$var;
var defined_value106 = is$s$num67.$var;
var defined_value107 = s$list64.$var;
var defined_value108 = is$s$list61.$var;
var defined_value109 = is$S$Exp58.$var;
$step14 = 1;
$al18 = L[13];
$field85 = R.getColonFieldLoc(builtins1,"trace-value",L[13]);
if(R.isMethod($field85)) {
$ans17 = $field85.full_meth(builtins1,L[13],nothing2);
} else {
if(!(R.isFunction($field85))) {
R.ffi.throwNonFunApp(L[13],$field85);
}
$ans17 = $field85.app(L[13],nothing2);
}
break;
case 1: var answer99 = $ans17;
var anf_obj86 = is$S$Exp58.$var;
var anf_obj87 = s$list64.$var;
var anf_obj66 = is$s$list61.$var;
var anf_obj88 = s$num72.$var;
var anf_obj91 = is$s$num67.$var;
var anf_obj92 = s$str78.$var;
var anf_obj67 = is$s$str75.$var;
var anf_obj93 = s$sym84.$var;
var anf_obj89 = is$s$sym81.$var;
var provides98 = R.makeObject({"is-S-Exp":anf_obj86,
"s-list":anf_obj87,
"is-s-list":anf_obj66,
"s-num":anf_obj88,
"is-s-num":anf_obj91,
"s-str":anf_obj92,
"is-s-str":anf_obj67,
"s-sym":anf_obj93,
"is-s-sym":anf_obj89});
$step14 = 2;
$al18 = L[12];
$field94 = R.getColonFieldLoc(builtins1,"current-checker",L[12]);
if(R.isMethod($field94)) {
$ans17 = $field94.full_meth(builtins1);
} else {
if(!(R.isFunction($field94))) {
R.ffi.throwNonFunApp(L[12],$field94);
}
$ans17 = $field94.app();
}
break;
case 2: var anf_method_obj95 = $ans17;
$step14 = 3;
$al18 = L[12];
$field96 = R.getColonFieldLoc(anf_method_obj95,"results",L[12]);
if(R.isMethod($field96)) {
$ans17 = $field96.full_meth(anf_method_obj95);
} else {
if(!(R.isFunction($field96))) {
R.ffi.throwNonFunApp(L[12],$field96);
}
$ans17 = $field96.app();
}
break;
case 3: var checks100 = $ans17;
$step14 = 4;
$ans17 = R.makeObject({"answer":answer99,
"namespace":NAMESPACE,
"defined-values":{"s-sym":defined_value101,
"is-s-sym":defined_value102,
"s-str":defined_value103,
"is-s-str":defined_value104,
"s-num":defined_value105,
"is-s-num":defined_value106,
"s-list":defined_value107,
"is-s-list":defined_value108,
"is-S-Exp":defined_value109,
"lists":lists4},
"defined-types":{"List":List27,
"S-Exp":S$Exp97,
"lists":lists10},
"provide-plus-types":R.makeObject({"values":provides98,
"types":{"List":List27,
"S-Exp":S$Exp97}}),
"checks":checks100});
break;
case 4: ++R.GAS;
return $ans17;
default: throw "No case numbered " + $step14 + " in $toplevel15";
}
}
} catch($e110) {
if(R.isCont($e110) && ($step14 !== 4)) {
$e110.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al18,$toplevel15,$step14,[],[S$Exp97,List27,is$S$Exp58,is$s$list61,s$list64,is$s$num67,s$num72,is$s$str75,s$str78,is$s$sym81,s$sym84,defined_value101,defined_value102,defined_value103,defined_value104,defined_value105,defined_value106,defined_value107,defined_value108,defined_value109,answer99,provides98]);
}
if(R.isPyretException($e110)) {
$e110.pyretStack.push($al18);
}
throw $e110;
}
};
return R.safeCall($toplevel15,function(moduleVal) {
R.modules["$builtin://s$exp$structs11"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}}),
"builtin://s-exp":({ 
  requires: [
    { "import-type": "builtin", "name": "s-exp-structs" }
  ],
  nativeRequires: ["s-expression"],
  provides: {},
  theModule: function(RUNTIME, NAMESPACE, uri, sstruct, sexp) {
    var gf = RUNTIME.getField;
    var vals = gf(sstruct, "values");
    var typs = gf(sstruct, "types");
    function readSexp(s) {
      RUNTIME.checkString(s);
      RUNTIME.checkArity(1, arguments);
      // Wrap in quotes to satisfy parser for simple atoms like "a"
      var jsVal = new sexp("(" + s + ")");
      var sList = gf(vals, "s-list");
      var sStr = gf(vals, "s-str");
      var sNum = gf(vals, "s-num");
      var sSym = gf(vals, "s-sym");
      var list = function(l) { return sList.app(RUNTIME.ffi.makeList(l)); }
      var str = function(s) { return sStr.app(RUNTIME.makeString(s)); }
      var num = function(nstr) { return sNum.app(RUNTIME.makeNumberFromString(nstr)); }
      var sym = function(x) { return sSym.app(RUNTIME.makeString(x)); }
      function convert(v) {
        if(v instanceof String) {
          return str(String(v));
        } else if (typeof v === "string") {
          if(RUNTIME.string_isnumber(v)) {
            return num(v);
          } else {
            if(v.indexOf("'") !== -1 || v.indexOf('"') !== -1) {
              RUNTIME.ffi.throwMessageException("Invalid s-expression: " + s);
            }
            return sym(v);
          }
        }
        else if(Array.isArray(v)) {
          if(v.length === 0) { return list([]); }
          if(v[0] === "quote") {
            RUNTIME.ffi.throwMessageException("Invalid s-expression: Single quotation mark (') and keyword 'quote' not supported" + s);
          }
          return list(v.map(convert));
        }
        else {
          RUNTIME.ffi.throwMessageException("Invalid s-expression: " + s);
        }
      }
      if(Array.isArray(jsVal) && jsVal.length === 1) {
        return convert(jsVal[0]);
      }
      else {
        RUNTIME.ffi.throwMessageException("Invalid s-expression: " + s);
      }
    }
    return RUNTIME.makeObject({
      answer: RUNTIME.nothing,
      "provide-plus-types": RUNTIME.makeObject({
        "values": RUNTIME.makeObject({
          "s-list": gf(vals, "s-list"),
          "s-num": gf(vals, "s-num"),
          "s-str": gf(vals, "s-str"),
          "s-sym": gf(vals, "s-sym"),
          "is-s-list": gf(vals, "is-s-list"),
          "is-s-num": gf(vals, "is-s-num"),
          "is-s-str": gf(vals, "is-s-str"),
          "is-s-sym": gf(vals, "is-s-sym"),
          "read-s-exp": RUNTIME.makeFunction(readSexp)
        }),
        "types": {
          "S-Exp": typs["S-Exp"]
        }
      })
    });
  }
})
,
"builtin://base":({
  requires: [
    { "import-type": "builtin", name: "global" },
    { "import-type": "builtin", name: "option" },
    { "import-type": "builtin", name: "either" },
    { "import-type": "builtin", name: "error-display" },
    { "import-type": "builtin", name: "error" },
    { "import-type": "builtin", name: "equality" },
    { "import-type": "builtin", name: "valueskeleton" },
    { "import-type": "builtin", name: "lists" },
    { "import-type": "builtin", name: "arrays" },
    { "import-type": "builtin", name: "pick" },
    { "import-type": "builtin", name: "sets" },
    { "import-type": "builtin", name: "contracts" },
    { "import-type": "builtin", name: "srcloc" },
    { "import-type": "builtin", name: "render-error-display" },
    { "import-type": "builtin", name: "checker" },
    { "import-type": "builtin", name: "ffi" },
    { "import-type": "builtin", name: "table" },
    { "import-type": "builtin", name: "tables" },
    { "import-type": "builtin", name: "reactors" },
    { "import-type": "builtin", name: "data-source" },
    { "import-type": "builtin", "name": "s-exp" },
  ],
  provides: {},
  nativeRequires: [],
  theModule: function(runtime, namespace, uri /* intentionally blank */) {
    return runtime.makeObject({
      "provide-plus-types": runtime.makeObject({
        "values": runtime.makeObject({}),
        "types": {}
      })
    });
  }
})
,
"file:///home/puppyofkosh/my-pyret-lang/pyret-lang/examples/flat-benchmark-2.arr":({"requires":[{"import-type":"builtin",
"name":"arrays"},
{"import-type":"builtin",
"name":"base"},
{"import-type":"builtin",
"name":"error"},
{"import-type":"builtin",
"name":"global"},
{"import-type":"builtin",
"name":"lists"},
{"import-type":"builtin",
"name":"option"},
{"import-type":"builtin",
"name":"sets"}],
"provides":{"values":{"get-5":"tany",
"ntimes":"tany",
"use-flat":"tany"},
"datatypes":{},
"aliases":{}},
"nativeRequires":[],
"theModule":function(R,NAMESPACE,M,$arrays24,$$base25,$error26,$$global27,$lists28,$option29,$sets30) {
var G = R.getFieldLoc;
var U = function(loc,name) {
R.ffi.throwUninitializedIdMkLoc(loc,name);
};
var M = "file:///home/puppyofkosh/my-pyret-lang/pyret-lang/examples/flat-benchmark-2.arr";
var D = R.undefined;
var L = [[M,3,0,13,5,3,39],
[M,8,5,68,8,10,73],
[M,13,4,207,13,28,231],
[M,13,13,216,13,18,221],
[M,12,14,191,12,25,202],
[M,12,14,191,12,21,198],
[M,11,8,169,11,15,176],
[M,10,8,153,10,15,160],
[M,7,0,41,17,3,257],
[M,21,0,289,21,57,346],
[M,22,0,347,22,57,404],
[M,23,0,405,23,57,462],
[M,3,0,13,23,57,462],
[M,23,6,411,23,56,461],
[M,23,6,411,23,49,454],
[M,23,20,425,23,49,454],
[M,23,29,434,23,48,453],
[M,22,6,353,22,56,403],
[M,22,6,353,22,49,396],
[M,22,20,367,22,49,396],
[M,22,29,376,22,48,395],
[M,21,6,295,21,56,345],
[M,21,6,295,21,49,338],
[M,21,20,309,21,49,338],
[M,21,29,318,21,48,337],
[M,19,9,268,19,28,287],
[M,19,9,268,19,24,283]];
var builtins1 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"builtins");
var print2 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"print");
var _plus3 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_plus");
var tostring4 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"tostring");
var _times5 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_times");
var num$expt6 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"num-expt");
var _minus7 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_minus");
var _greaterthan8 = R.getField(R.getField(R.getField(R.modules["builtin://global"],"provide-plus-types"),"values"),"_greaterthan");
var arrays9 = R.getField($arrays24,"values");
var $base10 = R.getField($$base25,"values");
var error11 = R.getField($error26,"values");
var $global12 = R.getField($$global27,"values");
var lists13 = R.getField($lists28,"values");
var option14 = R.getField($option29,"values");
var sets15 = R.getField($sets30,"values");
var arrays16 = R.getField($arrays24,"types");
var $base17 = R.getField($$base25,"types");
var error18 = R.getField($error26,"types");
var $global19 = R.getField($$global27,"types");
var lists20 = R.getField($lists28,"types");
var option21 = R.getField($option29,"types");
var sets22 = R.getField($sets30,"types");
NAMESPACE = R.addModuleToNamespace(NAMESPACE,["array-to-list-now","array-length","array-get-now","array-set-now","array-of","is-array","array-from-list","build-array","array"],["Array"],$arrays24);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$base25);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$error26);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,[],[],$$global27);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,["fold4","fold3","fold2","fold","each4_n","each3_n","each2_n","each_n","each4","each3","each2","each","map4_n","map3_n","map2_n","map_n","map4","map3","map2","map","find","any","split-at","partition","filter","repeat","range-by","range","link","empty","is-link","is-empty","is-List","list"],["List"],$lists28);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,["some","none","is-some","is-none","is-Option"],["Option"],$option29);
NAMESPACE = R.addModuleToNamespace(NAMESPACE,["list-to-tree-set","list-to-list-set","list-to-set","empty-tree-set","empty-list-set","empty-set","list-set","tree-set","set"],["Set"],$sets30);
var $toplevel32 = function($$resumer38) {
var $step31 = 0;
var $ans34 = D;
var $al35 = L[12];
try {
if(R.isActivationRecord($$resumer38)) {
$step31 = $$resumer38.step;
$al35 = $$resumer38.from;
$ans34 = $$resumer38.ans;
$resumer38 = $$resumer38.args[0];
get$543 = $$resumer38.vars[0];
use$flat56 = $$resumer38.vars[1];
ntimes65 = $$resumer38.vars[2];
defined_value92 = $$resumer38.vars[3];
defined_value93 = $$resumer38.vars[4];
answer90 = $$resumer38.vars[5];
provides89 = $$resumer38.vars[6];
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step31) {
case 0: var get$543 = {"$var":D};
var use$flat56 = {"$var":D};
var $temp_lam37 = function($$resumer38) {
var $step36 = 0;
var $ans39 = D;
var $al40 = L[0];
try {
if(R.isActivationRecord($$resumer38)) {
$step36 = $$resumer38.step;
$al40 = $$resumer38.from;
$ans39 = $$resumer38.ans;
$resumer38 = $$resumer38.args[0];
} else {
var $l = arguments.length;
if($l !== 0) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[0],0,$t);
}
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step36) {
case 0: $step36 = 1;
$ans39 = (5);
break;
case 1: ++R.GAS;
return $ans39;
default: throw "No case numbered " + $step36 + " in $temp_lam37";
}
}
} catch($e41) {
if(R.isCont($e41) && ($step36 !== 1)) {
$e41.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al40,$temp_lam37,$step36,[],[]);
}
if(R.isPyretException($e41)) {
$e41.pyretStack.push($al40);
}
throw $e41;
}
};
var anf_assign42 = R.makeFunction($temp_lam37,"get-5");
get$543.$var = anf_assign42;
var $temp_lam45 = function($n46,$sum47) {
var $step44 = 0;
var $ans48 = D;
var $al49 = L[8];
try {
if(R.isActivationRecord($n46)) {
$step44 = $n46.step;
$al49 = $n46.from;
$ans48 = $n46.ans;
n46 = $n46.args[0];
sum47 = $n46.args[1];
a53 = $n46.vars[0];
b55 = $n46.vars[1];
new$sum59 = $n46.vars[2];
anf_fun57 = $n46.vars[3];
} else {
var $l = arguments.length;
if($l !== 2) {
var $t = new Array($l);
for(var $i = 0;$i < $l;++$i) {
$t[$i] = arguments[$i];
}
R.checkArityC(L[8],2,$t);
}
var n46 = $n46;
var sum47 = $sum47;
}
if(--R.GAS <= 0) {
R.EXN_STACKHEIGHT = 0;
throw R.makeCont();
}
while(true) {
switch($step44) {
case 0: $step44 = 1;
$al49 = L[1];
if(!(R.isFunction(_greaterthan8))) {
R.ffi.throwNonFunApp($al49,_greaterthan8);
}
$ans48 = _greaterthan8.app(n46,(0));
break;
case 1: var anf_arg50 = $ans48;
$al49 = L[1];
var anf_if60 = R.checkWrapBoolean(anf_arg50);
$step44 = R.isPyretTrue(anf_if60)?2:8;
break;
case 2: var anf_fun51 = get$543.$var;
$step44 = 3;
$al49 = L[7];
if(!(R.isFunction(anf_fun51))) {
R.ffi.throwNonFunApp($al49,anf_fun51);
}
$ans48 = anf_fun51.app();
break;
case 3: var a53 = $ans48;
var anf_fun52 = get$543.$var;
$step44 = 4;
$al49 = L[6];
if(!(R.isFunction(anf_fun52))) {
R.ffi.throwNonFunApp($al49,anf_fun52);
}
$ans48 = anf_fun52.app();
break;
case 4: var b55 = $ans48;
$step44 = 5;
$al49 = L[5];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al49,_plus3);
}
$ans48 = _plus3.app(sum47,a53);
break;
case 5: var anf_arg54 = $ans48;
$step44 = 6;
$al49 = L[4];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al49,_plus3);
}
$ans48 = _plus3.app(anf_arg54,b55);
break;
case 6: var new$sum59 = $ans48;
var anf_fun57 = use$flat56.$var;
$step44 = 7;
$al49 = L[3];
if(!(R.isFunction(_minus7))) {
R.ffi.throwNonFunApp($al49,_minus7);
}
$ans48 = _minus7.app(n46,(1));
break;
case 7: var anf_arg58 = $ans48;
$step44 = 9;
$al49 = L[2];
if(!(R.isFunction(anf_fun57))) {
R.ffi.throwNonFunApp($al49,anf_fun57);
}
$ans48 = anf_fun57.app(anf_arg58,new$sum59);
break;
case 8: $step44 = 9;
$ans48 = sum47;
break;
case 9: ++R.GAS;
return $ans48;
default: throw "No case numbered " + $step44 + " in $temp_lam45";
}
}
} catch($e61) {
if(R.isCont($e61) && ($step44 !== 9)) {
$e61.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al49,$temp_lam45,$step44,[n46,sum47],[a53,b55,new$sum59,anf_fun57]);
}
if(R.isPyretException($e61)) {
$e61.pyretStack.push($al49);
}
throw $e61;
}
};
var anf_assign62 = R.makeFunction($temp_lam45,"use-flat");
use$flat56.$var = anf_assign62;
$step31 = 1;
$al35 = L[26];
if(!(R.isFunction(num$expt6))) {
R.ffi.throwNonFunApp($al35,num$expt6);
}
$ans34 = num$expt6.app((10),(6));
break;
case 1: var anf_arg63 = $ans34;
$step31 = 2;
$al35 = L[25];
if(!(R.isFunction(_times5))) {
R.ffi.throwNonFunApp($al35,_times5);
}
$ans34 = _times5.app(anf_arg63,(2));
break;
case 2: var ntimes65 = $ans34;
var anf_fun64 = use$flat56.$var;
$step31 = 3;
$al35 = L[24];
if(!(R.isFunction(anf_fun64))) {
R.ffi.throwNonFunApp($al35,anf_fun64);
}
$ans34 = anf_fun64.app(ntimes65,(0));
break;
case 3: var anf_arg66 = $ans34;
$step31 = 4;
$al35 = L[23];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al35,tostring4);
}
$ans34 = tostring4.app(anf_arg66);
break;
case 4: var anf_arg67 = $ans34;
$step31 = 5;
$al35 = L[22];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al35,_plus3);
}
$ans34 = _plus3.app(("Sum 1 is "),anf_arg67);
break;
case 5: var anf_arg68 = $ans34;
$step31 = 6;
$al35 = L[21];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al35,_plus3);
}
$ans34 = _plus3.app(anf_arg68,("\n"));
break;
case 6: var anf_arg69 = $ans34;
$step31 = 7;
$al35 = L[9];
if(!(R.isFunction(print2))) {
R.ffi.throwNonFunApp($al35,print2);
}
$ans34 = print2.app(anf_arg69);
break;
case 7: var anf_arg70 = $ans34;
$step31 = 8;
$al35 = L[9];
$field71 = R.getColonFieldLoc(builtins1,"trace-value",L[9]);
if(R.isMethod($field71)) {
$ans34 = $field71.full_meth(builtins1,L[9],anf_arg70);
} else {
if(!(R.isFunction($field71))) {
R.ffi.throwNonFunApp(L[9],$field71);
}
$ans34 = $field71.app(L[9],anf_arg70);
}
break;
case 8: var anf_fun72 = use$flat56.$var;
$step31 = 9;
$al35 = L[20];
if(!(R.isFunction(anf_fun72))) {
R.ffi.throwNonFunApp($al35,anf_fun72);
}
$ans34 = anf_fun72.app(ntimes65,(0));
break;
case 9: var anf_arg73 = $ans34;
$step31 = 10;
$al35 = L[19];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al35,tostring4);
}
$ans34 = tostring4.app(anf_arg73);
break;
case 10: var anf_arg74 = $ans34;
$step31 = 11;
$al35 = L[18];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al35,_plus3);
}
$ans34 = _plus3.app(("Sum 2 is "),anf_arg74);
break;
case 11: var anf_arg75 = $ans34;
$step31 = 12;
$al35 = L[17];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al35,_plus3);
}
$ans34 = _plus3.app(anf_arg75,("\n"));
break;
case 12: var anf_arg76 = $ans34;
$step31 = 13;
$al35 = L[10];
if(!(R.isFunction(print2))) {
R.ffi.throwNonFunApp($al35,print2);
}
$ans34 = print2.app(anf_arg76);
break;
case 13: var anf_arg77 = $ans34;
$step31 = 14;
$al35 = L[10];
$field78 = R.getColonFieldLoc(builtins1,"trace-value",L[10]);
if(R.isMethod($field78)) {
$ans34 = $field78.full_meth(builtins1,L[10],anf_arg77);
} else {
if(!(R.isFunction($field78))) {
R.ffi.throwNonFunApp(L[10],$field78);
}
$ans34 = $field78.app(L[10],anf_arg77);
}
break;
case 14: var defined_value92 = use$flat56.$var;
var defined_value93 = get$543.$var;
var anf_fun79 = use$flat56.$var;
$step31 = 15;
$al35 = L[16];
if(!(R.isFunction(anf_fun79))) {
R.ffi.throwNonFunApp($al35,anf_fun79);
}
$ans34 = anf_fun79.app(ntimes65,(0));
break;
case 15: var anf_arg80 = $ans34;
$step31 = 16;
$al35 = L[15];
if(!(R.isFunction(tostring4))) {
R.ffi.throwNonFunApp($al35,tostring4);
}
$ans34 = tostring4.app(anf_arg80);
break;
case 16: var anf_arg81 = $ans34;
$step31 = 17;
$al35 = L[14];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al35,_plus3);
}
$ans34 = _plus3.app(("Sum 3 is "),anf_arg81);
break;
case 17: var anf_arg82 = $ans34;
$step31 = 18;
$al35 = L[13];
if(!(R.isFunction(_plus3))) {
R.ffi.throwNonFunApp($al35,_plus3);
}
$ans34 = _plus3.app(anf_arg82,("\n"));
break;
case 18: var anf_arg83 = $ans34;
$step31 = 19;
$al35 = L[11];
if(!(R.isFunction(print2))) {
R.ffi.throwNonFunApp($al35,print2);
}
$ans34 = print2.app(anf_arg83);
break;
case 19: var anf_arg84 = $ans34;
$step31 = 20;
$al35 = L[11];
$field85 = R.getColonFieldLoc(builtins1,"trace-value",L[11]);
if(R.isMethod($field85)) {
$ans34 = $field85.full_meth(builtins1,L[11],anf_arg84);
} else {
if(!(R.isFunction($field85))) {
R.ffi.throwNonFunApp(L[11],$field85);
}
$ans34 = $field85.app(L[11],anf_arg84);
}
break;
case 20: var answer90 = $ans34;
var provides89 = R.makeObject({});
$step31 = 21;
$al35 = L[12];
$field86 = R.getColonFieldLoc(builtins1,"current-checker",L[12]);
if(R.isMethod($field86)) {
$ans34 = $field86.full_meth(builtins1);
} else {
if(!(R.isFunction($field86))) {
R.ffi.throwNonFunApp(L[12],$field86);
}
$ans34 = $field86.app();
}
break;
case 21: var anf_method_obj87 = $ans34;
$step31 = 22;
$al35 = L[12];
$field88 = R.getColonFieldLoc(anf_method_obj87,"results",L[12]);
if(R.isMethod($field88)) {
$ans34 = $field88.full_meth(anf_method_obj87);
} else {
if(!(R.isFunction($field88))) {
R.ffi.throwNonFunApp(L[12],$field88);
}
$ans34 = $field88.app();
}
break;
case 22: var checks91 = $ans34;
$step31 = 23;
$ans34 = R.makeObject({"answer":answer90,
"namespace":NAMESPACE,
"defined-values":{"ntimes":ntimes65,
"use-flat":defined_value92,
"get-5":defined_value93,
"sets":sets15,
"error":error11,
"option":option14,
"lists":lists13,
"arrays":arrays9,
"$base":$base10,
"$global":$global12},
"defined-types":{"sets":sets22,
"error":error18,
"option":option21,
"lists":lists20,
"arrays":arrays16,
"$base":$base17,
"$global":$global19},
"provide-plus-types":R.makeObject({"values":provides89,
"types":{}}),
"checks":checks91});
break;
case 23: ++R.GAS;
return $ans34;
default: throw "No case numbered " + $step31 + " in $toplevel32";
}
}
} catch($e94) {
if(R.isCont($e94) && ($step31 !== 23)) {
$e94.stack[R.EXN_STACKHEIGHT++] = R.makeActivationRecord($al35,$toplevel32,$step31,[],[get$543,use$flat56,ntimes65,defined_value92,defined_value93,answer90,provides89]);
}
if(R.isPyretException($e94)) {
$e94.pyretStack.push($al35);
}
throw $e94;
}
};
return R.safeCall($toplevel32,function(moduleVal) {
R.modules["$file:///home/puppyofkosh/my$pyret$lang/pyret$lang/examples/flat$benchmark$2.arr23"] = moduleVal;
return moduleVal;
},"Evaluating $toplevel");
}})},
"depMap":{"builtin://global":{},
"builtin://option":{"builtin(global)":"builtin://global"},
"builtin://either":{"builtin(global)":"builtin://global"},
"builtin://error-display":{"builtin(global)":"builtin://global"},
"builtin://valueskeleton":{"builtin(global)":"builtin://global"},
"builtin://error":{"builtin(error-display)":"builtin://error-display",
"builtin(global)":"builtin://global",
"builtin(option)":"builtin://option",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://equality":{"builtin(error)":"builtin://error",
"builtin(global)":"builtin://global"},
"builtin://lists":{"builtin(either)":"builtin://either",
"builtin(equality)":"builtin://equality",
"builtin(global)":"builtin://global",
"builtin(option)":"builtin://option",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://arrays":{"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://pick":{"builtin(global)":"builtin://global"},
"builtin://sets":{"builtin(arrays)":"builtin://arrays",
"builtin(equality)":"builtin://equality",
"builtin(error)":"builtin://error",
"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option",
"builtin(pick)":"builtin://pick",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://contracts":{"builtin(error-display)":"builtin://error-display",
"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option"},
"builtin://srcloc":{"builtin(global)":"builtin://global",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://render-error-display":{"builtin(either)":"builtin://either",
"builtin(error-display)":"builtin://error-display",
"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option",
"builtin(srcloc)":"builtin://srcloc"},
"builtin://ffi":{"builtin(contracts)":"builtin://contracts",
"builtin(either)":"builtin://either",
"builtin(equality)":"builtin://equality",
"builtin(error)":"builtin://error",
"builtin(error-display)":"builtin://error-display",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option",
"builtin(sets)":"builtin://sets",
"builtin(srcloc)":"builtin://srcloc",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://checker":{"builtin(either)":"builtin://either",
"builtin(error)":"builtin://error",
"builtin(error-display)":"builtin://error-display",
"builtin(ffi)":"builtin://ffi",
"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option",
"builtin(render-error-display)":"builtin://render-error-display",
"builtin(srcloc)":"builtin://srcloc",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://table":{"builtin(ffi)":"builtin://ffi",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://tables":{"builtin(global)":"builtin://global"},
"builtin://reactor-events":{"builtin(global)":"builtin://global"},
"builtin://reactors":{"builtin(reactor-events)":"builtin://reactor-events",
"builtin(table)":"builtin://table",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"builtin://data-source":{"builtin(global)":"builtin://global",
"builtin(option)":"builtin://option"},
"builtin://s-exp-structs":{"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists"},
"builtin://s-exp":{"builtin(s-exp-structs)":"builtin://s-exp-structs"},
"builtin://base":{"builtin(arrays)":"builtin://arrays",
"builtin(checker)":"builtin://checker",
"builtin(contracts)":"builtin://contracts",
"builtin(data-source)":"builtin://data-source",
"builtin(either)":"builtin://either",
"builtin(equality)":"builtin://equality",
"builtin(error)":"builtin://error",
"builtin(error-display)":"builtin://error-display",
"builtin(ffi)":"builtin://ffi",
"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option",
"builtin(pick)":"builtin://pick",
"builtin(reactors)":"builtin://reactors",
"builtin(render-error-display)":"builtin://render-error-display",
"builtin(s-exp)":"builtin://s-exp",
"builtin(sets)":"builtin://sets",
"builtin(srcloc)":"builtin://srcloc",
"builtin(table)":"builtin://table",
"builtin(tables)":"builtin://tables",
"builtin(valueskeleton)":"builtin://valueskeleton"},
"file:///home/puppyofkosh/my-pyret-lang/pyret-lang/examples/flat-benchmark-2.arr":{"builtin(arrays)":"builtin://arrays",
"builtin(base)":"builtin://base",
"builtin(error)":"builtin://error",
"builtin(global)":"builtin://global",
"builtin(lists)":"builtin://lists",
"builtin(option)":"builtin://option",
"builtin(sets)":"builtin://sets"}},
"toLoad":["builtin://global","builtin://option","builtin://either","builtin://error-display","builtin://valueskeleton","builtin://error","builtin://equality","builtin://lists","builtin://arrays","builtin://pick","builtin://sets","builtin://contracts","builtin://srcloc","builtin://render-error-display","builtin://ffi","builtin://checker","builtin://table","builtin://tables","builtin://reactor-events","builtin://reactors","builtin://data-source","builtin://s-exp-structs","builtin://s-exp","builtin://base","file:///home/puppyofkosh/my-pyret-lang/pyret-lang/examples/flat-benchmark-2.arr"]}
});
var require = require("requirejs");
require(["pyret-base/js/runtime", "program"], function(runtimeLib, program) {

  var staticModules = program.staticModules;
  var depMap = program.depMap;
  var toLoad = program.toLoad;

  var main = toLoad[toLoad.length - 1];

  var runtime = runtimeLib.makeRuntime({
    stdout: function(s) { process.stdout.write(s); },
    stderr: function(s) { process.stderr.write(s); }
  });

  var EXIT_SUCCESS = 0;
  var EXIT_ERROR = 1;
  var EXIT_ERROR_RENDERING_ERROR = 2;
  var EXIT_ERROR_DISPLAYING_ERROR = 3;
  var EXIT_ERROR_CHECK_FAILURES = 4;
  var EXIT_ERROR_JS = 5;
  var EXIT_ERROR_UNKNOWN = 6;

  runtime.setParam("command-line-arguments", process.argv.slice(1));

  var postLoadHooks = {
    "builtin://srcloc": function(srcloc) {
      runtime.srcloc = runtime.getField(runtime.getField(srcloc, "provide-plus-types"), "values");
    },
    "builtin://ffi": function(ffi) {
      ffi = ffi.jsmod;
      runtime.ffi = ffi;
      runtime["throwMessageException"] = ffi.throwMessageException;
      runtime["throwNoBranchesMatched"] = ffi.throwNoBranchesMatched;
      runtime["throwNoCasesMatched"] = ffi.throwNoCasesMatched;
      runtime["throwNonBooleanCondition"] = ffi.throwNonBooleanCondition;
      runtime["throwNonBooleanOp"] = ffi.throwNonBooleanOp;
      runtime["throwUnfinishedTemplate"] = ffi.throwUnfinishedTemplate;
      runtime["throwInvalidTableColumn"] = ffi.throwInvalidTableColumn;
      runtime["toArray"] = ffi.toArray;

      var checkList = runtime.makeCheckType(ffi.isList, "List");
      runtime["checkList"] = checkList;

      runtime["checkEQ"] = runtime.makeCheckType(ffi.isEqualityResult, "EqualityResult");
    },
    "builtin://table": function(table) {
      table = table.jsmod;
      runtime["makeTable"] = table.makeTable;
      runtime["openTable"] = table.openTable;
      runtime["checkTable"] = runtime.makeCheckType(table.isTable, "Table");
      runtime["isTable"] = table.isTable;
      runtime["checkWrapTable"] = function(val) {
        runtime.checkTable(val);
        return val;
      };
      runtime.makePrimAnn("Table", table.isTable);
    },
    "builtin://data-source": function(ds) {
      ds = runtime.getField(runtime.getField(ds, "provide-plus-types"), "values");
      // Variadic convenience function for desugaring use.
      // 'type' corresponds to a loader option in `data-source.arr`

      runtime["asLoaderOption"] = function(type) {
        switch(type) {
        case "sanitizer":
          return runtime.getField(ds, "sanitize-col").app(arguments[1], arguments[2]);
        default:
          runtime.ffi.throwMessageException("Internal error: Invalid loader option type: " + type);
        }
      };
      // Convenience function for JS library use
      runtime["extractLoaderOption"] = function(opt) {
        var isSanitizer = runtime.getField(ds, "is-sanitize-col");
        if (runtime.unwrap(isSanitizer.app(opt))) {
          return {
            type: "sanitizer",
            col: runtime.getField(opt, "col"),
            sanitizer: runtime.getField(opt, "sanitizer")
          };
        } else {
          runtime.ffi.throwMessageException("Internal error: Cannot coerce non-loader option");
        }
      }
      runtime["builtin_sanitizers"] = {
        option : runtime.getField(ds, "option-sanitizer"),
        string : runtime.getField(ds, "string-sanitizer"),
        num : runtime.getField(ds, "num-sanitizer"),
        bool: runtime.getField(ds, "bool-sanitizer"),
        strict_num : runtime.getField(ds, "strict-num-sanitizer"),
        strings_only : runtime.getField(ds, "strings-only"),
        numbers_only : runtime.getField(ds, "numbers-only"),
        booleans_only : runtime.getField(ds, "booleans-only"),
        empty_only : runtime.getField(ds, "empty-only")
      };

      runtime["makeCStr"] = runtime.getField(ds, "c-str").app;
      runtime["makeCNum"] = runtime.getField(ds, "c-num").app;
      runtime["makeCBool"] = runtime.getField(ds, "c-bool").app;
      runtime["makeCCustom"] = runtime.getField(ds, "c-custom").app;
      runtime["makeCEmpty"] = function() { return runtime.getField(ds, "c-empty"); };

      runtime["isCStr"] = function(v) { return runtime.unwrap(runtime.getField(ds, "is-c-str").app(v)); };
      runtime["isCNum"] = function(v) { return runtime.unwrap(runtime.getField(ds, "is-c-num").app(v)); };
      runtime["isCBool"] = function(v) { return runtime.unwrap(runtime.getField(ds, "is-c-bool").app(v)); };
      runtime["isCCustom"] = function(v) { return runtime.unwrap(runtime.getField(ds, "is-c-custom").app(v)); };
      runtime["isCEmpty"] = function(v) { return runtime.unwrap(runtime.getField(ds, "is-c-empty").app(v)); };

      runtime["unwrapCellContent"] = function(v) {
        if (runtime.isCStr(v)) {
          return {type: "str", value: runtime.getField(v, "s")};
        } else if (runtime.isCNum(v)) {
          return {type: "num", value: runtime.getField(v, "n")};
        } else if (runtime.isCBool(v)) {
          return {type: "bool", value: runtime.getField(v, "b")};
        } else if (runtime.isCCustom(v)) {
          return {type: "custom", value: runtime.getField(v, "datum")};
        } else if (runtime.isCEmpty(v)) {
          return {type: "empty"};
        } else {
          runtime.ffi.throwMessageException("Internal error: Cannot unwrap non-cell content");
        }
      };

      runtime["makeLoadedTable"] = function(headers, contents) {
        // Headers can either be [name, sanitizer] arrays or
        // {name: name, sanitizer: sanitizer} objects
        headers = headers.map(function(h) {
          if (h.sanitizer) {
            return runtime.makeTuple([h.name, h.sanitizer]);
          } else {
            return runtime.makeTuple(h);
          }
        });
        return runtime.makeTuple([headers, contents]);
      };
      runtime["checkCellContent"] = runtime.makeCheckType(
        runtime.getField(ds, "is-CellContent").app, "CellContent");
    },
    "builtin://reactors": function(reactor) {
      var r = runtime.getField(runtime.getField(reactor, "provide-plus-types"), "values");
      runtime.setParam("makeReactor", runtime.getField(r, "make-reactor").app);
    },
    "builtin://checker": function(checker) {
      checker = runtime.getField(runtime.getField(checker, "provide-plus-types"), "values");
      // NOTE(joe): This is the place to add checkAll
      var currentChecker = runtime.getField(checker, "make-check-context").app(runtime.makeString(main), true);
      runtime.setParam("current-checker", currentChecker);
    }
  };
  postLoadHooks[main] = function(answer) {
    var checkerLib = runtime.modules["builtin://checker"];
    var checker = runtime.getField(runtime.getField(checkerLib, "provide-plus-types"), "values");
    var getStack = function(err) {
      console.error("The error is: ", err);
      var locArray = err.val.pyretStack.map(runtime.makeSrcloc);
      var locList = runtime.ffi.makeList(locArray);
      return locList;
    };
    var getStackP = runtime.makeFunction(getStack, "get-stack");
    var toCall = runtime.getField(checker, "render-check-results-stack");
    var checks = runtime.getField(answer, "checks");
    runtime.safeCall(function() {
      return toCall.app(checks, getStackP);
    }, function(summary) {
      if(runtime.isObject(summary)) {
        process.stdout.write(runtime.getField(summary, "message"));
        process.stdout.write("\n");
        var errs = runtime.getField(summary, "errored");
        var failed = runtime.getField(summary, "failed");
        if(errs !== 0 || failed !== 0) {
          process.exit(EXIT_ERROR_CHECK_FAILURES);
        }
        else {
          process.exit(EXIT_SUCCESS);
        }
      }
    });
  }

  function renderErrorMessageAndExit(execRt, res) {
    if (execRt.isPyretException(res.exn)) {
      var rendererrorMod = execRt.modules["builtin://render-error-display"];
      var rendererror = execRt.getField(rendererrorMod, "provide-plus-types");
      var gf = execRt.getField;
      var exnStack = res.exn.stack;
      var pyretStack = res.exn.pyretStack;
      execRt.runThunk(
        function() {
          if (execRt.isObject(res.exn.exn) && execRt.hasField(res.exn.exn, "render-reason")) {
            return execRt.getColonField(res.exn.exn, "render-reason").full_meth(res.exn.exn);
          } else {
            return execRt.ffi.edEmbed(res.exn.exn);
          }
        },
        function(reasonResult) {
          if (execRt.isFailureResult(reasonResult)) {
            console.error("While trying to report that Pyret terminated with an error:\n" + JSON.stringify(res)
                          + "\nPyret encountered an error rendering that error:\n" + JSON.stringify(reasonResult)
                          + "\nStack:\n" + JSON.stringify(exnStack)
                          + "\nPyret stack:\n" + execRt.printPyretStack(pyretStack, true));
            process.exit(EXIT_ERROR_RENDERING_ERROR);
          } else {
            execRt.runThunk(
              function() {
                var cliRender = execRt.makeFunction(function(val) { 
                  return execRt.toReprJS(val, execRt.ReprMethods["$cli"]); 
                }, "cliRender");
                return gf(gf(rendererror, "values"), "display-to-string").app(
                  reasonResult.result,
                  cliRender,
                  execRt.ffi.makeList(res.exn.pyretStack.map(execRt.makeSrcloc)));
              },
              function(printResult) {
                if(execRt.isSuccessResult(printResult)) {
                  console.error(printResult.result);
                  console.error("\nPyret stack:\n" + execRt.printPyretStack(res.exn.pyretStack));
                  process.exit(EXIT_ERROR);
                } else {
                  console.error(
                      "While trying to report that Pyret terminated with an error:\n" + JSON.stringify(res)
                      + "\ndisplaying that error produced another error:\n" + JSON.stringify(printResult)
                      + "\nStack:\n" + JSON.stringify(exnStack)
                      + "\nPyret stack:\n" + execRt.printPyretStack(pyretStack, true));
                  process.exit(EXIT_ERROR_DISPLAYING_ERROR);
                }
              }, "errordisplay->to-string");
          }
        }, "error->display");
    } else if (res.exn && res.exn.stack) {
      console.error("Abstraction breaking: Uncaught JavaScript error:\n", res.exn);
      console.error("Stack trace:\n", res.exn.stack);
      process.exit(EXIT_ERROR_JS);
    } else {
      console.error("Unknown error result: ", res.exn);
      process.exit(EXIT_ERROR_UNKNOWN);
    }
  }

  function onComplete(result) {
    if(runtime.isSuccessResult(result)) {
      //console.log("The program completed successfully");
      //console.log(result);
      process.exit(EXIT_SUCCESS);
    }
    else if (runtime.isFailureResult(result)) {
      console.error("The run ended in error:");
      try {
        renderErrorMessageAndExit(runtime, result);
      } catch(e) {
        console.error("EXCEPTION!", e);
      }
    } else {
      console.error("The run ended in an unknown error: ", result);
      console.error(result.exn.stack);
      process.exit(EXIT_ERROR_UNKNOWN);
    }
  }

  return runtime.runThunk(function() {
    runtime.modules = {};
    return runtime.runStandalone(staticModules, runtime.modules, depMap, toLoad, postLoadHooks);
  }, onComplete);
});
